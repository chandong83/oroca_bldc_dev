
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x6>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f001 f8ba 	bl	800d1d0 <__core_init>
 800c05c:	f004 f8e8 	bl	8010230 <__early_init>
 800c060:	481c      	ldr	r0, [pc, #112]	; (800c0d4 <endfiniloop+0xa>)
 800c062:	491d      	ldr	r1, [pc, #116]	; (800c0d8 <endfiniloop+0xe>)
 800c064:	4a1d      	ldr	r2, [pc, #116]	; (800c0dc <endfiniloop+0x12>)

0800c066 <msloop>:
 800c066:	4291      	cmp	r1, r2
 800c068:	bf3c      	itt	cc
 800c06a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c06e:	e7fa      	bcc.n	800c066 <msloop>
 800c070:	491b      	ldr	r1, [pc, #108]	; (800c0e0 <endfiniloop+0x16>)
 800c072:	4a17      	ldr	r2, [pc, #92]	; (800c0d0 <endfiniloop+0x6>)

0800c074 <psloop>:
 800c074:	4291      	cmp	r1, r2
 800c076:	bf3c      	itt	cc
 800c078:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07c:	e7fa      	bcc.n	800c074 <psloop>
 800c07e:	4919      	ldr	r1, [pc, #100]	; (800c0e4 <endfiniloop+0x1a>)
 800c080:	4a19      	ldr	r2, [pc, #100]	; (800c0e8 <endfiniloop+0x1e>)
 800c082:	4b1a      	ldr	r3, [pc, #104]	; (800c0ec <endfiniloop+0x22>)

0800c084 <dloop>:
 800c084:	429a      	cmp	r2, r3
 800c086:	bf3e      	ittt	cc
 800c088:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08c:	f842 0b04 	strcc.w	r0, [r2], #4
 800c090:	e7f8      	bcc.n	800c084 <dloop>
 800c092:	2000      	movs	r0, #0
 800c094:	4916      	ldr	r1, [pc, #88]	; (800c0f0 <endfiniloop+0x26>)
 800c096:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <endfiniloop+0x2a>)

0800c098 <bloop>:
 800c098:	4291      	cmp	r1, r2
 800c09a:	bf3c      	itt	cc
 800c09c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a0:	e7fa      	bcc.n	800c098 <bloop>
 800c0a2:	f001 f89d 	bl	800d1e0 <__late_init>
 800c0a6:	4c14      	ldr	r4, [pc, #80]	; (800c0f8 <endfiniloop+0x2e>)
 800c0a8:	4d14      	ldr	r5, [pc, #80]	; (800c0fc <endfiniloop+0x32>)

0800c0aa <initloop>:
 800c0aa:	42ac      	cmp	r4, r5
 800c0ac:	da03      	bge.n	800c0b6 <endinitloop>
 800c0ae:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b2:	4788      	blx	r1
 800c0b4:	e7f9      	b.n	800c0aa <initloop>

0800c0b6 <endinitloop>:
 800c0b6:	f006 fb3b 	bl	8012730 <main>
 800c0ba:	4c11      	ldr	r4, [pc, #68]	; (800c100 <endfiniloop+0x36>)
 800c0bc:	4d11      	ldr	r5, [pc, #68]	; (800c104 <endfiniloop+0x3a>)

0800c0be <finiloop>:
 800c0be:	42ac      	cmp	r4, r5
 800c0c0:	da03      	bge.n	800c0ca <endfiniloop>
 800c0c2:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c6:	4788      	blx	r1
 800c0c8:	e7f9      	b.n	800c0be <finiloop>

0800c0ca <endfiniloop>:
 800c0ca:	f001 b891 	b.w	800d1f0 <__default_exit>
 800c0ce:	0000      	.short	0x0000
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	55555555 	.word	0x55555555
 800c0d8:	20000000 	.word	0x20000000
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	20000400 	.word	0x20000400
 800c0e4:	08017bb0 	.word	0x08017bb0
 800c0e8:	20000800 	.word	0x20000800
 800c0ec:	2000108c 	.word	0x2000108c
 800c0f0:	20001090 	.word	0x20001090
 800c0f4:	20002f44 	.word	0x20002f44
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
 800c104:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f001 fb6c 	bl	800d810 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f001 fa8a 	bl	800d650 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f092 0f00 	teq	r2, #0
 800c42a:	bf14      	ite	ne
 800c42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c430:	4770      	bxeq	lr
 800c432:	b530      	push	{r4, r5, lr}
 800c434:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c440:	e720      	b.n	800c284 <__adddf3+0x138>
 800c442:	bf00      	nop

0800c444 <__aeabi_ul2d>:
 800c444:	ea50 0201 	orrs.w	r2, r0, r1
 800c448:	bf08      	it	eq
 800c44a:	4770      	bxeq	lr
 800c44c:	b530      	push	{r4, r5, lr}
 800c44e:	f04f 0500 	mov.w	r5, #0
 800c452:	e00a      	b.n	800c46a <__aeabi_l2d+0x16>

0800c454 <__aeabi_l2d>:
 800c454:	ea50 0201 	orrs.w	r2, r0, r1
 800c458:	bf08      	it	eq
 800c45a:	4770      	bxeq	lr
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c462:	d502      	bpl.n	800c46a <__aeabi_l2d+0x16>
 800c464:	4240      	negs	r0, r0
 800c466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c46a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c46e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c476:	f43f aedc 	beq.w	800c232 <__adddf3+0xe6>
 800c47a:	f04f 0203 	mov.w	r2, #3
 800c47e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c482:	bf18      	it	ne
 800c484:	3203      	addne	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c492:	f1c2 0320 	rsb	r3, r2, #32
 800c496:	fa00 fc03 	lsl.w	ip, r0, r3
 800c49a:	fa20 f002 	lsr.w	r0, r0, r2
 800c49e:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4a2:	ea40 000e 	orr.w	r0, r0, lr
 800c4a6:	fa21 f102 	lsr.w	r1, r1, r2
 800c4aa:	4414      	add	r4, r2
 800c4ac:	e6c1      	b.n	800c232 <__adddf3+0xe6>
 800c4ae:	bf00      	nop

0800c4b0 <__aeabi_dmul>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4be:	bf1d      	ittte	ne
 800c4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4c4:	ea94 0f0c 	teqne	r4, ip
 800c4c8:	ea95 0f0c 	teqne	r5, ip
 800c4cc:	f000 f8de 	bleq	800c68c <__aeabi_dmul+0x1dc>
 800c4d0:	442c      	add	r4, r5
 800c4d2:	ea81 0603 	eor.w	r6, r1, r3
 800c4d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4e2:	bf18      	it	ne
 800c4e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f0:	d038      	beq.n	800c564 <__aeabi_dmul+0xb4>
 800c4f2:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4f6:	f04f 0500 	mov.w	r5, #0
 800c4fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c502:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c506:	f04f 0600 	mov.w	r6, #0
 800c50a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c50e:	f09c 0f00 	teq	ip, #0
 800c512:	bf18      	it	ne
 800c514:	f04e 0e01 	orrne.w	lr, lr, #1
 800c518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c51c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c524:	d204      	bcs.n	800c530 <__aeabi_dmul+0x80>
 800c526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c52a:	416d      	adcs	r5, r5
 800c52c:	eb46 0606 	adc.w	r6, r6, r6
 800c530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c53c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c548:	bf88      	it	hi
 800c54a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c54e:	d81e      	bhi.n	800c58e <__aeabi_dmul+0xde>
 800c550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c554:	bf08      	it	eq
 800c556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c55a:	f150 0000 	adcs.w	r0, r0, #0
 800c55e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c568:	ea46 0101 	orr.w	r1, r6, r1
 800c56c:	ea40 0002 	orr.w	r0, r0, r2
 800c570:	ea81 0103 	eor.w	r1, r1, r3
 800c574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c578:	bfc2      	ittt	gt
 800c57a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c57e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c582:	bd70      	popgt	{r4, r5, r6, pc}
 800c584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c588:	f04f 0e00 	mov.w	lr, #0
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f300 80ab 	bgt.w	800c6e8 <__aeabi_dmul+0x238>
 800c592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c596:	bfde      	ittt	le
 800c598:	2000      	movle	r0, #0
 800c59a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c59e:	bd70      	pople	{r4, r5, r6, pc}
 800c5a0:	f1c4 0400 	rsb	r4, r4, #0
 800c5a4:	3c20      	subs	r4, #32
 800c5a6:	da35      	bge.n	800c614 <__aeabi_dmul+0x164>
 800c5a8:	340c      	adds	r4, #12
 800c5aa:	dc1b      	bgt.n	800c5e4 <__aeabi_dmul+0x134>
 800c5ac:	f104 0414 	add.w	r4, r4, #20
 800c5b0:	f1c4 0520 	rsb	r5, r4, #32
 800c5b4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5b8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5bc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5c0:	ea40 0002 	orr.w	r0, r0, r2
 800c5c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5d0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5d4:	eb42 0106 	adc.w	r1, r2, r6
 800c5d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5dc:	bf08      	it	eq
 800c5de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f1c4 040c 	rsb	r4, r4, #12
 800c5e8:	f1c4 0520 	rsb	r5, r4, #32
 800c5ec:	fa00 f304 	lsl.w	r3, r0, r4
 800c5f0:	fa20 f005 	lsr.w	r0, r0, r5
 800c5f4:	fa01 f204 	lsl.w	r2, r1, r4
 800c5f8:	ea40 0002 	orr.w	r0, r0, r2
 800c5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c604:	f141 0100 	adc.w	r1, r1, #0
 800c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c60c:	bf08      	it	eq
 800c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f1c4 0520 	rsb	r5, r4, #32
 800c618:	fa00 f205 	lsl.w	r2, r0, r5
 800c61c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c620:	fa20 f304 	lsr.w	r3, r0, r4
 800c624:	fa01 f205 	lsl.w	r2, r1, r5
 800c628:	ea43 0302 	orr.w	r3, r3, r2
 800c62c:	fa21 f004 	lsr.w	r0, r1, r4
 800c630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c634:	fa21 f204 	lsr.w	r2, r1, r4
 800c638:	ea20 0002 	bic.w	r0, r0, r2
 800c63c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c644:	bf08      	it	eq
 800c646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f094 0f00 	teq	r4, #0
 800c650:	d10f      	bne.n	800c672 <__aeabi_dmul+0x1c2>
 800c652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c656:	0040      	lsls	r0, r0, #1
 800c658:	eb41 0101 	adc.w	r1, r1, r1
 800c65c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c660:	bf08      	it	eq
 800c662:	3c01      	subeq	r4, #1
 800c664:	d0f7      	beq.n	800c656 <__aeabi_dmul+0x1a6>
 800c666:	ea41 0106 	orr.w	r1, r1, r6
 800c66a:	f095 0f00 	teq	r5, #0
 800c66e:	bf18      	it	ne
 800c670:	4770      	bxne	lr
 800c672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c676:	0052      	lsls	r2, r2, #1
 800c678:	eb43 0303 	adc.w	r3, r3, r3
 800c67c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c680:	bf08      	it	eq
 800c682:	3d01      	subeq	r5, #1
 800c684:	d0f7      	beq.n	800c676 <__aeabi_dmul+0x1c6>
 800c686:	ea43 0306 	orr.w	r3, r3, r6
 800c68a:	4770      	bx	lr
 800c68c:	ea94 0f0c 	teq	r4, ip
 800c690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c694:	bf18      	it	ne
 800c696:	ea95 0f0c 	teqne	r5, ip
 800c69a:	d00c      	beq.n	800c6b6 <__aeabi_dmul+0x206>
 800c69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6a0:	bf18      	it	ne
 800c6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6a6:	d1d1      	bne.n	800c64c <__aeabi_dmul+0x19c>
 800c6a8:	ea81 0103 	eor.w	r1, r1, r3
 800c6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6b0:	f04f 0000 	mov.w	r0, #0
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ba:	bf06      	itte	eq
 800c6bc:	4610      	moveq	r0, r2
 800c6be:	4619      	moveq	r1, r3
 800c6c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6c4:	d019      	beq.n	800c6fa <__aeabi_dmul+0x24a>
 800c6c6:	ea94 0f0c 	teq	r4, ip
 800c6ca:	d102      	bne.n	800c6d2 <__aeabi_dmul+0x222>
 800c6cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6d0:	d113      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6d2:	ea95 0f0c 	teq	r5, ip
 800c6d6:	d105      	bne.n	800c6e4 <__aeabi_dmul+0x234>
 800c6d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6dc:	bf1c      	itt	ne
 800c6de:	4610      	movne	r0, r2
 800c6e0:	4619      	movne	r1, r3
 800c6e2:	d10a      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6e4:	ea81 0103 	eor.w	r1, r1, r3
 800c6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c702:	bd70      	pop	{r4, r5, r6, pc}

0800c704 <__aeabi_ddiv>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c712:	bf1d      	ittte	ne
 800c714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c718:	ea94 0f0c 	teqne	r4, ip
 800c71c:	ea95 0f0c 	teqne	r5, ip
 800c720:	f000 f8a7 	bleq	800c872 <__aeabi_ddiv+0x16e>
 800c724:	eba4 0405 	sub.w	r4, r4, r5
 800c728:	ea81 0e03 	eor.w	lr, r1, r3
 800c72c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c734:	f000 8088 	beq.w	800c848 <__aeabi_ddiv+0x144>
 800c738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c73c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c74c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c75c:	429d      	cmp	r5, r3
 800c75e:	bf08      	it	eq
 800c760:	4296      	cmpeq	r6, r2
 800c762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c76a:	d202      	bcs.n	800c772 <__aeabi_ddiv+0x6e>
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c772:	1ab6      	subs	r6, r6, r2
 800c774:	eb65 0503 	sbc.w	r5, r5, r3
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c77e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c786:	ebb6 0e02 	subs.w	lr, r6, r2
 800c78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c78e:	bf22      	ittt	cs
 800c790:	1ab6      	subcs	r6, r6, r2
 800c792:	4675      	movcs	r5, lr
 800c794:	ea40 000c 	orrcs.w	r0, r0, ip
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c79e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7a6:	bf22      	ittt	cs
 800c7a8:	1ab6      	subcs	r6, r6, r2
 800c7aa:	4675      	movcs	r5, lr
 800c7ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7be:	bf22      	ittt	cs
 800c7c0:	1ab6      	subcs	r6, r6, r2
 800c7c2:	4675      	movcs	r5, lr
 800c7c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7c8:	085b      	lsrs	r3, r3, #1
 800c7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7d6:	bf22      	ittt	cs
 800c7d8:	1ab6      	subcs	r6, r6, r2
 800c7da:	4675      	movcs	r5, lr
 800c7dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7e0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7e4:	d018      	beq.n	800c818 <__aeabi_ddiv+0x114>
 800c7e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c7f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c7fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c7fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c802:	d1c0      	bne.n	800c786 <__aeabi_ddiv+0x82>
 800c804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c808:	d10b      	bne.n	800c822 <__aeabi_ddiv+0x11e>
 800c80a:	ea41 0100 	orr.w	r1, r1, r0
 800c80e:	f04f 0000 	mov.w	r0, #0
 800c812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c816:	e7b6      	b.n	800c786 <__aeabi_ddiv+0x82>
 800c818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c81c:	bf04      	itt	eq
 800c81e:	4301      	orreq	r1, r0
 800c820:	2000      	moveq	r0, #0
 800c822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c826:	bf88      	it	hi
 800c828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c82c:	f63f aeaf 	bhi.w	800c58e <__aeabi_dmul+0xde>
 800c830:	ebb5 0c03 	subs.w	ip, r5, r3
 800c834:	bf04      	itt	eq
 800c836:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c83e:	f150 0000 	adcs.w	r0, r0, #0
 800c842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c84c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c854:	bfc2      	ittt	gt
 800c856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c85a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c85e:	bd70      	popgt	{r4, r5, r6, pc}
 800c860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c864:	f04f 0e00 	mov.w	lr, #0
 800c868:	3c01      	subs	r4, #1
 800c86a:	e690      	b.n	800c58e <__aeabi_dmul+0xde>
 800c86c:	ea45 0e06 	orr.w	lr, r5, r6
 800c870:	e68d      	b.n	800c58e <__aeabi_dmul+0xde>
 800c872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c876:	ea94 0f0c 	teq	r4, ip
 800c87a:	bf08      	it	eq
 800c87c:	ea95 0f0c 	teqeq	r5, ip
 800c880:	f43f af3b 	beq.w	800c6fa <__aeabi_dmul+0x24a>
 800c884:	ea94 0f0c 	teq	r4, ip
 800c888:	d10a      	bne.n	800c8a0 <__aeabi_ddiv+0x19c>
 800c88a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c88e:	f47f af34 	bne.w	800c6fa <__aeabi_dmul+0x24a>
 800c892:	ea95 0f0c 	teq	r5, ip
 800c896:	f47f af25 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c89a:	4610      	mov	r0, r2
 800c89c:	4619      	mov	r1, r3
 800c89e:	e72c      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8a0:	ea95 0f0c 	teq	r5, ip
 800c8a4:	d106      	bne.n	800c8b4 <__aeabi_ddiv+0x1b0>
 800c8a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8aa:	f43f aefd 	beq.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	e722      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8b8:	bf18      	it	ne
 800c8ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8be:	f47f aec5 	bne.w	800c64c <__aeabi_dmul+0x19c>
 800c8c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8c6:	f47f af0d 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c8ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8ce:	f47f aeeb 	bne.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8d2:	e712      	b.n	800c6fa <__aeabi_dmul+0x24a>
	...

0800c8e0 <__aeabi_d2iz>:
 800c8e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c8e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800c8e8:	d215      	bcs.n	800c916 <__aeabi_d2iz+0x36>
 800c8ea:	d511      	bpl.n	800c910 <__aeabi_d2iz+0x30>
 800c8ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800c8f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800c8f4:	d912      	bls.n	800c91c <__aeabi_d2iz+0x3c>
 800c8f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c8fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c902:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c906:	fa23 f002 	lsr.w	r0, r3, r2
 800c90a:	bf18      	it	ne
 800c90c:	4240      	negne	r0, r0
 800c90e:	4770      	bx	lr
 800c910:	f04f 0000 	mov.w	r0, #0
 800c914:	4770      	bx	lr
 800c916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800c91a:	d105      	bne.n	800c928 <__aeabi_d2iz+0x48>
 800c91c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800c920:	bf08      	it	eq
 800c922:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800c926:	4770      	bx	lr
 800c928:	f04f 0000 	mov.w	r0, #0
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop

0800c930 <__aeabi_d2f>:
 800c930:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c934:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800c938:	bf24      	itt	cs
 800c93a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800c93e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800c942:	d90d      	bls.n	800c960 <__aeabi_d2f+0x30>
 800c944:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800c948:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800c94c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800c950:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800c954:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800c958:	bf08      	it	eq
 800c95a:	f020 0001 	biceq.w	r0, r0, #1
 800c95e:	4770      	bx	lr
 800c960:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800c964:	d121      	bne.n	800c9aa <__aeabi_d2f+0x7a>
 800c966:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800c96a:	bfbc      	itt	lt
 800c96c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800c970:	4770      	bxlt	lr
 800c972:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c976:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800c97a:	f1c2 0218 	rsb	r2, r2, #24
 800c97e:	f1c2 0c20 	rsb	ip, r2, #32
 800c982:	fa10 f30c 	lsls.w	r3, r0, ip
 800c986:	fa20 f002 	lsr.w	r0, r0, r2
 800c98a:	bf18      	it	ne
 800c98c:	f040 0001 	orrne.w	r0, r0, #1
 800c990:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c994:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800c998:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c99c:	ea40 000c 	orr.w	r0, r0, ip
 800c9a0:	fa23 f302 	lsr.w	r3, r3, r2
 800c9a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9a8:	e7cc      	b.n	800c944 <__aeabi_d2f+0x14>
 800c9aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800c9ae:	d107      	bne.n	800c9c0 <__aeabi_d2f+0x90>
 800c9b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800c9b4:	bf1e      	ittt	ne
 800c9b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800c9ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800c9be:	4770      	bxne	lr
 800c9c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800c9c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800c9c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop

0800c9d0 <memcpy>:
 800c9d0:	4684      	mov	ip, r0
 800c9d2:	ea41 0300 	orr.w	r3, r1, r0
 800c9d6:	f013 0303 	ands.w	r3, r3, #3
 800c9da:	d16d      	bne.n	800cab8 <memcpy+0xe8>
 800c9dc:	3a40      	subs	r2, #64	; 0x40
 800c9de:	d341      	bcc.n	800ca64 <memcpy+0x94>
 800c9e0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9e4:	f840 3b04 	str.w	r3, [r0], #4
 800c9e8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9ec:	f840 3b04 	str.w	r3, [r0], #4
 800c9f0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9f4:	f840 3b04 	str.w	r3, [r0], #4
 800c9f8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9fc:	f840 3b04 	str.w	r3, [r0], #4
 800ca00:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca04:	f840 3b04 	str.w	r3, [r0], #4
 800ca08:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca0c:	f840 3b04 	str.w	r3, [r0], #4
 800ca10:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca14:	f840 3b04 	str.w	r3, [r0], #4
 800ca18:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca1c:	f840 3b04 	str.w	r3, [r0], #4
 800ca20:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca24:	f840 3b04 	str.w	r3, [r0], #4
 800ca28:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca2c:	f840 3b04 	str.w	r3, [r0], #4
 800ca30:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca34:	f840 3b04 	str.w	r3, [r0], #4
 800ca38:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca3c:	f840 3b04 	str.w	r3, [r0], #4
 800ca40:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca44:	f840 3b04 	str.w	r3, [r0], #4
 800ca48:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca4c:	f840 3b04 	str.w	r3, [r0], #4
 800ca50:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca54:	f840 3b04 	str.w	r3, [r0], #4
 800ca58:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca5c:	f840 3b04 	str.w	r3, [r0], #4
 800ca60:	3a40      	subs	r2, #64	; 0x40
 800ca62:	d2bd      	bcs.n	800c9e0 <memcpy+0x10>
 800ca64:	3230      	adds	r2, #48	; 0x30
 800ca66:	d311      	bcc.n	800ca8c <memcpy+0xbc>
 800ca68:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca6c:	f840 3b04 	str.w	r3, [r0], #4
 800ca70:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca74:	f840 3b04 	str.w	r3, [r0], #4
 800ca78:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca7c:	f840 3b04 	str.w	r3, [r0], #4
 800ca80:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca84:	f840 3b04 	str.w	r3, [r0], #4
 800ca88:	3a10      	subs	r2, #16
 800ca8a:	d2ed      	bcs.n	800ca68 <memcpy+0x98>
 800ca8c:	320c      	adds	r2, #12
 800ca8e:	d305      	bcc.n	800ca9c <memcpy+0xcc>
 800ca90:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca94:	f840 3b04 	str.w	r3, [r0], #4
 800ca98:	3a04      	subs	r2, #4
 800ca9a:	d2f9      	bcs.n	800ca90 <memcpy+0xc0>
 800ca9c:	3204      	adds	r2, #4
 800ca9e:	d008      	beq.n	800cab2 <memcpy+0xe2>
 800caa0:	07d2      	lsls	r2, r2, #31
 800caa2:	bf1c      	itt	ne
 800caa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800caa8:	f800 3b01 	strbne.w	r3, [r0], #1
 800caac:	d301      	bcc.n	800cab2 <memcpy+0xe2>
 800caae:	880b      	ldrh	r3, [r1, #0]
 800cab0:	8003      	strh	r3, [r0, #0]
 800cab2:	4660      	mov	r0, ip
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	2a08      	cmp	r2, #8
 800caba:	d313      	bcc.n	800cae4 <memcpy+0x114>
 800cabc:	078b      	lsls	r3, r1, #30
 800cabe:	d08d      	beq.n	800c9dc <memcpy+0xc>
 800cac0:	f010 0303 	ands.w	r3, r0, #3
 800cac4:	d08a      	beq.n	800c9dc <memcpy+0xc>
 800cac6:	f1c3 0304 	rsb	r3, r3, #4
 800caca:	1ad2      	subs	r2, r2, r3
 800cacc:	07db      	lsls	r3, r3, #31
 800cace:	bf1c      	itt	ne
 800cad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cad4:	f800 3b01 	strbne.w	r3, [r0], #1
 800cad8:	d380      	bcc.n	800c9dc <memcpy+0xc>
 800cada:	f831 3b02 	ldrh.w	r3, [r1], #2
 800cade:	f820 3b02 	strh.w	r3, [r0], #2
 800cae2:	e77b      	b.n	800c9dc <memcpy+0xc>
 800cae4:	3a04      	subs	r2, #4
 800cae6:	d3d9      	bcc.n	800ca9c <memcpy+0xcc>
 800cae8:	3a01      	subs	r2, #1
 800caea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caee:	f800 3b01 	strb.w	r3, [r0], #1
 800caf2:	d2f9      	bcs.n	800cae8 <memcpy+0x118>
 800caf4:	780b      	ldrb	r3, [r1, #0]
 800caf6:	7003      	strb	r3, [r0, #0]
 800caf8:	784b      	ldrb	r3, [r1, #1]
 800cafa:	7043      	strb	r3, [r0, #1]
 800cafc:	788b      	ldrb	r3, [r1, #2]
 800cafe:	7083      	strb	r3, [r0, #2]
 800cb00:	4660      	mov	r0, ip
 800cb02:	4770      	bx	lr
	...

0800cb10 <__gedf2>:
 800cb10:	f04f 3cff 	mov.w	ip, #4294967295
 800cb14:	e006      	b.n	800cb24 <__cmpdf2+0x4>
 800cb16:	bf00      	nop

0800cb18 <__ledf2>:
 800cb18:	f04f 0c01 	mov.w	ip, #1
 800cb1c:	e002      	b.n	800cb24 <__cmpdf2+0x4>
 800cb1e:	bf00      	nop

0800cb20 <__cmpdf2>:
 800cb20:	f04f 0c01 	mov.w	ip, #1
 800cb24:	f84d cd04 	str.w	ip, [sp, #-4]!
 800cb28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cb2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cb34:	bf18      	it	ne
 800cb36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800cb3a:	d01b      	beq.n	800cb74 <__cmpdf2+0x54>
 800cb3c:	b001      	add	sp, #4
 800cb3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800cb42:	bf0c      	ite	eq
 800cb44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800cb48:	ea91 0f03 	teqne	r1, r3
 800cb4c:	bf02      	ittt	eq
 800cb4e:	ea90 0f02 	teqeq	r0, r2
 800cb52:	2000      	moveq	r0, #0
 800cb54:	4770      	bxeq	lr
 800cb56:	f110 0f00 	cmn.w	r0, #0
 800cb5a:	ea91 0f03 	teq	r1, r3
 800cb5e:	bf58      	it	pl
 800cb60:	4299      	cmppl	r1, r3
 800cb62:	bf08      	it	eq
 800cb64:	4290      	cmpeq	r0, r2
 800cb66:	bf2c      	ite	cs
 800cb68:	17d8      	asrcs	r0, r3, #31
 800cb6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800cb6e:	f040 0001 	orr.w	r0, r0, #1
 800cb72:	4770      	bx	lr
 800cb74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cb78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb7c:	d102      	bne.n	800cb84 <__cmpdf2+0x64>
 800cb7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800cb82:	d107      	bne.n	800cb94 <__cmpdf2+0x74>
 800cb84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cb88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb8c:	d1d6      	bne.n	800cb3c <__cmpdf2+0x1c>
 800cb8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cb92:	d0d3      	beq.n	800cb3c <__cmpdf2+0x1c>
 800cb94:	f85d 0b04 	ldr.w	r0, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop

0800cb9c <__aeabi_cdrcmple>:
 800cb9c:	4684      	mov	ip, r0
 800cb9e:	4610      	mov	r0, r2
 800cba0:	4662      	mov	r2, ip
 800cba2:	468c      	mov	ip, r1
 800cba4:	4619      	mov	r1, r3
 800cba6:	4663      	mov	r3, ip
 800cba8:	e000      	b.n	800cbac <__aeabi_cdcmpeq>
 800cbaa:	bf00      	nop

0800cbac <__aeabi_cdcmpeq>:
 800cbac:	b501      	push	{r0, lr}
 800cbae:	f7ff ffb7 	bl	800cb20 <__cmpdf2>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	bf48      	it	mi
 800cbb6:	f110 0f00 	cmnmi.w	r0, #0
 800cbba:	bd01      	pop	{r0, pc}

0800cbbc <__aeabi_dcmpeq>:
 800cbbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cbc0:	f7ff fff4 	bl	800cbac <__aeabi_cdcmpeq>
 800cbc4:	bf0c      	ite	eq
 800cbc6:	2001      	moveq	r0, #1
 800cbc8:	2000      	movne	r0, #0
 800cbca:	f85d fb08 	ldr.w	pc, [sp], #8
 800cbce:	bf00      	nop

0800cbd0 <__aeabi_dcmplt>:
 800cbd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cbd4:	f7ff ffea 	bl	800cbac <__aeabi_cdcmpeq>
 800cbd8:	bf34      	ite	cc
 800cbda:	2001      	movcc	r0, #1
 800cbdc:	2000      	movcs	r0, #0
 800cbde:	f85d fb08 	ldr.w	pc, [sp], #8
 800cbe2:	bf00      	nop

0800cbe4 <__aeabi_dcmple>:
 800cbe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cbe8:	f7ff ffe0 	bl	800cbac <__aeabi_cdcmpeq>
 800cbec:	bf94      	ite	ls
 800cbee:	2001      	movls	r0, #1
 800cbf0:	2000      	movhi	r0, #0
 800cbf2:	f85d fb08 	ldr.w	pc, [sp], #8
 800cbf6:	bf00      	nop

0800cbf8 <__aeabi_dcmpge>:
 800cbf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cbfc:	f7ff ffce 	bl	800cb9c <__aeabi_cdrcmple>
 800cc00:	bf94      	ite	ls
 800cc02:	2001      	movls	r0, #1
 800cc04:	2000      	movhi	r0, #0
 800cc06:	f85d fb08 	ldr.w	pc, [sp], #8
 800cc0a:	bf00      	nop

0800cc0c <__aeabi_dcmpgt>:
 800cc0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cc10:	f7ff ffc4 	bl	800cb9c <__aeabi_cdrcmple>
 800cc14:	bf34      	ite	cc
 800cc16:	2001      	movcc	r0, #1
 800cc18:	2000      	movcs	r0, #0
 800cc1a:	f85d fb08 	ldr.w	pc, [sp], #8
 800cc1e:	bf00      	nop

0800cc20 <__aeabi_uldivmod>:
 800cc20:	b953      	cbnz	r3, 800cc38 <__aeabi_uldivmod+0x18>
 800cc22:	b94a      	cbnz	r2, 800cc38 <__aeabi_uldivmod+0x18>
 800cc24:	2900      	cmp	r1, #0
 800cc26:	bf08      	it	eq
 800cc28:	2800      	cmpeq	r0, #0
 800cc2a:	bf1c      	itt	ne
 800cc2c:	f04f 31ff 	movne.w	r1, #4294967295
 800cc30:	f04f 30ff 	movne.w	r0, #4294967295
 800cc34:	f000 b83c 	b.w	800ccb0 <__aeabi_idiv0>
 800cc38:	b082      	sub	sp, #8
 800cc3a:	46ec      	mov	ip, sp
 800cc3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800cc40:	f000 f81e 	bl	800cc80 <__gnu_uldivmod_helper>
 800cc44:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cc48:	b002      	add	sp, #8
 800cc4a:	bc0c      	pop	{r2, r3}
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop

0800cc50 <__gnu_ldivmod_helper>:
 800cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc54:	9c06      	ldr	r4, [sp, #24]
 800cc56:	4615      	mov	r5, r2
 800cc58:	4606      	mov	r6, r0
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	4698      	mov	r8, r3
 800cc5e:	f000 f82f 	bl	800ccc0 <__divdi3>
 800cc62:	fb05 f301 	mul.w	r3, r5, r1
 800cc66:	fb00 3808 	mla	r8, r0, r8, r3
 800cc6a:	fba5 2300 	umull	r2, r3, r5, r0
 800cc6e:	1ab2      	subs	r2, r6, r2
 800cc70:	4443      	add	r3, r8
 800cc72:	eb67 0303 	sbc.w	r3, r7, r3
 800cc76:	e9c4 2300 	strd	r2, r3, [r4]
 800cc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7e:	bf00      	nop

0800cc80 <__gnu_uldivmod_helper>:
 800cc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc84:	9c06      	ldr	r4, [sp, #24]
 800cc86:	4690      	mov	r8, r2
 800cc88:	4606      	mov	r6, r0
 800cc8a:	460f      	mov	r7, r1
 800cc8c:	461d      	mov	r5, r3
 800cc8e:	f000 f967 	bl	800cf60 <__udivdi3>
 800cc92:	fb00 f505 	mul.w	r5, r0, r5
 800cc96:	fba0 2308 	umull	r2, r3, r0, r8
 800cc9a:	fb08 5501 	mla	r5, r8, r1, r5
 800cc9e:	1ab2      	subs	r2, r6, r2
 800cca0:	442b      	add	r3, r5
 800cca2:	eb67 0303 	sbc.w	r3, r7, r3
 800cca6:	e9c4 2300 	strd	r2, r3, [r4]
 800ccaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccae:	bf00      	nop

0800ccb0 <__aeabi_idiv0>:
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
	...

0800ccc0 <__divdi3>:
 800ccc0:	2900      	cmp	r1, #0
 800ccc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccc6:	f2c0 80a6 	blt.w	800ce16 <__divdi3+0x156>
 800ccca:	2600      	movs	r6, #0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f2c0 809c 	blt.w	800ce0a <__divdi3+0x14a>
 800ccd2:	4688      	mov	r8, r1
 800ccd4:	4694      	mov	ip, r2
 800ccd6:	469e      	mov	lr, r3
 800ccd8:	4615      	mov	r5, r2
 800ccda:	4604      	mov	r4, r0
 800ccdc:	460f      	mov	r7, r1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d13d      	bne.n	800cd5e <__divdi3+0x9e>
 800cce2:	428a      	cmp	r2, r1
 800cce4:	d959      	bls.n	800cd9a <__divdi3+0xda>
 800cce6:	fab2 f382 	clz	r3, r2
 800ccea:	b13b      	cbz	r3, 800ccfc <__divdi3+0x3c>
 800ccec:	f1c3 0220 	rsb	r2, r3, #32
 800ccf0:	409f      	lsls	r7, r3
 800ccf2:	fa20 f202 	lsr.w	r2, r0, r2
 800ccf6:	409d      	lsls	r5, r3
 800ccf8:	4317      	orrs	r7, r2
 800ccfa:	409c      	lsls	r4, r3
 800ccfc:	0c29      	lsrs	r1, r5, #16
 800ccfe:	0c22      	lsrs	r2, r4, #16
 800cd00:	fbb7 fef1 	udiv	lr, r7, r1
 800cd04:	b2a8      	uxth	r0, r5
 800cd06:	fb01 771e 	mls	r7, r1, lr, r7
 800cd0a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800cd0e:	fb00 f30e 	mul.w	r3, r0, lr
 800cd12:	42bb      	cmp	r3, r7
 800cd14:	d90a      	bls.n	800cd2c <__divdi3+0x6c>
 800cd16:	197f      	adds	r7, r7, r5
 800cd18:	f10e 32ff 	add.w	r2, lr, #4294967295
 800cd1c:	f080 8105 	bcs.w	800cf2a <__divdi3+0x26a>
 800cd20:	42bb      	cmp	r3, r7
 800cd22:	f240 8102 	bls.w	800cf2a <__divdi3+0x26a>
 800cd26:	f1ae 0e02 	sub.w	lr, lr, #2
 800cd2a:	442f      	add	r7, r5
 800cd2c:	1aff      	subs	r7, r7, r3
 800cd2e:	b2a4      	uxth	r4, r4
 800cd30:	fbb7 f3f1 	udiv	r3, r7, r1
 800cd34:	fb01 7713 	mls	r7, r1, r3, r7
 800cd38:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cd3c:	fb00 f003 	mul.w	r0, r0, r3
 800cd40:	42b8      	cmp	r0, r7
 800cd42:	d908      	bls.n	800cd56 <__divdi3+0x96>
 800cd44:	197f      	adds	r7, r7, r5
 800cd46:	f103 32ff 	add.w	r2, r3, #4294967295
 800cd4a:	f080 80f0 	bcs.w	800cf2e <__divdi3+0x26e>
 800cd4e:	42b8      	cmp	r0, r7
 800cd50:	f240 80ed 	bls.w	800cf2e <__divdi3+0x26e>
 800cd54:	3b02      	subs	r3, #2
 800cd56:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	e003      	b.n	800cd66 <__divdi3+0xa6>
 800cd5e:	428b      	cmp	r3, r1
 800cd60:	d90f      	bls.n	800cd82 <__divdi3+0xc2>
 800cd62:	2200      	movs	r2, #0
 800cd64:	4613      	mov	r3, r2
 800cd66:	1c34      	adds	r4, r6, #0
 800cd68:	bf18      	it	ne
 800cd6a:	2401      	movne	r4, #1
 800cd6c:	4260      	negs	r0, r4
 800cd6e:	f04f 0500 	mov.w	r5, #0
 800cd72:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800cd76:	4058      	eors	r0, r3
 800cd78:	4051      	eors	r1, r2
 800cd7a:	1900      	adds	r0, r0, r4
 800cd7c:	4169      	adcs	r1, r5
 800cd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd82:	fab3 f283 	clz	r2, r3
 800cd86:	2a00      	cmp	r2, #0
 800cd88:	f040 8086 	bne.w	800ce98 <__divdi3+0x1d8>
 800cd8c:	428b      	cmp	r3, r1
 800cd8e:	d302      	bcc.n	800cd96 <__divdi3+0xd6>
 800cd90:	4584      	cmp	ip, r0
 800cd92:	f200 80db 	bhi.w	800cf4c <__divdi3+0x28c>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e7e5      	b.n	800cd66 <__divdi3+0xa6>
 800cd9a:	b912      	cbnz	r2, 800cda2 <__divdi3+0xe2>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	fbb3 f5f2 	udiv	r5, r3, r2
 800cda2:	fab5 f085 	clz	r0, r5
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d13b      	bne.n	800ce22 <__divdi3+0x162>
 800cdaa:	1b78      	subs	r0, r7, r5
 800cdac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800cdb0:	fa1f fc85 	uxth.w	ip, r5
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	fbb0 f8fe 	udiv	r8, r0, lr
 800cdba:	0c21      	lsrs	r1, r4, #16
 800cdbc:	fb0e 0718 	mls	r7, lr, r8, r0
 800cdc0:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800cdc4:	fb0c f308 	mul.w	r3, ip, r8
 800cdc8:	42bb      	cmp	r3, r7
 800cdca:	d907      	bls.n	800cddc <__divdi3+0x11c>
 800cdcc:	197f      	adds	r7, r7, r5
 800cdce:	f108 31ff 	add.w	r1, r8, #4294967295
 800cdd2:	d202      	bcs.n	800cdda <__divdi3+0x11a>
 800cdd4:	42bb      	cmp	r3, r7
 800cdd6:	f200 80bd 	bhi.w	800cf54 <__divdi3+0x294>
 800cdda:	4688      	mov	r8, r1
 800cddc:	1aff      	subs	r7, r7, r3
 800cdde:	b2a4      	uxth	r4, r4
 800cde0:	fbb7 f3fe 	udiv	r3, r7, lr
 800cde4:	fb0e 7713 	mls	r7, lr, r3, r7
 800cde8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cdec:	fb0c fc03 	mul.w	ip, ip, r3
 800cdf0:	45bc      	cmp	ip, r7
 800cdf2:	d907      	bls.n	800ce04 <__divdi3+0x144>
 800cdf4:	197f      	adds	r7, r7, r5
 800cdf6:	f103 31ff 	add.w	r1, r3, #4294967295
 800cdfa:	d202      	bcs.n	800ce02 <__divdi3+0x142>
 800cdfc:	45bc      	cmp	ip, r7
 800cdfe:	f200 80a7 	bhi.w	800cf50 <__divdi3+0x290>
 800ce02:	460b      	mov	r3, r1
 800ce04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800ce08:	e7ad      	b.n	800cd66 <__divdi3+0xa6>
 800ce0a:	4252      	negs	r2, r2
 800ce0c:	ea6f 0606 	mvn.w	r6, r6
 800ce10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800ce14:	e75d      	b.n	800ccd2 <__divdi3+0x12>
 800ce16:	4240      	negs	r0, r0
 800ce18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ce1c:	f04f 36ff 	mov.w	r6, #4294967295
 800ce20:	e754      	b.n	800cccc <__divdi3+0xc>
 800ce22:	f1c0 0220 	rsb	r2, r0, #32
 800ce26:	fa24 f102 	lsr.w	r1, r4, r2
 800ce2a:	fa07 f300 	lsl.w	r3, r7, r0
 800ce2e:	4085      	lsls	r5, r0
 800ce30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800ce34:	40d7      	lsrs	r7, r2
 800ce36:	4319      	orrs	r1, r3
 800ce38:	fbb7 f2fe 	udiv	r2, r7, lr
 800ce3c:	0c0b      	lsrs	r3, r1, #16
 800ce3e:	fb0e 7712 	mls	r7, lr, r2, r7
 800ce42:	fa1f fc85 	uxth.w	ip, r5
 800ce46:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce4a:	fb0c f702 	mul.w	r7, ip, r2
 800ce4e:	429f      	cmp	r7, r3
 800ce50:	fa04 f400 	lsl.w	r4, r4, r0
 800ce54:	d907      	bls.n	800ce66 <__divdi3+0x1a6>
 800ce56:	195b      	adds	r3, r3, r5
 800ce58:	f102 30ff 	add.w	r0, r2, #4294967295
 800ce5c:	d274      	bcs.n	800cf48 <__divdi3+0x288>
 800ce5e:	429f      	cmp	r7, r3
 800ce60:	d972      	bls.n	800cf48 <__divdi3+0x288>
 800ce62:	3a02      	subs	r2, #2
 800ce64:	442b      	add	r3, r5
 800ce66:	1bdf      	subs	r7, r3, r7
 800ce68:	b289      	uxth	r1, r1
 800ce6a:	fbb7 f8fe 	udiv	r8, r7, lr
 800ce6e:	fb0e 7318 	mls	r3, lr, r8, r7
 800ce72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ce76:	fb0c f708 	mul.w	r7, ip, r8
 800ce7a:	429f      	cmp	r7, r3
 800ce7c:	d908      	bls.n	800ce90 <__divdi3+0x1d0>
 800ce7e:	195b      	adds	r3, r3, r5
 800ce80:	f108 31ff 	add.w	r1, r8, #4294967295
 800ce84:	d25c      	bcs.n	800cf40 <__divdi3+0x280>
 800ce86:	429f      	cmp	r7, r3
 800ce88:	d95a      	bls.n	800cf40 <__divdi3+0x280>
 800ce8a:	f1a8 0802 	sub.w	r8, r8, #2
 800ce8e:	442b      	add	r3, r5
 800ce90:	1bd8      	subs	r0, r3, r7
 800ce92:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800ce96:	e78e      	b.n	800cdb6 <__divdi3+0xf6>
 800ce98:	f1c2 0320 	rsb	r3, r2, #32
 800ce9c:	fa2c f103 	lsr.w	r1, ip, r3
 800cea0:	fa0e fe02 	lsl.w	lr, lr, r2
 800cea4:	fa20 f703 	lsr.w	r7, r0, r3
 800cea8:	ea41 0e0e 	orr.w	lr, r1, lr
 800ceac:	fa08 f002 	lsl.w	r0, r8, r2
 800ceb0:	fa28 f103 	lsr.w	r1, r8, r3
 800ceb4:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800ceb8:	4338      	orrs	r0, r7
 800ceba:	fbb1 f8f5 	udiv	r8, r1, r5
 800cebe:	0c03      	lsrs	r3, r0, #16
 800cec0:	fb05 1118 	mls	r1, r5, r8, r1
 800cec4:	fa1f f78e 	uxth.w	r7, lr
 800cec8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800cecc:	fb07 f308 	mul.w	r3, r7, r8
 800ced0:	428b      	cmp	r3, r1
 800ced2:	fa0c fc02 	lsl.w	ip, ip, r2
 800ced6:	d909      	bls.n	800ceec <__divdi3+0x22c>
 800ced8:	eb11 010e 	adds.w	r1, r1, lr
 800cedc:	f108 39ff 	add.w	r9, r8, #4294967295
 800cee0:	d230      	bcs.n	800cf44 <__divdi3+0x284>
 800cee2:	428b      	cmp	r3, r1
 800cee4:	d92e      	bls.n	800cf44 <__divdi3+0x284>
 800cee6:	f1a8 0802 	sub.w	r8, r8, #2
 800ceea:	4471      	add	r1, lr
 800ceec:	1ac9      	subs	r1, r1, r3
 800ceee:	b280      	uxth	r0, r0
 800cef0:	fbb1 f3f5 	udiv	r3, r1, r5
 800cef4:	fb05 1113 	mls	r1, r5, r3, r1
 800cef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800cefc:	fb07 f703 	mul.w	r7, r7, r3
 800cf00:	428f      	cmp	r7, r1
 800cf02:	d908      	bls.n	800cf16 <__divdi3+0x256>
 800cf04:	eb11 010e 	adds.w	r1, r1, lr
 800cf08:	f103 30ff 	add.w	r0, r3, #4294967295
 800cf0c:	d216      	bcs.n	800cf3c <__divdi3+0x27c>
 800cf0e:	428f      	cmp	r7, r1
 800cf10:	d914      	bls.n	800cf3c <__divdi3+0x27c>
 800cf12:	3b02      	subs	r3, #2
 800cf14:	4471      	add	r1, lr
 800cf16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800cf1a:	1bc9      	subs	r1, r1, r7
 800cf1c:	fba3 890c 	umull	r8, r9, r3, ip
 800cf20:	4549      	cmp	r1, r9
 800cf22:	d309      	bcc.n	800cf38 <__divdi3+0x278>
 800cf24:	d005      	beq.n	800cf32 <__divdi3+0x272>
 800cf26:	2200      	movs	r2, #0
 800cf28:	e71d      	b.n	800cd66 <__divdi3+0xa6>
 800cf2a:	4696      	mov	lr, r2
 800cf2c:	e6fe      	b.n	800cd2c <__divdi3+0x6c>
 800cf2e:	4613      	mov	r3, r2
 800cf30:	e711      	b.n	800cd56 <__divdi3+0x96>
 800cf32:	4094      	lsls	r4, r2
 800cf34:	4544      	cmp	r4, r8
 800cf36:	d2f6      	bcs.n	800cf26 <__divdi3+0x266>
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	e7f4      	b.n	800cf26 <__divdi3+0x266>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	e7ea      	b.n	800cf16 <__divdi3+0x256>
 800cf40:	4688      	mov	r8, r1
 800cf42:	e7a5      	b.n	800ce90 <__divdi3+0x1d0>
 800cf44:	46c8      	mov	r8, r9
 800cf46:	e7d1      	b.n	800ceec <__divdi3+0x22c>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	e78c      	b.n	800ce66 <__divdi3+0x1a6>
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	e70a      	b.n	800cd66 <__divdi3+0xa6>
 800cf50:	3b02      	subs	r3, #2
 800cf52:	e757      	b.n	800ce04 <__divdi3+0x144>
 800cf54:	f1a8 0802 	sub.w	r8, r8, #2
 800cf58:	442f      	add	r7, r5
 800cf5a:	e73f      	b.n	800cddc <__divdi3+0x11c>
 800cf5c:	0000      	movs	r0, r0
	...

0800cf60 <__udivdi3>:
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d144      	bne.n	800cff2 <__udivdi3+0x92>
 800cf68:	428a      	cmp	r2, r1
 800cf6a:	4615      	mov	r5, r2
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	d94f      	bls.n	800d010 <__udivdi3+0xb0>
 800cf70:	fab2 f782 	clz	r7, r2
 800cf74:	460e      	mov	r6, r1
 800cf76:	b14f      	cbz	r7, 800cf8c <__udivdi3+0x2c>
 800cf78:	f1c7 0320 	rsb	r3, r7, #32
 800cf7c:	40b9      	lsls	r1, r7
 800cf7e:	fa20 f603 	lsr.w	r6, r0, r3
 800cf82:	fa02 f507 	lsl.w	r5, r2, r7
 800cf86:	430e      	orrs	r6, r1
 800cf88:	fa00 f407 	lsl.w	r4, r0, r7
 800cf8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800cf90:	0c23      	lsrs	r3, r4, #16
 800cf92:	fbb6 f0fe 	udiv	r0, r6, lr
 800cf96:	b2af      	uxth	r7, r5
 800cf98:	fb0e 6110 	mls	r1, lr, r0, r6
 800cf9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cfa0:	fb07 f100 	mul.w	r1, r7, r0
 800cfa4:	4299      	cmp	r1, r3
 800cfa6:	d909      	bls.n	800cfbc <__udivdi3+0x5c>
 800cfa8:	195b      	adds	r3, r3, r5
 800cfaa:	f100 32ff 	add.w	r2, r0, #4294967295
 800cfae:	f080 80ec 	bcs.w	800d18a <__udivdi3+0x22a>
 800cfb2:	4299      	cmp	r1, r3
 800cfb4:	f240 80e9 	bls.w	800d18a <__udivdi3+0x22a>
 800cfb8:	3802      	subs	r0, #2
 800cfba:	442b      	add	r3, r5
 800cfbc:	1a5a      	subs	r2, r3, r1
 800cfbe:	b2a4      	uxth	r4, r4
 800cfc0:	fbb2 f3fe 	udiv	r3, r2, lr
 800cfc4:	fb0e 2213 	mls	r2, lr, r3, r2
 800cfc8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800cfcc:	fb07 f703 	mul.w	r7, r7, r3
 800cfd0:	4297      	cmp	r7, r2
 800cfd2:	d908      	bls.n	800cfe6 <__udivdi3+0x86>
 800cfd4:	1952      	adds	r2, r2, r5
 800cfd6:	f103 31ff 	add.w	r1, r3, #4294967295
 800cfda:	f080 80d8 	bcs.w	800d18e <__udivdi3+0x22e>
 800cfde:	4297      	cmp	r7, r2
 800cfe0:	f240 80d5 	bls.w	800d18e <__udivdi3+0x22e>
 800cfe4:	3b02      	subs	r3, #2
 800cfe6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800cfea:	2600      	movs	r6, #0
 800cfec:	4631      	mov	r1, r6
 800cfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff2:	428b      	cmp	r3, r1
 800cff4:	d847      	bhi.n	800d086 <__udivdi3+0x126>
 800cff6:	fab3 f683 	clz	r6, r3
 800cffa:	2e00      	cmp	r6, #0
 800cffc:	d148      	bne.n	800d090 <__udivdi3+0x130>
 800cffe:	428b      	cmp	r3, r1
 800d000:	d302      	bcc.n	800d008 <__udivdi3+0xa8>
 800d002:	4282      	cmp	r2, r0
 800d004:	f200 80cd 	bhi.w	800d1a2 <__udivdi3+0x242>
 800d008:	2001      	movs	r0, #1
 800d00a:	4631      	mov	r1, r6
 800d00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d010:	b912      	cbnz	r2, 800d018 <__udivdi3+0xb8>
 800d012:	2501      	movs	r5, #1
 800d014:	fbb5 f5f2 	udiv	r5, r5, r2
 800d018:	fab5 f885 	clz	r8, r5
 800d01c:	f1b8 0f00 	cmp.w	r8, #0
 800d020:	d177      	bne.n	800d112 <__udivdi3+0x1b2>
 800d022:	1b4a      	subs	r2, r1, r5
 800d024:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d028:	b2af      	uxth	r7, r5
 800d02a:	2601      	movs	r6, #1
 800d02c:	fbb2 f0fe 	udiv	r0, r2, lr
 800d030:	0c23      	lsrs	r3, r4, #16
 800d032:	fb0e 2110 	mls	r1, lr, r0, r2
 800d036:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d03a:	fb07 f300 	mul.w	r3, r7, r0
 800d03e:	428b      	cmp	r3, r1
 800d040:	d907      	bls.n	800d052 <__udivdi3+0xf2>
 800d042:	1949      	adds	r1, r1, r5
 800d044:	f100 32ff 	add.w	r2, r0, #4294967295
 800d048:	d202      	bcs.n	800d050 <__udivdi3+0xf0>
 800d04a:	428b      	cmp	r3, r1
 800d04c:	f200 80ba 	bhi.w	800d1c4 <__udivdi3+0x264>
 800d050:	4610      	mov	r0, r2
 800d052:	1ac9      	subs	r1, r1, r3
 800d054:	b2a4      	uxth	r4, r4
 800d056:	fbb1 f3fe 	udiv	r3, r1, lr
 800d05a:	fb0e 1113 	mls	r1, lr, r3, r1
 800d05e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800d062:	fb07 f703 	mul.w	r7, r7, r3
 800d066:	42a7      	cmp	r7, r4
 800d068:	d908      	bls.n	800d07c <__udivdi3+0x11c>
 800d06a:	1964      	adds	r4, r4, r5
 800d06c:	f103 32ff 	add.w	r2, r3, #4294967295
 800d070:	f080 808f 	bcs.w	800d192 <__udivdi3+0x232>
 800d074:	42a7      	cmp	r7, r4
 800d076:	f240 808c 	bls.w	800d192 <__udivdi3+0x232>
 800d07a:	3b02      	subs	r3, #2
 800d07c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d080:	4631      	mov	r1, r6
 800d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d086:	2600      	movs	r6, #0
 800d088:	4630      	mov	r0, r6
 800d08a:	4631      	mov	r1, r6
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	f1c6 0420 	rsb	r4, r6, #32
 800d094:	fa22 f504 	lsr.w	r5, r2, r4
 800d098:	40b3      	lsls	r3, r6
 800d09a:	432b      	orrs	r3, r5
 800d09c:	fa20 fc04 	lsr.w	ip, r0, r4
 800d0a0:	fa01 f706 	lsl.w	r7, r1, r6
 800d0a4:	fa21 f504 	lsr.w	r5, r1, r4
 800d0a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d0ac:	ea4c 0707 	orr.w	r7, ip, r7
 800d0b0:	fbb5 f8fe 	udiv	r8, r5, lr
 800d0b4:	0c39      	lsrs	r1, r7, #16
 800d0b6:	fb0e 5518 	mls	r5, lr, r8, r5
 800d0ba:	fa1f fc83 	uxth.w	ip, r3
 800d0be:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800d0c2:	fb0c f108 	mul.w	r1, ip, r8
 800d0c6:	42a9      	cmp	r1, r5
 800d0c8:	fa02 f206 	lsl.w	r2, r2, r6
 800d0cc:	d904      	bls.n	800d0d8 <__udivdi3+0x178>
 800d0ce:	18ed      	adds	r5, r5, r3
 800d0d0:	f108 34ff 	add.w	r4, r8, #4294967295
 800d0d4:	d367      	bcc.n	800d1a6 <__udivdi3+0x246>
 800d0d6:	46a0      	mov	r8, r4
 800d0d8:	1a6d      	subs	r5, r5, r1
 800d0da:	b2bf      	uxth	r7, r7
 800d0dc:	fbb5 f4fe 	udiv	r4, r5, lr
 800d0e0:	fb0e 5514 	mls	r5, lr, r4, r5
 800d0e4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800d0e8:	fb0c fc04 	mul.w	ip, ip, r4
 800d0ec:	458c      	cmp	ip, r1
 800d0ee:	d904      	bls.n	800d0fa <__udivdi3+0x19a>
 800d0f0:	18c9      	adds	r1, r1, r3
 800d0f2:	f104 35ff 	add.w	r5, r4, #4294967295
 800d0f6:	d35c      	bcc.n	800d1b2 <__udivdi3+0x252>
 800d0f8:	462c      	mov	r4, r5
 800d0fa:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800d0fe:	ebcc 0101 	rsb	r1, ip, r1
 800d102:	fba4 2302 	umull	r2, r3, r4, r2
 800d106:	4299      	cmp	r1, r3
 800d108:	d348      	bcc.n	800d19c <__udivdi3+0x23c>
 800d10a:	d044      	beq.n	800d196 <__udivdi3+0x236>
 800d10c:	4620      	mov	r0, r4
 800d10e:	2600      	movs	r6, #0
 800d110:	e76c      	b.n	800cfec <__udivdi3+0x8c>
 800d112:	f1c8 0420 	rsb	r4, r8, #32
 800d116:	fa01 f308 	lsl.w	r3, r1, r8
 800d11a:	fa05 f508 	lsl.w	r5, r5, r8
 800d11e:	fa20 f704 	lsr.w	r7, r0, r4
 800d122:	40e1      	lsrs	r1, r4
 800d124:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d128:	431f      	orrs	r7, r3
 800d12a:	fbb1 f6fe 	udiv	r6, r1, lr
 800d12e:	0c3a      	lsrs	r2, r7, #16
 800d130:	fb0e 1116 	mls	r1, lr, r6, r1
 800d134:	fa1f fc85 	uxth.w	ip, r5
 800d138:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800d13c:	fb0c f206 	mul.w	r2, ip, r6
 800d140:	429a      	cmp	r2, r3
 800d142:	fa00 f408 	lsl.w	r4, r0, r8
 800d146:	d907      	bls.n	800d158 <__udivdi3+0x1f8>
 800d148:	195b      	adds	r3, r3, r5
 800d14a:	f106 31ff 	add.w	r1, r6, #4294967295
 800d14e:	d237      	bcs.n	800d1c0 <__udivdi3+0x260>
 800d150:	429a      	cmp	r2, r3
 800d152:	d935      	bls.n	800d1c0 <__udivdi3+0x260>
 800d154:	3e02      	subs	r6, #2
 800d156:	442b      	add	r3, r5
 800d158:	1a9b      	subs	r3, r3, r2
 800d15a:	b2bf      	uxth	r7, r7
 800d15c:	fbb3 f0fe 	udiv	r0, r3, lr
 800d160:	fb0e 3310 	mls	r3, lr, r0, r3
 800d164:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d168:	fb0c f100 	mul.w	r1, ip, r0
 800d16c:	4299      	cmp	r1, r3
 800d16e:	d907      	bls.n	800d180 <__udivdi3+0x220>
 800d170:	195b      	adds	r3, r3, r5
 800d172:	f100 32ff 	add.w	r2, r0, #4294967295
 800d176:	d221      	bcs.n	800d1bc <__udivdi3+0x25c>
 800d178:	4299      	cmp	r1, r3
 800d17a:	d91f      	bls.n	800d1bc <__udivdi3+0x25c>
 800d17c:	3802      	subs	r0, #2
 800d17e:	442b      	add	r3, r5
 800d180:	1a5a      	subs	r2, r3, r1
 800d182:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800d186:	4667      	mov	r7, ip
 800d188:	e750      	b.n	800d02c <__udivdi3+0xcc>
 800d18a:	4610      	mov	r0, r2
 800d18c:	e716      	b.n	800cfbc <__udivdi3+0x5c>
 800d18e:	460b      	mov	r3, r1
 800d190:	e729      	b.n	800cfe6 <__udivdi3+0x86>
 800d192:	4613      	mov	r3, r2
 800d194:	e772      	b.n	800d07c <__udivdi3+0x11c>
 800d196:	40b0      	lsls	r0, r6
 800d198:	4290      	cmp	r0, r2
 800d19a:	d2b7      	bcs.n	800d10c <__udivdi3+0x1ac>
 800d19c:	1e60      	subs	r0, r4, #1
 800d19e:	2600      	movs	r6, #0
 800d1a0:	e724      	b.n	800cfec <__udivdi3+0x8c>
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	e722      	b.n	800cfec <__udivdi3+0x8c>
 800d1a6:	42a9      	cmp	r1, r5
 800d1a8:	d995      	bls.n	800d0d6 <__udivdi3+0x176>
 800d1aa:	f1a8 0802 	sub.w	r8, r8, #2
 800d1ae:	441d      	add	r5, r3
 800d1b0:	e792      	b.n	800d0d8 <__udivdi3+0x178>
 800d1b2:	458c      	cmp	ip, r1
 800d1b4:	d9a0      	bls.n	800d0f8 <__udivdi3+0x198>
 800d1b6:	3c02      	subs	r4, #2
 800d1b8:	4419      	add	r1, r3
 800d1ba:	e79e      	b.n	800d0fa <__udivdi3+0x19a>
 800d1bc:	4610      	mov	r0, r2
 800d1be:	e7df      	b.n	800d180 <__udivdi3+0x220>
 800d1c0:	460e      	mov	r6, r1
 800d1c2:	e7c9      	b.n	800d158 <__udivdi3+0x1f8>
 800d1c4:	3802      	subs	r0, #2
 800d1c6:	4429      	add	r1, r5
 800d1c8:	e743      	b.n	800d052 <__udivdi3+0xf2>
 800d1ca:	bf00      	nop
 800d1cc:	0000      	movs	r0, r0
	...

0800d1d0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
	...

0800d1e0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
	...

0800d1f0 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  }
 800d1f0:	e7fe      	b.n	800d1f0 <__default_exit>
 800d1f2:	bf00      	nop
	...

0800d200 <_unhandled_exception>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 800d200:	e7fe      	b.n	800d200 <_unhandled_exception>
 800d202:	bf00      	nop
	...

0800d210 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800d210:	e7fe      	b.n	800d210 <_idle_thread>
 800d212:	bf00      	nop
	...

0800d220 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800d220:	4b20      	ldr	r3, [pc, #128]	; (800d2a4 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800d222:	4a21      	ldr	r2, [pc, #132]	; (800d2a8 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800d224:	4821      	ldr	r0, [pc, #132]	; (800d2ac <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800d226:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800d228:	2400      	movs	r4, #0
 800d22a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d22c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800d22e:	4e20      	ldr	r6, [pc, #128]	; (800d2b0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800d230:	4d20      	ldr	r5, [pc, #128]	; (800d2b4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800d232:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800d236:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 800d238:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800d23a:	60da      	str	r2, [r3, #12]
 800d23c:	68f2      	ldr	r2, [r6, #12]
 800d23e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d242:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800d244:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800d246:	2120      	movs	r1, #32
 800d248:	f042 0201 	orr.w	r2, r2, #1
 800d24c:	2610      	movs	r6, #16
 800d24e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800d250:	b083      	sub	sp, #12
 800d252:	77de      	strb	r6, [r3, #31]
 800d254:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 800d258:	f000 f8fa 	bl	800d450 <_scheduler_init>
  _vt_init();
 800d25c:	f000 f878 	bl	800d350 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800d260:	f000 fb5e 	bl	800d920 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800d264:	f000 fcd4 	bl	800dc10 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800d268:	f000 fd0a 	bl	800dc80 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800d26c:	4628      	mov	r0, r5
 800d26e:	2140      	movs	r1, #64	; 0x40
 800d270:	f000 f9fe 	bl	800d670 <_thread_init>
 800d274:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800d278:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800d27a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800d27c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d27e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800d282:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800d284:	699b      	ldr	r3, [r3, #24]
 800d286:	490c      	ldr	r1, [pc, #48]	; (800d2b8 <chSysInit+0x98>)
 800d288:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800d28a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800d28e:	9400      	str	r4, [sp, #0]
 800d290:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800d294:	4b09      	ldr	r3, [pc, #36]	; (800d2bc <chSysInit+0x9c>)
 800d296:	f000 fa4b 	bl	800d730 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800d29a:	4b09      	ldr	r3, [pc, #36]	; (800d2c0 <chSysInit+0xa0>)
 800d29c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800d29e:	b003      	add	sp, #12
 800d2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	e000ed00 	.word	0xe000ed00
 800d2a8:	05fa0300 	.word	0x05fa0300
 800d2ac:	e0001000 	.word	0xe0001000
 800d2b0:	e000edf0 	.word	0xe000edf0
 800d2b4:	200010c0 	.word	0x200010c0
 800d2b8:	08017140 	.word	0x08017140
 800d2bc:	0800d211 	.word	0x0800d211
 800d2c0:	08017130 	.word	0x08017130
	...

0800d2d0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800d2d2:	4d13      	ldr	r5, [pc, #76]	; (800d320 <chSysTimerHandlerI+0x50>)
 800d2d4:	69aa      	ldr	r2, [r5, #24]
 800d2d6:	7fd3      	ldrb	r3, [r2, #31]
 800d2d8:	b10b      	cbz	r3, 800d2de <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800d2de:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800d2e0:	69eb      	ldr	r3, [r5, #28]
 800d2e2:	4e10      	ldr	r6, [pc, #64]	; (800d324 <chSysTimerHandlerI+0x54>)
 800d2e4:	3101      	adds	r1, #1
 800d2e6:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800d2e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800d2ea:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800d2ec:	f102 0201 	add.w	r2, r2, #1
 800d2f0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800d2f2:	d013      	beq.n	800d31c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800d2f4:	689c      	ldr	r4, [r3, #8]
 800d2f6:	3c01      	subs	r4, #1
 800d2f8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800d2fa:	b97c      	cbnz	r4, 800d31c <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d2fc:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800d2fe:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800d300:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800d302:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800d304:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800d306:	61ea      	str	r2, [r5, #28]
 800d308:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800d30c:	6918      	ldr	r0, [r3, #16]
 800d30e:	4788      	blx	r1
 800d310:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800d314:	69eb      	ldr	r3, [r5, #28]
 800d316:	689a      	ldr	r2, [r3, #8]
 800d318:	2a00      	cmp	r2, #0
 800d31a:	d0f0      	beq.n	800d2fe <chSysTimerHandlerI+0x2e>
 800d31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31e:	bf00      	nop
 800d320:	20001090 	.word	0x20001090
 800d324:	200010ac 	.word	0x200010ac
	...

0800d330 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800d330:	4a03      	ldr	r2, [pc, #12]	; (800d340 <chSysPolledDelayX+0x10>)
 800d332:	6851      	ldr	r1, [r2, #4]
 800d334:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 800d336:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800d338:	4298      	cmp	r0, r3
 800d33a:	d8fb      	bhi.n	800d334 <chSysPolledDelayX+0x4>
  }
}
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	e0001000 	.word	0xe0001000
	...

0800d350 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800d350:	4b05      	ldr	r3, [pc, #20]	; (800d368 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800d352:	f04f 30ff 	mov.w	r0, #4294967295
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800d356:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800d35a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800d35c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800d35e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800d360:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800d362:	621a      	str	r2, [r3, #32]
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	20001090 	.word	0x20001090
 800d36c:	00000000 	.word	0x00000000

0800d370 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800d370:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800d372:	4e0d      	ldr	r6, [pc, #52]	; (800d3a8 <chVTDoSetI+0x38>)
 800d374:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800d376:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800d378:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800d37a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800d37c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800d37e:	d904      	bls.n	800d38a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800d380:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800d382:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800d384:	68a5      	ldr	r5, [r4, #8]
 800d386:	428d      	cmp	r5, r1
 800d388:	d3fa      	bcc.n	800d380 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800d38a:	6863      	ldr	r3, [r4, #4]
 800d38c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800d38e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800d390:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800d392:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800d394:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800d396:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800d398:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800d39c:	1a59      	subs	r1, r3, r1
 800d39e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800d3a0:	6272      	str	r2, [r6, #36]	; 0x24
}
 800d3a2:	bc70      	pop	{r4, r5, r6}
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	20001090 	.word	0x20001090
 800d3ac:	00000000 	.word	0x00000000

0800d3b0 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d3b0:	6803      	ldr	r3, [r0, #0]
 800d3b2:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800d3b4:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800d3b6:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d3b8:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800d3ba:	4c06      	ldr	r4, [pc, #24]	; (800d3d4 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800d3bc:	442a      	add	r2, r5
 800d3be:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800d3c0:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800d3c2:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800d3c4:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800d3c6:	f04f 33ff 	mov.w	r3, #4294967295
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800d3ca:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800d3cc:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800d3ce:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800d3d0:	bc30      	pop	{r4, r5}
 800d3d2:	4770      	bx	lr
 800d3d4:	20001090 	.word	0x20001090
	...

0800d3e0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800d3e0:	b410      	push	{r4}
 800d3e2:	2320      	movs	r3, #32
 800d3e4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800d3e8:	7f03      	ldrb	r3, [r0, #28]
 800d3ea:	2b07      	cmp	r3, #7
 800d3ec:	d80e      	bhi.n	800d40c <wakeup+0x2c>
 800d3ee:	e8df f003 	tbb	[pc, r3]
 800d3f2:	0d27      	.short	0x0d27
 800d3f4:	0408230d 	.word	0x0408230d
 800d3f8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800d3fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800d3fc:	6893      	ldr	r3, [r2, #8]
 800d3fe:	3301      	adds	r3, #1
 800d400:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800d402:	e890 000c 	ldmia.w	r0, {r2, r3}
 800d406:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800d408:	6802      	ldr	r2, [r0, #0]
 800d40a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800d40c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d410:	2200      	movs	r2, #0
 800d412:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d414:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800d416:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d418:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800d41a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d41c:	689a      	ldr	r2, [r3, #8]
 800d41e:	428a      	cmp	r2, r1
 800d420:	d2fb      	bcs.n	800d41a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d422:	685a      	ldr	r2, [r3, #4]
 800d424:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800d426:	6003      	str	r3, [r0, #0]
 800d428:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d42a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800d42c:	6058      	str	r0, [r3, #4]
 800d42e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800d432:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d436:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800d438:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d43a:	2200      	movs	r2, #0
 800d43c:	601a      	str	r2, [r3, #0]
    break;
 800d43e:	e7e5      	b.n	800d40c <wakeup+0x2c>
 800d440:	2300      	movs	r3, #0
 800d442:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800d446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	20001090 	.word	0x20001090

0800d450 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d450:	4b03      	ldr	r3, [pc, #12]	; (800d460 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800d452:	2200      	movs	r2, #0
 800d454:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d456:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800d458:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800d45a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800d45c:	609a      	str	r2, [r3, #8]
 800d45e:	4770      	bx	lr
 800d460:	20001090 	.word	0x20001090
	...

0800d470 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d470:	2200      	movs	r2, #0
 800d472:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d474:	4b08      	ldr	r3, [pc, #32]	; (800d498 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800d476:	b410      	push	{r4}
 800d478:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d47a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800d47c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	428a      	cmp	r2, r1
 800d482:	d2fb      	bcs.n	800d47c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800d488:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800d48a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d48c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d48e:	605c      	str	r4, [r3, #4]

  return tp;
}
 800d490:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20001090 	.word	0x20001090
 800d49c:	00000000 	.word	0x00000000

0800d4a0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800d4a0:	4b08      	ldr	r3, [pc, #32]	; (800d4c4 <chSchGoSleepS+0x24>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800d4a2:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800d4a4:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800d4a6:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 800d4a8:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800d4aa:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d4ac:	2501      	movs	r5, #1
  otp = currp;
  otp->p_state = newstate;
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d4ae:	2004      	movs	r0, #4
 800d4b0:	77c8      	strb	r0, [r1, #31]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d4b2:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d4b4:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d4b6:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 800d4b8:	4610      	mov	r0, r2
}
 800d4ba:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d4bc:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800d4be:	f7fe be27 	b.w	800c110 <_port_switch>
 800d4c2:	bf00      	nop
 800d4c4:	20001090 	.word	0x20001090
	...

0800d4d0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800d4d0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800d4d2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800d4d4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800d4d6:	d012      	beq.n	800d4fe <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800d4d8:	4c0c      	ldr	r4, [pc, #48]	; (800d50c <chSchGoSleepTimeoutS+0x3c>)
 800d4da:	4a0d      	ldr	r2, [pc, #52]	; (800d510 <chSchGoSleepTimeoutS+0x40>)
 800d4dc:	69a3      	ldr	r3, [r4, #24]
 800d4de:	4605      	mov	r5, r0
 800d4e0:	a801      	add	r0, sp, #4
 800d4e2:	f7ff ff45 	bl	800d370 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7ff ffda 	bl	800d4a0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800d4ec:	9b04      	ldr	r3, [sp, #16]
 800d4ee:	b113      	cbz	r3, 800d4f6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800d4f0:	a801      	add	r0, sp, #4
 800d4f2:	f7ff ff5d 	bl	800d3b0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800d4f6:	69a3      	ldr	r3, [r4, #24]
}
 800d4f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d4fa:	b007      	add	sp, #28
 800d4fc:	bd30      	pop	{r4, r5, pc}
 800d4fe:	4c03      	ldr	r4, [pc, #12]	; (800d50c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800d500:	f7ff ffce 	bl	800d4a0 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800d504:	69a3      	ldr	r3, [r4, #24]
}
 800d506:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d508:	b007      	add	sp, #28
 800d50a:	bd30      	pop	{r4, r5, pc}
 800d50c:	20001090 	.word	0x20001090
 800d510:	0800d3e1 	.word	0x0800d3e1
	...

0800d520 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d520:	4b14      	ldr	r3, [pc, #80]	; (800d574 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800d522:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d524:	699e      	ldr	r6, [r3, #24]
 800d526:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800d528:	4605      	mov	r5, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d52a:	68b0      	ldr	r0, [r6, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800d52c:	6269      	str	r1, [r5, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d52e:	4284      	cmp	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d530:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d534:	d80b      	bhi.n	800d54e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d536:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800d538:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	4294      	cmp	r4, r2
 800d53e:	d9fb      	bls.n	800d538 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	606a      	str	r2, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800d544:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d546:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 800d548:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800d54a:	bc70      	pop	{r4, r5, r6}
 800d54c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d54e:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d550:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 800d552:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d554:	6891      	ldr	r1, [r2, #8]
 800d556:	4288      	cmp	r0, r1
 800d558:	d9fb      	bls.n	800d552 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d55a:	6850      	ldr	r0, [r2, #4]
 800d55c:	6070      	str	r0, [r6, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800d55e:	2401      	movs	r4, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800d560:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d562:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 800d564:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800d566:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 800d568:	4631      	mov	r1, r6
 800d56a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800d56c:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800d56e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800d570:	f7fe bdce 	b.w	800c110 <_port_switch>
 800d574:	20001090 	.word	0x20001090
	...

0800d580 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d580:	4b08      	ldr	r3, [pc, #32]	; (800d5a4 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800d582:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d584:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d586:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d588:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800d58a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d58c:	b921      	cbnz	r1, 800d598 <chSchIsPreemptionRequired+0x18>
 800d58e:	4283      	cmp	r3, r0
 800d590:	bf34      	ite	cc
 800d592:	2000      	movcc	r0, #0
 800d594:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800d596:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d598:	4283      	cmp	r3, r0
 800d59a:	bf94      	ite	ls
 800d59c:	2000      	movls	r0, #0
 800d59e:	2001      	movhi	r0, #1
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	20001090 	.word	0x20001090
	...

0800d5b0 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800d5b0:	4a0e      	ldr	r2, [pc, #56]	; (800d5ec <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800d5b2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 800d5b4:	b4f0      	push	{r4, r5, r6, r7}

  tqp->p_next = tp->p_next;
 800d5b6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp;

  otp = currp;
 800d5b8:	6994      	ldr	r4, [r2, #24]
 800d5ba:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d5bc:	2701      	movs	r7, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d5be:	2604      	movs	r6, #4
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d5c0:	2500      	movs	r5, #0
 800d5c2:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d5c4:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d5c6:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d5c8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d5ca:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800d5cc:	7725      	strb	r5, [r4, #28]
 800d5ce:	e000      	b.n	800d5d2 <chSchDoRescheduleBehind+0x22>
 800d5d0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	428a      	cmp	r2, r1
 800d5d6:	d2fb      	bcs.n	800d5d0 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800d5dc:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800d5de:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d5e0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d5e2:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800d5e4:	bcf0      	pop	{r4, r5, r6, r7}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800d5e6:	f7fe bd93 	b.w	800c110 <_port_switch>
 800d5ea:	bf00      	nop
 800d5ec:	20001090 	.word	0x20001090

0800d5f0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800d5f0:	4a0d      	ldr	r2, [pc, #52]	; (800d628 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800d5f2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 800d5f4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 800d5f6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp, *cp;

  otp = currp;
 800d5f8:	6994      	ldr	r4, [r2, #24]
 800d5fa:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d5fc:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 800d5fe:	2500      	movs	r5, #0
 800d600:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d602:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d604:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d606:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800d608:	7725      	strb	r5, [r4, #28]
 800d60a:	e000      	b.n	800d60e <chSchDoRescheduleAhead+0x1e>
 800d60c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800d60e:	689a      	ldr	r2, [r3, #8]
 800d610:	428a      	cmp	r2, r1
 800d612:	d8fb      	bhi.n	800d60c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800d618:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800d61a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800d61c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800d61e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 800d620:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800d622:	f7fe bd75 	b.w	800c110 <_port_switch>
 800d626:	bf00      	nop
 800d628:	20001090 	.word	0x20001090
 800d62c:	00000000 	.word	0x00000000

0800d630 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800d630:	4b04      	ldr	r3, [pc, #16]	; (800d644 <chSchRescheduleS+0x14>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 800d636:	6892      	ldr	r2, [r2, #8]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d800      	bhi.n	800d640 <chSchRescheduleS+0x10>
 800d63e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800d640:	f7ff bfd6 	b.w	800d5f0 <chSchDoRescheduleAhead>
 800d644:	20001090 	.word	0x20001090
	...

0800d650 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800d650:	4b03      	ldr	r3, [pc, #12]	; (800d660 <chSchDoReschedule+0x10>)
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	7fdb      	ldrb	r3, [r3, #31]
 800d656:	b10b      	cbz	r3, 800d65c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800d658:	f7ff bfca 	b.w	800d5f0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800d65c:	f7ff bfa8 	b.w	800d5b0 <chSchDoRescheduleBehind>
 800d660:	20001090 	.word	0x20001090
	...

0800d670 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d674:	4c11      	ldr	r4, [pc, #68]	; (800d6bc <_thread_init+0x4c>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800d676:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d678:	6966      	ldr	r6, [r4, #20]
 800d67a:	6146      	str	r6, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d67c:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d67e:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d682:	f04f 0802 	mov.w	r8, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d686:	f04f 0c04 	mov.w	ip, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d68a:	f04f 0e01 	mov.w	lr, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800d68e:	f100 0728 	add.w	r7, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800d692:	6081      	str	r1, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d694:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d696:	f880 801c 	strb.w	r8, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d69a:	f880 c01f 	strb.w	ip, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d69e:	f880 e01e 	strb.w	lr, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d6a2:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800d6a4:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800d6a6:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800d6a8:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800d6aa:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800d6ac:	6130      	str	r0, [r6, #16]
 800d6ae:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800d6b0:	6287      	str	r7, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d6b2:	62c5      	str	r5, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d6b4:	6305      	str	r5, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800d6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20001090 	.word	0x20001090

0800d6c0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d6c4:	3964      	subs	r1, #100	; 0x64
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d6c6:	4f18      	ldr	r7, [pc, #96]	; (800d728 <chThdCreateI+0x68>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d6c8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800d72c <chThdCreateI+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d6cc:	f8d7 e014 	ldr.w	lr, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d6d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d6d2:	4401      	add	r1, r0
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d6d4:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d6d6:	60c1      	str	r1, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d6d8:	f04f 0b02 	mov.w	fp, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d6dc:	640b      	str	r3, [r1, #64]	; 0x40

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d6de:	f04f 0a04 	mov.w	sl, #4
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d6e2:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d6e6:	f04f 0801 	mov.w	r8, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800d6ea:	f100 0c28 	add.w	ip, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d6ee:	644e      	str	r6, [r1, #68]	; 0x44
 800d6f0:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800d6f4:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d6f6:	6107      	str	r7, [r0, #16]
 800d6f8:	f8c0 e014 	str.w	lr, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800d6fc:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d6fe:	f880 b01c 	strb.w	fp, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d702:	f880 a01f 	strb.w	sl, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d706:	f880 801e 	strb.w	r8, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d70a:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800d70c:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800d70e:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800d710:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800d712:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 800d714:	f8ce 0010 	str.w	r0, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800d718:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 800d71c:	6178      	str	r0, [r7, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d71e:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d720:	6303      	str	r3, [r0, #48]	; 0x30
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 800d722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d726:	bf00      	nop
 800d728:	20001090 	.word	0x20001090
 800d72c:	0800c129 	.word	0x0800c129

0800d730 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800d730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	4604      	mov	r4, r0
 800d736:	2520      	movs	r5, #32
 800d738:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d73c:	4e1a      	ldr	r6, [pc, #104]	; (800d7a8 <chThdCreateStatic+0x78>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d73e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d7ac <chThdCreateStatic+0x7c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d742:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d744:	3964      	subs	r1, #100	; 0x64
 800d746:	4401      	add	r1, r0
 800d748:	60c1      	str	r1, [r0, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d74a:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d74c:	640b      	str	r3, [r1, #64]	; 0x40
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d74e:	f100 0b2c 	add.w	fp, r0, #44	; 0x2c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d752:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800d756:	f100 0e28 	add.w	lr, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75c:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d75e:	f04f 0902 	mov.w	r9, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d762:	f04f 0804 	mov.w	r8, #4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d766:	f8c1 a060 	str.w	sl, [r1, #96]	; 0x60
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800d76a:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d76c:	6106      	str	r6, [r0, #16]
 800d76e:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800d770:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d772:	f880 901c 	strb.w	r9, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d776:	f880 801f 	strb.w	r8, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d77a:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d77e:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800d780:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800d782:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800d784:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800d786:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d788:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d78a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800d78c:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d790:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d794:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
 800d798:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d79a:	f7ff fec1 	bl	800d520 <chSchWakeupS>
 800d79e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a8:	20001090 	.word	0x20001090
 800d7ac:	0800c129 	.word	0x0800c129

0800d7b0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800d7b0:	b508      	push	{r3, lr}
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	2320      	movs	r3, #32
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800d7ba:	2008      	movs	r0, #8
 800d7bc:	f7ff fe88 	bl	800d4d0 <chSchGoSleepTimeoutS>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	bd08      	pop	{r3, pc}
	...

0800d7d0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800d7d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800d7d2:	4b0e      	ldr	r3, [pc, #56]	; (800d80c <chThdExitS+0x3c>)
 800d7d4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d7d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800d7d8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d7da:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800d7de:	429d      	cmp	r5, r3
 800d7e0:	d007      	beq.n	800d7f2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff fe42 	bl	800d470 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d7ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d7ee:	42ab      	cmp	r3, r5
 800d7f0:	d1f7      	bne.n	800d7e2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800d7f2:	7f63      	ldrb	r3, [r4, #29]
 800d7f4:	079b      	lsls	r3, r3, #30
 800d7f6:	d104      	bne.n	800d802 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800d7f8:	6963      	ldr	r3, [r4, #20]
 800d7fa:	6922      	ldr	r2, [r4, #16]
 800d7fc:	611a      	str	r2, [r3, #16]
 800d7fe:	6922      	ldr	r2, [r4, #16]
 800d800:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d802:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800d804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d808:	f7ff be4a 	b.w	800d4a0 <chSchGoSleepS>
 800d80c:	20001090 	.word	0x20001090

0800d810 <chThdExit>:
 800d810:	2320      	movs	r3, #32
 800d812:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800d816:	f7ff bfdb 	b.w	800d7d0 <chThdExitS>
 800d81a:	bf00      	nop
 800d81c:	0000      	movs	r0, r0
	...

0800d820 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800d820:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800d822:	4c05      	ldr	r4, [pc, #20]	; (800d838 <chThdSuspendS+0x18>)
 800d824:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800d826:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800d828:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 800d82a:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800d82c:	2003      	movs	r0, #3
 800d82e:	f7ff fe37 	bl	800d4a0 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 800d832:	69a3      	ldr	r3, [r4, #24]
}
 800d834:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d836:	bd10      	pop	{r4, pc}
 800d838:	20001090 	.word	0x20001090
 800d83c:	00000000 	.word	0x00000000

0800d840 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800d840:	6803      	ldr	r3, [r0, #0]
 800d842:	b12b      	cbz	r3, 800d850 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800d844:	2200      	movs	r2, #0
 800d846:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800d848:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800d84a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d84c:	f7ff be10 	b.w	800d470 <chSchReadyI>
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
	...

0800d860 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800d860:	b169      	cbz	r1, 800d87e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d862:	4b08      	ldr	r3, [pc, #32]	; (800d884 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800d864:	b410      	push	{r4}
 800d866:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800d868:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d86a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d86c:	2004      	movs	r0, #4
 800d86e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800d872:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800d874:	6053      	str	r3, [r2, #4]
}
 800d876:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d87a:	f7ff be29 	b.w	800d4d0 <chSchGoSleepTimeoutS>
}
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295
 800d882:	4770      	bx	lr
 800d884:	20001090 	.word	0x20001090
	...

0800d890 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d890:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d892:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800d894:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 800d89a:	d009      	beq.n	800d8b0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	6022      	str	r2, [r4, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800d8a0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d8a2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800d8a4:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d8a6:	f7ff fde3 	bl	800d470 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	d1f5      	bne.n	800d89c <chThdDequeueAllI+0xc>
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
 800d8b2:	bf00      	nop
	...

0800d8c0 <chTMStartMeasurementX>:
 800d8c0:	4b01      	ldr	r3, [pc, #4]	; (800d8c8 <chTMStartMeasurementX+0x8>)
 800d8c2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800d8c4:	6083      	str	r3, [r0, #8]
 800d8c6:	4770      	bx	lr
 800d8c8:	e0001000 	.word	0xe0001000
 800d8cc:	00000000 	.word	0x00000000

0800d8d0 <chTMStopMeasurementX>:
 800d8d0:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d8d2:	4910      	ldr	r1, [pc, #64]	; (800d914 <chTMStopMeasurementX+0x44>)
 800d8d4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d8d6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800d8d8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d8da:	6f8f      	ldr	r7, [r1, #120]	; 0x78

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d8dc:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d8de:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800d8e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800d8e8:	18e4      	adds	r4, r4, r3
 800d8ea:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d8ee:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d8f0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d8f2:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800d8f4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800d8f6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d8fa:	d805      	bhi.n	800d908 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800d8fc:	6802      	ldr	r2, [r0, #0]
 800d8fe:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800d900:	bf38      	it	cc
 800d902:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d904:	bcf0      	pop	{r4, r5, r6, r7}
 800d906:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800d908:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d90a:	bcf0      	pop	{r4, r5, r6, r7}
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	e0001000 	.word	0xe0001000
 800d914:	20001090 	.word	0x20001090
	...

0800d920 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d920:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d922:	4c0c      	ldr	r4, [pc, #48]	; (800d954 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d924:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d926:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d928:	f04f 32ff 	mov.w	r2, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d92c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d92e:	2600      	movs	r6, #0
 800d930:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d932:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800d934:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800d936:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800d938:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d93a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d93c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d940:	f7ff ffbe 	bl	800d8c0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800d944:	4668      	mov	r0, sp
 800d946:	f7ff ffc3 	bl	800d8d0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800d94a:	9b02      	ldr	r3, [sp, #8]
 800d94c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d94e:	b006      	add	sp, #24
 800d950:	bdd0      	pop	{r4, r6, r7, pc}
 800d952:	bf00      	nop
 800d954:	20001090 	.word	0x20001090
	...

0800d960 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800d960:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d962:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d964:	6040      	str	r0, [r0, #4]
 800d966:	6083      	str	r3, [r0, #8]
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	0000      	movs	r0, r0
	...

0800d970 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d970:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d972:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d974:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d976:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d978:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d97a:	d00a      	beq.n	800d992 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d97c:	2a0b      	cmp	r2, #11
 800d97e:	d000      	beq.n	800d982 <chEvtSignalI+0x12>
 800d980:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800d982:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d984:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800d986:	428b      	cmp	r3, r1
 800d988:	d1fa      	bne.n	800d980 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d98e:	f7ff bd6f 	b.w	800d470 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d992:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d994:	4219      	tst	r1, r3
 800d996:	d1f8      	bne.n	800d98a <chEvtSignalI+0x1a>
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	0000      	movs	r0, r0
	...

0800d9a0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d9a0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800d9a2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d9a4:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d9aa:	d00d      	beq.n	800d9c8 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 800d9ac:	68e3      	ldr	r3, [r4, #12]
 800d9ae:	432b      	orrs	r3, r5
 800d9b0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800d9b2:	b115      	cbz	r5, 800d9ba <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800d9b4:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800d9b6:	4213      	tst	r3, r2
 800d9b8:	d003      	beq.n	800d9c2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800d9ba:	6860      	ldr	r0, [r4, #4]
 800d9bc:	68a1      	ldr	r1, [r4, #8]
 800d9be:	f7ff ffd7 	bl	800d970 <chEvtSignalI>
    }
    elp = elp->el_next;
 800d9c2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d9c4:	42a6      	cmp	r6, r4
 800d9c6:	d1f1      	bne.n	800d9ac <chEvtBroadcastFlagsI+0xc>
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	bf00      	nop
 800d9cc:	0000      	movs	r0, r0
	...

0800d9d0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800d9d0:	b430      	push	{r4, r5}
 800d9d2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800d9d4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d9d6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d9d8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d9da:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d9dc:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d9de:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d9e0:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800d9e2:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 800d9e4:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 800d9e6:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800d9e8:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800d9ea:	bc30      	pop	{r4, r5}
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop

0800d9f0 <chIQResetI>:

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800d9f0:	2100      	movs	r1, #0
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800d9f2:	68c2      	ldr	r2, [r0, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800d9f4:	6081      	str	r1, [r0, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800d9f6:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 800d9f8:	6142      	str	r2, [r0, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800d9fa:	f06f 0101 	mvn.w	r1, #1
 800d9fe:	f7ff bf47 	b.w	800d890 <chThdDequeueAllI>
 800da02:	bf00      	nop
	...

0800da10 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800da10:	b570      	push	{r4, r5, r6, lr}
 800da12:	2320      	movs	r3, #32
 800da14:	460e      	mov	r6, r1
 800da16:	4604      	mov	r4, r0
 800da18:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800da1c:	69c3      	ldr	r3, [r0, #28]
 800da1e:	b12b      	cbz	r3, 800da2c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800da20:	4798      	blx	r3
 800da22:	e003      	b.n	800da2c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800da24:	f7ff ff1c 	bl	800d860 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800da28:	2800      	cmp	r0, #0
 800da2a:	db15      	blt.n	800da58 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800da2c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800da2e:	4620      	mov	r0, r4
 800da30:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 800da32:	2d00      	cmp	r5, #0
 800da34:	d0f6      	beq.n	800da24 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800da36:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800da38:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800da3a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800da3c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800da3e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800da40:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800da42:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800da44:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800da46:	bf28      	it	cs
 800da48:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800da4a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800da4c:	bf28      	it	cs
 800da4e:	61a3      	strcs	r3, [r4, #24]
 800da50:	2300      	movs	r3, #0
 800da52:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800da56:	bd70      	pop	{r4, r5, r6, pc}
 800da58:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	bf00      	nop

0800da60 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	4604      	mov	r4, r0
 800da66:	b083      	sub	sp, #12
 800da68:	4689      	mov	r9, r1
 800da6a:	4693      	mov	fp, r2
 800da6c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800da6e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800da72:	2720      	movs	r7, #32
 800da74:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800da78:	2600      	movs	r6, #0
 800da7a:	9701      	str	r7, [sp, #4]
 800da7c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800da7e:	f1b8 0f00 	cmp.w	r8, #0
 800da82:	d005      	beq.n	800da90 <chIQReadTimeout+0x30>
      nfy(iqp);
 800da84:	4620      	mov	r0, r4
 800da86:	47c0      	blx	r8
 800da88:	e002      	b.n	800da90 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800da8a:	f7ff fee9 	bl	800d860 <chThdEnqueueTimeoutS>
 800da8e:	b9e0      	cbnz	r0, 800daca <chIQReadTimeout+0x6a>
 800da90:	68a7      	ldr	r7, [r4, #8]
 800da92:	4620      	mov	r0, r4
 800da94:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800da96:	2f00      	cmp	r7, #0
 800da98:	d0f7      	beq.n	800da8a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800da9a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800da9c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800da9e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800daa0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800daa2:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800daa4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800daa6:	7813      	ldrb	r3, [r2, #0]
 800daa8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	69a2      	ldr	r2, [r4, #24]
 800dab0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800dab2:	bf24      	itt	cs
 800dab4:	68e3      	ldrcs	r3, [r4, #12]
 800dab6:	61a3      	strcs	r3, [r4, #24]
 800dab8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800dabc:	3601      	adds	r6, #1
    if (--n == 0U) {
 800dabe:	45b3      	cmp	fp, r6
 800dac0:	d005      	beq.n	800dace <chIQReadTimeout+0x6e>
 800dac2:	9b01      	ldr	r3, [sp, #4]
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	e7d9      	b.n	800da7e <chIQReadTimeout+0x1e>
 800daca:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800dace:	4630      	mov	r0, r6
 800dad0:	b003      	add	sp, #12
 800dad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad6:	bf00      	nop
	...

0800dae0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800dae0:	b430      	push	{r4, r5}
 800dae2:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800dae4:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800dae6:	188d      	adds	r5, r1, r2
 800dae8:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800daea:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800daec:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800daee:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 800daf0:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 800daf2:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800daf4:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800daf6:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 800daf8:	bc30      	pop	{r4, r5}
 800dafa:	4770      	bx	lr
 800dafc:	0000      	movs	r0, r0
	...

0800db00 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 800db00:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800db02:	6902      	ldr	r2, [r0, #16]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 800db04:	68c4      	ldr	r4, [r0, #12]
 800db06:	6184      	str	r4, [r0, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800db08:	1b12      	subs	r2, r2, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800db0a:	6144      	str	r4, [r0, #20]
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800db0c:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800db10:	6082      	str	r2, [r0, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
}
 800db12:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800db16:	f7ff bebb 	b.w	800d890 <chThdDequeueAllI>
 800db1a:	bf00      	nop
 800db1c:	0000      	movs	r0, r0
	...

0800db20 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db22:	4604      	mov	r4, r0
 800db24:	460f      	mov	r7, r1
 800db26:	4616      	mov	r6, r2
 800db28:	2320      	movs	r3, #32
 800db2a:	f383 8811 	msr	BASEPRI, r3
 800db2e:	e003      	b.n	800db38 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800db30:	f7ff fe96 	bl	800d860 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800db34:	2800      	cmp	r0, #0
 800db36:	db19      	blt.n	800db6c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800db38:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800db3a:	4620      	mov	r0, r4
 800db3c:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800db3e:	2d00      	cmp	r5, #0
 800db40:	d0f6      	beq.n	800db30 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800db42:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800db44:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800db46:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800db48:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800db4a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800db4c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800db4e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	6962      	ldr	r2, [r4, #20]
 800db54:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800db56:	bf24      	itt	cs
 800db58:	68e3      	ldrcs	r3, [r4, #12]
 800db5a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800db5c:	69e3      	ldr	r3, [r4, #28]
 800db5e:	b10b      	cbz	r3, 800db64 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 800db60:	4620      	mov	r0, r4
 800db62:	4798      	blx	r3
 800db64:	2000      	movs	r0, #0
 800db66:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800db6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db6c:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800db70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db72:	bf00      	nop
	...

0800db80 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	b083      	sub	sp, #12
 800db86:	4604      	mov	r4, r0
 800db88:	468b      	mov	fp, r1
 800db8a:	4615      	mov	r5, r2
 800db8c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800db8e:	69c7      	ldr	r7, [r0, #28]
 800db90:	f04f 0820 	mov.w	r8, #32
 800db94:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 800db98:	2600      	movs	r6, #0
 800db9a:	46b1      	mov	r9, r6
 800db9c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800db9e:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800dba2:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800dba4:	b1fb      	cbz	r3, 800dbe6 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800dba6:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800dba8:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800dbaa:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800dbac:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800dbae:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800dbb0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800dbb2:	f89b 3000 	ldrb.w	r3, [fp]
 800dbb6:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	6962      	ldr	r2, [r4, #20]
 800dbbc:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800dbbe:	bf24      	itt	cs
 800dbc0:	68e3      	ldrcs	r3, [r4, #12]
 800dbc2:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 800dbc4:	b107      	cbz	r7, 800dbc8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 800dbc6:	47b8      	blx	r7
 800dbc8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800dbcc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800dbce:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 800dbd2:	d012      	beq.n	800dbfa <chOQWriteTimeout+0x7a>
 800dbd4:	f388 8811 	msr	BASEPRI, r8
 800dbd8:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800dbda:	46d3      	mov	fp, sl
 800dbdc:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800dbe0:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1df      	bne.n	800dba6 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	9901      	ldr	r1, [sp, #4]
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	f7ff fe38 	bl	800d860 <chThdEnqueueTimeoutS>
 800dbf0:	9b00      	ldr	r3, [sp, #0]
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d0d2      	beq.n	800db9c <chOQWriteTimeout+0x1c>
 800dbf6:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	b003      	add	sp, #12
 800dbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc02:	bf00      	nop
	...

0800dc10 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800dc10:	4a05      	ldr	r2, [pc, #20]	; (800dc28 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800dc12:	4b06      	ldr	r3, [pc, #24]	; (800dc2c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800dc14:	4806      	ldr	r0, [pc, #24]	; (800dc30 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800dc16:	4907      	ldr	r1, [pc, #28]	; (800dc34 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800dc18:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800dc1c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800dc20:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800dc22:	600b      	str	r3, [r1, #0]
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	20002f4b 	.word	0x20002f4b
 800dc2c:	20020000 	.word	0x20020000
 800dc30:	200012ec 	.word	0x200012ec
 800dc34:	200012e8 	.word	0x200012e8
	...

0800dc40 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800dc40:	b410      	push	{r4}
 800dc42:	2320      	movs	r3, #32
 800dc44:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800dc48:	4c09      	ldr	r4, [pc, #36]	; (800dc70 <chCoreAlloc+0x30>)
 800dc4a:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <chCoreAlloc+0x34>)
 800dc4c:	6822      	ldr	r2, [r4, #0]
 800dc4e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800dc50:	1dc3      	adds	r3, r0, #7
 800dc52:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800dc56:	1a89      	subs	r1, r1, r2
 800dc58:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800dc5a:	bf9d      	ittte	ls
 800dc5c:	189b      	addls	r3, r3, r2
 800dc5e:	6023      	strls	r3, [r4, #0]

  return p;
 800dc60:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 800dc62:	2000      	movhi	r0, #0
 800dc64:	2300      	movs	r3, #0
 800dc66:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800dc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	200012ec 	.word	0x200012ec
 800dc74:	200012e8 	.word	0x200012e8
	...

0800dc80 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800dc80:	4b04      	ldr	r3, [pc, #16]	; (800dc94 <_heap_init+0x14>)
 800dc82:	4a05      	ldr	r2, [pc, #20]	; (800dc98 <_heap_init+0x18>)
 800dc84:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800dc86:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800dc8e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800dc90:	f7ff be66 	b.w	800d960 <chMtxObjectInit>
 800dc94:	200012f0 	.word	0x200012f0
 800dc98:	0800dc41 	.word	0x0800dc41
 800dc9c:	00000000 	.word	0x00000000

0800dca0 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800dca0:	4a06      	ldr	r2, [pc, #24]	; (800dcbc <SVC_Handler+0x1c>)
 800dca2:	6853      	ldr	r3, [r2, #4]
 800dca4:	f023 0301 	bic.w	r3, r3, #1
 800dca8:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800dcaa:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800dcae:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800dcb0:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	4770      	bx	lr
 800dcbc:	e000ef30 	.word	0xe000ef30

0800dcc0 <_port_irq_epilogue>:
 800dcc0:	2320      	movs	r3, #32
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800dcc6:	4b12      	ldr	r3, [pc, #72]	; (800dd10 <_port_irq_epilogue+0x50>)
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800dcce:	d102      	bne.n	800dcd6 <_port_irq_epilogue+0x16>
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800dcd6:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800dcd8:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800dcdc:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800dce0:	4b0c      	ldr	r3, [pc, #48]	; (800dd14 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800dce2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800dcec:	f844 2c4c 	str.w	r2, [r4, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800dcf0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800dcf4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800dcf8:	f7ff fc42 	bl	800d580 <chSchIsPreemptionRequired>
 800dcfc:	b118      	cbz	r0, 800dd06 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800dcfe:	4b06      	ldr	r3, [pc, #24]	; (800dd18 <_port_irq_epilogue+0x58>)
 800dd00:	f844 3c50 	str.w	r3, [r4, #-80]
 800dd04:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800dd06:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <_port_irq_epilogue+0x5c>)
 800dd08:	f844 3c50 	str.w	r3, [r4, #-80]
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	bf00      	nop
 800dd10:	e000ed00 	.word	0xe000ed00
 800dd14:	e000ef30 	.word	0xe000ef30
 800dd18:	0800c139 	.word	0x0800c139
 800dd1c:	0800c13c 	.word	0x0800c13c

0800dd20 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800dd20:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800dd22:	f000 ff65 	bl	800ebf0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800dd26:	480a      	ldr	r0, [pc, #40]	; (800dd50 <halInit+0x30>)
 800dd28:	f001 f97a 	bl	800f020 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800dd2c:	f000 f818 	bl	800dd60 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800dd30:	f000 f846 	bl	800ddc0 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800dd34:	f000 f854 	bl	800dde0 <icuInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 800dd38:	f000 fa22 	bl	800e180 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800dd3c:	f000 fa30 	bl	800e1a0 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800dd40:	f000 f906 	bl	800df50 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800dd44:	f002 fa7c 	bl	8010240 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800dd48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800dd4c:	f000 ba10 	b.w	800e170 <stInit>
 800dd50:	080172c0 	.word	0x080172c0
	...

0800dd60 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800dd60:	f001 b946 	b.w	800eff0 <can_lld_init>
	...

0800dd70 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800dd70:	b5f0      	push	{r4, r5, r6, r7, lr}

  canp->state    = CAN_STOP;
  canp->config   = NULL;
  osalThreadQueueObjectInit(&canp->txqueue);
 800dd72:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800dd76:	f100 0310 	add.w	r3, r0, #16
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800dd7a:	f04f 0c01 	mov.w	ip, #1
  canp->config   = NULL;
 800dd7e:	f04f 0e00 	mov.w	lr, #0
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800dd82:	f100 0718 	add.w	r7, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800dd86:	f100 061c 	add.w	r6, r0, #28
  osalEventObjectInit(&canp->error_event);
 800dd8a:	f100 0520 	add.w	r5, r0, #32
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800dd8e:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800dd92:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800dd96:	f880 c000 	strb.w	ip, [r0]
  canp->config   = NULL;
 800dd9a:	f8c0 e004 	str.w	lr, [r0, #4]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800dd9e:	6187      	str	r7, [r0, #24]
 800dda0:	61c6      	str	r6, [r0, #28]
 800dda2:	6205      	str	r5, [r0, #32]
 800dda4:	6244      	str	r4, [r0, #36]	; 0x24
 800dda6:	6281      	str	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800dda8:	6082      	str	r2, [r0, #8]
  tqp->p_prev = (thread_t *)tqp;
 800ddaa:	60c2      	str	r2, [r0, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800ddac:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800ddae:	6143      	str	r3, [r0, #20]
 800ddb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb2:	bf00      	nop
	...

0800ddc0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800ddc0:	f001 bb5e 	b.w	800f480 <i2c_lld_init>
	...

0800ddd0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800ddd0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800ddd2:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800ddd4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800ddd6:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800ddd8:	300c      	adds	r0, #12
 800ddda:	f7ff bdc1 	b.w	800d960 <chMtxObjectInit>
 800ddde:	bf00      	nop

0800dde0 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800dde0:	f002 b96e 	b.w	80100c0 <icu_lld_init>
	...

0800ddf0 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800ddf0:	2201      	movs	r2, #1
  icup->config = NULL;
 800ddf2:	2300      	movs	r3, #0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800ddf4:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800ddf6:	6043      	str	r3, [r0, #4]
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	0000      	movs	r0, r0
	...

0800de00 <onotify>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 800de00:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 800de02:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800de04:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800de08:	6813      	ldr	r3, [r2, #0]
 800de0a:	7819      	ldrb	r1, [r3, #0]
 800de0c:	2904      	cmp	r1, #4
 800de0e:	d000      	beq.n	800de12 <onotify+0x12>
 800de10:	bd10      	pop	{r4, pc}
 800de12:	7a21      	ldrb	r1, [r4, #8]
 800de14:	2902      	cmp	r1, #2
 800de16:	d1fb      	bne.n	800de10 <onotify+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800de18:	7911      	ldrb	r1, [r2, #4]
 800de1a:	891a      	ldrh	r2, [r3, #8]
 800de1c:	2301      	movs	r3, #1
 800de1e:	408b      	lsls	r3, r1
 800de20:	401a      	ands	r2, r3
 800de22:	d1f5      	bne.n	800de10 <onotify+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800de24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800de2a:	1acb      	subs	r3, r1, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800de2c:	1a1b      	subs	r3, r3, r0
 800de2e:	d0ef      	beq.n	800de10 <onotify+0x10>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800de30:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 800de34:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800de38:	6810      	ldr	r0, [r2, #0]
 800de3a:	7911      	ldrb	r1, [r2, #4]
 800de3c:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800de40:	f000 fa0e 	bl	800e260 <usbPrepareQueuedTransmit>
 800de44:	2320      	movs	r3, #32
 800de46:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800de4a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    }
  }
}
 800de4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800de52:	6818      	ldr	r0, [r3, #0]
 800de54:	7919      	ldrb	r1, [r3, #4]
 800de56:	f000 ba2b 	b.w	800e2b0 <usbStartTransmitI>
 800de5a:	bf00      	nop
 800de5c:	0000      	movs	r0, r0
	...

0800de60 <inotify>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 800de60:	b538      	push	{r3, r4, r5, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 800de62:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800de64:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800de68:	6813      	ldr	r3, [r2, #0]
 800de6a:	7819      	ldrb	r1, [r3, #0]
 800de6c:	2904      	cmp	r1, #4
 800de6e:	d000      	beq.n	800de72 <inotify+0x12>
 800de70:	bd38      	pop	{r3, r4, r5, pc}
 800de72:	7a21      	ldrb	r1, [r4, #8]
 800de74:	2902      	cmp	r1, #2
 800de76:	d1fb      	bne.n	800de70 <inotify+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800de78:	7950      	ldrb	r0, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800de7a:	8959      	ldrh	r1, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800de7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800de80:	2201      	movs	r2, #1
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800de82:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800de84:	4082      	lsls	r2, r0
 800de86:	400a      	ands	r2, r1
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800de88:	8a5b      	ldrh	r3, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800de8a:	d1f1      	bne.n	800de70 <inotify+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800de8c:	69a1      	ldr	r1, [r4, #24]
 800de8e:	69e0      	ldr	r0, [r4, #28]
 800de90:	6965      	ldr	r5, [r4, #20]
 800de92:	1a40      	subs	r0, r0, r1
 800de94:	1b41      	subs	r1, r0, r5
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800de96:	428b      	cmp	r3, r1
 800de98:	d8ea      	bhi.n	800de70 <inotify+0x10>
 800de9a:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 800de9e:	fbb1 f1f3 	udiv	r1, r1, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 800dea2:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800dea6:	fb03 f301 	mul.w	r3, r3, r1
 800deaa:	6810      	ldr	r0, [r2, #0]
 800deac:	7951      	ldrb	r1, [r2, #5]
 800deae:	f104 020c 	add.w	r2, r4, #12
 800deb2:	f000 f9c5 	bl	800e240 <usbPrepareQueuedReceive>
 800deb6:	2320      	movs	r3, #32
 800deb8:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800debc:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 800dec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800dec8:	f000 b9da 	b.w	800e280 <usbStartReceiveI>
 800decc:	0000      	movs	r0, r0
	...

0800ded0 <readt>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 800ded0:	300c      	adds	r0, #12
 800ded2:	f7ff bdc5 	b.w	800da60 <chIQReadTimeout>
 800ded6:	bf00      	nop
	...

0800dee0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 800dee0:	300c      	adds	r0, #12
 800dee2:	f04f 33ff 	mov.w	r3, #4294967295
 800dee6:	f7ff bdbb 	b.w	800da60 <chIQReadTimeout>
 800deea:	bf00      	nop
 800deec:	0000      	movs	r0, r0
	...

0800def0 <writet>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 800def0:	3030      	adds	r0, #48	; 0x30
 800def2:	f7ff be45 	b.w	800db80 <chOQWriteTimeout>
 800def6:	bf00      	nop
	...

0800df00 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 800df00:	3030      	adds	r0, #48	; 0x30
 800df02:	f04f 33ff 	mov.w	r3, #4294967295
 800df06:	f7ff be3b 	b.w	800db80 <chOQWriteTimeout>
 800df0a:	bf00      	nop
 800df0c:	0000      	movs	r0, r0
	...

0800df10 <gett>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 800df10:	300c      	adds	r0, #12
 800df12:	f7ff bd7d 	b.w	800da10 <chIQGetTimeout>
 800df16:	bf00      	nop
	...

0800df20 <get>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 800df20:	300c      	adds	r0, #12
 800df22:	f04f 31ff 	mov.w	r1, #4294967295
 800df26:	f7ff bd73 	b.w	800da10 <chIQGetTimeout>
 800df2a:	bf00      	nop
 800df2c:	0000      	movs	r0, r0
	...

0800df30 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 800df30:	3030      	adds	r0, #48	; 0x30
 800df32:	f7ff bdf5 	b.w	800db20 <chOQPutTimeout>
 800df36:	bf00      	nop
	...

0800df40 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 800df40:	3030      	adds	r0, #48	; 0x30
 800df42:	f04f 32ff 	mov.w	r2, #4294967295
 800df46:	f7ff bdeb 	b.w	800db20 <chOQPutTimeout>
 800df4a:	bf00      	nop
 800df4c:	0000      	movs	r0, r0
	...

0800df50 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
	...

0800df60 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800df60:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 800df62:	4603      	mov	r3, r0
 800df64:	4a0e      	ldr	r2, [pc, #56]	; (800dfa0 <sduObjectInit+0x40>)
 800df66:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800df6a:	b082      	sub	sp, #8
 800df6c:	4604      	mov	r4, r0

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800df6e:	2201      	movs	r2, #1
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800df70:	9000      	str	r0, [sp, #0]
 800df72:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800df76:	6043      	str	r3, [r0, #4]
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800df78:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800df7a:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <sduObjectInit+0x44>)
 800df7c:	300c      	adds	r0, #12
 800df7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df82:	f7ff fd25 	bl	800d9d0 <chIQObjectInit>
  oqObjectInit(&sdup->oqueue, sdup->ob, SERIAL_USB_BUFFERS_SIZE, onotify, sdup);
 800df86:	9400      	str	r4, [sp, #0]
 800df88:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800df8c:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800df90:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df94:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <sduObjectInit+0x48>)
 800df96:	f7ff fda3 	bl	800dae0 <chOQObjectInit>
}
 800df9a:	b002      	add	sp, #8
 800df9c:	bd10      	pop	{r4, pc}
 800df9e:	bf00      	nop
 800dfa0:	08017160 	.word	0x08017160
 800dfa4:	0800de61 	.word	0x0800de61
 800dfa8:	0800de01 	.word	0x0800de01
 800dfac:	00000000 	.word	0x00000000

0800dfb0 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 800dfb0:	680b      	ldr	r3, [r1, #0]
 800dfb2:	2220      	movs	r2, #32
 800dfb4:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800dfb8:	790a      	ldrb	r2, [r1, #4]
 800dfba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800dfbe:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800dfc0:	794a      	ldrb	r2, [r1, #5]
 800dfc2:	3209      	adds	r2, #9
 800dfc4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 800dfc8:	798a      	ldrb	r2, [r1, #6]
 800dfca:	b112      	cbz	r2, 800dfd2 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800dfcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dfd0:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 800dfd6:	f8c0 1254 	str.w	r1, [r0, #596]	; 0x254
 800dfda:	2300      	movs	r3, #0
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
	...

0800dff0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800dff0:	b570      	push	{r4, r5, r6, lr}
  USBDriver *usbp = sdup->config->usbp;
 800dff2:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  iqResetI(&sdup->iqueue);
 800dff6:	f100 060c 	add.w	r6, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800dffa:	4604      	mov	r4, r0
  USBDriver *usbp = sdup->config->usbp;

  iqResetI(&sdup->iqueue);
 800dffc:	4630      	mov	r0, r6
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 800dffe:	681d      	ldr	r5, [r3, #0]

  iqResetI(&sdup->iqueue);
 800e000:	f7ff fcf6 	bl	800d9f0 <chIQResetI>
  oqResetI(&sdup->oqueue);
 800e004:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e008:	f7ff fd7a 	bl	800db00 <chOQResetI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e00c:	1d20      	adds	r0, r4, #4
 800e00e:	2101      	movs	r1, #1
 800e010:	f7ff fcc6 	bl	800d9a0 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800e014:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800e018:	7959      	ldrb	r1, [r3, #5]
 800e01a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800e01e:	4628      	mov	r0, r5
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800e020:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800e022:	4632      	mov	r2, r6
 800e024:	8a5b      	ldrh	r3, [r3, #18]
 800e026:	f000 f90b 	bl	800e240 <usbPrepareQueuedReceive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800e02a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800e02e:	4628      	mov	r0, r5
 800e030:	7959      	ldrb	r1, [r3, #5]
}
 800e032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800e036:	f000 b923 	b.w	800e280 <usbStartReceiveI>
 800e03a:	bf00      	nop
 800e03c:	0000      	movs	r0, r0
	...

0800e040 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800e040:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e048:	2b20      	cmp	r3, #32
 800e04a:	d001      	beq.n	800e050 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800e04c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800e04e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 800e050:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800e054:	2b21      	cmp	r3, #33	; 0x21
 800e056:	d003      	beq.n	800e060 <sduRequestsHook+0x20>
 800e058:	2b22      	cmp	r3, #34	; 0x22
 800e05a:	d009      	beq.n	800e070 <sduRequestsHook+0x30>
 800e05c:	2b20      	cmp	r3, #32
 800e05e:	d1f5      	bne.n	800e04c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800e060:	4b06      	ldr	r3, [pc, #24]	; (800e07c <sduRequestsHook+0x3c>)
 800e062:	6383      	str	r3, [r0, #56]	; 0x38
 800e064:	2207      	movs	r2, #7
 800e066:	2300      	movs	r3, #0
 800e068:	63c2      	str	r2, [r0, #60]	; 0x3c
 800e06a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800e06c:	2001      	movs	r0, #1
 800e06e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e070:	2300      	movs	r3, #0
 800e072:	6383      	str	r3, [r0, #56]	; 0x38
 800e074:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e076:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800e078:	2001      	movs	r0, #1
 800e07a:	4770      	bx	lr
 800e07c:	20000800 	.word	0x20000800

0800e080 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800e082:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800e086:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800e088:	b1bc      	cbz	r4, 800e0ba <sduDataTransmitted+0x3a>
 800e08a:	460e      	mov	r6, r1
 800e08c:	4605      	mov	r5, r0
 800e08e:	2720      	movs	r7, #32
 800e090:	f387 8811 	msr	BASEPRI, r7
 800e094:	2108      	movs	r1, #8
 800e096:	1d20      	adds	r0, r4, #4
 800e098:	f7ff fc82 	bl	800d9a0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800e09c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e09e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e0a2:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800e0a4:	1a5b      	subs	r3, r3, r1
 800e0a6:	d110      	bne.n	800e0ca <sduDataTransmitted+0x4a>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800e0a8:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	695a      	ldr	r2, [r3, #20]
 800e0b0:	6852      	ldr	r2, [r2, #4]
 800e0b2:	b91a      	cbnz	r2, 800e0bc <sduDataTransmitted+0x3c>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800e0bc:	8a1b      	ldrh	r3, [r3, #16]
 800e0be:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	d1f7      	bne.n	800e0b4 <sduDataTransmitted+0x34>
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	e002      	b.n	800e0d0 <sduDataTransmitted+0x50>
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f382 8811 	msr	BASEPRI, r2
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800e0d0:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	f000 f8c2 	bl	800e260 <usbPrepareQueuedTransmit>
 800e0dc:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	f000 f8e4 	bl	800e2b0 <usbStartTransmitI>
 800e0e8:	e7e4      	b.n	800e0b4 <sduDataTransmitted+0x34>
 800e0ea:	bf00      	nop
 800e0ec:	0000      	movs	r0, r0
	...

0800e0f0 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800e0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800e0f4:	f101 0309 	add.w	r3, r1, #9
 800e0f8:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800e0fc:	b1be      	cbz	r6, 800e12e <sduDataReceived+0x3e>
 800e0fe:	4680      	mov	r8, r0
 800e100:	460f      	mov	r7, r1
 800e102:	f04f 0920 	mov.w	r9, #32
 800e106:	f389 8811 	msr	BASEPRI, r9
 800e10a:	2104      	movs	r1, #4
 800e10c:	1870      	adds	r0, r6, r1
 800e10e:	f7ff fc47 	bl	800d9a0 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 800e112:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800e116:	69b4      	ldr	r4, [r6, #24]
 800e118:	68da      	ldr	r2, [r3, #12]
 800e11a:	69f5      	ldr	r5, [r6, #28]
 800e11c:	6973      	ldr	r3, [r6, #20]
 800e11e:	8a51      	ldrh	r1, [r2, #18]
 800e120:	1b2d      	subs	r5, r5, r4
 800e122:	1aec      	subs	r4, r5, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800e124:	42a1      	cmp	r1, r4
 800e126:	d904      	bls.n	800e132 <sduDataReceived+0x42>
 800e128:	2300      	movs	r3, #0
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e132:	2300      	movs	r3, #0
 800e134:	f383 8811 	msr	BASEPRI, r3
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 800e138:	fbb4 f3f1 	udiv	r3, r4, r1
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 800e13c:	f106 020c 	add.w	r2, r6, #12
 800e140:	fb01 f303 	mul.w	r3, r1, r3
 800e144:	4640      	mov	r0, r8
 800e146:	4639      	mov	r1, r7
 800e148:	f000 f87a 	bl	800e240 <usbPrepareQueuedReceive>
 800e14c:	f389 8811 	msr	BASEPRI, r9

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 800e150:	4640      	mov	r0, r8
 800e152:	4639      	mov	r1, r7
 800e154:	f000 f894 	bl	800e280 <usbStartReceiveI>
 800e158:	e7e6      	b.n	800e128 <sduDataReceived+0x38>
 800e15a:	bf00      	nop
 800e15c:	0000      	movs	r0, r0
	...

0800e160 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
	...

0800e170 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800e170:	f001 bfc6 	b.w	8010100 <st_lld_init>
	...

0800e180 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 800e180:	f002 b82e 	b.w	80101e0 <uart_lld_init>
	...

0800e190 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 800e190:	2300      	movs	r3, #0
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 800e192:	2201      	movs	r2, #1
 800e194:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 800e196:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 800e198:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800e19a:	6043      	str	r3, [r0, #4]
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop

0800e1a0 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800e1a0:	f001 bb5e 	b.w	800f860 <usb_lld_init>
	...

0800e1b0 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800e1b0:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800e1b6:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800e1b8:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800e1ba:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800e1bc:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800e1be:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800e1c0:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800e1c2:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800e1c4:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800e1c6:	8143      	strh	r3, [r0, #10]
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	0000      	movs	r0, r0
	...

0800e1d0 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	2320      	movs	r3, #32
 800e1d6:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800e1da:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800e1dc:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800e1de:	60c5      	str	r5, [r0, #12]
 800e1e0:	6105      	str	r5, [r0, #16]
 800e1e2:	6145      	str	r5, [r0, #20]
 800e1e4:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 800e1e6:	f001 fb53 	bl	800f890 <usb_lld_start>
  usbp->state = USB_READY;
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	7023      	strb	r3, [r4, #0]
 800e1ee:	f385 8811 	msr	BASEPRI, r5
 800e1f2:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e200 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	4606      	mov	r6, r0
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800e204:	6950      	ldr	r0, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 800e206:	4614      	mov	r4, r2
 800e208:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800e20a:	b118      	cbz	r0, 800e214 <usbInitEndpointI+0x14>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800e20c:	2100      	movs	r1, #0
 800e20e:	2214      	movs	r2, #20
 800e210:	f005 f9d6 	bl	80135c0 <memset>
  }
  if (epcp->out_state != NULL) {
 800e214:	69a0      	ldr	r0, [r4, #24]
 800e216:	b118      	cbz	r0, 800e220 <usbInitEndpointI+0x20>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800e218:	2100      	movs	r1, #0
 800e21a:	2214      	movs	r2, #20
 800e21c:	f005 f9d0 	bl	80135c0 <memset>
  }

  usbp->epc[ep] = epcp;
 800e220:	eb06 0385 	add.w	r3, r6, r5, lsl #2

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800e224:	4630      	mov	r0, r6
  }
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  usbp->epc[ep] = epcp;
 800e226:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800e228:	4629      	mov	r1, r5
}
 800e22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800e22e:	f001 bc1f 	b.w	800fa70 <usb_lld_init_endpoint>
 800e232:	bf00      	nop
	...

0800e240 <usbPrepareQueuedReceive>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
 800e240:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e242:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  osp->rxqueued           = true;
 800e246:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e248:	68e4      	ldr	r4, [r4, #12]
 800e24a:	69a4      	ldr	r4, [r4, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800e24c:	2500      	movs	r5, #0
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 800e24e:	60e2      	str	r2, [r4, #12]
  osp->rxsize             = n;
 800e250:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 800e252:	7026      	strb	r6, [r4, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800e254:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_receive(usbp, ep);
}
 800e256:	bc70      	pop	{r4, r5, r6}
  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800e258:	f001 bcea 	b.w	800fc30 <usb_lld_prepare_receive>
 800e25c:	0000      	movs	r0, r0
	...

0800e260 <usbPrepareQueuedTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
 800e260:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e262:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  isp->txqueued           = true;
 800e266:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e268:	68e4      	ldr	r4, [r4, #12]
 800e26a:	6964      	ldr	r4, [r4, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800e26c:	2500      	movs	r5, #0
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 800e26e:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 800e270:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 800e272:	7026      	strb	r6, [r4, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800e274:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 800e276:	bc70      	pop	{r4, r5, r6}
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800e278:	f001 bd5a 	b.w	800fd30 <usb_lld_prepare_transmit>
 800e27c:	0000      	movs	r0, r0
	...

0800e280 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800e280:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 800e282:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800e284:	fa02 f301 	lsl.w	r3, r2, r1
 800e288:	8944      	ldrh	r4, [r0, #10]
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	ea13 0604 	ands.w	r6, r3, r4
 800e290:	d001      	beq.n	800e296 <usbStartReceiveI+0x16>
    return true;
 800e292:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 800e294:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e296:	4323      	orrs	r3, r4
 800e298:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
 800e29a:	f001 fe59 	bl	800ff50 <usb_lld_start_out>
  return false;
 800e29e:	4630      	mov	r0, r6
 800e2a0:	bd70      	pop	{r4, r5, r6, pc}
 800e2a2:	bf00      	nop
	...

0800e2b0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800e2b0:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 800e2b2:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800e2b4:	fa02 f301 	lsl.w	r3, r2, r1
 800e2b8:	8904      	ldrh	r4, [r0, #8]
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	ea13 0604 	ands.w	r6, r3, r4
 800e2c0:	d001      	beq.n	800e2c6 <usbStartTransmitI+0x16>
    return true;
 800e2c2:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 800e2c4:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e2c6:	4323      	orrs	r3, r4
 800e2c8:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
 800e2ca:	f001 fe51 	bl	800ff70 <usb_lld_start_in>
  return false;
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	bd70      	pop	{r4, r5, r6, pc}
 800e2d2:	bf00      	nop
	...

0800e2e0 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800e2e0:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800e2e2:	2102      	movs	r1, #2
 800e2e4:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800e2e6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800e2ea:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800e2ee:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800e2f2:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 800e2f4:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800e2f6:	60c2      	str	r2, [r0, #12]
 800e2f8:	6102      	str	r2, [r0, #16]
 800e2fa:	6142      	str	r2, [r0, #20]
 800e2fc:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e2fe:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800e302:	f001 bb3d 	b.w	800f980 <usb_lld_reset>
 800e306:	bf00      	nop
	...

0800e310 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e312:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800e314:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e316:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800e31a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800e31e:	f001 fc77 	bl	800fc10 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800e322:	6863      	ldr	r3, [r4, #4]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	b363      	cbz	r3, 800e382 <_usb_ep0setup+0x72>
      !(usbp->config->requests_hook_cb(usbp))) {
 800e328:	4620      	mov	r0, r4
 800e32a:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800e32c:	b348      	cbz	r0, 800e382 <_usb_ep0setup+0x72>
 800e32e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800e330:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800e334:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800e338:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800e33c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800e340:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 800e342:	bf3c      	itt	cc
 800e344:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800e346:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800e348:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e34c:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800e34e:	f040 8088 	bne.w	800e462 <_usb_ep0setup+0x152>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800e352:	2d00      	cmp	r5, #0
 800e354:	d16d      	bne.n	800e432 <_usb_ep0setup+0x122>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e356:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800e358:	2205      	movs	r2, #5
 800e35a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800e35e:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800e360:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800e362:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800e364:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 800e366:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800e368:	4629      	mov	r1, r5
 800e36a:	f001 fce1 	bl	800fd30 <usb_lld_prepare_transmit>
 800e36e:	2320      	movs	r3, #32
 800e370:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800e374:	4620      	mov	r0, r4
 800e376:	4629      	mov	r1, r5
 800e378:	f7ff ff9a 	bl	800e2b0 <usbStartTransmitI>
 800e37c:	f385 8811 	msr	BASEPRI, r5
 800e380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800e382:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e386:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 800e38a:	d011      	beq.n	800e3b0 <_usb_ep0setup+0xa0>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800e38c:	4620      	mov	r0, r4
 800e38e:	2100      	movs	r1, #0
 800e390:	f001 fe16 	bl	800ffc0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800e394:	4620      	mov	r0, r4
 800e396:	2100      	movs	r1, #0
 800e398:	f001 fe02 	bl	800ffa0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e39c:	6863      	ldr	r3, [r4, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	b113      	cbz	r3, 800e3a8 <_usb_ep0setup+0x98>
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	2105      	movs	r1, #5
 800e3a6:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800e3a8:	2306      	movs	r3, #6
 800e3aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800e3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 800e3b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e3b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 800e3b8:	ea42 2605 	orr.w	r6, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e3bc:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 800e3c0:	f000 8100 	beq.w	800e5c4 <_usb_ep0setup+0x2b4>
 800e3c4:	d917      	bls.n	800e3f6 <_usb_ep0setup+0xe6>
 800e3c6:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800e3ca:	f000 80e2 	beq.w	800e592 <_usb_ep0setup+0x282>
 800e3ce:	d977      	bls.n	800e4c0 <_usb_ep0setup+0x1b0>
 800e3d0:	f5b6 6f10 	cmp.w	r6, #2304	; 0x900
 800e3d4:	f000 8087 	beq.w	800e4e6 <_usb_ep0setup+0x1d6>
 800e3d8:	f640 4202 	movw	r2, #3074	; 0xc02
 800e3dc:	4296      	cmp	r6, r2
 800e3de:	f000 8104 	beq.w	800e5ea <_usb_ep0setup+0x2da>
 800e3e2:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 800e3e6:	d1d1      	bne.n	800e38c <_usb_ep0setup+0x7c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800e3e8:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800e3ec:	2501      	movs	r5, #1
 800e3ee:	6427      	str	r7, [r4, #64]	; 0x40
 800e3f0:	63a2      	str	r2, [r4, #56]	; 0x38
 800e3f2:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e3f4:	e79e      	b.n	800e334 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e3f6:	2e02      	cmp	r6, #2
 800e3f8:	f000 80b4 	beq.w	800e564 <_usb_ep0setup+0x254>
 800e3fc:	f240 80a9 	bls.w	800e552 <_usb_ep0setup+0x242>
 800e400:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800e404:	f000 8095 	beq.w	800e532 <_usb_ep0setup+0x222>
 800e408:	f5b6 7f81 	cmp.w	r6, #258	; 0x102
 800e40c:	d1be      	bne.n	800e38c <_usb_ep0setup+0x7c>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800e40e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e412:	2a00      	cmp	r2, #0
 800e414:	d1ba      	bne.n	800e38c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800e416:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800e41a:	f012 010f 	ands.w	r1, r2, #15
 800e41e:	d05d      	beq.n	800e4dc <_usb_ep0setup+0x1cc>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e420:	0612      	lsls	r2, r2, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800e422:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e424:	f100 8109 	bmi.w	800e63a <_usb_ep0setup+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800e428:	f001 fdda 	bl	800ffe0 <usb_lld_clear_out>
 800e42c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e430:	e054      	b.n	800e4dc <_usb_ep0setup+0x1cc>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e432:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800e434:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800e436:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800e438:	2104      	movs	r1, #4
 800e43a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800e43e:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800e440:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 800e442:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800e444:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800e446:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800e448:	4631      	mov	r1, r6
 800e44a:	f001 fbf1 	bl	800fc30 <usb_lld_prepare_receive>
 800e44e:	2320      	movs	r3, #32
 800e450:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 800e454:	4620      	mov	r0, r4
 800e456:	4631      	mov	r1, r6
 800e458:	f7ff ff12 	bl	800e280 <usbStartReceiveI>
 800e45c:	f386 8811 	msr	BASEPRI, r6
 800e460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800e462:	b1bd      	cbz	r5, 800e494 <_usb_ep0setup+0x184>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e464:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800e466:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800e468:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 800e46a:	2101      	movs	r1, #1
 800e46c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800e470:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800e472:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800e474:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800e476:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800e478:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800e47a:	4631      	mov	r1, r6
 800e47c:	f001 fc58 	bl	800fd30 <usb_lld_prepare_transmit>
 800e480:	2320      	movs	r3, #32
 800e482:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800e486:	4620      	mov	r0, r4
 800e488:	4631      	mov	r1, r6
 800e48a:	f7ff ff11 	bl	800e2b0 <usbStartTransmitI>
 800e48e:	f386 8811 	msr	BASEPRI, r6
 800e492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e494:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800e496:	2203      	movs	r2, #3
 800e498:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800e49c:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800e49e:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800e4a0:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800e4a2:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800e4a4:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	f001 fbc2 	bl	800fc30 <usb_lld_prepare_receive>
 800e4ac:	2320      	movs	r3, #32
 800e4ae:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7ff fee3 	bl	800e280 <usbStartReceiveI>
 800e4ba:	f385 8811 	msr	BASEPRI, r5
 800e4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e4c0:	f240 3202 	movw	r2, #770	; 0x302
 800e4c4:	4296      	cmp	r6, r2
 800e4c6:	d021      	beq.n	800e50c <_usb_ep0setup+0x1fc>
 800e4c8:	f5b6 6fa0 	cmp.w	r6, #1280	; 0x500
 800e4cc:	f47f af5e 	bne.w	800e38c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800e4d0:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 800e4d4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800e4d8:	f000 809d 	beq.w	800e616 <_usb_ep0setup+0x306>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800e4dc:	2500      	movs	r5, #0
 800e4de:	63a5      	str	r5, [r4, #56]	; 0x38
 800e4e0:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e4e2:	6425      	str	r5, [r4, #64]	; 0x40
 800e4e4:	e726      	b.n	800e334 <_usb_ep0setup+0x24>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800e4e6:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e4ea:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800e4ee:	2a00      	cmp	r2, #0
 800e4f0:	f040 8082 	bne.w	800e5f8 <_usb_ep0setup+0x2e8>
      usbp->state = USB_SELECTED;
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800e4f8:	6862      	ldr	r2, [r4, #4]
 800e4fa:	6812      	ldr	r2, [r2, #0]
 800e4fc:	2a00      	cmp	r2, #0
 800e4fe:	d0ed      	beq.n	800e4dc <_usb_ep0setup+0x1cc>
 800e500:	4620      	mov	r0, r4
 800e502:	2102      	movs	r1, #2
 800e504:	4790      	blx	r2
 800e506:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e50a:	e7e7      	b.n	800e4dc <_usb_ep0setup+0x1cc>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800e50c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e510:	2a00      	cmp	r2, #0
 800e512:	f47f af3b 	bne.w	800e38c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800e516:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800e51a:	f012 010f 	ands.w	r1, r2, #15
 800e51e:	d0dd      	beq.n	800e4dc <_usb_ep0setup+0x1cc>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e520:	0613      	lsls	r3, r2, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800e522:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e524:	f100 808e 	bmi.w	800e644 <_usb_ep0setup+0x334>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800e528:	f001 fd3a 	bl	800ffa0 <usb_lld_stall_out>
 800e52c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e530:	e7d4      	b.n	800e4dc <_usb_ep0setup+0x1cc>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800e532:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e536:	2a01      	cmp	r2, #1
 800e538:	f47f af28 	bne.w	800e38c <_usb_ep0setup+0x7c>
      usbp->status &= ~2U;
 800e53c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e540:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800e542:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e546:	63e7      	str	r7, [r4, #60]	; 0x3c
 800e548:	6427      	str	r7, [r4, #64]	; 0x40
 800e54a:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800e54c:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 800e550:	e6f0      	b.n	800e334 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e552:	2e00      	cmp	r6, #0
 800e554:	d146      	bne.n	800e5e4 <_usb_ep0setup+0x2d4>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800e556:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800e55a:	2502      	movs	r5, #2
 800e55c:	6426      	str	r6, [r4, #64]	; 0x40
 800e55e:	63a2      	str	r2, [r4, #56]	; 0x38
 800e560:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e562:	e6e7      	b.n	800e334 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800e564:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e568:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800e56c:	4620      	mov	r0, r4
 800e56e:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800e572:	d144      	bne.n	800e5fe <_usb_ep0setup+0x2ee>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800e574:	f001 fb2c 	bl	800fbd0 <usb_lld_get_status_out>
 800e578:	2801      	cmp	r0, #1
 800e57a:	d044      	beq.n	800e606 <_usb_ep0setup+0x2f6>
 800e57c:	2802      	cmp	r0, #2
 800e57e:	f47f af05 	bne.w	800e38c <_usb_ep0setup+0x7c>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800e582:	4b33      	ldr	r3, [pc, #204]	; (800e650 <_usb_ep0setup+0x340>)
 800e584:	63a3      	str	r3, [r4, #56]	; 0x38
 800e586:	63e0      	str	r0, [r4, #60]	; 0x3c
 800e588:	6427      	str	r7, [r4, #64]	; 0x40
 800e58a:	4605      	mov	r5, r0
 800e58c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e590:	e6d0      	b.n	800e334 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800e592:	6862      	ldr	r2, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800e594:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800e598:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800e59c:	6855      	ldr	r5, [r2, #4]
 800e59e:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800e5a2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e5a6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	f43f aeec 	beq.w	800e38c <_usb_ep0setup+0x7c>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800e5b4:	6843      	ldr	r3, [r0, #4]
 800e5b6:	6805      	ldr	r5, [r0, #0]
 800e5b8:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e5ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800e5bc:	6427      	str	r7, [r4, #64]	; 0x40
 800e5be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e5c2:	e6b7      	b.n	800e334 <_usb_ep0setup+0x24>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800e5c4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e5c8:	2a01      	cmp	r2, #1
 800e5ca:	f47f aedf 	bne.w	800e38c <_usb_ep0setup+0x7c>
      usbp->status |= 2U;
 800e5ce:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e5d2:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800e5d4:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e5d8:	63e7      	str	r7, [r4, #60]	; 0x3c
 800e5da:	6427      	str	r7, [r4, #64]	; 0x40
 800e5dc:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800e5de:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 800e5e2:	e6a7      	b.n	800e334 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e5e4:	2e01      	cmp	r6, #1
 800e5e6:	f47f aed1 	bne.w	800e38c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800e5ea:	4a1a      	ldr	r2, [pc, #104]	; (800e654 <_usb_ep0setup+0x344>)
 800e5ec:	63a2      	str	r2, [r4, #56]	; 0x38
 800e5ee:	2502      	movs	r5, #2
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e5f4:	6422      	str	r2, [r4, #64]	; 0x40
 800e5f6:	e69d      	b.n	800e334 <_usb_ep0setup+0x24>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	7022      	strb	r2, [r4, #0]
 800e5fc:	e77c      	b.n	800e4f8 <_usb_ep0setup+0x1e8>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800e5fe:	f001 faf7 	bl	800fbf0 <usb_lld_get_status_in>
 800e602:	2801      	cmp	r0, #1
 800e604:	d1ba      	bne.n	800e57c <_usb_ep0setup+0x26c>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800e606:	4b14      	ldr	r3, [pc, #80]	; (800e658 <_usb_ep0setup+0x348>)
 800e608:	63a3      	str	r3, [r4, #56]	; 0x38
 800e60a:	63e6      	str	r6, [r4, #60]	; 0x3c
 800e60c:	6427      	str	r7, [r4, #64]	; 0x40
 800e60e:	4635      	mov	r5, r6
 800e610:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e614:	e68e      	b.n	800e334 <_usb_ep0setup+0x24>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 800e616:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e61a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800e61e:	4620      	mov	r0, r4
 800e620:	f001 fa16 	bl	800fa50 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800e624:	6863      	ldr	r3, [r4, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	b113      	cbz	r3, 800e630 <_usb_ep0setup+0x320>
 800e62a:	4620      	mov	r0, r4
 800e62c:	2101      	movs	r1, #1
 800e62e:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800e630:	2203      	movs	r2, #3
 800e632:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e636:	7022      	strb	r2, [r4, #0]
 800e638:	e750      	b.n	800e4dc <_usb_ep0setup+0x1cc>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800e63a:	f001 fce1 	bl	8010000 <usb_lld_clear_in>
 800e63e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e642:	e74b      	b.n	800e4dc <_usb_ep0setup+0x1cc>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800e644:	f001 fcbc 	bl	800ffc0 <usb_lld_stall_in>
 800e648:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e64c:	e746      	b.n	800e4dc <_usb_ep0setup+0x1cc>
 800e64e:	bf00      	nop
 800e650:	08017190 	.word	0x08017190
 800e654:	08017180 	.word	0x08017180
 800e658:	080171a0 	.word	0x080171a0
 800e65c:	00000000 	.word	0x00000000

0800e660 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800e660:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800e662:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800e666:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800e668:	2b06      	cmp	r3, #6
 800e66a:	d815      	bhi.n	800e698 <_usb_ep0in+0x38>
 800e66c:	e8df f003 	tbb	[pc, r3]
 800e670:	041c3404 	.word	0x041c3404
 800e674:	1504      	.short	0x1504
 800e676:	04          	.byte	0x04
 800e677:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800e678:	2100      	movs	r1, #0
 800e67a:	f001 fca1 	bl	800ffc0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800e67e:	4620      	mov	r0, r4
 800e680:	2100      	movs	r1, #0
 800e682:	f001 fc8d 	bl	800ffa0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e686:	6863      	ldr	r3, [r4, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	b113      	cbz	r3, 800e692 <_usb_ep0in+0x32>
 800e68c:	4620      	mov	r0, r4
 800e68e:	2105      	movs	r1, #5
 800e690:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800e692:	2306      	movs	r3, #6
 800e694:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800e698:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800e69a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e69c:	b103      	cbz	r3, 800e6a0 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 800e69e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e6aa:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800e6ac:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800e6ae:	2203      	movs	r2, #3
 800e6b0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800e6b4:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800e6b6:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800e6b8:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800e6ba:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800e6bc:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f001 fab6 	bl	800fc30 <usb_lld_prepare_receive>
 800e6c4:	2320      	movs	r3, #32
 800e6c6:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	f7ff fdd7 	bl	800e280 <usbStartReceiveI>
 800e6d2:	f385 8811 	msr	BASEPRI, r5
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800e6d8:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 800e6dc:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800e6e0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 800e6e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800e6e6:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800e6e8:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800e6ea:	d9de      	bls.n	800e6aa <_usb_ep0in+0x4a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800e6ec:	8a1d      	ldrh	r5, [r3, #16]
 800e6ee:	fbb1 f2f5 	udiv	r2, r1, r5
 800e6f2:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800e6f6:	2d00      	cmp	r5, #0
 800e6f8:	d1d7      	bne.n	800e6aa <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e6fa:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800e6fc:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800e6fe:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800e700:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800e702:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 800e704:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800e706:	f001 fb13 	bl	800fd30 <usb_lld_prepare_transmit>
 800e70a:	2320      	movs	r3, #32
 800e70c:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800e710:	4620      	mov	r0, r4
 800e712:	4629      	mov	r1, r5
 800e714:	f7ff fdcc 	bl	800e2b0 <usbStartTransmitI>
 800e718:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800e71c:	2302      	movs	r3, #2
 800e71e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800e722:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e730 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800e730:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800e734:	2a06      	cmp	r2, #6
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800e736:	b538      	push	{r3, r4, r5, lr}
 800e738:	d80a      	bhi.n	800e750 <_usb_ep0out+0x20>
 800e73a:	2301      	movs	r3, #1
 800e73c:	4093      	lsls	r3, r2
 800e73e:	f013 0f67 	tst.w	r3, #103	; 0x67
 800e742:	4604      	mov	r4, r0
 800e744:	d111      	bne.n	800e76a <_usb_ep0out+0x3a>
 800e746:	f013 0508 	ands.w	r5, r3, #8
 800e74a:	d102      	bne.n	800e752 <_usb_ep0out+0x22>
 800e74c:	06db      	lsls	r3, r3, #27
 800e74e:	d41d      	bmi.n	800e78c <_usb_ep0out+0x5c>
 800e750:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800e752:	68c3      	ldr	r3, [r0, #12]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1f9      	bne.n	800e750 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800e75c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e75e:	b103      	cbz	r3, 800e762 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 800e760:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e762:	2300      	movs	r3, #0
 800e764:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800e768:	bd38      	pop	{r3, r4, r5, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800e76a:	2100      	movs	r1, #0
 800e76c:	f001 fc28 	bl	800ffc0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800e770:	4620      	mov	r0, r4
 800e772:	2100      	movs	r1, #0
 800e774:	f001 fc14 	bl	800ffa0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e778:	6863      	ldr	r3, [r4, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	b113      	cbz	r3, 800e784 <_usb_ep0out+0x54>
 800e77e:	4620      	mov	r0, r4
 800e780:	2105      	movs	r1, #5
 800e782:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800e784:	2306      	movs	r3, #6
 800e786:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e78c:	68c3      	ldr	r3, [r0, #12]
 800e78e:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800e790:	2205      	movs	r2, #5
 800e792:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800e796:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800e798:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800e79a:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800e79c:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 800e79e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800e7a0:	f001 fac6 	bl	800fd30 <usb_lld_prepare_transmit>
 800e7a4:	2320      	movs	r3, #32
 800e7a6:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7ff fd7f 	bl	800e2b0 <usbStartTransmitI>
 800e7b2:	f385 8811 	msr	BASEPRI, r5
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e7c0 <nvicEnableVector>:
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e7c0:	0943      	lsrs	r3, r0, #5
 800e7c2:	009b      	lsls	r3, r3, #2
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800e7c4:	b410      	push	{r4}
 800e7c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800e7ca:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800e7ce:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800e7d2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800e7d6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e7d8:	f000 001f 	and.w	r0, r0, #31
 800e7dc:	2201      	movs	r2, #1
 800e7de:	4082      	lsls	r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800e7e0:	b2c9      	uxtb	r1, r1
 800e7e2:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e7e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800e7ea:	601a      	str	r2, [r3, #0]
}
 800e7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
	...

0800e800 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800e800:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800e804:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800e808:	0109      	lsls	r1, r1, #4
 800e80a:	b2c9      	uxtb	r1, r1
 800e80c:	7601      	strb	r1, [r0, #24]
 800e80e:	4770      	bx	lr

0800e810 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800e810:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e812:	4b07      	ldr	r3, [pc, #28]	; (800e830 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800e814:	4a07      	ldr	r2, [pc, #28]	; (800e834 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e816:	6819      	ldr	r1, [r3, #0]
 800e818:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800e81c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800e81e:	6813      	ldr	r3, [r2, #0]
 800e820:	b10b      	cbz	r3, 800e826 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800e822:	6850      	ldr	r0, [r2, #4]
 800e824:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800e826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e82a:	f7ff ba49 	b.w	800dcc0 <_port_irq_epilogue>
 800e82e:	bf00      	nop
 800e830:	40026000 	.word	0x40026000
 800e834:	20001310 	.word	0x20001310
	...

0800e840 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e840:	4b08      	ldr	r3, [pc, #32]	; (800e864 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800e842:	4809      	ldr	r0, [pc, #36]	; (800e868 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e844:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800e846:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e848:	0989      	lsrs	r1, r1, #6
 800e84a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800e84e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 800e850:	018c      	lsls	r4, r1, #6
 800e852:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800e854:	b10a      	cbz	r2, 800e85a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800e856:	68c0      	ldr	r0, [r0, #12]
 800e858:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e85e:	f7ff ba2f 	b.w	800dcc0 <_port_irq_epilogue>
 800e862:	bf00      	nop
 800e864:	40026000 	.word	0x40026000
 800e868:	20001310 	.word	0x20001310
 800e86c:	00000000 	.word	0x00000000

0800e870 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e870:	4b08      	ldr	r3, [pc, #32]	; (800e894 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800e872:	4809      	ldr	r0, [pc, #36]	; (800e898 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e874:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800e876:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e878:	0c09      	lsrs	r1, r1, #16
 800e87a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800e87e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 800e880:	040c      	lsls	r4, r1, #16
 800e882:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800e884:	b10a      	cbz	r2, 800e88a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800e886:	6940      	ldr	r0, [r0, #20]
 800e888:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e88e:	f7ff ba17 	b.w	800dcc0 <_port_irq_epilogue>
 800e892:	bf00      	nop
 800e894:	40026000 	.word	0x40026000
 800e898:	20001310 	.word	0x20001310
 800e89c:	00000000 	.word	0x00000000

0800e8a0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e8a0:	4b08      	ldr	r3, [pc, #32]	; (800e8c4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e8a2:	4809      	ldr	r0, [pc, #36]	; (800e8c8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e8a4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e8a6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e8a8:	0d89      	lsrs	r1, r1, #22
 800e8aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800e8ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 800e8b0:	058c      	lsls	r4, r1, #22
 800e8b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800e8b4:	b10a      	cbz	r2, 800e8ba <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800e8b6:	69c0      	ldr	r0, [r0, #28]
 800e8b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e8be:	f7ff b9ff 	b.w	800dcc0 <_port_irq_epilogue>
 800e8c2:	bf00      	nop
 800e8c4:	40026000 	.word	0x40026000
 800e8c8:	20001310 	.word	0x20001310
 800e8cc:	00000000 	.word	0x00000000

0800e8d0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800e8d0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e8d2:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e8d4:	4807      	ldr	r0, [pc, #28]	; (800e8f4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e8d6:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e8d8:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e8da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800e8de:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800e8e0:	b10a      	cbz	r2, 800e8e6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800e8e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e8e4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e8e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e8ea:	f7ff b9e9 	b.w	800dcc0 <_port_irq_epilogue>
 800e8ee:	bf00      	nop
 800e8f0:	40026000 	.word	0x40026000
 800e8f4:	20001310 	.word	0x20001310
	...

0800e900 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e900:	4b08      	ldr	r3, [pc, #32]	; (800e924 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e902:	4809      	ldr	r0, [pc, #36]	; (800e928 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e904:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e906:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e908:	0989      	lsrs	r1, r1, #6
 800e90a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800e90e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 800e910:	018c      	lsls	r4, r1, #6
 800e912:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800e914:	b10a      	cbz	r2, 800e91a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800e916:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e918:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e91e:	f7ff b9cf 	b.w	800dcc0 <_port_irq_epilogue>
 800e922:	bf00      	nop
 800e924:	40026000 	.word	0x40026000
 800e928:	20001310 	.word	0x20001310
 800e92c:	00000000 	.word	0x00000000

0800e930 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e930:	4b08      	ldr	r3, [pc, #32]	; (800e954 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e932:	4809      	ldr	r0, [pc, #36]	; (800e958 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e934:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e936:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e938:	0c09      	lsrs	r1, r1, #16
 800e93a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800e93e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 800e940:	040c      	lsls	r4, r1, #16
 800e942:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800e944:	b10a      	cbz	r2, 800e94a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800e946:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e948:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e94e:	f7ff b9b7 	b.w	800dcc0 <_port_irq_epilogue>
 800e952:	bf00      	nop
 800e954:	40026000 	.word	0x40026000
 800e958:	20001310 	.word	0x20001310
 800e95c:	00000000 	.word	0x00000000

0800e960 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e960:	4b08      	ldr	r3, [pc, #32]	; (800e984 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e962:	4809      	ldr	r0, [pc, #36]	; (800e988 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e964:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e966:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e968:	0d89      	lsrs	r1, r1, #22
 800e96a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 800e96e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 800e970:	058c      	lsls	r4, r1, #22
 800e972:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800e974:	b10a      	cbz	r2, 800e97a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800e976:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e978:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e97e:	f7ff b99f 	b.w	800dcc0 <_port_irq_epilogue>
 800e982:	bf00      	nop
 800e984:	40026000 	.word	0x40026000
 800e988:	20001310 	.word	0x20001310
 800e98c:	00000000 	.word	0x00000000

0800e990 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800e990:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e992:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e994:	4807      	ldr	r0, [pc, #28]	; (800e9b4 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e996:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e998:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e99a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800e99e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800e9a0:	b10a      	cbz	r2, 800e9a6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800e9a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e9a4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e9a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e9aa:	f7ff b989 	b.w	800dcc0 <_port_irq_epilogue>
 800e9ae:	bf00      	nop
 800e9b0:	40026400 	.word	0x40026400
 800e9b4:	20001310 	.word	0x20001310
	...

0800e9c0 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e9c0:	4b08      	ldr	r3, [pc, #32]	; (800e9e4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e9c2:	4809      	ldr	r0, [pc, #36]	; (800e9e8 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e9c4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e9c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e9c8:	0989      	lsrs	r1, r1, #6
 800e9ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800e9ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 800e9d0:	018c      	lsls	r4, r1, #6
 800e9d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800e9d4:	b10a      	cbz	r2, 800e9da <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800e9d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e9d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e9de:	f7ff b96f 	b.w	800dcc0 <_port_irq_epilogue>
 800e9e2:	bf00      	nop
 800e9e4:	40026400 	.word	0x40026400
 800e9e8:	20001310 	.word	0x20001310
 800e9ec:	00000000 	.word	0x00000000

0800e9f0 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e9f0:	4b08      	ldr	r3, [pc, #32]	; (800ea14 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e9f2:	4809      	ldr	r0, [pc, #36]	; (800ea18 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e9f4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e9f6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e9f8:	0c09      	lsrs	r1, r1, #16
 800e9fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800e9fe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 800ea00:	040c      	lsls	r4, r1, #16
 800ea02:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800ea04:	b10a      	cbz	r2, 800ea0a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800ea06:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800ea08:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800ea0e:	f7ff b957 	b.w	800dcc0 <_port_irq_epilogue>
 800ea12:	bf00      	nop
 800ea14:	40026400 	.word	0x40026400
 800ea18:	20001310 	.word	0x20001310
 800ea1c:	00000000 	.word	0x00000000

0800ea20 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800ea20:	4b08      	ldr	r3, [pc, #32]	; (800ea44 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800ea22:	4809      	ldr	r0, [pc, #36]	; (800ea48 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800ea24:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800ea26:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800ea28:	0d89      	lsrs	r1, r1, #22
 800ea2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800ea2e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 800ea30:	058c      	lsls	r4, r1, #22
 800ea32:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800ea34:	b10a      	cbz	r2, 800ea3a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800ea36:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800ea38:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800ea3e:	f7ff b93f 	b.w	800dcc0 <_port_irq_epilogue>
 800ea42:	bf00      	nop
 800ea44:	40026400 	.word	0x40026400
 800ea48:	20001310 	.word	0x20001310
 800ea4c:	00000000 	.word	0x00000000

0800ea50 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800ea50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800ea52:	4b07      	ldr	r3, [pc, #28]	; (800ea70 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800ea54:	4807      	ldr	r0, [pc, #28]	; (800ea74 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800ea56:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800ea58:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800ea5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800ea5e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800ea60:	b10a      	cbz	r2, 800ea66 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800ea62:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800ea64:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800ea6a:	f7ff b929 	b.w	800dcc0 <_port_irq_epilogue>
 800ea6e:	bf00      	nop
 800ea70:	40026400 	.word	0x40026400
 800ea74:	20001310 	.word	0x20001310
	...

0800ea80 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800ea80:	4b08      	ldr	r3, [pc, #32]	; (800eaa4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800ea82:	4809      	ldr	r0, [pc, #36]	; (800eaa8 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800ea84:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800ea86:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800ea88:	0989      	lsrs	r1, r1, #6
 800ea8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800ea8e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 800ea90:	018c      	lsls	r4, r1, #6
 800ea92:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800ea94:	b10a      	cbz	r2, 800ea9a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800ea96:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800ea98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800ea9e:	f7ff b90f 	b.w	800dcc0 <_port_irq_epilogue>
 800eaa2:	bf00      	nop
 800eaa4:	40026400 	.word	0x40026400
 800eaa8:	20001310 	.word	0x20001310
 800eaac:	00000000 	.word	0x00000000

0800eab0 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800eab0:	4b08      	ldr	r3, [pc, #32]	; (800ead4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800eab2:	4809      	ldr	r0, [pc, #36]	; (800ead8 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800eab4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800eab6:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800eab8:	0c09      	lsrs	r1, r1, #16
 800eaba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 800eabe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 800eac0:	040c      	lsls	r4, r1, #16
 800eac2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800eac4:	b10a      	cbz	r2, 800eaca <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800eac6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800eac8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800eaca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800eace:	f7ff b8f7 	b.w	800dcc0 <_port_irq_epilogue>
 800ead2:	bf00      	nop
 800ead4:	40026400 	.word	0x40026400
 800ead8:	20001310 	.word	0x20001310
 800eadc:	00000000 	.word	0x00000000

0800eae0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800eae0:	4b08      	ldr	r3, [pc, #32]	; (800eb04 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800eae2:	4809      	ldr	r0, [pc, #36]	; (800eb08 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800eae4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800eae6:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800eae8:	0d89      	lsrs	r1, r1, #22
 800eaea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 800eaee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 800eaf0:	058c      	lsls	r4, r1, #22
 800eaf2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800eaf4:	b10a      	cbz	r2, 800eafa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800eaf6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800eaf8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800eafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800eafe:	f7ff b8df 	b.w	800dcc0 <_port_irq_epilogue>
 800eb02:	bf00      	nop
 800eb04:	40026400 	.word	0x40026400
 800eb08:	20001310 	.word	0x20001310
 800eb0c:	00000000 	.word	0x00000000

0800eb10 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800eb10:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <dmaInit+0x38>)
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800eb12:	b430      	push	{r4, r5}
  int i;

  dma_streams_mask = 0;
 800eb14:	2200      	movs	r2, #0
 800eb16:	4d0d      	ldr	r5, [pc, #52]	; (800eb4c <dmaInit+0x3c>)
 800eb18:	4c0d      	ldr	r4, [pc, #52]	; (800eb50 <dmaInit+0x40>)
 800eb1a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800eb1c:	4611      	mov	r1, r2
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800eb1e:	4613      	mov	r3, r2
    _stm32_dma_streams[i].stream->CR = 0;
 800eb20:	58a8      	ldr	r0, [r5, r2]
 800eb22:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800eb24:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800eb28:	3301      	adds	r3, #1
 800eb2a:	2b10      	cmp	r3, #16
 800eb2c:	f102 020c 	add.w	r2, r2, #12
 800eb30:	d1f6      	bne.n	800eb20 <dmaInit+0x10>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800eb32:	4908      	ldr	r1, [pc, #32]	; (800eb54 <dmaInit+0x44>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800eb34:	4a08      	ldr	r2, [pc, #32]	; (800eb58 <dmaInit+0x48>)
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800eb36:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3a:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800eb3c:	bc30      	pop	{r4, r5}
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
  DMA1->HIFCR = 0xFFFFFFFF;
 800eb3e:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800eb40:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800eb42:	60d3      	str	r3, [r2, #12]
}
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	20001390 	.word	0x20001390
 800eb4c:	080171b0 	.word	0x080171b0
 800eb50:	20001310 	.word	0x20001310
 800eb54:	40026000 	.word	0x40026000
 800eb58:	40026400 	.word	0x40026400
 800eb5c:	00000000 	.word	0x00000000

0800eb60 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800eb62:	4f1f      	ldr	r7, [pc, #124]	; (800ebe0 <dmaStreamAllocate+0x80>)
 800eb64:	7a46      	ldrb	r6, [r0, #9]
 800eb66:	683d      	ldr	r5, [r7, #0]
 800eb68:	2401      	movs	r4, #1
 800eb6a:	fa04 fe06 	lsl.w	lr, r4, r6
 800eb6e:	ea1e 0f05 	tst.w	lr, r5
 800eb72:	d131      	bne.n	800ebd8 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800eb74:	4c1b      	ldr	r4, [pc, #108]	; (800ebe4 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800eb76:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800eb7a:	eb04 0cc6 	add.w	ip, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800eb7e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800eb82:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800eb84:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800eb88:	f8cc 3004 	str.w	r3, [ip, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800eb8c:	d004      	beq.n	800eb98 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 800eb8e:	4c16      	ldr	r4, [pc, #88]	; (800ebe8 <dmaStreamAllocate+0x88>)
 800eb90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eb96:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800eb98:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800eb9c:	d116      	bne.n	800ebcc <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800eb9e:	6805      	ldr	r5, [r0, #0]
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	f023 031f 	bic.w	r3, r3, #31
 800eba6:	602b      	str	r3, [r5, #0]
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	f013 0401 	ands.w	r4, r3, #1
 800ebae:	d1fb      	bne.n	800eba8 <dmaStreamAllocate+0x48>
 800ebb0:	7a07      	ldrb	r7, [r0, #8]
 800ebb2:	6846      	ldr	r6, [r0, #4]
 800ebb4:	233d      	movs	r3, #61	; 0x3d
 800ebb6:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800ebb8:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800ebba:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800ebbc:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800ebbe:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800ebc0:	b162      	cbz	r2, 800ebdc <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 800ebc2:	7a80      	ldrb	r0, [r0, #10]
 800ebc4:	f7ff fdfc 	bl	800e7c0 <nvicEnableVector>

  return FALSE;
 800ebc8:	4620      	mov	r0, r4
 800ebca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 800ebcc:	4c06      	ldr	r4, [pc, #24]	; (800ebe8 <dmaStreamAllocate+0x88>)
 800ebce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ebd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ebd4:	6323      	str	r3, [r4, #48]	; 0x30
 800ebd6:	e7e2      	b.n	800eb9e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 800ebd8:	4620      	mov	r0, r4
 800ebda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 800ebdc:	4610      	mov	r0, r2
}
 800ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebe0:	20001390 	.word	0x20001390
 800ebe4:	20001310 	.word	0x20001310
 800ebe8:	40023800 	.word	0x40023800
 800ebec:	00000000 	.word	0x00000000

0800ebf0 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800ebf0:	4b17      	ldr	r3, [pc, #92]	; (800ec50 <hal_lld_init+0x60>)
 800ebf2:	f04f 31ff 	mov.w	r1, #4294967295
 800ebf6:	691a      	ldr	r2, [r3, #16]
 800ebf8:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800ebfa:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800ebfc:	6119      	str	r1, [r3, #16]
 800ebfe:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800ec00:	6958      	ldr	r0, [r3, #20]
 800ec02:	6159      	str	r1, [r3, #20]
 800ec04:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800ec06:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800ec08:	4c12      	ldr	r4, [pc, #72]	; (800ec54 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800ec0a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800ec0e:	6218      	str	r0, [r3, #32]
 800ec10:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800ec12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ec14:	6259      	str	r1, [r3, #36]	; 0x24
 800ec16:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800ec18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ec1a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800ec1e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800ec20:	6821      	ldr	r1, [r4, #0]
 800ec22:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ec26:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800ec28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ec2a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800ec2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ec32:	d003      	beq.n	800ec3c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800ec34:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ec38:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800ec3a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800ec3c:	4a05      	ldr	r2, [pc, #20]	; (800ec54 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800ec3e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800ec42:	6853      	ldr	r3, [r2, #4]
 800ec44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec48:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800ec4a:	f7ff bf61 	b.w	800eb10 <dmaInit>
 800ec4e:	bf00      	nop
 800ec50:	40023800 	.word	0x40023800
 800ec54:	40007000 	.word	0x40007000
	...

0800ec60 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800ec60:	492c      	ldr	r1, [pc, #176]	; (800ed14 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800ec62:	4b2d      	ldr	r3, [pc, #180]	; (800ed18 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800ec64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800ec68:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800ec6c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800ec6e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800ec70:	680b      	ldr	r3, [r1, #0]
 800ec72:	f043 0301 	orr.w	r3, r3, #1
 800ec76:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800ec78:	680a      	ldr	r2, [r1, #0]
 800ec7a:	4b26      	ldr	r3, [pc, #152]	; (800ed14 <stm32_clock_init+0xb4>)
 800ec7c:	0790      	lsls	r0, r2, #30
 800ec7e:	d5fb      	bpl.n	800ec78 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800ec80:	689a      	ldr	r2, [r3, #8]
 800ec82:	f022 0203 	bic.w	r2, r2, #3
 800ec86:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800ec88:	689a      	ldr	r2, [r3, #8]
 800ec8a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	688b      	ldr	r3, [r1, #8]
 800ec90:	4a20      	ldr	r2, [pc, #128]	; (800ed14 <stm32_clock_init+0xb4>)
 800ec92:	f013 030c 	ands.w	r3, r3, #12
 800ec96:	d1fa      	bne.n	800ec8e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800ec98:	6811      	ldr	r1, [r2, #0]
 800ec9a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800ec9e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800eca0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 800eca2:	6813      	ldr	r3, [r2, #0]
 800eca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eca8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800ecaa:	6811      	ldr	r1, [r2, #0]
 800ecac:	4b19      	ldr	r3, [pc, #100]	; (800ed14 <stm32_clock_init+0xb4>)
 800ecae:	0389      	lsls	r1, r1, #14
 800ecb0:	d5fb      	bpl.n	800ecaa <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800ecb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ecb4:	f042 0201 	orr.w	r2, r2, #1
 800ecb8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800ecba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ecbc:	4915      	ldr	r1, [pc, #84]	; (800ed14 <stm32_clock_init+0xb4>)
 800ecbe:	0790      	lsls	r0, r2, #30
 800ecc0:	d5fb      	bpl.n	800ecba <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800ecc2:	4b16      	ldr	r3, [pc, #88]	; (800ed1c <stm32_clock_init+0xbc>)
 800ecc4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800ecc6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800ecc8:	4a13      	ldr	r2, [pc, #76]	; (800ed18 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800ecca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ecce:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800ecd0:	6853      	ldr	r3, [r2, #4]
 800ecd2:	0459      	lsls	r1, r3, #17
 800ecd4:	d5fc      	bpl.n	800ecd0 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800ecd6:	490f      	ldr	r1, [pc, #60]	; (800ed14 <stm32_clock_init+0xb4>)
 800ecd8:	680a      	ldr	r2, [r1, #0]
 800ecda:	4b0e      	ldr	r3, [pc, #56]	; (800ed14 <stm32_clock_init+0xb4>)
 800ecdc:	0192      	lsls	r2, r2, #6
 800ecde:	d5fb      	bpl.n	800ecd8 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800ece0:	4a0f      	ldr	r2, [pc, #60]	; (800ed20 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800ece2:	4910      	ldr	r1, [pc, #64]	; (800ed24 <stm32_clock_init+0xc4>)
 800ece4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800ece6:	f240 7105 	movw	r1, #1797	; 0x705
 800ecea:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800ecec:	689a      	ldr	r2, [r3, #8]
 800ecee:	f042 0202 	orr.w	r2, r2, #2
 800ecf2:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	6893      	ldr	r3, [r2, #8]
 800ecf8:	4906      	ldr	r1, [pc, #24]	; (800ed14 <stm32_clock_init+0xb4>)
 800ecfa:	f003 030c 	and.w	r3, r3, #12
 800ecfe:	2b08      	cmp	r3, #8
 800ed00:	d1f9      	bne.n	800ecf6 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800ed02:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ed04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed08:	644b      	str	r3, [r1, #68]	; 0x44
 800ed0a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ed0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed10:	664b      	str	r3, [r1, #100]	; 0x64
 800ed12:	4770      	bx	lr
 800ed14:	40023800 	.word	0x40023800
 800ed18:	40007000 	.word	0x40007000
 800ed1c:	07405408 	.word	0x07405408
 800ed20:	40023c00 	.word	0x40023c00
 800ed24:	38089400 	.word	0x38089400
	...

0800ed30 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800ed30:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800ed32:	4c43      	ldr	r4, [pc, #268]	; (800ee40 <can_lld_set_filters+0x110>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800ed34:	4d43      	ldr	r5, [pc, #268]	; (800ee44 <can_lld_set_filters+0x114>)
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800ed36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ed3c:	6423      	str	r3, [r4, #64]	; 0x40

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800ed3e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800ed42:	0c1b      	lsrs	r3, r3, #16
 800ed44:	041b      	lsls	r3, r3, #16
 800ed46:	f043 0301 	orr.w	r3, r3, #1
 800ed4a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ed4e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  if (num > 0) {
 800ed52:	2900      	cmp	r1, #0
 800ed54:	d04e      	beq.n	800edf4 <can_lld_set_filters+0xc4>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800ed56:	2300      	movs	r3, #0
 800ed58:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed5c:	4618      	mov	r0, r3
  if (num > 0) {
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
 800ed5e:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
      CAN1->sFilterRegister[i].FR1 = 0;
 800ed62:	461c      	mov	r4, r3
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
 800ed64:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800ed68:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800ed6c:	00c3      	lsls	r3, r0, #3
 800ed6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed72:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed76:	3001      	adds	r0, #1
 800ed78:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800ed7a:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800ed7e:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed82:	d1f3      	bne.n	800ed6c <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800ed84:	482f      	ldr	r0, [pc, #188]	; (800ee44 <can_lld_set_filters+0x114>)
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed86:	2600      	movs	r6, #0
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 800ed88:	2701      	movs	r7, #1
 800ed8a:	6815      	ldr	r5, [r2, #0]
      if (cfp->mode)
 800ed8c:	7914      	ldrb	r4, [r2, #4]
 800ed8e:	00eb      	lsls	r3, r5, #3
 800ed90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed94:	f014 0f01 	tst.w	r4, #1
 800ed98:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800ed9c:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800eda0:	fa07 f505 	lsl.w	r5, r7, r5
      if (cfp->mode)
 800eda4:	d005      	beq.n	800edb2 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800eda6:	f8d0 e204 	ldr.w	lr, [r0, #516]	; 0x204
 800edaa:	ea45 0e0e 	orr.w	lr, r5, lr
 800edae:	f8c0 e204 	str.w	lr, [r0, #516]	; 0x204
      if (cfp->scale)
 800edb2:	f014 0f02 	tst.w	r4, #2
 800edb6:	d005      	beq.n	800edc4 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800edb8:	f8d0 e20c 	ldr.w	lr, [r0, #524]	; 0x20c
 800edbc:	ea45 0e0e 	orr.w	lr, r5, lr
 800edc0:	f8c0 e20c 	str.w	lr, [r0, #524]	; 0x20c
      if (cfp->assignment)
 800edc4:	0764      	lsls	r4, r4, #29
 800edc6:	d504      	bpl.n	800edd2 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800edc8:	f8d0 4214 	ldr.w	r4, [r0, #532]	; 0x214
 800edcc:	432c      	orrs	r4, r5
 800edce:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800edd2:	6894      	ldr	r4, [r2, #8]
 800edd4:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800edd8:	68d4      	ldr	r4, [r2, #12]
 800edda:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800edde:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800ede2:	428e      	cmp	r6, r1
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800ede4:	ea43 0305 	orr.w	r3, r3, r5
      cfp++;
 800ede8:	f102 0210 	add.w	r2, r2, #16
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800edec:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800edf0:	d1cb      	bne.n	800ed8a <can_lld_set_filters+0x5a>
 800edf2:	e018      	b.n	800ee26 <can_lld_set_filters+0xf6>
 800edf4:	00c2      	lsls	r2, r0, #3
 800edf6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
    CAN1->FFA1R = 0;
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800edfa:	2301      	movs	r3, #1
 800edfc:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800ee00:	4083      	lsls	r3, r0
 800ee02:	f043 0301 	orr.w	r3, r3, #1
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 800ee06:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800ee0a:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800ee0e:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800ee12:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
#endif
    CAN1->FM1R = 0;
 800ee16:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    CAN1->FFA1R = 0;
 800ee1a:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800ee1e:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800ee22:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800ee26:	4907      	ldr	r1, [pc, #28]	; (800ee44 <can_lld_set_filters+0x114>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800ee28:	4a05      	ldr	r2, [pc, #20]	; (800ee40 <can_lld_set_filters+0x110>)
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800ee2a:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800ee2e:	f023 0301 	bic.w	r3, r3, #1
 800ee32:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800ee36:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ee38:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ee3c:	6413      	str	r3, [r2, #64]	; 0x40
 800ee3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee40:	40023800 	.word	0x40023800
 800ee44:	40006400 	.word	0x40006400
	...

0800ee50 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800ee50:	b510      	push	{r4, lr}
 * @notapi
 */
static void can_lld_tx_handler(CANDriver *canp) {

  /* No more events until a message is transmitted.*/
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800ee52:	4c0c      	ldr	r4, [pc, #48]	; (800ee84 <Vector8C+0x34>)
 800ee54:	490c      	ldr	r1, [pc, #48]	; (800ee88 <Vector8C+0x38>)
 800ee56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee58:	2320      	movs	r3, #32
 800ee5a:	6091      	str	r1, [r2, #8]
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800ee60:	2100      	movs	r1, #0
 800ee62:	f104 0008 	add.w	r0, r4, #8
 800ee66:	f7fe fd13 	bl	800d890 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800ee6a:	f104 001c 	add.w	r0, r4, #28
 800ee6e:	2101      	movs	r1, #1
 800ee70:	f7fe fd96 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800ee74:	2300      	movs	r3, #0
 800ee76:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800ee7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800ee7e:	f7fe bf1f 	b.w	800dcc0 <_port_irq_epilogue>
 800ee82:	bf00      	nop
 800ee84:	20001394 	.word	0x20001394
 800ee88:	00010101 	.word	0x00010101
 800ee8c:	00000000 	.word	0x00000000

0800ee90 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800ee90:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 800ee92:	4d16      	ldr	r5, [pc, #88]	; (800eeec <Vector90+0x5c>)
 800ee94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee96:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800ee98:	07a2      	lsls	r2, r4, #30
 800ee9a:	d111      	bne.n	800eec0 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800ee9c:	06e3      	lsls	r3, r4, #27
 800ee9e:	d50b      	bpl.n	800eeb8 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800eea0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800eea2:	2110      	movs	r1, #16
 800eea4:	60d9      	str	r1, [r3, #12]
 800eea6:	2320      	movs	r3, #32
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	4810      	ldr	r0, [pc, #64]	; (800eef0 <Vector90+0x60>)
 800eeae:	f7fe fd77 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800eeb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800eebc:	f7fe bf00 	b.w	800dcc0 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800eec0:	695a      	ldr	r2, [r3, #20]
 800eec2:	f022 0202 	bic.w	r2, r2, #2
 800eec6:	615a      	str	r2, [r3, #20]
 800eec8:	2320      	movs	r3, #32
 800eeca:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800eece:	2100      	movs	r1, #0
 800eed0:	f105 0010 	add.w	r0, r5, #16
 800eed4:	f7fe fcdc 	bl	800d890 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800eed8:	f105 0018 	add.w	r0, r5, #24
 800eedc:	2101      	movs	r1, #1
 800eede:	f7fe fd5f 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800eee2:	2300      	movs	r3, #0
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	e7d8      	b.n	800ee9c <Vector90+0xc>
 800eeea:	bf00      	nop
 800eeec:	20001394 	.word	0x20001394
 800eef0:	200013b4 	.word	0x200013b4
	...

0800ef00 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800ef00:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 800ef02:	4d16      	ldr	r5, [pc, #88]	; (800ef5c <Vector94+0x5c>)
 800ef04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef06:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800ef08:	07a2      	lsls	r2, r4, #30
 800ef0a:	d111      	bne.n	800ef30 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800ef0c:	06e3      	lsls	r3, r4, #27
 800ef0e:	d50b      	bpl.n	800ef28 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800ef10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef12:	2110      	movs	r1, #16
 800ef14:	6119      	str	r1, [r3, #16]
 800ef16:	2320      	movs	r3, #32
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	4810      	ldr	r0, [pc, #64]	; (800ef60 <Vector94+0x60>)
 800ef1e:	f7fe fd3f 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800ef22:	2300      	movs	r3, #0
 800ef24:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800ef28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800ef2c:	f7fe bec8 	b.w	800dcc0 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800ef30:	695a      	ldr	r2, [r3, #20]
 800ef32:	f022 0210 	bic.w	r2, r2, #16
 800ef36:	615a      	str	r2, [r3, #20]
 800ef38:	2320      	movs	r3, #32
 800ef3a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800ef3e:	2100      	movs	r1, #0
 800ef40:	f105 0010 	add.w	r0, r5, #16
 800ef44:	f7fe fca4 	bl	800d890 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800ef48:	f105 0018 	add.w	r0, r5, #24
 800ef4c:	2102      	movs	r1, #2
 800ef4e:	f7fe fd27 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800ef52:	2300      	movs	r3, #0
 800ef54:	f383 8811 	msr	BASEPRI, r3
 800ef58:	e7d8      	b.n	800ef0c <Vector94+0xc>
 800ef5a:	bf00      	nop
 800ef5c:	20001394 	.word	0x20001394
 800ef60:	200013b4 	.word	0x200013b4
	...

0800ef70 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800ef70:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  msr = canp->can->MSR;
 800ef72:	4d1b      	ldr	r5, [pc, #108]	; (800efe0 <Vector98+0x70>)
 800ef74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef76:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800ef78:	221c      	movs	r2, #28
 800ef7a:	605a      	str	r2, [r3, #4]
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800ef7c:	0722      	lsls	r2, r4, #28
 800ef7e:	d41d      	bmi.n	800efbc <Vector98+0x4c>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800ef80:	0763      	lsls	r3, r4, #29
 800ef82:	d517      	bpl.n	800efb4 <Vector98+0x44>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 800ef84:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ef86:	6993      	ldr	r3, [r2, #24]

    canp->can->ESR &= ~CAN_ESR_LEC;
 800ef88:	6991      	ldr	r1, [r2, #24]
 800ef8a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800ef8e:	6191      	str	r1, [r2, #24]
    flags = (eventflags_t)(esr & 7);
    if ((esr & CAN_ESR_LEC) > 0)
 800ef90:	f013 0f70 	tst.w	r3, #112	; 0x70
  if (msr & CAN_MSR_ERRI) {
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;

    canp->can->ESR &= ~CAN_ESR_LEC;
    flags = (eventflags_t)(esr & 7);
 800ef94:	f003 0107 	and.w	r1, r3, #7
    if ((esr & CAN_ESR_LEC) > 0)
      flags |= CAN_FRAMING_ERROR;
 800ef98:	bf18      	it	ne
 800ef9a:	f041 0108 	orrne.w	r1, r1, #8
 800ef9e:	2220      	movs	r2, #32
 800efa0:	f382 8811 	msr	BASEPRI, r2
 800efa4:	480f      	ldr	r0, [pc, #60]	; (800efe4 <Vector98+0x74>)
 800efa6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800efaa:	f7fe fcf9 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800efae:	2300      	movs	r3, #0
 800efb0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800efb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800efb8:	f7fe be82 	b.w	800dcc0 <_port_irq_epilogue>
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800efbc:	681a      	ldr	r2, [r3, #0]
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800efbe:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800efc0:	f022 0202 	bic.w	r2, r2, #2
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800efc4:	2103      	movs	r1, #3
 800efc6:	f800 1b28 	strb.w	r1, [r0], #40
 800efca:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	f381 8811 	msr	BASEPRI, r1
 800efd2:	2100      	movs	r1, #0
 800efd4:	f7fe fce4 	bl	800d9a0 <chEvtBroadcastFlagsI>
 800efd8:	2300      	movs	r3, #0
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	e7cf      	b.n	800ef80 <Vector98+0x10>
 800efe0:	20001394 	.word	0x20001394
 800efe4:	200013b4 	.word	0x200013b4
	...

0800eff0 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800eff0:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800eff2:	4c06      	ldr	r4, [pc, #24]	; (800f00c <can_lld_init+0x1c>)
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7fe febb 	bl	800dd70 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800effa:	2100      	movs	r1, #0
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800effc:	4b04      	ldr	r3, [pc, #16]	; (800f010 <can_lld_init+0x20>)
 800effe:	62e3      	str	r3, [r4, #44]	; 0x2c
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800f000:	460a      	mov	r2, r1
 800f002:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800f004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800f008:	f7ff be92 	b.w	800ed30 <can_lld_set_filters>
 800f00c:	20001394 	.word	0x20001394
 800f010:	40006400 	.word	0x40006400
	...

0800f020 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800f024:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800f1dc <_pal_lld_init+0x1bc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f028:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800f1e0 <_pal_lld_init+0x1c0>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800f02c:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f030:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 800f1e4 <_pal_lld_init+0x1c4>
 800f034:	4f63      	ldr	r7, [pc, #396]	; (800f1c4 <_pal_lld_init+0x1a4>)
 800f036:	4e64      	ldr	r6, [pc, #400]	; (800f1c8 <_pal_lld_init+0x1a8>)
 800f038:	4d64      	ldr	r5, [pc, #400]	; (800f1cc <_pal_lld_init+0x1ac>)
 800f03a:	4c65      	ldr	r4, [pc, #404]	; (800f1d0 <_pal_lld_init+0x1b0>)
 800f03c:	4965      	ldr	r1, [pc, #404]	; (800f1d4 <_pal_lld_init+0x1b4>)
 800f03e:	4a66      	ldr	r2, [pc, #408]	; (800f1d8 <_pal_lld_init+0x1b8>)
 800f040:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 800f1e8 <_pal_lld_init+0x1c8>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800f044:	f240 19ff 	movw	r9, #511	; 0x1ff
 800f048:	ea4a 0a09 	orr.w	sl, sl, r9
 800f04c:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800f050:	f8d8 a050 	ldr.w	sl, [r8, #80]	; 0x50
 800f054:	ea4a 0909 	orr.w	r9, sl, r9
 800f058:	f8c8 9050 	str.w	r9, [r8, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f05c:	6843      	ldr	r3, [r0, #4]
 800f05e:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f062:	6883      	ldr	r3, [r0, #8]
 800f064:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 800f068:	68c3      	ldr	r3, [r0, #12]
 800f06a:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 800f06e:	6903      	ldr	r3, [r0, #16]
 800f070:	f8cc 3014 	str.w	r3, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800f074:	6943      	ldr	r3, [r0, #20]
 800f076:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800f07a:	6983      	ldr	r3, [r0, #24]
 800f07c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f080:	6803      	ldr	r3, [r0, #0]
 800f082:	f8cc 3000 	str.w	r3, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f086:	6a03      	ldr	r3, [r0, #32]
 800f088:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f08c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f08e:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800f092:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f094:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 800f098:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f09a:	f8ce 3014 	str.w	r3, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800f09e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f0a0:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800f0a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f0a6:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f0aa:	69c3      	ldr	r3, [r0, #28]
 800f0ac:	f8ce 3000 	str.w	r3, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f0b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f0b2:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f0b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f0b6:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800f0b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0ba:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 800f0bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800f0be:	617b      	str	r3, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800f0c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800f0c2:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800f0c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f0c6:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f0c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f0ca:	603b      	str	r3, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f0cc:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800f0ce:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f0d0:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 800f0d2:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800f0d4:	6e07      	ldr	r7, [r0, #96]	; 0x60
 800f0d6:	60f7      	str	r7, [r6, #12]
  gpiop->ODR     = config->odr;
 800f0d8:	6e47      	ldr	r7, [r0, #100]	; 0x64
 800f0da:	6177      	str	r7, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800f0dc:	6e87      	ldr	r7, [r0, #104]	; 0x68
 800f0de:	6237      	str	r7, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800f0e0:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800f0e2:	6277      	str	r7, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f0e4:	6d47      	ldr	r7, [r0, #84]	; 0x54
 800f0e6:	6037      	str	r7, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f0e8:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800f0ea:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f0ec:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800f0ee:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800f0f0:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
 800f0f2:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 800f0f4:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 800f0f8:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800f0fa:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800f0fe:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800f100:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800f104:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f106:	6f06      	ldr	r6, [r0, #112]	; 0x70
 800f108:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f10a:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
 800f10e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f110:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
 800f114:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800f116:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
 800f11a:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800f11c:	f8d0 509c 	ldr.w	r5, [r0, #156]	; 0x9c
 800f120:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800f122:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 800f126:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800f128:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
 800f12c:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f12e:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 800f132:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f134:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
 800f138:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f13a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800f13e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800f140:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
 800f144:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800f146:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 800f14a:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800f14c:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
 800f150:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800f152:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 800f156:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f158:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 800f15c:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f15e:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 800f162:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f164:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
 800f168:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800f16a:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
 800f16e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800f170:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
 800f174:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800f176:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
 800f17a:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800f17c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
 800f180:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f182:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 800f186:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800f188:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800f18c:	f8cb 2004 	str.w	r2, [fp, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f190:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800f194:	f8cb 2008 	str.w	r2, [fp, #8]
  gpiop->PUPDR   = config->pupdr;
 800f198:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800f19c:	f8cb 200c 	str.w	r2, [fp, #12]
  gpiop->ODR     = config->odr;
 800f1a0:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800f1a4:	f8cb 2014 	str.w	r2, [fp, #20]
  gpiop->AFRL    = config->afrl;
 800f1a8:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800f1ac:	f8cb 2020 	str.w	r2, [fp, #32]
  gpiop->AFRH    = config->afrh;
 800f1b0:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800f1b4:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f1b8:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800f1bc:	f8cb 2000 	str.w	r2, [fp]
 800f1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c4:	40020800 	.word	0x40020800
 800f1c8:	40020c00 	.word	0x40020c00
 800f1cc:	40021000 	.word	0x40021000
 800f1d0:	40021400 	.word	0x40021400
 800f1d4:	40021800 	.word	0x40021800
 800f1d8:	40021c00 	.word	0x40021c00
 800f1dc:	40023800 	.word	0x40023800
 800f1e0:	40020000 	.word	0x40020000
 800f1e4:	40020400 	.word	0x40020400
 800f1e8:	40022000 	.word	0x40022000
 800f1ec:	00000000 	.word	0x00000000

0800f1f0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800f1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800f1f4:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800f1f8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800f1fc:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800f200:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800f204:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800f208:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800f20a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800f20e:	f04f 0901 	mov.w	r9, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800f212:	f04f 0803 	mov.w	r8, #3
 800f216:	e02b      	b.n	800f270 <_pal_lld_setgroupmode+0x80>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800f218:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800f21c:	ea2b 0303 	bic.w	r3, fp, r3
 800f220:	ea43 030a 	orr.w	r3, r3, sl
 800f224:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800f226:	6843      	ldr	r3, [r0, #4]
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800f228:	fa09 fa04 	lsl.w	sl, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800f22c:	ea23 030a 	bic.w	r3, r3, sl
 800f230:	433b      	orrs	r3, r7
 800f232:	6043      	str	r3, [r0, #4]
 800f234:	ea4f 0a44 	mov.w	sl, r4, lsl #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800f238:	6883      	ldr	r3, [r0, #8]
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800f23a:	fa08 fa0a 	lsl.w	sl, r8, sl
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800f23e:	ea6f 0a0a 	mvn.w	sl, sl
 800f242:	ea0a 0303 	and.w	r3, sl, r3
 800f246:	4333      	orrs	r3, r6
 800f248:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800f24a:	68c3      	ldr	r3, [r0, #12]
 800f24c:	ea0a 0303 	and.w	r3, sl, r3
 800f250:	432b      	orrs	r3, r5
 800f252:	60c3      	str	r3, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800f254:	6803      	ldr	r3, [r0, #0]
 800f256:	ea0a 0303 	and.w	r3, sl, r3
 800f25a:	ea43 030e 	orr.w	r3, r3, lr
 800f25e:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800f260:	0849      	lsrs	r1, r1, #1
 800f262:	d019      	beq.n	800f298 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
 800f264:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800f266:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800f268:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800f26a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800f26e:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800f270:	f004 0307 	and.w	r3, r4, #7
 800f274:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800f276:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800f27a:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 800f27e:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800f282:	d0ed      	beq.n	800f260 <_pal_lld_setgroupmode+0x70>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800f284:	2c07      	cmp	r4, #7
 800f286:	d9c7      	bls.n	800f218 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800f288:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800f28c:	ea2b 0303 	bic.w	r3, fp, r3
 800f290:	ea43 030a 	orr.w	r3, r3, sl
 800f294:	6243      	str	r3, [r0, #36]	; 0x24
 800f296:	e7c6      	b.n	800f226 <_pal_lld_setgroupmode+0x36>
 800f298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29c:	0000      	movs	r0, r0
	...

0800f2a0 <VectorC4>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800f2a0:	483a      	ldr	r0, [pc, #232]	; (800f38c <VectorC4+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800f2a2:	4a3b      	ldr	r2, [pc, #236]	; (800f390 <VectorC4+0xf0>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800f2a4:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800f2a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800f2a8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800f2aa:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800f2ac:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800f2b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d04c      	beq.n	800f352 <VectorC4+0xb2>
 800f2b8:	d81e      	bhi.n	800f2f8 <VectorC4+0x58>
 800f2ba:	3a07      	subs	r2, #7
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d03c      	beq.n	800f33a <VectorC4+0x9a>
 800f2c0:	3201      	adds	r2, #1
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d110      	bne.n	800f2e8 <VectorC4+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f2c6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800f2c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f2ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800f2ce:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f2d0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	f042 0201 	orr.w	r2, r2, #1
 800f2d8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800f2da:	6862      	ldr	r2, [r4, #4]
 800f2dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f2e0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d94b      	bls.n	800f380 <VectorC4+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800f2e8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800f2ec:	bf18      	it	ne
 800f2ee:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800f2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800f2f4:	f7fe bce4 	b.w	800dcc0 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800f2f8:	4a26      	ldr	r2, [pc, #152]	; (800f394 <VectorC4+0xf4>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d012      	beq.n	800f324 <VectorC4+0x84>
 800f2fe:	3202      	adds	r2, #2
 800f300:	4293      	cmp	r3, r2
 800f302:	d1f1      	bne.n	800f2e8 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800f304:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685e      	ldr	r6, [r3, #4]
 800f30a:	b33e      	cbz	r6, 800f35c <VectorC4+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f30c:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800f30e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f310:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800f314:	f042 0201 	orr.w	r2, r2, #1
 800f318:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f31a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800f31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800f320:	f7fe bcce 	b.w	800dcc0 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f324:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800f326:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800f32c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f32e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800f330:	6813      	ldr	r3, [r2, #0]
 800f332:	f043 0301 	orr.w	r3, r3, #1
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	e7d6      	b.n	800f2e8 <VectorC4+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800f33a:	8c03      	ldrh	r3, [r0, #32]
 800f33c:	0a1a      	lsrs	r2, r3, #8
 800f33e:	d00b      	beq.n	800f358 <VectorC4+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800f340:	f003 0301 	and.w	r3, r3, #1
 800f344:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800f348:	f002 0206 	and.w	r2, r2, #6
 800f34c:	4313      	orrs	r3, r2
 800f34e:	6123      	str	r3, [r4, #16]
 800f350:	e7ca      	b.n	800f2e8 <VectorC4+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800f352:	8c03      	ldrh	r3, [r0, #32]
 800f354:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800f358:	6123      	str	r3, [r4, #16]
 800f35a:	e7c5      	b.n	800f2e8 <VectorC4+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f35c:	6863      	ldr	r3, [r4, #4]
 800f35e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f362:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800f364:	6823      	ldr	r3, [r4, #0]
 800f366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f36a:	6023      	str	r3, [r4, #0]
 800f36c:	2320      	movs	r3, #32
 800f36e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800f372:	301c      	adds	r0, #28
 800f374:	4631      	mov	r1, r6
 800f376:	f7fe fa63 	bl	800d840 <chThdResumeI>
 800f37a:	f386 8811 	msr	BASEPRI, r6
 800f37e:	e7b3      	b.n	800f2e8 <VectorC4+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f386:	6023      	str	r3, [r4, #0]
 800f388:	e7ae      	b.n	800f2e8 <VectorC4+0x48>
 800f38a:	bf00      	nop
 800f38c:	200013c4 	.word	0x200013c4
 800f390:	00030008 	.word	0x00030008
 800f394:	00070082 	.word	0x00070082
	...

0800f3a0 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800f3a0:	4834      	ldr	r0, [pc, #208]	; (800f474 <VectorC8+0xd4>)
/**
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800f3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 800f3a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800f3a6:	6b07      	ldr	r7, [r0, #48]	; 0x30
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800f3a8:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800f3aa:	683a      	ldr	r2, [r7, #0]
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800f3ac:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800f3ae:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 800f3b2:	43db      	mvns	r3, r3
 800f3b4:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800f3b6:	6813      	ldr	r3, [r2, #0]
 800f3b8:	f023 031f 	bic.w	r3, r3, #31
 800f3bc:	6013      	str	r3, [r2, #0]
 800f3be:	6813      	ldr	r3, [r2, #0]
 800f3c0:	07db      	lsls	r3, r3, #31
 800f3c2:	d4fc      	bmi.n	800f3be <VectorC8+0x1e>
 800f3c4:	f897 e008 	ldrb.w	lr, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800f3c8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800f3ca:	687f      	ldr	r7, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 800f3cc:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800f3ce:	233d      	movs	r3, #61	; 0x3d
 800f3d0:	fa03 f30e 	lsl.w	r3, r3, lr
 800f3d4:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800f3d6:	6813      	ldr	r3, [r2, #0]
 800f3d8:	f023 031f 	bic.w	r3, r3, #31
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	6813      	ldr	r3, [r2, #0]
 800f3e0:	f013 0301 	ands.w	r3, r3, #1
 800f3e4:	d1fb      	bne.n	800f3de <VectorC8+0x3e>
 800f3e6:	7a2f      	ldrb	r7, [r5, #8]
 800f3e8:	686d      	ldr	r5, [r5, #4]
 800f3ea:	223d      	movs	r2, #61	; 0x3d
 800f3ec:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800f3ee:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800f3f0:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800f3f2:	bf48      	it	mi
 800f3f4:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800f3f6:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800f3f8:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800f3fa:	bf44      	itt	mi
 800f3fc:	f043 0302 	orrmi.w	r3, r3, #2
 800f400:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800f402:	054a      	lsls	r2, r1, #21
 800f404:	d50a      	bpl.n	800f41c <VectorC8+0x7c>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800f406:	6862      	ldr	r2, [r4, #4]
 800f408:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f40c:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800f40e:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800f410:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800f414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f418:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800f41a:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800f41c:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800f41e:	bf44      	itt	mi
 800f420:	f043 0308 	orrmi.w	r3, r3, #8
 800f424:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800f426:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800f428:	bf44      	itt	mi
 800f42a:	f043 0320 	orrmi.w	r3, r3, #32
 800f42e:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800f430:	04cc      	lsls	r4, r1, #19
 800f432:	d513      	bpl.n	800f45c <VectorC8+0xbc>
    i2cp->errors |= I2C_PEC_ERROR;
 800f434:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800f438:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800f43a:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800f43c:	d416      	bmi.n	800f46c <VectorC8+0xcc>
 800f43e:	2320      	movs	r3, #32
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	480c      	ldr	r0, [pc, #48]	; (800f478 <VectorC8+0xd8>)
 800f446:	f06f 0101 	mvn.w	r1, #1
 800f44a:	f7fe f9f9 	bl	800d840 <chThdResumeI>
 800f44e:	2300      	movs	r3, #0
 800f450:	f383 8811 	msr	BASEPRI, r3

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800f454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800f458:	f7fe bc32 	b.w	800dcc0 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800f45c:	0432      	lsls	r2, r6, #16
 800f45e:	d405      	bmi.n	800f46c <VectorC8+0xcc>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1ec      	bne.n	800f43e <VectorC8+0x9e>

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800f464:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800f468:	f7fe bc2a 	b.w	800dcc0 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800f46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f470:	6083      	str	r3, [r0, #8]
 800f472:	e7e4      	b.n	800f43e <VectorC8+0x9e>
 800f474:	200013c4 	.word	0x200013c4
 800f478:	200013e0 	.word	0x200013e0
 800f47c:	00000000 	.word	0x00000000

0800f480 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800f480:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800f482:	4c07      	ldr	r4, [pc, #28]	; (800f4a0 <i2c_lld_init+0x20>)
 800f484:	4620      	mov	r0, r4
 800f486:	f7fe fca3 	bl	800ddd0 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800f48a:	4b06      	ldr	r3, [pc, #24]	; (800f4a4 <i2c_lld_init+0x24>)
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 800f48c:	4a06      	ldr	r2, [pc, #24]	; (800f4a8 <i2c_lld_init+0x28>)
 800f48e:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800f490:	2100      	movs	r1, #0
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800f492:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800f496:	61e1      	str	r1, [r4, #28]
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800f498:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800f49a:	6322      	str	r2, [r4, #48]	; 0x30
 800f49c:	bd10      	pop	{r4, pc}
 800f49e:	bf00      	nop
 800f4a0:	200013c4 	.word	0x200013c4
 800f4a4:	080171c8 	.word	0x080171c8
 800f4a8:	40005800 	.word	0x40005800
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800f4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800f4b4:	4bb2      	ldr	r3, [pc, #712]	; (800f780 <usb_lld_pump+0x2d0>)
 800f4b6:	49b3      	ldr	r1, [pc, #716]	; (800f784 <usb_lld_pump+0x2d4>)
 800f4b8:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 800f4ba:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
 800f4be:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800f4c0:	b085      	sub	sp, #20
 800f4c2:	2320      	movs	r3, #32
 800f4c4:	f383 8811 	msr	BASEPRI, r3
 800f4c8:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800f4cc:	46d3      	mov	fp, sl
 800f4ce:	9303      	str	r3, [sp, #12]
 800f4d0:	4682      	mov	sl, r0
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 800f4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d006      	beq.n	800f4e8 <usb_lld_pump+0x38>
 800f4da:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 800f4de:	b963      	cbnz	r3, 800f4fa <usb_lld_pump+0x4a>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 800f4e0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f4e4:	06db      	lsls	r3, r3, #27
 800f4e6:	d408      	bmi.n	800f4fa <usb_lld_pump+0x4a>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 800f4e8:	f8db 3018 	ldr.w	r3, [fp, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 800f4ec:	9803      	ldr	r0, [sp, #12]
 800f4ee:	f043 0310 	orr.w	r3, r3, #16
 800f4f2:	f8cb 3018 	str.w	r3, [fp, #24]
 800f4f6:	f7fe f993 	bl	800d820 <chThdSuspendS>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f383 8811 	msr	BASEPRI, r3
 800f500:	4698      	mov	r8, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800f502:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f506:	f013 0310 	ands.w	r3, r3, #16
 800f50a:	d024      	beq.n	800f556 <usb_lld_pump+0xa6>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 800f50c:	f8da 2050 	ldr.w	r2, [sl, #80]	; 0x50
 800f510:	6a13      	ldr	r3, [r2, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800f512:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 800f516:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800f51a:	d031      	beq.n	800f580 <usb_lld_pump+0xd0>
 800f51c:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800f520:	d1ef      	bne.n	800f502 <usb_lld_pump+0x52>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 800f522:	f003 010f 	and.w	r1, r3, #15
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800f526:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
  sts = usbp->otg->GRXSTSP;
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800f52a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800f52e:	68c9      	ldr	r1, [r1, #12]
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 800f530:	3303      	adds	r3, #3
  max = (max + 3) / 4;
  while (n) {
 800f532:	089b      	lsrs	r3, r3, #2
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800f534:	6a0c      	ldr	r4, [r1, #32]
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800f536:	d0e4      	beq.n	800f502 <usb_lld_pump+0x52>
 800f538:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f53c:	2102      	movs	r1, #2
    uint32_t w = *fifop;
 800f53e:	6810      	ldr	r0, [r2, #0]
    if (max) {
 800f540:	b111      	cbz	r1, 800f548 <usb_lld_pump+0x98>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 800f542:	f844 0b04 	str.w	r0, [r4], #4
      buf += 4;
      max--;
 800f546:	3901      	subs	r1, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800f548:	3b01      	subs	r3, #1
 800f54a:	d1f8      	bne.n	800f53e <usb_lld_pump+0x8e>

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800f54c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f550:	f013 0310 	ands.w	r3, r3, #16
 800f554:	d1da      	bne.n	800f50c <usb_lld_pump+0x5c>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800f556:	2101      	movs	r1, #1
      if (usbp->txpending & epmask) {
 800f558:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800f55c:	fa01 f108 	lsl.w	r1, r1, r8
      if (usbp->txpending & epmask) {
 800f560:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800f562:	9101      	str	r1, [sp, #4]
      if (usbp->txpending & epmask) {
 800f564:	d168      	bne.n	800f638 <usb_lld_pump+0x188>
 800f566:	f108 0801 	add.w	r8, r8, #1
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800f56a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	fa5f f888 	uxtb.w	r8, r8
 800f574:	4598      	cmp	r8, r3
 800f576:	d9c4      	bls.n	800f502 <usb_lld_pump+0x52>
 800f578:	2320      	movs	r3, #32
 800f57a:	f383 8811 	msr	BASEPRI, r3
 800f57e:	e7a8      	b.n	800f4d2 <usb_lld_pump+0x22>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 800f580:	f003 050f 	and.w	r5, r3, #15
 800f584:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800f588:	f3c3 140a 	ubfx	r4, r3, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
 800f58c:	68eb      	ldr	r3, [r5, #12]
 800f58e:	6998      	ldr	r0, [r3, #24]
 800f590:	7803      	ldrb	r3, [r0, #0]
 800f592:	b9db      	cbnz	r3, 800f5cc <usb_lld_pump+0x11c>
 800f594:	6843      	ldr	r3, [r0, #4]
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800f596:	6881      	ldr	r1, [r0, #8]
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
                             usbp->epc[ep]->out_state->mode.queue.rxqueue,
                             cnt);
    }
    else {
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 800f598:	68c6      	ldr	r6, [r0, #12]
 800f59a:	3303      	adds	r3, #3
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800f59c:	1a59      	subs	r1, r3, r1
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 800f59e:	1ce3      	adds	r3, r4, #3
  max = (max + 3) / 4;
  while (n) {
 800f5a0:	089b      	lsrs	r3, r3, #2
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800f5a2:	ea4f 0191 	mov.w	r1, r1, lsr #2
  while (n) {
 800f5a6:	d009      	beq.n	800f5bc <usb_lld_pump+0x10c>
 800f5a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f5ac:	46b6      	mov	lr, r6
    uint32_t w = *fifop;
 800f5ae:	6817      	ldr	r7, [r2, #0]
    if (max) {
 800f5b0:	b111      	cbz	r1, 800f5b8 <usb_lld_pump+0x108>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 800f5b2:	f84e 7b04 	str.w	r7, [lr], #4
      buf += 4;
      max--;
 800f5b6:	3901      	subs	r1, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	d1f8      	bne.n	800f5ae <usb_lld_pump+0xfe>
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                              usbp->epc[ep]->out_state->mode.linear.rxbuf,
                              cnt,
                              usbp->epc[ep]->out_state->rxsize -
                              usbp->epc[ep]->out_state->rxcnt);
      usbp->epc[ep]->out_state->mode.linear.rxbuf += cnt;
 800f5bc:	4426      	add	r6, r4
 800f5be:	60c6      	str	r6, [r0, #12]
    }
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800f5c0:	68eb      	ldr	r3, [r5, #12]
 800f5c2:	699a      	ldr	r2, [r3, #24]
 800f5c4:	6893      	ldr	r3, [r2, #8]
 800f5c6:	4423      	add	r3, r4
 800f5c8:	6093      	str	r3, [r2, #8]
 800f5ca:	e79a      	b.n	800f502 <usb_lld_pump+0x52>
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
      /* Queue associated.*/
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
 800f5cc:	68c0      	ldr	r0, [r0, #12]
                                   input_queue_t *iqp,
                                   size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f5ce:	b324      	cbz	r4, 800f61a <usb_lld_pump+0x16a>
 800f5d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f5d4:	4626      	mov	r6, r4
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800f5d6:	2e03      	cmp	r6, #3
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
 800f5d8:	6941      	ldr	r1, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800f5da:	d907      	bls.n	800f5ec <usb_lld_pump+0x13c>
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
      if (iqp->q_wrptr >= iqp->q_top) {
 800f5dc:	6903      	ldr	r3, [r0, #16]
 800f5de:	4299      	cmp	r1, r3
 800f5e0:	d304      	bcc.n	800f5ec <usb_lld_pump+0x13c>
        iqp->q_wrptr = iqp->q_buffer;
 800f5e2:	68c3      	ldr	r3, [r0, #12]
 800f5e4:	6143      	str	r3, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800f5e6:	2e03      	cmp	r6, #3
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
 800f5e8:	6941      	ldr	r1, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800f5ea:	d8f7      	bhi.n	800f5dc <usb_lld_pump+0x12c>
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
      break;

    /* One byte at time.*/
    w = *fifop;
 800f5ec:	f8d2 e000 	ldr.w	lr, [r2]
 800f5f0:	2700      	movs	r7, #0
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      *iqp->q_wrptr++ = (uint8_t)(w >> (i * 8));
 800f5f2:	f101 0c01 	add.w	ip, r1, #1
 800f5f6:	fa2e f307 	lsr.w	r3, lr, r7
 800f5fa:	f8c0 c014 	str.w	ip, [r0, #20]
 800f5fe:	700b      	strb	r3, [r1, #0]
      if (iqp->q_wrptr >= iqp->q_top)
 800f600:	6903      	ldr	r3, [r0, #16]
 800f602:	6941      	ldr	r1, [r0, #20]
 800f604:	4299      	cmp	r1, r3
        iqp->q_wrptr = iqp->q_buffer;
 800f606:	bf24      	itt	cs
 800f608:	68c3      	ldrcs	r3, [r0, #12]
 800f60a:	6143      	strcs	r3, [r0, #20]
      break;

    /* One byte at time.*/
    w = *fifop;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 800f60c:	3e01      	subs	r6, #1
 800f60e:	d004      	beq.n	800f61a <usb_lld_pump+0x16a>
 800f610:	2f18      	cmp	r7, #24
 800f612:	d0e0      	beq.n	800f5d6 <usb_lld_pump+0x126>
 800f614:	3708      	adds	r7, #8
 800f616:	6941      	ldr	r1, [r0, #20]
 800f618:	e7eb      	b.n	800f5f2 <usb_lld_pump+0x142>
 800f61a:	2320      	movs	r3, #32
 800f61c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  /* Updating queue.*/
  osalSysLock();
  iqp->q_counter += n;
 800f620:	6883      	ldr	r3, [r0, #8]
 800f622:	4423      	add	r3, r4
 800f624:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800f626:	2100      	movs	r1, #0
 800f628:	f7fe f932 	bl	800d890 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 800f62c:	f7fe f800 	bl	800d630 <chSchRescheduleS>
 800f630:	2300      	movs	r3, #0
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	e7c3      	b.n	800f5c0 <usb_lld_pump+0x110>
 800f638:	2220      	movs	r2, #32
 800f63a:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800f63e:	f8db 1008 	ldr.w	r1, [fp, #8]
        usbp->txpending &= ~epmask;
 800f642:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
 800f646:	9801      	ldr	r0, [sp, #4]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800f648:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 800f64c:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800f650:	f8cb 1008 	str.w	r1, [fp, #8]
        usbp->txpending &= ~epmask;
 800f654:	f8ca 205c 	str.w	r2, [sl, #92]	; 0x5c
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800f660:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800f664:	6941      	ldr	r1, [r0, #20]
 800f666:	688a      	ldr	r2, [r1, #8]
 800f668:	684b      	ldr	r3, [r1, #4]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	f080 80b1 	bcs.w	800f7d2 <usb_lld_pump+0x322>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800f670:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 800f674:	8a07      	ldrh	r7, [r0, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800f676:	ea4f 1048 	mov.w	r0, r8, lsl #5
 800f67a:	4604      	mov	r4, r0
 800f67c:	1830      	adds	r0, r6, r0
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800f67e:	1a9b      	subs	r3, r3, r2
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800f680:	f8d0 2918 	ldr.w	r2, [r0, #2328]	; 0x918
 800f684:	429f      	cmp	r7, r3
 800f686:	bf28      	it	cs
 800f688:	461f      	movcs	r7, r3
 800f68a:	b293      	uxth	r3, r2
 800f68c:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
 800f690:	f108 0801 	add.w	r8, r8, #1
 800f694:	d82e      	bhi.n	800f6f4 <usb_lld_pump+0x244>
 800f696:	f8cd b008 	str.w	fp, [sp, #8]
 800f69a:	46a3      	mov	fp, r4

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
 800f69c:	780b      	ldrb	r3, [r1, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d13d      	bne.n	800f71e <usb_lld_pump+0x26e>
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {

  otg_do_push(fifop, (uint8_t *)buf, (n + 3) / 4);
 800f6a2:	1cfb      	adds	r3, r7, #3
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800f6a4:	68cc      	ldr	r4, [r1, #12]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f6a6:	089b      	lsrs	r3, r3, #2
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800f6a8:	eb06 3608 	add.w	r6, r6, r8, lsl #12
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f6ac:	bf18      	it	ne
 800f6ae:	4622      	movne	r2, r4
 800f6b0:	d004      	beq.n	800f6bc <usb_lld_pump+0x20c>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800f6b2:	f852 0b04 	ldr.w	r0, [r2], #4
 800f6b6:	6030      	str	r0, [r6, #0]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	d1fa      	bne.n	800f6b2 <usb_lld_pump+0x202>
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                                 usbp->epc[ep]->in_state->mode.linear.txbuf,
                                 n);
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
 800f6bc:	443c      	add	r4, r7
 800f6be:	60cc      	str	r4, [r1, #12]
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800f6c0:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800f6c4:	6941      	ldr	r1, [r0, #20]
 800f6c6:	688b      	ldr	r3, [r1, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800f6c8:	684a      	ldr	r2, [r1, #4]
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800f6ca:	443b      	add	r3, r7
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800f6cc:	429a      	cmp	r2, r3
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800f6ce:	608b      	str	r3, [r1, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800f6d0:	d97b      	bls.n	800f7ca <usb_lld_pump+0x31a>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800f6d2:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 800f6d6:	8a00      	ldrh	r0, [r0, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800f6d8:	eb06 040b 	add.w	r4, r6, fp
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800f6dc:	1ad7      	subs	r7, r2, r3
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800f6de:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
 800f6e2:	4287      	cmp	r7, r0
 800f6e4:	bf28      	it	cs
 800f6e6:	4607      	movcs	r7, r0
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
 800f6ee:	d9d5      	bls.n	800f69c <usb_lld_pump+0x1ec>
 800f6f0:	f8dd b008 	ldr.w	fp, [sp, #8]
      return FALSE;
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2320      	movs	r3, #32
 800f6f8:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800f6fc:	f8db 3008 	ldr.w	r3, [fp, #8]
 800f700:	f043 0301 	orr.w	r3, r3, #1
 800f704:	f8cb 3008 	str.w	r3, [fp, #8]
        if (!done)
 800f708:	b92a      	cbnz	r2, 800f716 <usb_lld_pump+0x266>
          otgp->DIEPEMPMSK |= epmask;
 800f70a:	f8db 3834 	ldr.w	r3, [fp, #2100]	; 0x834
 800f70e:	9a01      	ldr	r2, [sp, #4]
 800f710:	431a      	orrs	r2, r3
 800f712:	f8cb 2834 	str.w	r2, [fp, #2100]	; 0x834
 800f716:	2300      	movs	r3, #0
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	e725      	b.n	800f56a <usb_lld_pump+0xba>
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
      /* Queue associated.*/
      otg_fifo_write_from_queue(usbp->otg->FIFO[ep],
 800f71e:	eb06 3608 	add.w	r6, r6, r8, lsl #12
 800f722:	68c8      	ldr	r0, [r1, #12]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f724:	b1e7      	cbz	r7, 800f760 <usb_lld_pump+0x2b0>
 800f726:	f8d0 e010 	ldr.w	lr, [r0, #16]
 800f72a:	463a      	mov	r2, r7
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800f72c:	0893      	lsrs	r3, r2, #2
 800f72e:	d12b      	bne.n	800f788 <usb_lld_pump+0x2d8>
 800f730:	6983      	ldr	r3, [r0, #24]
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 800f732:	2100      	movs	r1, #0
 800f734:	460c      	mov	r4, r1

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800f736:	1c5d      	adds	r5, r3, #1
 800f738:	6185      	str	r5, [r0, #24]
 800f73a:	781b      	ldrb	r3, [r3, #0]
      if (oqp->q_rdptr >= oqp->q_top)
 800f73c:	4575      	cmp	r5, lr

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800f73e:	fa03 f301 	lsl.w	r3, r3, r1
 800f742:	ea44 0403 	orr.w	r4, r4, r3
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
 800f746:	bf24      	itt	cs
 800f748:	68c3      	ldrcs	r3, [r0, #12]
 800f74a:	6183      	strcs	r3, [r0, #24]
      break;

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 800f74c:	3a01      	subs	r2, #1
 800f74e:	d004      	beq.n	800f75a <usb_lld_pump+0x2aa>
 800f750:	2918      	cmp	r1, #24
 800f752:	d002      	beq.n	800f75a <usb_lld_pump+0x2aa>
 800f754:	3108      	adds	r1, #8
 800f756:	6983      	ldr	r3, [r0, #24]
 800f758:	e7ed      	b.n	800f736 <usb_lld_pump+0x286>
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
      ntogo--;
      i++;
    }
    *fifop = w;
 800f75a:	6034      	str	r4, [r6, #0]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	d1e5      	bne.n	800f72c <usb_lld_pump+0x27c>
 800f760:	2320      	movs	r3, #32
 800f762:	f383 8811 	msr	BASEPRI, r3
    *fifop = w;
  }

  /* Updating queue.*/
  osalSysLock();
  oqp->q_counter += n;
 800f766:	6883      	ldr	r3, [r0, #8]
 800f768:	443b      	add	r3, r7
 800f76a:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800f76c:	2100      	movs	r1, #0
 800f76e:	f7fe f88f 	bl	800d890 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 800f772:	f7fd ff5d 	bl	800d630 <chSchRescheduleS>
 800f776:	2300      	movs	r3, #0
 800f778:	f383 8811 	msr	BASEPRI, r3
 800f77c:	e7a0      	b.n	800f6c0 <usb_lld_pump+0x210>
 800f77e:	bf00      	nop
 800f780:	20001090 	.word	0x20001090
 800f784:	08017280 	.word	0x08017280
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 800f788:	6984      	ldr	r4, [r0, #24]
 800f78a:	ebbe 0104 	subs.w	r1, lr, r4
 800f78e:	bf48      	it	mi
 800f790:	3103      	addmi	r1, #3
 800f792:	1089      	asrs	r1, r1, #2

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
 800f794:	428b      	cmp	r3, r1
 800f796:	bf28      	it	cs
 800f798:	460b      	movcs	r3, r1
 800f79a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f79e:	ebcc 0202 	rsb	r2, ip, r2
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f7a2:	b133      	cbz	r3, 800f7b2 <usb_lld_pump+0x302>
 800f7a4:	4621      	mov	r1, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800f7a6:	f851 5b04 	ldr.w	r5, [r1], #4
 800f7aa:	6035      	str	r5, [r6, #0]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	d1fa      	bne.n	800f7a6 <usb_lld_pump+0x2f6>
 800f7b0:	4464      	add	r4, ip
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
      if (oqp->q_rdptr >= oqp->q_top) {
 800f7b2:	45a6      	cmp	lr, r4
    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
 800f7b4:	6184      	str	r4, [r0, #24]
      if (oqp->q_rdptr >= oqp->q_top) {
 800f7b6:	d804      	bhi.n	800f7c2 <usb_lld_pump+0x312>
        oqp->q_rdptr = oqp->q_buffer;
 800f7b8:	68c3      	ldr	r3, [r0, #12]
 800f7ba:	6183      	str	r3, [r0, #24]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f7bc:	2a00      	cmp	r2, #0
 800f7be:	d1b5      	bne.n	800f72c <usb_lld_pump+0x27c>
 800f7c0:	e7ce      	b.n	800f760 <usb_lld_pump+0x2b0>
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	d0cc      	beq.n	800f760 <usb_lld_pump+0x2b0>
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	e7b3      	b.n	800f732 <usb_lld_pump+0x282>
 800f7ca:	f8dd b008 	ldr.w	fp, [sp, #8]
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	e791      	b.n	800f6f6 <usb_lld_pump+0x246>
 800f7d2:	f108 0801 	add.w	r8, r8, #1
 800f7d6:	e7fa      	b.n	800f7ce <usb_lld_pump+0x31e>
	...

0800f7e0 <otg_disable_ep.isra.0>:
  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
    ;
}

static void otg_disable_ep(USBDriver *usbp) {
 800f7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f7e2:	2400      	movs	r4, #0
 800f7e4:	f8d1 e008 	ldr.w	lr, [r1, #8]
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 800f7e8:	4625      	mov	r5, r4
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800f7ea:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800f7ee:	f04f 37ff 	mov.w	r7, #4294967295
 800f7f2:	e014      	b.n	800f81e <otg_disable_ep.isra.0+0x3e>
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 800f7f4:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 800f7f8:	18c2      	adds	r2, r0, r3
 800f7fa:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800f7fe:	f8c2 7908 	str.w	r7, [r2, #2312]	; 0x908
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
 800f802:	f8d1 6b00 	ldr.w	r6, [r1, #2816]	; 0xb00
 800f806:	2e00      	cmp	r6, #0
 800f808:	db17      	blt.n	800f83a <otg_disable_ep.isra.0+0x5a>
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
 800f80a:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800f80e:	4403      	add	r3, r0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f810:	3401      	adds	r4, #1
 800f812:	45a6      	cmp	lr, r4
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
 800f814:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800f818:	f8c3 7b08 	str.w	r7, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f81c:	d314      	bcc.n	800f848 <otg_disable_ep.isra.0+0x68>
 800f81e:	0163      	lsls	r3, r4, #5
 800f820:	18c1      	adds	r1, r0, r3
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
 800f822:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800f826:	2a00      	cmp	r2, #0
 800f828:	dae4      	bge.n	800f7f4 <otg_disable_ep.isra.0+0x14>
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800f82a:	f8c1 c900 	str.w	ip, [r1, #2304]	; 0x900
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
 800f82e:	460e      	mov	r6, r1
 800f830:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 800f834:	0792      	lsls	r2, r2, #30
 800f836:	d5fb      	bpl.n	800f830 <otg_disable_ep.isra.0+0x50>
 800f838:	e7de      	b.n	800f7f8 <otg_disable_ep.isra.0+0x18>
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
      otgp->oe[i].DOEPCTL = DOEPCTL_EPDIS;
 800f83a:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
 800f83e:	f8d2 1b08 	ldr.w	r1, [r2, #2824]	; 0xb08
 800f842:	06c9      	lsls	r1, r1, #27
 800f844:	d5fb      	bpl.n	800f83e <otg_disable_ep.isra.0+0x5e>
 800f846:	e7e2      	b.n	800f80e <otg_disable_ep.isra.0+0x2e>
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800f848:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800f84c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 800f850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f852:	bf00      	nop
	...

0800f860 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800f860:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800f862:	4c06      	ldr	r4, [pc, #24]	; (800f87c <usb_lld_init+0x1c>)
 800f864:	4620      	mov	r0, r4
 800f866:	f7fe fca3 	bl	800e1b0 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800f86a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800f86e:	4a04      	ldr	r2, [pc, #16]	; (800f880 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800f870:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800f872:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 800f874:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800f876:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800f878:	6663      	str	r3, [r4, #100]	; 0x64
 800f87a:	bd10      	pop	{r4, pc}
 800f87c:	20001400 	.word	0x20001400
 800f880:	08017270 	.word	0x08017270
	...

0800f890 <usb_lld_start>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 800f890:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 800f892:	7803      	ldrb	r3, [r0, #0]
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f894:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
 800f896:	2b01      	cmp	r3, #1
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 800f898:	b082      	sub	sp, #8
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 800f89a:	d001      	beq.n	800f8a0 <usb_lld_start+0x10>
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
  }
}
 800f89c:	b002      	add	sp, #8
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800f8a0:	4b30      	ldr	r3, [pc, #192]	; (800f964 <usb_lld_start+0xd4>)
 800f8a2:	4298      	cmp	r0, r3
 800f8a4:	4605      	mov	r5, r0
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f8a6:	bf18      	it	ne
 800f8a8:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800f8aa:	d03a      	beq.n	800f922 <usb_lld_start+0x92>
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 800f8ac:	2300      	movs	r3, #0

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 800f8ae:	482e      	ldr	r0, [pc, #184]	; (800f968 <usb_lld_start+0xd8>)

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800f8b0:	492e      	ldr	r1, [pc, #184]	; (800f96c <usb_lld_start+0xdc>)
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 800f8b2:	65eb      	str	r3, [r5, #92]	; 0x5c
    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 800f8b4:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
    usbp->txpending = 0;

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 800f8b8:	60f0      	str	r0, [r6, #12]

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800f8ba:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800f8be:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 800f8c0:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 800f8c4:	63b2      	str	r2, [r6, #56]	; 0x38
 800f8c6:	f7fd fd33 	bl	800d330 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 800f8ce:	6923      	ldr	r3, [r4, #16]
 800f8d0:	07db      	lsls	r3, r3, #31
 800f8d2:	d4fc      	bmi.n	800f8ce <usb_lld_start+0x3e>
 800f8d4:	200c      	movs	r0, #12
 800f8d6:	f7fd fd2b 	bl	800d330 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(12);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	dafc      	bge.n	800f8da <usb_lld_start+0x4a>

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 800f8e0:	2400      	movs	r4, #0
 800f8e2:	60b4      	str	r4, [r6, #8]

    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);
 800f8e4:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800f8e6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800f8e8:	f7ff ff7a 	bl	800f7e0 <otg_disable_ep.isra.0>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 800f8ec:	686b      	ldr	r3, [r5, #4]
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 800f8ee:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 800f8f2:	68db      	ldr	r3, [r3, #12]
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
 800f8f4:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 800f8f8:	f8c6 481c 	str.w	r4, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800f8fc:	b16b      	cbz	r3, 800f91a <usb_lld_start+0x8a>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800f8fe:	f243 0308 	movw	r3, #12296	; 0x3008
 800f902:	61b3      	str	r3, [r6, #24]
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800f904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */
 800f906:	f04f 32ff 	mov.w	r2, #4294967295
 800f90a:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800f90c:	b1d3      	cbz	r3, 800f944 <usb_lld_start+0xb4>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800f90e:	68b3      	ldr	r3, [r6, #8]
 800f910:	f043 0301 	orr.w	r3, r3, #1
 800f914:	60b3      	str	r3, [r6, #8]
  }
}
 800f916:	b002      	add	sp, #8
 800f918:	bd70      	pop	{r4, r5, r6, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800f91a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f91e:	61b3      	str	r3, [r6, #24]
 800f920:	e7f0      	b.n	800f904 <usb_lld_start+0x74>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
 800f922:	4b13      	ldr	r3, [pc, #76]	; (800f970 <usb_lld_start+0xe0>)
 800f924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f92a:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 800f92c:	695a      	ldr	r2, [r3, #20]
 800f92e:	2100      	movs	r1, #0
 800f930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f934:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800f936:	2043      	movs	r0, #67	; 0x43
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
      rccResetOTG_FS();
 800f938:	6159      	str	r1, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800f93a:	210e      	movs	r1, #14
 800f93c:	f7fe ff40 	bl	800e7c0 <nvicEnableVector>
 800f940:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f942:	e7b3      	b.n	800f8ac <usb_lld_start+0x1c>
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 800f944:	f44f 7106 	mov.w	r1, #536	; 0x218
 800f948:	2202      	movs	r2, #2
 800f94a:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <usb_lld_start+0xe4>)
 800f94c:	9500      	str	r5, [sp, #0]
 800f94e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800f952:	f7fd feb5 	bl	800d6c0 <chThdCreateI>
 800f956:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800f958:	f7fd fd8a 	bl	800d470 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 800f95c:	f7fd fe68 	bl	800d630 <chSchRescheduleS>
 800f960:	e7d5      	b.n	800f90e <usb_lld_start+0x7e>
 800f962:	bf00      	nop
 800f964:	20001400 	.word	0x20001400
 800f968:	40001440 	.word	0x40001440
 800f96c:	02200003 	.word	0x02200003
 800f970:	40023800 	.word	0x40023800
 800f974:	0800f4b1 	.word	0x0800f4b1
	...

0800f980 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800f982:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f984:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800f986:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f988:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800f98a:	692b      	ldr	r3, [r5, #16]
 800f98c:	f013 0420 	ands.w	r4, r3, #32
 800f990:	d1fb      	bne.n	800f98a <usb_lld_reset+0xa>
 800f992:	200c      	movs	r0, #12
 800f994:	f7fd fccc 	bl	800d330 <chSysPolledDelayX>
 800f998:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 800f99c:	f8de 6008 	ldr.w	r6, [lr, #8]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f9a0:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800f9a2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 800f9a6:	21ff      	movs	r1, #255	; 0xff
 800f9a8:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800f9b0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800f9b4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800f9b8:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800f9bc:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f9c0:	d9f2      	bls.n	800f9a8 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800f9c2:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800f9c6:	f04f 32ff 	mov.w	r2, #4294967295
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800f9ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800f9ce:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 800f9d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800f9d4:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800f9d8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800f9da:	f8de 3000 	ldr.w	r3, [lr]
 800f9de:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800f9e0:	2310      	movs	r3, #16
 800f9e2:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800f9e4:	6913      	ldr	r3, [r2, #16]
 800f9e6:	f013 0410 	ands.w	r4, r3, #16
 800f9ea:	d1fb      	bne.n	800f9e4 <usb_lld_reset+0x64>
 800f9ec:	200c      	movs	r0, #12
 800f9ee:	f7fd fc9f 	bl	800d330 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800f9f2:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800f9f6:	4a11      	ldr	r2, [pc, #68]	; (800fa3c <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800f9f8:	4811      	ldr	r0, [pc, #68]	; (800fa40 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800f9fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f9fe:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800fa02:	69ab      	ldr	r3, [r5, #24]
 800fa04:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800fa08:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800fa0c:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800fa0e:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800fa10:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800fa14:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800fa18:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800fa1a:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800fa1e:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800fa22:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800fa26:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800fa2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800fa2c:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800fa30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800fa34:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800fa36:	62ab      	str	r3, [r5, #40]	; 0x28
 800fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	10008040 	.word	0x10008040
 800fa40:	08017290 	.word	0x08017290
	...

0800fa50 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800fa50:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800fa52:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800fa56:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800fa5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fa5e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800fa62:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800fa66:	4770      	bx	lr
	...

0800fa70 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 800fa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa74:	fa0f f881 	sxth.w	r8, r1
 800fa78:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 800fa7c:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 800fa80:	6d04      	ldr	r4, [r0, #80]	; 0x50

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	f002 0203 	and.w	r2, r2, #3
 800fa88:	2a02      	cmp	r2, #2
 800fa8a:	d05c      	beq.n	800fb46 <usb_lld_init_endpoint+0xd6>
 800fa8c:	2a03      	cmp	r2, #3
 800fa8e:	d05c      	beq.n	800fb4a <usb_lld_init_endpoint+0xda>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 800fa90:	4e4a      	ldr	r6, [pc, #296]	; (800fbbc <usb_lld_init_endpoint+0x14c>)
 800fa92:	494b      	ldr	r1, [pc, #300]	; (800fbc0 <usb_lld_init_endpoint+0x150>)
 800fa94:	2a01      	cmp	r2, #1
 800fa96:	bf18      	it	ne
 800fa98:	460e      	movne	r6, r1
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800fa9a:	016a      	lsls	r2, r5, #5
  if (usbp->epc[ep]->out_cb != NULL) {
 800fa9c:	68d9      	ldr	r1, [r3, #12]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800fa9e:	eb04 0e02 	add.w	lr, r4, r2
 800faa2:	f04f 0c00 	mov.w	ip, #0
 800faa6:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_cb != NULL) {
 800faaa:	2900      	cmp	r1, #0
 800faac:	d071      	beq.n	800fb92 <usb_lld_init_endpoint+0x122>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800faae:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800fab2:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800fab6:	0149      	lsls	r1, r1, #5
 800fab8:	ea46 0e0e 	orr.w	lr, r6, lr
 800fabc:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 800fac0:	f105 0c10 	add.w	ip, r5, #16
 800fac4:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800fac8:	f04f 0e01 	mov.w	lr, #1
 800facc:	fa0e fe0c 	lsl.w	lr, lr, ip
 800fad0:	ea4e 0101 	orr.w	r1, lr, r1
 800fad4:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800fad8:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_cb != NULL) {
 800fada:	6899      	ldr	r1, [r3, #8]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800fadc:	f04f 0e00 	mov.w	lr, #0
 800fae0:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_cb != NULL) {
 800fae4:	b399      	cbz	r1, 800fb4e <usb_lld_init_endpoint+0xde>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 800fae6:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800fae8:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 800faea:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800faec:	ea4f 0392 	mov.w	r3, r2, lsr #2
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 800faf0:	bf88      	it	hi
 800faf2:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800faf4:	f105 0e3f 	add.w	lr, r5, #63	; 0x3f
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800faf8:	6d81      	ldr	r1, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800fafa:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800fafe:	01aa      	lsls	r2, r5, #6
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800fb00:	eb03 0c01 	add.w	ip, r3, r1
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800fb04:	f042 0220 	orr.w	r2, r2, #32
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800fb08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800fb0c:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800fb10:	f8ce 3004 	str.w	r3, [lr, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800fb14:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800fb16:	6923      	ldr	r3, [r4, #16]
 800fb18:	069a      	lsls	r2, r3, #26
 800fb1a:	d4fc      	bmi.n	800fb16 <usb_lld_init_endpoint+0xa6>
 800fb1c:	200c      	movs	r0, #12
 800fb1e:	f7fd fc07 	bl	800d330 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 800fb22:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 800fb24:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800fb26:	f105 0348 	add.w	r3, r5, #72	; 0x48
 800fb2a:	015b      	lsls	r3, r3, #5
 800fb2c:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
                           DIEPCTL_TXFNUM(ep) |
 800fb30:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800fb32:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 800fb34:	2301      	movs	r3, #1
 800fb36:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 800fb3a:	40ab      	lsls	r3, r5
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 800fb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 800fb46:	4e1f      	ldr	r6, [pc, #124]	; (800fbc4 <usb_lld_init_endpoint+0x154>)
    break;
 800fb48:	e7a7      	b.n	800fa9a <usb_lld_init_endpoint+0x2a>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 800fb4a:	4e1f      	ldr	r6, [pc, #124]	; (800fbc8 <usb_lld_init_endpoint+0x158>)
    break;
 800fb4c:	e7a5      	b.n	800fa9a <usb_lld_init_endpoint+0x2a>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800fb4e:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 800fb52:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800fb56:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800fb58:	491c      	ldr	r1, [pc, #112]	; (800fbcc <usb_lld_init_endpoint+0x15c>)
 800fb5a:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800fb5c:	f043 0320 	orr.w	r3, r3, #32
 800fb60:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800fb62:	6923      	ldr	r3, [r4, #16]
 800fb64:	069b      	lsls	r3, r3, #26
 800fb66:	d4fc      	bmi.n	800fb62 <usb_lld_init_endpoint+0xf2>
 800fb68:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 800fb6c:	200c      	movs	r0, #12
 800fb6e:	f7fd fbdf 	bl	800d330 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800fb72:	f8d8 2900 	ldr.w	r2, [r8, #2304]	; 0x900
 800fb76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fb7a:	f8c8 2900 	str.w	r2, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 800fb7e:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 800fb82:	2301      	movs	r3, #1
 800fb84:	40ab      	lsls	r3, r5
 800fb86:	ea22 0303 	bic.w	r3, r2, r3
 800fb8a:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 800fb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb92:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800fb96:	f105 0c10 	add.w	ip, r5, #16
  if (usbp->epc[ep]->out_cb != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800fb9a:	f8d1 eb00 	ldr.w	lr, [r1, #2816]	; 0xb00
 800fb9e:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 800fba2:	f8c1 eb00 	str.w	lr, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800fba6:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800fbaa:	f04f 0e01 	mov.w	lr, #1
 800fbae:	fa0e fe0c 	lsl.w	lr, lr, ip
 800fbb2:	ea21 010e 	bic.w	r1, r1, lr
 800fbb6:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 800fbba:	e78d      	b.n	800fad8 <usb_lld_init_endpoint+0x68>
 800fbbc:	10048000 	.word	0x10048000
 800fbc0:	10008000 	.word	0x10008000
 800fbc4:	10088000 	.word	0x10088000
 800fbc8:	100c8000 	.word	0x100c8000
 800fbcc:	02000400 	.word	0x02000400

0800fbd0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800fbd0:	3158      	adds	r1, #88	; 0x58
 800fbd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbd4:	0149      	lsls	r1, r1, #5
 800fbd6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800fbd8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800fbdc:	d004      	beq.n	800fbe8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800fbde:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800fbe2:	bf14      	ite	ne
 800fbe4:	2001      	movne	r0, #1
 800fbe6:	2002      	moveq	r0, #2
}
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	0000      	movs	r0, r0
	...

0800fbf0 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800fbf0:	3148      	adds	r1, #72	; 0x48
 800fbf2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbf4:	0149      	lsls	r1, r1, #5
 800fbf6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800fbf8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800fbfc:	d004      	beq.n	800fc08 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800fbfe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800fc02:	bf14      	ite	ne
 800fc04:	2001      	movne	r0, #1
 800fc06:	2002      	moveq	r0, #2
}
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	0000      	movs	r0, r0
	...

0800fc10 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800fc10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc14:	68cb      	ldr	r3, [r1, #12]
 800fc16:	6a1b      	ldr	r3, [r3, #32]
 800fc18:	6819      	ldr	r1, [r3, #0]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	6053      	str	r3, [r2, #4]
 800fc1e:	6011      	str	r1, [r2, #0]
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
	...

0800fc30 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800fc30:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 800fc34:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800fc36:	68dd      	ldr	r5, [r3, #12]
 800fc38:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800fc3a:	6863      	ldr	r3, [r4, #4]
 800fc3c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 800fc3e:	b931      	cbnz	r1, 800fc4e <usb_lld_prepare_receive+0x1e>
 800fc40:	2b40      	cmp	r3, #64	; 0x40
 800fc42:	d904      	bls.n	800fc4e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 800fc44:	2340      	movs	r3, #64	; 0x40
 800fc46:	6063      	str	r3, [r4, #4]
 800fc48:	4a09      	ldr	r2, [pc, #36]	; (800fc70 <usb_lld_prepare_receive+0x40>)
 800fc4a:	243f      	movs	r4, #63	; 0x3f
 800fc4c:	e002      	b.n	800fc54 <usb_lld_prepare_receive+0x24>
 800fc4e:	1e5c      	subs	r4, r3, #1
 800fc50:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800fc54:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800fc56:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800fc58:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800fc5c:	1963      	adds	r3, r4, r5
 800fc5e:	fbb3 f3f5 	udiv	r3, r3, r5
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800fc62:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 800fc66:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 800fc6a:	bc30      	pop	{r4, r5}
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	60000040 	.word	0x60000040
	...

0800fc80 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800fc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800fc84:	4e26      	ldr	r6, [pc, #152]	; (800fd20 <otg_epout_handler.constprop.7+0xa0>)
 800fc86:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800fc88:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800fc8c:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800fc8e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 800fc92:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800fc96:	0720      	lsls	r0, r4, #28
 800fc98:	d503      	bpl.n	800fca2 <otg_epout_handler.constprop.7+0x22>
 800fc9a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800fc9e:	0719      	lsls	r1, r3, #28
 800fca0:	d41d      	bmi.n	800fcde <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800fca2:	07e2      	lsls	r2, r4, #31
 800fca4:	d519      	bpl.n	800fcda <otg_epout_handler.constprop.7+0x5a>
 800fca6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800fcaa:	07db      	lsls	r3, r3, #31
 800fcac:	d515      	bpl.n	800fcda <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800fcae:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800fcb2:	4c1b      	ldr	r4, [pc, #108]	; (800fd20 <otg_epout_handler.constprop.7+0xa0>)
 800fcb4:	68f1      	ldr	r1, [r6, #12]
 800fcb6:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 800fcb8:	6858      	ldr	r0, [r3, #4]
 800fcba:	691a      	ldr	r2, [r3, #16]
 800fcbc:	4290      	cmp	r0, r2
 800fcbe:	d316      	bcc.n	800fcee <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800fcc0:	8962      	ldrh	r2, [r4, #10]
 800fcc2:	68ce      	ldr	r6, [r1, #12]
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	40ab      	lsls	r3, r5
 800fcc8:	ea22 0303 	bic.w	r3, r2, r3
 800fccc:	8163      	strh	r3, [r4, #10]
 800fcce:	4629      	mov	r1, r5
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	4633      	mov	r3, r6
    }
  }
}
 800fcd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800fcd8:	4718      	bx	r3
 800fcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800fcde:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800fce2:	4630      	mov	r0, r6
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	4629      	mov	r1, r5
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	4798      	blx	r3
 800fcec:	e7d9      	b.n	800fca2 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800fcee:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 800fcf0:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800fcf2:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 800fcf4:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	f7ff ff99 	bl	800fc30 <usb_lld_prepare_receive>
 800fcfe:	2320      	movs	r3, #32
 800fd00:	f383 8811 	msr	BASEPRI, r3
 800fd04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fd06:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800fd0a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800fd0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd12:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800fd16:	f386 8811 	msr	BASEPRI, r6
 800fd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd1e:	bf00      	nop
 800fd20:	20001400 	.word	0x20001400
	...

0800fd30 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800fd30:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800fd34:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800fd36:	68dc      	ldr	r4, [r3, #12]
 800fd38:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800fd3a:	6853      	ldr	r3, [r2, #4]
 800fd3c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 800fd3e:	b1ab      	cbz	r3, 800fd6c <usb_lld_prepare_transmit+0x3c>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800fd40:	b171      	cbz	r1, 800fd60 <usb_lld_prepare_transmit+0x30>
 800fd42:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800fd44:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800fd46:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800fd48:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800fd4c:	4422      	add	r2, r4
 800fd4e:	fbb2 f2f4 	udiv	r2, r2, r4
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800fd52:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800fd56:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800fd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd5e:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800fd60:	2b40      	cmp	r3, #64	; 0x40
 800fd62:	d9ee      	bls.n	800fd42 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 800fd64:	2340      	movs	r3, #64	; 0x40
 800fd66:	6053      	str	r3, [r2, #4]
 800fd68:	223f      	movs	r2, #63	; 0x3f
 800fd6a:	e7eb      	b.n	800fd44 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800fd6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800fd6e:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800fd72:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800fd76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd7a:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800fd7e:	4770      	bx	lr

0800fd80 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800fd84:	4f30      	ldr	r7, [pc, #192]	; (800fe48 <otg_epin_handler.constprop.8+0xc8>)
 800fd86:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800fd88:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800fd8c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800fd8e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 800fd92:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800fd96:	07e1      	lsls	r1, r4, #31
 800fd98:	d503      	bpl.n	800fda2 <otg_epin_handler.constprop.8+0x22>
 800fd9a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800fd9e:	07da      	lsls	r2, r3, #31
 800fda0:	d409      	bmi.n	800fdb6 <otg_epin_handler.constprop.8+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800fda2:	0623      	lsls	r3, r4, #24
 800fda4:	d505      	bpl.n	800fdb2 <otg_epin_handler.constprop.8+0x32>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800fda6:	2301      	movs	r3, #1
 800fda8:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 800fdac:	40b3      	lsls	r3, r6
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800fdae:	4213      	tst	r3, r2
 800fdb0:	d129      	bne.n	800fe06 <otg_epin_handler.constprop.8+0x86>
 800fdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800fdb6:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800fdba:	68d9      	ldr	r1, [r3, #12]
 800fdbc:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800fdbe:	6858      	ldr	r0, [r3, #4]
 800fdc0:	691a      	ldr	r2, [r3, #16]
 800fdc2:	4290      	cmp	r0, r2
 800fdc4:	d234      	bcs.n	800fe30 <otg_epin_handler.constprop.8+0xb0>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800fdc6:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800fdc8:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800fdcc:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 800fdce:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 800fdd2:	4638      	mov	r0, r7
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	f7ff ffab 	bl	800fd30 <usb_lld_prepare_transmit>
 800fdda:	2320      	movs	r3, #32
 800fddc:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800fde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde2:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800fde6:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800fde8:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800fdec:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800fdf0:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800fdf4:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800fdf8:	40b2      	lsls	r2, r6
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800fe00:	f388 8811 	msr	BASEPRI, r8
 800fe04:	e7cd      	b.n	800fda2 <otg_epin_handler.constprop.8+0x22>
 800fe06:	2220      	movs	r2, #32
 800fe08:	f382 8811 	msr	BASEPRI, r2
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800fe0c:	f8d5 1834 	ldr.w	r1, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800fe10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800fe12:	480e      	ldr	r0, [pc, #56]	; (800fe4c <otg_epin_handler.constprop.8+0xcc>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800fe14:	ea21 0103 	bic.w	r1, r1, r3
 800fe18:	f8c5 1834 	str.w	r1, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	2100      	movs	r1, #0
 800fe20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe22:	f7fd fd0d 	bl	800d840 <chThdResumeI>
 800fe26:	2300      	movs	r3, #0
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800fe30:	893a      	ldrh	r2, [r7, #8]
 800fe32:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800fe36:	2301      	movs	r3, #1
 800fe38:	40b3      	lsls	r3, r6
 800fe3a:	ea22 0303 	bic.w	r3, r2, r3
 800fe3e:	813b      	strh	r3, [r7, #8]
 800fe40:	4638      	mov	r0, r7
 800fe42:	4631      	mov	r1, r6
 800fe44:	47e0      	blx	ip
 800fe46:	e7ac      	b.n	800fda2 <otg_epin_handler.constprop.8+0x22>
 800fe48:	20001400 	.word	0x20001400
 800fe4c:	20001460 	.word	0x20001460

0800fe50 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800fe50:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800fe52:	4d3a      	ldr	r5, [pc, #232]	; (800ff3c <Vector14C+0xec>)
 800fe54:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 800fe56:	6973      	ldr	r3, [r6, #20]
  sts &= otgp->GINTMSK;
 800fe58:	69b4      	ldr	r4, [r6, #24]
 800fe5a:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800fe5c:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 800fe5e:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800fe60:	d42d      	bmi.n	800febe <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 800fe62:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 800fe64:	bf48      	it	mi
 800fe66:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800fe6a:	0723      	lsls	r3, r4, #28
 800fe6c:	d504      	bpl.n	800fe78 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 800fe6e:	686b      	ldr	r3, [r5, #4]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	b10b      	cbz	r3, 800fe78 <Vector14C+0x28>
 800fe74:	4831      	ldr	r0, [pc, #196]	; (800ff3c <Vector14C+0xec>)
 800fe76:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 800fe78:	06e5      	lsls	r5, r4, #27
 800fe7a:	d42b      	bmi.n	800fed4 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 800fe7c:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 800fe7e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800fe82:	d507      	bpl.n	800fe94 <Vector14C+0x44>
    if (src & (1 << 0))
 800fe84:	07e9      	lsls	r1, r5, #31
 800fe86:	d445      	bmi.n	800ff14 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 800fe88:	07aa      	lsls	r2, r5, #30
 800fe8a:	d448      	bmi.n	800ff1e <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800fe8c:	076b      	lsls	r3, r5, #29
 800fe8e:	d44b      	bmi.n	800ff28 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 800fe90:	072e      	lsls	r6, r5, #28
 800fe92:	d44e      	bmi.n	800ff32 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800fe94:	0324      	lsls	r4, r4, #12
 800fe96:	d507      	bpl.n	800fea8 <Vector14C+0x58>
    if (src & (1 << 16))
 800fe98:	03e8      	lsls	r0, r5, #15
 800fe9a:	d430      	bmi.n	800fefe <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 800fe9c:	03a9      	lsls	r1, r5, #14
 800fe9e:	d433      	bmi.n	800ff08 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 800fea0:	036a      	lsls	r2, r5, #13
 800fea2:	d426      	bmi.n	800fef2 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800fea4:	032b      	lsls	r3, r5, #12
 800fea6:	d403      	bmi.n	800feb0 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800fea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800feac:	f7fd bf08 	b.w	800dcc0 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800feb0:	2003      	movs	r0, #3
 800feb2:	f7ff fee5 	bl	800fc80 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800feb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800feba:	f7fd bf01 	b.w	800dcc0 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 800febe:	4628      	mov	r0, r5
 800fec0:	f7fe fa0e 	bl	800e2e0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800fec4:	686b      	ldr	r3, [r5, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d0ca      	beq.n	800fe62 <Vector14C+0x12>
 800fecc:	4628      	mov	r0, r5
 800fece:	2100      	movs	r1, #0
 800fed0:	4798      	blx	r3
 800fed2:	e7c6      	b.n	800fe62 <Vector14C+0x12>
 800fed4:	2320      	movs	r3, #32
 800fed6:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800feda:	69b3      	ldr	r3, [r6, #24]
 800fedc:	4818      	ldr	r0, [pc, #96]	; (800ff40 <Vector14C+0xf0>)
 800fede:	f023 0310 	bic.w	r3, r3, #16
 800fee2:	61b3      	str	r3, [r6, #24]
 800fee4:	2100      	movs	r1, #0
 800fee6:	f7fd fcab 	bl	800d840 <chThdResumeI>
 800feea:	2300      	movs	r3, #0
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	e7c4      	b.n	800fe7c <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800fef2:	2002      	movs	r0, #2
 800fef4:	f7ff fec4 	bl	800fc80 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 800fef8:	032b      	lsls	r3, r5, #12
 800fefa:	d5d5      	bpl.n	800fea8 <Vector14C+0x58>
 800fefc:	e7d8      	b.n	800feb0 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800fefe:	2000      	movs	r0, #0
 800ff00:	f7ff febe 	bl	800fc80 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 800ff04:	03a9      	lsls	r1, r5, #14
 800ff06:	d5cb      	bpl.n	800fea0 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 800ff08:	2001      	movs	r0, #1
 800ff0a:	f7ff feb9 	bl	800fc80 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 800ff0e:	036a      	lsls	r2, r5, #13
 800ff10:	d5c8      	bpl.n	800fea4 <Vector14C+0x54>
 800ff12:	e7ee      	b.n	800fef2 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 800ff14:	2000      	movs	r0, #0
 800ff16:	f7ff ff33 	bl	800fd80 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 800ff1a:	07aa      	lsls	r2, r5, #30
 800ff1c:	d5b6      	bpl.n	800fe8c <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 800ff1e:	2001      	movs	r0, #1
 800ff20:	f7ff ff2e 	bl	800fd80 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 800ff24:	076b      	lsls	r3, r5, #29
 800ff26:	d5b3      	bpl.n	800fe90 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 800ff28:	2002      	movs	r0, #2
 800ff2a:	f7ff ff29 	bl	800fd80 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 800ff2e:	072e      	lsls	r6, r5, #28
 800ff30:	d5b0      	bpl.n	800fe94 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 800ff32:	2003      	movs	r0, #3
 800ff34:	f7ff ff24 	bl	800fd80 <otg_epin_handler.constprop.8>
 800ff38:	e7ac      	b.n	800fe94 <Vector14C+0x44>
 800ff3a:	bf00      	nop
 800ff3c:	20001400 	.word	0x20001400
 800ff40:	20001460 	.word	0x20001460
	...

0800ff50 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800ff50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ff52:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800ff56:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800ff5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff5e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800ff62:	4770      	bx	lr
	...

0800ff70 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800ff70:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800ff72:	b410      	push	{r4}
 800ff74:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800ff78:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800ff7a:	f8d4 0900 	ldr.w	r0, [r4, #2304]	; 0x900
 800ff7e:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 800ff82:	f8c4 0900 	str.w	r0, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800ff86:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
}
 800ff8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800ff8e:	408a      	lsls	r2, r1
 800ff90:	4302      	orrs	r2, r0
 800ff92:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 800ff96:	4770      	bx	lr
	...

0800ffa0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800ffa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ffa2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800ffa6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800ffaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffae:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800ffb2:	4770      	bx	lr
	...

0800ffc0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800ffc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ffc2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800ffc6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800ffca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffce:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800ffd2:	4770      	bx	lr
	...

0800ffe0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800ffe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ffe2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800ffe6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800ffea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ffee:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800fff2:	4770      	bx	lr
	...

08010000 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8010000:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010002:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8010006:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 801000a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801000e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8010012:	4770      	bx	lr
	...

08010020 <VectorB4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8010020:	b538      	push	{r3, r4, r5, lr}
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8010022:	4d25      	ldr	r5, [pc, #148]	; (80100b8 <VectorB4+0x98>)
 8010024:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8010026:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8010028:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 801002a:	68dc      	ldr	r4, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 801002c:	7d08      	ldrb	r0, [r1, #20]
 801002e:	4014      	ands	r4, r2
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8010030:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8010032:	43d2      	mvns	r2, r2
 8010034:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8010036:	b9f8      	cbnz	r0, 8010078 <VectorB4+0x58>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8010038:	0760      	lsls	r0, r4, #29
 801003a:	d514      	bpl.n	8010066 <VectorB4+0x46>
      _icu_isr_invoke_width_cb(icup);
 801003c:	782b      	ldrb	r3, [r5, #0]
 801003e:	2b04      	cmp	r3, #4
 8010040:	d00d      	beq.n	801005e <VectorB4+0x3e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8010042:	07a1      	lsls	r1, r4, #30
 8010044:	d415      	bmi.n	8010072 <VectorB4+0x52>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8010046:	07e4      	lsls	r4, r4, #31
 8010048:	d505      	bpl.n	8010056 <VectorB4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 801004a:	686b      	ldr	r3, [r5, #4]
 801004c:	481a      	ldr	r0, [pc, #104]	; (80100b8 <VectorB4+0x98>)
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	4798      	blx	r3
 8010052:	2303      	movs	r3, #3
 8010054:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 8010056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
 801005a:	f7fd be31 	b.w	800dcc0 <_port_irq_epilogue>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 801005e:	688b      	ldr	r3, [r1, #8]
 8010060:	b31b      	cbz	r3, 80100aa <VectorB4+0x8a>
 8010062:	4628      	mov	r0, r5
 8010064:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8010066:	07a1      	lsls	r1, r4, #30
 8010068:	d5ed      	bpl.n	8010046 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
 801006a:	782b      	ldrb	r3, [r5, #0]
 801006c:	4a12      	ldr	r2, [pc, #72]	; (80100b8 <VectorB4+0x98>)
 801006e:	2b04      	cmp	r3, #4
 8010070:	d014      	beq.n	801009c <VectorB4+0x7c>
 8010072:	2304      	movs	r3, #4
 8010074:	702b      	strb	r3, [r5, #0]
 8010076:	e7e6      	b.n	8010046 <VectorB4+0x26>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8010078:	07a2      	lsls	r2, r4, #30
 801007a:	d509      	bpl.n	8010090 <VectorB4+0x70>
      _icu_isr_invoke_width_cb(icup);
 801007c:	782b      	ldrb	r3, [r5, #0]
 801007e:	2b04      	cmp	r3, #4
 8010080:	d002      	beq.n	8010088 <VectorB4+0x68>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8010082:	0763      	lsls	r3, r4, #29
 8010084:	d4f5      	bmi.n	8010072 <VectorB4+0x52>
 8010086:	e7de      	b.n	8010046 <VectorB4+0x26>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8010088:	688b      	ldr	r3, [r1, #8]
 801008a:	b18b      	cbz	r3, 80100b0 <VectorB4+0x90>
 801008c:	4628      	mov	r0, r5
 801008e:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8010090:	0763      	lsls	r3, r4, #29
 8010092:	d5d8      	bpl.n	8010046 <VectorB4+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 8010094:	782b      	ldrb	r3, [r5, #0]
 8010096:	4a08      	ldr	r2, [pc, #32]	; (80100b8 <VectorB4+0x98>)
 8010098:	2b04      	cmp	r3, #4
 801009a:	d1ea      	bne.n	8010072 <VectorB4+0x52>
 801009c:	6851      	ldr	r1, [r2, #4]
 801009e:	68cb      	ldr	r3, [r1, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d0e6      	beq.n	8010072 <VectorB4+0x52>
 80100a4:	4804      	ldr	r0, [pc, #16]	; (80100b8 <VectorB4+0x98>)
 80100a6:	4798      	blx	r3
 80100a8:	e7e3      	b.n	8010072 <VectorB4+0x52>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80100aa:	07a0      	lsls	r0, r4, #30
 80100ac:	d4f7      	bmi.n	801009e <VectorB4+0x7e>
 80100ae:	e7ca      	b.n	8010046 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80100b0:	0762      	lsls	r2, r4, #29
 80100b2:	d4f4      	bmi.n	801009e <VectorB4+0x7e>
 80100b4:	e7c7      	b.n	8010046 <VectorB4+0x26>
 80100b6:	bf00      	nop
 80100b8:	2000169c 	.word	0x2000169c
 80100bc:	00000000 	.word	0x00000000

080100c0 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 80100c0:	b510      	push	{r4, lr}
  ICUD2.tim = STM32_TIM2;
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
 80100c2:	4c03      	ldr	r4, [pc, #12]	; (80100d0 <icu_lld_init+0x10>)
 80100c4:	4620      	mov	r0, r4
 80100c6:	f7fd fe93 	bl	800ddf0 <icuObjectInit>
  ICUD3.tim = STM32_TIM3;
 80100ca:	4b02      	ldr	r3, [pc, #8]	; (80100d4 <icu_lld_init+0x14>)
 80100cc:	60e3      	str	r3, [r4, #12]
 80100ce:	bd10      	pop	{r4, pc}
 80100d0:	2000169c 	.word	0x2000169c
 80100d4:	40000400 	.word	0x40000400
	...

080100e0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 80100e0:	b508      	push	{r3, lr}
 80100e2:	2320      	movs	r3, #32
 80100e4:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 80100e8:	f7fd f8f2 	bl	800d2d0 <chSysTimerHandlerI>
 80100ec:	2300      	movs	r3, #0
 80100ee:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 80100f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 80100f6:	f7fd bde3 	b.w	800dcc0 <_port_irq_epilogue>
 80100fa:	bf00      	nop
 80100fc:	0000      	movs	r0, r0
	...

08010100 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8010100:	4b05      	ldr	r3, [pc, #20]	; (8010118 <st_lld_init+0x18>)
 8010102:	f244 109f 	movw	r0, #16799	; 0x419f
  SysTick->VAL = 0;
 8010106:	2100      	movs	r1, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8010108:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 801010a:	6058      	str	r0, [r3, #4]
  SysTick->VAL = 0;
 801010c:	6099      	str	r1, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 801010e:	200b      	movs	r0, #11
 8010110:	2108      	movs	r1, #8
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8010112:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8010114:	f7fe bb74 	b.w	800e800 <nvicSetSystemHandlerPriority>
 8010118:	e000e010 	.word	0xe000e010
 801011c:	00000000 	.word	0x00000000

08010120 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8010120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8010124:	6884      	ldr	r4, [r0, #8]
  uint32_t cr1 = u->CR1;
 8010126:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 8010128:	6826      	ldr	r6, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 801012a:	6862      	ldr	r2, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 801012c:	f240 130f 	movw	r3, #271	; 0x10f
 8010130:	4033      	ands	r3, r6
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8010132:	4605      	mov	r5, r0
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8010134:	b1eb      	cbz	r3, 8010172 <serve_usart_irq+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
 8010136:	6843      	ldr	r3, [r0, #4]
 8010138:	691a      	ldr	r2, [r3, #16]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 801013a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801013e:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 8010140:	b1ba      	cbz	r2, 8010172 <serve_usart_irq+0x52>
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
 8010142:	b2b3      	uxth	r3, r6
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8010144:	f013 0f08 	tst.w	r3, #8
 8010148:	bf0c      	ite	eq
 801014a:	2100      	moveq	r1, #0
 801014c:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 801014e:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 8010150:	bf48      	it	mi
 8010152:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8010156:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8010158:	bf48      	it	mi
 801015a:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 801015e:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 8010160:	bf48      	it	mi
 8010162:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8010166:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8010168:	bf48      	it	mi
 801016a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 801016e:	4628      	mov	r0, r5
 8010170:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8010172:	0672      	lsls	r2, r6, #25
 8010174:	d50e      	bpl.n	8010194 <serve_usart_irq+0x74>
 8010176:	067b      	lsls	r3, r7, #25
 8010178:	d50c      	bpl.n	8010194 <serve_usart_irq+0x74>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 801017a:	686b      	ldr	r3, [r5, #4]
 801017c:	685b      	ldr	r3, [r3, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 801017e:	f027 0740 	bic.w	r7, r7, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 8010182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010186:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8010188:	60e7      	str	r7, [r4, #12]

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 801018a:	b11b      	cbz	r3, 8010194 <serve_usart_irq+0x74>
      uartp->config->txend2_cb(uartp);
 801018c:	4628      	mov	r0, r5
  }
}
 801018e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
      uartp->config->txend2_cb(uartp);
 8010192:	4718      	bx	r3
 8010194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080101a0 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80101a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);
 80101a2:	4803      	ldr	r0, [pc, #12]	; (80101b0 <VectorDC+0x10>)
 80101a4:	f7ff ffbc 	bl	8010120 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80101a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);

  OSAL_IRQ_EPILOGUE();
 80101ac:	f7fd bd88 	b.w	800dcc0 <_port_irq_epilogue>
 80101b0:	200016b4 	.word	0x200016b4
	...

080101c0 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 80101c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);
 80101c2:	4803      	ldr	r0, [pc, #12]	; (80101d0 <Vector15C+0x10>)
 80101c4:	f7ff ffac 	bl	8010120 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80101c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
 80101cc:	f7fd bd78 	b.w	800dcc0 <_port_irq_epilogue>
 80101d0:	200016d0 	.word	0x200016d0
	...

080101e0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 80101e0:	b570      	push	{r4, r5, r6, lr}
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 80101e2:	4d0c      	ldr	r5, [pc, #48]	; (8010214 <uart_lld_init+0x34>)
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 80101e4:	4c0c      	ldr	r4, [pc, #48]	; (8010218 <uart_lld_init+0x38>)
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 80101e6:	4e0d      	ldr	r6, [pc, #52]	; (801021c <uart_lld_init+0x3c>)
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7fd ffd1 	bl	800e190 <uartObjectInit>
  UARTD3.usart   = USART3;
 80101ee:	4b0c      	ldr	r3, [pc, #48]	; (8010220 <uart_lld_init+0x40>)
 80101f0:	60ab      	str	r3, [r5, #8]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80101f2:	2206      	movs	r2, #6
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 80101f4:	f104 0318 	add.w	r3, r4, #24
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 80101f8:	4630      	mov	r0, r6

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 80101fa:	612c      	str	r4, [r5, #16]
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 80101fc:	616b      	str	r3, [r5, #20]
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80101fe:	60ea      	str	r2, [r5, #12]
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8010200:	f7fd ffc6 	bl	800e190 <uartObjectInit>
  UARTD6.usart   = USART6;
 8010204:	4b07      	ldr	r3, [pc, #28]	; (8010224 <uart_lld_init+0x44>)
 8010206:	60b3      	str	r3, [r6, #8]
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8010208:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 801020c:	34a8      	adds	r4, #168	; 0xa8
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 801020e:	6133      	str	r3, [r6, #16]
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 8010210:	6174      	str	r4, [r6, #20]
 8010212:	bd70      	pop	{r4, r5, r6, pc}
 8010214:	200016b4 	.word	0x200016b4
 8010218:	080171bc 	.word	0x080171bc
 801021c:	200016d0 	.word	0x200016d0
 8010220:	40004800 	.word	0x40004800
 8010224:	40011400 	.word	0x40011400
	...

08010230 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8010230:	f7fe bd16 	b.w	800ec60 <stm32_clock_init>
	...

08010240 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
	...

08010250 <_sbrk_r>:
}

/***************************************************************************/

caddr_t _sbrk_r(struct _reent *r, int incr)
{
 8010250:	b510      	push	{r4, lr}
 8010252:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr > 0);

  p = chCoreAlloc((size_t)incr);
 8010254:	4608      	mov	r0, r1
 8010256:	f7fd fcf3 	bl	800dc40 <chCoreAlloc>
  if (p == NULL) {
 801025a:	b100      	cbz	r0, 801025e <_sbrk_r+0xe>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 801025c:	bd10      	pop	{r4, pc}

  chDbgCheck(incr > 0);

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
    __errno_r(r) = ENOMEM;
 801025e:	230c      	movs	r3, #12
 8010260:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 8010262:	f04f 30ff 	mov.w	r0, #4294967295
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8010266:	bd10      	pop	{r4, pc}
	...

08010270 <periodic_thread>:
static THD_WORKING_AREA(periodic_thread_wa, 1024);
static THD_WORKING_AREA(uart_thread_wa, 128);



static msg_t periodic_thread(void *arg) {
 8010270:	b508      	push	{r3, lr}
 8010272:	4b04      	ldr	r3, [pc, #16]	; (8010284 <periodic_thread+0x14>)
 8010274:	4a04      	ldr	r2, [pc, #16]	; (8010288 <periodic_thread+0x18>)
 8010276:	699b      	ldr	r3, [r3, #24]
 8010278:	619a      	str	r2, [r3, #24]
	int fault_print = 0;

	for(;;)
	{

		chThdSleepMilliseconds(10);
 801027a:	2064      	movs	r0, #100	; 0x64
 801027c:	f7fd fa98 	bl	800d7b0 <chThdSleep>
	}
 8010280:	e7fb      	b.n	801027a <periodic_thread+0xa>
 8010282:	bf00      	nop
 8010284:	20001090 	.word	0x20001090
 8010288:	080173c0 	.word	0x080173c0
 801028c:	00000000 	.word	0x00000000

08010290 <uart_process_thread>:
}


uint8_t Ch;

static msg_t uart_process_thread(void *arg) {
 8010290:	b508      	push	{r3, lr}
 8010292:	4b06      	ldr	r3, [pc, #24]	; (80102ac <uart_process_thread+0x1c>)
 8010294:	4a06      	ldr	r2, [pc, #24]	; (80102b0 <uart_process_thread+0x20>)
 8010296:	699b      	ldr	r3, [r3, #24]
 8010298:	4c06      	ldr	r4, [pc, #24]	; (80102b4 <uart_process_thread+0x24>)
 801029a:	619a      	str	r2, [r3, #24]

	//process_tp = chThdSelf();

	for(;;) {

		chThdSleepMilliseconds(1);
 801029c:	200a      	movs	r0, #10
 801029e:	f7fd fa87 	bl	800d7b0 <chThdSleep>

		Ch = usb_uart_getch();
 80102a2:	f000 ff95 	bl	80111d0 <usb_uart_getch>
 80102a6:	7020      	strb	r0, [r4, #0]

		}
 80102a8:	e7f8      	b.n	801029c <uart_process_thread+0xc>
 80102aa:	bf00      	nop
 80102ac:	20001090 	.word	0x20001090
 80102b0:	080173d0 	.word	0x080173d0
 80102b4:	200016ec 	.word	0x200016ec
	...

080102c0 <bldc_init>:




int bldc_init(void)
{
 80102c0:	b500      	push	{lr}
 80102c2:	b0d1      	sub	sp, #324	; 0x144
	halInit();
 80102c4:	f7fd fd2c 	bl	800dd20 <halInit>
	chSysInit();
 80102c8:	f7fc ffaa 	bl	800d220 <chSysInit>

	chThdSleepMilliseconds(1000);
 80102cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80102d0:	f7fd fa6e 	bl	800d7b0 <chThdSleep>

	conf_general_init();
 80102d4:	f000 fff4 	bl	80112c0 <conf_general_init>
	hw_init_gpio();
 80102d8:	f001 faea 	bl	80118b0 <hw_init_gpio>


	mc_configuration mcconf;
	conf_general_read_mc_configuration(&mcconf);
 80102dc:	a824      	add	r0, sp, #144	; 0x90
 80102de:	f001 f8b7 	bl	8011450 <conf_general_read_mc_configuration>
	mcpwm_init(&mcconf);
 80102e2:	a824      	add	r0, sp, #144	; 0x90
 80102e4:	f000 f94c 	bl	8010580 <mcpwm_init>

	comm_usb_init();
 80102e8:	f000 ffba 	bl	8011260 <comm_usb_init>

	app_configuration appconf;
	conf_general_read_app_configuration(&appconf);
 80102ec:	a801      	add	r0, sp, #4
 80102ee:	f001 f817 	bl	8011320 <conf_general_read_app_configuration>



	return 0;
}
 80102f2:	2000      	movs	r0, #0
 80102f4:	b051      	add	sp, #324	; 0x144
 80102f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80102fa:	bf00      	nop
 80102fc:	0000      	movs	r0, r0
	...

08010300 <bldc_start>:
float dbg_fTheta;
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8



	//-- 스레드 생성
	//
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 8010304:	2400      	movs	r4, #0
 8010306:	4b25      	ldr	r3, [pc, #148]	; (801039c <bldc_start+0x9c>)
 8010308:	9400      	str	r4, [sp, #0]
 801030a:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 801030e:	2240      	movs	r2, #64	; 0x40
 8010310:	4823      	ldr	r0, [pc, #140]	; (80103a0 <bldc_start+0xa0>)
 8010312:	4f24      	ldr	r7, [pc, #144]	; (80103a4 <bldc_start+0xa4>)
 8010314:	4e24      	ldr	r6, [pc, #144]	; (80103a8 <bldc_start+0xa8>)
 8010316:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80103c0 <bldc_start+0xc0>
		//Ch = USB_Uart_Getch();

		if( Ch == 'q' )
		{
			Ch = 0;
			qVelRef += 0.01;
 801031a:	eddf 8a24 	vldr	s17, [pc, #144]	; 80103ac <bldc_start+0xac>
			//debug_print_usb("Enter a : %f\r\n", qVelRef);
		}

		//debug_print_usb("8 %f 0\r\n", dbg_fTheta );
		//debug_print_usb("%d\r\n", dbg_AccumTheta );
		usb_uart_printf("500 %f %f 0\r\n", qVelRef*10000, dbg_fMea*10000 );
 801031e:	ed9f 8a24 	vldr	s16, [pc, #144]	; 80103b0 <bldc_start+0xb0>



	//-- 스레드 생성
	//
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 8010322:	f7fd fa05 	bl	800d730 <chThdCreateStatic>
	chThdCreateStatic(uart_thread_wa, sizeof(uart_thread_wa), NORMALPRIO, uart_process_thread, NULL);
 8010326:	9400      	str	r4, [sp, #0]
 8010328:	4822      	ldr	r0, [pc, #136]	; (80103b4 <bldc_start+0xb4>)
 801032a:	4b23      	ldr	r3, [pc, #140]	; (80103b8 <bldc_start+0xb8>)
 801032c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8010330:	2240      	movs	r2, #64	; 0x40
 8010332:	f7fd f9fd 	bl	800d730 <chThdCreateStatic>
		chThdSleepMilliseconds(1);
		//palClearPad(GPIOA, 7);

		//Ch = USB_Uart_Getch();

		if( Ch == 'q' )
 8010336:	46b9      	mov	r9, r7
 8010338:	e01f      	b.n	801037a <bldc_start+0x7a>
			Ch = 0;
			qVelRef += 0.01;
			//debug_print_usb("Enter q : %f\r\n", qVelRef);

		}
		if( Ch == 'a' )
 801033a:	2b61      	cmp	r3, #97	; 0x61
 801033c:	d106      	bne.n	801034c <bldc_start+0x4c>
		{
			Ch = 0;
			qVelRef -= 0.01;
 801033e:	ee77 7ae8 	vsub.f32	s15, s15, s17
			//debug_print_usb("Enter q : %f\r\n", qVelRef);

		}
		if( Ch == 'a' )
		{
			Ch = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	f889 3000 	strb.w	r3, [r9]
			qVelRef -= 0.01;
 8010348:	edc2 7a00 	vstr	s15, [r2]
			//debug_print_usb("Enter a : %f\r\n", qVelRef);
		}

		//debug_print_usb("8 %f 0\r\n", dbg_fTheta );
		//debug_print_usb("%d\r\n", dbg_AccumTheta );
		usb_uart_printf("500 %f %f 0\r\n", qVelRef*10000, dbg_fMea*10000 );
 801034c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010350:	ee17 0a90 	vmov	r0, s15
 8010354:	f7fc f858 	bl	800c408 <__aeabi_f2d>
 8010358:	edd8 7a00 	vldr	s15, [r8]
 801035c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010360:	4604      	mov	r4, r0
 8010362:	ee17 0a90 	vmov	r0, s15
 8010366:	460d      	mov	r5, r1
 8010368:	f7fc f84e 	bl	800c408 <__aeabi_f2d>
 801036c:	4622      	mov	r2, r4
 801036e:	e9cd 0100 	strd	r0, r1, [sp]
 8010372:	462b      	mov	r3, r5
 8010374:	4811      	ldr	r0, [pc, #68]	; (80103bc <bldc_start+0xbc>)
 8010376:	f000 ff0b 	bl	8011190 <usb_uart_printf>
	//-- IDLE
	//
	for(;;)
	{
		//palSetPad(GPIOA, 7);
		chThdSleepMilliseconds(1);
 801037a:	200a      	movs	r0, #10
 801037c:	f7fd fa18 	bl	800d7b0 <chThdSleep>
		//palClearPad(GPIOA, 7);

		//Ch = USB_Uart_Getch();

		if( Ch == 'q' )
 8010380:	783b      	ldrb	r3, [r7, #0]
 8010382:	4a09      	ldr	r2, [pc, #36]	; (80103a8 <bldc_start+0xa8>)
		{
			Ch = 0;
			qVelRef += 0.01;
 8010384:	edd6 7a00 	vldr	s15, [r6]
		chThdSleepMilliseconds(1);
		//palClearPad(GPIOA, 7);

		//Ch = USB_Uart_Getch();

		if( Ch == 'q' )
 8010388:	2b71      	cmp	r3, #113	; 0x71
 801038a:	d1d6      	bne.n	801033a <bldc_start+0x3a>
		{
			Ch = 0;
			qVelRef += 0.01;
 801038c:	ee77 7aa8 	vadd.f32	s15, s15, s17

		//Ch = USB_Uart_Getch();

		if( Ch == 'q' )
		{
			Ch = 0;
 8010390:	2300      	movs	r3, #0
			qVelRef += 0.01;
 8010392:	edc6 7a00 	vstr	s15, [r6]

		//Ch = USB_Uart_Getch();

		if( Ch == 'q' )
		{
			Ch = 0;
 8010396:	f889 3000 	strb.w	r3, [r9]
 801039a:	e7d7      	b.n	801034c <bldc_start+0x4c>
 801039c:	08010271 	.word	0x08010271
 80103a0:	20001910 	.word	0x20001910
 80103a4:	200016ec 	.word	0x200016ec
 80103a8:	20000808 	.word	0x20000808
 80103ac:	3c23d70a 	.word	0x3c23d70a
 80103b0:	461c4000 	.word	0x461c4000
 80103b4:	200016f8 	.word	0x200016f8
 80103b8:	08010291 	.word	0x08010291
 80103bc:	080173e0 	.word	0x080173e0
 80103c0:	200016f0 	.word	0x200016f0
	...

080103d0 <SEQUENCE_thread>:
unsigned int Drive_Status = 0;
unsigned int State_Index = 0;


static msg_t SEQUENCE_thread(void *arg) 
{
 80103d0:	b508      	push	{r3, lr}
 80103d2:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <SEQUENCE_thread+0x14>)
 80103d4:	4a04      	ldr	r2, [pc, #16]	; (80103e8 <SEQUENCE_thread+0x18>)
 80103d6:	699b      	ldr	r3, [r3, #24]
	//	asm("   nop");					//END_SEQ:


#endif //pbhp 151001

	chThdSleepMilliseconds(1);
 80103d8:	200a      	movs	r0, #10
 80103da:	619a      	str	r2, [r3, #24]
 80103dc:	f7fd f9e8 	bl	800d7b0 <chThdSleep>

	return 0;
}
 80103e0:	2000      	movs	r0, #0
 80103e2:	bd08      	pop	{r3, pc}
 80103e4:	20001090 	.word	0x20001090
 80103e8:	080173f0 	.word	0x080173f0
 80103ec:	00000000 	.word	0x00000000

080103f0 <mcpwm_adc_int_handler>:
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
	LED_GREEN_ON();
 80103f0:	4b04      	ldr	r3, [pc, #16]	; (8010404 <mcpwm_adc_int_handler+0x14>)
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 80103f2:	4905      	ldr	r1, [pc, #20]	; (8010408 <mcpwm_adc_int_handler+0x18>)
 80103f4:	2000      	movs	r0, #0
	LED_GREEN_ON();
 80103f6:	2240      	movs	r2, #64	; 0x40
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 80103f8:	6248      	str	r0, [r1, #36]	; 0x24
	LED_GREEN_ON();
 80103fa:	831a      	strh	r2, [r3, #24]
	LED_GREEN_OFF();


	// Reset the watchdog
	WWDG_SetCounter(100);
 80103fc:	2064      	movs	r0, #100	; 0x64
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
	LED_GREEN_ON();
	LED_GREEN_OFF();
 80103fe:	835a      	strh	r2, [r3, #26]


	// Reset the watchdog
	WWDG_SetCounter(100);
 8010400:	f002 b986 	b.w	8012710 <WWDG_SetCounter>
 8010404:	40020400 	.word	0x40020400
 8010408:	40001800 	.word	0x40001800
 801040c:	00000000 	.word	0x00000000

08010410 <ClarkePark>:

	return False;
}

void ClarkePark(void)
{
 8010410:	b510      	push	{r4, lr}
	ParkParm.qIalpha = ParkParm.qIa;
 8010412:	4c17      	ldr	r4, [pc, #92]	; (8010470 <ClarkePark+0x60>)
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010414:	eddf 7a17 	vldr	s15, [pc, #92]	; 8010474 <ClarkePark+0x64>

	return False;
}

void ClarkePark(void)
{
 8010418:	ed2d 8b04 	vpush	{d8-d9}
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 801041c:	ed94 8a04 	vldr	s16, [r4, #16]
	return False;
}

void ClarkePark(void)
{
	ParkParm.qIalpha = ParkParm.qIa;
 8010420:	edd4 8a03 	vldr	s17, [r4, #12]
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010424:	edd4 9a00 	vldr	s19, [r4]
	return False;
}

void ClarkePark(void)
{
	ParkParm.qIalpha = ParkParm.qIa;
 8010428:	edc4 8a05 	vstr	s17, [r4, #20]
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 801042c:	ee38 8a08 	vadd.f32	s16, s16, s16
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010430:	eeb0 0a69 	vmov.f32	s0, s19
}

void ClarkePark(void)
{
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010434:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010438:	eea8 8aa7 	vfma.f32	s16, s17, s15
 801043c:	ed84 8a06 	vstr	s16, [r4, #24]
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010440:	f002 f97e 	bl	8012740 <cosf>
 8010444:	eeb0 9a40 	vmov.f32	s18, s0
 8010448:	eeb0 0a69 	vmov.f32	s0, s19
 801044c:	f002 f9b8 	bl	80127c0 <sinf>
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010450:	ee68 7a09 	vmul.f32	s15, s16, s18
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010454:	ee28 8a00 	vmul.f32	s16, s16, s0
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010458:	eee8 7ac0 	vfms.f32	s15, s17, s0
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 801045c:	eea8 8a89 	vfma.f32	s16, s17, s18
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010460:	edc4 7a08 	vstr	s15, [r4, #32]
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010464:	ed84 8a07 	vstr	s16, [r4, #28]
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);

	return;
}
 8010468:	ecbd 8b04 	vpop	{d8-d9}
 801046c:	bd10      	pop	{r4, pc}
 801046e:	bf00      	nop
 8010470:	20002994 	.word	0x20002994
 8010474:	3f13cd3a 	.word	0x3f13cd3a
	...

08010480 <CalcPI>:

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 8010480:	ed90 7a06 	vldr	s14, [r0, #24]
 8010484:	ed90 6a07 	vldr	s12, [r0, #28]
	
	U  = pParm->qdSum + pParm->qKp * Err;
 8010488:	edd0 7a00 	vldr	s15, [r0]
 801048c:	edd0 5a01 	vldr	s11, [r0, #4]

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 8010490:	edd0 6a04 	vldr	s13, [r0, #16]

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 8010494:	ee37 6a46 	vsub.f32	s12, s14, s12
	
	U  = pParm->qdSum + pParm->qKp * Err;
 8010498:	eeb0 7a67 	vmov.f32	s14, s15
 801049c:	eea5 7a86 	vfma.f32	s14, s11, s12

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 80104a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	dc0b      	bgt.n	80104c2 <CalcPI+0x42>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 80104aa:	edd0 6a05 	vldr	s13, [r0, #20]
 80104ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80104b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b6:	d404      	bmi.n	80104c2 <CalcPI+0x42>
	else                  pParm->qOut = U ;
 80104b8:	eef0 6a47 	vmov.f32	s13, s14
 80104bc:	ed80 7a08 	vstr	s14, [r0, #32]
 80104c0:	e001      	b.n	80104c6 <CalcPI+0x46>
	Err  = pParm->qInRef - pParm->qInMeas;
	
	U  = pParm->qdSum + pParm->qKp * Err;

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 80104c2:	edc0 6a08 	vstr	s13, [r0, #32]
	else                  pParm->qOut = U ;

	Exc = U - pParm->qOut;

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 80104c6:	ed90 5a02 	vldr	s10, [r0, #8]
 80104ca:	edd0 5a03 	vldr	s11, [r0, #12]
 80104ce:	eee5 7a06 	vfma.f32	s15, s10, s12

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
	else                  pParm->qOut = U ;

	Exc = U - pParm->qOut;
 80104d2:	ee37 7a66 	vsub.f32	s14, s14, s13

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 80104d6:	eee5 7ac7 	vfms.f32	s15, s11, s14
 80104da:	edc0 7a00 	vstr	s15, [r0]
 80104de:	4770      	bx	lr

080104e0 <SetupControlParameters>:
	
	return;
}
void SetupControlParameters(void)
{
 80104e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 80104e4:	481a      	ldr	r0, [pc, #104]	; (8010550 <SetupControlParameters+0x70>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 80104e6:	4c1b      	ldr	r4, [pc, #108]	; (8010554 <SetupControlParameters+0x74>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 80104e8:	491b      	ldr	r1, [pc, #108]	; (8010558 <SetupControlParameters+0x78>)
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
 80104ea:	4a1c      	ldr	r2, [pc, #112]	; (801055c <SetupControlParameters+0x7c>)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 80104ec:	4d1c      	ldr	r5, [pc, #112]	; (8010560 <SetupControlParameters+0x80>)
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 80104ee:	4e1d      	ldr	r6, [pc, #116]	; (8010564 <SetupControlParameters+0x84>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 80104f0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 801056c <SetupControlParameters+0x8c>
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 80104f4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8010570 <SetupControlParameters+0x90>

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 80104f8:	f8df e078 	ldr.w	lr, [pc, #120]	; 8010574 <SetupControlParameters+0x94>
	PIParmW.qOutMin = -PIParmW.qOutMax;
 80104fc:	4f1a      	ldr	r7, [pc, #104]	; (8010568 <SetupControlParameters+0x88>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 80104fe:	f8c4 9004 	str.w	r9, [r4, #4]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010502:	2300      	movs	r3, #0
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010504:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8010508:	f8c0 9004 	str.w	r9, [r0, #4]
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 801050c:	60a6      	str	r6, [r4, #8]

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
 801050e:	6086      	str	r6, [r0, #8]
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 8010510:	60e5      	str	r5, [r4, #12]
	PIParmD.qOutMax = DOUTMAX;
 8010512:	6125      	str	r5, [r4, #16]
	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
 8010514:	60c5      	str	r5, [r0, #12]
	PIParmQ.qOutMax = QOUTMAX;
 8010516:	6105      	str	r5, [r0, #16]
	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 8010518:	f8c4 8014 	str.w	r8, [r4, #20]
	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
	PIParmQ.qOutMax = QOUTMAX;
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 801051c:	f8c0 8014 	str.w	r8, [r0, #20]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010520:	6023      	str	r3, [r4, #0]
	pParm->qOut=0;
 8010522:	6223      	str	r3, [r4, #32]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010524:	6003      	str	r3, [r0, #0]
	pParm->qOut=0;
 8010526:	6203      	str	r3, [r0, #32]

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
 8010528:	608e      	str	r6, [r1, #8]
	PIParmW.qKc = WKC;
 801052a:	60cd      	str	r5, [r1, #12]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 801052c:	600b      	str	r3, [r1, #0]
	pParm->qOut=0;
 801052e:	620b      	str	r3, [r1, #32]

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
	PIParmPLL.qKi = WKI;		 
 8010530:	6096      	str	r6, [r2, #8]
	PIParmPLL.qKc = WKC;		 
 8010532:	60d5      	str	r5, [r2, #12]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010534:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 8010536:	6213      	str	r3, [r2, #32]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010538:	f8c1 c004 	str.w	ip, [r1, #4]
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
 801053c:	f8c2 c004 	str.w	ip, [r2, #4]

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 8010540:	f8c1 e010 	str.w	lr, [r1, #16]

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
	PIParmPLL.qKi = WKI;		 
	PIParmPLL.qKc = WKC;		 
	PIParmPLL.qOutMax = WOUTMAX;	 
 8010544:	f8c2 e010 	str.w	lr, [r2, #16]
	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
	PIParmW.qOutMin = -PIParmW.qOutMax;
 8010548:	614f      	str	r7, [r1, #20]
	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
	PIParmPLL.qKi = WKI;		 
	PIParmPLL.qKc = WKC;		 
	PIParmPLL.qOutMax = WOUTMAX;	 
	PIParmPLL.qOutMin = -PIParmPLL.qOutMax;
 801054a:	6157      	str	r7, [r2, #20]
 801054c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010550:	200028b8 	.word	0x200028b8
 8010554:	20001ed0 	.word	0x20001ed0
 8010558:	20001ef8 	.word	0x20001ef8
 801055c:	200028f4 	.word	0x200028f4
 8010560:	3f7fff58 	.word	0x3f7fff58
 8010564:	3c23d70a 	.word	0x3c23d70a
 8010568:	bf733333 	.word	0xbf733333
 801056c:	3d4ccccd 	.word	0x3d4ccccd
 8010570:	bf7fff58 	.word	0xbf7fff58
 8010574:	3f733333 	.word	0x3f733333
	...

08010580 <mcpwm_init>:
static THD_WORKING_AREA(SEQUENCE_thread_wa, 2048);
static msg_t SEQUENCE_thread(void *arg);
//static WORKING_AREA(rpm_thread_wa, 1024);
//static msg_t rpm_thread(void *arg);

void mcpwm_init(mc_configuration *configuration) {
 8010580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010584:	b0a9      	sub	sp, #164	; 0xa4
	utils_sys_lock_cnt();
 8010586:	f000 fe7b 	bl	8011280 <utils_sys_lock_cnt>
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	fault_now = FAULT_CODE_NONE;
 801058a:	4bd9      	ldr	r3, [pc, #868]	; (80108f0 <mcpwm_init+0x370>)
	dccal_done = false;

	TIM_DeInit(TIM1);
 801058c:	4ed9      	ldr	r6, [pc, #868]	; (80108f4 <mcpwm_init+0x374>)
	TIM_DeInit(TIM8);
 801058e:	4fda      	ldr	r7, [pc, #872]	; (80108f8 <mcpwm_init+0x378>)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 8010590:	f8df b390 	ldr.w	fp, [pc, #912]	; 8010924 <mcpwm_init+0x3a4>
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	fault_now = FAULT_CODE_NONE;
 8010594:	2400      	movs	r4, #0
 8010596:	701c      	strb	r4, [r3, #0]
	dccal_done = false;
 8010598:	4bd8      	ldr	r3, [pc, #864]	; (80108fc <mcpwm_init+0x37c>)

	TIM_DeInit(TIM1);
 801059a:	4630      	mov	r0, r6
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	fault_now = FAULT_CODE_NONE;
	dccal_done = false;
 801059c:	701c      	strb	r4, [r3, #0]

	TIM_DeInit(TIM1);
 801059e:	f001 fd7f 	bl	80120a0 <TIM_DeInit>
	TIM_DeInit(TIM8);
 80105a2:	4638      	mov	r0, r7
 80105a4:	f001 fd7c 	bl	80120a0 <TIM_DeInit>
	TIM1->CNT = 0;
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80105a8:	2001      	movs	r0, #1
 80105aa:	4601      	mov	r1, r0
	fault_now = FAULT_CODE_NONE;
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
 80105ac:	6274      	str	r4, [r6, #36]	; 0x24
	TIM8->CNT = 0;
 80105ae:	627c      	str	r4, [r7, #36]	; 0x24
	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 80105b0:	2501      	movs	r5, #1
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80105b2:	f001 fd45 	bl	8012040 <RCC_APB2PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 80105b6:	f04f 0e20 	mov.w	lr, #32
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80105ba:	4630      	mov	r0, r6
 80105bc:	a903      	add	r1, sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80105be:	f8db 2000 	ldr.w	r2, [fp]
	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 80105c2:	f8ad e00e 	strh.w	lr, [sp, #14]

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80105c6:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80105ca:	f8ad 4014 	strh.w	r4, [sp, #20]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80105ce:	4bcc      	ldr	r3, [pc, #816]	; (8010900 <mcpwm_init+0x380>)
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 80105d0:	f88d 5016 	strb.w	r5, [sp, #22]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80105d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80105d8:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80105da:	f001 fe41 	bl	8012260 <TIM_TimeBaseInit>

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 80105de:	6af3      	ldr	r3, [r6, #44]	; 0x2c

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80105e0:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 80105e4:	40eb      	lsrs	r3, r5
 80105e6:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80105e8:	f04f 0360 	mov.w	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80105ec:	f44f 7880 	mov.w	r8, #256	; 0x100
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 80105f0:	f04f 0904 	mov.w	r9, #4
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 80105f4:	4630      	mov	r0, r6
 80105f6:	a90e      	add	r1, sp, #56	; 0x38
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80105f8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 80105fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010600:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8010604:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8010608:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 801060c:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8010610:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8010614:	f001 fe94 	bl	8012340 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 8010618:	4630      	mov	r0, r6
 801061a:	a90e      	add	r1, sp, #56	; 0x38
 801061c:	f001 fed0 	bl	80123c0 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 8010620:	4630      	mov	r0, r6
 8010622:	a90e      	add	r1, sp, #56	; 0x38
 8010624:	f001 ff1c 	bl	8012460 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8010628:	4630      	mov	r0, r6
 801062a:	a90e      	add	r1, sp, #56	; 0x38
 801062c:	f001 ff60 	bl	80124f0 <TIM_OC4Init>

	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010630:	4630      	mov	r0, r6
 8010632:	2108      	movs	r1, #8
 8010634:	f001 ff9c 	bl	8012570 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010638:	4630      	mov	r0, r6
 801063a:	2108      	movs	r1, #8
 801063c:	f001 ffa0 	bl	8012580 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010640:	4630      	mov	r0, r6
 8010642:	2108      	movs	r1, #8
 8010644:	f001 ffac 	bl	80125a0 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010648:	4630      	mov	r0, r6
 801064a:	2108      	movs	r1, #8
 801064c:	f001 ffb0 	bl	80125b0 <TIM_OC4PreloadConfig>

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 8010650:	2350      	movs	r3, #80	; 0x50
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8010652:	f44f 6a00 	mov.w	sl, #2048	; 0x800
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8010656:	4630      	mov	r0, r6
 8010658:	a906      	add	r1, sp, #24

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 801065a:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 801065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010662:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8010666:	f8ad a018 	strh.w	sl, [sp, #24]
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
 801066a:	f8ad a01a 	strh.w	sl, [sp, #26]
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 801066e:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 8010672:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8010676:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 801067a:	f001 ffa9 	bl	80125d0 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 801067e:	4630      	mov	r0, r6
 8010680:	4629      	mov	r1, r5
 8010682:	f001 ffcd 	bl	8012620 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8010686:	4630      	mov	r0, r6
 8010688:	4629      	mov	r1, r5
 801068a:	f001 fe39 	bl	8012300 <TIM_ARRPreloadConfig>
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;

	// Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 801068e:	4629      	mov	r1, r5
 8010690:	489c      	ldr	r0, [pc, #624]	; (8010904 <mcpwm_init+0x384>)
 8010692:	f001 fcb5 	bl	8012000 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 8010696:	4629      	mov	r1, r5
 8010698:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 801069c:	f001 fcd0 	bl	8012040 <RCC_APB2PeriphClockCmd>

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
 80106a0:	4623      	mov	r3, r4
 80106a2:	4a99      	ldr	r2, [pc, #612]	; (8010908 <mcpwm_init+0x388>)
 80106a4:	4899      	ldr	r0, [pc, #612]	; (801090c <mcpwm_init+0x38c>)
 80106a6:	2103      	movs	r1, #3
 80106a8:	f7fe fa5a 	bl	800eb60 <dmaStreamAllocate>
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80106ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 80106b0:	f8df c274 	ldr.w	ip, [pc, #628]	; 8010928 <mcpwm_init+0x3a8>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 80106b4:	f8df e274 	ldr.w	lr, [pc, #628]	; 801092c <mcpwm_init+0x3ac>
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80106b8:	4895      	ldr	r0, [pc, #596]	; (8010910 <mcpwm_init+0x390>)
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80106ba:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80106be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80106c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 80106c6:	f04f 0a0c 	mov.w	sl, #12
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80106ca:	9121      	str	r1, [sp, #132]	; 0x84
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80106cc:	a919      	add	r1, sp, #100	; 0x64

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 80106ce:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 80106d2:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80106d6:	9323      	str	r3, [sp, #140]	; 0x8c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80106d8:	921f      	str	r2, [sp, #124]	; 0x7c
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80106da:	9419      	str	r4, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80106dc:	941c      	str	r4, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80106de:	941e      	str	r4, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80106e0:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80106e4:	9424      	str	r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80106e6:	9425      	str	r4, [sp, #148]	; 0x94
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80106e8:	9426      	str	r4, [sp, #152]	; 0x98
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80106ea:	9427      	str	r4, [sp, #156]	; 0x9c
	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 80106ec:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80106f0:	f001 fb56 	bl	8011da0 <DMA_Init>

	// DMA2_Stream0 enable
	DMA_Cmd(DMA2_Stream4, ENABLE);
 80106f4:	4629      	mov	r1, r5
 80106f6:	4886      	ldr	r0, [pc, #536]	; (8010910 <mcpwm_init+0x390>)
 80106f8:	f001 fb8a 	bl	8011e10 <DMA_Cmd>

	// Enable transfer complete interrupt
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 80106fc:	2110      	movs	r1, #16
 80106fe:	462a      	mov	r2, r5
 8010700:	4883      	ldr	r0, [pc, #524]	; (8010910 <mcpwm_init+0x390>)
 8010702:	f001 fb95 	bl	8011e30 <DMA_ITConfig>

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8010706:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8010708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);
 801070c:	a80a      	add	r0, sp, #40	; 0x28
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 801070e:	920a      	str	r2, [sp, #40]	; 0x28
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8010710:	930c      	str	r3, [sp, #48]	; 0x30

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8010712:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8010714:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_CommonInit(&ADC_CommonInitStructure);
 8010716:	f001 fa53 	bl	8011bc0 <ADC_CommonInit>
	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 801071a:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 801071e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
 8010722:	a913      	add	r1, sp, #76	; 0x4c
 8010724:	487b      	ldr	r0, [pc, #492]	; (8010914 <mcpwm_init+0x394>)
	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 8010726:	9316      	str	r3, [sp, #88]	; 0x58

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8010728:	9215      	str	r2, [sp, #84]	; 0x54
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 801072a:	9413      	str	r4, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 801072c:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8010730:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8010734:	9417      	str	r4, [sp, #92]	; 0x5c
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 8010736:	f88d 9060 	strb.w	r9, [sp, #96]	; 0x60

	ADC_Init(ADC1, &ADC_InitStructure);
 801073a:	f001 fa19 	bl	8011b70 <ADC_Init>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_ExternalTrigConv = 0;
	ADC_Init(ADC2, &ADC_InitStructure);
 801073e:	a913      	add	r1, sp, #76	; 0x4c
 8010740:	4875      	ldr	r0, [pc, #468]	; (8010918 <mcpwm_init+0x398>)
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8010742:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_ExternalTrigConv = 0;
 8010744:	9416      	str	r4, [sp, #88]	; 0x58
	ADC_Init(ADC2, &ADC_InitStructure);
 8010746:	f001 fa13 	bl	8011b70 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 801074a:	a913      	add	r1, sp, #76	; 0x4c
 801074c:	4873      	ldr	r0, [pc, #460]	; (801091c <mcpwm_init+0x39c>)
 801074e:	f001 fa0f 	bl	8011b70 <ADC_Init>

	hw_setup_adc_channels();
 8010752:	f001 f975 	bl	8011a40 <hw_setup_adc_channels>

	// Enable DMA request after last transfer (Multi-ADC mode)
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 8010756:	4628      	mov	r0, r5
 8010758:	f001 faa2 	bl	8011ca0 <ADC_MultiModeDMARequestAfterLastTransferCmd>

	// Injected channels for current measurement at end of cycle
	ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_T8_CC2);
 801075c:	486d      	ldr	r0, [pc, #436]	; (8010914 <mcpwm_init+0x394>)
 801075e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8010762:	f001 fae5 	bl	8011d30 <ADC_ExternalTrigInjectedConvConfig>
	ADC_ExternalTrigInjectedConvConfig(ADC2, ADC_ExternalTrigInjecConv_T8_CC3);
 8010766:	486c      	ldr	r0, [pc, #432]	; (8010918 <mcpwm_init+0x398>)
 8010768:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 801076c:	f001 fae0 	bl	8011d30 <ADC_ExternalTrigInjectedConvConfig>
	ADC_ExternalTrigInjectedConvEdgeConfig(ADC1, ADC_ExternalTrigInjecConvEdge_Falling);
 8010770:	4868      	ldr	r0, [pc, #416]	; (8010914 <mcpwm_init+0x394>)
 8010772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010776:	f001 fae3 	bl	8011d40 <ADC_ExternalTrigInjectedConvEdgeConfig>
	ADC_ExternalTrigInjectedConvEdgeConfig(ADC2, ADC_ExternalTrigInjecConvEdge_Falling);
 801077a:	4867      	ldr	r0, [pc, #412]	; (8010918 <mcpwm_init+0x398>)
 801077c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010780:	f001 fade 	bl	8011d40 <ADC_ExternalTrigInjectedConvEdgeConfig>
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
 8010784:	4629      	mov	r1, r5
 8010786:	4863      	ldr	r0, [pc, #396]	; (8010914 <mcpwm_init+0x394>)
 8010788:	f001 faca 	bl	8011d20 <ADC_InjectedSequencerLengthConfig>
	ADC_InjectedSequencerLengthConfig(ADC2, 1);
 801078c:	4629      	mov	r1, r5
 801078e:	4862      	ldr	r0, [pc, #392]	; (8010918 <mcpwm_init+0x398>)
 8010790:	f001 fac6 	bl	8011d20 <ADC_InjectedSequencerLengthConfig>

	// Interrupt
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
 8010794:	f240 4107 	movw	r1, #1031	; 0x407
 8010798:	462a      	mov	r2, r5
 801079a:	485e      	ldr	r0, [pc, #376]	; (8010914 <mcpwm_init+0x394>)
 801079c:	f001 fae8 	bl	8011d70 <ADC_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 80107a0:	2303      	movs	r3, #3
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
	ADC_InjectedSequencerLengthConfig(ADC2, 1);

	// Interrupt
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
 80107a2:	2212      	movs	r2, #18
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80107a4:	a802      	add	r0, sp, #8
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
	ADC_InjectedSequencerLengthConfig(ADC2, 1);

	// Interrupt
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
 80107a6:	f88d 2008 	strb.w	r2, [sp, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 80107aa:	f88d 3009 	strb.w	r3, [sp, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 80107ae:	f88d 300a 	strb.w	r3, [sp, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80107b2:	f88d 500b 	strb.w	r5, [sp, #11]
	NVIC_Init(&NVIC_InitStructure);
 80107b6:	f001 f9a3 	bl	8011b00 <NVIC_Init>

	// Enable ADC1
	ADC_Cmd(ADC1, ENABLE);
 80107ba:	4629      	mov	r1, r5
 80107bc:	4855      	ldr	r0, [pc, #340]	; (8010914 <mcpwm_init+0x394>)
 80107be:	f001 fa17 	bl	8011bf0 <ADC_Cmd>

	// Enable ADC2
	ADC_Cmd(ADC2, ENABLE);
 80107c2:	4629      	mov	r1, r5
 80107c4:	4854      	ldr	r0, [pc, #336]	; (8010918 <mcpwm_init+0x398>)
 80107c6:	f001 fa13 	bl	8011bf0 <ADC_Cmd>

	// Enable ADC3
	ADC_Cmd(ADC3, ENABLE);
 80107ca:	4629      	mov	r1, r5
 80107cc:	4853      	ldr	r0, [pc, #332]	; (801091c <mcpwm_init+0x39c>)
 80107ce:	f001 fa0f 	bl	8011bf0 <ADC_Cmd>

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 80107d2:	4629      	mov	r1, r5
 80107d4:	2002      	movs	r0, #2
 80107d6:	f001 fc33 	bl	8012040 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 80107da:	4638      	mov	r0, r7
 80107dc:	eb0d 010a 	add.w	r1, sp, sl
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 80107e0:	f8db 2000 	ldr.w	r2, [fp]

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80107e4:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80107e8:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80107ec:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80107f0:	f88d 4016 	strb.w	r4, [sp, #22]
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 80107f4:	4b4a      	ldr	r3, [pc, #296]	; (8010920 <mcpwm_init+0x3a0>)
 80107f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80107fa:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 80107fc:	f001 fd30 	bl	8012260 <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010800:	f04f 0260 	mov.w	r2, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 8010804:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010806:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 801080a:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801080c:	f44f 7200 	mov.w	r2, #512	; 0x200
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010810:	a90e      	add	r1, sp, #56	; 0x38
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 8010812:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 8010816:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8010818:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 801081c:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8010820:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8010824:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010828:	f001 fd8a 	bl	8012340 <TIM_OC1Init>
 801082c:	4638      	mov	r0, r7
 801082e:	2108      	movs	r1, #8
 8010830:	f001 fe9e 	bl	8012570 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010834:	4638      	mov	r0, r7
 8010836:	a90e      	add	r1, sp, #56	; 0x38
 8010838:	f001 fdc2 	bl	80123c0 <TIM_OC2Init>
 801083c:	4638      	mov	r0, r7
 801083e:	2108      	movs	r1, #8
 8010840:	f001 fe9e 	bl	8012580 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010844:	4638      	mov	r0, r7
 8010846:	a90e      	add	r1, sp, #56	; 0x38
 8010848:	f001 fe0a 	bl	8012460 <TIM_OC3Init>
 801084c:	4638      	mov	r0, r7
 801084e:	2108      	movs	r1, #8
 8010850:	f001 fea6 	bl	80125a0 <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM8, ENABLE);
 8010854:	4638      	mov	r0, r7
 8010856:	4629      	mov	r1, r5
 8010858:	f001 fd52 	bl	8012300 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 801085c:	4638      	mov	r0, r7
 801085e:	4629      	mov	r1, r5
 8010860:	f001 fede 	bl	8012620 <TIM_CCPreloadControl>

	// PWM outputs have to be enabled in order to trigger ADC on CCx
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 8010864:	4638      	mov	r0, r7
 8010866:	4629      	mov	r1, r5
 8010868:	f001 feca 	bl	8012600 <TIM_CtrlPWMOutputs>

	// TIM1 Master and TIM8 slave
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 801086c:	4630      	mov	r0, r6
 801086e:	2120      	movs	r1, #32
 8010870:	f001 fef6 	bl	8012660 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 8010874:	4630      	mov	r0, r6
 8010876:	2180      	movs	r1, #128	; 0x80
 8010878:	f001 ff12 	bl	80126a0 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 801087c:	4638      	mov	r0, r7
 801087e:	4621      	mov	r1, r4
 8010880:	f001 fee6 	bl	8012650 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 8010884:	4638      	mov	r0, r7
 8010886:	4649      	mov	r1, r9
 8010888:	f001 fefa 	bl	8012680 <TIM_SelectSlaveMode>

	// Enable TIM8
	TIM_Cmd(TIM8, ENABLE);
 801088c:	4638      	mov	r0, r7
 801088e:	4629      	mov	r1, r5
 8010890:	f001 fd46 	bl	8012320 <TIM_Cmd>

	// Enable TIM1
	TIM_Cmd(TIM1, ENABLE);
 8010894:	4630      	mov	r0, r6
 8010896:	4629      	mov	r1, r5
 8010898:	f001 fd42 	bl	8012320 <TIM_Cmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 801089c:	4630      	mov	r0, r6
 801089e:	4629      	mov	r1, r5
 80108a0:	f001 feae 	bl	8012600 <TIM_CtrlPWMOutputs>

	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80108a4:	4628      	mov	r0, r5
 80108a6:	4629      	mov	r1, r5
 80108a8:	f001 fbba 	bl	8012020 <RCC_APB1PeriphClockCmd>
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80108ac:	f04f 32ff 	mov.w	r2, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80108b0:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80108b2:	eb0d 010a 	add.w	r1, sp, sl
 80108b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80108ba:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80108bc:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80108c0:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80108c4:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80108c8:	f001 fcca 	bl	8012260 <TIM_TimeBaseInit>

	// TIM2 enable counter
	TIM_Cmd(TIM2, ENABLE);
 80108cc:	4629      	mov	r1, r5
 80108ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80108d2:	f001 fd25 	bl	8012320 <TIM_Cmd>


	// ADC sampling locations
	//stop_pwm_hw();
	utils_sys_lock_cnt();
 80108d6:	f000 fcd3 	bl	8011280 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80108da:	6833      	ldr	r3, [r6, #0]
 80108dc:	f043 0302 	orr.w	r3, r3, #2
 80108e0:	6033      	str	r3, [r6, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80108e2:	683b      	ldr	r3, [r7, #0]

	TIM8->CCR1 = 500;//for vdc
 80108e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	//stop_pwm_hw();
	utils_sys_lock_cnt();

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
	TIM8->CR1 |= TIM_CR1_UDIS;
 80108e8:	f043 0302 	orr.w	r3, r3, #2
 80108ec:	603b      	str	r3, [r7, #0]
 80108ee:	e01f      	b.n	8010930 <mcpwm_init+0x3b0>
 80108f0:	20002a08 	.word	0x20002a08
 80108f4:	40010000 	.word	0x40010000
 80108f8:	40010400 	.word	0x40010400
 80108fc:	200028e8 	.word	0x200028e8
 8010900:	0501bd00 	.word	0x0501bd00
 8010904:	00400005 	.word	0x00400005
 8010908:	080103f1 	.word	0x080103f1
 801090c:	08017240 	.word	0x08017240
 8010910:	40026470 	.word	0x40026470
 8010914:	40012000 	.word	0x40012000
 8010918:	40012100 	.word	0x40012100
 801091c:	40012200 	.word	0x40012200
 8010920:	0a037a00 	.word	0x0a037a00
 8010924:	2000080c 	.word	0x2000080c
 8010928:	20001eac 	.word	0x20001eac
 801092c:	40012308 	.word	0x40012308

	TIM8->CCR1 = 500;//for vdc
 8010930:	637a      	str	r2, [r7, #52]	; 0x34
	TIM8->CCR2 = TIM1->ARR;//for Ib
 8010932:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010934:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM8->CCR3 = TIM1->ARR;//for Ia
 8010936:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010938:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 801093a:	6833      	ldr	r3, [r6, #0]
 801093c:	f023 0302 	bic.w	r3, r3, #2
 8010940:	6033      	str	r3, [r6, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	f023 0302 	bic.w	r3, r3, #2
 8010948:	603b      	str	r3, [r7, #0]

	utils_sys_unlock_cnt();
 801094a:	f000 fca9 	bl	80112a0 <utils_sys_unlock_cnt>


	// Calibrate current offset
	ENABLE_GATE();
 801094e:	4b32      	ldr	r3, [pc, #200]	; (8010a18 <mcpwm_init+0x498>)
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
static void do_dc_cal(void) {
	DCCAL_ON();
	while(IS_DRV_FAULT()){};
 8010950:	4a32      	ldr	r2, [pc, #200]	; (8010a1c <mcpwm_init+0x49c>)
	utils_sys_unlock_cnt();


	// Calibrate current offset
	ENABLE_GATE();
	DCCAL_OFF();
 8010952:	2180      	movs	r1, #128	; 0x80

	utils_sys_unlock_cnt();


	// Calibrate current offset
	ENABLE_GATE();
 8010954:	2040      	movs	r0, #64	; 0x40
 8010956:	8318      	strh	r0, [r3, #24]
	DCCAL_OFF();
 8010958:	8359      	strh	r1, [r3, #26]
	GAIN_FULLDN();
 801095a:	f8a3 801a 	strh.w	r8, [r3, #26]
static volatile int curr1_sum;
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
static void do_dc_cal(void) {
	DCCAL_ON();
 801095e:	8319      	strh	r1, [r3, #24]
	while(IS_DRV_FAULT()){};
 8010960:	6913      	ldr	r3, [r2, #16]
 8010962:	04db      	lsls	r3, r3, #19
 8010964:	d5fc      	bpl.n	8010960 <mcpwm_init+0x3e0>
	chThdSleepMilliseconds(1000);
 8010966:	f242 7010 	movw	r0, #10000	; 0x2710
 801096a:	f7fc ff21 	bl	800d7b0 <chThdSleep>
	curr0_sum = 0;
 801096e:	4c2c      	ldr	r4, [pc, #176]	; (8010a20 <mcpwm_init+0x4a0>)
	curr1_sum = 0;
 8010970:	482c      	ldr	r0, [pc, #176]	; (8010a24 <mcpwm_init+0x4a4>)
	curr_start_samples = 0;
 8010972:	492d      	ldr	r1, [pc, #180]	; (8010a28 <mcpwm_init+0x4a8>)
static volatile int curr1_offset;
static void do_dc_cal(void) {
	DCCAL_ON();
	while(IS_DRV_FAULT()){};
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
 8010974:	2300      	movs	r3, #0
 8010976:	6023      	str	r3, [r4, #0]
	curr1_sum = 0;
 8010978:	6003      	str	r3, [r0, #0]
	curr_start_samples = 0;
 801097a:	600b      	str	r3, [r1, #0]
	while(curr_start_samples < 4000) {};
 801097c:	680b      	ldr	r3, [r1, #0]
 801097e:	4a2a      	ldr	r2, [pc, #168]	; (8010a28 <mcpwm_init+0x4a8>)
 8010980:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8010984:	dbfa      	blt.n	801097c <mcpwm_init+0x3fc>
	curr0_offset = curr0_sum / curr_start_samples;
 8010986:	4929      	ldr	r1, [pc, #164]	; (8010a2c <mcpwm_init+0x4ac>)
	curr1_offset = curr1_sum / curr_start_samples;
 8010988:	4f29      	ldr	r7, [pc, #164]	; (8010a30 <mcpwm_init+0x4b0>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 801098a:	6823      	ldr	r3, [r4, #0]
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
 801098c:	4e22      	ldr	r6, [pc, #136]	; (8010a18 <mcpwm_init+0x498>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 801098e:	6814      	ldr	r4, [r2, #0]
 8010990:	fb93 f3f4 	sdiv	r3, r3, r4
 8010994:	600b      	str	r3, [r1, #0]
	curr1_offset = curr1_sum / curr_start_samples;
 8010996:	6803      	ldr	r3, [r0, #0]
 8010998:	6812      	ldr	r2, [r2, #0]
 801099a:	fb93 f3f2 	sdiv	r3, r3, r2
	DCCAL_OFF();
	dccal_done = true;
 801099e:	2501      	movs	r5, #1
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
 80109a0:	603b      	str	r3, [r7, #0]
	DCCAL_OFF();
 80109a2:	2480      	movs	r4, #128	; 0x80
	dccal_done = true;
 80109a4:	4b23      	ldr	r3, [pc, #140]	; (8010a34 <mcpwm_init+0x4b4>)
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
 80109a6:	8374      	strh	r4, [r6, #26]
	GAIN_FULLDN();
	do_dc_cal();


	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80109a8:	4629      	mov	r1, r5
 80109aa:	2040      	movs	r0, #64	; 0x40
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80109ac:	2400      	movs	r4, #0
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
	dccal_done = true;
 80109ae:	701d      	strb	r5, [r3, #0]
	GAIN_FULLDN();
	do_dc_cal();


	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80109b0:	f001 fb36 	bl	8012020 <RCC_APB1PeriphClockCmd>
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80109b4:	f04f 32ff 	mov.w	r2, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80109b8:	2307      	movs	r3, #7
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80109ba:	a903      	add	r1, sp, #12
 80109bc:	481e      	ldr	r0, [pc, #120]	; (8010a38 <mcpwm_init+0x4b8>)
	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80109be:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80109c0:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80109c4:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80109c8:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80109cc:	f001 fc48 	bl	8012260 <TIM_TimeBaseInit>

	// TIM3 enable counter
	TIM_Cmd(TIM12, ENABLE);
 80109d0:	4629      	mov	r1, r5
 80109d2:	4819      	ldr	r0, [pc, #100]	; (8010a38 <mcpwm_init+0x4b8>)
 80109d4:	f001 fca4 	bl	8012320 <TIM_Cmd>

	// Start threads
	chThdCreateStatic(SEQUENCE_thread_wa, sizeof(SEQUENCE_thread_wa), NORMALPRIO, SEQUENCE_thread, NULL);
 80109d8:	4b18      	ldr	r3, [pc, #96]	; (8010a3c <mcpwm_init+0x4bc>)
 80109da:	9400      	str	r4, [sp, #0]
 80109dc:	2240      	movs	r2, #64	; 0x40
 80109de:	f640 1198 	movw	r1, #2456	; 0x998
 80109e2:	4817      	ldr	r0, [pc, #92]	; (8010a40 <mcpwm_init+0x4c0>)
 80109e4:	f7fc fea4 	bl	800d730 <chThdCreateStatic>
	////chThdCreateStatic(rpm_thread_wa, sizeof(rpm_thread_wa), NORMALPRIO, rpm_thread, NULL);

	// WWDG configuration
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 80109e8:	4629      	mov	r1, r5
 80109ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80109ee:	f001 fb17 	bl	8012020 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 80109f2:	4620      	mov	r0, r4
 80109f4:	f001 fe64 	bl	80126c0 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 80109f8:	20ff      	movs	r0, #255	; 0xff
 80109fa:	f001 fe71 	bl	80126e0 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 80109fe:	2064      	movs	r0, #100	; 0x64
 8010a00:	f001 fe8e 	bl	8012720 <WWDG_Enable>


//---------------------------------------------------------------------------


	SetupControlParameters();
 8010a04:	f7ff fd6c 	bl	80104e0 <SetupControlParameters>


	uGF.Word = 0;                   // clear flags
 8010a08:	4b0e      	ldr	r3, [pc, #56]	; (8010a44 <mcpwm_init+0x4c4>)

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 8010a0a:	2202      	movs	r2, #2


	SetupControlParameters();


	uGF.Word = 0;                   // clear flags
 8010a0c:	801c      	strh	r4, [r3, #0]

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 8010a0e:	701a      	strb	r2, [r3, #0]

}
 8010a10:	b029      	add	sp, #164	; 0xa4
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	bf00      	nop
 8010a18:	40020800 	.word	0x40020800
 8010a1c:	40020400 	.word	0x40020400
 8010a20:	20002a00 	.word	0x20002a00
 8010a24:	20001ef4 	.word	0x20001ef4
 8010a28:	200028e0 	.word	0x200028e0
 8010a2c:	20001ea8 	.word	0x20001ea8
 8010a30:	200029fc 	.word	0x200029fc
 8010a34:	200028e8 	.word	0x200028e8
 8010a38:	40001800 	.word	0x40001800
 8010a3c:	080103d1 	.word	0x080103d1
 8010a40:	20001f20 	.word	0x20001f20
 8010a44:	200028dc 	.word	0x200028dc
	...

08010a50 <VoltRippleComp>:
	// CompVdq = ------------- * Vdq
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
 8010a50:	4a14      	ldr	r2, [pc, #80]	; (8010aa4 <VoltRippleComp+0x54>)
 8010a52:	4b15      	ldr	r3, [pc, #84]	; (8010aa8 <VoltRippleComp+0x58>)
 8010a54:	ed92 7a00 	vldr	s14, [r2]
 8010a58:	edd3 7a00 	vldr	s15, [r3]
 8010a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	dc11      	bgt.n	8010a8a <VoltRippleComp+0x3a>
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
	else if (DCbus > TargetDCbus)
 8010a66:	ed93 7a00 	vldr	s14, [r3]
 8010a6a:	edd2 7a00 	vldr	s15, [r2]
 8010a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a76:	dd07      	ble.n	8010a88 <VoltRippleComp+0x38>
		CompVdq = ((TargetDCbus/ DCbus)* Vdq);
 8010a78:	edd2 7a00 	vldr	s15, [r2]
 8010a7c:	ed93 7a00 	vldr	s14, [r3]
 8010a80:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8010a84:	ee20 0a27 	vmul.f32	s0, s0, s15
	else
		CompVdq = Vdq;

	return CompVdq;
}
 8010a88:	4770      	bx	lr
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
 8010a8a:	ed92 7a00 	vldr	s14, [r2]
 8010a8e:	edd3 7a00 	vldr	s15, [r3]
 8010a92:	edd3 6a00 	vldr	s13, [r3]
 8010a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a9a:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8010a9e:	eea7 0a80 	vfma.f32	s0, s15, s0
 8010aa2:	4770      	bx	lr
 8010aa4:	20002924 	.word	0x20002924
 8010aa8:	20002920 	.word	0x20002920
 8010aac:	00000000 	.word	0x00000000

08010ab0 <DoControl.part.1>:

		}
		else
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
 8010ab0:	4b37      	ldr	r3, [pc, #220]	; (8010b90 <DoControl.part.1+0xe0>)
 8010ab2:	881b      	ldrh	r3, [r3, #0]
	return;
}
//---------------------------------------------------------------------
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
 8010ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 8010ab8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8010bb8 <DoControl.part.1+0x108>

		}
		else
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d055      	beq.n	8010b6c <DoControl.part.1+0xbc>
 8010ac0:	4f34      	ldr	r7, [pc, #208]	; (8010b94 <DoControl.part.1+0xe4>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
			}

			if (uGF.bit.EnTorqueMod)
 8010ac2:	4d35      	ldr	r5, [pc, #212]	; (8010b98 <DoControl.part.1+0xe8>)
				CtrlParm.qVqRef = CtrlParm.qVelRef;

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
 8010ac4:	4c35      	ldr	r4, [pc, #212]	; (8010b9c <DoControl.part.1+0xec>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
			}

			if (uGF.bit.EnTorqueMod)
 8010ac6:	782b      	ldrb	r3, [r5, #0]
				CtrlParm.qVqRef = CtrlParm.qVelRef;

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
 8010ac8:	4e35      	ldr	r6, [pc, #212]	; (8010ba0 <DoControl.part.1+0xf0>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
			}

			if (uGF.bit.EnTorqueMod)
 8010aca:	0759      	lsls	r1, r3, #29
				CtrlParm.qVqRef = CtrlParm.qVelRef;
 8010acc:	bf44      	itt	mi
 8010ace:	683b      	ldrmi	r3, [r7, #0]
 8010ad0:	60bb      	strmi	r3, [r7, #8]

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
 8010ad2:	69f2      	ldr	r2, [r6, #28]
 8010ad4:	61e2      	str	r2, [r4, #28]
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
 8010ad6:	2300      	movs	r3, #0
			CalcPI(&PIParmD);
 8010ad8:	4620      	mov	r0, r4

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
 8010ada:	61a3      	str	r3, [r4, #24]
			CalcPI(&PIParmD);
 8010adc:	f7ff fcd0 	bl	8010480 <CalcPI>
	
			if(uGF.bit.EnVoltRipCo)
 8010ae0:	782b      	ldrb	r3, [r5, #0]
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 8010ae2:	ed94 0a08 	vldr	s0, [r4, #32]
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
			CalcPI(&PIParmD);
	
			if(uGF.bit.EnVoltRipCo)
 8010ae6:	071a      	lsls	r2, r3, #28
 8010ae8:	d43b      	bmi.n	8010b62 <DoControl.part.1+0xb2>
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;
 8010aea:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8010aee:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010af2:	4b2c      	ldr	r3, [pc, #176]	; (8010ba4 <DoControl.part.1+0xf4>)
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010af4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010ba8 <DoControl.part.1+0xf8>
			if(uGF.bit.EnVoltRipCo)
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8010af8:	ed83 0a00 	vstr	s0, [r3]
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010afc:	ed93 0a00 	vldr	s0, [r3]
 8010b00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b04:	eef1 7ac0 	vsqrt.f32	s15, s0
 8010b08:	eef4 7a67 	vcmp.f32	s15, s15
 8010b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b10:	d139      	bne.n	8010b86 <DoControl.part.1+0xd6>
 8010b12:	4c26      	ldr	r4, [pc, #152]	; (8010bac <DoControl.part.1+0xfc>)
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
 8010b14:	6a32      	ldr	r2, [r6, #32]
			PIParmQ.qInRef	= CtrlParm.qVqRef;
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	61a3      	str	r3, [r4, #24]
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
 8010b1a:	eeb1 7a67 	vneg.f32	s14, s15
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
			PIParmQ.qInRef	= CtrlParm.qVqRef;
			CalcPI(&PIParmQ);
 8010b1e:	4620      	mov	r0, r4
			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
 8010b20:	61e2      	str	r2, [r4, #28]
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010b22:	edc4 7a04 	vstr	s15, [r4, #16]
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
 8010b26:	ed84 7a05 	vstr	s14, [r4, #20]
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
			PIParmQ.qInRef	= CtrlParm.qVqRef;
			CalcPI(&PIParmQ);
 8010b2a:	f7ff fca9 	bl	8010480 <CalcPI>
	
			// If voltage ripple compensation flag is set, adjust the output
			// of the Q controller depending on measured DC Bus voltage
			if(uGF.bit.EnVoltRipCo)
 8010b2e:	782b      	ldrb	r3, [r5, #0]
			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
 8010b30:	4e1b      	ldr	r6, [pc, #108]	; (8010ba0 <DoControl.part.1+0xf0>)
			PIParmQ.qInRef	= CtrlParm.qVqRef;
			CalcPI(&PIParmQ);
	
			// If voltage ripple compensation flag is set, adjust the output
			// of the Q controller depending on measured DC Bus voltage
			if(uGF.bit.EnVoltRipCo)
 8010b32:	071b      	lsls	r3, r3, #28
 8010b34:	d40e      	bmi.n	8010b54 <DoControl.part.1+0xa4>
				ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
			else
				ParkParm.qVq = PIParmQ.qOut;
 8010b36:	6a23      	ldr	r3, [r4, #32]
 8010b38:	62b3      	str	r3, [r6, #40]	; 0x28
	
			// Limit, if motor is stalled, stop motor commutation
			if (smc1.OmegaFltred < 0)
 8010b3a:	edd8 7a18 	vldr	s15, [r8, #96]	; 0x60
 8010b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b46:	d503      	bpl.n	8010b50 <DoControl.part.1+0xa0>
			{
				uGF.bit.RunMotor = 0;
 8010b48:	782b      	ldrb	r3, [r5, #0]
 8010b4a:	f36f 0341 	bfc	r3, #1, #1
 8010b4e:	702b      	strb	r3, [r5, #0]
 8010b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			CalcPI(&PIParmQ);
	
			// If voltage ripple compensation flag is set, adjust the output
			// of the Q controller depending on measured DC Bus voltage
			if(uGF.bit.EnVoltRipCo)
				ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
 8010b54:	ed94 0a08 	vldr	s0, [r4, #32]
 8010b58:	f7ff ff7a 	bl	8010a50 <VoltRippleComp>
 8010b5c:	ed86 0a0a 	vstr	s0, [r6, #40]	; 0x28
 8010b60:	e7eb      	b.n	8010b3a <DoControl.part.1+0x8a>
			PIParmD.qInMeas = ParkParm.qId;
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
			CalcPI(&PIParmD);
	
			if(uGF.bit.EnVoltRipCo)
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 8010b62:	f7ff ff75 	bl	8010a50 <VoltRippleComp>
 8010b66:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
 8010b6a:	e7c0      	b.n	8010aee <DoControl.part.1+0x3e>
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 8010b6c:	4c10      	ldr	r4, [pc, #64]	; (8010bb0 <DoControl.part.1+0x100>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
 8010b6e:	4b11      	ldr	r3, [pc, #68]	; (8010bb4 <DoControl.part.1+0x104>)
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 8010b70:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
 8010b74:	4f07      	ldr	r7, [pc, #28]	; (8010b94 <DoControl.part.1+0xe4>)
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
 8010b76:	61a3      	str	r3, [r4, #24]
				CalcPI(&PIParmW);
 8010b78:	4620      	mov	r0, r4
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 8010b7a:	61e2      	str	r2, [r4, #28]
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
 8010b7c:	f7ff fc80 	bl	8010480 <CalcPI>
				CtrlParm.qVqRef = PIParmW.qOut;
 8010b80:	6a23      	ldr	r3, [r4, #32]
 8010b82:	60bb      	str	r3, [r7, #8]
 8010b84:	e79d      	b.n	8010ac2 <DoControl.part.1+0x12>
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010b86:	f001 fe5b 	bl	8012840 <sqrtf>
 8010b8a:	eef0 7a40 	vmov.f32	s15, s0
 8010b8e:	e7c0      	b.n	8010b12 <DoControl.part.1+0x62>
 8010b90:	20002928 	.word	0x20002928
 8010b94:	20001ec4 	.word	0x20001ec4
 8010b98:	200028dc 	.word	0x200028dc
 8010b9c:	20001ed0 	.word	0x20001ed0
 8010ba0:	20002994 	.word	0x20002994
 8010ba4:	2000291c 	.word	0x2000291c
 8010ba8:	3f670a3d 	.word	0x3f670a3d
 8010bac:	200028b8 	.word	0x200028b8
 8010bb0:	20001ef8 	.word	0x20001ef8
 8010bb4:	bc23d70a 	.word	0xbc23d70a
 8010bb8:	20002930 	.word	0x20002930
 8010bbc:	00000000 	.word	0x00000000

08010bc0 <InvPark>:
	MeasCurrParm.Offseta = Offset_a;
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
 8010bc0:	b510      	push	{r4, lr}
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010bc2:	4c11      	ldr	r4, [pc, #68]	; (8010c08 <InvPark+0x48>)
	MeasCurrParm.Offseta = Offset_a;
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
 8010bc4:	ed2d 8b04 	vpush	{d8-d9}
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010bc8:	ed94 9a00 	vldr	s18, [r4]
 8010bcc:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8010bd0:	eeb0 0a49 	vmov.f32	s0, s18
 8010bd4:	f001 fdb4 	bl	8012740 <cosf>
 8010bd8:	eef0 8a40 	vmov.f32	s17, s0
 8010bdc:	eeb0 0a49 	vmov.f32	s0, s18
 8010be0:	f001 fdee 	bl	80127c0 <sinf>
 8010be4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8010be8:	ee20 7a67 	vnmul.f32	s14, s0, s15
	ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010bec:	ee68 7aa7 	vmul.f32	s15, s17, s15
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010bf0:	eea8 7a28 	vfma.f32	s14, s16, s17
	ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010bf4:	eee8 7a00 	vfma.f32	s15, s16, s0
	return;
}
 8010bf8:	ecbd 8b04 	vpop	{d8-d9}
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010bfc:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
	ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010c00:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
	return;
}
 8010c04:	bd10      	pop	{r4, pc}
 8010c06:	bf00      	nop
 8010c08:	20002994 	.word	0x20002994
 8010c0c:	00000000 	.word	0x00000000

08010c10 <CalcTimes>:

     return;
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 8010c10:	4b18      	ldr	r3, [pc, #96]	; (8010c74 <CalcTimes+0x64>)
 8010c12:	4a19      	ldr	r2, [pc, #100]	; (8010c78 <CalcTimes+0x68>)
 8010c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010c16:	ed92 7a04 	vldr	s14, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010c1a:	edd2 6a05 	vldr	s13, [r2, #20]

     return;
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 8010c1e:	6013      	str	r3, [r2, #0]

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010c20:	ee07 3a90 	vmov	s15, r3
 8010c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010c28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010c30:	ee67 6aa6 	vmul.f32	s13, s15, s13
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010c38:	ed82 7a04 	vstr	s14, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010c3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010c40:	edc2 6a05 	vstr	s13, [r2, #20]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010c44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010c4c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010c50:	edc2 7a08 	vstr	s15, [r2, #32]
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010c54:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010c58:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 8010c5c:	eef8 7a47 	vcvt.f32.u32	s15, s14
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010c60:	ed82 7a07 	vstr	s14, [r2, #28]
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 8010c64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010c68:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8010c6c:	edc2 6a06 	vstr	s13, [r2, #24]
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	40010000 	.word	0x40010000
 8010c78:	200029d8 	.word	0x200029d8
 8010c7c:	00000000 	.word	0x00000000

08010c80 <update_timer_Duty>:

	return;
}  
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
 8010c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c84:	4616      	mov	r6, r2
 8010c86:	4680      	mov	r8, r0
 8010c88:	460f      	mov	r7, r1
	utils_sys_lock_cnt();
 8010c8a:	f000 faf9 	bl	8011280 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 8010c8e:	4b0d      	ldr	r3, [pc, #52]	; (8010cc4 <update_timer_Duty+0x44>)
	TIM8->CR1 |= TIM_CR1_UDIS;
 8010c90:	4c0d      	ldr	r4, [pc, #52]	; (8010cc8 <update_timer_Duty+0x48>)
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
	utils_sys_lock_cnt();

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 8010c92:	681d      	ldr	r5, [r3, #0]
 8010c94:	f045 0502 	orr.w	r5, r5, #2
 8010c98:	601d      	str	r5, [r3, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 8010c9a:	6825      	ldr	r5, [r4, #0]
 8010c9c:	f045 0502 	orr.w	r5, r5, #2
 8010ca0:	6025      	str	r5, [r4, #0]

	TIM1->CCR1 = duty_A;
 8010ca2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_B;
 8010ca6:	639f      	str	r7, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_C;
 8010ca8:	63de      	str	r6, [r3, #60]	; 0x3c
	//TIM8->CCR2 = duty_A;
	//TIM8->CCR3 = duty_C;


	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	f022 0202 	bic.w	r2, r2, #2
 8010cb0:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	f023 0302 	bic.w	r3, r3, #2
 8010cb8:	6023      	str	r3, [r4, #0]

	utils_sys_unlock_cnt();
}
 8010cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
	TIM8->CR1 &= ~TIM_CR1_UDIS;

	utils_sys_unlock_cnt();
 8010cbe:	f000 baef 	b.w	80112a0 <utils_sys_unlock_cnt>
 8010cc2:	bf00      	nop
 8010cc4:	40010000 	.word	0x40010000
 8010cc8:	40010400 	.word	0x40010400
 8010ccc:	00000000 	.word	0x00000000

08010cd0 <CalcSVGen>:
}
void CalcSVGen( void )
{ 
 8010cd0:	b510      	push	{r4, lr}
	if( SVGenParm.qVr1 >= 0 )
 8010cd2:	4c3f      	ldr	r4, [pc, #252]	; (8010dd0 <CalcSVGen+0x100>)
 8010cd4:	edd4 7a01 	vldr	s15, [r4, #4]
 8010cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	db27      	blt.n	8010d32 <CalcSVGen+0x62>
	{       
		// (xx1)
		if( SVGenParm.qVr2 >= 0 )
 8010ce2:	ed94 7a02 	vldr	s14, [r4, #8]
 8010ce6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cee:	da13      	bge.n	8010d18 <CalcSVGen+0x48>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
		}
		else
		{            
			// (x01)
			if( SVGenParm.qVr3 >= 0 )
 8010cf0:	edd4 6a03 	vldr	s13, [r4, #12]
 8010cf4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfc:	db45      	blt.n	8010d8a <CalcSVGen+0xba>
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
 8010cfe:	edc4 7a05 	vstr	s15, [r4, #20]
				SVGenParm.T1 = SVGenParm.qVr3;
 8010d02:	edc4 6a04 	vstr	s13, [r4, #16]
				CalcTimes();
 8010d06:	f7ff ff83 	bl	8010c10 <CalcTimes>
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 8010d0a:	6a20      	ldr	r0, [r4, #32]
 8010d0c:	69a1      	ldr	r1, [r4, #24]
 8010d0e:	69e2      	ldr	r2, [r4, #28]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
				SVGenParm.T1 = SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 8010d14:	f7ff bfb4 	b.w	8010c80 <update_timer_Duty>
		if( SVGenParm.qVr2 >= 0 )
		{
			// (x11)
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
 8010d18:	ed84 7a05 	vstr	s14, [r4, #20]
			SVGenParm.T1 = SVGenParm.qVr1;
 8010d1c:	edc4 7a04 	vstr	s15, [r4, #16]
			CalcTimes();
 8010d20:	f7ff ff76 	bl	8010c10 <CalcTimes>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8010d24:	f104 0018 	add.w	r0, r4, #24
 8010d28:	c807      	ldmia	r0, {r0, r1, r2}
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
			SVGenParm.T1 = SVGenParm.qVr1;
			CalcTimes();
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8010d2e:	f7ff bfa7 	b.w	8010c80 <update_timer_Duty>
		}
	}
	else
	{
		// (xx0)
		if( SVGenParm.qVr2 >= 0 )
 8010d32:	edd4 6a02 	vldr	s13, [r4, #8]
 8010d36:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3e:	db35      	blt.n	8010dac <CalcSVGen+0xdc>
		{
			// (x10)
			if( SVGenParm.qVr3 >= 0 )
 8010d40:	ed94 7a03 	vldr	s14, [r4, #12]
 8010d44:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4c:	db0c      	blt.n	8010d68 <CalcSVGen+0x98>
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
 8010d4e:	ed84 7a05 	vstr	s14, [r4, #20]
				SVGenParm.T1 = SVGenParm.qVr2;
 8010d52:	edc4 6a04 	vstr	s13, [r4, #16]
				CalcTimes();
 8010d56:	f7ff ff5b 	bl	8010c10 <CalcTimes>
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 8010d5a:	69e0      	ldr	r0, [r4, #28]
 8010d5c:	6a21      	ldr	r1, [r4, #32]
 8010d5e:	69a2      	ldr	r2, [r4, #24]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
				SVGenParm.T1 = SVGenParm.qVr2;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 8010d64:	f7ff bf8c 	b.w	8010c80 <update_timer_Duty>
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 8010d68:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr1;
 8010d6c:	eef1 7a67 	vneg.f32	s15, s15
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 8010d70:	ed84 7a05 	vstr	s14, [r4, #20]
				SVGenParm.T1 = -SVGenParm.qVr1;
 8010d74:	edc4 7a04 	vstr	s15, [r4, #16]
				CalcTimes();
 8010d78:	f7ff ff4a 	bl	8010c10 <CalcTimes>
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 8010d7c:	69a0      	ldr	r0, [r4, #24]
 8010d7e:	6a21      	ldr	r1, [r4, #32]
 8010d80:	69e2      	ldr	r2, [r4, #28]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
				SVGenParm.T1 = -SVGenParm.qVr1;
				CalcTimes();
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 8010d86:	f7ff bf7b 	b.w	8010c80 <update_timer_Duty>

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 8010d8a:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr3;
 8010d8e:	eef1 6a66 	vneg.f32	s13, s13

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 8010d92:	ed84 7a05 	vstr	s14, [r4, #20]
				SVGenParm.T1 = -SVGenParm.qVr3;
 8010d96:	edc4 6a04 	vstr	s13, [r4, #16]
				CalcTimes();
 8010d9a:	f7ff ff39 	bl	8010c10 <CalcTimes>
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 8010d9e:	69e0      	ldr	r0, [r4, #28]
 8010da0:	69a1      	ldr	r1, [r4, #24]
 8010da2:	6a22      	ldr	r2, [r4, #32]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
				SVGenParm.T1 = -SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 8010da8:	f7ff bf6a 	b.w	8010c80 <update_timer_Duty>
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 8010dac:	eef1 7a67 	vneg.f32	s15, s15
			SVGenParm.T1 = -SVGenParm.qVr2;
 8010db0:	eef1 6a66 	vneg.f32	s13, s13
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 8010db4:	edc4 7a05 	vstr	s15, [r4, #20]
			SVGenParm.T1 = -SVGenParm.qVr2;
 8010db8:	edc4 6a04 	vstr	s13, [r4, #16]
			CalcTimes();
 8010dbc:	f7ff ff28 	bl	8010c10 <CalcTimes>
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 8010dc0:	6a20      	ldr	r0, [r4, #32]
 8010dc2:	69e1      	ldr	r1, [r4, #28]
 8010dc4:	69a2      	ldr	r2, [r4, #24]
		}
	}

}
 8010dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
			SVGenParm.T1 = -SVGenParm.qVr2;
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 8010dca:	f7ff bf59 	b.w	8010c80 <update_timer_Duty>
 8010dce:	bf00      	nop
 8010dd0:	200029d8 	.word	0x200029d8
	...

08010de0 <SMC_HallSensor_Estimation>:
float sinth;



void SMC_HallSensor_Estimation (SMC *s)
{
 8010de0:	b570      	push	{r4, r5, r6, lr}


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010de2:	4b55      	ldr	r3, [pc, #340]	; (8010f38 <SMC_HallSensor_Estimation+0x158>)
 8010de4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8010f3c <SMC_HallSensor_Estimation+0x15c>
 8010de8:	889a      	ldrh	r2, [r3, #4]
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010dea:	885b      	ldrh	r3, [r3, #2]
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 8010dec:	4c54      	ldr	r4, [pc, #336]	; (8010f40 <SMC_HallSensor_Estimation+0x160>)
	sinth = sinf(Theta);

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
 8010dee:	4e55      	ldr	r6, [pc, #340]	; (8010f44 <SMC_HallSensor_Estimation+0x164>)
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 8010df0:	ed94 0a00 	vldr	s0, [r4]
float sinth;



void SMC_HallSensor_Estimation (SMC *s)
{
 8010df4:	ed2d 8b04 	vpush	{d8-d9}


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010df8:	ee07 3a90 	vmov	s15, r3

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010dfc:	ee08 2a10 	vmov	s16, r2
 8010e00:	eddf 8a51 	vldr	s17, [pc, #324]	; 8010f48 <SMC_HallSensor_Estimation+0x168>
 8010e04:	4a51      	ldr	r2, [pc, #324]	; (8010f4c <SMC_HallSensor_Estimation+0x16c>)
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010e06:	4b52      	ldr	r3, [pc, #328]	; (8010f50 <SMC_HallSensor_Estimation+0x170>)

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010e08:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010e10:	ee38 8a68 	vsub.f32	s16, s16, s17
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010e14:	ee77 7ae8 	vsub.f32	s15, s15, s17

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010e18:	ee88 8a07 	vdiv.f32	s16, s16, s14
float sinth;



void SMC_HallSensor_Estimation (SMC *s)
{
 8010e1c:	4605      	mov	r5, r0


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010e1e:	eec7 8a87 	vdiv.f32	s17, s15, s14

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010e22:	ed82 8a00 	vstr	s16, [r2]
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010e26:	edc3 8a00 	vstr	s17, [r3]
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 8010e2a:	f001 fc89 	bl	8012740 <cosf>
 8010e2e:	4b49      	ldr	r3, [pc, #292]	; (8010f54 <SMC_HallSensor_Estimation+0x174>)
 8010e30:	eeb0 9a40 	vmov.f32	s18, s0
	sinth = sinf(Theta);
 8010e34:	ed94 0a00 	vldr	s0, [r4]
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 8010e38:	ed83 9a00 	vstr	s18, [r3]
	sinth = sinf(Theta);
 8010e3c:	f001 fcc0 	bl	80127c0 <sinf>

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
 8010e40:	ee28 8a09 	vmul.f32	s16, s16, s18
	Hall_CosSin = HallPLLB * sinth;
 8010e44:	ee68 8a80 	vmul.f32	s17, s17, s0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010e48:	4a43      	ldr	r2, [pc, #268]	; (8010f58 <SMC_HallSensor_Estimation+0x178>)
 8010e4a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8010f5c <SMC_HallSensor_Estimation+0x17c>
 8010e4e:	edd2 7a00 	vldr	s15, [r2]
	sinth = sinf(Theta);

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
 8010e52:	ed86 8a00 	vstr	s16, [r6]
	//Digital_PI_controller(Hall_PIout, Hall_SinCos, Hall_CosSin, Hall_Err0, 10, 1, 1, Tsamp);

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
 8010e56:	ee38 8a68 	vsub.f32	s16, s16, s17
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010e5a:	4b41      	ldr	r3, [pc, #260]	; (8010f60 <SMC_HallSensor_Estimation+0x180>)

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
	Hall_CosSin = HallPLLB * sinth;
 8010e5c:	4841      	ldr	r0, [pc, #260]	; (8010f64 <SMC_HallSensor_Estimation+0x184>)

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010e5e:	edd3 6a00 	vldr	s13, [r3]

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
	sinth = sinf(Theta);
 8010e62:	4941      	ldr	r1, [pc, #260]	; (8010f68 <SMC_HallSensor_Estimation+0x188>)

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
	Hall_CosSin = HallPLLB * sinth;
 8010e64:	edc0 8a00 	vstr	s17, [r0]

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010e68:	eed8 7a06 	vfnms.f32	s15, s16, s12
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
 8010e6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010e70:	ee77 7aa6 	vadd.f32	s15, s15, s13

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
	sinth = sinf(Theta);
 8010e74:	ed81 0a00 	vstr	s0, [r1]

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010e78:	edc3 7a00 	vstr	s15, [r3]
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
 8010e7c:	edd3 7a00 	vldr	s15, [r3]
 8010e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e88:	dc0a      	bgt.n	8010ea0 <SMC_HallSensor_Estimation+0xc0>
 8010e8a:	edd3 7a00 	vldr	s15, [r3]
 8010e8e:	eeba 7a04 	vmov.f32	s14, #164	; 0xa4
 8010e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9a:	bf58      	it	pl
 8010e9c:	ed93 7a00 	vldrpl	s14, [r3]
 8010ea0:	ed83 7a00 	vstr	s14, [r3]
	Hall_Err0= err;									
 8010ea4:	ed82 8a00 	vstr	s16, [r2]
	
	Theta += Hall_PIout ;
 8010ea8:	edd3 7a00 	vldr	s15, [r3]
 8010eac:	edd4 6a00 	vldr	s13, [r4]
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
 8010eb0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8010f6c <SMC_HallSensor_Estimation+0x18c>
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
	Hall_Err0= err;									
	
	Theta += Hall_PIout ;
 8010eb4:	4a22      	ldr	r2, [pc, #136]	; (8010f40 <SMC_HallSensor_Estimation+0x160>)
 8010eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eba:	edc4 7a00 	vstr	s15, [r4]
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
 8010ebe:	edd4 7a00 	vldr	s15, [r4]
 8010ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eca:	edd2 7a00 	vldr	s15, [r2]
 8010ece:	dd1e      	ble.n	8010f0e <SMC_HallSensor_Estimation+0x12e>
 8010ed0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010ed4:	ed82 7a00 	vstr	s14, [r2]
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;
 8010ed8:	ed94 7a00 	vldr	s14, [r4]
 8010edc:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010f70 <SMC_HallSensor_Estimation+0x190>

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010ee0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8010f6c <SMC_HallSensor_Estimation+0x18c>
	
	Theta += Hall_PIout ;
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;
 8010ee4:	ee77 7a27 	vadd.f32	s15, s14, s15

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010ee8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef0:	dc19      	bgt.n	8010f26 <SMC_HallSensor_Estimation+0x146>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010ef2:	ecbd 8b04 	vpop	{d8-d9}
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 8010ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	bf48      	it	mi
 8010f00:	ee77 7aa6 	vaddmi.f32	s15, s15, s13

	s->Omega = Hall_PIout;
 8010f04:	681b      	ldr	r3, [r3, #0]
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 8010f06:	edc5 7a16 	vstr	s15, [r5, #88]	; 0x58

	s->Omega = Hall_PIout;
 8010f0a:	65eb      	str	r3, [r5, #92]	; 0x5c

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010f0c:	bd70      	pop	{r4, r5, r6, pc}
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
	Hall_Err0= err;									
	
	Theta += Hall_PIout ;
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;
 8010f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f16:	d5df      	bpl.n	8010ed8 <SMC_HallSensor_Estimation+0xf8>
 8010f18:	edd2 7a00 	vldr	s15, [r2]
 8010f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f20:	ed82 7a00 	vstr	s14, [r2]
 8010f24:	e7d8      	b.n	8010ed8 <SMC_HallSensor_Estimation+0xf8>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010f26:	ecbd 8b04 	vpop	{d8-d9}
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010f2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->Omega = Hall_PIout;
 8010f2e:	681b      	ldr	r3, [r3, #0]
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010f30:	edc5 7a16 	vstr	s15, [r5, #88]	; 0x58
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->Omega = Hall_PIout;
 8010f34:	65eb      	str	r3, [r5, #92]	; 0x5c

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010f36:	bd70      	pop	{r4, r5, r6, pc}
 8010f38:	20001eac 	.word	0x20001eac
 8010f3c:	457ff000 	.word	0x457ff000
 8010f40:	2000292c 	.word	0x2000292c
 8010f44:	200028f0 	.word	0x200028f0
 8010f48:	449b2000 	.word	0x449b2000
 8010f4c:	20002a0c 	.word	0x20002a0c
 8010f50:	20002a10 	.word	0x20002a10
 8010f54:	200029d4 	.word	0x200029d4
 8010f58:	200028ec 	.word	0x200028ec
 8010f5c:	3f80020c 	.word	0x3f80020c
 8010f60:	20002a04 	.word	0x20002a04
 8010f64:	200028e4 	.word	0x200028e4
 8010f68:	20002918 	.word	0x20002918
 8010f6c:	40c90fdb 	.word	0x40c90fdb
 8010f70:	3e99999a 	.word	0x3e99999a
	...

08010f80 <mcpwm_adc_inj_int_handler>:
{
    return(ITM_SendChar(ch));
}

void mcpwm_adc_inj_int_handler(void) 
{
 8010f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TIM12->CNT = 0;
 8010f84:	4b41      	ldr	r3, [pc, #260]	; (801108c <mcpwm_adc_inj_int_handler+0x10c>)

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8010f86:	4842      	ldr	r0, [pc, #264]	; (8011090 <mcpwm_adc_inj_int_handler+0x110>)
		debug_print_usb( " Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test 12345 \r\n");
	}
	*/
	//debug_print_usb( "iT ");
	
	SMC_HallSensor_Estimation (&smc1);
 8010f88:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80110bc <mcpwm_adc_inj_int_handler+0x13c>

	//spi_dac_write_A( dacDataA++);
	//spi_dac_write_B( dacDataB--);

	
	if( uGF.bit.RunMotor )
 8010f8c:	4e41      	ldr	r6, [pc, #260]	; (8011094 <mcpwm_adc_inj_int_handler+0x114>)
    return(ITM_SendChar(ch));
}

void mcpwm_adc_inj_int_handler(void) 
{
	TIM12->CNT = 0;
 8010f8e:	2700      	movs	r7, #0
 8010f90:	625f      	str	r7, [r3, #36]	; 0x24

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8010f92:	2114      	movs	r1, #20
 8010f94:	f000 fedc 	bl	8011d50 <ADC_GetInjectedConversionValue>
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8010f98:	2114      	movs	r1, #20

void mcpwm_adc_inj_int_handler(void) 
{
	TIM12->CNT = 0;

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8010f9a:	4605      	mov	r5, r0
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8010f9c:	483e      	ldr	r0, [pc, #248]	; (8011098 <mcpwm_adc_inj_int_handler+0x118>)
 8010f9e:	f000 fed7 	bl	8011d50 <ADC_GetInjectedConversionValue>
 8010fa2:	4604      	mov	r4, r0

	curr0_sum += curr0;
 8010fa4:	483d      	ldr	r0, [pc, #244]	; (801109c <mcpwm_adc_inj_int_handler+0x11c>)
	curr1_sum += curr1;
 8010fa6:	493e      	ldr	r1, [pc, #248]	; (80110a0 <mcpwm_adc_inj_int_handler+0x120>)
	TIM12->CNT = 0;

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);

	curr0_sum += curr0;
 8010fa8:	6803      	ldr	r3, [r0, #0]
	curr1_sum += curr1;
	curr_start_samples++;
 8010faa:	4a3e      	ldr	r2, [pc, #248]	; (80110a4 <mcpwm_adc_inj_int_handler+0x124>)
	TIM12->CNT = 0;

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);

	curr0_sum += curr0;
 8010fac:	442b      	add	r3, r5
 8010fae:	6003      	str	r3, [r0, #0]
	curr1_sum += curr1;
 8010fb0:	680b      	ldr	r3, [r1, #0]
 8010fb2:	4423      	add	r3, r4
 8010fb4:	600b      	str	r3, [r1, #0]
	curr_start_samples++;
 8010fb6:	6813      	ldr	r3, [r2, #0]
		debug_print_usb( " Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test 12345 \r\n");
	}
	*/
	//debug_print_usb( "iT ");
	
	SMC_HallSensor_Estimation (&smc1);
 8010fb8:	4640      	mov	r0, r8
	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);

	curr0_sum += curr0;
	curr1_sum += curr1;
	curr_start_samples++;
 8010fba:	3301      	adds	r3, #1
 8010fbc:	6013      	str	r3, [r2, #0]
		debug_print_usb( " Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test 12345 \r\n");
	}
	*/
	//debug_print_usb( "iT ");
	
	SMC_HallSensor_Estimation (&smc1);
 8010fbe:	f7ff ff0f 	bl	8010de0 <SMC_HallSensor_Estimation>

	//spi_dac_write_A( dacDataA++);
	//spi_dac_write_B( dacDataB--);

	
	if( uGF.bit.RunMotor )
 8010fc2:	7833      	ldrb	r3, [r6, #0]
 8010fc4:	079a      	lsls	r2, r3, #30
 8010fc6:	d55b      	bpl.n	8011080 <mcpwm_adc_inj_int_handler+0x100>
	{
	ENABLE_GATE();
 8010fc8:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80110c0 <mcpwm_adc_inj_int_handler+0x140>
		LED_RED_ON();
 8010fcc:	4b36      	ldr	r3, [pc, #216]	; (80110a8 <mcpwm_adc_inj_int_handler+0x128>)
}
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
 8010fce:	4a37      	ldr	r2, [pc, #220]	; (80110ac <mcpwm_adc_inj_int_handler+0x12c>)

		//debug_print_usb( "%f,%d,%d\r\n",ParkParm.qAngle ,curr0,curr1);
		

		// Calculate commutation angle using estimator
		ParkParm.qAngle = smc1.Theta;
 8010fd0:	f8d8 c058 	ldr.w	ip, [r8, #88]	; 0x58

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8010fd4:	4936      	ldr	r1, [pc, #216]	; (80110b0 <mcpwm_adc_inj_int_handler+0x130>)

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010fd6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80110c4 <mcpwm_adc_inj_int_handler+0x144>

	
	if( uGF.bit.RunMotor )
	{
	ENABLE_GATE();
		LED_RED_ON();
 8010fda:	2080      	movs	r0, #128	; 0x80
	//spi_dac_write_B( dacDataB--);

	
	if( uGF.bit.RunMotor )
	{
	ENABLE_GATE();
 8010fdc:	f04f 0940 	mov.w	r9, #64	; 0x40
 8010fe0:	f8ae 9018 	strh.w	r9, [lr, #24]
		LED_RED_ON();
 8010fe4:	8318      	strh	r0, [r3, #24]
}
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
 8010fe6:	f8b2 e004 	ldrh.w	lr, [r2, #4]
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
 8010fea:	8990      	ldrh	r0, [r2, #12]
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010fec:	ed92 6a00 	vldr	s12, [r2]
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 8010ff0:	edd2 6a02 	vldr	s13, [r2, #8]
		ParkParm.qAngle = smc1.Theta;

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8010ff4:	880b      	ldrh	r3, [r1, #0]

		//debug_print_usb( "%f,%d,%d\r\n",ParkParm.qAngle ,curr0,curr1);
		

		// Calculate commutation angle using estimator
		ParkParm.qAngle = smc1.Theta;
 8010ff6:	f8c8 c000 	str.w	ip, [r8]
}
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
 8010ffa:	fa0f fe8e 	sxth.w	lr, lr
 8010ffe:	ebce 0505 	rsb	r5, lr, r5
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
 8011002:	b202      	sxth	r2, r0
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8011004:	ee07 5a90 	vmov	s15, r5
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
 8011008:	1aa4      	subs	r4, r4, r2
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 801100a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 801100e:	ee07 4a90 	vmov	s15, r4
 8011012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ParkParm.qAngle = smc1.Theta;

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8011016:	3301      	adds	r3, #1
 8011018:	b29b      	uxth	r3, r3

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 801101a:	ee26 7a07 	vmul.f32	s14, s12, s14
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 801101e:	ee66 7aa7 	vmul.f32	s15, s13, s15

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
		if (AccumThetaCnt == IRP_PERCALC)
 8011022:	2b10      	cmp	r3, #16
		ParkParm.qAngle = smc1.Theta;

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8011024:	bf14      	ite	ne
 8011026:	800b      	strhne	r3, [r1, #0]
		if (AccumThetaCnt == IRP_PERCALC)
		{
			AccumThetaCnt = 0;
 8011028:	800f      	strheq	r7, [r1, #0]

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 801102a:	ed88 7a03 	vstr	s14, [r8, #12]
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 801102e:	edc8 7a04 	vstr	s15, [r8, #16]
			AccumThetaCnt = 0;
		}


		// Calculate qId,qIq from qSin,qCos,qIa,qIb
		ClarkePark();
 8011032:	f7ff f9ed 	bl	8010410 <ClarkePark>
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
	{

		if( uGF.bit.OpenLoop )
 8011036:	7833      	ldrb	r3, [r6, #0]
 8011038:	07db      	lsls	r3, r3, #31
 801103a:	d523      	bpl.n	8011084 <mcpwm_adc_inj_int_handler+0x104>
		//ParkParm.qAngle += 0.002f;
		//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;


		// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
		InvPark();
 801103c:	f7ff fdc0 	bl	8010bc0 <InvPark>
{
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
 8011040:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8011044:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 8011048:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80110b4 <mcpwm_adc_inj_int_handler+0x134>
{
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
 801104c:	4b1a      	ldr	r3, [pc, #104]	; (80110b8 <mcpwm_adc_inj_int_handler+0x138>)
 801104e:	eef1 7a66 	vneg.f32	s15, s13
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8011052:	eeb0 7a67 	vmov.f32	s14, s15
 8011056:	eea5 7a86 	vfma.f32	s14, s11, s12
    SVGenParm.qVr3 = (-ParkParm.qVbeta  - SQRT3 * ParkParm.qValpha)/2;
 801105a:	eee5 7ac6 	vfms.f32	s15, s11, s12
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 801105e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8011062:	ee27 7a06 	vmul.f32	s14, s14, s12
    SVGenParm.qVr3 = (-ParkParm.qVbeta  - SQRT3 * ParkParm.qValpha)/2;
 8011066:	ee67 7a86 	vmul.f32	s15, s15, s12
{
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
 801106a:	edc3 6a01 	vstr	s13, [r3, #4]
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 801106e:	ed83 7a02 	vstr	s14, [r3, #8]
    SVGenParm.qVr3 = (-ParkParm.qVbeta  - SQRT3 * ParkParm.qValpha)/2;
 8011072:	edc3 7a03 	vstr	s15, [r3, #12]

		// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
		CalcRefVec();

		// Calculate and set PWM duty cycles from Vr1,Vr2,Vr3
		CalcSVGen();
 8011076:	f7ff fe2b 	bl	8010cd0 <CalcSVGen>

		LED_RED_OFF();
 801107a:	4b0b      	ldr	r3, [pc, #44]	; (80110a8 <mcpwm_adc_inj_int_handler+0x128>)
 801107c:	2280      	movs	r2, #128	; 0x80
 801107e:	835a      	strh	r2, [r3, #26]
 8011080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011084:	f7ff fd14 	bl	8010ab0 <DoControl.part.1>
 8011088:	e7d8      	b.n	801103c <mcpwm_adc_inj_int_handler+0xbc>
 801108a:	bf00      	nop
 801108c:	40001800 	.word	0x40001800
 8011090:	40012000 	.word	0x40012000
 8011094:	200028dc 	.word	0x200028dc
 8011098:	40012100 	.word	0x40012100
 801109c:	20002a00 	.word	0x20002a00
 80110a0:	20001ef4 	.word	0x20001ef4
 80110a4:	200028e0 	.word	0x200028e0
 80110a8:	40020400 	.word	0x40020400
 80110ac:	20002a14 	.word	0x20002a14
 80110b0:	20002928 	.word	0x20002928
 80110b4:	3fddb3d7 	.word	0x3fddb3d7
 80110b8:	200029d8 	.word	0x200029d8
 80110bc:	20002930 	.word	0x20002930
 80110c0:	40020800 	.word	0x40020800
 80110c4:	20002994 	.word	0x20002994
	...

080110d0 <get_descriptor>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 80110d0:	2902      	cmp	r1, #2
 80110d2:	d006      	beq.n	80110e2 <get_descriptor+0x12>
 80110d4:	2903      	cmp	r1, #3
 80110d6:	d006      	beq.n	80110e6 <get_descriptor+0x16>
 80110d8:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 80110da:	4806      	ldr	r0, [pc, #24]	; (80110f4 <get_descriptor+0x24>)
 80110dc:	bf18      	it	ne
 80110de:	2000      	movne	r0, #0
 80110e0:	4770      	bx	lr
	(void)lang;
	switch (dtype) {
	case USB_DESCRIPTOR_DEVICE:
		return &vcom_device_descriptor;
	case USB_DESCRIPTOR_CONFIGURATION:
		return &vcom_configuration_descriptor;
 80110e2:	4805      	ldr	r0, [pc, #20]	; (80110f8 <get_descriptor+0x28>)
 80110e4:	4770      	bx	lr
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
 80110e6:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 80110e8:	bf9a      	itte	ls
 80110ea:	4b04      	ldrls	r3, [pc, #16]	; (80110fc <get_descriptor+0x2c>)
 80110ec:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
	}
	return NULL;
 80110f0:	2000      	movhi	r0, #0
}
 80110f2:	4770      	bx	lr
 80110f4:	080175b0 	.word	0x080175b0
 80110f8:	08017430 	.word	0x08017430
 80110fc:	08017580 	.word	0x08017580

08011100 <usb_event>:
/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {

	switch (event) {
 8011100:	2902      	cmp	r1, #2
 8011102:	d115      	bne.n	8011130 <usb_event+0x30>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	4605      	mov	r5, r0
 8011108:	460c      	mov	r4, r1
 801110a:	2320      	movs	r3, #32
 801110c:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD2_DATA_REQUEST_EP, &ep1config);
 8011110:	2101      	movs	r1, #1
 8011112:	4a08      	ldr	r2, [pc, #32]	; (8011134 <usb_event+0x34>)
 8011114:	f7fd f874 	bl	800e200 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD2_INTERRUPT_REQUEST_EP, &ep2config);
 8011118:	4628      	mov	r0, r5
 801111a:	4621      	mov	r1, r4
 801111c:	4a06      	ldr	r2, [pc, #24]	; (8011138 <usb_event+0x38>)
 801111e:	f7fd f86f 	bl	800e200 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 8011122:	4806      	ldr	r0, [pc, #24]	; (801113c <usb_event+0x3c>)
 8011124:	f7fc ff64 	bl	800dff0 <sduConfigureHookI>
 8011128:	2300      	movs	r3, #0
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	08017400 	.word	0x08017400
 8011138:	08017440 	.word	0x08017440
 801113c:	20002b38 	.word	0x20002b38

08011140 <usb_uart_init>:
		USBD2_INTERRUPT_REQUEST_EP
};


void usb_uart_init(void)
{
 8011140:	b538      	push	{r3, r4, r5, lr}
	sduObjectInit(&SDU1);
 8011142:	4d0e      	ldr	r5, [pc, #56]	; (801117c <usb_uart_init+0x3c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8011144:	4c0e      	ldr	r4, [pc, #56]	; (8011180 <usb_uart_init+0x40>)
};


void usb_uart_init(void)
{
	sduObjectInit(&SDU1);
 8011146:	4628      	mov	r0, r5
 8011148:	f7fc ff0a 	bl	800df60 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 801114c:	490d      	ldr	r1, [pc, #52]	; (8011184 <usb_uart_init+0x44>)
 801114e:	4628      	mov	r0, r5
 8011150:	f7fc ff2e 	bl	800dfb0 <sduStart>
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8011154:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011156:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011158:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801115c:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 801115e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8011162:	f7fc fb25 	bl	800d7b0 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 8011166:	4620      	mov	r0, r4
 8011168:	4907      	ldr	r1, [pc, #28]	; (8011188 <usb_uart_init+0x48>)
 801116a:	f7fd f831 	bl	800e1d0 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 801116e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011170:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011176:	6393      	str	r3, [r2, #56]	; 0x38
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	bf00      	nop
 801117c:	20002b38 	.word	0x20002b38
 8011180:	20001400 	.word	0x20001400
 8011184:	080175a0 	.word	0x080175a0
 8011188:	08017470 	.word	0x08017470
 801118c:	00000000 	.word	0x00000000

08011190 <usb_uart_printf>:
	return SDU1.config->usbp->state == USB_ACTIVE;
}


int usb_uart_printf( const char *fmt, ...)
{
 8011190:	b40f      	push	{r0, r1, r2, r3}
 8011192:	b530      	push	{r4, r5, lr}
 8011194:	b083      	sub	sp, #12
 8011196:	ab06      	add	r3, sp, #24
	va_list arg;
	va_start (arg, fmt);
	int len;
	static char print_buffer[255];

	len = vsnprintf(print_buffer, 255, fmt, arg);
 8011198:	4c09      	ldr	r4, [pc, #36]	; (80111c0 <usb_uart_printf+0x30>)
	return SDU1.config->usbp->state == USB_ACTIVE;
}


int usb_uart_printf( const char *fmt, ...)
{
 801119a:	f853 2b04 	ldr.w	r2, [r3], #4
	int ret = 0;
	va_list arg;
	va_start (arg, fmt);
 801119e:	9301      	str	r3, [sp, #4]
	int len;
	static char print_buffer[255];

	len = vsnprintf(print_buffer, 255, fmt, arg);
 80111a0:	4620      	mov	r0, r4
 80111a2:	21ff      	movs	r1, #255	; 0xff
 80111a4:	f002 fa9c 	bl	80136e0 <vsnprintf>
 80111a8:	4602      	mov	r2, r0
	va_end (arg);

	ret = chSequentialStreamWrite(&SDU1, print_buffer, len);
 80111aa:	4806      	ldr	r0, [pc, #24]	; (80111c4 <usb_uart_printf+0x34>)
 80111ac:	6805      	ldr	r5, [r0, #0]
 80111ae:	4621      	mov	r1, r4
 80111b0:	682c      	ldr	r4, [r5, #0]
 80111b2:	47a0      	blx	r4

	return ret;
}
 80111b4:	b003      	add	sp, #12
 80111b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111ba:	b004      	add	sp, #16
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop
 80111c0:	20002a24 	.word	0x20002a24
 80111c4:	20002b38 	.word	0x20002b38
	...

080111d0 <usb_uart_getch>:


uint8_t usb_uart_getch( void )
{
 80111d0:	b500      	push	{lr}
	uint8_t buffer[128];
	int len;


	len = chSequentialStreamRead(&SDU1, (uint8_t*) buffer, 1);
 80111d2:	4806      	ldr	r0, [pc, #24]	; (80111ec <usb_uart_getch+0x1c>)
 80111d4:	6803      	ldr	r3, [r0, #0]
	return ret;
}


uint8_t usb_uart_getch( void )
{
 80111d6:	b0a1      	sub	sp, #132	; 0x84
	uint8_t buffer[128];
	int len;


	len = chSequentialStreamRead(&SDU1, (uint8_t*) buffer, 1);
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	4669      	mov	r1, sp
 80111dc:	2201      	movs	r2, #1
 80111de:	4798      	blx	r3

	return buffer[0];
}
 80111e0:	f89d 0000 	ldrb.w	r0, [sp]
 80111e4:	b021      	add	sp, #132	; 0x84
 80111e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80111ea:	bf00      	nop
 80111ec:	20002b38 	.word	0x20002b38

080111f0 <Vector11C>:
#include "isr_vector_table.h"
#include "main.h"
#include "mcpwm.h"
#include "hw.h"

CH_IRQ_HANDLER(TIM7_IRQHandler) {
 80111f0:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80111f2:	4804      	ldr	r0, [pc, #16]	; (8011204 <Vector11C+0x14>)
 80111f4:	2101      	movs	r1, #1
 80111f6:	f001 fa23 	bl	8012640 <TIM_ClearITPendingBit>

	CH_IRQ_EPILOGUE();
}
 80111fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(TIM7_IRQHandler) {
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);

	CH_IRQ_EPILOGUE();
 80111fe:	f7fc bd5f 	b.w	800dcc0 <_port_irq_epilogue>
 8011202:	bf00      	nop
 8011204:	40001400 	.word	0x40001400
	...

08011210 <Vector88>:
}

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
 8011210:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
 8011212:	4805      	ldr	r0, [pc, #20]	; (8011228 <Vector88+0x18>)
 8011214:	f240 4107 	movw	r1, #1031	; 0x407
 8011218:	f000 fdba 	bl	8011d90 <ADC_ClearITPendingBit>
	mcpwm_adc_inj_int_handler();
 801121c:	f7ff feb0 	bl	8010f80 <mcpwm_adc_inj_int_handler>
	CH_IRQ_EPILOGUE();
}
 8011220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
	mcpwm_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
 8011224:	f7fc bd4c 	b.w	800dcc0 <_port_irq_epilogue>
 8011228:	40012000 	.word	0x40012000
 801122c:	00000000 	.word	0x00000000

08011230 <VectorE0>:
}

CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8011230:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8011232:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011236:	f000 fe1b 	bl	8011e70 <EXTI_GetITStatus>
 801123a:	b900      	cbnz	r0, 801123e <VectorE0+0xe>
 801123c:	bd08      	pop	{r3, pc}
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;
 801123e:	4b04      	ldr	r3, [pc, #16]	; (8011250 <VectorE0+0x20>)
 8011240:	2200      	movs	r2, #0
 8011242:	625a      	str	r2, [r3, #36]	; 0x24

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8011244:	f44f 6000 	mov.w	r0, #2048	; 0x800
	}
}
 8011248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 801124c:	f000 be20 	b.w	8011e90 <EXTI_ClearITPendingBit>
 8011250:	40000800 	.word	0x40000800
	...

08011260 <comm_usb_init>:
	chMtxLock(&send_mutex);
	chSequentialStreamWrite(&SDU1, buffer, len);
	chMtxUnlock(&send_mutex);
}

void comm_usb_init(void) {
 8011260:	b508      	push	{r3, lr}
	usb_uart_init();
 8011262:	f7ff ff6d 	bl	8011140 <usb_uart_init>
	//packet_init(send_packet, process_packet, PACKET_HANDLER);

	chMtxObjectInit(&send_mutex);
 8011266:	4802      	ldr	r0, [pc, #8]	; (8011270 <comm_usb_init+0x10>)

	// Threads
	//chThdCreateStatic(serial_read_thread_wa, sizeof(serial_read_thread_wa), NORMALPRIO, serial_read_thread, NULL);
	//chThdCreateStatic(serial_process_thread_wa, sizeof(serial_process_thread_wa), NORMALPRIO, serial_process_thread, NULL);
}
 8011268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void comm_usb_init(void) {
	usb_uart_init();
	//packet_init(send_packet, process_packet, PACKET_HANDLER);

	chMtxObjectInit(&send_mutex);
 801126c:	f7fc bb78 	b.w	800d960 <chMtxObjectInit>
 8011270:	20002db8 	.word	0x20002db8
	...

08011280 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 8011280:	4b04      	ldr	r3, [pc, #16]	; (8011294 <utils_sys_lock_cnt+0x14>)
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	b912      	cbnz	r2, 801128c <utils_sys_lock_cnt+0xc>
 8011286:	2220      	movs	r2, #32
 8011288:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	3201      	adds	r2, #1
 8011290:	601a      	str	r2, [r3, #0]
 8011292:	4770      	bx	lr
 8011294:	20002dc8 	.word	0x20002dc8
	...

080112a0 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 80112a0:	4b05      	ldr	r3, [pc, #20]	; (80112b8 <utils_sys_unlock_cnt+0x18>)
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	b132      	cbz	r2, 80112b4 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	3a01      	subs	r2, #1
 80112aa:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	b90b      	cbnz	r3, 80112b4 <utils_sys_unlock_cnt+0x14>
 80112b0:	f383 8811 	msr	BASEPRI, r3
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	20002dc8 	.word	0x20002dc8
 80112bc:	00000000 	.word	0x00000000

080112c0 <conf_general_init>:
#define EEPROM_BASE_APPCONF		2000

// Global variables
uint16_t VirtAddVarTab[NB_OF_VAR];

void conf_general_init(void) {
 80112c0:	b508      	push	{r3, lr}
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));
 80112c2:	2100      	movs	r1, #0
 80112c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112c8:	4810      	ldr	r0, [pc, #64]	; (801130c <conf_general_init+0x4c>)
 80112ca:	f002 f979 	bl	80135c0 <memset>
 80112ce:	4a10      	ldr	r2, [pc, #64]	; (8011310 <conf_general_init+0x50>)
 80112d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80112d4:	f102 018c 	add.w	r1, r2, #140	; 0x8c

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
 80112d8:	f822 3f02 	strh.w	r3, [r2, #2]!
 80112dc:	3301      	adds	r3, #1
void conf_general_init(void) {
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 80112de:	428a      	cmp	r2, r1
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	d1f9      	bne.n	80112d8 <conf_general_init+0x18>
 80112e4:	4a0b      	ldr	r2, [pc, #44]	; (8011314 <conf_general_init+0x54>)
 80112e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80112ea:	f102 018c 	add.w	r1, r2, #140	; 0x8c
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
 80112ee:	f822 3f02 	strh.w	r3, [r2, #2]!
 80112f2:	3301      	adds	r3, #1
	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 80112f4:	428a      	cmp	r2, r1
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	d1f9      	bne.n	80112ee <conf_general_init+0x2e>
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
	}

	FLASH_Unlock();
 80112fa:	f000 fdd1 	bl	8011ea0 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 80112fe:	20f2      	movs	r0, #242	; 0xf2
 8011300:	f000 fdde 	bl	8011ec0 <FLASH_ClearFlag>
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
	EE_Init();
}
 8011304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
	EE_Init();
 8011308:	f000 ba1a 	b.w	8011740 <EE_Init>
 801130c:	20002dcc 	.word	0x20002dcc
 8011310:	20002dca 	.word	0x20002dca
 8011314:	20002e56 	.word	0x20002e56
	...

08011320 <conf_general_read_app_configuration>:
 * Read app_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a app_configuration struct to write the read configuration to.
 */
void conf_general_read_app_configuration(app_configuration *conf) {
 8011320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	4605      	mov	r5, r0
 8011326:	b083      	sub	sp, #12
 8011328:	4606      	mov	r6, r0
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 801132a:	2400      	movs	r4, #0
 801132c:	e00a      	b.n	8011344 <conf_general_read_app_configuration+0x24>
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 801132e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011332:	0a1a      	lsrs	r2, r3, #8
 8011334:	f805 2014 	strb.w	r2, [r5, r4, lsl #1]
void conf_general_read_app_configuration(app_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8011338:	3401      	adds	r4, #1
 801133a:	2c46      	cmp	r4, #70	; 0x46
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
			conf_addr[2 * i + 1] = var & 0xFF;
 801133c:	7073      	strb	r3, [r6, #1]
 801133e:	f106 0602 	add.w	r6, r6, #2
void conf_general_read_app_configuration(app_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8011342:	d06b      	beq.n	801141c <conf_general_read_app_configuration+0xfc>
 8011344:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
 8011348:	b280      	uxth	r0, r0
 801134a:	f10d 0106 	add.w	r1, sp, #6
 801134e:	f000 f9bf 	bl	80116d0 <EE_ReadVariable>
 8011352:	2800      	cmp	r0, #0
 8011354:	d0eb      	beq.n	801132e <conf_general_read_app_configuration+0xe>
		}
	}

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
 8011356:	2100      	movs	r1, #0
 8011358:	228c      	movs	r2, #140	; 0x8c
 801135a:	4628      	mov	r0, r5
 801135c:	f002 f930 	bl	80135c0 <memset>
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
 8011360:	4f30      	ldr	r7, [pc, #192]	; (8011424 <conf_general_read_app_configuration+0x104>)
		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
 8011362:	4b31      	ldr	r3, [pc, #196]	; (8011428 <conf_general_read_app_configuration+0x108>)
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
 8011364:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8011438 <conf_general_read_app_configuration+0x118>
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
 8011368:	4c30      	ldr	r4, [pc, #192]	; (801142c <conf_general_read_app_configuration+0x10c>)
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
 801136a:	4831      	ldr	r0, [pc, #196]	; (8011430 <conf_general_read_app_configuration+0x110>)
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
		conf->app_ppm_conf.multi_esc = false;
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;
 801136c:	4931      	ldr	r1, [pc, #196]	; (8011434 <conf_general_read_app_configuration+0x114>)
		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
 801136e:	61eb      	str	r3, [r5, #28]
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
		conf->timeout_brake_current = 0.0;
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;
 8011370:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
	}

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
 8011374:	2300      	movs	r3, #0
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
 8011376:	2201      	movs	r2, #1
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
 8011378:	636f      	str	r7, [r5, #52]	; 0x34
		conf->app_adc_conf.use_filter = true;
		conf->app_adc_conf.safe_start = true;
		conf->app_adc_conf.button_inverted = false;
		conf->app_adc_conf.voltage_inverted = false;
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
 801137a:	65af      	str	r7, [r5, #88]	; 0x58
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
 801137c:	f8c5 c048 	str.w	ip, [r5, #72]	; 0x48
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
		conf->timeout_brake_current = 0.0;
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;
 8011380:	612e      	str	r6, [r5, #16]
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;
 8011382:	666e      	str	r6, [r5, #100]	; 0x64
		conf->app_uart_baudrate = 115200;

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
 8011384:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 801143c <conf_general_read_app_configuration+0x11c>
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
 8011388:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8011440 <conf_general_read_app_configuration+0x120>
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
 801138c:	622c      	str	r4, [r5, #32]

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
 801138e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;

		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;
 8011392:	f04f 0903 	mov.w	r9, #3

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
 8011396:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
		conf->app_ppm_conf.pulse_end = 2.0;
 801139a:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;

		conf->app_uart_baudrate = 115200;
 801139e:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
		conf->app_chuk_conf.ramp_time_pos = 0.5;
 80113a2:	f04f 577c 	mov.w	r7, #1056964608	; 0x3f000000
		conf->app_chuk_conf.ramp_time_neg = 0.25;
 80113a6:	f04f 567a 	mov.w	r6, #1048576000	; 0x3e800000
		conf->app_ppm_conf.multi_esc = false;
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
 80113aa:	646c      	str	r4, [r5, #68]	; 0x44
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
 80113ac:	6328      	str	r0, [r5, #48]	; 0x30
		conf->app_adc_conf.voltage_end = 3.0;
		conf->app_adc_conf.use_filter = true;
		conf->app_adc_conf.safe_start = true;
		conf->app_adc_conf.button_inverted = false;
		conf->app_adc_conf.voltage_inverted = false;
		conf->app_adc_conf.rpm_lim_start = 150000;
 80113ae:	6568      	str	r0, [r5, #84]	; 0x54
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
		conf->app_ppm_conf.multi_esc = false;
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;
 80113b0:	63e9      	str	r1, [r5, #60]	; 0x3c
		conf->app_adc_conf.voltage_inverted = false;
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
 80113b2:	6629      	str	r1, [r5, #96]	; 0x60
	}

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
 80113b4:	702b      	strb	r3, [r5, #0]
		conf->timeout_msec = 1000;
		conf->timeout_brake_current = 0.0;
		conf->send_can_status = false;
 80113b6:	732b      	strb	r3, [r5, #12]

		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
 80113b8:	762b      	strb	r3, [r5, #24]
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
 80113ba:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
		conf->app_ppm_conf.multi_esc = false;
 80113be:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		conf->app_ppm_conf.tc = false;
 80113c2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
 80113c6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
		conf->app_adc_conf.use_filter = true;
		conf->app_adc_conf.safe_start = true;
		conf->app_adc_conf.button_inverted = false;
 80113ca:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
		conf->app_adc_conf.voltage_inverted = false;
 80113ce:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
		conf->app_adc_conf.multi_esc = false;
 80113d2:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
		conf->app_adc_conf.tc = false;
 80113d6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
 80113da:	f8c5 b004 	str.w	fp, [r5, #4]
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;

		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;
 80113de:	f885 9014 	strb.w	r9, [r5, #20]

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
 80113e2:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
		conf->app_ppm_conf.pulse_end = 2.0;
 80113e6:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
 80113ea:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
		conf->app_adc_conf.use_filter = true;
 80113ee:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
		conf->app_adc_conf.safe_start = true;
 80113f2:	f885 2051 	strb.w	r2, [r5, #81]	; 0x51
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;

		conf->app_uart_baudrate = 115200;

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
 80113f6:	f885 206c 	strb.w	r2, [r5, #108]	; 0x6c
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
 80113fa:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;

		conf->app_uart_baudrate = 115200;
 80113fe:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
 8011402:	672c      	str	r4, [r5, #112]	; 0x70
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
 8011404:	6768      	str	r0, [r5, #116]	; 0x74
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
		conf->app_chuk_conf.ramp_time_pos = 0.5;
		conf->app_chuk_conf.ramp_time_neg = 0.25;
		conf->app_chuk_conf.multi_esc = true;
 8011406:	f885 2084 	strb.w	r2, [r5, #132]	; 0x84
		conf->app_chuk_conf.tc = false;
 801140a:	f885 3085 	strb.w	r3, [r5, #133]	; 0x85
		conf->app_chuk_conf.tc_max_diff = 3000.0;
 801140e:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
		conf->app_uart_baudrate = 115200;

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
 8011412:	f8c5 e078 	str.w	lr, [r5, #120]	; 0x78
		conf->app_chuk_conf.ramp_time_pos = 0.5;
 8011416:	67ef      	str	r7, [r5, #124]	; 0x7c
		conf->app_chuk_conf.ramp_time_neg = 0.25;
 8011418:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		conf->app_chuk_conf.multi_esc = true;
		conf->app_chuk_conf.tc = false;
		conf->app_chuk_conf.tc_max_diff = 3000.0;
	}
}
 801141c:	b003      	add	sp, #12
 801141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011422:	bf00      	nop
 8011424:	48435000 	.word	0x48435000
 8011428:	466a6000 	.word	0x466a6000
 801142c:	3e19999a 	.word	0x3e19999a
 8011430:	48127c00 	.word	0x48127c00
 8011434:	453b8000 	.word	0x453b8000
 8011438:	3f666666 	.word	0x3f666666
 801143c:	48742400 	.word	0x48742400
 8011440:	40400000 	.word	0x40400000
	...

08011450 <conf_general_read_mc_configuration>:
 * Read mc_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a mc_configuration struct to write the read configuration to.
 */
void conf_general_read_mc_configuration(mc_configuration *conf) {
 8011450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011454:	4605      	mov	r5, r0
 8011456:	b083      	sub	sp, #12
 8011458:	4606      	mov	r6, r0
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 801145a:	2400      	movs	r4, #0
 801145c:	e00b      	b.n	8011476 <conf_general_read_mc_configuration+0x26>
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 801145e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011462:	0a1a      	lsrs	r2, r3, #8
 8011464:	f805 2014 	strb.w	r2, [r5, r4, lsl #1]
void conf_general_read_mc_configuration(mc_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8011468:	3401      	adds	r4, #1
 801146a:	2c58      	cmp	r4, #88	; 0x58
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
			conf_addr[2 * i + 1] = var & 0xFF;
 801146c:	7073      	strb	r3, [r6, #1]
 801146e:	f106 0602 	add.w	r6, r6, #2
void conf_general_read_mc_configuration(mc_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8011472:	f000 8088 	beq.w	8011586 <conf_general_read_mc_configuration+0x136>
 8011476:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
 801147a:	b280      	uxth	r0, r0
 801147c:	f10d 0106 	add.w	r1, sp, #6
 8011480:	f000 f926 	bl	80116d0 <EE_ReadVariable>
 8011484:	2800      	cmp	r0, #0
 8011486:	d0ea      	beq.n	801145e <conf_general_read_mc_configuration+0xe>
	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
 8011488:	4b40      	ldr	r3, [pc, #256]	; (801158c <conf_general_read_mc_configuration+0x13c>)
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
 801148a:	4a41      	ldr	r2, [pc, #260]	; (8011590 <conf_general_read_mc_configuration+0x140>)
		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
 801148c:	f8df e130 	ldr.w	lr, [pc, #304]	; 80115c0 <conf_general_read_mc_configuration+0x170>

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
 8011490:	eddf 7a40 	vldr	s15, [pc, #256]	; 8011594 <conf_general_read_mc_configuration+0x144>
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
 8011494:	4940      	ldr	r1, [pc, #256]	; (8011598 <conf_general_read_mc_configuration+0x148>)
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
 8011496:	4f41      	ldr	r7, [pc, #260]	; (801159c <conf_general_read_mc_configuration+0x14c>)

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
 8011498:	f8df a128 	ldr.w	sl, [pc, #296]	; 80115c4 <conf_general_read_mc_configuration+0x174>
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
 801149c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80115c8 <conf_general_read_mc_configuration+0x178>
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
 80114a0:	4c3f      	ldr	r4, [pc, #252]	; (80115a0 <conf_general_read_mc_configuration+0x150>)
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
 80114a2:	4840      	ldr	r0, [pc, #256]	; (80115a4 <conf_general_read_mc_configuration+0x154>)
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
 80114a4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80115cc <conf_general_read_mc_configuration+0x17c>
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;
 80114a8:	f8df c124 	ldr.w	ip, [pc, #292]	; 80115d0 <conf_general_read_mc_configuration+0x180>
	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
 80114ac:	606b      	str	r3, [r5, #4]
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
 80114ae:	60eb      	str	r3, [r5, #12]
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;

		conf->lo_current_max = conf->l_current_max;
 80114b0:	64eb      	str	r3, [r5, #76]	; 0x4c
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
 80114b2:	656b      	str	r3, [r5, #84]	; 0x54
		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
 80114b4:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80115d4 <conf_general_read_mc_configuration+0x184>
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
 80114b8:	4b3b      	ldr	r3, [pc, #236]	; (80115a8 <conf_general_read_mc_configuration+0x158>)
		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
 80114ba:	f8c5 e018 	str.w	lr, [r5, #24]
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
 80114be:	63aa      	str	r2, [r5, #56]	; 0x38
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
 80114c0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80115d8 <conf_general_read_mc_configuration+0x188>
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
 80114c4:	642a      	str	r2, [r5, #64]	; 0x40
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
 80114c6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80115ac <conf_general_read_mc_configuration+0x15c>
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
 80114ca:	4e39      	ldr	r6, [pc, #228]	; (80115b0 <conf_general_read_mc_configuration+0x160>)
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
 80114cc:	60a9      	str	r1, [r5, #8]
			break;
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
 80114ce:	2201      	movs	r2, #1
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;

		conf->lo_current_max = conf->l_current_max;
		conf->lo_current_min = conf->l_current_min;
 80114d0:	6529      	str	r1, [r5, #80]	; 0x50

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
 80114d2:	f8c5 a014 	str.w	sl, [r5, #20]
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
 80114d6:	f8c5 901c 	str.w	r9, [r5, #28]
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
 80114da:	622c      	str	r4, [r5, #32]
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
 80114dc:	6268      	str	r0, [r5, #36]	; 0x24

		conf->hall_dir = MCPWM_HALL_DIR;
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
 80114de:	4c35      	ldr	r4, [pc, #212]	; (80115b4 <conf_general_read_mc_configuration+0x164>)
		conf->s_pid_ki = MCPWM_PID_KI;
 80114e0:	4835      	ldr	r0, [pc, #212]	; (80115b8 <conf_general_read_mc_configuration+0x168>)
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
 80114e2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
 80114e6:	2100      	movs	r1, #0
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
 80114e8:	636f      	str	r7, [r5, #52]	; 0x34
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
 80114ea:	63ef      	str	r7, [r5, #60]	; 0x3c
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;
 80114ec:	f8c5 c048 	str.w	ip, [r5, #72]	; 0x48
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
 80114f0:	666b      	str	r3, [r5, #100]	; 0x64
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
 80114f2:	edc5 7a1b 	vstr	s15, [r5, #108]	; 0x6c
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
 80114f6:	2300      	movs	r3, #0
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
 80114f8:	4f30      	ldr	r7, [pc, #192]	; (80115bc <conf_general_read_mc_configuration+0x16c>)
		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
 80114fa:	f8c5 b070 	str.w	fp, [r5, #112]	; 0x70
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
 80114fe:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
			break;
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
 8011502:	702a      	strb	r2, [r5, #0]
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
 8011504:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
 8011508:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
		conf->lo_current_max = conf->l_current_max;
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
 801150c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
		conf->sl_bemf_coupling_k = MCPWM_BEMF_INPUT_COUPLING_K;
 8011510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80115dc <conf_general_read_mc_configuration+0x18c>
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;
 8011514:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80115e0 <conf_general_read_mc_configuration+0x190>
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
 8011518:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80115e4 <conf_general_read_mc_configuration+0x194>
		conf->cc_ramp_step_max = 0.04;
 801151c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80115e8 <conf_general_read_mc_configuration+0x198>
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
 8011520:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80115ec <conf_general_read_mc_configuration+0x19c>
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
 8011524:	646e      	str	r6, [r5, #68]	; 0x44
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
 8011526:	eef2 7a00 	vmov.f32	s15, #32
		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
 801152a:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
		conf->cc_ramp_step_max = 0.04;

		conf->m_fault_stop_time_ms = MCPWM_FAULT_STOP_TIME;
 801152e:	f640 32b8 	movw	r2, #3000	; 0xbb8
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
 8011532:	ed85 7a18 	vstr	s14, [r5, #96]	; 0x60
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
 8011536:	706b      	strb	r3, [r5, #1]
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;
 8011538:	70ab      	strb	r3, [r5, #2]

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
 801153a:	612f      	str	r7, [r5, #16]
		conf->l_max_duty = MCPWM_MAX_DUTY;

		conf->lo_current_max = conf->l_current_max;
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;
 801153c:	65af      	str	r7, [r5, #88]	; 0x58
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
 801153e:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
 8011542:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
		conf->sl_bemf_coupling_k = MCPWM_BEMF_INPUT_COUPLING_K;
 8011546:	f8c5 a078 	str.w	sl, [r5, #120]	; 0x78

		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
 801154a:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
		conf->sl_bemf_coupling_k = MCPWM_BEMF_INPUT_COUPLING_K;

		conf->hall_dir = MCPWM_HALL_DIR;
 801154e:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
 8011552:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;
 8011556:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e

		conf->s_pid_kp = MCPWM_PID_KP;
 801155a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;

		conf->p_pid_kp = MCPWM_P_PID_KP;
 801155e:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
		conf->hall_dir = MCPWM_HALL_DIR;
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
 8011562:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;

		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
 8011566:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
 801156a:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;

		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;
 801156e:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;
 8011572:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
 8011576:	f8c5 80a4 	str.w	r8, [r5, #164]	; 0xa4
		conf->cc_ramp_step_max = 0.04;
 801157a:	f8c5 c0a8 	str.w	ip, [r5, #168]	; 0xa8
		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
 801157e:	f8c5 e0a0 	str.w	lr, [r5, #160]	; 0xa0
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
		conf->cc_ramp_step_max = 0.04;

		conf->m_fault_stop_time_ms = MCPWM_FAULT_STOP_TIME;
 8011582:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
	}
}
 8011586:	b003      	add	sp, #12
 8011588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801158c:	42700000 	.word	0x42700000
 8011590:	42c80000 	.word	0x42c80000
 8011594:	42780000 	.word	0x42780000
 8011598:	c2700000 	.word	0xc2700000
 801159c:	42a00000 	.word	0x42a00000
 80115a0:	43960000 	.word	0x43960000
 80115a4:	44bb8000 	.word	0x44bb8000
 80115a8:	44898000 	.word	0x44898000
 80115ac:	43160000 	.word	0x43160000
 80115b0:	3c23d70a 	.word	0x3c23d70a
 80115b4:	38d1b717 	.word	0x38d1b717
 80115b8:	3b03126f 	.word	0x3b03126f
 80115bc:	c1a00000 	.word	0xc1a00000
 80115c0:	c7c35000 	.word	0xc7c35000
 80115c4:	43020000 	.word	0x43020000
 80115c8:	47c35000 	.word	0x47c35000
 80115cc:	42480000 	.word	0x42480000
 80115d0:	3f733333 	.word	0x3f733333
 80115d4:	3f4ccccd 	.word	0x3f4ccccd
 80115d8:	479c4000 	.word	0x479c4000
 80115dc:	44160000 	.word	0x44160000
 80115e0:	44610000 	.word	0x44610000
 80115e4:	3b96bb99 	.word	0x3b96bb99
 80115e8:	3d23d70a 	.word	0x3d23d70a
 80115ec:	41200000 	.word	0x41200000

080115f0 <EE_VerifyPageFullWriteVariable>:
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80115f0:	b538      	push	{r3, r4, r5, lr}

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80115f2:	4a1b      	ldr	r2, [pc, #108]	; (8011660 <EE_VerifyPageFullWriteVariable+0x70>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80115f4:	4b1b      	ldr	r3, [pc, #108]	; (8011664 <EE_VerifyPageFullWriteVariable+0x74>)
 80115f6:	881b      	ldrh	r3, [r3, #0]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80115f8:	8812      	ldrh	r2, [r2, #0]
 80115fa:	b292      	uxth	r2, r2
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80115fc:	b29b      	uxth	r3, r3

	/* Write or read operation */
	switch (Operation)
	{
	case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
		if (PageStatus1 == VALID_PAGE)
 80115fe:	b9ea      	cbnz	r2, 801163c <EE_VerifyPageFullWriteVariable+0x4c>
		{
			/* Page0 receiving data */
			if (PageStatus0 == RECEIVE_DATA)
 8011600:	f64e 62ee 	movw	r2, #61166	; 0xeeee
		else if (PageStatus0 == VALID_PAGE)
		{
			/* Page1 receiving data */
			if (PageStatus1 == RECEIVE_DATA)
			{
				return PAGE1;         /* Page1 valid */
 8011604:	1a9b      	subs	r3, r3, r2
 8011606:	bf18      	it	ne
 8011608:	2301      	movne	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801160a:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801160e:	4a16      	ldr	r2, [pc, #88]	; (8011668 <EE_VerifyPageFullWriteVariable+0x78>)
 8011610:	3301      	adds	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011612:	3401      	adds	r4, #1

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8011614:	039b      	lsls	r3, r3, #14
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011616:	03a4      	lsls	r4, r4, #14

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8011618:	441a      	add	r2, r3

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 801161a:	4294      	cmp	r4, r2
 801161c:	d303      	bcc.n	8011626 <EE_VerifyPageFullWriteVariable+0x36>
 801161e:	e010      	b.n	8011642 <EE_VerifyPageFullWriteVariable+0x52>
			return FlashStatus;
		}
		else
		{
			/* Next address location */
			Address = Address + 4;
 8011620:	3404      	adds	r4, #4

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 8011622:	42a2      	cmp	r2, r4
 8011624:	d90d      	bls.n	8011642 <EE_VerifyPageFullWriteVariable+0x52>
	{
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	3301      	adds	r3, #1
 801162a:	d1f9      	bne.n	8011620 <EE_VerifyPageFullWriteVariable+0x30>
 801162c:	4605      	mov	r5, r0
		{
			/* Set variable data */
			FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 801162e:	4620      	mov	r0, r4
 8011630:	f000 fcc6 	bl	8011fc0 <FLASH_ProgramHalfWord>
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 8011634:	2809      	cmp	r0, #9
 8011636:	d00d      	beq.n	8011654 <EE_VerifyPageFullWriteVariable+0x64>
				return FlashStatus;
			}
			/* Set variable virtual address */
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
			/* Return program operation status */
			return FlashStatus;
 8011638:	b280      	uxth	r0, r0
 801163a:	bd38      	pop	{r3, r4, r5, pc}
			else
			{
				return PAGE1;         /* Page1 valid */
			}
		}
		else if (PageStatus0 == VALID_PAGE)
 801163c:	b11b      	cbz	r3, 8011646 <EE_VerifyPageFullWriteVariable+0x56>
	ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE)
	{
		return  NO_VALID_PAGE;
 801163e:	20ab      	movs	r0, #171	; 0xab
 8011640:	bd38      	pop	{r3, r4, r5, pc}
			Address = Address + 4;
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8011642:	2080      	movs	r0, #128	; 0x80
 8011644:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else if (PageStatus0 == VALID_PAGE)
		{
			/* Page1 receiving data */
			if (PageStatus1 == RECEIVE_DATA)
 8011646:	f64e 63ee 	movw	r3, #61166	; 0xeeee
			{
				return PAGE1;         /* Page1 valid */
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	fab3 f383 	clz	r3, r3
 8011650:	095b      	lsrs	r3, r3, #5
 8011652:	e7da      	b.n	801160a <EE_VerifyPageFullWriteVariable+0x1a>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
			/* Set variable virtual address */
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8011654:	1ca0      	adds	r0, r4, #2
 8011656:	4629      	mov	r1, r5
 8011658:	f000 fcb2 	bl	8011fc0 <FLASH_ProgramHalfWord>
 801165c:	e7ec      	b.n	8011638 <EE_VerifyPageFullWriteVariable+0x48>
 801165e:	bf00      	nop
 8011660:	08008000 	.word	0x08008000
 8011664:	08004000 	.word	0x08004000
 8011668:	08003ffe 	.word	0x08003ffe
 801166c:	00000000 	.word	0x00000000

08011670 <EE_EraseSectorIfNotEmpty.constprop.1>:

/*
 * Erase flash page if it is not already erased. This is to save write cycles and
 * prevent the memory from getting erased in case of unstable voltage at boot.
 */
static uint16_t EE_EraseSectorIfNotEmpty(uint32_t FLASH_Sector, uint8_t VoltageRange) {
 8011670:	b510      	push	{r4, lr}
 8011672:	4604      	mov	r4, r0
	uint8_t *addr = flash_helper_get_sector_address(FLASH_Sector);
 8011674:	f000 f904 	bl	8011880 <flash_helper_get_sector_address>
 8011678:	f500 527f 	add.w	r2, r0, #16320	; 0x3fc0
 801167c:	323f      	adds	r2, #63	; 0x3f
 801167e:	3801      	subs	r0, #1
 8011680:	e001      	b.n	8011686 <EE_EraseSectorIfNotEmpty.constprop.1+0x16>

	for (unsigned int i = 0;i < PAGE_SIZE;i++) {
 8011682:	4290      	cmp	r0, r2
 8011684:	d009      	beq.n	801169a <EE_EraseSectorIfNotEmpty.constprop.1+0x2a>
		if (addr[i] != 0xFF) {
 8011686:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801168a:	2bff      	cmp	r3, #255	; 0xff
 801168c:	d0f9      	beq.n	8011682 <EE_EraseSectorIfNotEmpty.constprop.1+0x12>
			return FLASH_EraseSector(FLASH_Sector, VoltageRange);
 801168e:	4620      	mov	r0, r4
 8011690:	2102      	movs	r1, #2
 8011692:	f000 fc55 	bl	8011f40 <FLASH_EraseSector>
 8011696:	b280      	uxth	r0, r0
 8011698:	bd10      	pop	{r4, pc}
		}
	}

	return FLASH_COMPLETE;
 801169a:	2009      	movs	r0, #9
}
 801169c:	bd10      	pop	{r4, pc}
 801169e:	bf00      	nop

080116a0 <EE_Format>:
 * @param  None
 * @retval Status of the last operation (Flash write or erase) done during
 *         EEPROM formating
 */
static FLASH_Status EE_Format(void)
{
 80116a0:	b508      	push	{r3, lr}
	FLASH_Status FlashStatus = FLASH_COMPLETE;

	/* Erase Page0 */
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80116a2:	2008      	movs	r0, #8
 80116a4:	f7ff ffe4 	bl	8011670 <EE_EraseSectorIfNotEmpty.constprop.1>
 80116a8:	b2c0      	uxtb	r0, r0

	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != FLASH_COMPLETE)
 80116aa:	2809      	cmp	r0, #9
 80116ac:	d000      	beq.n	80116b0 <EE_Format+0x10>
	/* Erase Page1 */
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);

	/* Return Page1 erase operation status */
	return FlashStatus;
}
 80116ae:	bd08      	pop	{r3, pc}
	{
		return FlashStatus;
	}

	/* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
	FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80116b0:	4805      	ldr	r0, [pc, #20]	; (80116c8 <EE_Format+0x28>)
 80116b2:	2100      	movs	r1, #0
 80116b4:	f000 fc84 	bl	8011fc0 <FLASH_ProgramHalfWord>

	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != FLASH_COMPLETE)
 80116b8:	2809      	cmp	r0, #9
 80116ba:	d1f8      	bne.n	80116ae <EE_Format+0xe>
	{
		return FlashStatus;
	}

	/* Erase Page1 */
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 80116bc:	2010      	movs	r0, #16
 80116be:	f7ff ffd7 	bl	8011670 <EE_EraseSectorIfNotEmpty.constprop.1>
 80116c2:	b2c0      	uxtb	r0, r0
 80116c4:	e7f3      	b.n	80116ae <EE_Format+0xe>
 80116c6:	bf00      	nop
 80116c8:	08004000 	.word	0x08004000
 80116cc:	00000000 	.word	0x00000000

080116d0 <EE_ReadVariable>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80116d0:	4b15      	ldr	r3, [pc, #84]	; (8011728 <EE_ReadVariable+0x58>)

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80116d2:	4a16      	ldr	r2, [pc, #88]	; (801172c <EE_ReadVariable+0x5c>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80116d4:	881b      	ldrh	r3, [r3, #0]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80116d6:	8812      	ldrh	r2, [r2, #0]
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80116d8:	b29b      	uxth	r3, r3
 *           - 0: if variable was found
 *           - 1: if the variable was not found
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80116da:	b410      	push	{r4}

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80116dc:	b292      	uxth	r2, r2
		{
			return NO_VALID_PAGE;   /* No valid Page */
		}

	case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
		if (PageStatus0 == VALID_PAGE)
 80116de:	b1bb      	cbz	r3, 8011710 <EE_ReadVariable+0x40>
		{
			return PAGE0;           /* Page0 valid */
		}
		else if (PageStatus1 == VALID_PAGE)
 80116e0:	b11a      	cbz	r2, 80116ea <EE_ReadVariable+0x1a>
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE)
	{
		return  NO_VALID_PAGE;
 80116e2:	20ab      	movs	r0, #171	; 0xab
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
}
 80116e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116e8:	4770      	bx	lr
	case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
		if (PageStatus0 == VALID_PAGE)
		{
			return PAGE0;           /* Page0 valid */
		}
		else if (PageStatus1 == VALID_PAGE)
 80116ea:	4b11      	ldr	r3, [pc, #68]	; (8011730 <EE_ReadVariable+0x60>)
 80116ec:	4c11      	ldr	r4, [pc, #68]	; (8011734 <EE_ReadVariable+0x64>)
 80116ee:	461a      	mov	r2, r3

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
	{
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*)Address);
 80116f0:	8812      	ldrh	r2, [r2, #0]
 80116f2:	b292      	uxth	r2, r2

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
 80116f4:	4282      	cmp	r2, r0
 80116f6:	d104      	bne.n	8011702 <EE_ReadVariable+0x32>
 80116f8:	e00e      	b.n	8011718 <EE_ReadVariable+0x48>

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
	{
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*)Address);
 80116fa:	881a      	ldrh	r2, [r3, #0]
 80116fc:	b292      	uxth	r2, r2

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
 80116fe:	4282      	cmp	r2, r0
 8011700:	d00a      	beq.n	8011718 <EE_ReadVariable+0x48>
			break;
		}
		else
		{
			/* Next address location */
			Address = Address - 4;
 8011702:	3b04      	subs	r3, #4

	/* Get the valid Page end Address */
	Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
 8011704:	429c      	cmp	r4, r3
 8011706:	d3f8      	bcc.n	80116fa <EE_ReadVariable+0x2a>
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
	uint16_t ValidPage = PAGE0;
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8011708:	2001      	movs	r0, #1
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
}
 801170a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801170e:	4770      	bx	lr
		{
			return NO_VALID_PAGE;   /* No valid Page */
		}

	case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
		if (PageStatus0 == VALID_PAGE)
 8011710:	4b09      	ldr	r3, [pc, #36]	; (8011738 <EE_ReadVariable+0x68>)
 8011712:	4c0a      	ldr	r4, [pc, #40]	; (801173c <EE_ReadVariable+0x6c>)
 8011714:	461a      	mov	r2, r3
 8011716:	e7eb      	b.n	80116f0 <EE_ReadVariable+0x20>

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
		{
			/* Get content of Address-2 which is variable value */
			*Data = (*(__IO uint16_t*)(Address - 2));
 8011718:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 801171c:	800b      	strh	r3, [r1, #0]

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 801171e:	2000      	movs	r0, #0
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
}
 8011720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	08004000 	.word	0x08004000
 801172c:	08008000 	.word	0x08008000
 8011730:	0800bffe 	.word	0x0800bffe
 8011734:	08008002 	.word	0x08008002
 8011738:	08007ffe 	.word	0x08007ffe
 801173c:	08004002 	.word	0x08004002

08011740 <EE_Init>:
 * @param  None.
 * @retval - Flash error code: on write Flash error
 *         - FLASH_COMPLETE: on success
 */
uint16_t EE_Init(void)
{
 8011740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t EepromStatus = 0, ReadStatus = 0;
	int16_t x = -1;
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011744:	4d48      	ldr	r5, [pc, #288]	; (8011868 <EE_Init+0x128>)
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011746:	4e49      	ldr	r6, [pc, #292]	; (801186c <EE_Init+0x12c>)
	uint16_t EepromStatus = 0, ReadStatus = 0;
	int16_t x = -1;
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011748:	882c      	ldrh	r4, [r5, #0]
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801174a:	8833      	ldrh	r3, [r6, #0]
	uint16_t EepromStatus = 0, ReadStatus = 0;
	int16_t x = -1;
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801174c:	b2a4      	uxth	r4, r4
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
 801174e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011752:	4294      	cmp	r4, r2
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011754:	b29b      	uxth	r3, r3

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
 8011756:	d048      	beq.n	80117ea <EE_Init+0xaa>
 8011758:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801175c:	4544      	cmp	r4, r8
 801175e:	d034      	beq.n	80117ca <EE_Init+0x8a>
 8011760:	b124      	cbz	r4, 801176c <EE_Init+0x2c>
		}
		break;

	default:  /* Any other state -> format eeprom */
		/* Erase both Page0 and Page1 and set Page0 as valid page */
		FlashStatus = EE_Format();
 8011762:	f7ff ff9d 	bl	80116a0 <EE_Format>
 8011766:	b280      	uxth	r0, r0
		}
		break;
	}

	return FLASH_COMPLETE;
}
 8011768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		break;

	case VALID_PAGE:
		if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801176c:	2b00      	cmp	r3, #0
 801176e:	d0f8      	beq.n	8011762 <EE_Init+0x22>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8011770:	4543      	cmp	r3, r8
 8011772:	d064      	beq.n	801183e <EE_Init+0xfe>
 8011774:	4d3e      	ldr	r5, [pc, #248]	; (8011870 <EE_Init+0x130>)
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011776:	4e3f      	ldr	r6, [pc, #252]	; (8011874 <EE_Init+0x134>)
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011778:	4f3f      	ldr	r7, [pc, #252]	; (8011878 <EE_Init+0x138>)
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801177a:	8833      	ldrh	r3, [r6, #0]
 801177c:	f835 2f02 	ldrh.w	r2, [r5, #2]!
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011780:	493d      	ldr	r1, [pc, #244]	; (8011878 <EE_Init+0x138>)
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011782:	b29b      	uxth	r3, r3
 8011784:	4293      	cmp	r3, r2
				{
					x = VarIdx;
 8011786:	bf08      	it	eq
 8011788:	fa1f f884 	uxtheq.w	r8, r4
				}
				if (VarIdx != x)
 801178c:	fa0f f388 	sxth.w	r3, r8
 8011790:	429c      	cmp	r4, r3
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011792:	4610      	mov	r0, r2
 8011794:	f104 0401 	add.w	r4, r4, #1
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
				{
					x = VarIdx;
				}
				if (VarIdx != x)
 8011798:	d009      	beq.n	80117ae <EE_Init+0x6e>
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801179a:	f7ff ff99 	bl	80116d0 <EE_ReadVariable>
					/* In case variable corresponding to the virtual address was found */
					if (ReadStatus != 0x1)
 801179e:	2801      	cmp	r0, #1
 80117a0:	d005      	beq.n	80117ae <EE_Init+0x6e>
					{
						/* Transfer the variable to the Page1 */
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80117a2:	8828      	ldrh	r0, [r5, #0]
 80117a4:	8839      	ldrh	r1, [r7, #0]
 80117a6:	f7ff ff23 	bl	80115f0 <EE_VerifyPageFullWriteVariable>
						/* If program operation was failed, a Flash error code is returned */
						if (EepromStatus != FLASH_COMPLETE)
 80117aa:	2809      	cmp	r0, #9
 80117ac:	d1dc      	bne.n	8011768 <EE_Init+0x28>
			}
		}
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80117ae:	2ca0      	cmp	r4, #160	; 0xa0
 80117b0:	d1e3      	bne.n	801177a <EE_Init+0x3a>
						}
					}
				}
			}
			/* Mark Page1 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80117b2:	482e      	ldr	r0, [pc, #184]	; (801186c <EE_Init+0x12c>)
 80117b4:	2100      	movs	r1, #0
 80117b6:	f000 fc03 	bl	8011fc0 <FLASH_ProgramHalfWord>
 80117ba:	b280      	uxth	r0, r0
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 80117bc:	2809      	cmp	r0, #9
 80117be:	d1d3      	bne.n	8011768 <EE_Init+0x28>
			{
				return FlashStatus;
			}
			/* Erase Page0 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80117c0:	2008      	movs	r0, #8
		}
		break;
	}

	return FLASH_COMPLETE;
}
 80117c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
			/* Erase Page0 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80117c6:	f7ff bf53 	b.w	8011670 <EE_EraseSectorIfNotEmpty.constprop.1>

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
	{
	case ERASED:
		if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d0f8      	beq.n	80117c0 <EE_Init+0x80>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
		}
		else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d1c7      	bne.n	8011762 <EE_Init+0x22>
		{
			/* Erase Page0 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80117d2:	2008      	movs	r0, #8
 80117d4:	f7ff ff4c 	bl	8011670 <EE_EraseSectorIfNotEmpty.constprop.1>
			/* If erase operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 80117d8:	2809      	cmp	r0, #9
 80117da:	d1c5      	bne.n	8011768 <EE_Init+0x28>
			{
				return FlashStatus;
			}
			/* Mark Page1 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80117dc:	4630      	mov	r0, r6
 80117de:	2100      	movs	r1, #0
 80117e0:	f000 fbee 	bl	8011fc0 <FLASH_ProgramHalfWord>
 80117e4:	b280      	uxth	r0, r0
 80117e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		break;

	case RECEIVE_DATA:
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80117ea:	bb6b      	cbnz	r3, 8011848 <EE_Init+0x108>
 80117ec:	4d20      	ldr	r5, [pc, #128]	; (8011870 <EE_Init+0x130>)
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80117ee:	4e23      	ldr	r6, [pc, #140]	; (801187c <EE_Init+0x13c>)
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80117f0:	4f21      	ldr	r7, [pc, #132]	; (8011878 <EE_Init+0x138>)
			}
		}
		break;

	case RECEIVE_DATA:
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80117f2:	461c      	mov	r4, r3
 80117f4:	f64f 78ff 	movw	r8, #65535	; 0xffff
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80117f8:	8833      	ldrh	r3, [r6, #0]
 80117fa:	f835 2f02 	ldrh.w	r2, [r5, #2]!
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80117fe:	491e      	ldr	r1, [pc, #120]	; (8011878 <EE_Init+0x138>)
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011800:	b29b      	uxth	r3, r3
 8011802:	4293      	cmp	r3, r2
				{
					x = VarIdx;
 8011804:	bf08      	it	eq
 8011806:	fa1f f884 	uxtheq.w	r8, r4
				}
				if (VarIdx != x)
 801180a:	fa0f f388 	sxth.w	r3, r8
 801180e:	429c      	cmp	r4, r3
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011810:	4610      	mov	r0, r2
 8011812:	f104 0401 	add.w	r4, r4, #1
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
				{
					x = VarIdx;
				}
				if (VarIdx != x)
 8011816:	d009      	beq.n	801182c <EE_Init+0xec>
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011818:	f7ff ff5a 	bl	80116d0 <EE_ReadVariable>
					/* In case variable corresponding to the virtual address was found */
					if (ReadStatus != 0x1)
 801181c:	2801      	cmp	r0, #1
 801181e:	d005      	beq.n	801182c <EE_Init+0xec>
					{
						/* Transfer the variable to the Page0 */
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011820:	8828      	ldrh	r0, [r5, #0]
 8011822:	8839      	ldrh	r1, [r7, #0]
 8011824:	f7ff fee4 	bl	80115f0 <EE_VerifyPageFullWriteVariable>
						/* If program operation was failed, a Flash error code is returned */
						if (EepromStatus != FLASH_COMPLETE)
 8011828:	2809      	cmp	r0, #9
 801182a:	d19d      	bne.n	8011768 <EE_Init+0x28>

	case RECEIVE_DATA:
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801182c:	2ca0      	cmp	r4, #160	; 0xa0
 801182e:	d1e3      	bne.n	80117f8 <EE_Init+0xb8>
						}
					}
				}
			}
			/* Mark Page0 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8011830:	480d      	ldr	r0, [pc, #52]	; (8011868 <EE_Init+0x128>)
 8011832:	2100      	movs	r1, #0
 8011834:	f000 fbc4 	bl	8011fc0 <FLASH_ProgramHalfWord>
 8011838:	b280      	uxth	r0, r0
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 801183a:	2809      	cmp	r0, #9
 801183c:	d194      	bne.n	8011768 <EE_Init+0x28>
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
		{
			/* Erase Page1 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 801183e:	2010      	movs	r0, #16
		}
		break;
	}

	return FLASH_COMPLETE;
}
 8011840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
		{
			/* Erase Page1 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8011844:	f7ff bf14 	b.w	8011670 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8011848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801184c:	4293      	cmp	r3, r2
 801184e:	d188      	bne.n	8011762 <EE_Init+0x22>
		{
			/* Erase Page1 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8011850:	2010      	movs	r0, #16
 8011852:	f7ff ff0d 	bl	8011670 <EE_EraseSectorIfNotEmpty.constprop.1>
			/* If erase operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 8011856:	2809      	cmp	r0, #9
 8011858:	d186      	bne.n	8011768 <EE_Init+0x28>
			{
				return FlashStatus;
			}
			/* Mark Page0 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 801185a:	4628      	mov	r0, r5
 801185c:	2100      	movs	r1, #0
 801185e:	f000 fbaf 	bl	8011fc0 <FLASH_ProgramHalfWord>
 8011862:	b280      	uxth	r0, r0
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	08004000 	.word	0x08004000
 801186c:	08008000 	.word	0x08008000
 8011870:	20002dca 	.word	0x20002dca
 8011874:	08008006 	.word	0x08008006
 8011878:	20002f0c 	.word	0x20002f0c
 801187c:	08004006 	.word	0x08004006

08011880 <flash_helper_get_sector_address>:

	// Jump to the bootloader
	jump_to_bootloader();
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
 8011880:	4a07      	ldr	r2, [pc, #28]	; (80118a0 <flash_helper_get_sector_address+0x20>)
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 8011882:	2300      	movs	r3, #0
		if (flash_sector[i] == fsector) {
 8011884:	f832 1b02 	ldrh.w	r1, [r2], #2
 8011888:	4281      	cmp	r1, r0
 801188a:	d004      	beq.n	8011896 <flash_helper_get_sector_address+0x16>
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 801188c:	3301      	adds	r3, #1
 801188e:	2b0c      	cmp	r3, #12
 8011890:	d1f8      	bne.n	8011884 <flash_helper_get_sector_address+0x4>
	// Jump to the bootloader
	jump_to_bootloader();
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
	uint8_t *res = 0;
 8011892:	2000      	movs	r0, #0
			break;
		}
	}

	return res;
}
 8011894:	4770      	bx	lr
uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
		if (flash_sector[i] == fsector) {
			res = (uint8_t *)flash_addr[i];
 8011896:	4a03      	ldr	r2, [pc, #12]	; (80118a4 <flash_helper_get_sector_address+0x24>)
 8011898:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
			break;
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	080175c0 	.word	0x080175c0
 80118a4:	080175e0 	.word	0x080175e0
	...

080118b0 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80118b0:	2001      	movs	r0, #1
		OPMODE_I2C,
		100000,
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
 80118b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80118b6:	4601      	mov	r1, r0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118b8:	4e5e      	ldr	r6, [pc, #376]	; (8011a34 <hw_init_gpio+0x184>)

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118ba:	4c5f      	ldr	r4, [pc, #380]	; (8011a38 <hw_init_gpio+0x188>)

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 80118bc:	4d5f      	ldr	r5, [pc, #380]	; (8011a3c <hw_init_gpio+0x18c>)
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80118be:	f000 fb9f 	bl	8012000 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80118c2:	2002      	movs	r0, #2
 80118c4:	2101      	movs	r1, #1
 80118c6:	f000 fb9b 	bl	8012000 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80118ca:	2004      	movs	r0, #4
 80118cc:	2101      	movs	r1, #1
 80118ce:	f000 fb97 	bl	8012000 <RCC_AHB1PeriphClockCmd>

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118d2:	4630      	mov	r0, r6
 80118d4:	2140      	movs	r1, #64	; 0x40
 80118d6:	2219      	movs	r2, #25
 80118d8:	f7fd fc8a 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118dc:	2180      	movs	r1, #128	; 0x80

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);
 80118de:	4688      	mov	r8, r1

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 80118e0:	2740      	movs	r7, #64	; 0x40
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118e2:	4630      	mov	r0, r6
 80118e4:	2219      	movs	r2, #25
 80118e6:	f7fd fc83 	bl	800f1f0 <_pal_lld_setgroupmode>

	palClearPad(GPIOB, 6);
 80118ea:	8377      	strh	r7, [r6, #26]
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118ec:	4639      	mov	r1, r7
 80118ee:	4620      	mov	r0, r4
	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);
 80118f0:	f8a6 801a 	strh.w	r8, [r6, #26]

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118f4:	2219      	movs	r2, #25
 80118f6:	f7fd fc7b 	bl	800f1f0 <_pal_lld_setgroupmode>
	DISABLE_GATE();

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80118fa:	4620      	mov	r0, r4
 80118fc:	4641      	mov	r1, r8
	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();
 80118fe:	8367      	strh	r7, [r4, #26]

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011900:	2219      	movs	r2, #25
 8011902:	f7fd fc75 	bl	800f1f0 <_pal_lld_setgroupmode>
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011906:	f44f 7180 	mov.w	r1, #256	; 0x100
	GAIN_FULLDN();
 801190a:	4689      	mov	r9, r1

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 801190c:	4620      	mov	r0, r4
 801190e:	2219      	movs	r2, #25
 8011910:	f7fd fc6e 	bl	800f1f0 <_pal_lld_setgroupmode>
	GAIN_FULLDN();

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 8011914:	4630      	mov	r0, r6
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 8011916:	f8a4 901a 	strh.w	r9, [r4, #26]

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 801191a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801191e:	2220      	movs	r2, #32
 8011920:	f7fd fc66 	bl	800f1f0 <_pal_lld_setgroupmode>

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 8011924:	4649      	mov	r1, r9
 8011926:	4628      	mov	r0, r5
 8011928:	229a      	movs	r2, #154	; 0x9a
 801192a:	f7fd fc61 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 801192e:	4628      	mov	r0, r5
 8011930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011934:	229a      	movs	r2, #154	; 0x9a
 8011936:	f7fd fc5b 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 801193a:	4628      	mov	r0, r5
 801193c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011940:	229a      	movs	r2, #154	; 0x9a
 8011942:	f7fd fc55 	bl	800f1f0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 8011946:	4630      	mov	r0, r6
 8011948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801194c:	229a      	movs	r2, #154	; 0x9a
 801194e:	f7fd fc4f 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 8011952:	4630      	mov	r0, r6
 8011954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011958:	229a      	movs	r2, #154	; 0x9a
 801195a:	f7fd fc49 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 801195e:	4630      	mov	r0, r6
 8011960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011964:	229a      	movs	r2, #154	; 0x9a
 8011966:	f7fd fc43 	bl	800f1f0 <_pal_lld_setgroupmode>

	// DHall sensors
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 801196a:	4620      	mov	r0, r4
 801196c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011970:	2220      	movs	r2, #32
 8011972:	f7fd fc3d 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 8011976:	4620      	mov	r0, r4
 8011978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801197c:	2220      	movs	r2, #32
 801197e:	f7fd fc37 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);
 8011982:	4620      	mov	r0, r4
 8011984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011988:	2220      	movs	r2, #32
 801198a:	f7fd fc31 	bl	800f1f0 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);//sen3
 801198e:	4628      	mov	r0, r5
 8011990:	2101      	movs	r1, #1
 8011992:	2203      	movs	r2, #3
 8011994:	f7fd fc2c 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);//sen2
 8011998:	4628      	mov	r0, r5
 801199a:	2102      	movs	r1, #2
 801199c:	2203      	movs	r2, #3
 801199e:	f7fd fc27 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);//sen1
 80119a2:	4628      	mov	r0, r5
 80119a4:	2104      	movs	r1, #4
 80119a6:	2203      	movs	r2, #3
 80119a8:	f7fd fc22 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);//INV_TEMP
 80119ac:	4628      	mov	r0, r5
 80119ae:	2108      	movs	r1, #8
 80119b0:	2203      	movs	r2, #3
 80119b2:	f7fd fc1d 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 80119b6:	4628      	mov	r0, r5
 80119b8:	2110      	movs	r1, #16
 80119ba:	2203      	movs	r2, #3
 80119bc:	f7fd fc18 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 80119c0:	4628      	mov	r0, r5
 80119c2:	2120      	movs	r1, #32
 80119c4:	2203      	movs	r2, #3
 80119c6:	f7fd fc13 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 80119ca:	4628      	mov	r0, r5
 80119cc:	4639      	mov	r1, r7
 80119ce:	2203      	movs	r2, #3
 80119d0:	f7fd fc0e 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT_ANALOG);
 80119d4:	4628      	mov	r0, r5
 80119d6:	4641      	mov	r1, r8
 80119d8:	2203      	movs	r2, #3
 80119da:	f7fd fc09 	bl	800f1f0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);//BR_SO1
 80119de:	4630      	mov	r0, r6
 80119e0:	2101      	movs	r1, #1
 80119e2:	2203      	movs	r2, #3
 80119e4:	f7fd fc04 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);//BR_SO2
 80119e8:	4630      	mov	r0, r6
 80119ea:	2102      	movs	r1, #2
 80119ec:	2203      	movs	r2, #3
 80119ee:	f7fd fbff 	bl	800f1f0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
 80119f2:	4620      	mov	r0, r4
 80119f4:	2101      	movs	r1, #1
 80119f6:	2203      	movs	r2, #3
 80119f8:	f7fd fbfa 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 80119fc:	4620      	mov	r0, r4
 80119fe:	2102      	movs	r1, #2
 8011a00:	2203      	movs	r2, #3
 8011a02:	f7fd fbf5 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
 8011a06:	4620      	mov	r0, r4
 8011a08:	2104      	movs	r1, #4
 8011a0a:	2203      	movs	r2, #3
 8011a0c:	f7fd fbf0 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 8011a10:	4620      	mov	r0, r4
 8011a12:	2108      	movs	r1, #8
 8011a14:	2203      	movs	r2, #3
 8011a16:	f7fd fbeb 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	2110      	movs	r1, #16
 8011a1e:	2203      	movs	r2, #3
 8011a20:	f7fd fbe6 	bl	800f1f0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 8011a24:	4620      	mov	r0, r4
 8011a26:	2120      	movs	r1, #32
 8011a28:	2203      	movs	r2, #3

}
 8011a2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 8011a2e:	f7fd bbdf 	b.w	800f1f0 <_pal_lld_setgroupmode>
 8011a32:	bf00      	nop
 8011a34:	40020400 	.word	0x40020400
 8011a38:	40020800 	.word	0x40020800
 8011a3c:	40020000 	.word	0x40020000

08011a40 <hw_setup_adc_channels>:

}

void hw_setup_adc_channels(void) {
 8011a40:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8011a42:	4d2c      	ldr	r5, [pc, #176]	; (8011af4 <hw_setup_adc_channels+0xb4>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8011a44:	4c2c      	ldr	r4, [pc, #176]	; (8011af8 <hw_setup_adc_channels+0xb8>)
	ADC_RegularChannelConfig(ADC2, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 8011a46:	4e2d      	ldr	r6, [pc, #180]	; (8011afc <hw_setup_adc_channels+0xbc>)

}

void hw_setup_adc_channels(void) {
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8011a48:	2201      	movs	r2, #1
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	2100      	movs	r1, #0
 8011a50:	f000 f8de 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 2, ADC_SampleTime_15Cycles);
 8011a54:	4628      	mov	r0, r5
 8011a56:	2107      	movs	r1, #7
 8011a58:	2202      	movs	r2, #2
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	f000 f8d8 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
 8011a60:	4628      	mov	r0, r5
 8011a62:	210a      	movs	r1, #10
 8011a64:	2203      	movs	r2, #3
 8011a66:	2301      	movs	r3, #1
 8011a68:	f000 f8d2 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 8011a6c:	2104      	movs	r1, #4
 8011a6e:	4628      	mov	r0, r5
 8011a70:	460a      	mov	r2, r1
 8011a72:	2301      	movs	r3, #1
 8011a74:	f000 f8cc 	bl	8011c10 <ADC_RegularChannelConfig>

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8011a78:	2101      	movs	r1, #1
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	460a      	mov	r2, r1
 8011a7e:	460b      	mov	r3, r1
 8011a80:	f000 f8c6 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 8011a84:	4620      	mov	r0, r4
 8011a86:	2108      	movs	r1, #8
 8011a88:	2202      	movs	r2, #2
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	f000 f8c0 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
 8011a90:	4620      	mov	r0, r4
 8011a92:	210b      	movs	r1, #11
 8011a94:	2203      	movs	r2, #3
 8011a96:	2301      	movs	r3, #1
 8011a98:	f000 f8ba 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	210f      	movs	r1, #15
 8011aa0:	2204      	movs	r2, #4
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	f000 f8b4 	bl	8011c10 <ADC_RegularChannelConfig>

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	4630      	mov	r0, r6
 8011aac:	4613      	mov	r3, r2
 8011aae:	2102      	movs	r1, #2
 8011ab0:	f000 f8ae 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	2103      	movs	r1, #3
 8011ab8:	2202      	movs	r2, #2
 8011aba:	2301      	movs	r3, #1
 8011abc:	f000 f8a8 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	210c      	movs	r1, #12
 8011ac4:	2203      	movs	r2, #3
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	f000 f8a2 	bl	8011c10 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 8011acc:	4630      	mov	r0, r6
 8011ace:	2105      	movs	r1, #5
 8011ad0:	2204      	movs	r2, #4
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	f000 f89c 	bl	8011c10 <ADC_RegularChannelConfig>

	// Injected channels
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
 8011ad8:	2201      	movs	r2, #1
 8011ada:	4628      	mov	r0, r5
 8011adc:	4613      	mov	r3, r2
 8011ade:	2108      	movs	r1, #8
 8011ae0:	f000 f8ee 	bl	8011cc0 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	4613      	mov	r3, r2
 8011aea:	2109      	movs	r1, #9
}
 8011aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);

	// Injected channels
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
 8011af0:	f000 b8e6 	b.w	8011cc0 <ADC_InjectedChannelConfig>
 8011af4:	40012000 	.word	0x40012000
 8011af8:	40012100 	.word	0x40012100
 8011afc:	40012200 	.word	0x40012200

08011b00 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8011b00:	78c3      	ldrb	r3, [r0, #3]
 8011b02:	b95b      	cbnz	r3, 8011b1c <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011b04:	7803      	ldrb	r3, [r0, #0]
 8011b06:	4818      	ldr	r0, [pc, #96]	; (8011b68 <NVIC_Init+0x68>)
 8011b08:	095a      	lsrs	r2, r3, #5
 8011b0a:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8011b0c:	f003 031f 	and.w	r3, r3, #31
 8011b10:	2101      	movs	r1, #1
 8011b12:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011b16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011b1a:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8011b1c:	4b13      	ldr	r3, [pc, #76]	; (8011b6c <NVIC_Init+0x6c>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8011b1e:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8011b20:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011b22:	7845      	ldrb	r5, [r0, #1]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8011b24:	7882      	ldrb	r2, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8011b26:	7804      	ldrb	r4, [r0, #0]
 8011b28:	4e0f      	ldr	r6, [pc, #60]	; (8011b68 <NVIC_Init+0x68>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8011b2a:	43c9      	mvns	r1, r1
 8011b2c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 8011b30:	f1c1 0704 	rsb	r7, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011b34:	b2ff      	uxtb	r7, r7
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8011b36:	230f      	movs	r3, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011b38:	40bd      	lsls	r5, r7
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8011b3a:	410b      	asrs	r3, r1

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8011b3c:	4013      	ands	r3, r2
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011b3e:	b2e9      	uxtb	r1, r5
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8011b40:	430b      	orrs	r3, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8011b42:	f104 4260 	add.w	r2, r4, #3758096384	; 0xe0000000
 8011b46:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8011b4a:	011b      	lsls	r3, r3, #4
 8011b4c:	b2db      	uxtb	r3, r3
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8011b4e:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011b52:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8011b54:	2201      	movs	r2, #1
 8011b56:	f003 011f 	and.w	r1, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011b5a:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8011b5c:	408a      	lsls	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011b5e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8011b62:	bcf0      	pop	{r4, r5, r6, r7}
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	e000e100 	.word	0xe000e100
 8011b6c:	e000ed00 	.word	0xe000ed00

08011b70 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8011b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8011b72:	6844      	ldr	r4, [r0, #4]
 8011b74:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8011b76:	f891 c004 	ldrb.w	ip, [r1, #4]
 8011b7a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8011b7e:	690e      	ldr	r6, [r1, #16]
 8011b80:	688d      	ldr	r5, [r1, #8]
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8011b82:	794f      	ldrb	r7, [r1, #5]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8011b84:	4b0d      	ldr	r3, [pc, #52]	; (8011bbc <ADC_Init+0x4c>)
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8011b86:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 8011b8a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8011b8e:	4322      	orrs	r2, r4
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8011b90:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8011b94:	6042      	str	r2, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8011b96:	6884      	ldr	r4, [r0, #8]
 8011b98:	ea4e 0206 	orr.w	r2, lr, r6
 8011b9c:	432a      	orrs	r2, r5
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8011b9e:	4023      	ands	r3, r4
 8011ba0:	4313      	orrs	r3, r2
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8011ba2:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8011ba6:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8011ba8:	7d0a      	ldrb	r2, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8011baa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8011bac:	3a01      	subs	r2, #1
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8011bae:	b2d2      	uxtb	r2, r2
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8011bb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8011bb4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8011bb8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8011bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bbc:	c0fff7fd 	.word	0xc0fff7fd

08011bc0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8011bc0:	b470      	push	{r4, r5, r6}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011bc2:	e890 0044 	ldmia.w	r0, {r2, r6}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8011bc6:	4d06      	ldr	r5, [pc, #24]	; (8011be0 <ADC_CommonInit+0x20>)
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8011bc8:	6884      	ldr	r4, [r0, #8]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011bca:	68c1      	ldr	r1, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8011bcc:	4b05      	ldr	r3, [pc, #20]	; (8011be4 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8011bce:	6868      	ldr	r0, [r5, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011bd0:	4332      	orrs	r2, r6
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8011bd2:	4322      	orrs	r2, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011bd4:	430a      	orrs	r2, r1
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8011bd6:	4003      	ands	r3, r0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011bd8:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8011bda:	606b      	str	r3, [r5, #4]
}
 8011bdc:	bc70      	pop	{r4, r5, r6}
 8011bde:	4770      	bx	lr
 8011be0:	40012300 	.word	0x40012300
 8011be4:	fffc30e0 	.word	0xfffc30e0
	...

08011bf0 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8011bf0:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011bf2:	b919      	cbnz	r1, 8011bfc <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8011bf4:	f023 0301 	bic.w	r3, r3, #1
 8011bf8:	6083      	str	r3, [r0, #8]
 8011bfa:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8011bfc:	f043 0301 	orr.w	r3, r3, #1
 8011c00:	6083      	str	r3, [r0, #8]
 8011c02:	4770      	bx	lr
	...

08011c10 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011c10:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8011c12:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011c14:	d91c      	bls.n	8011c50 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8011c16:	f1a1 040a 	sub.w	r4, r1, #10
 8011c1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8011c1e:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8011c20:	2607      	movs	r6, #7
 8011c22:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8011c24:	40a3      	lsls	r3, r4
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011c26:	ea25 0406 	bic.w	r4, r5, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011c2a:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011c2c:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8011c2e:	60c3      	str	r3, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011c30:	d91a      	bls.n	8011c68 <ADC_RegularChannelConfig+0x58>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8011c32:	2a0c      	cmp	r2, #12
 8011c34:	d925      	bls.n	8011c82 <ADC_RegularChannelConfig+0x72>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8011c36:	3a0d      	subs	r2, #13
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8011c38:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8011c3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011c3e:	231f      	movs	r3, #31
 8011c40:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011c42:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8011c46:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011c48:	4319      	orrs	r1, r3
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8011c4a:	62c1      	str	r1, [r0, #44]	; 0x2c
  }
}
 8011c4c:	bc70      	pop	{r4, r5, r6}
 8011c4e:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011c50:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8011c54:	6905      	ldr	r5, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011c56:	2407      	movs	r4, #7
 8011c58:	40b4      	lsls	r4, r6
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8011c5a:	40b3      	lsls	r3, r6
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011c5c:	ea25 0404 	bic.w	r4, r5, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011c60:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011c62:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8011c64:	6103      	str	r3, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011c66:	d8e4      	bhi.n	8011c32 <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8011c68:	3a01      	subs	r2, #1
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8011c6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8011c6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011c70:	231f      	movs	r3, #31
 8011c72:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011c74:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8011c78:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011c7a:	4319      	orrs	r1, r3
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8011c7c:	6341      	str	r1, [r0, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8011c7e:	bc70      	pop	{r4, r5, r6}
 8011c80:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8011c82:	3a07      	subs	r2, #7
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8011c84:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8011c86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011c8a:	231f      	movs	r3, #31
 8011c8c:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011c8e:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8011c92:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011c94:	4319      	orrs	r1, r3
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8011c96:	6301      	str	r1, [r0, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8011c98:	bc70      	pop	{r4, r5, r6}
 8011c9a:	4770      	bx	lr
 8011c9c:	0000      	movs	r0, r0
	...

08011ca0 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8011ca0:	4a05      	ldr	r2, [pc, #20]	; (8011cb8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 8011ca2:	6853      	ldr	r3, [r2, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011ca4:	b918      	cbnz	r0, 8011cae <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8011ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011caa:	6053      	str	r3, [r2, #4]
 8011cac:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8011cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011cb2:	6053      	str	r3, [r2, #4]
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	40012300 	.word	0x40012300
 8011cbc:	00000000 	.word	0x00000000

08011cc0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011cc0:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8011cc2:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011cc4:	d81a      	bhi.n	8011cfc <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011cc6:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8011cca:	6905      	ldr	r5, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011ccc:	2407      	movs	r4, #7
 8011cce:	40b4      	lsls	r4, r6
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8011cd0:	40b3      	lsls	r3, r6
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011cd2:	ea25 0404 	bic.w	r4, r5, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011cd6:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8011cd8:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8011cda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011cdc:	3202      	adds	r2, #2
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8011cde:	f3c3 5401 	ubfx	r4, r3, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8011ce2:	1b12      	subs	r2, r2, r4
 8011ce4:	b2d2      	uxtb	r2, r2
 8011ce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011cea:	241f      	movs	r4, #31
 8011cec:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8011cee:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8011cf2:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8011cf4:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8011cf6:	6381      	str	r1, [r0, #56]	; 0x38
}
 8011cf8:	bc70      	pop	{r4, r5, r6}
 8011cfa:	4770      	bx	lr
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8011cfc:	f1a1 040a 	sub.w	r4, r1, #10
 8011d00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8011d04:	68c5      	ldr	r5, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8011d06:	2607      	movs	r6, #7
 8011d08:	40a6      	lsls	r6, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8011d0a:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011d0c:	ea25 0406 	bic.w	r4, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011d10:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8011d12:	60c3      	str	r3, [r0, #12]
 8011d14:	e7e1      	b.n	8011cda <ADC_InjectedChannelConfig+0x1a>
 8011d16:	bf00      	nop
	...

08011d20 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8011d20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8011d22:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8011d24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8011d28:	ea43 5101 	orr.w	r1, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8011d2c:	6381      	str	r1, [r0, #56]	; 0x38
 8011d2e:	4770      	bx	lr

08011d30 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8011d30:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8011d32:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8011d36:	4319      	orrs	r1, r3
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8011d38:	6081      	str	r1, [r0, #8]
 8011d3a:	4770      	bx	lr
 8011d3c:	0000      	movs	r0, r0
	...

08011d40 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8011d40:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8011d42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8011d46:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8011d48:	6081      	str	r1, [r0, #8]
 8011d4a:	4770      	bx	lr
 8011d4c:	0000      	movs	r0, r0
	...

08011d50 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8011d50:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8011d56:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8011d58:	9b01      	ldr	r3, [sp, #4]
 8011d5a:	3328      	adds	r3, #40	; 0x28
 8011d5c:	4419      	add	r1, r3
 8011d5e:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8011d60:	9b01      	ldr	r3, [sp, #4]
 8011d62:	6818      	ldr	r0, [r3, #0]
}
 8011d64:	b280      	uxth	r0, r0
 8011d66:	b002      	add	sp, #8
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop
 8011d6c:	0000      	movs	r0, r0
	...

08011d70 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 8011d70:	b2c9      	uxtb	r1, r1
 8011d72:	2301      	movs	r3, #1
 8011d74:	408b      	lsls	r3, r1

  if (NewState != DISABLE)
 8011d76:	b922      	cbnz	r2, 8011d82 <ADC_ITConfig+0x12>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8011d78:	6842      	ldr	r2, [r0, #4]
 8011d7a:	ea22 0303 	bic.w	r3, r2, r3
 8011d7e:	6043      	str	r3, [r0, #4]
 8011d80:	4770      	bx	lr
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8011d82:	6842      	ldr	r2, [r0, #4]
 8011d84:	4313      	orrs	r3, r2
 8011d86:	6043      	str	r3, [r0, #4]
 8011d88:	4770      	bx	lr
 8011d8a:	bf00      	nop
 8011d8c:	0000      	movs	r0, r0
	...

08011d90 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8011d90:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8011d94:	6001      	str	r1, [r0, #0]
 8011d96:	4770      	bx	lr
	...

08011da0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8011da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da4:	b082      	sub	sp, #8
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8011da6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8011da8:	9301      	str	r3, [sp, #4]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011daa:	68cb      	ldr	r3, [r1, #12]
 8011dac:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8011dae:	698e      	ldr	r6, [r1, #24]
 8011db0:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8011db2:	6a0c      	ldr	r4, [r1, #32]
 8011db4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8011db6:	f8d0 c000 	ldr.w	ip, [r0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011dba:	f8df e050 	ldr.w	lr, [pc, #80]	; 8011e0c <DMA_Init+0x6c>
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011dbe:	4698      	mov	r8, r3
 8011dc0:	680b      	ldr	r3, [r1, #0]
 8011dc2:	ea48 0803 	orr.w	r8, r8, r3
 8011dc6:	ea48 0707 	orr.w	r7, r8, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8011dca:	433e      	orrs	r6, r7
 8011dcc:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8011dce:	432c      	orrs	r4, r5
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8011dd0:	9b01      	ldr	r3, [sp, #4]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011dd2:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8011dd4:	690d      	ldr	r5, [r1, #16]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8011dd6:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8011ddc:	684c      	ldr	r4, [r1, #4]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8011dde:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8011de0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011de2:	ea0c 0e0e 	and.w	lr, ip, lr
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8011de6:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011de8:	ea43 030e 	orr.w	r3, r3, lr
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8011dec:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8011dee:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011df0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8011df2:	6889      	ldr	r1, [r1, #8]
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011df4:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011df8:	4333      	orrs	r3, r6
 8011dfa:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8011dfc:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8011dfe:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8011e00:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8011e02:	60c1      	str	r1, [r0, #12]
}
 8011e04:	b002      	add	sp, #8
 8011e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e0a:	bf00      	nop
 8011e0c:	f01c803f 	.word	0xf01c803f

08011e10 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011e10:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011e12:	b919      	cbnz	r1, 8011e1c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8011e14:	f023 0301 	bic.w	r3, r3, #1
 8011e18:	6003      	str	r3, [r0, #0]
 8011e1a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011e1c:	f043 0301 	orr.w	r3, r3, #1
 8011e20:	6003      	str	r3, [r0, #0]
 8011e22:	4770      	bx	lr
	...

08011e30 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8011e30:	060b      	lsls	r3, r1, #24
 8011e32:	d50c      	bpl.n	8011e4e <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011e34:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8011e36:	b1aa      	cbz	r2, 8011e64 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011e3c:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011e3e:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011e40:	d00f      	beq.n	8011e62 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8011e42:	6803      	ldr	r3, [r0, #0]
 8011e44:	f001 011e 	and.w	r1, r1, #30
 8011e48:	4319      	orrs	r1, r3
 8011e4a:	6001      	str	r1, [r0, #0]
 8011e4c:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011e4e:	2980      	cmp	r1, #128	; 0x80
 8011e50:	d007      	beq.n	8011e62 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8011e52:	2a00      	cmp	r2, #0
 8011e54:	d1f5      	bne.n	8011e42 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8011e56:	6803      	ldr	r3, [r0, #0]
 8011e58:	f001 011e 	and.w	r1, r1, #30
 8011e5c:	ea23 0101 	bic.w	r1, r3, r1
 8011e60:	6001      	str	r1, [r0, #0]
 8011e62:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8011e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011e68:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8011e6a:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011e6c:	d1f3      	bne.n	8011e56 <DMA_ITConfig+0x26>
 8011e6e:	4770      	bx	lr

08011e70 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8011e70:	4b03      	ldr	r3, [pc, #12]	; (8011e80 <EXTI_GetITStatus+0x10>)
 8011e72:	695b      	ldr	r3, [r3, #20]
 8011e74:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 8011e76:	bf14      	ite	ne
 8011e78:	2001      	movne	r0, #1
 8011e7a:	2000      	moveq	r0, #0
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	40013c00 	.word	0x40013c00
	...

08011e90 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8011e90:	4b01      	ldr	r3, [pc, #4]	; (8011e98 <EXTI_ClearITPendingBit+0x8>)
 8011e92:	6158      	str	r0, [r3, #20]
 8011e94:	4770      	bx	lr
 8011e96:	bf00      	nop
 8011e98:	40013c00 	.word	0x40013c00
 8011e9c:	00000000 	.word	0x00000000

08011ea0 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8011ea0:	4b04      	ldr	r3, [pc, #16]	; (8011eb4 <FLASH_Unlock+0x14>)
 8011ea2:	691a      	ldr	r2, [r3, #16]
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	da03      	bge.n	8011eb0 <FLASH_Unlock+0x10>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8011ea8:	4903      	ldr	r1, [pc, #12]	; (8011eb8 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_KEY2;
 8011eaa:	4a04      	ldr	r2, [pc, #16]	; (8011ebc <FLASH_Unlock+0x1c>)
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8011eac:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8011eae:	605a      	str	r2, [r3, #4]
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	40023c00 	.word	0x40023c00
 8011eb8:	45670123 	.word	0x45670123
 8011ebc:	cdef89ab 	.word	0xcdef89ab

08011ec0 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8011ec0:	4b01      	ldr	r3, [pc, #4]	; (8011ec8 <FLASH_ClearFlag+0x8>)
 8011ec2:	60d8      	str	r0, [r3, #12]
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop
 8011ec8:	40023c00 	.word	0x40023c00
 8011ecc:	00000000 	.word	0x00000000

08011ed0 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8011ed0:	4b0e      	ldr	r3, [pc, #56]	; (8011f0c <FLASH_GetStatus+0x3c>)
 8011ed2:	68da      	ldr	r2, [r3, #12]
 8011ed4:	03d2      	lsls	r2, r2, #15
 8011ed6:	d409      	bmi.n	8011eec <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8011ed8:	68da      	ldr	r2, [r3, #12]
 8011eda:	06d1      	lsls	r1, r2, #27
 8011edc:	d501      	bpl.n	8011ee2 <FLASH_GetStatus+0x12>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8011ede:	2006      	movs	r0, #6
 8011ee0:	4770      	bx	lr
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8011ee2:	68da      	ldr	r2, [r3, #12]
 8011ee4:	05d2      	lsls	r2, r2, #23
 8011ee6:	d503      	bpl.n	8011ef0 <FLASH_GetStatus+0x20>
      { 
        flashstatus = FLASH_ERROR_RD;
 8011ee8:	2002      	movs	r0, #2
 8011eea:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8011eec:	2001      	movs	r0, #1
 8011eee:	4770      	bx	lr
      { 
        flashstatus = FLASH_ERROR_RD;
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	f012 0fe0 	tst.w	r2, #224	; 0xe0
 8011ef6:	d001      	beq.n	8011efc <FLASH_GetStatus+0x2c>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8011ef8:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8011efa:	4770      	bx	lr
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	f013 0f02 	tst.w	r3, #2
          {
            flashstatus = FLASH_ERROR_OPERATION;
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8011f02:	bf14      	ite	ne
 8011f04:	2008      	movne	r0, #8
 8011f06:	2009      	moveq	r0, #9
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop
 8011f0c:	40023c00 	.word	0x40023c00

08011f10 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8011f10:	b500      	push	{lr}
 8011f12:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 8011f14:	2309      	movs	r3, #9
 8011f16:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8011f1a:	f7ff ffd9 	bl	8011ed0 <FLASH_GetStatus>
 8011f1e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8011f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d0f7      	beq.n	8011f1a <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8011f2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011f2e:	b2c0      	uxtb	r0, r0
}
 8011f30:	b003      	add	sp, #12
 8011f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f36:	bf00      	nop
	...

08011f40 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8011f40:	b570      	push	{r4, r5, r6, lr}
 8011f42:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8011f44:	b359      	cbz	r1, 8011f9e <FLASH_EraseSector+0x5e>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8011f46:	2901      	cmp	r1, #1
 8011f48:	d02f      	beq.n	8011faa <FLASH_EraseSector+0x6a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
 8011f4a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011f4c:	bf0c      	ite	eq
 8011f4e:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8011f52:	f44f 7440 	movne.w	r4, #768	; 0x300
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8011f56:	f7ff ffdb 	bl	8011f10 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8011f5a:	2809      	cmp	r0, #9
 8011f5c:	d124      	bne.n	8011fa8 <FLASH_EraseSector+0x68>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8011f5e:	4d14      	ldr	r5, [pc, #80]	; (8011fb0 <FLASH_EraseSector+0x70>)
 8011f60:	692b      	ldr	r3, [r5, #16]
 8011f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f66:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 8011f68:	6929      	ldr	r1, [r5, #16]
 8011f6a:	4321      	orrs	r1, r4
 8011f6c:	6129      	str	r1, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 8011f6e:	692b      	ldr	r3, [r5, #16]
 8011f70:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011f74:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8011f76:	692b      	ldr	r3, [r5, #16]
 8011f78:	f043 0302 	orr.w	r3, r3, #2
 8011f7c:	431e      	orrs	r6, r3
 8011f7e:	612e      	str	r6, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8011f80:	692b      	ldr	r3, [r5, #16]
 8011f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f86:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8011f88:	f7ff ffc2 	bl	8011f10 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8011f8c:	692b      	ldr	r3, [r5, #16]
 8011f8e:	f023 0302 	bic.w	r3, r3, #2
 8011f92:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 8011f94:	692b      	ldr	r3, [r5, #16]
 8011f96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011f9a:	612b      	str	r3, [r5, #16]
  }
  /* Return the Erase Status */
  return status;
}
 8011f9c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8011f9e:	460c      	mov	r4, r1
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8011fa0:	f7ff ffb6 	bl	8011f10 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8011fa4:	2809      	cmp	r0, #9
 8011fa6:	d0da      	beq.n	8011f5e <FLASH_EraseSector+0x1e>
    FLASH->CR &= (~FLASH_CR_SER);
    FLASH->CR &= SECTOR_MASK; 
  }
  /* Return the Erase Status */
  return status;
}
 8011fa8:	bd70      	pop	{r4, r5, r6, pc}
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011faa:	f44f 7480 	mov.w	r4, #256	; 0x100
 8011fae:	e7f7      	b.n	8011fa0 <FLASH_EraseSector+0x60>
 8011fb0:	40023c00 	.word	0x40023c00
	...

08011fc0 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8011fc0:	b570      	push	{r4, r5, r6, lr}
 8011fc2:	4605      	mov	r5, r0
 8011fc4:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8011fc6:	f7ff ffa3 	bl	8011f10 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8011fca:	2809      	cmp	r0, #9
 8011fcc:	d000      	beq.n	8011fd0 <FLASH_ProgramHalfWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 8011fce:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8011fd0:	4c0a      	ldr	r4, [pc, #40]	; (8011ffc <FLASH_ProgramHalfWord+0x3c>)
 8011fd2:	6923      	ldr	r3, [r4, #16]
 8011fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fd8:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011fda:	6923      	ldr	r3, [r4, #16]
 8011fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fe0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8011fe2:	6923      	ldr	r3, [r4, #16]
 8011fe4:	f043 0301 	orr.w	r3, r3, #1
 8011fe8:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = Data;
 8011fea:	802e      	strh	r6, [r5, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8011fec:	f7ff ff90 	bl	8011f10 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8011ff0:	6923      	ldr	r3, [r4, #16]
 8011ff2:	f023 0301 	bic.w	r3, r3, #1
 8011ff6:	6123      	str	r3, [r4, #16]
  } 
  /* Return the Program Status */
  return status;
}
 8011ff8:	bd70      	pop	{r4, r5, r6, pc}
 8011ffa:	bf00      	nop
 8011ffc:	40023c00 	.word	0x40023c00

08012000 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8012000:	4a04      	ldr	r2, [pc, #16]	; (8012014 <RCC_AHB1PeriphClockCmd+0x14>)
 8012002:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012004:	b919      	cbnz	r1, 801200e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8012006:	ea23 0000 	bic.w	r0, r3, r0
 801200a:	6310      	str	r0, [r2, #48]	; 0x30
 801200c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 801200e:	4318      	orrs	r0, r3
 8012010:	6310      	str	r0, [r2, #48]	; 0x30
 8012012:	4770      	bx	lr
 8012014:	40023800 	.word	0x40023800
	...

08012020 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8012020:	4a04      	ldr	r2, [pc, #16]	; (8012034 <RCC_APB1PeriphClockCmd+0x14>)
 8012022:	6c13      	ldr	r3, [r2, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012024:	b919      	cbnz	r1, 801202e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8012026:	ea23 0000 	bic.w	r0, r3, r0
 801202a:	6410      	str	r0, [r2, #64]	; 0x40
 801202c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 801202e:	4318      	orrs	r0, r3
 8012030:	6410      	str	r0, [r2, #64]	; 0x40
 8012032:	4770      	bx	lr
 8012034:	40023800 	.word	0x40023800
	...

08012040 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8012040:	4a04      	ldr	r2, [pc, #16]	; (8012054 <RCC_APB2PeriphClockCmd+0x14>)
 8012042:	6c53      	ldr	r3, [r2, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012044:	b919      	cbnz	r1, 801204e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8012046:	ea23 0000 	bic.w	r0, r3, r0
 801204a:	6450      	str	r0, [r2, #68]	; 0x44
 801204c:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 801204e:	4318      	orrs	r0, r3
 8012050:	6450      	str	r0, [r2, #68]	; 0x44
 8012052:	4770      	bx	lr
 8012054:	40023800 	.word	0x40023800
	...

08012060 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8012060:	4a04      	ldr	r2, [pc, #16]	; (8012074 <RCC_APB1PeriphResetCmd+0x14>)
 8012062:	6a13      	ldr	r3, [r2, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012064:	b919      	cbnz	r1, 801206e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8012066:	ea23 0000 	bic.w	r0, r3, r0
 801206a:	6210      	str	r0, [r2, #32]
 801206c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 801206e:	4318      	orrs	r0, r3
 8012070:	6210      	str	r0, [r2, #32]
 8012072:	4770      	bx	lr
 8012074:	40023800 	.word	0x40023800
	...

08012080 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8012080:	4a04      	ldr	r2, [pc, #16]	; (8012094 <RCC_APB2PeriphResetCmd+0x14>)
 8012082:	6a53      	ldr	r3, [r2, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012084:	b919      	cbnz	r1, 801208e <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8012086:	ea23 0000 	bic.w	r0, r3, r0
 801208a:	6250      	str	r0, [r2, #36]	; 0x24
 801208c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 801208e:	4318      	orrs	r0, r3
 8012090:	6250      	str	r0, [r2, #36]	; 0x24
 8012092:	4770      	bx	lr
 8012094:	40023800 	.word	0x40023800
	...

080120a0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80120a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80120a2:	4b60      	ldr	r3, [pc, #384]	; (8012224 <TIM_DeInit+0x184>)
 80120a4:	4298      	cmp	r0, r3
 80120a6:	d035      	beq.n	8012114 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80120a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80120ac:	d03c      	beq.n	8012128 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80120ae:	4b5e      	ldr	r3, [pc, #376]	; (8012228 <TIM_DeInit+0x188>)
 80120b0:	4298      	cmp	r0, r3
 80120b2:	d043      	beq.n	801213c <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 80120b4:	4b5d      	ldr	r3, [pc, #372]	; (801222c <TIM_DeInit+0x18c>)
 80120b6:	4298      	cmp	r0, r3
 80120b8:	d04a      	beq.n	8012150 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80120ba:	4b5d      	ldr	r3, [pc, #372]	; (8012230 <TIM_DeInit+0x190>)
 80120bc:	4298      	cmp	r0, r3
 80120be:	d051      	beq.n	8012164 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80120c0:	4b5c      	ldr	r3, [pc, #368]	; (8012234 <TIM_DeInit+0x194>)
 80120c2:	4298      	cmp	r0, r3
 80120c4:	d058      	beq.n	8012178 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80120c6:	4b5c      	ldr	r3, [pc, #368]	; (8012238 <TIM_DeInit+0x198>)
 80120c8:	4298      	cmp	r0, r3
 80120ca:	d05f      	beq.n	801218c <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80120cc:	4b5b      	ldr	r3, [pc, #364]	; (801223c <TIM_DeInit+0x19c>)
 80120ce:	4298      	cmp	r0, r3
 80120d0:	d066      	beq.n	80121a0 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80120d2:	4b5b      	ldr	r3, [pc, #364]	; (8012240 <TIM_DeInit+0x1a0>)
 80120d4:	4298      	cmp	r0, r3
 80120d6:	d06d      	beq.n	80121b4 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80120d8:	4b5a      	ldr	r3, [pc, #360]	; (8012244 <TIM_DeInit+0x1a4>)
 80120da:	4298      	cmp	r0, r3
 80120dc:	d076      	beq.n	80121cc <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80120de:	4b5a      	ldr	r3, [pc, #360]	; (8012248 <TIM_DeInit+0x1a8>)
 80120e0:	4298      	cmp	r0, r3
 80120e2:	d07f      	beq.n	80121e4 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80120e4:	4b59      	ldr	r3, [pc, #356]	; (801224c <TIM_DeInit+0x1ac>)
 80120e6:	4298      	cmp	r0, r3
 80120e8:	f000 8088 	beq.w	80121fc <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 80120ec:	4b58      	ldr	r3, [pc, #352]	; (8012250 <TIM_DeInit+0x1b0>)
 80120ee:	4298      	cmp	r0, r3
 80120f0:	f000 808e 	beq.w	8012210 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 80120f4:	4b57      	ldr	r3, [pc, #348]	; (8012254 <TIM_DeInit+0x1b4>)
 80120f6:	4298      	cmp	r0, r3
 80120f8:	d000      	beq.n	80120fc <TIM_DeInit+0x5c>
 80120fa:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80120fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012100:	2101      	movs	r1, #1
 8012102:	f7ff ffad 	bl	8012060 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8012106:	f44f 7080 	mov.w	r0, #256	; 0x100
 801210a:	2100      	movs	r1, #0
    }   
  }
}
 801210c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8012110:	f7ff bfa6 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8012114:	2001      	movs	r0, #1
 8012116:	4601      	mov	r1, r0
 8012118:	f7ff ffb2 	bl	8012080 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 801211c:	2001      	movs	r0, #1
 801211e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8012124:	f7ff bfac 	b.w	8012080 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8012128:	2001      	movs	r0, #1
 801212a:	4601      	mov	r1, r0
 801212c:	f7ff ff98 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012130:	2001      	movs	r0, #1
 8012132:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012138:	f7ff bf92 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 801213c:	2002      	movs	r0, #2
 801213e:	2101      	movs	r1, #1
 8012140:	f7ff ff8e 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8012144:	2002      	movs	r0, #2
 8012146:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 801214c:	f7ff bf88 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8012150:	2004      	movs	r0, #4
 8012152:	2101      	movs	r1, #1
 8012154:	f7ff ff84 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8012158:	2004      	movs	r0, #4
 801215a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801215c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8012160:	f7ff bf7e 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8012164:	2008      	movs	r0, #8
 8012166:	2101      	movs	r1, #1
 8012168:	f7ff ff7a 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 801216c:	2008      	movs	r0, #8
 801216e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8012174:	f7ff bf74 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8012178:	2010      	movs	r0, #16
 801217a:	2101      	movs	r1, #1
 801217c:	f7ff ff70 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8012180:	2010      	movs	r0, #16
 8012182:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8012188:	f7ff bf6a 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 801218c:	2020      	movs	r0, #32
 801218e:	2101      	movs	r1, #1
 8012190:	f7ff ff66 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8012194:	2020      	movs	r0, #32
 8012196:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 801219c:	f7ff bf60 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80121a0:	2002      	movs	r0, #2
 80121a2:	2101      	movs	r1, #1
 80121a4:	f7ff ff6c 	bl	8012080 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80121a8:	2002      	movs	r0, #2
 80121aa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80121ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80121b0:	f7ff bf66 	b.w	8012080 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80121b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80121b8:	2101      	movs	r1, #1
 80121ba:	f7ff ff61 	bl	8012080 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80121be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80121c2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80121c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80121c8:	f7ff bf5a 	b.w	8012080 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80121cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80121d0:	2101      	movs	r1, #1
 80121d2:	f7ff ff55 	bl	8012080 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80121d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80121da:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80121dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80121e0:	f7ff bf4e 	b.w	8012080 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80121e4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80121e8:	2101      	movs	r1, #1
 80121ea:	f7ff ff49 	bl	8012080 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80121ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80121f2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80121f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80121f8:	f7ff bf42 	b.w	8012080 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80121fc:	2040      	movs	r0, #64	; 0x40
 80121fe:	2101      	movs	r1, #1
 8012200:	f7ff ff2e 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8012204:	2040      	movs	r0, #64	; 0x40
 8012206:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 801220c:	f7ff bf28 	b.w	8012060 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8012210:	2080      	movs	r0, #128	; 0x80
 8012212:	2101      	movs	r1, #1
 8012214:	f7ff ff24 	bl	8012060 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012218:	2080      	movs	r0, #128	; 0x80
 801221a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801221c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012220:	f7ff bf1e 	b.w	8012060 <RCC_APB1PeriphResetCmd>
 8012224:	40010000 	.word	0x40010000
 8012228:	40000400 	.word	0x40000400
 801222c:	40000800 	.word	0x40000800
 8012230:	40000c00 	.word	0x40000c00
 8012234:	40001000 	.word	0x40001000
 8012238:	40001400 	.word	0x40001400
 801223c:	40010400 	.word	0x40010400
 8012240:	40014000 	.word	0x40014000
 8012244:	40014400 	.word	0x40014400
 8012248:	40014800 	.word	0x40014800
 801224c:	40001800 	.word	0x40001800
 8012250:	40001c00 	.word	0x40001c00
 8012254:	40002000 	.word	0x40002000
	...

08012260 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012260:	4a22      	ldr	r2, [pc, #136]	; (80122ec <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012262:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012264:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012266:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012268:	d012      	beq.n	8012290 <TIM_TimeBaseInit+0x30>
 801226a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801226e:	4290      	cmp	r0, r2
 8012270:	d00e      	beq.n	8012290 <TIM_TimeBaseInit+0x30>
 8012272:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012276:	d00b      	beq.n	8012290 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012278:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 801227c:	4290      	cmp	r0, r2
 801227e:	d007      	beq.n	8012290 <TIM_TimeBaseInit+0x30>
 8012280:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012284:	4290      	cmp	r0, r2
 8012286:	d003      	beq.n	8012290 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012288:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801228c:	4290      	cmp	r0, r2
 801228e:	d103      	bne.n	8012298 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012290:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012296:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8012298:	4a15      	ldr	r2, [pc, #84]	; (80122f0 <TIM_TimeBaseInit+0x90>)
 801229a:	4290      	cmp	r0, r2
 801229c:	d01e      	beq.n	80122dc <TIM_TimeBaseInit+0x7c>
 801229e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80122a2:	4290      	cmp	r0, r2
 80122a4:	d01a      	beq.n	80122dc <TIM_TimeBaseInit+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80122a6:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80122a8:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80122aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80122ae:	4c0f      	ldr	r4, [pc, #60]	; (80122ec <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80122b0:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80122b2:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80122b4:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80122b6:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80122b8:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80122ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80122bc:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80122be:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80122c0:	d006      	beq.n	80122d0 <TIM_TimeBaseInit+0x70>
 80122c2:	4b0c      	ldr	r3, [pc, #48]	; (80122f4 <TIM_TimeBaseInit+0x94>)
 80122c4:	4298      	cmp	r0, r3
 80122c6:	d003      	beq.n	80122d0 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80122c8:	2301      	movs	r3, #1
 80122ca:	6143      	str	r3, [r0, #20]
}
 80122cc:	bc70      	pop	{r4, r5, r6}
 80122ce:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80122d0:	7a8b      	ldrb	r3, [r1, #10]
 80122d2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80122d4:	2301      	movs	r3, #1
 80122d6:	6143      	str	r3, [r0, #20]
}
 80122d8:	bc70      	pop	{r4, r5, r6}
 80122da:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80122dc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80122de:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80122e0:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80122e2:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80122e4:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80122e6:	2301      	movs	r3, #1
 80122e8:	6143      	str	r3, [r0, #20]
 80122ea:	4770      	bx	lr
 80122ec:	40010000 	.word	0x40010000
 80122f0:	40001000 	.word	0x40001000
 80122f4:	40010400 	.word	0x40010400
	...

08012300 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012300:	b929      	cbnz	r1, 801230e <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8012302:	6802      	ldr	r2, [r0, #0]
 8012304:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8012308:	4013      	ands	r3, r2
 801230a:	6003      	str	r3, [r0, #0]
 801230c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801230e:	6803      	ldr	r3, [r0, #0]
 8012310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012314:	6003      	str	r3, [r0, #0]
 8012316:	4770      	bx	lr
	...

08012320 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012320:	b929      	cbnz	r1, 801232e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8012322:	6802      	ldr	r2, [r0, #0]
 8012324:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8012328:	4013      	ands	r3, r2
 801232a:	6003      	str	r3, [r0, #0]
 801232c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801232e:	6803      	ldr	r3, [r0, #0]
 8012330:	f043 0301 	orr.w	r3, r3, #1
 8012334:	6003      	str	r3, [r0, #0]
 8012336:	4770      	bx	lr
	...

08012340 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8012340:	6a02      	ldr	r2, [r0, #32]
 8012342:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8012346:	4013      	ands	r3, r2
 8012348:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801234a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801234c:	898a      	ldrh	r2, [r1, #12]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801234e:	6a04      	ldr	r4, [r0, #32]
 8012350:	884b      	ldrh	r3, [r1, #2]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012352:	6846      	ldr	r6, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012354:	4f17      	ldr	r7, [pc, #92]	; (80123b4 <TIM_OC1Init+0x74>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012356:	f8d0 c018 	ldr.w	ip, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801235a:	f8b1 e000 	ldrh.w	lr, [r1]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801235e:	f64f 75fd 	movw	r5, #65533	; 0xfffd
 8012362:	4025      	ands	r5, r4
 8012364:	4313      	orrs	r3, r2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8012366:	f64f 748c 	movw	r4, #65420	; 0xff8c
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801236a:	432b      	orrs	r3, r5
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801236c:	ea0c 0404 	and.w	r4, ip, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012370:	42b8      	cmp	r0, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8012372:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012374:	b2b2      	uxth	r2, r6
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012376:	ea44 040e 	orr.w	r4, r4, lr
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801237a:	d008      	beq.n	801238e <TIM_OC1Init+0x4e>
 801237c:	4d0e      	ldr	r5, [pc, #56]	; (80123b8 <TIM_OC1Init+0x78>)
 801237e:	42a8      	cmp	r0, r5
 8012380:	d005      	beq.n	801238e <TIM_OC1Init+0x4e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8012382:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012384:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012386:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8012388:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801238a:	6203      	str	r3, [r0, #32]
 801238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 801238e:	89ce      	ldrh	r6, [r1, #14]
 8012390:	f8b1 e012 	ldrh.w	lr, [r1, #18]
 8012394:	8a0d      	ldrh	r5, [r1, #16]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8012396:	888f      	ldrh	r7, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8012398:	f023 0308 	bic.w	r3, r3, #8
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 801239c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80123a0:	4333      	orrs	r3, r6
 80123a2:	ea4e 0505 	orr.w	r5, lr, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80123a6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80123aa:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80123ac:	433b      	orrs	r3, r7
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80123ae:	b292      	uxth	r2, r2
 80123b0:	e7e7      	b.n	8012382 <TIM_OC1Init+0x42>
 80123b2:	bf00      	nop
 80123b4:	40010000 	.word	0x40010000
 80123b8:	40010400 	.word	0x40010400
 80123bc:	00000000 	.word	0x00000000

080123c0 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80123c0:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80123c2:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80123c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80123ca:	4013      	ands	r3, r2
 80123cc:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80123ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80123d2:	f8d0 8020 	ldr.w	r8, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80123d6:	898d      	ldrh	r5, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123d8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80123da:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80123de:	4e1c      	ldr	r6, [pc, #112]	; (8012450 <TIM_OC2Init+0x90>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80123e0:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80123e2:	f64f 72df 	movw	r2, #65503	; 0xffdf
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80123e6:	f648 43ff 	movw	r3, #36095	; 0x8cff
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80123ea:	ea08 0202 	and.w	r2, r8, r2
 80123ee:	ea4c 0505 	orr.w	r5, ip, r5
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80123f2:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80123f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80123fa:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80123fe:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8012400:	b292      	uxth	r2, r2
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012402:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012404:	b29b      	uxth	r3, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012406:	d009      	beq.n	801241c <TIM_OC2Init+0x5c>
 8012408:	4d12      	ldr	r5, [pc, #72]	; (8012454 <TIM_OC2Init+0x94>)
 801240a:	42a8      	cmp	r0, r5
 801240c:	d006      	beq.n	801241c <TIM_OC2Init+0x5c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801240e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012410:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012412:	6183      	str	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8012414:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012416:	6202      	str	r2, [r0, #32]
 8012418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801241c:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801241e:	f8b1 8012 	ldrh.w	r8, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8012422:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8012424:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8012428:	f022 0e80 	bic.w	lr, r2, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801242c:	ea4e 1e05 	orr.w	lr, lr, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8012430:	f64f 75bf 	movw	r5, #65471	; 0xffbf
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8012434:	f424 6640 	bic.w	r6, r4, #3072	; 0xc00
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8012438:	ea0e 0505 	and.w	r5, lr, r5
 801243c:	ea48 0407 	orr.w	r4, r8, r7
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8012440:	ea45 120c 	orr.w	r2, r5, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8012444:	ea46 0484 	orr.w	r4, r6, r4, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8012448:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801244a:	b2a4      	uxth	r4, r4
 801244c:	e7df      	b.n	801240e <TIM_OC2Init+0x4e>
 801244e:	bf00      	nop
 8012450:	40010000 	.word	0x40010000
 8012454:	40010400 	.word	0x40010400
	...

08012460 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8012460:	6a02      	ldr	r2, [r0, #32]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012462:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8012466:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801246a:	4013      	ands	r3, r2
 801246c:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012472:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8012474:	f8b1 e002 	ldrh.w	lr, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8012478:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801247a:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801247c:	4e1a      	ldr	r6, [pc, #104]	; (80124e8 <TIM_OC3Init+0x88>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801247e:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8012480:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8012484:	4013      	ands	r3, r2
 8012486:	ea4e 0404 	orr.w	r4, lr, r4
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 801248a:	f64f 728c 	movw	r2, #65420	; 0xff8c
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 801248e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8012492:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012494:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8012496:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012498:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801249a:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801249e:	d009      	beq.n	80124b4 <TIM_OC3Init+0x54>
 80124a0:	4c12      	ldr	r4, [pc, #72]	; (80124ec <TIM_OC3Init+0x8c>)
 80124a2:	42a0      	cmp	r0, r4
 80124a4:	d006      	beq.n	80124b4 <TIM_OC3Init+0x54>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80124a6:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124a8:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80124aa:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80124ac:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124ae:	6203      	str	r3, [r0, #32]
 80124b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80124b4:	89cc      	ldrh	r4, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80124b6:	f8b1 8012 	ldrh.w	r8, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80124ba:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80124bc:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80124c0:	f423 6e00 	bic.w	lr, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80124c4:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80124c8:	f64f 34ff 	movw	r4, #64511	; 0xfbff
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80124cc:	f425 5640 	bic.w	r6, r5, #12288	; 0x3000
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80124d0:	ea0e 0404 	and.w	r4, lr, r4
 80124d4:	ea48 0507 	orr.w	r5, r8, r7
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80124d8:	ea44 230c 	orr.w	r3, r4, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80124dc:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80124e0:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80124e2:	b2ad      	uxth	r5, r5
 80124e4:	e7df      	b.n	80124a6 <TIM_OC3Init+0x46>
 80124e6:	bf00      	nop
 80124e8:	40010000 	.word	0x40010000
 80124ec:	40010400 	.word	0x40010400

080124f0 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80124f0:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80124f2:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80124f6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80124fa:	4013      	ands	r3, r2
 80124fc:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80124fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012502:	f8d0 8020 	ldr.w	r8, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8012506:	898d      	ldrh	r5, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012508:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801250a:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801250e:	4e13      	ldr	r6, [pc, #76]	; (801255c <TIM_OC4Init+0x6c>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012510:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8012512:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8012516:	f648 42ff 	movw	r2, #36095	; 0x8cff
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 801251a:	ea08 0303 	and.w	r3, r8, r3
 801251e:	ea4c 0505 	orr.w	r5, ip, r5
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8012522:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8012526:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801252a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801252e:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8012530:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012532:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012534:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012536:	d009      	beq.n	801254c <TIM_OC4Init+0x5c>
 8012538:	4d09      	ldr	r5, [pc, #36]	; (8012560 <TIM_OC4Init+0x70>)
 801253a:	42a8      	cmp	r0, r5
 801253c:	d006      	beq.n	801254c <TIM_OC4Init+0x5c>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801253e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012540:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8012542:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8012544:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012546:	6203      	str	r3, [r0, #32]
 8012548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 801254c:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 801254e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8012552:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8012556:	b2a4      	uxth	r4, r4
 8012558:	e7f1      	b.n	801253e <TIM_OC4Init+0x4e>
 801255a:	bf00      	nop
 801255c:	40010000 	.word	0x40010000
 8012560:	40010400 	.word	0x40010400
	...

08012570 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8012570:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8012572:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8012576:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012578:	4319      	orrs	r1, r3
 801257a:	6181      	str	r1, [r0, #24]
 801257c:	4770      	bx	lr
 801257e:	bf00      	nop

08012580 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8012580:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8012582:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8012586:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8012588:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801258c:	b289      	uxth	r1, r1
 801258e:	6181      	str	r1, [r0, #24]
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
	...

080125a0 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80125a0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80125a2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80125a6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80125a8:	4319      	orrs	r1, r3
 80125aa:	61c1      	str	r1, [r0, #28]
 80125ac:	4770      	bx	lr
 80125ae:	bf00      	nop

080125b0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80125b0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80125b2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80125b6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80125b8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80125bc:	b289      	uxth	r1, r1
 80125be:	61c1      	str	r1, [r0, #28]
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
	...

080125d0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80125d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80125d2:	880b      	ldrh	r3, [r1, #0]
 80125d4:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 80125d8:	888f      	ldrh	r7, [r1, #4]
 80125da:	88ce      	ldrh	r6, [r1, #6]
 80125dc:	890d      	ldrh	r5, [r1, #8]
 80125de:	894c      	ldrh	r4, [r1, #10]
 80125e0:	898a      	ldrh	r2, [r1, #12]
 80125e2:	ea4e 0303 	orr.w	r3, lr, r3
 80125e6:	433b      	orrs	r3, r7
 80125e8:	4333      	orrs	r3, r6
 80125ea:	432b      	orrs	r3, r5
 80125ec:	4323      	orrs	r3, r4
 80125ee:	4313      	orrs	r3, r2
 80125f0:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80125f2:	6443      	str	r3, [r0, #68]	; 0x44
 80125f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125f6:	bf00      	nop
	...

08012600 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8012600:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012602:	b919      	cbnz	r1, 801260c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8012604:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012608:	6443      	str	r3, [r0, #68]	; 0x44
 801260a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 801260c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012610:	6443      	str	r3, [r0, #68]	; 0x44
 8012612:	4770      	bx	lr
	...

08012620 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012620:	b929      	cbnz	r1, 801262e <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8012622:	6842      	ldr	r2, [r0, #4]
 8012624:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8012628:	4013      	ands	r3, r2
 801262a:	6043      	str	r3, [r0, #4]
 801262c:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 801262e:	6843      	ldr	r3, [r0, #4]
 8012630:	f043 0301 	orr.w	r3, r3, #1
 8012634:	6043      	str	r3, [r0, #4]
 8012636:	4770      	bx	lr
	...

08012640 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8012640:	43c9      	mvns	r1, r1
 8012642:	b289      	uxth	r1, r1
 8012644:	6101      	str	r1, [r0, #16]
 8012646:	4770      	bx	lr
	...

08012650 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012650:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8012652:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8012656:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012658:	4319      	orrs	r1, r3
 801265a:	6081      	str	r1, [r0, #8]
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop

08012660 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8012660:	6842      	ldr	r2, [r0, #4]
 8012662:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8012666:	4013      	ands	r3, r2
 8012668:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 801266a:	6843      	ldr	r3, [r0, #4]
 801266c:	4319      	orrs	r1, r3
 801266e:	6041      	str	r1, [r0, #4]
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
	...

08012680 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8012680:	6882      	ldr	r2, [r0, #8]
 8012682:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8012686:	4013      	ands	r3, r2
 8012688:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 801268a:	6883      	ldr	r3, [r0, #8]
 801268c:	4319      	orrs	r1, r3
 801268e:	6081      	str	r1, [r0, #8]
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
	...

080126a0 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80126a0:	6882      	ldr	r2, [r0, #8]
 80126a2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80126a6:	4013      	ands	r3, r2
 80126a8:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80126aa:	6883      	ldr	r3, [r0, #8]
 80126ac:	4319      	orrs	r1, r3
 80126ae:	6081      	str	r1, [r0, #8]
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
	...

080126c0 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80126c0:	4a03      	ldr	r2, [pc, #12]	; (80126d0 <WWDG_SetPrescaler+0x10>)
 80126c2:	6853      	ldr	r3, [r2, #4]
 80126c4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80126c8:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80126ca:	6050      	str	r0, [r2, #4]
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	40002c00 	.word	0x40002c00
	...

080126e0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80126e0:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80126e2:	4a08      	ldr	r2, [pc, #32]	; (8012704 <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 80126e4:	2300      	movs	r3, #0
 80126e6:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80126e8:	6853      	ldr	r3, [r2, #4]
 80126ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80126ee:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80126f0:	9b01      	ldr	r3, [sp, #4]
 80126f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80126f6:	4303      	orrs	r3, r0
 80126f8:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80126fa:	9b01      	ldr	r3, [sp, #4]
 80126fc:	6053      	str	r3, [r2, #4]
}
 80126fe:	b002      	add	sp, #8
 8012700:	4770      	bx	lr
 8012702:	bf00      	nop
 8012704:	40002c00 	.word	0x40002c00
	...

08012710 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8012710:	4b02      	ldr	r3, [pc, #8]	; (801271c <WWDG_SetCounter+0xc>)
 8012712:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012716:	6018      	str	r0, [r3, #0]
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	40002c00 	.word	0x40002c00

08012720 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8012720:	4b02      	ldr	r3, [pc, #8]	; (801272c <WWDG_Enable+0xc>)
 8012722:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8012726:	6018      	str	r0, [r3, #0]
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	40002c00 	.word	0x40002c00

08012730 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 8012730:	b508      	push	{r3, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void main_init(void)
{
	bldc_init();
 8012732:	f7fd fdc5 	bl	80102c0 <bldc_init>

	test.print();

	//-- BLDC 시작
	//
	bldc_start();
 8012736:	f7fd fde3 	bl	8010300 <bldc_start>


	return 0;
}
 801273a:	2000      	movs	r0, #0
 801273c:	bd08      	pop	{r3, pc}
 801273e:	bf00      	nop

08012740 <cosf>:
 8012740:	b500      	push	{lr}
 8012742:	ee10 3a10 	vmov	r3, s0
 8012746:	4a1a      	ldr	r2, [pc, #104]	; (80127b0 <cosf+0x70>)
 8012748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801274c:	4293      	cmp	r3, r2
 801274e:	b083      	sub	sp, #12
 8012750:	dd19      	ble.n	8012786 <cosf+0x46>
 8012752:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012756:	db04      	blt.n	8012762 <cosf+0x22>
 8012758:	ee30 0a40 	vsub.f32	s0, s0, s0
 801275c:	b003      	add	sp, #12
 801275e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012762:	4668      	mov	r0, sp
 8012764:	f000 f8cc 	bl	8012900 <__ieee754_rem_pio2f>
 8012768:	f000 0003 	and.w	r0, r0, #3
 801276c:	2801      	cmp	r0, #1
 801276e:	ed9d 0a00 	vldr	s0, [sp]
 8012772:	eddd 0a01 	vldr	s1, [sp, #4]
 8012776:	d012      	beq.n	801279e <cosf+0x5e>
 8012778:	2802      	cmp	r0, #2
 801277a:	d00b      	beq.n	8012794 <cosf+0x54>
 801277c:	b1a0      	cbz	r0, 80127a8 <cosf+0x68>
 801277e:	2001      	movs	r0, #1
 8012780:	f000 fdde 	bl	8013340 <__kernel_sinf>
 8012784:	e7ea      	b.n	801275c <cosf+0x1c>
 8012786:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80127b4 <cosf+0x74>
 801278a:	f000 fa59 	bl	8012c40 <__kernel_cosf>
 801278e:	b003      	add	sp, #12
 8012790:	f85d fb04 	ldr.w	pc, [sp], #4
 8012794:	f000 fa54 	bl	8012c40 <__kernel_cosf>
 8012798:	eeb1 0a40 	vneg.f32	s0, s0
 801279c:	e7de      	b.n	801275c <cosf+0x1c>
 801279e:	f000 fdcf 	bl	8013340 <__kernel_sinf>
 80127a2:	eeb1 0a40 	vneg.f32	s0, s0
 80127a6:	e7d9      	b.n	801275c <cosf+0x1c>
 80127a8:	f000 fa4a 	bl	8012c40 <__kernel_cosf>
 80127ac:	e7d6      	b.n	801275c <cosf+0x1c>
 80127ae:	bf00      	nop
 80127b0:	3f490fd8 	.word	0x3f490fd8
	...

080127c0 <sinf>:
 80127c0:	b500      	push	{lr}
 80127c2:	ee10 3a10 	vmov	r3, s0
 80127c6:	4a1b      	ldr	r2, [pc, #108]	; (8012834 <sinf+0x74>)
 80127c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127cc:	4293      	cmp	r3, r2
 80127ce:	b083      	sub	sp, #12
 80127d0:	dd1a      	ble.n	8012808 <sinf+0x48>
 80127d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80127d6:	db04      	blt.n	80127e2 <sinf+0x22>
 80127d8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80127dc:	b003      	add	sp, #12
 80127de:	f85d fb04 	ldr.w	pc, [sp], #4
 80127e2:	4668      	mov	r0, sp
 80127e4:	f000 f88c 	bl	8012900 <__ieee754_rem_pio2f>
 80127e8:	f000 0003 	and.w	r0, r0, #3
 80127ec:	2801      	cmp	r0, #1
 80127ee:	ed9d 0a00 	vldr	s0, [sp]
 80127f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80127f6:	d015      	beq.n	8012824 <sinf+0x64>
 80127f8:	2802      	cmp	r0, #2
 80127fa:	d00d      	beq.n	8012818 <sinf+0x58>
 80127fc:	b1a8      	cbz	r0, 801282a <sinf+0x6a>
 80127fe:	f000 fa1f 	bl	8012c40 <__kernel_cosf>
 8012802:	eeb1 0a40 	vneg.f32	s0, s0
 8012806:	e7e9      	b.n	80127dc <sinf+0x1c>
 8012808:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8012838 <sinf+0x78>
 801280c:	2000      	movs	r0, #0
 801280e:	f000 fd97 	bl	8013340 <__kernel_sinf>
 8012812:	b003      	add	sp, #12
 8012814:	f85d fb04 	ldr.w	pc, [sp], #4
 8012818:	2001      	movs	r0, #1
 801281a:	f000 fd91 	bl	8013340 <__kernel_sinf>
 801281e:	eeb1 0a40 	vneg.f32	s0, s0
 8012822:	e7db      	b.n	80127dc <sinf+0x1c>
 8012824:	f000 fa0c 	bl	8012c40 <__kernel_cosf>
 8012828:	e7d8      	b.n	80127dc <sinf+0x1c>
 801282a:	2001      	movs	r0, #1
 801282c:	f000 fd88 	bl	8013340 <__kernel_sinf>
 8012830:	e7d4      	b.n	80127dc <sinf+0x1c>
 8012832:	bf00      	nop
 8012834:	3f490fd8 	.word	0x3f490fd8
	...

08012840 <sqrtf>:
 8012840:	b510      	push	{r4, lr}
 8012842:	ed2d 8b02 	vpush	{d8}
 8012846:	4c2a      	ldr	r4, [pc, #168]	; (80128f0 <sqrtf+0xb0>)
 8012848:	b08a      	sub	sp, #40	; 0x28
 801284a:	eef0 8a40 	vmov.f32	s17, s0
 801284e:	f000 f99f 	bl	8012b90 <__ieee754_sqrtf>
 8012852:	f994 3000 	ldrsb.w	r3, [r4]
 8012856:	3301      	adds	r3, #1
 8012858:	eeb0 8a40 	vmov.f32	s16, s0
 801285c:	d009      	beq.n	8012872 <sqrtf+0x32>
 801285e:	eeb0 0a68 	vmov.f32	s0, s17
 8012862:	f000 fe0d 	bl	8013480 <__fpclassifyf>
 8012866:	b120      	cbz	r0, 8012872 <sqrtf+0x32>
 8012868:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801286c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012870:	d405      	bmi.n	801287e <sqrtf+0x3e>
 8012872:	eeb0 0a48 	vmov.f32	s0, s16
 8012876:	b00a      	add	sp, #40	; 0x28
 8012878:	ecbd 8b02 	vpop	{d8}
 801287c:	bd10      	pop	{r4, pc}
 801287e:	2301      	movs	r3, #1
 8012880:	4a1c      	ldr	r2, [pc, #112]	; (80128f4 <sqrtf+0xb4>)
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	ee18 0a90 	vmov	r0, s17
 8012888:	2300      	movs	r3, #0
 801288a:	9201      	str	r2, [sp, #4]
 801288c:	9308      	str	r3, [sp, #32]
 801288e:	f7f9 fdbb 	bl	800c408 <__aeabi_f2d>
 8012892:	7824      	ldrb	r4, [r4, #0]
 8012894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801289c:	b99c      	cbnz	r4, 80128c6 <sqrtf+0x86>
 801289e:	2200      	movs	r2, #0
 80128a0:	2300      	movs	r3, #0
 80128a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80128a6:	4668      	mov	r0, sp
 80128a8:	f000 fd92 	bl	80133d0 <matherr>
 80128ac:	b1a8      	cbz	r0, 80128da <sqrtf+0x9a>
 80128ae:	9b08      	ldr	r3, [sp, #32]
 80128b0:	b9c3      	cbnz	r3, 80128e4 <sqrtf+0xa4>
 80128b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128b6:	f7fa f83b 	bl	800c930 <__aeabi_d2f>
 80128ba:	ee00 0a10 	vmov	s0, r0
 80128be:	b00a      	add	sp, #40	; 0x28
 80128c0:	ecbd 8b02 	vpop	{d8}
 80128c4:	bd10      	pop	{r4, pc}
 80128c6:	2000      	movs	r0, #0
 80128c8:	2100      	movs	r1, #0
 80128ca:	4602      	mov	r2, r0
 80128cc:	460b      	mov	r3, r1
 80128ce:	f7f9 ff19 	bl	800c704 <__aeabi_ddiv>
 80128d2:	2c02      	cmp	r4, #2
 80128d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80128d8:	d1e5      	bne.n	80128a6 <sqrtf+0x66>
 80128da:	f000 fe69 	bl	80135b0 <__errno>
 80128de:	2321      	movs	r3, #33	; 0x21
 80128e0:	6003      	str	r3, [r0, #0]
 80128e2:	e7e4      	b.n	80128ae <sqrtf+0x6e>
 80128e4:	f000 fe64 	bl	80135b0 <__errno>
 80128e8:	9b08      	ldr	r3, [sp, #32]
 80128ea:	6003      	str	r3, [r0, #0]
 80128ec:	e7e1      	b.n	80128b2 <sqrtf+0x72>
 80128ee:	bf00      	nop
 80128f0:	20000810 	.word	0x20000810
 80128f4:	08017610 	.word	0x08017610
	...

08012900 <__ieee754_rem_pio2f>:
 8012900:	b570      	push	{r4, r5, r6, lr}
 8012902:	ee10 3a10 	vmov	r3, s0
 8012906:	4a94      	ldr	r2, [pc, #592]	; (8012b58 <__ieee754_rem_pio2f+0x258>)
 8012908:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801290c:	4294      	cmp	r4, r2
 801290e:	b086      	sub	sp, #24
 8012910:	ee10 6a10 	vmov	r6, s0
 8012914:	4605      	mov	r5, r0
 8012916:	dd66      	ble.n	80129e6 <__ieee754_rem_pio2f+0xe6>
 8012918:	4a90      	ldr	r2, [pc, #576]	; (8012b5c <__ieee754_rem_pio2f+0x25c>)
 801291a:	4294      	cmp	r4, r2
 801291c:	dc1a      	bgt.n	8012954 <__ieee754_rem_pio2f+0x54>
 801291e:	2b00      	cmp	r3, #0
 8012920:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8012b60 <__ieee754_rem_pio2f+0x260>
 8012924:	4a8f      	ldr	r2, [pc, #572]	; (8012b64 <__ieee754_rem_pio2f+0x264>)
 8012926:	f024 040f 	bic.w	r4, r4, #15
 801292a:	f340 80dd 	ble.w	8012ae8 <__ieee754_rem_pio2f+0x1e8>
 801292e:	4294      	cmp	r4, r2
 8012930:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012934:	d066      	beq.n	8012a04 <__ieee754_rem_pio2f+0x104>
 8012936:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8012b68 <__ieee754_rem_pio2f+0x268>
 801293a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801293e:	2001      	movs	r0, #1
 8012940:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012944:	edc5 6a00 	vstr	s13, [r5]
 8012948:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801294c:	edc5 7a01 	vstr	s15, [r5, #4]
 8012950:	b006      	add	sp, #24
 8012952:	bd70      	pop	{r4, r5, r6, pc}
 8012954:	4a85      	ldr	r2, [pc, #532]	; (8012b6c <__ieee754_rem_pio2f+0x26c>)
 8012956:	4294      	cmp	r4, r2
 8012958:	dd66      	ble.n	8012a28 <__ieee754_rem_pio2f+0x128>
 801295a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801295e:	da49      	bge.n	80129f4 <__ieee754_rem_pio2f+0xf4>
 8012960:	15e2      	asrs	r2, r4, #23
 8012962:	3a86      	subs	r2, #134	; 0x86
 8012964:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8012968:	ee07 3a10 	vmov	s14, r3
 801296c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8012970:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8012b70 <__ieee754_rem_pio2f+0x270>
 8012974:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012978:	ee37 7a66 	vsub.f32	s14, s14, s13
 801297c:	edcd 6a03 	vstr	s13, [sp, #12]
 8012980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012984:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8012988:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801298c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012990:	edcd 6a04 	vstr	s13, [sp, #16]
 8012994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012998:	eef5 7a40 	vcmp.f32	s15, #0.0
 801299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a0:	edcd 7a05 	vstr	s15, [sp, #20]
 80129a4:	f040 80b3 	bne.w	8012b0e <__ieee754_rem_pio2f+0x20e>
 80129a8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80129ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b0:	bf14      	ite	ne
 80129b2:	2302      	movne	r3, #2
 80129b4:	2301      	moveq	r3, #1
 80129b6:	496f      	ldr	r1, [pc, #444]	; (8012b74 <__ieee754_rem_pio2f+0x274>)
 80129b8:	2002      	movs	r0, #2
 80129ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80129be:	a803      	add	r0, sp, #12
 80129c0:	4629      	mov	r1, r5
 80129c2:	f000 f9c5 	bl	8012d50 <__kernel_rem_pio2f>
 80129c6:	2e00      	cmp	r6, #0
 80129c8:	da12      	bge.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 80129ca:	ed95 7a00 	vldr	s14, [r5]
 80129ce:	edd5 7a01 	vldr	s15, [r5, #4]
 80129d2:	eeb1 7a47 	vneg.f32	s14, s14
 80129d6:	eef1 7a67 	vneg.f32	s15, s15
 80129da:	4240      	negs	r0, r0
 80129dc:	ed85 7a00 	vstr	s14, [r5]
 80129e0:	edc5 7a01 	vstr	s15, [r5, #4]
 80129e4:	e004      	b.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 80129e6:	2200      	movs	r2, #0
 80129e8:	ed85 0a00 	vstr	s0, [r5]
 80129ec:	6042      	str	r2, [r0, #4]
 80129ee:	2000      	movs	r0, #0
 80129f0:	b006      	add	sp, #24
 80129f2:	bd70      	pop	{r4, r5, r6, pc}
 80129f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80129f8:	2000      	movs	r0, #0
 80129fa:	edc5 7a01 	vstr	s15, [r5, #4]
 80129fe:	edc5 7a00 	vstr	s15, [r5]
 8012a02:	e7f5      	b.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 8012a04:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8012b78 <__ieee754_rem_pio2f+0x278>
 8012a08:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8012b7c <__ieee754_rem_pio2f+0x27c>
 8012a0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a10:	2001      	movs	r0, #1
 8012a12:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012a16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a1a:	edc5 6a00 	vstr	s13, [r5]
 8012a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a22:	edc5 7a01 	vstr	s15, [r5, #4]
 8012a26:	e7e3      	b.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 8012a28:	f000 fcda 	bl	80133e0 <fabsf>
 8012a2c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8012b80 <__ieee754_rem_pio2f+0x280>
 8012a30:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8012b60 <__ieee754_rem_pio2f+0x260>
 8012a34:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8012b68 <__ieee754_rem_pio2f+0x268>
 8012a38:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8012a3c:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a44:	ee17 0a90 	vmov	r0, s15
 8012a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012a4c:	281f      	cmp	r0, #31
 8012a4e:	eeb1 6a66 	vneg.f32	s12, s13
 8012a52:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012a56:	ee66 7a87 	vmul.f32	s15, s13, s14
 8012a5a:	dc1d      	bgt.n	8012a98 <__ieee754_rem_pio2f+0x198>
 8012a5c:	4a49      	ldr	r2, [pc, #292]	; (8012b84 <__ieee754_rem_pio2f+0x284>)
 8012a5e:	1e41      	subs	r1, r0, #1
 8012a60:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8012a64:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d015      	beq.n	8012a98 <__ieee754_rem_pio2f+0x198>
 8012a6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012a70:	ed85 7a00 	vstr	s14, [r5]
 8012a74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012a78:	2e00      	cmp	r6, #0
 8012a7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a7e:	ed85 0a01 	vstr	s0, [r5, #4]
 8012a82:	dab5      	bge.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 8012a84:	eeb1 7a47 	vneg.f32	s14, s14
 8012a88:	eeb1 0a40 	vneg.f32	s0, s0
 8012a8c:	ed85 7a00 	vstr	s14, [r5]
 8012a90:	ed85 0a01 	vstr	s0, [r5, #4]
 8012a94:	4240      	negs	r0, r0
 8012a96:	e7ab      	b.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 8012a98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012a9c:	15e4      	asrs	r4, r4, #23
 8012a9e:	ee17 3a10 	vmov	r3, s14
 8012aa2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8012aa6:	1ae3      	subs	r3, r4, r3
 8012aa8:	2b08      	cmp	r3, #8
 8012aaa:	dde1      	ble.n	8012a70 <__ieee754_rem_pio2f+0x170>
 8012aac:	eddf 7a32 	vldr	s15, [pc, #200]	; 8012b78 <__ieee754_rem_pio2f+0x278>
 8012ab0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012b7c <__ieee754_rem_pio2f+0x27c>
 8012ab4:	eef0 5a40 	vmov.f32	s11, s0
 8012ab8:	eee6 5a27 	vfma.f32	s11, s12, s15
 8012abc:	ee30 0a65 	vsub.f32	s0, s0, s11
 8012ac0:	eea6 0a27 	vfma.f32	s0, s12, s15
 8012ac4:	eef0 7a40 	vmov.f32	s15, s0
 8012ac8:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8012acc:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8012ad0:	ee17 3a10 	vmov	r3, s14
 8012ad4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8012ad8:	1ae4      	subs	r4, r4, r3
 8012ada:	2c19      	cmp	r4, #25
 8012adc:	dc2c      	bgt.n	8012b38 <__ieee754_rem_pio2f+0x238>
 8012ade:	ed85 7a00 	vstr	s14, [r5]
 8012ae2:	eeb0 0a65 	vmov.f32	s0, s11
 8012ae6:	e7c5      	b.n	8012a74 <__ieee754_rem_pio2f+0x174>
 8012ae8:	4294      	cmp	r4, r2
 8012aea:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012aee:	d010      	beq.n	8012b12 <__ieee754_rem_pio2f+0x212>
 8012af0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012b68 <__ieee754_rem_pio2f+0x268>
 8012af4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012af8:	f04f 30ff 	mov.w	r0, #4294967295
 8012afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b00:	edc5 6a00 	vstr	s13, [r5]
 8012b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b08:	edc5 7a01 	vstr	s15, [r5, #4]
 8012b0c:	e770      	b.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 8012b0e:	2303      	movs	r3, #3
 8012b10:	e751      	b.n	80129b6 <__ieee754_rem_pio2f+0xb6>
 8012b12:	eddf 6a19 	vldr	s13, [pc, #100]	; 8012b78 <__ieee754_rem_pio2f+0x278>
 8012b16:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8012b7c <__ieee754_rem_pio2f+0x27c>
 8012b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b22:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012b26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b2a:	edc5 6a00 	vstr	s13, [r5]
 8012b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b32:	edc5 7a01 	vstr	s15, [r5, #4]
 8012b36:	e75b      	b.n	80129f0 <__ieee754_rem_pio2f+0xf0>
 8012b38:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8012b88 <__ieee754_rem_pio2f+0x288>
 8012b3c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8012b8c <__ieee754_rem_pio2f+0x28c>
 8012b40:	eeb0 0a65 	vmov.f32	s0, s11
 8012b44:	eea6 0a07 	vfma.f32	s0, s12, s14
 8012b48:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8012b4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012b50:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8012b54:	e78a      	b.n	8012a6c <__ieee754_rem_pio2f+0x16c>
 8012b56:	bf00      	nop
 8012b58:	3f490fd8 	.word	0x3f490fd8
 8012b5c:	4016cbe3 	.word	0x4016cbe3
 8012b60:	3fc90f80 	.word	0x3fc90f80
 8012b64:	3fc90fd0 	.word	0x3fc90fd0
 8012b68:	37354443 	.word	0x37354443
 8012b6c:	43490f80 	.word	0x43490f80
 8012b70:	43800000 	.word	0x43800000
 8012b74:	080176a0 	.word	0x080176a0
 8012b78:	37354400 	.word	0x37354400
 8012b7c:	2e85a308 	.word	0x2e85a308
 8012b80:	3f22f984 	.word	0x3f22f984
 8012b84:	08017620 	.word	0x08017620
 8012b88:	2e85a300 	.word	0x2e85a300
 8012b8c:	248d3132 	.word	0x248d3132

08012b90 <__ieee754_sqrtf>:
 8012b90:	ee10 3a10 	vmov	r3, s0
 8012b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012b98:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012b9c:	b470      	push	{r4, r5, r6}
 8012b9e:	d230      	bcs.n	8012c02 <__ieee754_sqrtf+0x72>
 8012ba0:	b36a      	cbz	r2, 8012bfe <__ieee754_sqrtf+0x6e>
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	db3d      	blt.n	8012c22 <__ieee754_sqrtf+0x92>
 8012ba6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012baa:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012bae:	d32c      	bcc.n	8012c0a <__ieee754_sqrtf+0x7a>
 8012bb0:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8012bb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012bb8:	07d1      	lsls	r1, r2, #31
 8012bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012bbe:	bf48      	it	mi
 8012bc0:	005b      	lslmi	r3, r3, #1
 8012bc2:	2400      	movs	r4, #0
 8012bc4:	1056      	asrs	r6, r2, #1
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4625      	mov	r5, r4
 8012bca:	2119      	movs	r1, #25
 8012bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012bd0:	18a8      	adds	r0, r5, r2
 8012bd2:	4298      	cmp	r0, r3
 8012bd4:	dc02      	bgt.n	8012bdc <__ieee754_sqrtf+0x4c>
 8012bd6:	1a1b      	subs	r3, r3, r0
 8012bd8:	1885      	adds	r5, r0, r2
 8012bda:	4414      	add	r4, r2
 8012bdc:	3901      	subs	r1, #1
 8012bde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012be2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012be6:	d1f3      	bne.n	8012bd0 <__ieee754_sqrtf+0x40>
 8012be8:	b113      	cbz	r3, 8012bf0 <__ieee754_sqrtf+0x60>
 8012bea:	f004 0301 	and.w	r3, r4, #1
 8012bee:	441c      	add	r4, r3
 8012bf0:	1064      	asrs	r4, r4, #1
 8012bf2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8012bf6:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8012bfa:	ee00 3a10 	vmov	s0, r3
 8012bfe:	bc70      	pop	{r4, r5, r6}
 8012c00:	4770      	bx	lr
 8012c02:	eea0 0a00 	vfma.f32	s0, s0, s0
 8012c06:	bc70      	pop	{r4, r5, r6}
 8012c08:	4770      	bx	lr
 8012c0a:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 8012c0e:	d10d      	bne.n	8012c2c <__ieee754_sqrtf+0x9c>
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	0218      	lsls	r0, r3, #8
 8012c14:	f102 0201 	add.w	r2, r2, #1
 8012c18:	d5fa      	bpl.n	8012c10 <__ieee754_sqrtf+0x80>
 8012c1a:	f1c2 0201 	rsb	r2, r2, #1
 8012c1e:	4411      	add	r1, r2
 8012c20:	e7c6      	b.n	8012bb0 <__ieee754_sqrtf+0x20>
 8012c22:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012c26:	ee80 0a00 	vdiv.f32	s0, s0, s0
 8012c2a:	e7e8      	b.n	8012bfe <__ieee754_sqrtf+0x6e>
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	4411      	add	r1, r2
 8012c30:	e7be      	b.n	8012bb0 <__ieee754_sqrtf+0x20>
 8012c32:	bf00      	nop
	...

08012c40 <__kernel_cosf>:
 8012c40:	ee10 3a10 	vmov	r3, s0
 8012c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012c4c:	da2c      	bge.n	8012ca8 <__kernel_cosf+0x68>
 8012c4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012c52:	ee17 3a90 	vmov	r3, s15
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d060      	beq.n	8012d1c <__kernel_cosf+0xdc>
 8012c5a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012c5e:	eddf 4a31 	vldr	s9, [pc, #196]	; 8012d24 <__kernel_cosf+0xe4>
 8012c62:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012d28 <__kernel_cosf+0xe8>
 8012c66:	eddf 5a31 	vldr	s11, [pc, #196]	; 8012d2c <__kernel_cosf+0xec>
 8012c6a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012d30 <__kernel_cosf+0xf0>
 8012c6e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012d34 <__kernel_cosf+0xf4>
 8012c72:	eddf 6a31 	vldr	s13, [pc, #196]	; 8012d38 <__kernel_cosf+0xf8>
 8012c76:	eea7 5a24 	vfma.f32	s10, s14, s9
 8012c7a:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012c7e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012c82:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012c86:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012c8a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012c8e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012c92:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8012c96:	eee7 0a26 	vfma.f32	s1, s14, s13
 8012c9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8012c9e:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8012ca2:	ee37 0ae0 	vsub.f32	s0, s15, s1
 8012ca6:	4770      	bx	lr
 8012ca8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012cac:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8012d24 <__kernel_cosf+0xe4>
 8012cb0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8012d28 <__kernel_cosf+0xe8>
 8012cb4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012d2c <__kernel_cosf+0xec>
 8012cb8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8012d30 <__kernel_cosf+0xf0>
 8012cbc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8012d34 <__kernel_cosf+0xf4>
 8012cc0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8012d38 <__kernel_cosf+0xf8>
 8012cc4:	4a1d      	ldr	r2, [pc, #116]	; (8012d3c <__kernel_cosf+0xfc>)
 8012cc6:	eea7 5a24 	vfma.f32	s10, s14, s9
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012cd0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012cd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012cd8:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012cdc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012ce0:	ddd5      	ble.n	8012c8e <__kernel_cosf+0x4e>
 8012ce2:	4a17      	ldr	r2, [pc, #92]	; (8012d40 <__kernel_cosf+0x100>)
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	dc14      	bgt.n	8012d12 <__kernel_cosf+0xd2>
 8012ce8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8012cec:	ee07 3a90 	vmov	s15, r3
 8012cf0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x70
 8012cf4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012cf8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012cfc:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 8012d00:	eee7 0a26 	vfma.f32	s1, s14, s13
 8012d04:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012d08:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012d0c:	ee36 0a67 	vsub.f32	s0, s12, s15
 8012d10:	4770      	bx	lr
 8012d12:	eeb6 6a07 	vmov.f32	s12, #103	; 0x67
 8012d16:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 8012d1a:	e7ed      	b.n	8012cf8 <__kernel_cosf+0xb8>
 8012d1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	ad47d74e 	.word	0xad47d74e
 8012d28:	310f74f6 	.word	0x310f74f6
 8012d2c:	b493f27c 	.word	0xb493f27c
 8012d30:	37d00d01 	.word	0x37d00d01
 8012d34:	bab60b61 	.word	0xbab60b61
 8012d38:	3d2aaaab 	.word	0x3d2aaaab
 8012d3c:	3e999999 	.word	0x3e999999
 8012d40:	3f480000 	.word	0x3f480000
	...

08012d50 <__kernel_rem_pio2f>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	ed2d 8b04 	vpush	{d8-d9}
 8012d58:	b0d7      	sub	sp, #348	; 0x15c
 8012d5a:	1e5f      	subs	r7, r3, #1
 8012d5c:	4cd7      	ldr	r4, [pc, #860]	; (80130bc <__kernel_rem_pio2f+0x36c>)
 8012d5e:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8012d60:	9302      	str	r3, [sp, #8]
 8012d62:	1ed3      	subs	r3, r2, #3
 8012d64:	bf48      	it	mi
 8012d66:	1d13      	addmi	r3, r2, #4
 8012d68:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8012d6c:	9101      	str	r1, [sp, #4]
 8012d6e:	10db      	asrs	r3, r3, #3
 8012d70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d74:	ea6f 0b03 	mvn.w	fp, r3
 8012d78:	19b9      	adds	r1, r7, r6
 8012d7a:	9303      	str	r3, [sp, #12]
 8012d7c:	4682      	mov	sl, r0
 8012d7e:	eb02 0bcb 	add.w	fp, r2, fp, lsl #3
 8012d82:	eba3 0307 	sub.w	r3, r3, r7
 8012d86:	d414      	bmi.n	8012db2 <__kernel_rem_pio2f+0x62>
 8012d88:	4419      	add	r1, r3
 8012d8a:	9865      	ldr	r0, [sp, #404]	; 0x194
 8012d8c:	3101      	adds	r1, #1
 8012d8e:	aa1a      	add	r2, sp, #104	; 0x68
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	bfaa      	itet	ge
 8012d94:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8012d98:	eddf 7acc 	vldrlt	s15, [pc, #816]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8012d9c:	ee07 4a90 	vmovge	s15, r4
 8012da0:	f103 0301 	add.w	r3, r3, #1
 8012da4:	bfa8      	it	ge
 8012da6:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8012daa:	428b      	cmp	r3, r1
 8012dac:	ece2 7a01 	vstmia	r2!, {s15}
 8012db0:	d1ee      	bne.n	8012d90 <__kernel_rem_pio2f+0x40>
 8012db2:	2e00      	cmp	r6, #0
 8012db4:	db1a      	blt.n	8012dec <__kernel_rem_pio2f+0x9c>
 8012db6:	9b02      	ldr	r3, [sp, #8]
 8012db8:	a91a      	add	r1, sp, #104	; 0x68
 8012dba:	1c74      	adds	r4, r6, #1
 8012dbc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8012dc0:	a842      	add	r0, sp, #264	; 0x108
 8012dc2:	009d      	lsls	r5, r3, #2
 8012dc4:	2f00      	cmp	r7, #0
 8012dc6:	f2c0 81ba 	blt.w	801313e <__kernel_rem_pio2f+0x3ee>
 8012dca:	eddf 7ac0 	vldr	s15, [pc, #768]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8012dce:	4652      	mov	r2, sl
 8012dd0:	194b      	adds	r3, r1, r5
 8012dd2:	ed33 7a01 	vldmdb	r3!, {s14}
 8012dd6:	ecf2 6a01 	vldmia	r2!, {s13}
 8012dda:	4299      	cmp	r1, r3
 8012ddc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012de0:	d1f7      	bne.n	8012dd2 <__kernel_rem_pio2f+0x82>
 8012de2:	3104      	adds	r1, #4
 8012de4:	42a1      	cmp	r1, r4
 8012de6:	ece0 7a01 	vstmia	r0!, {s15}
 8012dea:	d1eb      	bne.n	8012dc4 <__kernel_rem_pio2f+0x74>
 8012dec:	9a02      	ldr	r2, [sp, #8]
 8012dee:	eddf 8ab4 	vldr	s17, [pc, #720]	; 80130c0 <__kernel_rem_pio2f+0x370>
 8012df2:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 80130c4 <__kernel_rem_pio2f+0x374>
 8012df6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8012dfa:	3b01      	subs	r3, #1
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	ebc2 7982 	rsb	r9, r2, r2, lsl #30
 8012e02:	aa06      	add	r2, sp, #24
 8012e04:	f103 0804 	add.w	r8, r3, #4
 8012e08:	4413      	add	r3, r2
 8012e0a:	4490      	add	r8, r2
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8012e12:	4634      	mov	r4, r6
 8012e14:	00a5      	lsls	r5, r4, #2
 8012e16:	ab56      	add	r3, sp, #344	; 0x158
 8012e18:	442b      	add	r3, r5
 8012e1a:	2c00      	cmp	r4, #0
 8012e1c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8012e20:	dd18      	ble.n	8012e54 <__kernel_rem_pio2f+0x104>
 8012e22:	a942      	add	r1, sp, #264	; 0x108
 8012e24:	194b      	adds	r3, r1, r5
 8012e26:	aa05      	add	r2, sp, #20
 8012e28:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012e2c:	eeb0 7a40 	vmov.f32	s14, s0
 8012e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e34:	ed73 6a01 	vldmdb	r3!, {s13}
 8012e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e3c:	428b      	cmp	r3, r1
 8012e3e:	eea7 7ac8 	vfms.f32	s14, s15, s16
 8012e42:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8012e46:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012e4a:	ee17 0a10 	vmov	r0, s14
 8012e4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e52:	d1e9      	bne.n	8012e28 <__kernel_rem_pio2f+0xd8>
 8012e54:	4658      	mov	r0, fp
 8012e56:	f000 fb33 	bl	80134c0 <scalbnf>
 8012e5a:	eeb0 9a40 	vmov.f32	s18, s0
 8012e5e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x40
 8012e62:	ee29 0a00 	vmul.f32	s0, s18, s0
 8012e66:	f000 fac3 	bl	80133f0 <floorf>
 8012e6a:	eef2 7a00 	vmov.f32	s15, #32
 8012e6e:	eea0 9a67 	vfms.f32	s18, s0, s15
 8012e72:	f1bb 0f00 	cmp.w	fp, #0
 8012e76:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 8012e7a:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8012e7e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8012e82:	f340 8141 	ble.w	8013108 <__kernel_rem_pio2f+0x3b8>
 8012e86:	1e60      	subs	r0, r4, #1
 8012e88:	aa06      	add	r2, sp, #24
 8012e8a:	f1cb 0308 	rsb	r3, fp, #8
 8012e8e:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8012e92:	fa41 f203 	asr.w	r2, r1, r3
 8012e96:	fa02 f303 	lsl.w	r3, r2, r3
 8012e9a:	f10d 0e18 	add.w	lr, sp, #24
 8012e9e:	1ac9      	subs	r1, r1, r3
 8012ea0:	f84e 1020 	str.w	r1, [lr, r0, lsl #2]
 8012ea4:	ee19 0a90 	vmov	r0, s19
 8012ea8:	4410      	add	r0, r2
 8012eaa:	f1cb 0307 	rsb	r3, fp, #7
 8012eae:	ee09 0a90 	vmov	s19, r0
 8012eb2:	4119      	asrs	r1, r3
 8012eb4:	2900      	cmp	r1, #0
 8012eb6:	dd39      	ble.n	8012f2c <__kernel_rem_pio2f+0x1dc>
 8012eb8:	ee19 3a90 	vmov	r3, s19
 8012ebc:	2c00      	cmp	r4, #0
 8012ebe:	f103 0301 	add.w	r3, r3, #1
 8012ec2:	ee09 3a90 	vmov	s19, r3
 8012ec6:	f340 81cb 	ble.w	8013260 <__kernel_rem_pio2f+0x510>
 8012eca:	2200      	movs	r2, #0
 8012ecc:	4610      	mov	r0, r2
 8012ece:	f10d 0e14 	add.w	lr, sp, #20
 8012ed2:	e008      	b.n	8012ee6 <__kernel_rem_pio2f+0x196>
 8012ed4:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8012ed8:	b113      	cbz	r3, 8012ee0 <__kernel_rem_pio2f+0x190>
 8012eda:	f8ce c000 	str.w	ip, [lr]
 8012ede:	2001      	movs	r0, #1
 8012ee0:	3201      	adds	r2, #1
 8012ee2:	4294      	cmp	r4, r2
 8012ee4:	dd0c      	ble.n	8012f00 <__kernel_rem_pio2f+0x1b0>
 8012ee6:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d0f2      	beq.n	8012ed4 <__kernel_rem_pio2f+0x184>
 8012eee:	3201      	adds	r2, #1
 8012ef0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012ef4:	4294      	cmp	r4, r2
 8012ef6:	f8ce 3000 	str.w	r3, [lr]
 8012efa:	f04f 0001 	mov.w	r0, #1
 8012efe:	dcf2      	bgt.n	8012ee6 <__kernel_rem_pio2f+0x196>
 8012f00:	f1bb 0f00 	cmp.w	fp, #0
 8012f04:	dd10      	ble.n	8012f28 <__kernel_rem_pio2f+0x1d8>
 8012f06:	f1bb 0f01 	cmp.w	fp, #1
 8012f0a:	f000 8104 	beq.w	8013116 <__kernel_rem_pio2f+0x3c6>
 8012f0e:	f1bb 0f02 	cmp.w	fp, #2
 8012f12:	d109      	bne.n	8012f28 <__kernel_rem_pio2f+0x1d8>
 8012f14:	1e62      	subs	r2, r4, #1
 8012f16:	ab06      	add	r3, sp, #24
 8012f18:	f10d 0e18 	add.w	lr, sp, #24
 8012f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f24:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 8012f28:	2902      	cmp	r1, #2
 8012f2a:	d059      	beq.n	8012fe0 <__kernel_rem_pio2f+0x290>
 8012f2c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f34:	d166      	bne.n	8013004 <__kernel_rem_pio2f+0x2b4>
 8012f36:	1e63      	subs	r3, r4, #1
 8012f38:	429e      	cmp	r6, r3
 8012f3a:	dc0b      	bgt.n	8012f54 <__kernel_rem_pio2f+0x204>
 8012f3c:	aa06      	add	r2, sp, #24
 8012f3e:	4415      	add	r5, r2
 8012f40:	2200      	movs	r2, #0
 8012f42:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8012f46:	4545      	cmp	r5, r8
 8012f48:	ea42 0200 	orr.w	r2, r2, r0
 8012f4c:	d1f9      	bne.n	8012f42 <__kernel_rem_pio2f+0x1f2>
 8012f4e:	2a00      	cmp	r2, #0
 8012f50:	f040 8170 	bne.w	8013234 <__kernel_rem_pio2f+0x4e4>
 8012f54:	1e73      	subs	r3, r6, #1
 8012f56:	aa06      	add	r2, sp, #24
 8012f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	f040 817c 	bne.w	801325a <__kernel_rem_pio2f+0x50a>
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	f04f 0e01 	mov.w	lr, #1
 8012f68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012f6c:	f10e 0e01 	add.w	lr, lr, #1
 8012f70:	2a00      	cmp	r2, #0
 8012f72:	d0f9      	beq.n	8012f68 <__kernel_rem_pio2f+0x218>
 8012f74:	44a6      	add	lr, r4
 8012f76:	1c63      	adds	r3, r4, #1
 8012f78:	4573      	cmp	r3, lr
 8012f7a:	dc2f      	bgt.n	8012fdc <__kernel_rem_pio2f+0x28c>
 8012f7c:	9a03      	ldr	r2, [sp, #12]
 8012f7e:	189d      	adds	r5, r3, r2
 8012f80:	9a02      	ldr	r2, [sp, #8]
 8012f82:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8012f86:	18a0      	adds	r0, r4, r2
 8012f88:	eb0e 0c02 	add.w	ip, lr, r2
 8012f8c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012f8e:	3d01      	subs	r5, #1
 8012f90:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8012f94:	aa1a      	add	r2, sp, #104	; 0x68
 8012f96:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8012f9a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8012f9e:	aa42      	add	r2, sp, #264	; 0x108
 8012fa0:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8012fa4:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8012fa8:	ee07 3a90 	vmov	s15, r3
 8012fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fb0:	2f00      	cmp	r7, #0
 8012fb2:	ece0 7a01 	vstmia	r0!, {s15}
 8012fb6:	eddf 7a45 	vldr	s15, [pc, #276]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8012fba:	db0b      	blt.n	8012fd4 <__kernel_rem_pio2f+0x284>
 8012fbc:	4652      	mov	r2, sl
 8012fbe:	eb00 0109 	add.w	r1, r0, r9
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	ed33 7a01 	vldmdb	r3!, {s14}
 8012fc8:	ecf2 6a01 	vldmia	r2!, {s13}
 8012fcc:	428b      	cmp	r3, r1
 8012fce:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012fd2:	d1f7      	bne.n	8012fc4 <__kernel_rem_pio2f+0x274>
 8012fd4:	4560      	cmp	r0, ip
 8012fd6:	ece4 7a01 	vstmia	r4!, {s15}
 8012fda:	d1e3      	bne.n	8012fa4 <__kernel_rem_pio2f+0x254>
 8012fdc:	4674      	mov	r4, lr
 8012fde:	e719      	b.n	8012e14 <__kernel_rem_pio2f+0xc4>
 8012fe0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8012fe4:	ee30 9a49 	vsub.f32	s18, s0, s18
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d09f      	beq.n	8012f2c <__kernel_rem_pio2f+0x1dc>
 8012fec:	4658      	mov	r0, fp
 8012fee:	9105      	str	r1, [sp, #20]
 8012ff0:	f000 fa66 	bl	80134c0 <scalbnf>
 8012ff4:	ee39 9a40 	vsub.f32	s18, s18, s0
 8012ff8:	9905      	ldr	r1, [sp, #20]
 8012ffa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013002:	d098      	beq.n	8012f36 <__kernel_rem_pio2f+0x1e6>
 8013004:	eeb0 0a49 	vmov.f32	s0, s18
 8013008:	f1cb 0000 	rsb	r0, fp, #0
 801300c:	9102      	str	r1, [sp, #8]
 801300e:	f000 fa57 	bl	80134c0 <scalbnf>
 8013012:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80130c4 <__kernel_rem_pio2f+0x374>
 8013016:	9902      	ldr	r1, [sp, #8]
 8013018:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013020:	f2c0 817e 	blt.w	8013320 <__kernel_rem_pio2f+0x5d0>
 8013024:	eddf 7a26 	vldr	s15, [pc, #152]	; 80130c0 <__kernel_rem_pio2f+0x370>
 8013028:	ee60 7a27 	vmul.f32	s15, s0, s15
 801302c:	a806      	add	r0, sp, #24
 801302e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013032:	1c63      	adds	r3, r4, #1
 8013034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013038:	f10b 0b08 	add.w	fp, fp, #8
 801303c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013044:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013048:	ee10 2a10 	vmov	r2, s0
 801304c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8013050:	ee17 2a90 	vmov	r2, s15
 8013054:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013058:	4658      	mov	r0, fp
 801305a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 801305e:	9303      	str	r3, [sp, #12]
 8013060:	9102      	str	r1, [sp, #8]
 8013062:	f000 fa2d 	bl	80134c0 <scalbnf>
 8013066:	9b03      	ldr	r3, [sp, #12]
 8013068:	9902      	ldr	r1, [sp, #8]
 801306a:	2b00      	cmp	r3, #0
 801306c:	f2c0 80c7 	blt.w	80131fe <__kernel_rem_pio2f+0x4ae>
 8013070:	f103 0e01 	add.w	lr, r3, #1
 8013074:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8013078:	ac42      	add	r4, sp, #264	; 0x108
 801307a:	a806      	add	r0, sp, #24
 801307c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80130c0 <__kernel_rem_pio2f+0x370>
 8013080:	4410      	add	r0, r2
 8013082:	18a7      	adds	r7, r4, r2
 8013084:	ed70 7a01 	vldmdb	r0!, {s15}
 8013088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801308c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013090:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013094:	ed67 7a01 	vstmdb	r7!, {s15}
 8013098:	42a7      	cmp	r7, r4
 801309a:	d1f3      	bne.n	8013084 <__kernel_rem_pio2f+0x334>
 801309c:	3a04      	subs	r2, #4
 801309e:	4417      	add	r7, r2
 80130a0:	2500      	movs	r5, #0
 80130a2:	2e00      	cmp	r6, #0
 80130a4:	f2c0 80a8 	blt.w	80131f8 <__kernel_rem_pio2f+0x4a8>
 80130a8:	2d00      	cmp	r5, #0
 80130aa:	f2c0 80a5 	blt.w	80131f8 <__kernel_rem_pio2f+0x4a8>
 80130ae:	4c06      	ldr	r4, [pc, #24]	; (80130c8 <__kernel_rem_pio2f+0x378>)
 80130b0:	eddf 7a06 	vldr	s15, [pc, #24]	; 80130cc <__kernel_rem_pio2f+0x37c>
 80130b4:	4638      	mov	r0, r7
 80130b6:	2200      	movs	r2, #0
 80130b8:	e00c      	b.n	80130d4 <__kernel_rem_pio2f+0x384>
 80130ba:	bf00      	nop
 80130bc:	080179c0 	.word	0x080179c0
 80130c0:	3b800000 	.word	0x3b800000
 80130c4:	43800000 	.word	0x43800000
 80130c8:	080179d0 	.word	0x080179d0
 80130cc:	00000000 	.word	0x00000000
 80130d0:	42aa      	cmp	r2, r5
 80130d2:	dc08      	bgt.n	80130e6 <__kernel_rem_pio2f+0x396>
 80130d4:	ecf4 6a01 	vldmia	r4!, {s13}
 80130d8:	ecb0 7a01 	vldmia	r0!, {s14}
 80130dc:	3201      	adds	r2, #1
 80130de:	4296      	cmp	r6, r2
 80130e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80130e4:	daf4      	bge.n	80130d0 <__kernel_rem_pio2f+0x380>
 80130e6:	aa56      	add	r2, sp, #344	; 0x158
 80130e8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80130ec:	3501      	adds	r5, #1
 80130ee:	4575      	cmp	r5, lr
 80130f0:	f1a7 0704 	sub.w	r7, r7, #4
 80130f4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80130f8:	d1d3      	bne.n	80130a2 <__kernel_rem_pio2f+0x352>
 80130fa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80130fc:	2a03      	cmp	r2, #3
 80130fe:	d85f      	bhi.n	80131c0 <__kernel_rem_pio2f+0x470>
 8013100:	e8df f002 	tbb	[pc, r2]
 8013104:	b0373767 	.word	0xb0373767
 8013108:	d110      	bne.n	801312c <__kernel_rem_pio2f+0x3dc>
 801310a:	1e63      	subs	r3, r4, #1
 801310c:	aa06      	add	r2, sp, #24
 801310e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013112:	1209      	asrs	r1, r1, #8
 8013114:	e6ce      	b.n	8012eb4 <__kernel_rem_pio2f+0x164>
 8013116:	1e62      	subs	r2, r4, #1
 8013118:	ab06      	add	r3, sp, #24
 801311a:	f10d 0e18 	add.w	lr, sp, #24
 801311e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013126:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 801312a:	e6fd      	b.n	8012f28 <__kernel_rem_pio2f+0x1d8>
 801312c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8013130:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013138:	da0a      	bge.n	8013150 <__kernel_rem_pio2f+0x400>
 801313a:	2100      	movs	r1, #0
 801313c:	e6f6      	b.n	8012f2c <__kernel_rem_pio2f+0x1dc>
 801313e:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8013142:	3104      	adds	r1, #4
 8013144:	42a1      	cmp	r1, r4
 8013146:	ece0 7a01 	vstmia	r0!, {s15}
 801314a:	f47f ae3b 	bne.w	8012dc4 <__kernel_rem_pio2f+0x74>
 801314e:	e64d      	b.n	8012dec <__kernel_rem_pio2f+0x9c>
 8013150:	ee19 3a90 	vmov	r3, s19
 8013154:	2c00      	cmp	r4, #0
 8013156:	f103 0301 	add.w	r3, r3, #1
 801315a:	ee09 3a90 	vmov	s19, r3
 801315e:	bfc8      	it	gt
 8013160:	2102      	movgt	r1, #2
 8013162:	f73f aeb2 	bgt.w	8012eca <__kernel_rem_pio2f+0x17a>
 8013166:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 801316a:	ee37 9ac9 	vsub.f32	s18, s15, s18
 801316e:	2102      	movs	r1, #2
 8013170:	e6dc      	b.n	8012f2c <__kernel_rem_pio2f+0x1dc>
 8013172:	aa2e      	add	r2, sp, #184	; 0xb8
 8013174:	ed5f 7a2b 	vldr	s15, [pc, #-172]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8013178:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 801317c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8013180:	4596      	cmp	lr, r2
 8013182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013186:	d1f9      	bne.n	801317c <__kernel_rem_pio2f+0x42c>
 8013188:	2900      	cmp	r1, #0
 801318a:	d043      	beq.n	8013214 <__kernel_rem_pio2f+0x4c4>
 801318c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8013190:	9a01      	ldr	r2, [sp, #4]
 8013192:	eeb1 7a67 	vneg.f32	s14, s15
 8013196:	2b00      	cmp	r3, #0
 8013198:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801319c:	ed82 7a00 	vstr	s14, [r2]
 80131a0:	dd09      	ble.n	80131b6 <__kernel_rem_pio2f+0x466>
 80131a2:	a82f      	add	r0, sp, #188	; 0xbc
 80131a4:	2201      	movs	r2, #1
 80131a6:	ecb0 7a01 	vldmia	r0!, {s14}
 80131aa:	3201      	adds	r2, #1
 80131ac:	4293      	cmp	r3, r2
 80131ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131b2:	daf8      	bge.n	80131a6 <__kernel_rem_pio2f+0x456>
 80131b4:	b109      	cbz	r1, 80131ba <__kernel_rem_pio2f+0x46a>
 80131b6:	eef1 7a67 	vneg.f32	s15, s15
 80131ba:	9b01      	ldr	r3, [sp, #4]
 80131bc:	edc3 7a01 	vstr	s15, [r3, #4]
 80131c0:	ee19 3a90 	vmov	r3, s19
 80131c4:	f003 0007 	and.w	r0, r3, #7
 80131c8:	b057      	add	sp, #348	; 0x15c
 80131ca:	ecbd 8b04 	vpop	{d8-d9}
 80131ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d2:	aa2e      	add	r2, sp, #184	; 0xb8
 80131d4:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 80130cc <__kernel_rem_pio2f+0x37c>
 80131d8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80131dc:	ed3e 7a01 	vldmdb	lr!, {s14}
 80131e0:	3b01      	subs	r3, #1
 80131e2:	1c5a      	adds	r2, r3, #1
 80131e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131e8:	d1f8      	bne.n	80131dc <__kernel_rem_pio2f+0x48c>
 80131ea:	b109      	cbz	r1, 80131f0 <__kernel_rem_pio2f+0x4a0>
 80131ec:	eef1 7a67 	vneg.f32	s15, s15
 80131f0:	9b01      	ldr	r3, [sp, #4]
 80131f2:	edc3 7a00 	vstr	s15, [r3]
 80131f6:	e7e3      	b.n	80131c0 <__kernel_rem_pio2f+0x470>
 80131f8:	ed5f 7a4c 	vldr	s15, [pc, #-304]	; 80130cc <__kernel_rem_pio2f+0x37c>
 80131fc:	e773      	b.n	80130e6 <__kernel_rem_pio2f+0x396>
 80131fe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013200:	2a03      	cmp	r2, #3
 8013202:	d8dd      	bhi.n	80131c0 <__kernel_rem_pio2f+0x470>
 8013204:	e8df f002 	tbb	[pc, r2]
 8013208:	80020213 	.word	0x80020213
 801320c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8013210:	2900      	cmp	r1, #0
 8013212:	d1bb      	bne.n	801318c <__kernel_rem_pio2f+0x43c>
 8013214:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8013218:	9a01      	ldr	r2, [sp, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	edc2 7a00 	vstr	s15, [r2]
 8013220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013224:	dcbd      	bgt.n	80131a2 <__kernel_rem_pio2f+0x452>
 8013226:	9b01      	ldr	r3, [sp, #4]
 8013228:	edc3 7a01 	vstr	s15, [r3, #4]
 801322c:	e7c8      	b.n	80131c0 <__kernel_rem_pio2f+0x470>
 801322e:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 80130cc <__kernel_rem_pio2f+0x37c>
 8013232:	e7da      	b.n	80131ea <__kernel_rem_pio2f+0x49a>
 8013234:	aa06      	add	r2, sp, #24
 8013236:	f1ab 0b08 	sub.w	fp, fp, #8
 801323a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801323e:	2a00      	cmp	r2, #0
 8013240:	f47f af0a 	bne.w	8013058 <__kernel_rem_pio2f+0x308>
 8013244:	aa06      	add	r2, sp, #24
 8013246:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801324a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801324e:	3b01      	subs	r3, #1
 8013250:	f1ab 0b08 	sub.w	fp, fp, #8
 8013254:	2800      	cmp	r0, #0
 8013256:	d0f8      	beq.n	801324a <__kernel_rem_pio2f+0x4fa>
 8013258:	e6fe      	b.n	8013058 <__kernel_rem_pio2f+0x308>
 801325a:	f04f 0e01 	mov.w	lr, #1
 801325e:	e689      	b.n	8012f74 <__kernel_rem_pio2f+0x224>
 8013260:	2000      	movs	r0, #0
 8013262:	e64d      	b.n	8012f00 <__kernel_rem_pio2f+0x1b0>
 8013264:	2b00      	cmp	r3, #0
 8013266:	dd4f      	ble.n	8013308 <__kernel_rem_pio2f+0x5b8>
 8013268:	009a      	lsls	r2, r3, #2
 801326a:	a856      	add	r0, sp, #344	; 0x158
 801326c:	4410      	add	r0, r2
 801326e:	ad2e      	add	r5, sp, #184	; 0xb8
 8013270:	1d14      	adds	r4, r2, #4
 8013272:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 8013276:	442c      	add	r4, r5
 8013278:	18a8      	adds	r0, r5, r2
 801327a:	ed70 7a01 	vldmdb	r0!, {s15}
 801327e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8013282:	42a8      	cmp	r0, r5
 8013284:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013288:	ee77 7a27 	vadd.f32	s15, s14, s15
 801328c:	eeb0 7a66 	vmov.f32	s14, s13
 8013290:	ed64 7a01 	vstmdb	r4!, {s15}
 8013294:	edc0 6a00 	vstr	s13, [r0]
 8013298:	d1ef      	bne.n	801327a <__kernel_rem_pio2f+0x52a>
 801329a:	2b01      	cmp	r3, #1
 801329c:	dd34      	ble.n	8013308 <__kernel_rem_pio2f+0x5b8>
 801329e:	1d13      	adds	r3, r2, #4
 80132a0:	ac56      	add	r4, sp, #344	; 0x158
 80132a2:	4414      	add	r4, r2
 80132a4:	4403      	add	r3, r0
 80132a6:	ed14 7a28 	vldr	s14, [r4, #-160]	; 0xffffff60
 80132aa:	4402      	add	r2, r0
 80132ac:	ac2f      	add	r4, sp, #188	; 0xbc
 80132ae:	4618      	mov	r0, r3
 80132b0:	ed72 7a01 	vldmdb	r2!, {s15}
 80132b4:	ee77 6a87 	vadd.f32	s13, s15, s14
 80132b8:	42a2      	cmp	r2, r4
 80132ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80132be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132c2:	eeb0 7a66 	vmov.f32	s14, s13
 80132c6:	ed60 7a01 	vstmdb	r0!, {s15}
 80132ca:	edc2 6a00 	vstr	s13, [r2]
 80132ce:	d1ef      	bne.n	80132b0 <__kernel_rem_pio2f+0x560>
 80132d0:	ed5f 7a82 	vldr	s15, [pc, #-520]	; 80130cc <__kernel_rem_pio2f+0x37c>
 80132d4:	aa30      	add	r2, sp, #192	; 0xc0
 80132d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80132da:	4293      	cmp	r3, r2
 80132dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132e0:	d1f9      	bne.n	80132d6 <__kernel_rem_pio2f+0x586>
 80132e2:	b1a9      	cbz	r1, 8013310 <__kernel_rem_pio2f+0x5c0>
 80132e4:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80132e8:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80132ec:	9a01      	ldr	r2, [sp, #4]
 80132ee:	eef1 7a67 	vneg.f32	s15, s15
 80132f2:	eef1 6a66 	vneg.f32	s13, s13
 80132f6:	eeb1 7a47 	vneg.f32	s14, s14
 80132fa:	edc2 7a02 	vstr	s15, [r2, #8]
 80132fe:	edc2 6a00 	vstr	s13, [r2]
 8013302:	ed82 7a01 	vstr	s14, [r2, #4]
 8013306:	e75b      	b.n	80131c0 <__kernel_rem_pio2f+0x470>
 8013308:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 80130cc <__kernel_rem_pio2f+0x37c>
 801330c:	2900      	cmp	r1, #0
 801330e:	d1e9      	bne.n	80132e4 <__kernel_rem_pio2f+0x594>
 8013310:	9801      	ldr	r0, [sp, #4]
 8013312:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013314:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8013316:	edc0 7a02 	vstr	s15, [r0, #8]
 801331a:	6002      	str	r2, [r0, #0]
 801331c:	6043      	str	r3, [r0, #4]
 801331e:	e74f      	b.n	80131c0 <__kernel_rem_pio2f+0x470>
 8013320:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013324:	a806      	add	r0, sp, #24
 8013326:	ee10 2a10 	vmov	r2, s0
 801332a:	4623      	mov	r3, r4
 801332c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8013330:	e692      	b.n	8013058 <__kernel_rem_pio2f+0x308>
 8013332:	bf00      	nop
	...

08013340 <__kernel_sinf>:
 8013340:	ee10 3a10 	vmov	r3, s0
 8013344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013348:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801334c:	da04      	bge.n	8013358 <__kernel_sinf+0x18>
 801334e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013352:	ee17 3a90 	vmov	r3, s15
 8013356:	b323      	cbz	r3, 80133a2 <__kernel_sinf+0x62>
 8013358:	ee60 7a00 	vmul.f32	s15, s0, s0
 801335c:	ed9f 5a15 	vldr	s10, [pc, #84]	; 80133b4 <__kernel_sinf+0x74>
 8013360:	eddf 5a15 	vldr	s11, [pc, #84]	; 80133b8 <__kernel_sinf+0x78>
 8013364:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80133bc <__kernel_sinf+0x7c>
 8013368:	eddf 6a15 	vldr	s13, [pc, #84]	; 80133c0 <__kernel_sinf+0x80>
 801336c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80133c4 <__kernel_sinf+0x84>
 8013370:	eee7 5a85 	vfma.f32	s11, s15, s10
 8013374:	ee27 5a80 	vmul.f32	s10, s15, s0
 8013378:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801337c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013384:	b170      	cbz	r0, 80133a4 <__kernel_sinf+0x64>
 8013386:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801338a:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 801338e:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8013392:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80133c8 <__kernel_sinf+0x88>
 8013396:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801339a:	eee5 0a26 	vfma.f32	s1, s10, s13
 801339e:	ee30 0a60 	vsub.f32	s0, s0, s1
 80133a2:	4770      	bx	lr
 80133a4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80133cc <__kernel_sinf+0x8c>
 80133a8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80133ac:	eea6 0a85 	vfma.f32	s0, s13, s10
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop
 80133b4:	2f2ec9d3 	.word	0x2f2ec9d3
 80133b8:	b2d72f34 	.word	0xb2d72f34
 80133bc:	3638ef1b 	.word	0x3638ef1b
 80133c0:	b9500d01 	.word	0xb9500d01
 80133c4:	3c088889 	.word	0x3c088889
 80133c8:	3e2aaaab 	.word	0x3e2aaaab
 80133cc:	be2aaaab 	.word	0xbe2aaaab

080133d0 <matherr>:
 80133d0:	2000      	movs	r0, #0
 80133d2:	4770      	bx	lr
	...

080133e0 <fabsf>:
 80133e0:	ee10 3a10 	vmov	r3, s0
 80133e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80133e8:	ee00 3a10 	vmov	s0, r3
 80133ec:	4770      	bx	lr
 80133ee:	bf00      	nop

080133f0 <floorf>:
 80133f0:	ee10 2a10 	vmov	r2, s0
 80133f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80133f8:	0dcb      	lsrs	r3, r1, #23
 80133fa:	3b7f      	subs	r3, #127	; 0x7f
 80133fc:	2b16      	cmp	r3, #22
 80133fe:	dc17      	bgt.n	8013430 <floorf+0x40>
 8013400:	2b00      	cmp	r3, #0
 8013402:	ee10 0a10 	vmov	r0, s0
 8013406:	db19      	blt.n	801343c <floorf+0x4c>
 8013408:	491a      	ldr	r1, [pc, #104]	; (8013474 <floorf+0x84>)
 801340a:	4119      	asrs	r1, r3
 801340c:	4211      	tst	r1, r2
 801340e:	d022      	beq.n	8013456 <floorf+0x66>
 8013410:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013478 <floorf+0x88>
 8013414:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013420:	dd19      	ble.n	8013456 <floorf+0x66>
 8013422:	2a00      	cmp	r2, #0
 8013424:	db18      	blt.n	8013458 <floorf+0x68>
 8013426:	ea20 0301 	bic.w	r3, r0, r1
 801342a:	ee00 3a10 	vmov	s0, r3
 801342e:	4770      	bx	lr
 8013430:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013434:	d30f      	bcc.n	8013456 <floorf+0x66>
 8013436:	ee30 0a00 	vadd.f32	s0, s0, s0
 801343a:	4770      	bx	lr
 801343c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013478 <floorf+0x88>
 8013440:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344c:	dd03      	ble.n	8013456 <floorf+0x66>
 801344e:	2a00      	cmp	r2, #0
 8013450:	db08      	blt.n	8013464 <floorf+0x74>
 8013452:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801347c <floorf+0x8c>
 8013456:	4770      	bx	lr
 8013458:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801345c:	fa42 f303 	asr.w	r3, r2, r3
 8013460:	4418      	add	r0, r3
 8013462:	e7e0      	b.n	8013426 <floorf+0x36>
 8013464:	2900      	cmp	r1, #0
 8013466:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 801346a:	bf18      	it	ne
 801346c:	eeb0 0a67 	vmovne.f32	s0, s15
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	007fffff 	.word	0x007fffff
 8013478:	7149f2ca 	.word	0x7149f2ca
 801347c:	00000000 	.word	0x00000000

08013480 <__fpclassifyf>:
 8013480:	ee10 3a10 	vmov	r3, s0
 8013484:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8013488:	d101      	bne.n	801348e <__fpclassifyf+0xe>
 801348a:	2002      	movs	r0, #2
 801348c:	4770      	bx	lr
 801348e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8013492:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013496:	d201      	bcs.n	801349c <__fpclassifyf+0x1c>
 8013498:	2004      	movs	r0, #4
 801349a:	4770      	bx	lr
 801349c:	4b05      	ldr	r3, [pc, #20]	; (80134b4 <__fpclassifyf+0x34>)
 801349e:	1e42      	subs	r2, r0, #1
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d801      	bhi.n	80134a8 <__fpclassifyf+0x28>
 80134a4:	2003      	movs	r0, #3
 80134a6:	4770      	bx	lr
 80134a8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 80134ac:	fab0 f080 	clz	r0, r0
 80134b0:	0940      	lsrs	r0, r0, #5
 80134b2:	4770      	bx	lr
 80134b4:	007ffffe 	.word	0x007ffffe
	...

080134c0 <scalbnf>:
 80134c0:	b508      	push	{r3, lr}
 80134c2:	ee10 3a10 	vmov	r3, s0
 80134c6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80134ca:	ed2d 8b02 	vpush	{d8}
 80134ce:	d011      	beq.n	80134f4 <scalbnf+0x34>
 80134d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80134d4:	d211      	bcs.n	80134fa <scalbnf+0x3a>
 80134d6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80134da:	d313      	bcc.n	8013504 <scalbnf+0x44>
 80134dc:	0dd2      	lsrs	r2, r2, #23
 80134de:	4402      	add	r2, r0
 80134e0:	2afe      	cmp	r2, #254	; 0xfe
 80134e2:	dc2e      	bgt.n	8013542 <scalbnf+0x82>
 80134e4:	2a00      	cmp	r2, #0
 80134e6:	dd1a      	ble.n	801351e <scalbnf+0x5e>
 80134e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80134ec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80134f0:	ee00 3a10 	vmov	s0, r3
 80134f4:	ecbd 8b02 	vpop	{d8}
 80134f8:	bd08      	pop	{r3, pc}
 80134fa:	ecbd 8b02 	vpop	{d8}
 80134fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013502:	bd08      	pop	{r3, pc}
 8013504:	4b1d      	ldr	r3, [pc, #116]	; (801357c <scalbnf+0xbc>)
 8013506:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013580 <scalbnf+0xc0>
 801350a:	4298      	cmp	r0, r3
 801350c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013510:	db22      	blt.n	8013558 <scalbnf+0x98>
 8013512:	ee10 3a10 	vmov	r3, s0
 8013516:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801351a:	3a19      	subs	r2, #25
 801351c:	e7df      	b.n	80134de <scalbnf+0x1e>
 801351e:	f112 0f16 	cmn.w	r2, #22
 8013522:	da1e      	bge.n	8013562 <scalbnf+0xa2>
 8013524:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013528:	4298      	cmp	r0, r3
 801352a:	dc0a      	bgt.n	8013542 <scalbnf+0x82>
 801352c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8013584 <scalbnf+0xc4>
 8013530:	eef0 0a40 	vmov.f32	s1, s0
 8013534:	eeb0 0a48 	vmov.f32	s0, s16
 8013538:	f000 f82a 	bl	8013590 <copysignf>
 801353c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013540:	e7d8      	b.n	80134f4 <scalbnf+0x34>
 8013542:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8013588 <scalbnf+0xc8>
 8013546:	eef0 0a40 	vmov.f32	s1, s0
 801354a:	eeb0 0a48 	vmov.f32	s0, s16
 801354e:	f000 f81f 	bl	8013590 <copysignf>
 8013552:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013556:	e7cd      	b.n	80134f4 <scalbnf+0x34>
 8013558:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8013584 <scalbnf+0xc4>
 801355c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8013560:	e7c8      	b.n	80134f4 <scalbnf+0x34>
 8013562:	3219      	adds	r2, #25
 8013564:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013568:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801356c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801358c <scalbnf+0xcc>
 8013570:	ee00 3a10 	vmov	s0, r3
 8013574:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013578:	e7bc      	b.n	80134f4 <scalbnf+0x34>
 801357a:	bf00      	nop
 801357c:	ffff3cb0 	.word	0xffff3cb0
 8013580:	4c000000 	.word	0x4c000000
 8013584:	0da24260 	.word	0x0da24260
 8013588:	7149f2ca 	.word	0x7149f2ca
 801358c:	33000000 	.word	0x33000000

08013590 <copysignf>:
 8013590:	ee10 3a10 	vmov	r3, s0
 8013594:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013598:	ee10 3a90 	vmov	r3, s1
 801359c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80135a0:	4313      	orrs	r3, r2
 80135a2:	ee00 3a10 	vmov	s0, r3
 80135a6:	4770      	bx	lr
	...

080135b0 <__errno>:
 80135b0:	4b01      	ldr	r3, [pc, #4]	; (80135b8 <__errno+0x8>)
 80135b2:	6818      	ldr	r0, [r3, #0]
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	20000c40 	.word	0x20000c40
 80135bc:	00000000 	.word	0x00000000

080135c0 <memset>:
 80135c0:	b470      	push	{r4, r5, r6}
 80135c2:	0784      	lsls	r4, r0, #30
 80135c4:	d046      	beq.n	8013654 <memset+0x94>
 80135c6:	1e54      	subs	r4, r2, #1
 80135c8:	2a00      	cmp	r2, #0
 80135ca:	d041      	beq.n	8013650 <memset+0x90>
 80135cc:	b2cd      	uxtb	r5, r1
 80135ce:	4603      	mov	r3, r0
 80135d0:	e002      	b.n	80135d8 <memset+0x18>
 80135d2:	1e62      	subs	r2, r4, #1
 80135d4:	b3e4      	cbz	r4, 8013650 <memset+0x90>
 80135d6:	4614      	mov	r4, r2
 80135d8:	f803 5b01 	strb.w	r5, [r3], #1
 80135dc:	079a      	lsls	r2, r3, #30
 80135de:	d1f8      	bne.n	80135d2 <memset+0x12>
 80135e0:	2c03      	cmp	r4, #3
 80135e2:	d92e      	bls.n	8013642 <memset+0x82>
 80135e4:	b2cd      	uxtb	r5, r1
 80135e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80135ea:	2c0f      	cmp	r4, #15
 80135ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80135f0:	d919      	bls.n	8013626 <memset+0x66>
 80135f2:	f103 0210 	add.w	r2, r3, #16
 80135f6:	4626      	mov	r6, r4
 80135f8:	3e10      	subs	r6, #16
 80135fa:	2e0f      	cmp	r6, #15
 80135fc:	f842 5c10 	str.w	r5, [r2, #-16]
 8013600:	f842 5c0c 	str.w	r5, [r2, #-12]
 8013604:	f842 5c08 	str.w	r5, [r2, #-8]
 8013608:	f842 5c04 	str.w	r5, [r2, #-4]
 801360c:	f102 0210 	add.w	r2, r2, #16
 8013610:	d8f2      	bhi.n	80135f8 <memset+0x38>
 8013612:	f1a4 0210 	sub.w	r2, r4, #16
 8013616:	f022 020f 	bic.w	r2, r2, #15
 801361a:	f004 040f 	and.w	r4, r4, #15
 801361e:	3210      	adds	r2, #16
 8013620:	2c03      	cmp	r4, #3
 8013622:	4413      	add	r3, r2
 8013624:	d90d      	bls.n	8013642 <memset+0x82>
 8013626:	461e      	mov	r6, r3
 8013628:	4622      	mov	r2, r4
 801362a:	3a04      	subs	r2, #4
 801362c:	2a03      	cmp	r2, #3
 801362e:	f846 5b04 	str.w	r5, [r6], #4
 8013632:	d8fa      	bhi.n	801362a <memset+0x6a>
 8013634:	1f22      	subs	r2, r4, #4
 8013636:	f022 0203 	bic.w	r2, r2, #3
 801363a:	3204      	adds	r2, #4
 801363c:	4413      	add	r3, r2
 801363e:	f004 0403 	and.w	r4, r4, #3
 8013642:	b12c      	cbz	r4, 8013650 <memset+0x90>
 8013644:	b2c9      	uxtb	r1, r1
 8013646:	441c      	add	r4, r3
 8013648:	f803 1b01 	strb.w	r1, [r3], #1
 801364c:	42a3      	cmp	r3, r4
 801364e:	d1fb      	bne.n	8013648 <memset+0x88>
 8013650:	bc70      	pop	{r4, r5, r6}
 8013652:	4770      	bx	lr
 8013654:	4614      	mov	r4, r2
 8013656:	4603      	mov	r3, r0
 8013658:	e7c2      	b.n	80135e0 <memset+0x20>
 801365a:	bf00      	nop
 801365c:	0000      	movs	r0, r0
	...

08013660 <_vsnprintf_r>:
 8013660:	b570      	push	{r4, r5, r6, lr}
 8013662:	2a00      	cmp	r2, #0
 8013664:	b09a      	sub	sp, #104	; 0x68
 8013666:	4605      	mov	r5, r0
 8013668:	db2f      	blt.n	80136ca <_vsnprintf_r+0x6a>
 801366a:	4614      	mov	r4, r2
 801366c:	461a      	mov	r2, r3
 801366e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013672:	9100      	str	r1, [sp, #0]
 8013674:	9104      	str	r1, [sp, #16]
 8013676:	f8ad 300c 	strh.w	r3, [sp, #12]
 801367a:	d011      	beq.n	80136a0 <_vsnprintf_r+0x40>
 801367c:	3c01      	subs	r4, #1
 801367e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8013682:	4669      	mov	r1, sp
 8013684:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013686:	9402      	str	r4, [sp, #8]
 8013688:	9405      	str	r4, [sp, #20]
 801368a:	f8ad 600e 	strh.w	r6, [sp, #14]
 801368e:	f000 f837 	bl	8013700 <_svfprintf_r>
 8013692:	1c42      	adds	r2, r0, #1
 8013694:	db16      	blt.n	80136c4 <_vsnprintf_r+0x64>
 8013696:	9b00      	ldr	r3, [sp, #0]
 8013698:	2200      	movs	r2, #0
 801369a:	701a      	strb	r2, [r3, #0]
 801369c:	b01a      	add	sp, #104	; 0x68
 801369e:	bd70      	pop	{r4, r5, r6, pc}
 80136a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136a2:	9402      	str	r4, [sp, #8]
 80136a4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80136a8:	4669      	mov	r1, sp
 80136aa:	9405      	str	r4, [sp, #20]
 80136ac:	f8ad 600e 	strh.w	r6, [sp, #14]
 80136b0:	f000 f826 	bl	8013700 <_svfprintf_r>
 80136b4:	1c43      	adds	r3, r0, #1
 80136b6:	db01      	blt.n	80136bc <_vsnprintf_r+0x5c>
 80136b8:	b01a      	add	sp, #104	; 0x68
 80136ba:	bd70      	pop	{r4, r5, r6, pc}
 80136bc:	238b      	movs	r3, #139	; 0x8b
 80136be:	602b      	str	r3, [r5, #0]
 80136c0:	b01a      	add	sp, #104	; 0x68
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	238b      	movs	r3, #139	; 0x8b
 80136c6:	602b      	str	r3, [r5, #0]
 80136c8:	e7e5      	b.n	8013696 <_vsnprintf_r+0x36>
 80136ca:	238b      	movs	r3, #139	; 0x8b
 80136cc:	6003      	str	r3, [r0, #0]
 80136ce:	f04f 30ff 	mov.w	r0, #4294967295
 80136d2:	e7f1      	b.n	80136b8 <_vsnprintf_r+0x58>
	...

080136e0 <vsnprintf>:
 80136e0:	b530      	push	{r4, r5, lr}
 80136e2:	b083      	sub	sp, #12
 80136e4:	4c05      	ldr	r4, [pc, #20]	; (80136fc <vsnprintf+0x1c>)
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	6824      	ldr	r4, [r4, #0]
 80136ea:	460d      	mov	r5, r1
 80136ec:	4613      	mov	r3, r2
 80136ee:	4601      	mov	r1, r0
 80136f0:	462a      	mov	r2, r5
 80136f2:	4620      	mov	r0, r4
 80136f4:	f7ff ffb4 	bl	8013660 <_vsnprintf_r>
 80136f8:	b003      	add	sp, #12
 80136fa:	bd30      	pop	{r4, r5, pc}
 80136fc:	20000c40 	.word	0x20000c40

08013700 <_svfprintf_r>:
 8013700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013704:	b0bf      	sub	sp, #252	; 0xfc
 8013706:	4689      	mov	r9, r1
 8013708:	9206      	str	r2, [sp, #24]
 801370a:	930a      	str	r3, [sp, #40]	; 0x28
 801370c:	9004      	str	r0, [sp, #16]
 801370e:	f002 fa4f 	bl	8015bb0 <_localeconv_r>
 8013712:	6803      	ldr	r3, [r0, #0]
 8013714:	9313      	str	r3, [sp, #76]	; 0x4c
 8013716:	4618      	mov	r0, r3
 8013718:	f003 f89a 	bl	8016850 <strlen>
 801371c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013720:	9014      	str	r0, [sp, #80]	; 0x50
 8013722:	061a      	lsls	r2, r3, #24
 8013724:	d504      	bpl.n	8013730 <_svfprintf_r+0x30>
 8013726:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801372a:	2b00      	cmp	r3, #0
 801372c:	f001 80a1 	beq.w	8014872 <_svfprintf_r+0x1172>
 8013730:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8013998 <_svfprintf_r+0x298>
 8013734:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013738:	2300      	movs	r3, #0
 801373a:	af2e      	add	r7, sp, #184	; 0xb8
 801373c:	930f      	str	r3, [sp, #60]	; 0x3c
 801373e:	9323      	str	r3, [sp, #140]	; 0x8c
 8013740:	9322      	str	r3, [sp, #136]	; 0x88
 8013742:	9312      	str	r3, [sp, #72]	; 0x48
 8013744:	9315      	str	r3, [sp, #84]	; 0x54
 8013746:	9307      	str	r3, [sp, #28]
 8013748:	9721      	str	r7, [sp, #132]	; 0x84
 801374a:	463c      	mov	r4, r7
 801374c:	464e      	mov	r6, r9
 801374e:	9d06      	ldr	r5, [sp, #24]
 8013750:	782b      	ldrb	r3, [r5, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f000 80a9 	beq.w	80138aa <_svfprintf_r+0x1aa>
 8013758:	2b25      	cmp	r3, #37	; 0x25
 801375a:	d102      	bne.n	8013762 <_svfprintf_r+0x62>
 801375c:	e0a5      	b.n	80138aa <_svfprintf_r+0x1aa>
 801375e:	2b25      	cmp	r3, #37	; 0x25
 8013760:	d003      	beq.n	801376a <_svfprintf_r+0x6a>
 8013762:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8013766:	2b00      	cmp	r3, #0
 8013768:	d1f9      	bne.n	801375e <_svfprintf_r+0x5e>
 801376a:	9b06      	ldr	r3, [sp, #24]
 801376c:	1aeb      	subs	r3, r5, r3
 801376e:	b173      	cbz	r3, 801378e <_svfprintf_r+0x8e>
 8013770:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013772:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8013774:	9806      	ldr	r0, [sp, #24]
 8013776:	6020      	str	r0, [r4, #0]
 8013778:	3201      	adds	r2, #1
 801377a:	4419      	add	r1, r3
 801377c:	2a07      	cmp	r2, #7
 801377e:	6063      	str	r3, [r4, #4]
 8013780:	9123      	str	r1, [sp, #140]	; 0x8c
 8013782:	9222      	str	r2, [sp, #136]	; 0x88
 8013784:	dc72      	bgt.n	801386c <_svfprintf_r+0x16c>
 8013786:	3408      	adds	r4, #8
 8013788:	9a07      	ldr	r2, [sp, #28]
 801378a:	441a      	add	r2, r3
 801378c:	9207      	str	r2, [sp, #28]
 801378e:	782b      	ldrb	r3, [r5, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	f000 87cb 	beq.w	801472c <_svfprintf_r+0x102c>
 8013796:	2300      	movs	r3, #0
 8013798:	1c69      	adds	r1, r5, #1
 801379a:	786d      	ldrb	r5, [r5, #1]
 801379c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80137a0:	461a      	mov	r2, r3
 80137a2:	9308      	str	r3, [sp, #32]
 80137a4:	9303      	str	r3, [sp, #12]
 80137a6:	f04f 3aff 	mov.w	sl, #4294967295
 80137aa:	1c4b      	adds	r3, r1, #1
 80137ac:	f1a5 0120 	sub.w	r1, r5, #32
 80137b0:	2958      	cmp	r1, #88	; 0x58
 80137b2:	f200 83e4 	bhi.w	8013f7e <_svfprintf_r+0x87e>
 80137b6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80137ba:	0277      	.short	0x0277
 80137bc:	03e203e2 	.word	0x03e203e2
 80137c0:	03e2037b 	.word	0x03e2037b
 80137c4:	03e203e2 	.word	0x03e203e2
 80137c8:	03e203e2 	.word	0x03e203e2
 80137cc:	02f703e2 	.word	0x02f703e2
 80137d0:	03e20214 	.word	0x03e20214
 80137d4:	021801fb 	.word	0x021801fb
 80137d8:	038203e2 	.word	0x038203e2
 80137dc:	02c102c1 	.word	0x02c102c1
 80137e0:	02c102c1 	.word	0x02c102c1
 80137e4:	02c102c1 	.word	0x02c102c1
 80137e8:	02c102c1 	.word	0x02c102c1
 80137ec:	03e202c1 	.word	0x03e202c1
 80137f0:	03e203e2 	.word	0x03e203e2
 80137f4:	03e203e2 	.word	0x03e203e2
 80137f8:	03e203e2 	.word	0x03e203e2
 80137fc:	03e203e2 	.word	0x03e203e2
 8013800:	02d003e2 	.word	0x02d003e2
 8013804:	03e20391 	.word	0x03e20391
 8013808:	03e20391 	.word	0x03e20391
 801380c:	03e203e2 	.word	0x03e203e2
 8013810:	037403e2 	.word	0x037403e2
 8013814:	03e203e2 	.word	0x03e203e2
 8013818:	03e2030c 	.word	0x03e2030c
 801381c:	03e203e2 	.word	0x03e203e2
 8013820:	03e203e2 	.word	0x03e203e2
 8013824:	03e2032a 	.word	0x03e2032a
 8013828:	034403e2 	.word	0x034403e2
 801382c:	03e203e2 	.word	0x03e203e2
 8013830:	03e203e2 	.word	0x03e203e2
 8013834:	03e203e2 	.word	0x03e203e2
 8013838:	03e203e2 	.word	0x03e203e2
 801383c:	03e203e2 	.word	0x03e203e2
 8013840:	0233035f 	.word	0x0233035f
 8013844:	03910391 	.word	0x03910391
 8013848:	03050391 	.word	0x03050391
 801384c:	03e20233 	.word	0x03e20233
 8013850:	02ed03e2 	.word	0x02ed03e2
 8013854:	028503e2 	.word	0x028503e2
 8013858:	03cb0202 	.word	0x03cb0202
 801385c:	03e2027e 	.word	0x03e2027e
 8013860:	03e20299 	.word	0x03e20299
 8013864:	03e2007a 	.word	0x03e2007a
 8013868:	025103e2 	.word	0x025103e2
 801386c:	9804      	ldr	r0, [sp, #16]
 801386e:	9303      	str	r3, [sp, #12]
 8013870:	4631      	mov	r1, r6
 8013872:	aa21      	add	r2, sp, #132	; 0x84
 8013874:	f003 f81c 	bl	80168b0 <__ssprint_r>
 8013878:	b950      	cbnz	r0, 8013890 <_svfprintf_r+0x190>
 801387a:	463c      	mov	r4, r7
 801387c:	9b03      	ldr	r3, [sp, #12]
 801387e:	e783      	b.n	8013788 <_svfprintf_r+0x88>
 8013880:	9804      	ldr	r0, [sp, #16]
 8013882:	4631      	mov	r1, r6
 8013884:	aa21      	add	r2, sp, #132	; 0x84
 8013886:	f003 f813 	bl	80168b0 <__ssprint_r>
 801388a:	2800      	cmp	r0, #0
 801388c:	f000 818c 	beq.w	8013ba8 <_svfprintf_r+0x4a8>
 8013890:	46b1      	mov	r9, r6
 8013892:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013896:	f013 0f40 	tst.w	r3, #64	; 0x40
 801389a:	9b07      	ldr	r3, [sp, #28]
 801389c:	bf18      	it	ne
 801389e:	f04f 33ff 	movne.w	r3, #4294967295
 80138a2:	4618      	mov	r0, r3
 80138a4:	b03f      	add	sp, #252	; 0xfc
 80138a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138aa:	9d06      	ldr	r5, [sp, #24]
 80138ac:	e76f      	b.n	801378e <_svfprintf_r+0x8e>
 80138ae:	9306      	str	r3, [sp, #24]
 80138b0:	9b03      	ldr	r3, [sp, #12]
 80138b2:	0698      	lsls	r0, r3, #26
 80138b4:	f140 82b4 	bpl.w	8013e20 <_svfprintf_r+0x720>
 80138b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138ba:	f103 0907 	add.w	r9, r3, #7
 80138be:	f029 0307 	bic.w	r3, r9, #7
 80138c2:	f103 0208 	add.w	r2, r3, #8
 80138c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80138ca:	920a      	str	r2, [sp, #40]	; 0x28
 80138cc:	2301      	movs	r3, #1
 80138ce:	f04f 0c00 	mov.w	ip, #0
 80138d2:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 80138d6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80138da:	f1ba 0f00 	cmp.w	sl, #0
 80138de:	db03      	blt.n	80138e8 <_svfprintf_r+0x1e8>
 80138e0:	9a03      	ldr	r2, [sp, #12]
 80138e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80138e6:	9203      	str	r2, [sp, #12]
 80138e8:	ea58 0209 	orrs.w	r2, r8, r9
 80138ec:	f040 8357 	bne.w	8013f9e <_svfprintf_r+0x89e>
 80138f0:	f1ba 0f00 	cmp.w	sl, #0
 80138f4:	f000 845c 	beq.w	80141b0 <_svfprintf_r+0xab0>
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	f000 835a 	beq.w	8013fb2 <_svfprintf_r+0x8b2>
 80138fe:	2b02      	cmp	r3, #2
 8013900:	f000 849a 	beq.w	8014238 <_svfprintf_r+0xb38>
 8013904:	4639      	mov	r1, r7
 8013906:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 801390a:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 801390e:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8013912:	f008 0307 	and.w	r3, r8, #7
 8013916:	4681      	mov	r9, r0
 8013918:	4690      	mov	r8, r2
 801391a:	3330      	adds	r3, #48	; 0x30
 801391c:	ea58 0209 	orrs.w	r2, r8, r9
 8013920:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8013924:	d1ef      	bne.n	8013906 <_svfprintf_r+0x206>
 8013926:	9a03      	ldr	r2, [sp, #12]
 8013928:	910c      	str	r1, [sp, #48]	; 0x30
 801392a:	07d2      	lsls	r2, r2, #31
 801392c:	f100 856e 	bmi.w	801440c <_svfprintf_r+0xd0c>
 8013930:	1a7b      	subs	r3, r7, r1
 8013932:	9309      	str	r3, [sp, #36]	; 0x24
 8013934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013936:	4592      	cmp	sl, r2
 8013938:	4653      	mov	r3, sl
 801393a:	bfb8      	it	lt
 801393c:	4613      	movlt	r3, r2
 801393e:	9305      	str	r3, [sp, #20]
 8013940:	2300      	movs	r3, #0
 8013942:	930e      	str	r3, [sp, #56]	; 0x38
 8013944:	f1bc 0f00 	cmp.w	ip, #0
 8013948:	d002      	beq.n	8013950 <_svfprintf_r+0x250>
 801394a:	9b05      	ldr	r3, [sp, #20]
 801394c:	3301      	adds	r3, #1
 801394e:	9305      	str	r3, [sp, #20]
 8013950:	9b03      	ldr	r3, [sp, #12]
 8013952:	f013 0302 	ands.w	r3, r3, #2
 8013956:	930b      	str	r3, [sp, #44]	; 0x2c
 8013958:	d002      	beq.n	8013960 <_svfprintf_r+0x260>
 801395a:	9b05      	ldr	r3, [sp, #20]
 801395c:	3302      	adds	r3, #2
 801395e:	9305      	str	r3, [sp, #20]
 8013960:	9b03      	ldr	r3, [sp, #12]
 8013962:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8013966:	f040 8317 	bne.w	8013f98 <_svfprintf_r+0x898>
 801396a:	9b08      	ldr	r3, [sp, #32]
 801396c:	9a05      	ldr	r2, [sp, #20]
 801396e:	ebc2 0803 	rsb	r8, r2, r3
 8013972:	f1b8 0f00 	cmp.w	r8, #0
 8013976:	f340 830f 	ble.w	8013f98 <_svfprintf_r+0x898>
 801397a:	f1b8 0f10 	cmp.w	r8, #16
 801397e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8013980:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013982:	f8df a01c 	ldr.w	sl, [pc, #28]	; 80139a0 <_svfprintf_r+0x2a0>
 8013986:	dd30      	ble.n	80139ea <_svfprintf_r+0x2ea>
 8013988:	4653      	mov	r3, sl
 801398a:	f04f 0b10 	mov.w	fp, #16
 801398e:	46c2      	mov	sl, r8
 8013990:	46a8      	mov	r8, r5
 8013992:	461d      	mov	r5, r3
 8013994:	e00d      	b.n	80139b2 <_svfprintf_r+0x2b2>
 8013996:	bf00      	nop
	...
 80139a0:	08017a20 	.word	0x08017a20
 80139a4:	f1aa 0a10 	sub.w	sl, sl, #16
 80139a8:	f1ba 0f10 	cmp.w	sl, #16
 80139ac:	f104 0408 	add.w	r4, r4, #8
 80139b0:	dd17      	ble.n	80139e2 <_svfprintf_r+0x2e2>
 80139b2:	3201      	adds	r2, #1
 80139b4:	3110      	adds	r1, #16
 80139b6:	2a07      	cmp	r2, #7
 80139b8:	9123      	str	r1, [sp, #140]	; 0x8c
 80139ba:	9222      	str	r2, [sp, #136]	; 0x88
 80139bc:	e884 0820 	stmia.w	r4, {r5, fp}
 80139c0:	ddf0      	ble.n	80139a4 <_svfprintf_r+0x2a4>
 80139c2:	9804      	ldr	r0, [sp, #16]
 80139c4:	4631      	mov	r1, r6
 80139c6:	aa21      	add	r2, sp, #132	; 0x84
 80139c8:	f002 ff72 	bl	80168b0 <__ssprint_r>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	f47f af5f 	bne.w	8013890 <_svfprintf_r+0x190>
 80139d2:	f1aa 0a10 	sub.w	sl, sl, #16
 80139d6:	f1ba 0f10 	cmp.w	sl, #16
 80139da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80139dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80139de:	463c      	mov	r4, r7
 80139e0:	dce7      	bgt.n	80139b2 <_svfprintf_r+0x2b2>
 80139e2:	462b      	mov	r3, r5
 80139e4:	4645      	mov	r5, r8
 80139e6:	46d0      	mov	r8, sl
 80139e8:	469a      	mov	sl, r3
 80139ea:	3201      	adds	r2, #1
 80139ec:	eb08 0b01 	add.w	fp, r8, r1
 80139f0:	2a07      	cmp	r2, #7
 80139f2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80139f6:	9222      	str	r2, [sp, #136]	; 0x88
 80139f8:	f8c4 a000 	str.w	sl, [r4]
 80139fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8013a00:	f300 847e 	bgt.w	8014300 <_svfprintf_r+0xc00>
 8013a04:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8013a08:	3408      	adds	r4, #8
 8013a0a:	f1bc 0f00 	cmp.w	ip, #0
 8013a0e:	d00f      	beq.n	8013a30 <_svfprintf_r+0x330>
 8013a10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a12:	3301      	adds	r3, #1
 8013a14:	f10b 0b01 	add.w	fp, fp, #1
 8013a18:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	2b07      	cmp	r3, #7
 8013a20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013a24:	9322      	str	r3, [sp, #136]	; 0x88
 8013a26:	e884 0006 	stmia.w	r4, {r1, r2}
 8013a2a:	f300 83ea 	bgt.w	8014202 <_svfprintf_r+0xb02>
 8013a2e:	3408      	adds	r4, #8
 8013a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a32:	b173      	cbz	r3, 8013a52 <_svfprintf_r+0x352>
 8013a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a36:	3301      	adds	r3, #1
 8013a38:	f10b 0b02 	add.w	fp, fp, #2
 8013a3c:	a91a      	add	r1, sp, #104	; 0x68
 8013a3e:	2202      	movs	r2, #2
 8013a40:	2b07      	cmp	r3, #7
 8013a42:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013a46:	9322      	str	r3, [sp, #136]	; 0x88
 8013a48:	e884 0006 	stmia.w	r4, {r1, r2}
 8013a4c:	f300 83cd 	bgt.w	80141ea <_svfprintf_r+0xaea>
 8013a50:	3408      	adds	r4, #8
 8013a52:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8013a56:	f000 8315 	beq.w	8014084 <_svfprintf_r+0x984>
 8013a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a5e:	ebc2 0a03 	rsb	sl, r2, r3
 8013a62:	f1ba 0f00 	cmp.w	sl, #0
 8013a66:	dd3c      	ble.n	8013ae2 <_svfprintf_r+0x3e2>
 8013a68:	f1ba 0f10 	cmp.w	sl, #16
 8013a6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013a6e:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 8013ed4 <_svfprintf_r+0x7d4>
 8013a72:	dd2b      	ble.n	8013acc <_svfprintf_r+0x3cc>
 8013a74:	4649      	mov	r1, r9
 8013a76:	465b      	mov	r3, fp
 8013a78:	46a9      	mov	r9, r5
 8013a7a:	f04f 0810 	mov.w	r8, #16
 8013a7e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8013a82:	460d      	mov	r5, r1
 8013a84:	e006      	b.n	8013a94 <_svfprintf_r+0x394>
 8013a86:	f1aa 0a10 	sub.w	sl, sl, #16
 8013a8a:	f1ba 0f10 	cmp.w	sl, #16
 8013a8e:	f104 0408 	add.w	r4, r4, #8
 8013a92:	dd17      	ble.n	8013ac4 <_svfprintf_r+0x3c4>
 8013a94:	3201      	adds	r2, #1
 8013a96:	3310      	adds	r3, #16
 8013a98:	2a07      	cmp	r2, #7
 8013a9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8013a9c:	9222      	str	r2, [sp, #136]	; 0x88
 8013a9e:	e884 0120 	stmia.w	r4, {r5, r8}
 8013aa2:	ddf0      	ble.n	8013a86 <_svfprintf_r+0x386>
 8013aa4:	4658      	mov	r0, fp
 8013aa6:	4631      	mov	r1, r6
 8013aa8:	aa21      	add	r2, sp, #132	; 0x84
 8013aaa:	f002 ff01 	bl	80168b0 <__ssprint_r>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	f47f aeee 	bne.w	8013890 <_svfprintf_r+0x190>
 8013ab4:	f1aa 0a10 	sub.w	sl, sl, #16
 8013ab8:	f1ba 0f10 	cmp.w	sl, #16
 8013abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013abe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013ac0:	463c      	mov	r4, r7
 8013ac2:	dce7      	bgt.n	8013a94 <_svfprintf_r+0x394>
 8013ac4:	469b      	mov	fp, r3
 8013ac6:	462b      	mov	r3, r5
 8013ac8:	464d      	mov	r5, r9
 8013aca:	4699      	mov	r9, r3
 8013acc:	3201      	adds	r2, #1
 8013ace:	44d3      	add	fp, sl
 8013ad0:	2a07      	cmp	r2, #7
 8013ad2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013ad6:	9222      	str	r2, [sp, #136]	; 0x88
 8013ad8:	e884 0600 	stmia.w	r4, {r9, sl}
 8013adc:	f300 8379 	bgt.w	80141d2 <_svfprintf_r+0xad2>
 8013ae0:	3408      	adds	r4, #8
 8013ae2:	9b03      	ldr	r3, [sp, #12]
 8013ae4:	05d9      	lsls	r1, r3, #23
 8013ae6:	f100 8270 	bmi.w	8013fca <_svfprintf_r+0x8ca>
 8013aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013af0:	6022      	str	r2, [r4, #0]
 8013af2:	3301      	adds	r3, #1
 8013af4:	448b      	add	fp, r1
 8013af6:	2b07      	cmp	r3, #7
 8013af8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013afc:	6061      	str	r1, [r4, #4]
 8013afe:	9322      	str	r3, [sp, #136]	; 0x88
 8013b00:	f300 834a 	bgt.w	8014198 <_svfprintf_r+0xa98>
 8013b04:	3408      	adds	r4, #8
 8013b06:	9b03      	ldr	r3, [sp, #12]
 8013b08:	075a      	lsls	r2, r3, #29
 8013b0a:	d541      	bpl.n	8013b90 <_svfprintf_r+0x490>
 8013b0c:	9b08      	ldr	r3, [sp, #32]
 8013b0e:	9a05      	ldr	r2, [sp, #20]
 8013b10:	1a9d      	subs	r5, r3, r2
 8013b12:	2d00      	cmp	r5, #0
 8013b14:	dd3c      	ble.n	8013b90 <_svfprintf_r+0x490>
 8013b16:	2d10      	cmp	r5, #16
 8013b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013b1a:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8013ed8 <_svfprintf_r+0x7d8>
 8013b1e:	dd23      	ble.n	8013b68 <_svfprintf_r+0x468>
 8013b20:	f04f 0810 	mov.w	r8, #16
 8013b24:	465a      	mov	r2, fp
 8013b26:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8013b2a:	e004      	b.n	8013b36 <_svfprintf_r+0x436>
 8013b2c:	3d10      	subs	r5, #16
 8013b2e:	2d10      	cmp	r5, #16
 8013b30:	f104 0408 	add.w	r4, r4, #8
 8013b34:	dd17      	ble.n	8013b66 <_svfprintf_r+0x466>
 8013b36:	3301      	adds	r3, #1
 8013b38:	3210      	adds	r2, #16
 8013b3a:	2b07      	cmp	r3, #7
 8013b3c:	9223      	str	r2, [sp, #140]	; 0x8c
 8013b3e:	9322      	str	r3, [sp, #136]	; 0x88
 8013b40:	f8c4 a000 	str.w	sl, [r4]
 8013b44:	f8c4 8004 	str.w	r8, [r4, #4]
 8013b48:	ddf0      	ble.n	8013b2c <_svfprintf_r+0x42c>
 8013b4a:	4648      	mov	r0, r9
 8013b4c:	4631      	mov	r1, r6
 8013b4e:	aa21      	add	r2, sp, #132	; 0x84
 8013b50:	f002 feae 	bl	80168b0 <__ssprint_r>
 8013b54:	2800      	cmp	r0, #0
 8013b56:	f47f ae9b 	bne.w	8013890 <_svfprintf_r+0x190>
 8013b5a:	3d10      	subs	r5, #16
 8013b5c:	2d10      	cmp	r5, #16
 8013b5e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013b60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013b62:	463c      	mov	r4, r7
 8013b64:	dce7      	bgt.n	8013b36 <_svfprintf_r+0x436>
 8013b66:	4693      	mov	fp, r2
 8013b68:	3301      	adds	r3, #1
 8013b6a:	44ab      	add	fp, r5
 8013b6c:	2b07      	cmp	r3, #7
 8013b6e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013b72:	9322      	str	r3, [sp, #136]	; 0x88
 8013b74:	f8c4 a000 	str.w	sl, [r4]
 8013b78:	6065      	str	r5, [r4, #4]
 8013b7a:	dd09      	ble.n	8013b90 <_svfprintf_r+0x490>
 8013b7c:	9804      	ldr	r0, [sp, #16]
 8013b7e:	4631      	mov	r1, r6
 8013b80:	aa21      	add	r2, sp, #132	; 0x84
 8013b82:	f002 fe95 	bl	80168b0 <__ssprint_r>
 8013b86:	2800      	cmp	r0, #0
 8013b88:	f47f ae82 	bne.w	8013890 <_svfprintf_r+0x190>
 8013b8c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8013b90:	9b07      	ldr	r3, [sp, #28]
 8013b92:	9a05      	ldr	r2, [sp, #20]
 8013b94:	9908      	ldr	r1, [sp, #32]
 8013b96:	428a      	cmp	r2, r1
 8013b98:	bfac      	ite	ge
 8013b9a:	189b      	addge	r3, r3, r2
 8013b9c:	185b      	addlt	r3, r3, r1
 8013b9e:	9307      	str	r3, [sp, #28]
 8013ba0:	f1bb 0f00 	cmp.w	fp, #0
 8013ba4:	f47f ae6c 	bne.w	8013880 <_svfprintf_r+0x180>
 8013ba8:	2300      	movs	r3, #0
 8013baa:	9322      	str	r3, [sp, #136]	; 0x88
 8013bac:	463c      	mov	r4, r7
 8013bae:	e5ce      	b.n	801374e <_svfprintf_r+0x4e>
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	9803      	ldr	r0, [sp, #12]
 8013bb4:	781d      	ldrb	r5, [r3, #0]
 8013bb6:	f040 0004 	orr.w	r0, r0, #4
 8013bba:	9003      	str	r0, [sp, #12]
 8013bbc:	e5f5      	b.n	80137aa <_svfprintf_r+0xaa>
 8013bbe:	9306      	str	r3, [sp, #24]
 8013bc0:	9b03      	ldr	r3, [sp, #12]
 8013bc2:	f013 0320 	ands.w	r3, r3, #32
 8013bc6:	f000 810e 	beq.w	8013de6 <_svfprintf_r+0x6e6>
 8013bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bcc:	f103 0907 	add.w	r9, r3, #7
 8013bd0:	f029 0307 	bic.w	r3, r9, #7
 8013bd4:	f103 0208 	add.w	r2, r3, #8
 8013bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8013bde:	2300      	movs	r3, #0
 8013be0:	e675      	b.n	80138ce <_svfprintf_r+0x1ce>
 8013be2:	781d      	ldrb	r5, [r3, #0]
 8013be4:	4619      	mov	r1, r3
 8013be6:	222b      	movs	r2, #43	; 0x2b
 8013be8:	e5df      	b.n	80137aa <_svfprintf_r+0xaa>
 8013bea:	781d      	ldrb	r5, [r3, #0]
 8013bec:	2d2a      	cmp	r5, #42	; 0x2a
 8013bee:	f103 0101 	add.w	r1, r3, #1
 8013bf2:	f000 87b8 	beq.w	8014b66 <_svfprintf_r+0x1466>
 8013bf6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8013bfa:	2809      	cmp	r0, #9
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	f04f 0a00 	mov.w	sl, #0
 8013c02:	f63f add3 	bhi.w	80137ac <_svfprintf_r+0xac>
 8013c06:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013c0a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8013c0e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8013c12:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8013c16:	2809      	cmp	r0, #9
 8013c18:	d9f5      	bls.n	8013c06 <_svfprintf_r+0x506>
 8013c1a:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 8013c1e:	e5c5      	b.n	80137ac <_svfprintf_r+0xac>
 8013c20:	9306      	str	r3, [sp, #24]
 8013c22:	9b03      	ldr	r3, [sp, #12]
 8013c24:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013c28:	069b      	lsls	r3, r3, #26
 8013c2a:	f140 80a1 	bpl.w	8013d70 <_svfprintf_r+0x670>
 8013c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c30:	f103 0907 	add.w	r9, r3, #7
 8013c34:	f029 0907 	bic.w	r9, r9, #7
 8013c38:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013c3c:	f109 0108 	add.w	r1, r9, #8
 8013c40:	910a      	str	r1, [sp, #40]	; 0x28
 8013c42:	4690      	mov	r8, r2
 8013c44:	4699      	mov	r9, r3
 8013c46:	2a00      	cmp	r2, #0
 8013c48:	f173 0300 	sbcs.w	r3, r3, #0
 8013c4c:	f2c0 840e 	blt.w	801446c <_svfprintf_r+0xd6c>
 8013c50:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8013c54:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013c58:	2301      	movs	r3, #1
 8013c5a:	e63e      	b.n	80138da <_svfprintf_r+0x1da>
 8013c5c:	9306      	str	r3, [sp, #24]
 8013c5e:	4b9b      	ldr	r3, [pc, #620]	; (8013ecc <_svfprintf_r+0x7cc>)
 8013c60:	9312      	str	r3, [sp, #72]	; 0x48
 8013c62:	9b03      	ldr	r3, [sp, #12]
 8013c64:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013c68:	069b      	lsls	r3, r3, #26
 8013c6a:	f140 80f3 	bpl.w	8013e54 <_svfprintf_r+0x754>
 8013c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c70:	f103 0907 	add.w	r9, r3, #7
 8013c74:	f029 0307 	bic.w	r3, r9, #7
 8013c78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c7c:	f103 0208 	add.w	r2, r3, #8
 8013c80:	920a      	str	r2, [sp, #40]	; 0x28
 8013c82:	9b03      	ldr	r3, [sp, #12]
 8013c84:	07d9      	lsls	r1, r3, #31
 8013c86:	f140 80f5 	bpl.w	8013e74 <_svfprintf_r+0x774>
 8013c8a:	ea58 0309 	orrs.w	r3, r8, r9
 8013c8e:	f000 80f1 	beq.w	8013e74 <_svfprintf_r+0x774>
 8013c92:	9a03      	ldr	r2, [sp, #12]
 8013c94:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8013c98:	2330      	movs	r3, #48	; 0x30
 8013c9a:	f042 0202 	orr.w	r2, r2, #2
 8013c9e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8013ca2:	9203      	str	r2, [sp, #12]
 8013ca4:	2302      	movs	r3, #2
 8013ca6:	e612      	b.n	80138ce <_svfprintf_r+0x1ce>
 8013ca8:	781d      	ldrb	r5, [r3, #0]
 8013caa:	4619      	mov	r1, r3
 8013cac:	2a00      	cmp	r2, #0
 8013cae:	f47f ad7c 	bne.w	80137aa <_svfprintf_r+0xaa>
 8013cb2:	2220      	movs	r2, #32
 8013cb4:	e579      	b.n	80137aa <_svfprintf_r+0xaa>
 8013cb6:	9903      	ldr	r1, [sp, #12]
 8013cb8:	f041 0120 	orr.w	r1, r1, #32
 8013cbc:	9103      	str	r1, [sp, #12]
 8013cbe:	781d      	ldrb	r5, [r3, #0]
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	e572      	b.n	80137aa <_svfprintf_r+0xaa>
 8013cc4:	9306      	str	r3, [sp, #24]
 8013cc6:	9b03      	ldr	r3, [sp, #12]
 8013cc8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013ccc:	069a      	lsls	r2, r3, #26
 8013cce:	f140 84b0 	bpl.w	8014632 <_svfprintf_r+0xf32>
 8013cd2:	9907      	ldr	r1, [sp, #28]
 8013cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cd6:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8013cda:	6813      	ldr	r3, [r2, #0]
 8013cdc:	4608      	mov	r0, r1
 8013cde:	4688      	mov	r8, r1
 8013ce0:	3204      	adds	r2, #4
 8013ce2:	4649      	mov	r1, r9
 8013ce4:	920a      	str	r2, [sp, #40]	; 0x28
 8013ce6:	e9c3 0100 	strd	r0, r1, [r3]
 8013cea:	e530      	b.n	801374e <_svfprintf_r+0x4e>
 8013cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cee:	9306      	str	r3, [sp, #24]
 8013cf0:	6813      	ldr	r3, [r2, #0]
 8013cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8013cf4:	f04f 0b00 	mov.w	fp, #0
 8013cf8:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 8013cfc:	f102 0904 	add.w	r9, r2, #4
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	f000 8646 	beq.w	8014992 <_svfprintf_r+0x1292>
 8013d06:	f1ba 0f00 	cmp.w	sl, #0
 8013d0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013d0c:	f2c0 85f6 	blt.w	80148fc <_svfprintf_r+0x11fc>
 8013d10:	4659      	mov	r1, fp
 8013d12:	4652      	mov	r2, sl
 8013d14:	f002 f9ec 	bl	80160f0 <memchr>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	f000 8677 	beq.w	8014a0c <_svfprintf_r+0x130c>
 8013d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d20:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8013d24:	1ac3      	subs	r3, r0, r3
 8013d26:	9309      	str	r3, [sp, #36]	; 0x24
 8013d28:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8013d2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d30:	9305      	str	r3, [sp, #20]
 8013d32:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8013d36:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8013d3a:	e603      	b.n	8013944 <_svfprintf_r+0x244>
 8013d3c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8013d40:	2100      	movs	r1, #0
 8013d42:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013d46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013d4a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013d4e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8013d52:	2809      	cmp	r0, #9
 8013d54:	d9f5      	bls.n	8013d42 <_svfprintf_r+0x642>
 8013d56:	9108      	str	r1, [sp, #32]
 8013d58:	e528      	b.n	80137ac <_svfprintf_r+0xac>
 8013d5a:	9306      	str	r3, [sp, #24]
 8013d5c:	9b03      	ldr	r3, [sp, #12]
 8013d5e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013d62:	f043 0310 	orr.w	r3, r3, #16
 8013d66:	9303      	str	r3, [sp, #12]
 8013d68:	9b03      	ldr	r3, [sp, #12]
 8013d6a:	069b      	lsls	r3, r3, #26
 8013d6c:	f53f af5f 	bmi.w	8013c2e <_svfprintf_r+0x52e>
 8013d70:	9b03      	ldr	r3, [sp, #12]
 8013d72:	06d8      	lsls	r0, r3, #27
 8013d74:	f100 836b 	bmi.w	801444e <_svfprintf_r+0xd4e>
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	0659      	lsls	r1, r3, #25
 8013d7c:	f140 8367 	bpl.w	801444e <_svfprintf_r+0xd4e>
 8013d80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d82:	f9b1 8000 	ldrsh.w	r8, [r1]
 8013d86:	3104      	adds	r1, #4
 8013d88:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8013d8c:	4642      	mov	r2, r8
 8013d8e:	464b      	mov	r3, r9
 8013d90:	910a      	str	r1, [sp, #40]	; 0x28
 8013d92:	e758      	b.n	8013c46 <_svfprintf_r+0x546>
 8013d94:	781d      	ldrb	r5, [r3, #0]
 8013d96:	9903      	ldr	r1, [sp, #12]
 8013d98:	2d6c      	cmp	r5, #108	; 0x6c
 8013d9a:	f000 84d3 	beq.w	8014744 <_svfprintf_r+0x1044>
 8013d9e:	f041 0110 	orr.w	r1, r1, #16
 8013da2:	9103      	str	r1, [sp, #12]
 8013da4:	4619      	mov	r1, r3
 8013da6:	e500      	b.n	80137aa <_svfprintf_r+0xaa>
 8013da8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013daa:	6829      	ldr	r1, [r5, #0]
 8013dac:	9108      	str	r1, [sp, #32]
 8013dae:	4608      	mov	r0, r1
 8013db0:	2800      	cmp	r0, #0
 8013db2:	4629      	mov	r1, r5
 8013db4:	f101 0104 	add.w	r1, r1, #4
 8013db8:	f2c0 84cb 	blt.w	8014752 <_svfprintf_r+0x1052>
 8013dbc:	910a      	str	r1, [sp, #40]	; 0x28
 8013dbe:	781d      	ldrb	r5, [r3, #0]
 8013dc0:	4619      	mov	r1, r3
 8013dc2:	e4f2      	b.n	80137aa <_svfprintf_r+0xaa>
 8013dc4:	9903      	ldr	r1, [sp, #12]
 8013dc6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8013dca:	9103      	str	r1, [sp, #12]
 8013dcc:	781d      	ldrb	r5, [r3, #0]
 8013dce:	4619      	mov	r1, r3
 8013dd0:	e4eb      	b.n	80137aa <_svfprintf_r+0xaa>
 8013dd2:	9306      	str	r3, [sp, #24]
 8013dd4:	9b03      	ldr	r3, [sp, #12]
 8013dd6:	f043 0310 	orr.w	r3, r3, #16
 8013dda:	9303      	str	r3, [sp, #12]
 8013ddc:	9b03      	ldr	r3, [sp, #12]
 8013dde:	f013 0320 	ands.w	r3, r3, #32
 8013de2:	f47f aef2 	bne.w	8013bca <_svfprintf_r+0x4ca>
 8013de6:	9a03      	ldr	r2, [sp, #12]
 8013de8:	f012 0210 	ands.w	r2, r2, #16
 8013dec:	f040 831c 	bne.w	8014428 <_svfprintf_r+0xd28>
 8013df0:	9b03      	ldr	r3, [sp, #12]
 8013df2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8013df6:	f000 8317 	beq.w	8014428 <_svfprintf_r+0xd28>
 8013dfa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	460a      	mov	r2, r1
 8013e00:	3204      	adds	r2, #4
 8013e02:	f8b1 8000 	ldrh.w	r8, [r1]
 8013e06:	920a      	str	r2, [sp, #40]	; 0x28
 8013e08:	f04f 0900 	mov.w	r9, #0
 8013e0c:	e55f      	b.n	80138ce <_svfprintf_r+0x1ce>
 8013e0e:	9306      	str	r3, [sp, #24]
 8013e10:	9b03      	ldr	r3, [sp, #12]
 8013e12:	f043 0310 	orr.w	r3, r3, #16
 8013e16:	9303      	str	r3, [sp, #12]
 8013e18:	9b03      	ldr	r3, [sp, #12]
 8013e1a:	0698      	lsls	r0, r3, #26
 8013e1c:	f53f ad4c 	bmi.w	80138b8 <_svfprintf_r+0x1b8>
 8013e20:	9b03      	ldr	r3, [sp, #12]
 8013e22:	06d9      	lsls	r1, r3, #27
 8013e24:	f100 8309 	bmi.w	801443a <_svfprintf_r+0xd3a>
 8013e28:	9b03      	ldr	r3, [sp, #12]
 8013e2a:	065a      	lsls	r2, r3, #25
 8013e2c:	f140 8305 	bpl.w	801443a <_svfprintf_r+0xd3a>
 8013e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e32:	f8b2 8000 	ldrh.w	r8, [r2]
 8013e36:	3204      	adds	r2, #4
 8013e38:	f04f 0900 	mov.w	r9, #0
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	920a      	str	r2, [sp, #40]	; 0x28
 8013e40:	e545      	b.n	80138ce <_svfprintf_r+0x1ce>
 8013e42:	9306      	str	r3, [sp, #24]
 8013e44:	4b22      	ldr	r3, [pc, #136]	; (8013ed0 <_svfprintf_r+0x7d0>)
 8013e46:	9312      	str	r3, [sp, #72]	; 0x48
 8013e48:	9b03      	ldr	r3, [sp, #12]
 8013e4a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013e4e:	069b      	lsls	r3, r3, #26
 8013e50:	f53f af0d 	bmi.w	8013c6e <_svfprintf_r+0x56e>
 8013e54:	9b03      	ldr	r3, [sp, #12]
 8013e56:	06d8      	lsls	r0, r3, #27
 8013e58:	f140 83dc 	bpl.w	8014614 <_svfprintf_r+0xf14>
 8013e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e5e:	4613      	mov	r3, r2
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	4698      	mov	r8, r3
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	3204      	adds	r2, #4
 8013e68:	07d9      	lsls	r1, r3, #31
 8013e6a:	920a      	str	r2, [sp, #40]	; 0x28
 8013e6c:	f04f 0900 	mov.w	r9, #0
 8013e70:	f53f af0b 	bmi.w	8013c8a <_svfprintf_r+0x58a>
 8013e74:	2302      	movs	r3, #2
 8013e76:	e52a      	b.n	80138ce <_svfprintf_r+0x1ce>
 8013e78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e7a:	9306      	str	r3, [sp, #24]
 8013e7c:	680a      	ldr	r2, [r1, #0]
 8013e7e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8013e82:	2300      	movs	r3, #0
 8013e84:	2201      	movs	r2, #1
 8013e86:	3104      	adds	r1, #4
 8013e88:	469c      	mov	ip, r3
 8013e8a:	9205      	str	r2, [sp, #20]
 8013e8c:	910a      	str	r1, [sp, #40]	; 0x28
 8013e8e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8013e92:	ab24      	add	r3, sp, #144	; 0x90
 8013e94:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8013e98:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8013e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8013e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8013ea0:	e556      	b.n	8013950 <_svfprintf_r+0x250>
 8013ea2:	9903      	ldr	r1, [sp, #12]
 8013ea4:	f041 0108 	orr.w	r1, r1, #8
 8013ea8:	9103      	str	r1, [sp, #12]
 8013eaa:	781d      	ldrb	r5, [r3, #0]
 8013eac:	4619      	mov	r1, r3
 8013eae:	e47c      	b.n	80137aa <_svfprintf_r+0xaa>
 8013eb0:	9903      	ldr	r1, [sp, #12]
 8013eb2:	f041 0101 	orr.w	r1, r1, #1
 8013eb6:	9103      	str	r1, [sp, #12]
 8013eb8:	781d      	ldrb	r5, [r3, #0]
 8013eba:	4619      	mov	r1, r3
 8013ebc:	e475      	b.n	80137aa <_svfprintf_r+0xaa>
 8013ebe:	9903      	ldr	r1, [sp, #12]
 8013ec0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8013ec4:	9103      	str	r1, [sp, #12]
 8013ec6:	781d      	ldrb	r5, [r3, #0]
 8013ec8:	4619      	mov	r1, r3
 8013eca:	e46e      	b.n	80137aa <_svfprintf_r+0xaa>
 8013ecc:	08017a54 	.word	0x08017a54
 8013ed0:	08017a40 	.word	0x08017a40
 8013ed4:	08017a10 	.word	0x08017a10
 8013ed8:	08017a20 	.word	0x08017a20
 8013edc:	9306      	str	r3, [sp, #24]
 8013ede:	9b03      	ldr	r3, [sp, #12]
 8013ee0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013ee4:	f013 0f08 	tst.w	r3, #8
 8013ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eea:	46d3      	mov	fp, sl
 8013eec:	f103 0907 	add.w	r9, r3, #7
 8013ef0:	f000 8386 	beq.w	8014600 <_svfprintf_r+0xf00>
 8013ef4:	f029 0307 	bic.w	r3, r9, #7
 8013ef8:	ed93 7b00 	vldr	d7, [r3]
 8013efc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013f00:	f103 0208 	add.w	r2, r3, #8
 8013f04:	920a      	str	r2, [sp, #40]	; 0x28
 8013f06:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8013f0a:	f002 fc71 	bl	80167f0 <__fpclassifyd>
 8013f0e:	2801      	cmp	r0, #1
 8013f10:	f040 835a 	bne.w	80145c8 <_svfprintf_r+0xec8>
 8013f14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013f18:	2200      	movs	r2, #0
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	f7f8 fe58 	bl	800cbd0 <__aeabi_dcmplt>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	f040 856b 	bne.w	80149fc <_svfprintf_r+0x12fc>
 8013f26:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8013f2a:	9b03      	ldr	r3, [sp, #12]
 8013f2c:	4abd      	ldr	r2, [pc, #756]	; (8014224 <_svfprintf_r+0xb24>)
 8013f2e:	f8df e300 	ldr.w	lr, [pc, #768]	; 8014230 <_svfprintf_r+0xb30>
 8013f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f36:	9303      	str	r3, [sp, #12]
 8013f38:	4613      	mov	r3, r2
 8013f3a:	2103      	movs	r1, #3
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	2d47      	cmp	r5, #71	; 0x47
 8013f40:	bfd8      	it	le
 8013f42:	4673      	movle	r3, lr
 8013f44:	9105      	str	r1, [sp, #20]
 8013f46:	900d      	str	r0, [sp, #52]	; 0x34
 8013f48:	930c      	str	r3, [sp, #48]	; 0x30
 8013f4a:	9109      	str	r1, [sp, #36]	; 0x24
 8013f4c:	900e      	str	r0, [sp, #56]	; 0x38
 8013f4e:	e4f9      	b.n	8013944 <_svfprintf_r+0x244>
 8013f50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f52:	9903      	ldr	r1, [sp, #12]
 8013f54:	9306      	str	r3, [sp, #24]
 8013f56:	2230      	movs	r2, #48	; 0x30
 8013f58:	6803      	ldr	r3, [r0, #0]
 8013f5a:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8013f5e:	4602      	mov	r2, r0
 8013f60:	2578      	movs	r5, #120	; 0x78
 8013f62:	f041 0102 	orr.w	r1, r1, #2
 8013f66:	3204      	adds	r2, #4
 8013f68:	4698      	mov	r8, r3
 8013f6a:	4baf      	ldr	r3, [pc, #700]	; (8014228 <_svfprintf_r+0xb28>)
 8013f6c:	9312      	str	r3, [sp, #72]	; 0x48
 8013f6e:	9103      	str	r1, [sp, #12]
 8013f70:	920a      	str	r2, [sp, #40]	; 0x28
 8013f72:	f04f 0900 	mov.w	r9, #0
 8013f76:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8013f7a:	2302      	movs	r3, #2
 8013f7c:	e4a7      	b.n	80138ce <_svfprintf_r+0x1ce>
 8013f7e:	9306      	str	r3, [sp, #24]
 8013f80:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8013f84:	2d00      	cmp	r5, #0
 8013f86:	f000 83d1 	beq.w	801472c <_svfprintf_r+0x102c>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	469c      	mov	ip, r3
 8013f90:	9205      	str	r2, [sp, #20]
 8013f92:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8013f96:	e77a      	b.n	8013e8e <_svfprintf_r+0x78e>
 8013f98:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8013f9c:	e535      	b.n	8013a0a <_svfprintf_r+0x30a>
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	f47f acad 	bne.w	80138fe <_svfprintf_r+0x1fe>
 8013fa4:	f1b9 0f00 	cmp.w	r9, #0
 8013fa8:	bf08      	it	eq
 8013faa:	f1b8 0f0a 	cmpeq.w	r8, #10
 8013fae:	f080 820d 	bcs.w	80143cc <_svfprintf_r+0xccc>
 8013fb2:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8013fb6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8013fba:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 8013fbe:	ebcb 0307 	rsb	r3, fp, r7
 8013fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8013fc4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8013fc8:	e4b4      	b.n	8013934 <_svfprintf_r+0x234>
 8013fca:	2d65      	cmp	r5, #101	; 0x65
 8013fcc:	f340 80a0 	ble.w	8014110 <_svfprintf_r+0xa10>
 8013fd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f7f8 fdf0 	bl	800cbbc <__aeabi_dcmpeq>
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	f000 8144 	beq.w	801426a <_svfprintf_r+0xb6a>
 8013fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013fe4:	4a91      	ldr	r2, [pc, #580]	; (801422c <_svfprintf_r+0xb2c>)
 8013fe6:	6022      	str	r2, [r4, #0]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	f10b 0b01 	add.w	fp, fp, #1
 8013fee:	2201      	movs	r2, #1
 8013ff0:	2b07      	cmp	r3, #7
 8013ff2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013ff6:	9322      	str	r3, [sp, #136]	; 0x88
 8013ff8:	6062      	str	r2, [r4, #4]
 8013ffa:	f300 833f 	bgt.w	801467c <_svfprintf_r+0xf7c>
 8013ffe:	3408      	adds	r4, #8
 8014000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014004:	4293      	cmp	r3, r2
 8014006:	db03      	blt.n	8014010 <_svfprintf_r+0x910>
 8014008:	9b03      	ldr	r3, [sp, #12]
 801400a:	07da      	lsls	r2, r3, #31
 801400c:	f57f ad7b 	bpl.w	8013b06 <_svfprintf_r+0x406>
 8014010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014012:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014014:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014016:	6022      	str	r2, [r4, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	448b      	add	fp, r1
 801401c:	2b07      	cmp	r3, #7
 801401e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014022:	6061      	str	r1, [r4, #4]
 8014024:	9322      	str	r3, [sp, #136]	; 0x88
 8014026:	f300 839b 	bgt.w	8014760 <_svfprintf_r+0x1060>
 801402a:	3408      	adds	r4, #8
 801402c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801402e:	1e5d      	subs	r5, r3, #1
 8014030:	2d00      	cmp	r5, #0
 8014032:	f77f ad68 	ble.w	8013b06 <_svfprintf_r+0x406>
 8014036:	2d10      	cmp	r5, #16
 8014038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801403a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8014234 <_svfprintf_r+0xb34>
 801403e:	f340 81b9 	ble.w	80143b4 <_svfprintf_r+0xcb4>
 8014042:	f04f 0810 	mov.w	r8, #16
 8014046:	465a      	mov	r2, fp
 8014048:	f8dd a010 	ldr.w	sl, [sp, #16]
 801404c:	e004      	b.n	8014058 <_svfprintf_r+0x958>
 801404e:	3408      	adds	r4, #8
 8014050:	3d10      	subs	r5, #16
 8014052:	2d10      	cmp	r5, #16
 8014054:	f340 81ad 	ble.w	80143b2 <_svfprintf_r+0xcb2>
 8014058:	3301      	adds	r3, #1
 801405a:	3210      	adds	r2, #16
 801405c:	2b07      	cmp	r3, #7
 801405e:	9223      	str	r2, [sp, #140]	; 0x8c
 8014060:	9322      	str	r3, [sp, #136]	; 0x88
 8014062:	f8c4 9000 	str.w	r9, [r4]
 8014066:	f8c4 8004 	str.w	r8, [r4, #4]
 801406a:	ddf0      	ble.n	801404e <_svfprintf_r+0x94e>
 801406c:	4650      	mov	r0, sl
 801406e:	4631      	mov	r1, r6
 8014070:	aa21      	add	r2, sp, #132	; 0x84
 8014072:	f002 fc1d 	bl	80168b0 <__ssprint_r>
 8014076:	2800      	cmp	r0, #0
 8014078:	f47f ac0a 	bne.w	8013890 <_svfprintf_r+0x190>
 801407c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801407e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014080:	463c      	mov	r4, r7
 8014082:	e7e5      	b.n	8014050 <_svfprintf_r+0x950>
 8014084:	9b08      	ldr	r3, [sp, #32]
 8014086:	9a05      	ldr	r2, [sp, #20]
 8014088:	ebc2 0a03 	rsb	sl, r2, r3
 801408c:	f1ba 0f00 	cmp.w	sl, #0
 8014090:	f77f ace3 	ble.w	8013a5a <_svfprintf_r+0x35a>
 8014094:	f1ba 0f10 	cmp.w	sl, #16
 8014098:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801409a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8014234 <_svfprintf_r+0xb34>
 801409e:	dd2b      	ble.n	80140f8 <_svfprintf_r+0x9f8>
 80140a0:	4649      	mov	r1, r9
 80140a2:	465b      	mov	r3, fp
 80140a4:	46a9      	mov	r9, r5
 80140a6:	f04f 0810 	mov.w	r8, #16
 80140aa:	f8dd b010 	ldr.w	fp, [sp, #16]
 80140ae:	460d      	mov	r5, r1
 80140b0:	e006      	b.n	80140c0 <_svfprintf_r+0x9c0>
 80140b2:	f1aa 0a10 	sub.w	sl, sl, #16
 80140b6:	f1ba 0f10 	cmp.w	sl, #16
 80140ba:	f104 0408 	add.w	r4, r4, #8
 80140be:	dd17      	ble.n	80140f0 <_svfprintf_r+0x9f0>
 80140c0:	3201      	adds	r2, #1
 80140c2:	3310      	adds	r3, #16
 80140c4:	2a07      	cmp	r2, #7
 80140c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80140c8:	9222      	str	r2, [sp, #136]	; 0x88
 80140ca:	e884 0120 	stmia.w	r4, {r5, r8}
 80140ce:	ddf0      	ble.n	80140b2 <_svfprintf_r+0x9b2>
 80140d0:	4658      	mov	r0, fp
 80140d2:	4631      	mov	r1, r6
 80140d4:	aa21      	add	r2, sp, #132	; 0x84
 80140d6:	f002 fbeb 	bl	80168b0 <__ssprint_r>
 80140da:	2800      	cmp	r0, #0
 80140dc:	f47f abd8 	bne.w	8013890 <_svfprintf_r+0x190>
 80140e0:	f1aa 0a10 	sub.w	sl, sl, #16
 80140e4:	f1ba 0f10 	cmp.w	sl, #16
 80140e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80140ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80140ec:	463c      	mov	r4, r7
 80140ee:	dce7      	bgt.n	80140c0 <_svfprintf_r+0x9c0>
 80140f0:	469b      	mov	fp, r3
 80140f2:	462b      	mov	r3, r5
 80140f4:	464d      	mov	r5, r9
 80140f6:	4699      	mov	r9, r3
 80140f8:	3201      	adds	r2, #1
 80140fa:	44d3      	add	fp, sl
 80140fc:	2a07      	cmp	r2, #7
 80140fe:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014102:	9222      	str	r2, [sp, #136]	; 0x88
 8014104:	e884 0600 	stmia.w	r4, {r9, sl}
 8014108:	f300 8251 	bgt.w	80145ae <_svfprintf_r+0xeae>
 801410c:	3408      	adds	r4, #8
 801410e:	e4a4      	b.n	8013a5a <_svfprintf_r+0x35a>
 8014110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014112:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8014114:	2b01      	cmp	r3, #1
 8014116:	f340 821f 	ble.w	8014558 <_svfprintf_r+0xe58>
 801411a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	3501      	adds	r5, #1
 8014120:	f10b 0301 	add.w	r3, fp, #1
 8014124:	2201      	movs	r2, #1
 8014126:	2d07      	cmp	r5, #7
 8014128:	9323      	str	r3, [sp, #140]	; 0x8c
 801412a:	9522      	str	r5, [sp, #136]	; 0x88
 801412c:	6062      	str	r2, [r4, #4]
 801412e:	f300 8225 	bgt.w	801457c <_svfprintf_r+0xe7c>
 8014132:	3408      	adds	r4, #8
 8014134:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014136:	6061      	str	r1, [r4, #4]
 8014138:	3501      	adds	r5, #1
 801413a:	eb03 0b01 	add.w	fp, r3, r1
 801413e:	2d07      	cmp	r5, #7
 8014140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014142:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014146:	9522      	str	r5, [sp, #136]	; 0x88
 8014148:	6023      	str	r3, [r4, #0]
 801414a:	f300 8223 	bgt.w	8014594 <_svfprintf_r+0xe94>
 801414e:	3408      	adds	r4, #8
 8014150:	2300      	movs	r3, #0
 8014152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014156:	2200      	movs	r2, #0
 8014158:	f7f8 fd30 	bl	800cbbc <__aeabi_dcmpeq>
 801415c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801415e:	2800      	cmp	r0, #0
 8014160:	f040 80dd 	bne.w	801431e <_svfprintf_r+0xc1e>
 8014164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014166:	3b01      	subs	r3, #1
 8014168:	3501      	adds	r5, #1
 801416a:	3201      	adds	r2, #1
 801416c:	449b      	add	fp, r3
 801416e:	2d07      	cmp	r5, #7
 8014170:	9522      	str	r5, [sp, #136]	; 0x88
 8014172:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014176:	6022      	str	r2, [r4, #0]
 8014178:	6063      	str	r3, [r4, #4]
 801417a:	f300 810d 	bgt.w	8014398 <_svfprintf_r+0xc98>
 801417e:	3408      	adds	r4, #8
 8014180:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014182:	6062      	str	r2, [r4, #4]
 8014184:	3501      	adds	r5, #1
 8014186:	4493      	add	fp, r2
 8014188:	ab1d      	add	r3, sp, #116	; 0x74
 801418a:	2d07      	cmp	r5, #7
 801418c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014190:	9522      	str	r5, [sp, #136]	; 0x88
 8014192:	6023      	str	r3, [r4, #0]
 8014194:	f77f acb6 	ble.w	8013b04 <_svfprintf_r+0x404>
 8014198:	9804      	ldr	r0, [sp, #16]
 801419a:	4631      	mov	r1, r6
 801419c:	aa21      	add	r2, sp, #132	; 0x84
 801419e:	f002 fb87 	bl	80168b0 <__ssprint_r>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	f47f ab74 	bne.w	8013890 <_svfprintf_r+0x190>
 80141a8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80141ac:	463c      	mov	r4, r7
 80141ae:	e4aa      	b.n	8013b06 <_svfprintf_r+0x406>
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d132      	bne.n	801421a <_svfprintf_r+0xb1a>
 80141b4:	9b03      	ldr	r3, [sp, #12]
 80141b6:	07d8      	lsls	r0, r3, #31
 80141b8:	d52f      	bpl.n	801421a <_svfprintf_r+0xb1a>
 80141ba:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80141be:	2330      	movs	r3, #48	; 0x30
 80141c0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80141c4:	ebcb 0307 	rsb	r3, fp, r7
 80141c8:	9309      	str	r3, [sp, #36]	; 0x24
 80141ca:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80141ce:	f7ff bbb1 	b.w	8013934 <_svfprintf_r+0x234>
 80141d2:	9804      	ldr	r0, [sp, #16]
 80141d4:	4631      	mov	r1, r6
 80141d6:	aa21      	add	r2, sp, #132	; 0x84
 80141d8:	f002 fb6a 	bl	80168b0 <__ssprint_r>
 80141dc:	2800      	cmp	r0, #0
 80141de:	f47f ab57 	bne.w	8013890 <_svfprintf_r+0x190>
 80141e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80141e6:	463c      	mov	r4, r7
 80141e8:	e47b      	b.n	8013ae2 <_svfprintf_r+0x3e2>
 80141ea:	9804      	ldr	r0, [sp, #16]
 80141ec:	4631      	mov	r1, r6
 80141ee:	aa21      	add	r2, sp, #132	; 0x84
 80141f0:	f002 fb5e 	bl	80168b0 <__ssprint_r>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	f47f ab4b 	bne.w	8013890 <_svfprintf_r+0x190>
 80141fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80141fe:	463c      	mov	r4, r7
 8014200:	e427      	b.n	8013a52 <_svfprintf_r+0x352>
 8014202:	9804      	ldr	r0, [sp, #16]
 8014204:	4631      	mov	r1, r6
 8014206:	aa21      	add	r2, sp, #132	; 0x84
 8014208:	f002 fb52 	bl	80168b0 <__ssprint_r>
 801420c:	2800      	cmp	r0, #0
 801420e:	f47f ab3f 	bne.w	8013890 <_svfprintf_r+0x190>
 8014212:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014216:	463c      	mov	r4, r7
 8014218:	e40a      	b.n	8013a30 <_svfprintf_r+0x330>
 801421a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801421e:	970c      	str	r7, [sp, #48]	; 0x30
 8014220:	f7ff bb88 	b.w	8013934 <_svfprintf_r+0x234>
 8014224:	08017a34 	.word	0x08017a34
 8014228:	08017a54 	.word	0x08017a54
 801422c:	08017a70 	.word	0x08017a70
 8014230:	08017a30 	.word	0x08017a30
 8014234:	08017a10 	.word	0x08017a10
 8014238:	9812      	ldr	r0, [sp, #72]	; 0x48
 801423a:	46bb      	mov	fp, r7
 801423c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8014240:	f008 010f 	and.w	r1, r8, #15
 8014244:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8014248:	ea4f 1219 	mov.w	r2, r9, lsr #4
 801424c:	4698      	mov	r8, r3
 801424e:	4691      	mov	r9, r2
 8014250:	5c43      	ldrb	r3, [r0, r1]
 8014252:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8014256:	ea58 0309 	orrs.w	r3, r8, r9
 801425a:	d1ef      	bne.n	801423c <_svfprintf_r+0xb3c>
 801425c:	465b      	mov	r3, fp
 801425e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8014262:	1afb      	subs	r3, r7, r3
 8014264:	9309      	str	r3, [sp, #36]	; 0x24
 8014266:	f7ff bb65 	b.w	8013934 <_svfprintf_r+0x234>
 801426a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801426c:	2d00      	cmp	r5, #0
 801426e:	f340 8211 	ble.w	8014694 <_svfprintf_r+0xf94>
 8014272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014274:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014276:	428a      	cmp	r2, r1
 8014278:	4613      	mov	r3, r2
 801427a:	bfa8      	it	ge
 801427c:	460b      	movge	r3, r1
 801427e:	461d      	mov	r5, r3
 8014280:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014282:	2d00      	cmp	r5, #0
 8014284:	eb01 0a02 	add.w	sl, r1, r2
 8014288:	dd0b      	ble.n	80142a2 <_svfprintf_r+0xba2>
 801428a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801428c:	6021      	str	r1, [r4, #0]
 801428e:	3301      	adds	r3, #1
 8014290:	44ab      	add	fp, r5
 8014292:	2b07      	cmp	r3, #7
 8014294:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014298:	6065      	str	r5, [r4, #4]
 801429a:	9322      	str	r3, [sp, #136]	; 0x88
 801429c:	f300 8355 	bgt.w	801494a <_svfprintf_r+0x124a>
 80142a0:	3408      	adds	r4, #8
 80142a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142a4:	2d00      	cmp	r5, #0
 80142a6:	bfa8      	it	ge
 80142a8:	1b5b      	subge	r3, r3, r5
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	461d      	mov	r5, r3
 80142ae:	f340 80f5 	ble.w	801449c <_svfprintf_r+0xd9c>
 80142b2:	2d10      	cmp	r5, #16
 80142b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80142b6:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 80148c0 <_svfprintf_r+0x11c0>
 80142ba:	f340 81d2 	ble.w	8014662 <_svfprintf_r+0xf62>
 80142be:	465a      	mov	r2, fp
 80142c0:	f04f 0810 	mov.w	r8, #16
 80142c4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80142c8:	e004      	b.n	80142d4 <_svfprintf_r+0xbd4>
 80142ca:	3408      	adds	r4, #8
 80142cc:	3d10      	subs	r5, #16
 80142ce:	2d10      	cmp	r5, #16
 80142d0:	f340 81c6 	ble.w	8014660 <_svfprintf_r+0xf60>
 80142d4:	3301      	adds	r3, #1
 80142d6:	3210      	adds	r2, #16
 80142d8:	2b07      	cmp	r3, #7
 80142da:	9223      	str	r2, [sp, #140]	; 0x8c
 80142dc:	9322      	str	r3, [sp, #136]	; 0x88
 80142de:	f8c4 9000 	str.w	r9, [r4]
 80142e2:	f8c4 8004 	str.w	r8, [r4, #4]
 80142e6:	ddf0      	ble.n	80142ca <_svfprintf_r+0xbca>
 80142e8:	4658      	mov	r0, fp
 80142ea:	4631      	mov	r1, r6
 80142ec:	aa21      	add	r2, sp, #132	; 0x84
 80142ee:	f002 fadf 	bl	80168b0 <__ssprint_r>
 80142f2:	2800      	cmp	r0, #0
 80142f4:	f47f aacc 	bne.w	8013890 <_svfprintf_r+0x190>
 80142f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80142fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80142fc:	463c      	mov	r4, r7
 80142fe:	e7e5      	b.n	80142cc <_svfprintf_r+0xbcc>
 8014300:	9804      	ldr	r0, [sp, #16]
 8014302:	4631      	mov	r1, r6
 8014304:	aa21      	add	r2, sp, #132	; 0x84
 8014306:	f002 fad3 	bl	80168b0 <__ssprint_r>
 801430a:	2800      	cmp	r0, #0
 801430c:	f47f aac0 	bne.w	8013890 <_svfprintf_r+0x190>
 8014310:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8014314:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014318:	463c      	mov	r4, r7
 801431a:	f7ff bb76 	b.w	8013a0a <_svfprintf_r+0x30a>
 801431e:	f103 38ff 	add.w	r8, r3, #4294967295
 8014322:	f1b8 0f00 	cmp.w	r8, #0
 8014326:	f77f af2b 	ble.w	8014180 <_svfprintf_r+0xa80>
 801432a:	f1b8 0f10 	cmp.w	r8, #16
 801432e:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 80148c0 <_svfprintf_r+0x11c0>
 8014332:	dd25      	ble.n	8014380 <_svfprintf_r+0xc80>
 8014334:	465b      	mov	r3, fp
 8014336:	f04f 0a10 	mov.w	sl, #16
 801433a:	f8dd b010 	ldr.w	fp, [sp, #16]
 801433e:	e006      	b.n	801434e <_svfprintf_r+0xc4e>
 8014340:	f1a8 0810 	sub.w	r8, r8, #16
 8014344:	f1b8 0f10 	cmp.w	r8, #16
 8014348:	f104 0408 	add.w	r4, r4, #8
 801434c:	dd17      	ble.n	801437e <_svfprintf_r+0xc7e>
 801434e:	3501      	adds	r5, #1
 8014350:	3310      	adds	r3, #16
 8014352:	2d07      	cmp	r5, #7
 8014354:	9323      	str	r3, [sp, #140]	; 0x8c
 8014356:	9522      	str	r5, [sp, #136]	; 0x88
 8014358:	e884 0600 	stmia.w	r4, {r9, sl}
 801435c:	ddf0      	ble.n	8014340 <_svfprintf_r+0xc40>
 801435e:	4658      	mov	r0, fp
 8014360:	4631      	mov	r1, r6
 8014362:	aa21      	add	r2, sp, #132	; 0x84
 8014364:	f002 faa4 	bl	80168b0 <__ssprint_r>
 8014368:	2800      	cmp	r0, #0
 801436a:	f47f aa91 	bne.w	8013890 <_svfprintf_r+0x190>
 801436e:	f1a8 0810 	sub.w	r8, r8, #16
 8014372:	f1b8 0f10 	cmp.w	r8, #16
 8014376:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014378:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801437a:	463c      	mov	r4, r7
 801437c:	dce7      	bgt.n	801434e <_svfprintf_r+0xc4e>
 801437e:	469b      	mov	fp, r3
 8014380:	3501      	adds	r5, #1
 8014382:	44c3      	add	fp, r8
 8014384:	2d07      	cmp	r5, #7
 8014386:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801438a:	9522      	str	r5, [sp, #136]	; 0x88
 801438c:	f8c4 9000 	str.w	r9, [r4]
 8014390:	f8c4 8004 	str.w	r8, [r4, #4]
 8014394:	f77f aef3 	ble.w	801417e <_svfprintf_r+0xa7e>
 8014398:	9804      	ldr	r0, [sp, #16]
 801439a:	4631      	mov	r1, r6
 801439c:	aa21      	add	r2, sp, #132	; 0x84
 801439e:	f002 fa87 	bl	80168b0 <__ssprint_r>
 80143a2:	2800      	cmp	r0, #0
 80143a4:	f47f aa74 	bne.w	8013890 <_svfprintf_r+0x190>
 80143a8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80143ac:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80143ae:	463c      	mov	r4, r7
 80143b0:	e6e6      	b.n	8014180 <_svfprintf_r+0xa80>
 80143b2:	4693      	mov	fp, r2
 80143b4:	3301      	adds	r3, #1
 80143b6:	44ab      	add	fp, r5
 80143b8:	2b07      	cmp	r3, #7
 80143ba:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80143be:	9322      	str	r3, [sp, #136]	; 0x88
 80143c0:	f8c4 9000 	str.w	r9, [r4]
 80143c4:	6065      	str	r5, [r4, #4]
 80143c6:	f77f ab9d 	ble.w	8013b04 <_svfprintf_r+0x404>
 80143ca:	e6e5      	b.n	8014198 <_svfprintf_r+0xa98>
 80143cc:	46bb      	mov	fp, r7
 80143ce:	f8cd c014 	str.w	ip, [sp, #20]
 80143d2:	4640      	mov	r0, r8
 80143d4:	4649      	mov	r1, r9
 80143d6:	220a      	movs	r2, #10
 80143d8:	2300      	movs	r3, #0
 80143da:	f7f8 fc21 	bl	800cc20 <__aeabi_uldivmod>
 80143de:	3230      	adds	r2, #48	; 0x30
 80143e0:	4640      	mov	r0, r8
 80143e2:	4649      	mov	r1, r9
 80143e4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80143e8:	2300      	movs	r3, #0
 80143ea:	220a      	movs	r2, #10
 80143ec:	f7f8 fc18 	bl	800cc20 <__aeabi_uldivmod>
 80143f0:	4680      	mov	r8, r0
 80143f2:	4689      	mov	r9, r1
 80143f4:	ea58 0309 	orrs.w	r3, r8, r9
 80143f8:	d1eb      	bne.n	80143d2 <_svfprintf_r+0xcd2>
 80143fa:	465b      	mov	r3, fp
 80143fc:	1afb      	subs	r3, r7, r3
 80143fe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8014402:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8014406:	9309      	str	r3, [sp, #36]	; 0x24
 8014408:	f7ff ba94 	b.w	8013934 <_svfprintf_r+0x234>
 801440c:	2b30      	cmp	r3, #48	; 0x30
 801440e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014410:	f43f af27 	beq.w	8014262 <_svfprintf_r+0xb62>
 8014414:	3b01      	subs	r3, #1
 8014416:	461a      	mov	r2, r3
 8014418:	930c      	str	r3, [sp, #48]	; 0x30
 801441a:	1aba      	subs	r2, r7, r2
 801441c:	2330      	movs	r3, #48	; 0x30
 801441e:	9209      	str	r2, [sp, #36]	; 0x24
 8014420:	f801 3c01 	strb.w	r3, [r1, #-1]
 8014424:	f7ff ba86 	b.w	8013934 <_svfprintf_r+0x234>
 8014428:	990a      	ldr	r1, [sp, #40]	; 0x28
 801442a:	680a      	ldr	r2, [r1, #0]
 801442c:	3104      	adds	r1, #4
 801442e:	910a      	str	r1, [sp, #40]	; 0x28
 8014430:	4690      	mov	r8, r2
 8014432:	f04f 0900 	mov.w	r9, #0
 8014436:	f7ff ba4a 	b.w	80138ce <_svfprintf_r+0x1ce>
 801443a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801443c:	680a      	ldr	r2, [r1, #0]
 801443e:	3104      	adds	r1, #4
 8014440:	2301      	movs	r3, #1
 8014442:	910a      	str	r1, [sp, #40]	; 0x28
 8014444:	4690      	mov	r8, r2
 8014446:	f04f 0900 	mov.w	r9, #0
 801444a:	f7ff ba40 	b.w	80138ce <_svfprintf_r+0x1ce>
 801444e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014450:	6813      	ldr	r3, [r2, #0]
 8014452:	4698      	mov	r8, r3
 8014454:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8014458:	4613      	mov	r3, r2
 801445a:	3304      	adds	r3, #4
 801445c:	4642      	mov	r2, r8
 801445e:	930a      	str	r3, [sp, #40]	; 0x28
 8014460:	2a00      	cmp	r2, #0
 8014462:	464b      	mov	r3, r9
 8014464:	f173 0300 	sbcs.w	r3, r3, #0
 8014468:	f6bf abf2 	bge.w	8013c50 <_svfprintf_r+0x550>
 801446c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8014470:	f1d8 0800 	rsbs	r8, r8, #0
 8014474:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8014478:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 801447c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014480:	2301      	movs	r3, #1
 8014482:	f7ff ba2a 	b.w	80138da <_svfprintf_r+0x1da>
 8014486:	9804      	ldr	r0, [sp, #16]
 8014488:	4631      	mov	r1, r6
 801448a:	aa21      	add	r2, sp, #132	; 0x84
 801448c:	f002 fa10 	bl	80168b0 <__ssprint_r>
 8014490:	2800      	cmp	r0, #0
 8014492:	f47f a9fd 	bne.w	8013890 <_svfprintf_r+0x190>
 8014496:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801449a:	463c      	mov	r4, r7
 801449c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801449e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80144a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144a2:	440a      	add	r2, r1
 80144a4:	4690      	mov	r8, r2
 80144a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144a8:	4293      	cmp	r3, r2
 80144aa:	db46      	blt.n	801453a <_svfprintf_r+0xe3a>
 80144ac:	9a03      	ldr	r2, [sp, #12]
 80144ae:	07d0      	lsls	r0, r2, #31
 80144b0:	d443      	bmi.n	801453a <_svfprintf_r+0xe3a>
 80144b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144b4:	ebc8 050a 	rsb	r5, r8, sl
 80144b8:	1ad3      	subs	r3, r2, r3
 80144ba:	429d      	cmp	r5, r3
 80144bc:	bfa8      	it	ge
 80144be:	461d      	movge	r5, r3
 80144c0:	2d00      	cmp	r5, #0
 80144c2:	dd0c      	ble.n	80144de <_svfprintf_r+0xdde>
 80144c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80144c6:	f8c4 8000 	str.w	r8, [r4]
 80144ca:	3201      	adds	r2, #1
 80144cc:	44ab      	add	fp, r5
 80144ce:	2a07      	cmp	r2, #7
 80144d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80144d4:	6065      	str	r5, [r4, #4]
 80144d6:	9222      	str	r2, [sp, #136]	; 0x88
 80144d8:	f300 826f 	bgt.w	80149ba <_svfprintf_r+0x12ba>
 80144dc:	3408      	adds	r4, #8
 80144de:	2d00      	cmp	r5, #0
 80144e0:	bfac      	ite	ge
 80144e2:	1b5d      	subge	r5, r3, r5
 80144e4:	461d      	movlt	r5, r3
 80144e6:	2d00      	cmp	r5, #0
 80144e8:	f77f ab0d 	ble.w	8013b06 <_svfprintf_r+0x406>
 80144ec:	2d10      	cmp	r5, #16
 80144ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80144f0:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 80148c0 <_svfprintf_r+0x11c0>
 80144f4:	f77f af5e 	ble.w	80143b4 <_svfprintf_r+0xcb4>
 80144f8:	f04f 0810 	mov.w	r8, #16
 80144fc:	465a      	mov	r2, fp
 80144fe:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014502:	e004      	b.n	801450e <_svfprintf_r+0xe0e>
 8014504:	3408      	adds	r4, #8
 8014506:	3d10      	subs	r5, #16
 8014508:	2d10      	cmp	r5, #16
 801450a:	f77f af52 	ble.w	80143b2 <_svfprintf_r+0xcb2>
 801450e:	3301      	adds	r3, #1
 8014510:	3210      	adds	r2, #16
 8014512:	2b07      	cmp	r3, #7
 8014514:	9223      	str	r2, [sp, #140]	; 0x8c
 8014516:	9322      	str	r3, [sp, #136]	; 0x88
 8014518:	f8c4 9000 	str.w	r9, [r4]
 801451c:	f8c4 8004 	str.w	r8, [r4, #4]
 8014520:	ddf0      	ble.n	8014504 <_svfprintf_r+0xe04>
 8014522:	4650      	mov	r0, sl
 8014524:	4631      	mov	r1, r6
 8014526:	aa21      	add	r2, sp, #132	; 0x84
 8014528:	f002 f9c2 	bl	80168b0 <__ssprint_r>
 801452c:	2800      	cmp	r0, #0
 801452e:	f47f a9af 	bne.w	8013890 <_svfprintf_r+0x190>
 8014532:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014536:	463c      	mov	r4, r7
 8014538:	e7e5      	b.n	8014506 <_svfprintf_r+0xe06>
 801453a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801453c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801453e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014540:	6021      	str	r1, [r4, #0]
 8014542:	3201      	adds	r2, #1
 8014544:	4483      	add	fp, r0
 8014546:	2a07      	cmp	r2, #7
 8014548:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801454c:	6060      	str	r0, [r4, #4]
 801454e:	9222      	str	r2, [sp, #136]	; 0x88
 8014550:	f300 8207 	bgt.w	8014962 <_svfprintf_r+0x1262>
 8014554:	3408      	adds	r4, #8
 8014556:	e7ac      	b.n	80144b2 <_svfprintf_r+0xdb2>
 8014558:	9b03      	ldr	r3, [sp, #12]
 801455a:	07d9      	lsls	r1, r3, #31
 801455c:	f53f addd 	bmi.w	801411a <_svfprintf_r+0xa1a>
 8014560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014562:	6023      	str	r3, [r4, #0]
 8014564:	3501      	adds	r5, #1
 8014566:	f10b 0b01 	add.w	fp, fp, #1
 801456a:	2301      	movs	r3, #1
 801456c:	2d07      	cmp	r5, #7
 801456e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8014572:	9522      	str	r5, [sp, #136]	; 0x88
 8014574:	6063      	str	r3, [r4, #4]
 8014576:	f77f ae02 	ble.w	801417e <_svfprintf_r+0xa7e>
 801457a:	e70d      	b.n	8014398 <_svfprintf_r+0xc98>
 801457c:	9804      	ldr	r0, [sp, #16]
 801457e:	4631      	mov	r1, r6
 8014580:	aa21      	add	r2, sp, #132	; 0x84
 8014582:	f002 f995 	bl	80168b0 <__ssprint_r>
 8014586:	2800      	cmp	r0, #0
 8014588:	f47f a982 	bne.w	8013890 <_svfprintf_r+0x190>
 801458c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801458e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8014590:	463c      	mov	r4, r7
 8014592:	e5cf      	b.n	8014134 <_svfprintf_r+0xa34>
 8014594:	9804      	ldr	r0, [sp, #16]
 8014596:	4631      	mov	r1, r6
 8014598:	aa21      	add	r2, sp, #132	; 0x84
 801459a:	f002 f989 	bl	80168b0 <__ssprint_r>
 801459e:	2800      	cmp	r0, #0
 80145a0:	f47f a976 	bne.w	8013890 <_svfprintf_r+0x190>
 80145a4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80145a8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80145aa:	463c      	mov	r4, r7
 80145ac:	e5d0      	b.n	8014150 <_svfprintf_r+0xa50>
 80145ae:	9804      	ldr	r0, [sp, #16]
 80145b0:	4631      	mov	r1, r6
 80145b2:	aa21      	add	r2, sp, #132	; 0x84
 80145b4:	f002 f97c 	bl	80168b0 <__ssprint_r>
 80145b8:	2800      	cmp	r0, #0
 80145ba:	f47f a969 	bne.w	8013890 <_svfprintf_r+0x190>
 80145be:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80145c2:	463c      	mov	r4, r7
 80145c4:	f7ff ba49 	b.w	8013a5a <_svfprintf_r+0x35a>
 80145c8:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 80145cc:	f002 f910 	bl	80167f0 <__fpclassifyd>
 80145d0:	2800      	cmp	r0, #0
 80145d2:	f040 80d1 	bne.w	8014778 <_svfprintf_r+0x1078>
 80145d6:	4686      	mov	lr, r0
 80145d8:	4ab6      	ldr	r2, [pc, #728]	; (80148b4 <_svfprintf_r+0x11b4>)
 80145da:	4bb7      	ldr	r3, [pc, #732]	; (80148b8 <_svfprintf_r+0x11b8>)
 80145dc:	900d      	str	r0, [sp, #52]	; 0x34
 80145de:	9803      	ldr	r0, [sp, #12]
 80145e0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80145e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80145e8:	2103      	movs	r1, #3
 80145ea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80145ee:	2d47      	cmp	r5, #71	; 0x47
 80145f0:	bfd8      	it	le
 80145f2:	461a      	movle	r2, r3
 80145f4:	9105      	str	r1, [sp, #20]
 80145f6:	9003      	str	r0, [sp, #12]
 80145f8:	920c      	str	r2, [sp, #48]	; 0x30
 80145fa:	9109      	str	r1, [sp, #36]	; 0x24
 80145fc:	f7ff b9a2 	b.w	8013944 <_svfprintf_r+0x244>
 8014600:	f029 0907 	bic.w	r9, r9, #7
 8014604:	ed99 7b00 	vldr	d7, [r9]
 8014608:	f109 0308 	add.w	r3, r9, #8
 801460c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014610:	930a      	str	r3, [sp, #40]	; 0x28
 8014612:	e478      	b.n	8013f06 <_svfprintf_r+0x806>
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014618:	f013 0f40 	tst.w	r3, #64	; 0x40
 801461c:	4613      	mov	r3, r2
 801461e:	f43f ac1f 	beq.w	8013e60 <_svfprintf_r+0x760>
 8014622:	3304      	adds	r3, #4
 8014624:	f8b2 8000 	ldrh.w	r8, [r2]
 8014628:	930a      	str	r3, [sp, #40]	; 0x28
 801462a:	f04f 0900 	mov.w	r9, #0
 801462e:	f7ff bb28 	b.w	8013c82 <_svfprintf_r+0x582>
 8014632:	9b03      	ldr	r3, [sp, #12]
 8014634:	06db      	lsls	r3, r3, #27
 8014636:	d40b      	bmi.n	8014650 <_svfprintf_r+0xf50>
 8014638:	9b03      	ldr	r3, [sp, #12]
 801463a:	065d      	lsls	r5, r3, #25
 801463c:	d508      	bpl.n	8014650 <_svfprintf_r+0xf50>
 801463e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014640:	6813      	ldr	r3, [r2, #0]
 8014642:	3204      	adds	r2, #4
 8014644:	920a      	str	r2, [sp, #40]	; 0x28
 8014646:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801464a:	801a      	strh	r2, [r3, #0]
 801464c:	f7ff b87f 	b.w	801374e <_svfprintf_r+0x4e>
 8014650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014652:	6813      	ldr	r3, [r2, #0]
 8014654:	3204      	adds	r2, #4
 8014656:	920a      	str	r2, [sp, #40]	; 0x28
 8014658:	9a07      	ldr	r2, [sp, #28]
 801465a:	601a      	str	r2, [r3, #0]
 801465c:	f7ff b877 	b.w	801374e <_svfprintf_r+0x4e>
 8014660:	4693      	mov	fp, r2
 8014662:	3301      	adds	r3, #1
 8014664:	44ab      	add	fp, r5
 8014666:	2b07      	cmp	r3, #7
 8014668:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801466c:	9322      	str	r3, [sp, #136]	; 0x88
 801466e:	f8c4 9000 	str.w	r9, [r4]
 8014672:	6065      	str	r5, [r4, #4]
 8014674:	f73f af07 	bgt.w	8014486 <_svfprintf_r+0xd86>
 8014678:	3408      	adds	r4, #8
 801467a:	e70f      	b.n	801449c <_svfprintf_r+0xd9c>
 801467c:	9804      	ldr	r0, [sp, #16]
 801467e:	4631      	mov	r1, r6
 8014680:	aa21      	add	r2, sp, #132	; 0x84
 8014682:	f002 f915 	bl	80168b0 <__ssprint_r>
 8014686:	2800      	cmp	r0, #0
 8014688:	f47f a902 	bne.w	8013890 <_svfprintf_r+0x190>
 801468c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014690:	463c      	mov	r4, r7
 8014692:	e4b5      	b.n	8014000 <_svfprintf_r+0x900>
 8014694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014696:	4a89      	ldr	r2, [pc, #548]	; (80148bc <_svfprintf_r+0x11bc>)
 8014698:	6022      	str	r2, [r4, #0]
 801469a:	3301      	adds	r3, #1
 801469c:	f10b 0b01 	add.w	fp, fp, #1
 80146a0:	2201      	movs	r2, #1
 80146a2:	2b07      	cmp	r3, #7
 80146a4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80146a8:	9322      	str	r3, [sp, #136]	; 0x88
 80146aa:	6062      	str	r2, [r4, #4]
 80146ac:	f300 80f1 	bgt.w	8014892 <_svfprintf_r+0x1192>
 80146b0:	3408      	adds	r4, #8
 80146b2:	b92d      	cbnz	r5, 80146c0 <_svfprintf_r+0xfc0>
 80146b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146b6:	b91b      	cbnz	r3, 80146c0 <_svfprintf_r+0xfc0>
 80146b8:	9b03      	ldr	r3, [sp, #12]
 80146ba:	07db      	lsls	r3, r3, #31
 80146bc:	f57f aa23 	bpl.w	8013b06 <_svfprintf_r+0x406>
 80146c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80146c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80146c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80146c6:	6022      	str	r2, [r4, #0]
 80146c8:	3301      	adds	r3, #1
 80146ca:	eb0b 0100 	add.w	r1, fp, r0
 80146ce:	2b07      	cmp	r3, #7
 80146d0:	9123      	str	r1, [sp, #140]	; 0x8c
 80146d2:	6060      	str	r0, [r4, #4]
 80146d4:	9322      	str	r3, [sp, #136]	; 0x88
 80146d6:	f300 81ef 	bgt.w	8014ab8 <_svfprintf_r+0x13b8>
 80146da:	f104 0208 	add.w	r2, r4, #8
 80146de:	426d      	negs	r5, r5
 80146e0:	2d00      	cmp	r5, #0
 80146e2:	f340 80fa 	ble.w	80148da <_svfprintf_r+0x11da>
 80146e6:	2d10      	cmp	r5, #16
 80146e8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80148c0 <_svfprintf_r+0x11c0>
 80146ec:	f340 8146 	ble.w	801497c <_svfprintf_r+0x127c>
 80146f0:	2410      	movs	r4, #16
 80146f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80146f6:	e004      	b.n	8014702 <_svfprintf_r+0x1002>
 80146f8:	3208      	adds	r2, #8
 80146fa:	3d10      	subs	r5, #16
 80146fc:	2d10      	cmp	r5, #16
 80146fe:	f340 813d 	ble.w	801497c <_svfprintf_r+0x127c>
 8014702:	3301      	adds	r3, #1
 8014704:	3110      	adds	r1, #16
 8014706:	2b07      	cmp	r3, #7
 8014708:	9123      	str	r1, [sp, #140]	; 0x8c
 801470a:	9322      	str	r3, [sp, #136]	; 0x88
 801470c:	f8c2 9000 	str.w	r9, [r2]
 8014710:	6054      	str	r4, [r2, #4]
 8014712:	ddf1      	ble.n	80146f8 <_svfprintf_r+0xff8>
 8014714:	4640      	mov	r0, r8
 8014716:	4631      	mov	r1, r6
 8014718:	aa21      	add	r2, sp, #132	; 0x84
 801471a:	f002 f8c9 	bl	80168b0 <__ssprint_r>
 801471e:	2800      	cmp	r0, #0
 8014720:	f47f a8b6 	bne.w	8013890 <_svfprintf_r+0x190>
 8014724:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8014726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014728:	463a      	mov	r2, r7
 801472a:	e7e6      	b.n	80146fa <_svfprintf_r+0xffa>
 801472c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801472e:	46b1      	mov	r9, r6
 8014730:	2b00      	cmp	r3, #0
 8014732:	f43f a8ae 	beq.w	8013892 <_svfprintf_r+0x192>
 8014736:	9804      	ldr	r0, [sp, #16]
 8014738:	4631      	mov	r1, r6
 801473a:	aa21      	add	r2, sp, #132	; 0x84
 801473c:	f002 f8b8 	bl	80168b0 <__ssprint_r>
 8014740:	f7ff b8a7 	b.w	8013892 <_svfprintf_r+0x192>
 8014744:	f041 0120 	orr.w	r1, r1, #32
 8014748:	9103      	str	r1, [sp, #12]
 801474a:	785d      	ldrb	r5, [r3, #1]
 801474c:	1c59      	adds	r1, r3, #1
 801474e:	f7ff b82c 	b.w	80137aa <_svfprintf_r+0xaa>
 8014752:	9808      	ldr	r0, [sp, #32]
 8014754:	910a      	str	r1, [sp, #40]	; 0x28
 8014756:	4240      	negs	r0, r0
 8014758:	9008      	str	r0, [sp, #32]
 801475a:	4619      	mov	r1, r3
 801475c:	f7ff ba29 	b.w	8013bb2 <_svfprintf_r+0x4b2>
 8014760:	9804      	ldr	r0, [sp, #16]
 8014762:	4631      	mov	r1, r6
 8014764:	aa21      	add	r2, sp, #132	; 0x84
 8014766:	f002 f8a3 	bl	80168b0 <__ssprint_r>
 801476a:	2800      	cmp	r0, #0
 801476c:	f47f a890 	bne.w	8013890 <_svfprintf_r+0x190>
 8014770:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014774:	463c      	mov	r4, r7
 8014776:	e459      	b.n	801402c <_svfprintf_r+0x92c>
 8014778:	f025 0320 	bic.w	r3, r5, #32
 801477c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014780:	9305      	str	r3, [sp, #20]
 8014782:	f000 8093 	beq.w	80148ac <_svfprintf_r+0x11ac>
 8014786:	2b47      	cmp	r3, #71	; 0x47
 8014788:	d105      	bne.n	8014796 <_svfprintf_r+0x1096>
 801478a:	f1ba 0f00 	cmp.w	sl, #0
 801478e:	bf14      	ite	ne
 8014790:	46d3      	movne	fp, sl
 8014792:	f04f 0b01 	moveq.w	fp, #1
 8014796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014798:	9a03      	ldr	r2, [sp, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80147a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80147a2:	f2c0 81a4 	blt.w	8014aee <_svfprintf_r+0x13ee>
 80147a6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80147aa:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 80147ae:	f04f 0a00 	mov.w	sl, #0
 80147b2:	2d66      	cmp	r5, #102	; 0x66
 80147b4:	f000 80ac 	beq.w	8014910 <_svfprintf_r+0x1210>
 80147b8:	2d46      	cmp	r5, #70	; 0x46
 80147ba:	f000 80a9 	beq.w	8014910 <_svfprintf_r+0x1210>
 80147be:	9b05      	ldr	r3, [sp, #20]
 80147c0:	9804      	ldr	r0, [sp, #16]
 80147c2:	2b45      	cmp	r3, #69	; 0x45
 80147c4:	bf0c      	ite	eq
 80147c6:	f10b 0901 	addeq.w	r9, fp, #1
 80147ca:	46d9      	movne	r9, fp
 80147cc:	aa1c      	add	r2, sp, #112	; 0x70
 80147ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80147d0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80147d4:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 80147d8:	2102      	movs	r1, #2
 80147da:	464a      	mov	r2, r9
 80147dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80147de:	f000 fa8f 	bl	8014d00 <_dtoa_r>
 80147e2:	2d67      	cmp	r5, #103	; 0x67
 80147e4:	900c      	str	r0, [sp, #48]	; 0x30
 80147e6:	d002      	beq.n	80147ee <_svfprintf_r+0x10ee>
 80147e8:	2d47      	cmp	r5, #71	; 0x47
 80147ea:	f040 809f 	bne.w	801492c <_svfprintf_r+0x122c>
 80147ee:	9b03      	ldr	r3, [sp, #12]
 80147f0:	07db      	lsls	r3, r3, #31
 80147f2:	f140 8192 	bpl.w	8014b1a <_svfprintf_r+0x141a>
 80147f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147f8:	eb03 0809 	add.w	r8, r3, r9
 80147fc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8014800:	2200      	movs	r2, #0
 8014802:	2300      	movs	r3, #0
 8014804:	f7f8 f9da 	bl	800cbbc <__aeabi_dcmpeq>
 8014808:	2800      	cmp	r0, #0
 801480a:	f040 80fd 	bne.w	8014a08 <_svfprintf_r+0x1308>
 801480e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014810:	4598      	cmp	r8, r3
 8014812:	d906      	bls.n	8014822 <_svfprintf_r+0x1122>
 8014814:	2130      	movs	r1, #48	; 0x30
 8014816:	1c5a      	adds	r2, r3, #1
 8014818:	921f      	str	r2, [sp, #124]	; 0x7c
 801481a:	7019      	strb	r1, [r3, #0]
 801481c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801481e:	4598      	cmp	r8, r3
 8014820:	d8f9      	bhi.n	8014816 <_svfprintf_r+0x1116>
 8014822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014824:	1a9b      	subs	r3, r3, r2
 8014826:	930f      	str	r3, [sp, #60]	; 0x3c
 8014828:	9b05      	ldr	r3, [sp, #20]
 801482a:	2b47      	cmp	r3, #71	; 0x47
 801482c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801482e:	f000 80de 	beq.w	80149ee <_svfprintf_r+0x12ee>
 8014832:	2d65      	cmp	r5, #101	; 0x65
 8014834:	f340 80f8 	ble.w	8014a28 <_svfprintf_r+0x1328>
 8014838:	2d66      	cmp	r5, #102	; 0x66
 801483a:	930e      	str	r3, [sp, #56]	; 0x38
 801483c:	f000 8160 	beq.w	8014b00 <_svfprintf_r+0x1400>
 8014840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014844:	4293      	cmp	r3, r2
 8014846:	f300 8144 	bgt.w	8014ad2 <_svfprintf_r+0x13d2>
 801484a:	9b03      	ldr	r3, [sp, #12]
 801484c:	07d9      	lsls	r1, r3, #31
 801484e:	f100 8166 	bmi.w	8014b1e <_svfprintf_r+0x141e>
 8014852:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014856:	9209      	str	r2, [sp, #36]	; 0x24
 8014858:	f1ba 0f00 	cmp.w	sl, #0
 801485c:	f040 80bc 	bne.w	80149d8 <_svfprintf_r+0x12d8>
 8014860:	9305      	str	r3, [sp, #20]
 8014862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014864:	9303      	str	r3, [sp, #12]
 8014866:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801486a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801486e:	f7ff b869 	b.w	8013944 <_svfprintf_r+0x244>
 8014872:	9804      	ldr	r0, [sp, #16]
 8014874:	2140      	movs	r1, #64	; 0x40
 8014876:	f001 f9a3 	bl	8015bc0 <_malloc_r>
 801487a:	f8c9 0000 	str.w	r0, [r9]
 801487e:	f8c9 0010 	str.w	r0, [r9, #16]
 8014882:	2800      	cmp	r0, #0
 8014884:	f000 8197 	beq.w	8014bb6 <_svfprintf_r+0x14b6>
 8014888:	2340      	movs	r3, #64	; 0x40
 801488a:	f8c9 3014 	str.w	r3, [r9, #20]
 801488e:	f7fe bf4f 	b.w	8013730 <_svfprintf_r+0x30>
 8014892:	9804      	ldr	r0, [sp, #16]
 8014894:	4631      	mov	r1, r6
 8014896:	aa21      	add	r2, sp, #132	; 0x84
 8014898:	f002 f80a 	bl	80168b0 <__ssprint_r>
 801489c:	2800      	cmp	r0, #0
 801489e:	f47e aff7 	bne.w	8013890 <_svfprintf_r+0x190>
 80148a2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80148a4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80148a8:	463c      	mov	r4, r7
 80148aa:	e702      	b.n	80146b2 <_svfprintf_r+0xfb2>
 80148ac:	f04f 0b06 	mov.w	fp, #6
 80148b0:	e771      	b.n	8014796 <_svfprintf_r+0x1096>
 80148b2:	bf00      	nop
 80148b4:	08017a3c 	.word	0x08017a3c
 80148b8:	08017a38 	.word	0x08017a38
 80148bc:	08017a70 	.word	0x08017a70
 80148c0:	08017a10 	.word	0x08017a10
 80148c4:	9804      	ldr	r0, [sp, #16]
 80148c6:	4631      	mov	r1, r6
 80148c8:	aa21      	add	r2, sp, #132	; 0x84
 80148ca:	f001 fff1 	bl	80168b0 <__ssprint_r>
 80148ce:	2800      	cmp	r0, #0
 80148d0:	f47e afde 	bne.w	8013890 <_svfprintf_r+0x190>
 80148d4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80148d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80148d8:	463a      	mov	r2, r7
 80148da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80148dc:	6054      	str	r4, [r2, #4]
 80148de:	3301      	adds	r3, #1
 80148e0:	eb01 0b04 	add.w	fp, r1, r4
 80148e4:	2b07      	cmp	r3, #7
 80148e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80148ec:	9322      	str	r3, [sp, #136]	; 0x88
 80148ee:	6011      	str	r1, [r2, #0]
 80148f0:	f73f ac52 	bgt.w	8014198 <_svfprintf_r+0xa98>
 80148f4:	f102 0408 	add.w	r4, r2, #8
 80148f8:	f7ff b905 	b.w	8013b06 <_svfprintf_r+0x406>
 80148fc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8014900:	f001 ffa6 	bl	8016850 <strlen>
 8014904:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8014908:	9009      	str	r0, [sp, #36]	; 0x24
 801490a:	4603      	mov	r3, r0
 801490c:	f7ff ba0e 	b.w	8013d2c <_svfprintf_r+0x62c>
 8014910:	aa1c      	add	r2, sp, #112	; 0x70
 8014912:	ab1f      	add	r3, sp, #124	; 0x7c
 8014914:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014918:	9804      	ldr	r0, [sp, #16]
 801491a:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 801491e:	2103      	movs	r1, #3
 8014920:	465a      	mov	r2, fp
 8014922:	ab1b      	add	r3, sp, #108	; 0x6c
 8014924:	f000 f9ec 	bl	8014d00 <_dtoa_r>
 8014928:	46d9      	mov	r9, fp
 801492a:	900c      	str	r0, [sp, #48]	; 0x30
 801492c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801492e:	eb03 0809 	add.w	r8, r3, r9
 8014932:	9b05      	ldr	r3, [sp, #20]
 8014934:	2b46      	cmp	r3, #70	; 0x46
 8014936:	f47f af61 	bne.w	80147fc <_svfprintf_r+0x10fc>
 801493a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	2b30      	cmp	r3, #48	; 0x30
 8014940:	f000 8103 	beq.w	8014b4a <_svfprintf_r+0x144a>
 8014944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014946:	4498      	add	r8, r3
 8014948:	e758      	b.n	80147fc <_svfprintf_r+0x10fc>
 801494a:	9804      	ldr	r0, [sp, #16]
 801494c:	4631      	mov	r1, r6
 801494e:	aa21      	add	r2, sp, #132	; 0x84
 8014950:	f001 ffae 	bl	80168b0 <__ssprint_r>
 8014954:	2800      	cmp	r0, #0
 8014956:	f47e af9b 	bne.w	8013890 <_svfprintf_r+0x190>
 801495a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801495e:	463c      	mov	r4, r7
 8014960:	e49f      	b.n	80142a2 <_svfprintf_r+0xba2>
 8014962:	9804      	ldr	r0, [sp, #16]
 8014964:	4631      	mov	r1, r6
 8014966:	aa21      	add	r2, sp, #132	; 0x84
 8014968:	f001 ffa2 	bl	80168b0 <__ssprint_r>
 801496c:	2800      	cmp	r0, #0
 801496e:	f47e af8f 	bne.w	8013890 <_svfprintf_r+0x190>
 8014972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014974:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014978:	463c      	mov	r4, r7
 801497a:	e59a      	b.n	80144b2 <_svfprintf_r+0xdb2>
 801497c:	3301      	adds	r3, #1
 801497e:	4429      	add	r1, r5
 8014980:	2b07      	cmp	r3, #7
 8014982:	9123      	str	r1, [sp, #140]	; 0x8c
 8014984:	9322      	str	r3, [sp, #136]	; 0x88
 8014986:	f8c2 9000 	str.w	r9, [r2]
 801498a:	6055      	str	r5, [r2, #4]
 801498c:	dc9a      	bgt.n	80148c4 <_svfprintf_r+0x11c4>
 801498e:	3208      	adds	r2, #8
 8014990:	e7a3      	b.n	80148da <_svfprintf_r+0x11da>
 8014992:	4653      	mov	r3, sl
 8014994:	2b06      	cmp	r3, #6
 8014996:	bf28      	it	cs
 8014998:	2306      	movcs	r3, #6
 801499a:	9309      	str	r3, [sp, #36]	; 0x24
 801499c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80149a0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 80149a4:	9305      	str	r3, [sp, #20]
 80149a6:	4b87      	ldr	r3, [pc, #540]	; (8014bc4 <_svfprintf_r+0x14c4>)
 80149a8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80149ac:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80149b0:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80149b4:	930c      	str	r3, [sp, #48]	; 0x30
 80149b6:	f7fe bfc5 	b.w	8013944 <_svfprintf_r+0x244>
 80149ba:	9804      	ldr	r0, [sp, #16]
 80149bc:	4631      	mov	r1, r6
 80149be:	aa21      	add	r2, sp, #132	; 0x84
 80149c0:	f001 ff76 	bl	80168b0 <__ssprint_r>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	f47e af63 	bne.w	8013890 <_svfprintf_r+0x190>
 80149ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80149cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149ce:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	463c      	mov	r4, r7
 80149d6:	e582      	b.n	80144de <_svfprintf_r+0xdde>
 80149d8:	9305      	str	r3, [sp, #20]
 80149da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149dc:	9303      	str	r3, [sp, #12]
 80149de:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80149e2:	2300      	movs	r3, #0
 80149e4:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 80149e8:	930d      	str	r3, [sp, #52]	; 0x34
 80149ea:	f7fe bfae 	b.w	801394a <_svfprintf_r+0x24a>
 80149ee:	1cda      	adds	r2, r3, #3
 80149f0:	db19      	blt.n	8014a26 <_svfprintf_r+0x1326>
 80149f2:	459b      	cmp	fp, r3
 80149f4:	db17      	blt.n	8014a26 <_svfprintf_r+0x1326>
 80149f6:	930e      	str	r3, [sp, #56]	; 0x38
 80149f8:	2567      	movs	r5, #103	; 0x67
 80149fa:	e721      	b.n	8014840 <_svfprintf_r+0x1140>
 80149fc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8014a00:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8014a04:	f7ff ba91 	b.w	8013f2a <_svfprintf_r+0x82a>
 8014a08:	4643      	mov	r3, r8
 8014a0a:	e70a      	b.n	8014822 <_svfprintf_r+0x1122>
 8014a0c:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8014a10:	900d      	str	r0, [sp, #52]	; 0x34
 8014a12:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8014a16:	900e      	str	r0, [sp, #56]	; 0x38
 8014a18:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8014a1c:	9305      	str	r3, [sp, #20]
 8014a1e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014a22:	f7fe bf8f 	b.w	8013944 <_svfprintf_r+0x244>
 8014a26:	3d02      	subs	r5, #2
 8014a28:	3b01      	subs	r3, #1
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8014a2e:	bfba      	itte	lt
 8014a30:	425b      	neglt	r3, r3
 8014a32:	222d      	movlt	r2, #45	; 0x2d
 8014a34:	222b      	movge	r2, #43	; 0x2b
 8014a36:	2b09      	cmp	r3, #9
 8014a38:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8014a3c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8014a40:	dd7b      	ble.n	8014b3a <_svfprintf_r+0x143a>
 8014a42:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
 8014a46:	4670      	mov	r0, lr
 8014a48:	4a5f      	ldr	r2, [pc, #380]	; (8014bc8 <_svfprintf_r+0x14c8>)
 8014a4a:	fb82 2103 	smull	r2, r1, r2, r3
 8014a4e:	17da      	asrs	r2, r3, #31
 8014a50:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8014a54:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8014a58:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8014a5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a60:	2a09      	cmp	r2, #9
 8014a62:	4613      	mov	r3, r2
 8014a64:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8014a68:	dcee      	bgt.n	8014a48 <_svfprintf_r+0x1348>
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	3330      	adds	r3, #48	; 0x30
 8014a6e:	b2d9      	uxtb	r1, r3
 8014a70:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8014a74:	4596      	cmp	lr, r2
 8014a76:	f240 809b 	bls.w	8014bb0 <_svfprintf_r+0x14b0>
 8014a7a:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8014a7e:	4603      	mov	r3, r0
 8014a80:	e001      	b.n	8014a86 <_svfprintf_r+0x1386>
 8014a82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014a86:	f802 1b01 	strb.w	r1, [r2], #1
 8014a8a:	4573      	cmp	r3, lr
 8014a8c:	d1f9      	bne.n	8014a82 <_svfprintf_r+0x1382>
 8014a8e:	ab21      	add	r3, sp, #132	; 0x84
 8014a90:	1a1b      	subs	r3, r3, r0
 8014a92:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8014a96:	4413      	add	r3, r2
 8014a98:	aa1d      	add	r2, sp, #116	; 0x74
 8014a9a:	1a9b      	subs	r3, r3, r2
 8014a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a9e:	9315      	str	r3, [sp, #84]	; 0x54
 8014aa0:	2a01      	cmp	r2, #1
 8014aa2:	4413      	add	r3, r2
 8014aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8014aa6:	dd74      	ble.n	8014b92 <_svfprintf_r+0x1492>
 8014aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aaa:	2200      	movs	r2, #0
 8014aac:	3301      	adds	r3, #1
 8014aae:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab0:	920e      	str	r2, [sp, #56]	; 0x38
 8014ab2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ab6:	e6cf      	b.n	8014858 <_svfprintf_r+0x1158>
 8014ab8:	9804      	ldr	r0, [sp, #16]
 8014aba:	4631      	mov	r1, r6
 8014abc:	aa21      	add	r2, sp, #132	; 0x84
 8014abe:	f001 fef7 	bl	80168b0 <__ssprint_r>
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	f47e aee4 	bne.w	8013890 <_svfprintf_r+0x190>
 8014ac8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014aca:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8014acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ace:	463a      	mov	r2, r7
 8014ad0:	e605      	b.n	80146de <_svfprintf_r+0xfde>
 8014ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	bfd8      	it	le
 8014ad8:	f1c3 0802 	rsble	r8, r3, #2
 8014adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ade:	bfc8      	it	gt
 8014ae0:	f04f 0801 	movgt.w	r8, #1
 8014ae4:	4443      	add	r3, r8
 8014ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014aec:	e6b4      	b.n	8014858 <_svfprintf_r+0x1158>
 8014aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014af6:	9016      	str	r0, [sp, #88]	; 0x58
 8014af8:	9317      	str	r3, [sp, #92]	; 0x5c
 8014afa:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8014afe:	e658      	b.n	80147b2 <_svfprintf_r+0x10b2>
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	dd3d      	ble.n	8014b80 <_svfprintf_r+0x1480>
 8014b04:	f1bb 0f00 	cmp.w	fp, #0
 8014b08:	d10f      	bne.n	8014b2a <_svfprintf_r+0x142a>
 8014b0a:	9b03      	ldr	r3, [sp, #12]
 8014b0c:	07db      	lsls	r3, r3, #31
 8014b0e:	d40c      	bmi.n	8014b2a <_svfprintf_r+0x142a>
 8014b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b12:	9209      	str	r2, [sp, #36]	; 0x24
 8014b14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014b18:	e69e      	b.n	8014858 <_svfprintf_r+0x1158>
 8014b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b1c:	e681      	b.n	8014822 <_svfprintf_r+0x1122>
 8014b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b20:	3301      	adds	r3, #1
 8014b22:	9309      	str	r3, [sp, #36]	; 0x24
 8014b24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b28:	e696      	b.n	8014858 <_svfprintf_r+0x1158>
 8014b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b2c:	f10b 0801 	add.w	r8, fp, #1
 8014b30:	4443      	add	r3, r8
 8014b32:	9309      	str	r3, [sp, #36]	; 0x24
 8014b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b38:	e68e      	b.n	8014858 <_svfprintf_r+0x1158>
 8014b3a:	3330      	adds	r3, #48	; 0x30
 8014b3c:	2230      	movs	r2, #48	; 0x30
 8014b3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8014b42:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8014b46:	ab1e      	add	r3, sp, #120	; 0x78
 8014b48:	e7a6      	b.n	8014a98 <_svfprintf_r+0x1398>
 8014b4a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8014b4e:	2200      	movs	r2, #0
 8014b50:	2300      	movs	r3, #0
 8014b52:	f7f8 f833 	bl	800cbbc <__aeabi_dcmpeq>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	f47f aef4 	bne.w	8014944 <_svfprintf_r+0x1244>
 8014b5c:	f1c9 0301 	rsb	r3, r9, #1
 8014b60:	931b      	str	r3, [sp, #108]	; 0x6c
 8014b62:	4498      	add	r8, r3
 8014b64:	e64a      	b.n	80147fc <_svfprintf_r+0x10fc>
 8014b66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014b68:	f8d5 a000 	ldr.w	sl, [r5]
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	3004      	adds	r0, #4
 8014b70:	f1ba 0f00 	cmp.w	sl, #0
 8014b74:	785d      	ldrb	r5, [r3, #1]
 8014b76:	900a      	str	r0, [sp, #40]	; 0x28
 8014b78:	f6be ae17 	bge.w	80137aa <_svfprintf_r+0xaa>
 8014b7c:	f7fe be13 	b.w	80137a6 <_svfprintf_r+0xa6>
 8014b80:	f1bb 0f00 	cmp.w	fp, #0
 8014b84:	d10e      	bne.n	8014ba4 <_svfprintf_r+0x14a4>
 8014b86:	9b03      	ldr	r3, [sp, #12]
 8014b88:	07d8      	lsls	r0, r3, #31
 8014b8a:	d40b      	bmi.n	8014ba4 <_svfprintf_r+0x14a4>
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b90:	e662      	b.n	8014858 <_svfprintf_r+0x1158>
 8014b92:	9b03      	ldr	r3, [sp, #12]
 8014b94:	f013 0301 	ands.w	r3, r3, #1
 8014b98:	d186      	bne.n	8014aa8 <_svfprintf_r+0x13a8>
 8014b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8014b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ba2:	e659      	b.n	8014858 <_svfprintf_r+0x1158>
 8014ba4:	f10b 0302 	add.w	r3, fp, #2
 8014ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8014baa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014bae:	e653      	b.n	8014858 <_svfprintf_r+0x1158>
 8014bb0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8014bb4:	e770      	b.n	8014a98 <_svfprintf_r+0x1398>
 8014bb6:	9a04      	ldr	r2, [sp, #16]
 8014bb8:	230c      	movs	r3, #12
 8014bba:	6013      	str	r3, [r2, #0]
 8014bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc0:	f7fe be70 	b.w	80138a4 <_svfprintf_r+0x1a4>
 8014bc4:	08017a68 	.word	0x08017a68
 8014bc8:	66666667 	.word	0x66666667
 8014bcc:	00000000 	.word	0x00000000

08014bd0 <quorem>:
 8014bd0:	6902      	ldr	r2, [r0, #16]
 8014bd2:	690b      	ldr	r3, [r1, #16]
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	f300 808f 	bgt.w	8014cf8 <quorem+0x128>
 8014bda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bde:	f103 38ff 	add.w	r8, r3, #4294967295
 8014be2:	f101 0714 	add.w	r7, r1, #20
 8014be6:	f100 0b14 	add.w	fp, r0, #20
 8014bea:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8014bee:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8014bf2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	3201      	adds	r2, #1
 8014bfa:	fbb3 f9f2 	udiv	r9, r3, r2
 8014bfe:	eb0b 0304 	add.w	r3, fp, r4
 8014c02:	9400      	str	r4, [sp, #0]
 8014c04:	eb07 0a04 	add.w	sl, r7, r4
 8014c08:	9301      	str	r3, [sp, #4]
 8014c0a:	f1b9 0f00 	cmp.w	r9, #0
 8014c0e:	d03b      	beq.n	8014c88 <quorem+0xb8>
 8014c10:	2600      	movs	r6, #0
 8014c12:	4632      	mov	r2, r6
 8014c14:	46bc      	mov	ip, r7
 8014c16:	46de      	mov	lr, fp
 8014c18:	4634      	mov	r4, r6
 8014c1a:	f85c 6b04 	ldr.w	r6, [ip], #4
 8014c1e:	f8de 5000 	ldr.w	r5, [lr]
 8014c22:	b2b3      	uxth	r3, r6
 8014c24:	0c36      	lsrs	r6, r6, #16
 8014c26:	fb03 4409 	mla	r4, r3, r9, r4
 8014c2a:	fb06 f609 	mul.w	r6, r6, r9
 8014c2e:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8014c32:	b2a3      	uxth	r3, r4
 8014c34:	1ad3      	subs	r3, r2, r3
 8014c36:	b2b4      	uxth	r4, r6
 8014c38:	fa13 f385 	uxtah	r3, r3, r5
 8014c3c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8014c40:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014c4a:	45e2      	cmp	sl, ip
 8014c4c:	ea4f 4224 	mov.w	r2, r4, asr #16
 8014c50:	f84e 3b04 	str.w	r3, [lr], #4
 8014c54:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8014c58:	d2df      	bcs.n	8014c1a <quorem+0x4a>
 8014c5a:	9b00      	ldr	r3, [sp, #0]
 8014c5c:	f85b 3003 	ldr.w	r3, [fp, r3]
 8014c60:	b993      	cbnz	r3, 8014c88 <quorem+0xb8>
 8014c62:	9c01      	ldr	r4, [sp, #4]
 8014c64:	1f23      	subs	r3, r4, #4
 8014c66:	459b      	cmp	fp, r3
 8014c68:	d20c      	bcs.n	8014c84 <quorem+0xb4>
 8014c6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014c6e:	b94b      	cbnz	r3, 8014c84 <quorem+0xb4>
 8014c70:	f1a4 0308 	sub.w	r3, r4, #8
 8014c74:	e002      	b.n	8014c7c <quorem+0xac>
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	3b04      	subs	r3, #4
 8014c7a:	b91a      	cbnz	r2, 8014c84 <quorem+0xb4>
 8014c7c:	459b      	cmp	fp, r3
 8014c7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014c82:	d3f8      	bcc.n	8014c76 <quorem+0xa6>
 8014c84:	f8c0 8010 	str.w	r8, [r0, #16]
 8014c88:	4604      	mov	r4, r0
 8014c8a:	f001 fcb9 	bl	8016600 <__mcmp>
 8014c8e:	2800      	cmp	r0, #0
 8014c90:	db2e      	blt.n	8014cf0 <quorem+0x120>
 8014c92:	f109 0901 	add.w	r9, r9, #1
 8014c96:	465d      	mov	r5, fp
 8014c98:	2300      	movs	r3, #0
 8014c9a:	f857 1b04 	ldr.w	r1, [r7], #4
 8014c9e:	6828      	ldr	r0, [r5, #0]
 8014ca0:	b28a      	uxth	r2, r1
 8014ca2:	1a9a      	subs	r2, r3, r2
 8014ca4:	0c09      	lsrs	r1, r1, #16
 8014ca6:	fa12 f280 	uxtah	r2, r2, r0
 8014caa:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8014cae:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8014cb2:	b291      	uxth	r1, r2
 8014cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8014cb8:	45ba      	cmp	sl, r7
 8014cba:	f845 1b04 	str.w	r1, [r5], #4
 8014cbe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014cc2:	d2ea      	bcs.n	8014c9a <quorem+0xca>
 8014cc4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8014cc8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8014ccc:	b982      	cbnz	r2, 8014cf0 <quorem+0x120>
 8014cce:	1f1a      	subs	r2, r3, #4
 8014cd0:	4593      	cmp	fp, r2
 8014cd2:	d20b      	bcs.n	8014cec <quorem+0x11c>
 8014cd4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8014cd8:	b942      	cbnz	r2, 8014cec <quorem+0x11c>
 8014cda:	3b08      	subs	r3, #8
 8014cdc:	e002      	b.n	8014ce4 <quorem+0x114>
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	3b04      	subs	r3, #4
 8014ce2:	b91a      	cbnz	r2, 8014cec <quorem+0x11c>
 8014ce4:	459b      	cmp	fp, r3
 8014ce6:	f108 38ff 	add.w	r8, r8, #4294967295
 8014cea:	d3f8      	bcc.n	8014cde <quorem+0x10e>
 8014cec:	f8c4 8010 	str.w	r8, [r4, #16]
 8014cf0:	4648      	mov	r0, r9
 8014cf2:	b003      	add	sp, #12
 8014cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	4770      	bx	lr
 8014cfc:	0000      	movs	r0, r0
	...

08014d00 <_dtoa_r>:
 8014d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d04:	b099      	sub	sp, #100	; 0x64
 8014d06:	4604      	mov	r4, r0
 8014d08:	9103      	str	r1, [sp, #12]
 8014d0a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014d0c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8014d0e:	9304      	str	r3, [sp, #16]
 8014d10:	4692      	mov	sl, r2
 8014d12:	ed8d 0b00 	vstr	d0, [sp]
 8014d16:	b141      	cbz	r1, 8014d2a <_dtoa_r+0x2a>
 8014d18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014d1a:	604a      	str	r2, [r1, #4]
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	4093      	lsls	r3, r2
 8014d20:	608b      	str	r3, [r1, #8]
 8014d22:	f001 fa6d 	bl	8016200 <_Bfree>
 8014d26:	2300      	movs	r3, #0
 8014d28:	6423      	str	r3, [r4, #64]	; 0x40
 8014d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	4699      	mov	r9, r3
 8014d32:	db36      	blt.n	8014da2 <_dtoa_r+0xa2>
 8014d34:	2300      	movs	r3, #0
 8014d36:	602b      	str	r3, [r5, #0]
 8014d38:	4ba5      	ldr	r3, [pc, #660]	; (8014fd0 <_dtoa_r+0x2d0>)
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	ea09 0303 	and.w	r3, r9, r3
 8014d40:	4293      	cmp	r3, r2
 8014d42:	d017      	beq.n	8014d74 <_dtoa_r+0x74>
 8014d44:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	4639      	mov	r1, r7
 8014d50:	f7f7 ff34 	bl	800cbbc <__aeabi_dcmpeq>
 8014d54:	4680      	mov	r8, r0
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d02b      	beq.n	8014db2 <_dtoa_r+0xb2>
 8014d5a:	9a04      	ldr	r2, [sp, #16]
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	6013      	str	r3, [r2, #0]
 8014d60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	f000 80cc 	beq.w	8014f00 <_dtoa_r+0x200>
 8014d68:	489a      	ldr	r0, [pc, #616]	; (8014fd4 <_dtoa_r+0x2d4>)
 8014d6a:	6018      	str	r0, [r3, #0]
 8014d6c:	3801      	subs	r0, #1
 8014d6e:	b019      	add	sp, #100	; 0x64
 8014d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d74:	9a04      	ldr	r2, [sp, #16]
 8014d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8014d7a:	6013      	str	r3, [r2, #0]
 8014d7c:	9b00      	ldr	r3, [sp, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	f000 80a7 	beq.w	8014ed2 <_dtoa_r+0x1d2>
 8014d84:	4894      	ldr	r0, [pc, #592]	; (8014fd8 <_dtoa_r+0x2d8>)
 8014d86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d0f0      	beq.n	8014d6e <_dtoa_r+0x6e>
 8014d8c:	78c3      	ldrb	r3, [r0, #3]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	f000 80b8 	beq.w	8014f04 <_dtoa_r+0x204>
 8014d94:	f100 0308 	add.w	r3, r0, #8
 8014d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014d9a:	6013      	str	r3, [r2, #0]
 8014d9c:	b019      	add	sp, #100	; 0x64
 8014d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da2:	9a01      	ldr	r2, [sp, #4]
 8014da4:	2301      	movs	r3, #1
 8014da6:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8014daa:	602b      	str	r3, [r5, #0]
 8014dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8014db0:	e7c2      	b.n	8014d38 <_dtoa_r+0x38>
 8014db2:	4620      	mov	r0, r4
 8014db4:	ec47 6b10 	vmov	d0, r6, r7
 8014db8:	a917      	add	r1, sp, #92	; 0x5c
 8014dba:	aa16      	add	r2, sp, #88	; 0x58
 8014dbc:	f001 fcb8 	bl	8016730 <__d2b>
 8014dc0:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8014dc4:	4683      	mov	fp, r0
 8014dc6:	f040 808d 	bne.w	8014ee4 <_dtoa_r+0x1e4>
 8014dca:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014dce:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014dd0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8014dd4:	4445      	add	r5, r8
 8014dd6:	429d      	cmp	r5, r3
 8014dd8:	f2c0 829e 	blt.w	8015318 <_dtoa_r+0x618>
 8014ddc:	4a7f      	ldr	r2, [pc, #508]	; (8014fdc <_dtoa_r+0x2dc>)
 8014dde:	1b52      	subs	r2, r2, r5
 8014de0:	fa09 f902 	lsl.w	r9, r9, r2
 8014de4:	9a00      	ldr	r2, [sp, #0]
 8014de6:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8014dea:	fa22 f003 	lsr.w	r0, r2, r3
 8014dee:	ea49 0000 	orr.w	r0, r9, r0
 8014df2:	f7f7 fae7 	bl	800c3c4 <__aeabi_ui2d>
 8014df6:	2301      	movs	r3, #1
 8014df8:	3d01      	subs	r5, #1
 8014dfa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e00:	2200      	movs	r2, #0
 8014e02:	4b77      	ldr	r3, [pc, #476]	; (8014fe0 <_dtoa_r+0x2e0>)
 8014e04:	f7f7 f9a0 	bl	800c148 <__aeabi_dsub>
 8014e08:	a36b      	add	r3, pc, #428	; (adr r3, 8014fb8 <_dtoa_r+0x2b8>)
 8014e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0e:	f7f7 fb4f 	bl	800c4b0 <__aeabi_dmul>
 8014e12:	a36b      	add	r3, pc, #428	; (adr r3, 8014fc0 <_dtoa_r+0x2c0>)
 8014e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e18:	f7f7 f998 	bl	800c14c <__adddf3>
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	4628      	mov	r0, r5
 8014e20:	460f      	mov	r7, r1
 8014e22:	f7f7 fadf 	bl	800c3e4 <__aeabi_i2d>
 8014e26:	a368      	add	r3, pc, #416	; (adr r3, 8014fc8 <_dtoa_r+0x2c8>)
 8014e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2c:	f7f7 fb40 	bl	800c4b0 <__aeabi_dmul>
 8014e30:	4602      	mov	r2, r0
 8014e32:	460b      	mov	r3, r1
 8014e34:	4630      	mov	r0, r6
 8014e36:	4639      	mov	r1, r7
 8014e38:	f7f7 f988 	bl	800c14c <__adddf3>
 8014e3c:	4606      	mov	r6, r0
 8014e3e:	460f      	mov	r7, r1
 8014e40:	f7f7 fd4e 	bl	800c8e0 <__aeabi_d2iz>
 8014e44:	4639      	mov	r1, r7
 8014e46:	9005      	str	r0, [sp, #20]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	f7f7 febf 	bl	800cbd0 <__aeabi_dcmplt>
 8014e52:	2800      	cmp	r0, #0
 8014e54:	f040 81ab 	bne.w	80151ae <_dtoa_r+0x4ae>
 8014e58:	9b05      	ldr	r3, [sp, #20]
 8014e5a:	2b16      	cmp	r3, #22
 8014e5c:	f200 81a4 	bhi.w	80151a8 <_dtoa_r+0x4a8>
 8014e60:	9a05      	ldr	r2, [sp, #20]
 8014e62:	4b60      	ldr	r3, [pc, #384]	; (8014fe4 <_dtoa_r+0x2e4>)
 8014e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e70:	f7f7 fecc 	bl	800cc0c <__aeabi_dcmpgt>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	f000 8255 	beq.w	8015324 <_dtoa_r+0x624>
 8014e7a:	9b05      	ldr	r3, [sp, #20]
 8014e7c:	3b01      	subs	r3, #1
 8014e7e:	9305      	str	r3, [sp, #20]
 8014e80:	2300      	movs	r3, #0
 8014e82:	930d      	str	r3, [sp, #52]	; 0x34
 8014e84:	ebc5 0508 	rsb	r5, r5, r8
 8014e88:	1e6b      	subs	r3, r5, #1
 8014e8a:	9306      	str	r3, [sp, #24]
 8014e8c:	f100 81a6 	bmi.w	80151dc <_dtoa_r+0x4dc>
 8014e90:	2300      	movs	r3, #0
 8014e92:	9307      	str	r3, [sp, #28]
 8014e94:	9b05      	ldr	r3, [sp, #20]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f2c0 8197 	blt.w	80151ca <_dtoa_r+0x4ca>
 8014e9c:	9a06      	ldr	r2, [sp, #24]
 8014e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8014ea0:	4611      	mov	r1, r2
 8014ea2:	4419      	add	r1, r3
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	9106      	str	r1, [sp, #24]
 8014ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8014eaa:	9b03      	ldr	r3, [sp, #12]
 8014eac:	2b09      	cmp	r3, #9
 8014eae:	d82b      	bhi.n	8014f08 <_dtoa_r+0x208>
 8014eb0:	2b05      	cmp	r3, #5
 8014eb2:	f340 8673 	ble.w	8015b9c <_dtoa_r+0xe9c>
 8014eb6:	3b04      	subs	r3, #4
 8014eb8:	9303      	str	r3, [sp, #12]
 8014eba:	2700      	movs	r7, #0
 8014ebc:	9b03      	ldr	r3, [sp, #12]
 8014ebe:	3b02      	subs	r3, #2
 8014ec0:	2b03      	cmp	r3, #3
 8014ec2:	f200 8651 	bhi.w	8015b68 <_dtoa_r+0xe68>
 8014ec6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014eca:	03d1      	.short	0x03d1
 8014ecc:	02b603c4 	.word	0x02b603c4
 8014ed0:	0666      	.short	0x0666
 8014ed2:	4b41      	ldr	r3, [pc, #260]	; (8014fd8 <_dtoa_r+0x2d8>)
 8014ed4:	4a44      	ldr	r2, [pc, #272]	; (8014fe8 <_dtoa_r+0x2e8>)
 8014ed6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8014eda:	2800      	cmp	r0, #0
 8014edc:	bf14      	ite	ne
 8014ede:	4618      	movne	r0, r3
 8014ee0:	4610      	moveq	r0, r2
 8014ee2:	e750      	b.n	8014d86 <_dtoa_r+0x86>
 8014ee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014ee8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014eec:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014ef6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014efa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014efe:	e77f      	b.n	8014e00 <_dtoa_r+0x100>
 8014f00:	483a      	ldr	r0, [pc, #232]	; (8014fec <_dtoa_r+0x2ec>)
 8014f02:	e734      	b.n	8014d6e <_dtoa_r+0x6e>
 8014f04:	1cc3      	adds	r3, r0, #3
 8014f06:	e747      	b.n	8014d98 <_dtoa_r+0x98>
 8014f08:	2100      	movs	r1, #0
 8014f0a:	6461      	str	r1, [r4, #68]	; 0x44
 8014f0c:	4620      	mov	r0, r4
 8014f0e:	468a      	mov	sl, r1
 8014f10:	9103      	str	r1, [sp, #12]
 8014f12:	f001 f94d 	bl	80161b0 <_Balloc>
 8014f16:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1a:	9308      	str	r3, [sp, #32]
 8014f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8014f1e:	2301      	movs	r3, #1
 8014f20:	9009      	str	r0, [sp, #36]	; 0x24
 8014f22:	6420      	str	r0, [r4, #64]	; 0x40
 8014f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f2c0 80d3 	blt.w	80150d4 <_dtoa_r+0x3d4>
 8014f2e:	9a05      	ldr	r2, [sp, #20]
 8014f30:	2a0e      	cmp	r2, #14
 8014f32:	f300 80cf 	bgt.w	80150d4 <_dtoa_r+0x3d4>
 8014f36:	4b2b      	ldr	r3, [pc, #172]	; (8014fe4 <_dtoa_r+0x2e4>)
 8014f38:	f1ba 0f00 	cmp.w	sl, #0
 8014f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014f44:	f2c0 8395 	blt.w	8015672 <_dtoa_r+0x972>
 8014f48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f4c:	4642      	mov	r2, r8
 8014f4e:	464b      	mov	r3, r9
 8014f50:	4630      	mov	r0, r6
 8014f52:	4639      	mov	r1, r7
 8014f54:	f7f7 fbd6 	bl	800c704 <__aeabi_ddiv>
 8014f58:	f7f7 fcc2 	bl	800c8e0 <__aeabi_d2iz>
 8014f5c:	4682      	mov	sl, r0
 8014f5e:	f7f7 fa41 	bl	800c3e4 <__aeabi_i2d>
 8014f62:	4642      	mov	r2, r8
 8014f64:	464b      	mov	r3, r9
 8014f66:	f7f7 faa3 	bl	800c4b0 <__aeabi_dmul>
 8014f6a:	460b      	mov	r3, r1
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	4639      	mov	r1, r7
 8014f70:	4630      	mov	r0, r6
 8014f72:	f7f7 f8e9 	bl	800c148 <__aeabi_dsub>
 8014f76:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014f78:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8014f7c:	702b      	strb	r3, [r5, #0]
 8014f7e:	9b08      	ldr	r3, [sp, #32]
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	4606      	mov	r6, r0
 8014f84:	460f      	mov	r7, r1
 8014f86:	f105 0501 	add.w	r5, r5, #1
 8014f8a:	d063      	beq.n	8015054 <_dtoa_r+0x354>
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	4b18      	ldr	r3, [pc, #96]	; (8014ff0 <_dtoa_r+0x2f0>)
 8014f90:	f7f7 fa8e 	bl	800c4b0 <__aeabi_dmul>
 8014f94:	2200      	movs	r2, #0
 8014f96:	2300      	movs	r3, #0
 8014f98:	4606      	mov	r6, r0
 8014f9a:	460f      	mov	r7, r1
 8014f9c:	f7f7 fe0e 	bl	800cbbc <__aeabi_dcmpeq>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	f040 8084 	bne.w	80150ae <_dtoa_r+0x3ae>
 8014fa6:	f8cd b000 	str.w	fp, [sp]
 8014faa:	9403      	str	r4, [sp, #12]
 8014fac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8014fb0:	9c08      	ldr	r4, [sp, #32]
 8014fb2:	e02a      	b.n	801500a <_dtoa_r+0x30a>
 8014fb4:	f3af 8000 	nop.w
 8014fb8:	636f4361 	.word	0x636f4361
 8014fbc:	3fd287a7 	.word	0x3fd287a7
 8014fc0:	8b60c8b3 	.word	0x8b60c8b3
 8014fc4:	3fc68a28 	.word	0x3fc68a28
 8014fc8:	509f79fb 	.word	0x509f79fb
 8014fcc:	3fd34413 	.word	0x3fd34413
 8014fd0:	7ff00000 	.word	0x7ff00000
 8014fd4:	08017a71 	.word	0x08017a71
 8014fd8:	08017a8c 	.word	0x08017a8c
 8014fdc:	fffffc0e 	.word	0xfffffc0e
 8014fe0:	3ff80000 	.word	0x3ff80000
 8014fe4:	08017aa0 	.word	0x08017aa0
 8014fe8:	08017a80 	.word	0x08017a80
 8014fec:	08017a70 	.word	0x08017a70
 8014ff0:	40240000 	.word	0x40240000
 8014ff4:	f7f7 fa5c 	bl	800c4b0 <__aeabi_dmul>
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	4606      	mov	r6, r0
 8014ffe:	460f      	mov	r7, r1
 8015000:	f7f7 fddc 	bl	800cbbc <__aeabi_dcmpeq>
 8015004:	2800      	cmp	r0, #0
 8015006:	f040 83e4 	bne.w	80157d2 <_dtoa_r+0xad2>
 801500a:	4642      	mov	r2, r8
 801500c:	464b      	mov	r3, r9
 801500e:	4630      	mov	r0, r6
 8015010:	4639      	mov	r1, r7
 8015012:	f7f7 fb77 	bl	800c704 <__aeabi_ddiv>
 8015016:	f7f7 fc63 	bl	800c8e0 <__aeabi_d2iz>
 801501a:	4682      	mov	sl, r0
 801501c:	f7f7 f9e2 	bl	800c3e4 <__aeabi_i2d>
 8015020:	4642      	mov	r2, r8
 8015022:	464b      	mov	r3, r9
 8015024:	f7f7 fa44 	bl	800c4b0 <__aeabi_dmul>
 8015028:	4602      	mov	r2, r0
 801502a:	460b      	mov	r3, r1
 801502c:	4630      	mov	r0, r6
 801502e:	4639      	mov	r1, r7
 8015030:	f7f7 f88a 	bl	800c148 <__aeabi_dsub>
 8015034:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8015038:	f805 eb01 	strb.w	lr, [r5], #1
 801503c:	ebcb 0e05 	rsb	lr, fp, r5
 8015040:	4574      	cmp	r4, lr
 8015042:	4606      	mov	r6, r0
 8015044:	460f      	mov	r7, r1
 8015046:	f04f 0200 	mov.w	r2, #0
 801504a:	4bb7      	ldr	r3, [pc, #732]	; (8015328 <_dtoa_r+0x628>)
 801504c:	d1d2      	bne.n	8014ff4 <_dtoa_r+0x2f4>
 801504e:	f8dd b000 	ldr.w	fp, [sp]
 8015052:	9c03      	ldr	r4, [sp, #12]
 8015054:	4632      	mov	r2, r6
 8015056:	463b      	mov	r3, r7
 8015058:	4630      	mov	r0, r6
 801505a:	4639      	mov	r1, r7
 801505c:	f7f7 f876 	bl	800c14c <__adddf3>
 8015060:	4606      	mov	r6, r0
 8015062:	460f      	mov	r7, r1
 8015064:	4640      	mov	r0, r8
 8015066:	4649      	mov	r1, r9
 8015068:	4632      	mov	r2, r6
 801506a:	463b      	mov	r3, r7
 801506c:	f7f7 fdb0 	bl	800cbd0 <__aeabi_dcmplt>
 8015070:	b948      	cbnz	r0, 8015086 <_dtoa_r+0x386>
 8015072:	4640      	mov	r0, r8
 8015074:	4649      	mov	r1, r9
 8015076:	4632      	mov	r2, r6
 8015078:	463b      	mov	r3, r7
 801507a:	f7f7 fd9f 	bl	800cbbc <__aeabi_dcmpeq>
 801507e:	b1b0      	cbz	r0, 80150ae <_dtoa_r+0x3ae>
 8015080:	f01a 0f01 	tst.w	sl, #1
 8015084:	d013      	beq.n	80150ae <_dtoa_r+0x3ae>
 8015086:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 801508a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801508c:	1e6b      	subs	r3, r5, #1
 801508e:	e004      	b.n	801509a <_dtoa_r+0x39a>
 8015090:	428b      	cmp	r3, r1
 8015092:	f000 8448 	beq.w	8015926 <_dtoa_r+0xc26>
 8015096:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 801509a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801509e:	f103 0501 	add.w	r5, r3, #1
 80150a2:	461a      	mov	r2, r3
 80150a4:	d0f4      	beq.n	8015090 <_dtoa_r+0x390>
 80150a6:	f108 0301 	add.w	r3, r8, #1
 80150aa:	b2db      	uxtb	r3, r3
 80150ac:	7013      	strb	r3, [r2, #0]
 80150ae:	4620      	mov	r0, r4
 80150b0:	4659      	mov	r1, fp
 80150b2:	f001 f8a5 	bl	8016200 <_Bfree>
 80150b6:	2200      	movs	r2, #0
 80150b8:	9b05      	ldr	r3, [sp, #20]
 80150ba:	702a      	strb	r2, [r5, #0]
 80150bc:	9a04      	ldr	r2, [sp, #16]
 80150be:	3301      	adds	r3, #1
 80150c0:	6013      	str	r3, [r2, #0]
 80150c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 834b 	beq.w	8015760 <_dtoa_r+0xa60>
 80150ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150cc:	601d      	str	r5, [r3, #0]
 80150ce:	b019      	add	sp, #100	; 0x64
 80150d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80150d6:	2a00      	cmp	r2, #0
 80150d8:	f000 8085 	beq.w	80151e6 <_dtoa_r+0x4e6>
 80150dc:	9a03      	ldr	r2, [sp, #12]
 80150de:	2a01      	cmp	r2, #1
 80150e0:	f340 830a 	ble.w	80156f8 <_dtoa_r+0x9f8>
 80150e4:	9b08      	ldr	r3, [sp, #32]
 80150e6:	1e5f      	subs	r7, r3, #1
 80150e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ea:	42bb      	cmp	r3, r7
 80150ec:	f2c0 83a6 	blt.w	801583c <_dtoa_r+0xb3c>
 80150f0:	1bdf      	subs	r7, r3, r7
 80150f2:	9b08      	ldr	r3, [sp, #32]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	f2c0 84a4 	blt.w	8015a42 <_dtoa_r+0xd42>
 80150fa:	9d07      	ldr	r5, [sp, #28]
 80150fc:	9b08      	ldr	r3, [sp, #32]
 80150fe:	9a07      	ldr	r2, [sp, #28]
 8015100:	441a      	add	r2, r3
 8015102:	9207      	str	r2, [sp, #28]
 8015104:	9a06      	ldr	r2, [sp, #24]
 8015106:	4620      	mov	r0, r4
 8015108:	441a      	add	r2, r3
 801510a:	2101      	movs	r1, #1
 801510c:	9206      	str	r2, [sp, #24]
 801510e:	f001 f91f 	bl	8016350 <__i2b>
 8015112:	4606      	mov	r6, r0
 8015114:	b165      	cbz	r5, 8015130 <_dtoa_r+0x430>
 8015116:	9906      	ldr	r1, [sp, #24]
 8015118:	2900      	cmp	r1, #0
 801511a:	460b      	mov	r3, r1
 801511c:	dd08      	ble.n	8015130 <_dtoa_r+0x430>
 801511e:	42a9      	cmp	r1, r5
 8015120:	9a07      	ldr	r2, [sp, #28]
 8015122:	bfa8      	it	ge
 8015124:	462b      	movge	r3, r5
 8015126:	1ad2      	subs	r2, r2, r3
 8015128:	1aed      	subs	r5, r5, r3
 801512a:	1acb      	subs	r3, r1, r3
 801512c:	9207      	str	r2, [sp, #28]
 801512e:	9306      	str	r3, [sp, #24]
 8015130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015132:	2b00      	cmp	r3, #0
 8015134:	dd1a      	ble.n	801516c <_dtoa_r+0x46c>
 8015136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015138:	2b00      	cmp	r3, #0
 801513a:	f000 8378 	beq.w	801582e <_dtoa_r+0xb2e>
 801513e:	2f00      	cmp	r7, #0
 8015140:	dd10      	ble.n	8015164 <_dtoa_r+0x464>
 8015142:	4631      	mov	r1, r6
 8015144:	463a      	mov	r2, r7
 8015146:	4620      	mov	r0, r4
 8015148:	f001 f9b2 	bl	80164b0 <__pow5mult>
 801514c:	4606      	mov	r6, r0
 801514e:	465a      	mov	r2, fp
 8015150:	4631      	mov	r1, r6
 8015152:	4620      	mov	r0, r4
 8015154:	f001 f90c 	bl	8016370 <__multiply>
 8015158:	4659      	mov	r1, fp
 801515a:	4680      	mov	r8, r0
 801515c:	4620      	mov	r0, r4
 801515e:	f001 f84f 	bl	8016200 <_Bfree>
 8015162:	46c3      	mov	fp, r8
 8015164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015166:	1bda      	subs	r2, r3, r7
 8015168:	f040 82a5 	bne.w	80156b6 <_dtoa_r+0x9b6>
 801516c:	4620      	mov	r0, r4
 801516e:	2101      	movs	r1, #1
 8015170:	f001 f8ee 	bl	8016350 <__i2b>
 8015174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015176:	2b00      	cmp	r3, #0
 8015178:	4680      	mov	r8, r0
 801517a:	dd38      	ble.n	80151ee <_dtoa_r+0x4ee>
 801517c:	4601      	mov	r1, r0
 801517e:	461a      	mov	r2, r3
 8015180:	4620      	mov	r0, r4
 8015182:	f001 f995 	bl	80164b0 <__pow5mult>
 8015186:	9b03      	ldr	r3, [sp, #12]
 8015188:	2b01      	cmp	r3, #1
 801518a:	4680      	mov	r8, r0
 801518c:	f340 8299 	ble.w	80156c2 <_dtoa_r+0x9c2>
 8015190:	f04f 0900 	mov.w	r9, #0
 8015194:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015198:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801519c:	6918      	ldr	r0, [r3, #16]
 801519e:	f001 f887 	bl	80162b0 <__hi0bits>
 80151a2:	f1c0 0020 	rsb	r0, r0, #32
 80151a6:	e02c      	b.n	8015202 <_dtoa_r+0x502>
 80151a8:	2301      	movs	r3, #1
 80151aa:	930d      	str	r3, [sp, #52]	; 0x34
 80151ac:	e66a      	b.n	8014e84 <_dtoa_r+0x184>
 80151ae:	9805      	ldr	r0, [sp, #20]
 80151b0:	f7f7 f918 	bl	800c3e4 <__aeabi_i2d>
 80151b4:	4632      	mov	r2, r6
 80151b6:	463b      	mov	r3, r7
 80151b8:	f7f7 fd00 	bl	800cbbc <__aeabi_dcmpeq>
 80151bc:	2800      	cmp	r0, #0
 80151be:	f47f ae4b 	bne.w	8014e58 <_dtoa_r+0x158>
 80151c2:	9b05      	ldr	r3, [sp, #20]
 80151c4:	3b01      	subs	r3, #1
 80151c6:	9305      	str	r3, [sp, #20]
 80151c8:	e646      	b.n	8014e58 <_dtoa_r+0x158>
 80151ca:	9a07      	ldr	r2, [sp, #28]
 80151cc:	9b05      	ldr	r3, [sp, #20]
 80151ce:	1ad2      	subs	r2, r2, r3
 80151d0:	425b      	negs	r3, r3
 80151d2:	930a      	str	r3, [sp, #40]	; 0x28
 80151d4:	2300      	movs	r3, #0
 80151d6:	9207      	str	r2, [sp, #28]
 80151d8:	930c      	str	r3, [sp, #48]	; 0x30
 80151da:	e666      	b.n	8014eaa <_dtoa_r+0x1aa>
 80151dc:	425b      	negs	r3, r3
 80151de:	9307      	str	r3, [sp, #28]
 80151e0:	2300      	movs	r3, #0
 80151e2:	9306      	str	r3, [sp, #24]
 80151e4:	e656      	b.n	8014e94 <_dtoa_r+0x194>
 80151e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80151e8:	9d07      	ldr	r5, [sp, #28]
 80151ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80151ec:	e792      	b.n	8015114 <_dtoa_r+0x414>
 80151ee:	9b03      	ldr	r3, [sp, #12]
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	f340 82b8 	ble.w	8015766 <_dtoa_r+0xa66>
 80151f6:	f04f 0900 	mov.w	r9, #0
 80151fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d1c9      	bne.n	8015194 <_dtoa_r+0x494>
 8015200:	2001      	movs	r0, #1
 8015202:	9b06      	ldr	r3, [sp, #24]
 8015204:	4418      	add	r0, r3
 8015206:	f010 001f 	ands.w	r0, r0, #31
 801520a:	f000 8083 	beq.w	8015314 <_dtoa_r+0x614>
 801520e:	f1c0 0320 	rsb	r3, r0, #32
 8015212:	2b04      	cmp	r3, #4
 8015214:	f340 84b9 	ble.w	8015b8a <_dtoa_r+0xe8a>
 8015218:	f1c0 001c 	rsb	r0, r0, #28
 801521c:	9b07      	ldr	r3, [sp, #28]
 801521e:	4403      	add	r3, r0
 8015220:	9307      	str	r3, [sp, #28]
 8015222:	9b06      	ldr	r3, [sp, #24]
 8015224:	4403      	add	r3, r0
 8015226:	4405      	add	r5, r0
 8015228:	9306      	str	r3, [sp, #24]
 801522a:	9b07      	ldr	r3, [sp, #28]
 801522c:	2b00      	cmp	r3, #0
 801522e:	dd05      	ble.n	801523c <_dtoa_r+0x53c>
 8015230:	4659      	mov	r1, fp
 8015232:	461a      	mov	r2, r3
 8015234:	4620      	mov	r0, r4
 8015236:	f001 f98b 	bl	8016550 <__lshift>
 801523a:	4683      	mov	fp, r0
 801523c:	9b06      	ldr	r3, [sp, #24]
 801523e:	2b00      	cmp	r3, #0
 8015240:	dd05      	ble.n	801524e <_dtoa_r+0x54e>
 8015242:	4641      	mov	r1, r8
 8015244:	461a      	mov	r2, r3
 8015246:	4620      	mov	r0, r4
 8015248:	f001 f982 	bl	8016550 <__lshift>
 801524c:	4680      	mov	r8, r0
 801524e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015250:	2b00      	cmp	r3, #0
 8015252:	f040 826a 	bne.w	801572a <_dtoa_r+0xa2a>
 8015256:	9b08      	ldr	r3, [sp, #32]
 8015258:	2b00      	cmp	r3, #0
 801525a:	f340 8297 	ble.w	801578c <_dtoa_r+0xa8c>
 801525e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015260:	2b00      	cmp	r3, #0
 8015262:	d171      	bne.n	8015348 <_dtoa_r+0x648>
 8015264:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015268:	9f08      	ldr	r7, [sp, #32]
 801526a:	464d      	mov	r5, r9
 801526c:	e002      	b.n	8015274 <_dtoa_r+0x574>
 801526e:	f000 ffd7 	bl	8016220 <__multadd>
 8015272:	4683      	mov	fp, r0
 8015274:	4641      	mov	r1, r8
 8015276:	4658      	mov	r0, fp
 8015278:	f7ff fcaa 	bl	8014bd0 <quorem>
 801527c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8015280:	f805 cb01 	strb.w	ip, [r5], #1
 8015284:	ebc9 0305 	rsb	r3, r9, r5
 8015288:	42bb      	cmp	r3, r7
 801528a:	4620      	mov	r0, r4
 801528c:	4659      	mov	r1, fp
 801528e:	f04f 020a 	mov.w	r2, #10
 8015292:	f04f 0300 	mov.w	r3, #0
 8015296:	dbea      	blt.n	801526e <_dtoa_r+0x56e>
 8015298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801529a:	9a08      	ldr	r2, [sp, #32]
 801529c:	2a01      	cmp	r2, #1
 801529e:	bfac      	ite	ge
 80152a0:	189b      	addge	r3, r3, r2
 80152a2:	3301      	addlt	r3, #1
 80152a4:	461d      	mov	r5, r3
 80152a6:	f04f 0a00 	mov.w	sl, #0
 80152aa:	4659      	mov	r1, fp
 80152ac:	2201      	movs	r2, #1
 80152ae:	4620      	mov	r0, r4
 80152b0:	f8cd c000 	str.w	ip, [sp]
 80152b4:	f001 f94c 	bl	8016550 <__lshift>
 80152b8:	4641      	mov	r1, r8
 80152ba:	4683      	mov	fp, r0
 80152bc:	f001 f9a0 	bl	8016600 <__mcmp>
 80152c0:	2800      	cmp	r0, #0
 80152c2:	f8dd c000 	ldr.w	ip, [sp]
 80152c6:	f340 82ef 	ble.w	80158a8 <_dtoa_r+0xba8>
 80152ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80152ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152d0:	1e6b      	subs	r3, r5, #1
 80152d2:	e004      	b.n	80152de <_dtoa_r+0x5de>
 80152d4:	428b      	cmp	r3, r1
 80152d6:	f000 8275 	beq.w	80157c4 <_dtoa_r+0xac4>
 80152da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80152de:	2a39      	cmp	r2, #57	; 0x39
 80152e0:	f103 0501 	add.w	r5, r3, #1
 80152e4:	d0f6      	beq.n	80152d4 <_dtoa_r+0x5d4>
 80152e6:	3201      	adds	r2, #1
 80152e8:	701a      	strb	r2, [r3, #0]
 80152ea:	4641      	mov	r1, r8
 80152ec:	4620      	mov	r0, r4
 80152ee:	f000 ff87 	bl	8016200 <_Bfree>
 80152f2:	2e00      	cmp	r6, #0
 80152f4:	f43f aedb 	beq.w	80150ae <_dtoa_r+0x3ae>
 80152f8:	f1ba 0f00 	cmp.w	sl, #0
 80152fc:	d005      	beq.n	801530a <_dtoa_r+0x60a>
 80152fe:	45b2      	cmp	sl, r6
 8015300:	d003      	beq.n	801530a <_dtoa_r+0x60a>
 8015302:	4651      	mov	r1, sl
 8015304:	4620      	mov	r0, r4
 8015306:	f000 ff7b 	bl	8016200 <_Bfree>
 801530a:	4631      	mov	r1, r6
 801530c:	4620      	mov	r0, r4
 801530e:	f000 ff77 	bl	8016200 <_Bfree>
 8015312:	e6cc      	b.n	80150ae <_dtoa_r+0x3ae>
 8015314:	201c      	movs	r0, #28
 8015316:	e781      	b.n	801521c <_dtoa_r+0x51c>
 8015318:	4b04      	ldr	r3, [pc, #16]	; (801532c <_dtoa_r+0x62c>)
 801531a:	9a00      	ldr	r2, [sp, #0]
 801531c:	1b5b      	subs	r3, r3, r5
 801531e:	fa02 f003 	lsl.w	r0, r2, r3
 8015322:	e566      	b.n	8014df2 <_dtoa_r+0xf2>
 8015324:	900d      	str	r0, [sp, #52]	; 0x34
 8015326:	e5ad      	b.n	8014e84 <_dtoa_r+0x184>
 8015328:	40240000 	.word	0x40240000
 801532c:	fffffbee 	.word	0xfffffbee
 8015330:	4631      	mov	r1, r6
 8015332:	2300      	movs	r3, #0
 8015334:	4620      	mov	r0, r4
 8015336:	220a      	movs	r2, #10
 8015338:	f000 ff72 	bl	8016220 <__multadd>
 801533c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801533e:	2b00      	cmp	r3, #0
 8015340:	4606      	mov	r6, r0
 8015342:	f340 840b 	ble.w	8015b5c <_dtoa_r+0xe5c>
 8015346:	9308      	str	r3, [sp, #32]
 8015348:	2d00      	cmp	r5, #0
 801534a:	dd05      	ble.n	8015358 <_dtoa_r+0x658>
 801534c:	4631      	mov	r1, r6
 801534e:	462a      	mov	r2, r5
 8015350:	4620      	mov	r0, r4
 8015352:	f001 f8fd 	bl	8016550 <__lshift>
 8015356:	4606      	mov	r6, r0
 8015358:	f1b9 0f00 	cmp.w	r9, #0
 801535c:	f040 82ed 	bne.w	801593a <_dtoa_r+0xc3a>
 8015360:	46b1      	mov	r9, r6
 8015362:	9b08      	ldr	r3, [sp, #32]
 8015364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015366:	3b01      	subs	r3, #1
 8015368:	18d3      	adds	r3, r2, r3
 801536a:	9308      	str	r3, [sp, #32]
 801536c:	9b00      	ldr	r3, [sp, #0]
 801536e:	f003 0301 	and.w	r3, r3, #1
 8015372:	930a      	str	r3, [sp, #40]	; 0x28
 8015374:	4617      	mov	r7, r2
 8015376:	4641      	mov	r1, r8
 8015378:	4658      	mov	r0, fp
 801537a:	f7ff fc29 	bl	8014bd0 <quorem>
 801537e:	4631      	mov	r1, r6
 8015380:	4605      	mov	r5, r0
 8015382:	4658      	mov	r0, fp
 8015384:	f001 f93c 	bl	8016600 <__mcmp>
 8015388:	464a      	mov	r2, r9
 801538a:	4682      	mov	sl, r0
 801538c:	4641      	mov	r1, r8
 801538e:	4620      	mov	r0, r4
 8015390:	f001 f95e 	bl	8016650 <__mdiff>
 8015394:	68c2      	ldr	r2, [r0, #12]
 8015396:	4603      	mov	r3, r0
 8015398:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 801539c:	2a00      	cmp	r2, #0
 801539e:	f040 81ba 	bne.w	8015716 <_dtoa_r+0xa16>
 80153a2:	4619      	mov	r1, r3
 80153a4:	4658      	mov	r0, fp
 80153a6:	f8cd c01c 	str.w	ip, [sp, #28]
 80153aa:	9306      	str	r3, [sp, #24]
 80153ac:	f001 f928 	bl	8016600 <__mcmp>
 80153b0:	9b06      	ldr	r3, [sp, #24]
 80153b2:	9000      	str	r0, [sp, #0]
 80153b4:	4619      	mov	r1, r3
 80153b6:	4620      	mov	r0, r4
 80153b8:	f000 ff22 	bl	8016200 <_Bfree>
 80153bc:	9a00      	ldr	r2, [sp, #0]
 80153be:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80153c2:	b92a      	cbnz	r2, 80153d0 <_dtoa_r+0x6d0>
 80153c4:	9b03      	ldr	r3, [sp, #12]
 80153c6:	b91b      	cbnz	r3, 80153d0 <_dtoa_r+0x6d0>
 80153c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	f000 83aa 	beq.w	8015b24 <_dtoa_r+0xe24>
 80153d0:	f1ba 0f00 	cmp.w	sl, #0
 80153d4:	f2c0 824a 	blt.w	801586c <_dtoa_r+0xb6c>
 80153d8:	d105      	bne.n	80153e6 <_dtoa_r+0x6e6>
 80153da:	9b03      	ldr	r3, [sp, #12]
 80153dc:	b91b      	cbnz	r3, 80153e6 <_dtoa_r+0x6e6>
 80153de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	f000 8243 	beq.w	801586c <_dtoa_r+0xb6c>
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	f300 82bb 	bgt.w	8015962 <_dtoa_r+0xc62>
 80153ec:	9b08      	ldr	r3, [sp, #32]
 80153ee:	f887 c000 	strb.w	ip, [r7]
 80153f2:	f107 0a01 	add.w	sl, r7, #1
 80153f6:	429f      	cmp	r7, r3
 80153f8:	4655      	mov	r5, sl
 80153fa:	f000 82be 	beq.w	801597a <_dtoa_r+0xc7a>
 80153fe:	4659      	mov	r1, fp
 8015400:	220a      	movs	r2, #10
 8015402:	2300      	movs	r3, #0
 8015404:	4620      	mov	r0, r4
 8015406:	f000 ff0b 	bl	8016220 <__multadd>
 801540a:	454e      	cmp	r6, r9
 801540c:	4683      	mov	fp, r0
 801540e:	4631      	mov	r1, r6
 8015410:	4620      	mov	r0, r4
 8015412:	f04f 020a 	mov.w	r2, #10
 8015416:	f04f 0300 	mov.w	r3, #0
 801541a:	f000 8176 	beq.w	801570a <_dtoa_r+0xa0a>
 801541e:	f000 feff 	bl	8016220 <__multadd>
 8015422:	4649      	mov	r1, r9
 8015424:	4606      	mov	r6, r0
 8015426:	220a      	movs	r2, #10
 8015428:	4620      	mov	r0, r4
 801542a:	2300      	movs	r3, #0
 801542c:	f000 fef8 	bl	8016220 <__multadd>
 8015430:	4657      	mov	r7, sl
 8015432:	4681      	mov	r9, r0
 8015434:	e79f      	b.n	8015376 <_dtoa_r+0x676>
 8015436:	2301      	movs	r3, #1
 8015438:	930b      	str	r3, [sp, #44]	; 0x2c
 801543a:	f1ba 0f00 	cmp.w	sl, #0
 801543e:	f340 820c 	ble.w	801585a <_dtoa_r+0xb5a>
 8015442:	4656      	mov	r6, sl
 8015444:	4655      	mov	r5, sl
 8015446:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801544a:	f8cd a020 	str.w	sl, [sp, #32]
 801544e:	2100      	movs	r1, #0
 8015450:	2e17      	cmp	r6, #23
 8015452:	6461      	str	r1, [r4, #68]	; 0x44
 8015454:	d90a      	bls.n	801546c <_dtoa_r+0x76c>
 8015456:	2201      	movs	r2, #1
 8015458:	2304      	movs	r3, #4
 801545a:	005b      	lsls	r3, r3, #1
 801545c:	f103 0014 	add.w	r0, r3, #20
 8015460:	4286      	cmp	r6, r0
 8015462:	4611      	mov	r1, r2
 8015464:	f102 0201 	add.w	r2, r2, #1
 8015468:	d2f7      	bcs.n	801545a <_dtoa_r+0x75a>
 801546a:	6461      	str	r1, [r4, #68]	; 0x44
 801546c:	4620      	mov	r0, r4
 801546e:	f000 fe9f 	bl	80161b0 <_Balloc>
 8015472:	2d0e      	cmp	r5, #14
 8015474:	9009      	str	r0, [sp, #36]	; 0x24
 8015476:	6420      	str	r0, [r4, #64]	; 0x40
 8015478:	f63f ad55 	bhi.w	8014f26 <_dtoa_r+0x226>
 801547c:	2f00      	cmp	r7, #0
 801547e:	f43f ad52 	beq.w	8014f26 <_dtoa_r+0x226>
 8015482:	ed9d 7b00 	vldr	d7, [sp]
 8015486:	9905      	ldr	r1, [sp, #20]
 8015488:	2900      	cmp	r1, #0
 801548a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801548e:	f340 8223 	ble.w	80158d8 <_dtoa_r+0xbd8>
 8015492:	4bb7      	ldr	r3, [pc, #732]	; (8015770 <_dtoa_r+0xa70>)
 8015494:	f001 020f 	and.w	r2, r1, #15
 8015498:	110d      	asrs	r5, r1, #4
 801549a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801549e:	06e9      	lsls	r1, r5, #27
 80154a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80154a4:	f140 81d2 	bpl.w	801584c <_dtoa_r+0xb4c>
 80154a8:	4bb2      	ldr	r3, [pc, #712]	; (8015774 <_dtoa_r+0xa74>)
 80154aa:	ec51 0b17 	vmov	r0, r1, d7
 80154ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154b2:	f7f7 f927 	bl	800c704 <__aeabi_ddiv>
 80154b6:	e9cd 0100 	strd	r0, r1, [sp]
 80154ba:	f005 050f 	and.w	r5, r5, #15
 80154be:	f04f 0803 	mov.w	r8, #3
 80154c2:	b18d      	cbz	r5, 80154e8 <_dtoa_r+0x7e8>
 80154c4:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8015774 <_dtoa_r+0xa74>
 80154c8:	4630      	mov	r0, r6
 80154ca:	4639      	mov	r1, r7
 80154cc:	07ea      	lsls	r2, r5, #31
 80154ce:	d505      	bpl.n	80154dc <_dtoa_r+0x7dc>
 80154d0:	e9d9 2300 	ldrd	r2, r3, [r9]
 80154d4:	f7f6 ffec 	bl	800c4b0 <__aeabi_dmul>
 80154d8:	f108 0801 	add.w	r8, r8, #1
 80154dc:	106d      	asrs	r5, r5, #1
 80154de:	f109 0908 	add.w	r9, r9, #8
 80154e2:	d1f3      	bne.n	80154cc <_dtoa_r+0x7cc>
 80154e4:	4606      	mov	r6, r0
 80154e6:	460f      	mov	r7, r1
 80154e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154ec:	4632      	mov	r2, r6
 80154ee:	463b      	mov	r3, r7
 80154f0:	f7f7 f908 	bl	800c704 <__aeabi_ddiv>
 80154f4:	e9cd 0100 	strd	r0, r1, [sp]
 80154f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154fa:	b143      	cbz	r3, 801550e <_dtoa_r+0x80e>
 80154fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015500:	2200      	movs	r2, #0
 8015502:	4b9d      	ldr	r3, [pc, #628]	; (8015778 <_dtoa_r+0xa78>)
 8015504:	f7f7 fb64 	bl	800cbd0 <__aeabi_dcmplt>
 8015508:	2800      	cmp	r0, #0
 801550a:	f040 82ae 	bne.w	8015a6a <_dtoa_r+0xd6a>
 801550e:	4640      	mov	r0, r8
 8015510:	f7f6 ff68 	bl	800c3e4 <__aeabi_i2d>
 8015514:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015518:	f7f6 ffca 	bl	800c4b0 <__aeabi_dmul>
 801551c:	4b97      	ldr	r3, [pc, #604]	; (801577c <_dtoa_r+0xa7c>)
 801551e:	2200      	movs	r2, #0
 8015520:	f7f6 fe14 	bl	800c14c <__adddf3>
 8015524:	9b08      	ldr	r3, [sp, #32]
 8015526:	4606      	mov	r6, r0
 8015528:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801552c:	2b00      	cmp	r3, #0
 801552e:	f000 8162 	beq.w	80157f6 <_dtoa_r+0xaf6>
 8015532:	9b05      	ldr	r3, [sp, #20]
 8015534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015538:	9314      	str	r3, [sp, #80]	; 0x50
 801553a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801553c:	2b00      	cmp	r3, #0
 801553e:	f000 8223 	beq.w	8015988 <_dtoa_r+0xc88>
 8015542:	4b8b      	ldr	r3, [pc, #556]	; (8015770 <_dtoa_r+0xa70>)
 8015544:	498e      	ldr	r1, [pc, #568]	; (8015780 <_dtoa_r+0xa80>)
 8015546:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801554a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801554e:	2000      	movs	r0, #0
 8015550:	f7f7 f8d8 	bl	800c704 <__aeabi_ddiv>
 8015554:	4632      	mov	r2, r6
 8015556:	463b      	mov	r3, r7
 8015558:	f7f6 fdf6 	bl	800c148 <__aeabi_dsub>
 801555c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015560:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015564:	4639      	mov	r1, r7
 8015566:	4630      	mov	r0, r6
 8015568:	f7f7 f9ba 	bl	800c8e0 <__aeabi_d2iz>
 801556c:	4605      	mov	r5, r0
 801556e:	f7f6 ff39 	bl	800c3e4 <__aeabi_i2d>
 8015572:	3530      	adds	r5, #48	; 0x30
 8015574:	4602      	mov	r2, r0
 8015576:	460b      	mov	r3, r1
 8015578:	4630      	mov	r0, r6
 801557a:	4639      	mov	r1, r7
 801557c:	f7f6 fde4 	bl	800c148 <__aeabi_dsub>
 8015580:	fa5f f885 	uxtb.w	r8, r5
 8015584:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015586:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801558a:	f885 8000 	strb.w	r8, [r5]
 801558e:	4606      	mov	r6, r0
 8015590:	460f      	mov	r7, r1
 8015592:	3501      	adds	r5, #1
 8015594:	f7f7 fb1c 	bl	800cbd0 <__aeabi_dcmplt>
 8015598:	2800      	cmp	r0, #0
 801559a:	f040 82a7 	bne.w	8015aec <_dtoa_r+0xdec>
 801559e:	4632      	mov	r2, r6
 80155a0:	463b      	mov	r3, r7
 80155a2:	2000      	movs	r0, #0
 80155a4:	4974      	ldr	r1, [pc, #464]	; (8015778 <_dtoa_r+0xa78>)
 80155a6:	f7f6 fdcf 	bl	800c148 <__aeabi_dsub>
 80155aa:	4602      	mov	r2, r0
 80155ac:	460b      	mov	r3, r1
 80155ae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80155b2:	f7f7 fb2b 	bl	800cc0c <__aeabi_dcmpgt>
 80155b6:	2800      	cmp	r0, #0
 80155b8:	f040 82ad 	bne.w	8015b16 <_dtoa_r+0xe16>
 80155bc:	f1b9 0f01 	cmp.w	r9, #1
 80155c0:	f340 8184 	ble.w	80158cc <_dtoa_r+0xbcc>
 80155c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155c6:	f8cd b000 	str.w	fp, [sp]
 80155ca:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 80155ce:	4499      	add	r9, r3
 80155d0:	46a0      	mov	r8, r4
 80155d2:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80155d6:	e00d      	b.n	80155f4 <_dtoa_r+0x8f4>
 80155d8:	2000      	movs	r0, #0
 80155da:	4967      	ldr	r1, [pc, #412]	; (8015778 <_dtoa_r+0xa78>)
 80155dc:	f7f6 fdb4 	bl	800c148 <__aeabi_dsub>
 80155e0:	4652      	mov	r2, sl
 80155e2:	465b      	mov	r3, fp
 80155e4:	f7f7 faf4 	bl	800cbd0 <__aeabi_dcmplt>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	f040 828f 	bne.w	8015b0c <_dtoa_r+0xe0c>
 80155ee:	454d      	cmp	r5, r9
 80155f0:	f000 8167 	beq.w	80158c2 <_dtoa_r+0xbc2>
 80155f4:	4650      	mov	r0, sl
 80155f6:	4659      	mov	r1, fp
 80155f8:	2200      	movs	r2, #0
 80155fa:	4b62      	ldr	r3, [pc, #392]	; (8015784 <_dtoa_r+0xa84>)
 80155fc:	f7f6 ff58 	bl	800c4b0 <__aeabi_dmul>
 8015600:	2200      	movs	r2, #0
 8015602:	4b60      	ldr	r3, [pc, #384]	; (8015784 <_dtoa_r+0xa84>)
 8015604:	4682      	mov	sl, r0
 8015606:	468b      	mov	fp, r1
 8015608:	4630      	mov	r0, r6
 801560a:	4639      	mov	r1, r7
 801560c:	f7f6 ff50 	bl	800c4b0 <__aeabi_dmul>
 8015610:	460f      	mov	r7, r1
 8015612:	4606      	mov	r6, r0
 8015614:	f7f7 f964 	bl	800c8e0 <__aeabi_d2iz>
 8015618:	4604      	mov	r4, r0
 801561a:	f7f6 fee3 	bl	800c3e4 <__aeabi_i2d>
 801561e:	4602      	mov	r2, r0
 8015620:	460b      	mov	r3, r1
 8015622:	4630      	mov	r0, r6
 8015624:	4639      	mov	r1, r7
 8015626:	f7f6 fd8f 	bl	800c148 <__aeabi_dsub>
 801562a:	3430      	adds	r4, #48	; 0x30
 801562c:	b2e4      	uxtb	r4, r4
 801562e:	4652      	mov	r2, sl
 8015630:	465b      	mov	r3, fp
 8015632:	f805 4b01 	strb.w	r4, [r5], #1
 8015636:	4606      	mov	r6, r0
 8015638:	460f      	mov	r7, r1
 801563a:	f7f7 fac9 	bl	800cbd0 <__aeabi_dcmplt>
 801563e:	4632      	mov	r2, r6
 8015640:	463b      	mov	r3, r7
 8015642:	2800      	cmp	r0, #0
 8015644:	d0c8      	beq.n	80155d8 <_dtoa_r+0x8d8>
 8015646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015648:	f8dd b000 	ldr.w	fp, [sp]
 801564c:	9305      	str	r3, [sp, #20]
 801564e:	4644      	mov	r4, r8
 8015650:	e52d      	b.n	80150ae <_dtoa_r+0x3ae>
 8015652:	2300      	movs	r3, #0
 8015654:	930b      	str	r3, [sp, #44]	; 0x2c
 8015656:	9b05      	ldr	r3, [sp, #20]
 8015658:	4453      	add	r3, sl
 801565a:	930e      	str	r3, [sp, #56]	; 0x38
 801565c:	3301      	adds	r3, #1
 801565e:	2b00      	cmp	r3, #0
 8015660:	9308      	str	r3, [sp, #32]
 8015662:	f340 8101 	ble.w	8015868 <_dtoa_r+0xb68>
 8015666:	9d08      	ldr	r5, [sp, #32]
 8015668:	462e      	mov	r6, r5
 801566a:	e6f0      	b.n	801544e <_dtoa_r+0x74e>
 801566c:	2300      	movs	r3, #0
 801566e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015670:	e6e3      	b.n	801543a <_dtoa_r+0x73a>
 8015672:	9b08      	ldr	r3, [sp, #32]
 8015674:	2b00      	cmp	r3, #0
 8015676:	f73f ac67 	bgt.w	8014f48 <_dtoa_r+0x248>
 801567a:	f040 80d4 	bne.w	8015826 <_dtoa_r+0xb26>
 801567e:	4640      	mov	r0, r8
 8015680:	2200      	movs	r2, #0
 8015682:	4b41      	ldr	r3, [pc, #260]	; (8015788 <_dtoa_r+0xa88>)
 8015684:	4649      	mov	r1, r9
 8015686:	f7f6 ff13 	bl	800c4b0 <__aeabi_dmul>
 801568a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801568e:	f7f7 fab3 	bl	800cbf8 <__aeabi_dcmpge>
 8015692:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015696:	4646      	mov	r6, r8
 8015698:	2800      	cmp	r0, #0
 801569a:	f000 808b 	beq.w	80157b4 <_dtoa_r+0xab4>
 801569e:	ea6f 030a 	mvn.w	r3, sl
 80156a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80156a4:	9305      	str	r3, [sp, #20]
 80156a6:	4641      	mov	r1, r8
 80156a8:	4620      	mov	r0, r4
 80156aa:	f000 fda9 	bl	8016200 <_Bfree>
 80156ae:	2e00      	cmp	r6, #0
 80156b0:	f47f ae2b 	bne.w	801530a <_dtoa_r+0x60a>
 80156b4:	e4fb      	b.n	80150ae <_dtoa_r+0x3ae>
 80156b6:	4659      	mov	r1, fp
 80156b8:	4620      	mov	r0, r4
 80156ba:	f000 fef9 	bl	80164b0 <__pow5mult>
 80156be:	4683      	mov	fp, r0
 80156c0:	e554      	b.n	801516c <_dtoa_r+0x46c>
 80156c2:	9b00      	ldr	r3, [sp, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f47f ad63 	bne.w	8015190 <_dtoa_r+0x490>
 80156ca:	9b01      	ldr	r3, [sp, #4]
 80156cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	f47f ad90 	bne.w	80151f6 <_dtoa_r+0x4f6>
 80156d6:	9b01      	ldr	r3, [sp, #4]
 80156d8:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80156dc:	0d3f      	lsrs	r7, r7, #20
 80156de:	053f      	lsls	r7, r7, #20
 80156e0:	2f00      	cmp	r7, #0
 80156e2:	f000 821c 	beq.w	8015b1e <_dtoa_r+0xe1e>
 80156e6:	9b07      	ldr	r3, [sp, #28]
 80156e8:	3301      	adds	r3, #1
 80156ea:	9307      	str	r3, [sp, #28]
 80156ec:	9b06      	ldr	r3, [sp, #24]
 80156ee:	3301      	adds	r3, #1
 80156f0:	9306      	str	r3, [sp, #24]
 80156f2:	f04f 0901 	mov.w	r9, #1
 80156f6:	e580      	b.n	80151fa <_dtoa_r+0x4fa>
 80156f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80156fa:	2a00      	cmp	r2, #0
 80156fc:	f000 81a7 	beq.w	8015a4e <_dtoa_r+0xd4e>
 8015700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015704:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015706:	9d07      	ldr	r5, [sp, #28]
 8015708:	e4f9      	b.n	80150fe <_dtoa_r+0x3fe>
 801570a:	f000 fd89 	bl	8016220 <__multadd>
 801570e:	4657      	mov	r7, sl
 8015710:	4606      	mov	r6, r0
 8015712:	4681      	mov	r9, r0
 8015714:	e62f      	b.n	8015376 <_dtoa_r+0x676>
 8015716:	4601      	mov	r1, r0
 8015718:	4620      	mov	r0, r4
 801571a:	f8cd c000 	str.w	ip, [sp]
 801571e:	f000 fd6f 	bl	8016200 <_Bfree>
 8015722:	2201      	movs	r2, #1
 8015724:	f8dd c000 	ldr.w	ip, [sp]
 8015728:	e652      	b.n	80153d0 <_dtoa_r+0x6d0>
 801572a:	4658      	mov	r0, fp
 801572c:	4641      	mov	r1, r8
 801572e:	f000 ff67 	bl	8016600 <__mcmp>
 8015732:	2800      	cmp	r0, #0
 8015734:	f6bf ad8f 	bge.w	8015256 <_dtoa_r+0x556>
 8015738:	9f05      	ldr	r7, [sp, #20]
 801573a:	4659      	mov	r1, fp
 801573c:	2300      	movs	r3, #0
 801573e:	4620      	mov	r0, r4
 8015740:	220a      	movs	r2, #10
 8015742:	3f01      	subs	r7, #1
 8015744:	9705      	str	r7, [sp, #20]
 8015746:	f000 fd6b 	bl	8016220 <__multadd>
 801574a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801574c:	4683      	mov	fp, r0
 801574e:	2b00      	cmp	r3, #0
 8015750:	f47f adee 	bne.w	8015330 <_dtoa_r+0x630>
 8015754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015756:	2b00      	cmp	r3, #0
 8015758:	f340 81f5 	ble.w	8015b46 <_dtoa_r+0xe46>
 801575c:	9308      	str	r3, [sp, #32]
 801575e:	e581      	b.n	8015264 <_dtoa_r+0x564>
 8015760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015762:	f7ff bb04 	b.w	8014d6e <_dtoa_r+0x6e>
 8015766:	9b00      	ldr	r3, [sp, #0]
 8015768:	2b00      	cmp	r3, #0
 801576a:	f47f ad44 	bne.w	80151f6 <_dtoa_r+0x4f6>
 801576e:	e7ac      	b.n	80156ca <_dtoa_r+0x9ca>
 8015770:	08017aa0 	.word	0x08017aa0
 8015774:	08017b80 	.word	0x08017b80
 8015778:	3ff00000 	.word	0x3ff00000
 801577c:	401c0000 	.word	0x401c0000
 8015780:	3fe00000 	.word	0x3fe00000
 8015784:	40240000 	.word	0x40240000
 8015788:	40140000 	.word	0x40140000
 801578c:	9b03      	ldr	r3, [sp, #12]
 801578e:	2b02      	cmp	r3, #2
 8015790:	f77f ad65 	ble.w	801525e <_dtoa_r+0x55e>
 8015794:	9b08      	ldr	r3, [sp, #32]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d181      	bne.n	801569e <_dtoa_r+0x99e>
 801579a:	4641      	mov	r1, r8
 801579c:	2205      	movs	r2, #5
 801579e:	4620      	mov	r0, r4
 80157a0:	f000 fd3e 	bl	8016220 <__multadd>
 80157a4:	4680      	mov	r8, r0
 80157a6:	4641      	mov	r1, r8
 80157a8:	4658      	mov	r0, fp
 80157aa:	f000 ff29 	bl	8016600 <__mcmp>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	f77f af75 	ble.w	801569e <_dtoa_r+0x99e>
 80157b4:	9a05      	ldr	r2, [sp, #20]
 80157b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157b8:	2331      	movs	r3, #49	; 0x31
 80157ba:	3201      	adds	r2, #1
 80157bc:	9205      	str	r2, [sp, #20]
 80157be:	700b      	strb	r3, [r1, #0]
 80157c0:	1c4d      	adds	r5, r1, #1
 80157c2:	e770      	b.n	80156a6 <_dtoa_r+0x9a6>
 80157c4:	9a05      	ldr	r2, [sp, #20]
 80157c6:	3201      	adds	r2, #1
 80157c8:	9205      	str	r2, [sp, #20]
 80157ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157cc:	2331      	movs	r3, #49	; 0x31
 80157ce:	7013      	strb	r3, [r2, #0]
 80157d0:	e58b      	b.n	80152ea <_dtoa_r+0x5ea>
 80157d2:	f8dd b000 	ldr.w	fp, [sp]
 80157d6:	9c03      	ldr	r4, [sp, #12]
 80157d8:	e469      	b.n	80150ae <_dtoa_r+0x3ae>
 80157da:	4640      	mov	r0, r8
 80157dc:	f7f6 fe02 	bl	800c3e4 <__aeabi_i2d>
 80157e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157e4:	f7f6 fe64 	bl	800c4b0 <__aeabi_dmul>
 80157e8:	2200      	movs	r2, #0
 80157ea:	4bc2      	ldr	r3, [pc, #776]	; (8015af4 <_dtoa_r+0xdf4>)
 80157ec:	f7f6 fcae 	bl	800c14c <__adddf3>
 80157f0:	4606      	mov	r6, r0
 80157f2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80157f6:	2200      	movs	r2, #0
 80157f8:	4bbf      	ldr	r3, [pc, #764]	; (8015af8 <_dtoa_r+0xdf8>)
 80157fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157fe:	f7f6 fca3 	bl	800c148 <__aeabi_dsub>
 8015802:	4632      	mov	r2, r6
 8015804:	463b      	mov	r3, r7
 8015806:	4680      	mov	r8, r0
 8015808:	4689      	mov	r9, r1
 801580a:	f7f7 f9ff 	bl	800cc0c <__aeabi_dcmpgt>
 801580e:	2800      	cmp	r0, #0
 8015810:	f040 80b6 	bne.w	8015980 <_dtoa_r+0xc80>
 8015814:	4632      	mov	r2, r6
 8015816:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801581a:	4640      	mov	r0, r8
 801581c:	4649      	mov	r1, r9
 801581e:	f7f7 f9d7 	bl	800cbd0 <__aeabi_dcmplt>
 8015822:	2800      	cmp	r0, #0
 8015824:	d052      	beq.n	80158cc <_dtoa_r+0xbcc>
 8015826:	f04f 0800 	mov.w	r8, #0
 801582a:	4646      	mov	r6, r8
 801582c:	e737      	b.n	801569e <_dtoa_r+0x99e>
 801582e:	4659      	mov	r1, fp
 8015830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015832:	4620      	mov	r0, r4
 8015834:	f000 fe3c 	bl	80164b0 <__pow5mult>
 8015838:	4683      	mov	fp, r0
 801583a:	e497      	b.n	801516c <_dtoa_r+0x46c>
 801583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801583e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015840:	970a      	str	r7, [sp, #40]	; 0x28
 8015842:	1afb      	subs	r3, r7, r3
 8015844:	441a      	add	r2, r3
 8015846:	920c      	str	r2, [sp, #48]	; 0x30
 8015848:	2700      	movs	r7, #0
 801584a:	e452      	b.n	80150f2 <_dtoa_r+0x3f2>
 801584c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8015850:	f04f 0802 	mov.w	r8, #2
 8015854:	ed8d 7b00 	vstr	d7, [sp]
 8015858:	e633      	b.n	80154c2 <_dtoa_r+0x7c2>
 801585a:	2501      	movs	r5, #1
 801585c:	950e      	str	r5, [sp, #56]	; 0x38
 801585e:	9508      	str	r5, [sp, #32]
 8015860:	46aa      	mov	sl, r5
 8015862:	2100      	movs	r1, #0
 8015864:	6461      	str	r1, [r4, #68]	; 0x44
 8015866:	e601      	b.n	801546c <_dtoa_r+0x76c>
 8015868:	461d      	mov	r5, r3
 801586a:	e7fa      	b.n	8015862 <_dtoa_r+0xb62>
 801586c:	2a00      	cmp	r2, #0
 801586e:	dd15      	ble.n	801589c <_dtoa_r+0xb9c>
 8015870:	4659      	mov	r1, fp
 8015872:	2201      	movs	r2, #1
 8015874:	4620      	mov	r0, r4
 8015876:	f8cd c000 	str.w	ip, [sp]
 801587a:	f000 fe69 	bl	8016550 <__lshift>
 801587e:	4641      	mov	r1, r8
 8015880:	4683      	mov	fp, r0
 8015882:	f000 febd 	bl	8016600 <__mcmp>
 8015886:	2800      	cmp	r0, #0
 8015888:	f8dd c000 	ldr.w	ip, [sp]
 801588c:	f340 8154 	ble.w	8015b38 <_dtoa_r+0xe38>
 8015890:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8015894:	f000 8111 	beq.w	8015aba <_dtoa_r+0xdba>
 8015898:	f10c 0c01 	add.w	ip, ip, #1
 801589c:	46b2      	mov	sl, r6
 801589e:	f887 c000 	strb.w	ip, [r7]
 80158a2:	1c7d      	adds	r5, r7, #1
 80158a4:	464e      	mov	r6, r9
 80158a6:	e520      	b.n	80152ea <_dtoa_r+0x5ea>
 80158a8:	d104      	bne.n	80158b4 <_dtoa_r+0xbb4>
 80158aa:	f01c 0f01 	tst.w	ip, #1
 80158ae:	d001      	beq.n	80158b4 <_dtoa_r+0xbb4>
 80158b0:	e50b      	b.n	80152ca <_dtoa_r+0x5ca>
 80158b2:	4615      	mov	r5, r2
 80158b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80158b8:	2b30      	cmp	r3, #48	; 0x30
 80158ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80158be:	d0f8      	beq.n	80158b2 <_dtoa_r+0xbb2>
 80158c0:	e513      	b.n	80152ea <_dtoa_r+0x5ea>
 80158c2:	f8dd b000 	ldr.w	fp, [sp]
 80158c6:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80158ca:	4644      	mov	r4, r8
 80158cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80158d0:	e9cd 2300 	strd	r2, r3, [sp]
 80158d4:	f7ff bb27 	b.w	8014f26 <_dtoa_r+0x226>
 80158d8:	9b05      	ldr	r3, [sp, #20]
 80158da:	425d      	negs	r5, r3
 80158dc:	2d00      	cmp	r5, #0
 80158de:	f000 80bd 	beq.w	8015a5c <_dtoa_r+0xd5c>
 80158e2:	4b86      	ldr	r3, [pc, #536]	; (8015afc <_dtoa_r+0xdfc>)
 80158e4:	f005 020f 	and.w	r2, r5, #15
 80158e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80158f4:	f7f6 fddc 	bl	800c4b0 <__aeabi_dmul>
 80158f8:	112d      	asrs	r5, r5, #4
 80158fa:	e9cd 0100 	strd	r0, r1, [sp]
 80158fe:	f000 8127 	beq.w	8015b50 <_dtoa_r+0xe50>
 8015902:	4e7f      	ldr	r6, [pc, #508]	; (8015b00 <_dtoa_r+0xe00>)
 8015904:	f04f 0802 	mov.w	r8, #2
 8015908:	07eb      	lsls	r3, r5, #31
 801590a:	d505      	bpl.n	8015918 <_dtoa_r+0xc18>
 801590c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015910:	f7f6 fdce 	bl	800c4b0 <__aeabi_dmul>
 8015914:	f108 0801 	add.w	r8, r8, #1
 8015918:	106d      	asrs	r5, r5, #1
 801591a:	f106 0608 	add.w	r6, r6, #8
 801591e:	d1f3      	bne.n	8015908 <_dtoa_r+0xc08>
 8015920:	e9cd 0100 	strd	r0, r1, [sp]
 8015924:	e5e8      	b.n	80154f8 <_dtoa_r+0x7f8>
 8015926:	9a05      	ldr	r2, [sp, #20]
 8015928:	3201      	adds	r2, #1
 801592a:	9205      	str	r2, [sp, #20]
 801592c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801592e:	2330      	movs	r3, #48	; 0x30
 8015930:	7013      	strb	r3, [r2, #0]
 8015932:	2331      	movs	r3, #49	; 0x31
 8015934:	7013      	strb	r3, [r2, #0]
 8015936:	f7ff bbba 	b.w	80150ae <_dtoa_r+0x3ae>
 801593a:	6871      	ldr	r1, [r6, #4]
 801593c:	4620      	mov	r0, r4
 801593e:	f000 fc37 	bl	80161b0 <_Balloc>
 8015942:	6933      	ldr	r3, [r6, #16]
 8015944:	1c9a      	adds	r2, r3, #2
 8015946:	4605      	mov	r5, r0
 8015948:	0092      	lsls	r2, r2, #2
 801594a:	f106 010c 	add.w	r1, r6, #12
 801594e:	300c      	adds	r0, #12
 8015950:	f7f7 f83e 	bl	800c9d0 <memcpy>
 8015954:	4620      	mov	r0, r4
 8015956:	4629      	mov	r1, r5
 8015958:	2201      	movs	r2, #1
 801595a:	f000 fdf9 	bl	8016550 <__lshift>
 801595e:	4681      	mov	r9, r0
 8015960:	e4ff      	b.n	8015362 <_dtoa_r+0x662>
 8015962:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8015966:	f000 80a8 	beq.w	8015aba <_dtoa_r+0xdba>
 801596a:	f10c 0c01 	add.w	ip, ip, #1
 801596e:	46b2      	mov	sl, r6
 8015970:	f887 c000 	strb.w	ip, [r7]
 8015974:	1c7d      	adds	r5, r7, #1
 8015976:	464e      	mov	r6, r9
 8015978:	e4b7      	b.n	80152ea <_dtoa_r+0x5ea>
 801597a:	46b2      	mov	sl, r6
 801597c:	464e      	mov	r6, r9
 801597e:	e494      	b.n	80152aa <_dtoa_r+0x5aa>
 8015980:	f04f 0800 	mov.w	r8, #0
 8015984:	4646      	mov	r6, r8
 8015986:	e715      	b.n	80157b4 <_dtoa_r+0xab4>
 8015988:	495c      	ldr	r1, [pc, #368]	; (8015afc <_dtoa_r+0xdfc>)
 801598a:	f109 33ff 	add.w	r3, r9, #4294967295
 801598e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015992:	4632      	mov	r2, r6
 8015994:	9315      	str	r3, [sp, #84]	; 0x54
 8015996:	e9d1 0100 	ldrd	r0, r1, [r1]
 801599a:	463b      	mov	r3, r7
 801599c:	f7f6 fd88 	bl	800c4b0 <__aeabi_dmul>
 80159a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80159a4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80159a8:	4639      	mov	r1, r7
 80159aa:	4630      	mov	r0, r6
 80159ac:	f7f6 ff98 	bl	800c8e0 <__aeabi_d2iz>
 80159b0:	4605      	mov	r5, r0
 80159b2:	f7f6 fd17 	bl	800c3e4 <__aeabi_i2d>
 80159b6:	4602      	mov	r2, r0
 80159b8:	460b      	mov	r3, r1
 80159ba:	4630      	mov	r0, r6
 80159bc:	4639      	mov	r1, r7
 80159be:	f7f6 fbc3 	bl	800c148 <__aeabi_dsub>
 80159c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159c4:	3530      	adds	r5, #48	; 0x30
 80159c6:	f1b9 0f01 	cmp.w	r9, #1
 80159ca:	7015      	strb	r5, [r2, #0]
 80159cc:	4606      	mov	r6, r0
 80159ce:	460f      	mov	r7, r1
 80159d0:	f102 0501 	add.w	r5, r2, #1
 80159d4:	d023      	beq.n	8015a1e <_dtoa_r+0xd1e>
 80159d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159d8:	f8cd b000 	str.w	fp, [sp]
 80159dc:	444b      	add	r3, r9
 80159de:	4698      	mov	r8, r3
 80159e0:	46a9      	mov	r9, r5
 80159e2:	46ab      	mov	fp, r5
 80159e4:	2200      	movs	r2, #0
 80159e6:	4b47      	ldr	r3, [pc, #284]	; (8015b04 <_dtoa_r+0xe04>)
 80159e8:	f7f6 fd62 	bl	800c4b0 <__aeabi_dmul>
 80159ec:	460f      	mov	r7, r1
 80159ee:	4606      	mov	r6, r0
 80159f0:	f7f6 ff76 	bl	800c8e0 <__aeabi_d2iz>
 80159f4:	4605      	mov	r5, r0
 80159f6:	f7f6 fcf5 	bl	800c3e4 <__aeabi_i2d>
 80159fa:	3530      	adds	r5, #48	; 0x30
 80159fc:	4602      	mov	r2, r0
 80159fe:	460b      	mov	r3, r1
 8015a00:	4630      	mov	r0, r6
 8015a02:	4639      	mov	r1, r7
 8015a04:	f7f6 fba0 	bl	800c148 <__aeabi_dsub>
 8015a08:	f809 5b01 	strb.w	r5, [r9], #1
 8015a0c:	45c1      	cmp	r9, r8
 8015a0e:	d1e9      	bne.n	80159e4 <_dtoa_r+0xce4>
 8015a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a12:	465d      	mov	r5, fp
 8015a14:	f8dd b000 	ldr.w	fp, [sp]
 8015a18:	4606      	mov	r6, r0
 8015a1a:	460f      	mov	r7, r1
 8015a1c:	441d      	add	r5, r3
 8015a1e:	2200      	movs	r2, #0
 8015a20:	4b39      	ldr	r3, [pc, #228]	; (8015b08 <_dtoa_r+0xe08>)
 8015a22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8015a26:	f7f6 fb91 	bl	800c14c <__adddf3>
 8015a2a:	4632      	mov	r2, r6
 8015a2c:	463b      	mov	r3, r7
 8015a2e:	f7f7 f8cf 	bl	800cbd0 <__aeabi_dcmplt>
 8015a32:	2800      	cmp	r0, #0
 8015a34:	d047      	beq.n	8015ac6 <_dtoa_r+0xdc6>
 8015a36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a38:	9305      	str	r3, [sp, #20]
 8015a3a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8015a3e:	f7ff bb24 	b.w	801508a <_dtoa_r+0x38a>
 8015a42:	9b07      	ldr	r3, [sp, #28]
 8015a44:	9a08      	ldr	r2, [sp, #32]
 8015a46:	1a9d      	subs	r5, r3, r2
 8015a48:	2300      	movs	r3, #0
 8015a4a:	f7ff bb58 	b.w	80150fe <_dtoa_r+0x3fe>
 8015a4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015a52:	9d07      	ldr	r5, [sp, #28]
 8015a54:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a58:	f7ff bb51 	b.w	80150fe <_dtoa_r+0x3fe>
 8015a5c:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8015a60:	f04f 0802 	mov.w	r8, #2
 8015a64:	ed8d 7b00 	vstr	d7, [sp]
 8015a68:	e546      	b.n	80154f8 <_dtoa_r+0x7f8>
 8015a6a:	9b08      	ldr	r3, [sp, #32]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	f43f aeb4 	beq.w	80157da <_dtoa_r+0xada>
 8015a72:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015a74:	2d00      	cmp	r5, #0
 8015a76:	f77f af29 	ble.w	80158cc <_dtoa_r+0xbcc>
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	4b21      	ldr	r3, [pc, #132]	; (8015b04 <_dtoa_r+0xe04>)
 8015a7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a82:	f7f6 fd15 	bl	800c4b0 <__aeabi_dmul>
 8015a86:	4606      	mov	r6, r0
 8015a88:	460f      	mov	r7, r1
 8015a8a:	f108 0001 	add.w	r0, r8, #1
 8015a8e:	e9cd 6700 	strd	r6, r7, [sp]
 8015a92:	f7f6 fca7 	bl	800c3e4 <__aeabi_i2d>
 8015a96:	4602      	mov	r2, r0
 8015a98:	460b      	mov	r3, r1
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	4639      	mov	r1, r7
 8015a9e:	f7f6 fd07 	bl	800c4b0 <__aeabi_dmul>
 8015aa2:	4b14      	ldr	r3, [pc, #80]	; (8015af4 <_dtoa_r+0xdf4>)
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	f7f6 fb51 	bl	800c14c <__adddf3>
 8015aaa:	9b05      	ldr	r3, [sp, #20]
 8015aac:	3b01      	subs	r3, #1
 8015aae:	4606      	mov	r6, r0
 8015ab0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8015ab4:	9314      	str	r3, [sp, #80]	; 0x50
 8015ab6:	46a9      	mov	r9, r5
 8015ab8:	e53f      	b.n	801553a <_dtoa_r+0x83a>
 8015aba:	2239      	movs	r2, #57	; 0x39
 8015abc:	46b2      	mov	sl, r6
 8015abe:	703a      	strb	r2, [r7, #0]
 8015ac0:	464e      	mov	r6, r9
 8015ac2:	1c7d      	adds	r5, r7, #1
 8015ac4:	e403      	b.n	80152ce <_dtoa_r+0x5ce>
 8015ac6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015aca:	2000      	movs	r0, #0
 8015acc:	490e      	ldr	r1, [pc, #56]	; (8015b08 <_dtoa_r+0xe08>)
 8015ace:	f7f6 fb3b 	bl	800c148 <__aeabi_dsub>
 8015ad2:	4632      	mov	r2, r6
 8015ad4:	463b      	mov	r3, r7
 8015ad6:	f7f7 f899 	bl	800cc0c <__aeabi_dcmpgt>
 8015ada:	b908      	cbnz	r0, 8015ae0 <_dtoa_r+0xde0>
 8015adc:	e6f6      	b.n	80158cc <_dtoa_r+0xbcc>
 8015ade:	4615      	mov	r5, r2
 8015ae0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015ae4:	2b30      	cmp	r3, #48	; 0x30
 8015ae6:	f105 32ff 	add.w	r2, r5, #4294967295
 8015aea:	d0f8      	beq.n	8015ade <_dtoa_r+0xdde>
 8015aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015aee:	9305      	str	r3, [sp, #20]
 8015af0:	f7ff badd 	b.w	80150ae <_dtoa_r+0x3ae>
 8015af4:	401c0000 	.word	0x401c0000
 8015af8:	40140000 	.word	0x40140000
 8015afc:	08017aa0 	.word	0x08017aa0
 8015b00:	08017b80 	.word	0x08017b80
 8015b04:	40240000 	.word	0x40240000
 8015b08:	3fe00000 	.word	0x3fe00000
 8015b0c:	4643      	mov	r3, r8
 8015b0e:	f8dd b000 	ldr.w	fp, [sp]
 8015b12:	46a0      	mov	r8, r4
 8015b14:	461c      	mov	r4, r3
 8015b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b18:	9305      	str	r3, [sp, #20]
 8015b1a:	f7ff bab6 	b.w	801508a <_dtoa_r+0x38a>
 8015b1e:	46b9      	mov	r9, r7
 8015b20:	f7ff bb6b 	b.w	80151fa <_dtoa_r+0x4fa>
 8015b24:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8015b28:	d0c7      	beq.n	8015aba <_dtoa_r+0xdba>
 8015b2a:	f1ba 0f00 	cmp.w	sl, #0
 8015b2e:	f77f aeb5 	ble.w	801589c <_dtoa_r+0xb9c>
 8015b32:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8015b36:	e6b1      	b.n	801589c <_dtoa_r+0xb9c>
 8015b38:	f47f aeb0 	bne.w	801589c <_dtoa_r+0xb9c>
 8015b3c:	f01c 0f01 	tst.w	ip, #1
 8015b40:	f43f aeac 	beq.w	801589c <_dtoa_r+0xb9c>
 8015b44:	e6a4      	b.n	8015890 <_dtoa_r+0xb90>
 8015b46:	9b03      	ldr	r3, [sp, #12]
 8015b48:	2b02      	cmp	r3, #2
 8015b4a:	dc04      	bgt.n	8015b56 <_dtoa_r+0xe56>
 8015b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b4e:	e605      	b.n	801575c <_dtoa_r+0xa5c>
 8015b50:	f04f 0802 	mov.w	r8, #2
 8015b54:	e4d0      	b.n	80154f8 <_dtoa_r+0x7f8>
 8015b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b58:	9308      	str	r3, [sp, #32]
 8015b5a:	e61b      	b.n	8015794 <_dtoa_r+0xa94>
 8015b5c:	9b03      	ldr	r3, [sp, #12]
 8015b5e:	2b02      	cmp	r3, #2
 8015b60:	dcf9      	bgt.n	8015b56 <_dtoa_r+0xe56>
 8015b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b64:	f7ff bbef 	b.w	8015346 <_dtoa_r+0x646>
 8015b68:	2500      	movs	r5, #0
 8015b6a:	6465      	str	r5, [r4, #68]	; 0x44
 8015b6c:	4629      	mov	r1, r5
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f000 fb1e 	bl	80161b0 <_Balloc>
 8015b74:	f04f 33ff 	mov.w	r3, #4294967295
 8015b78:	9308      	str	r3, [sp, #32]
 8015b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	9009      	str	r0, [sp, #36]	; 0x24
 8015b80:	46aa      	mov	sl, r5
 8015b82:	6420      	str	r0, [r4, #64]	; 0x40
 8015b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b86:	f7ff b9ce 	b.w	8014f26 <_dtoa_r+0x226>
 8015b8a:	f43f ab4e 	beq.w	801522a <_dtoa_r+0x52a>
 8015b8e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8015b92:	f7ff bb43 	b.w	801521c <_dtoa_r+0x51c>
 8015b96:	2301      	movs	r3, #1
 8015b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b9a:	e55c      	b.n	8015656 <_dtoa_r+0x956>
 8015b9c:	2701      	movs	r7, #1
 8015b9e:	f7ff b98d 	b.w	8014ebc <_dtoa_r+0x1bc>
 8015ba2:	bf00      	nop
	...

08015bb0 <_localeconv_r>:
 8015bb0:	4800      	ldr	r0, [pc, #0]	; (8015bb4 <_localeconv_r+0x4>)
 8015bb2:	4770      	bx	lr
 8015bb4:	20000c44 	.word	0x20000c44
	...

08015bc0 <_malloc_r>:
 8015bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc4:	f101 050b 	add.w	r5, r1, #11
 8015bc8:	2d16      	cmp	r5, #22
 8015bca:	b083      	sub	sp, #12
 8015bcc:	4606      	mov	r6, r0
 8015bce:	d927      	bls.n	8015c20 <_malloc_r+0x60>
 8015bd0:	f035 0507 	bics.w	r5, r5, #7
 8015bd4:	f100 80b6 	bmi.w	8015d44 <_malloc_r+0x184>
 8015bd8:	42a9      	cmp	r1, r5
 8015bda:	f200 80b3 	bhi.w	8015d44 <_malloc_r+0x184>
 8015bde:	f000 fad7 	bl	8016190 <__malloc_lock>
 8015be2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8015be6:	d222      	bcs.n	8015c2e <_malloc_r+0x6e>
 8015be8:	4fc2      	ldr	r7, [pc, #776]	; (8015ef4 <_malloc_r+0x334>)
 8015bea:	08e8      	lsrs	r0, r5, #3
 8015bec:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8015bf0:	68dc      	ldr	r4, [r3, #12]
 8015bf2:	429c      	cmp	r4, r3
 8015bf4:	f000 81c8 	beq.w	8015f88 <_malloc_r+0x3c8>
 8015bf8:	6863      	ldr	r3, [r4, #4]
 8015bfa:	68e1      	ldr	r1, [r4, #12]
 8015bfc:	68a5      	ldr	r5, [r4, #8]
 8015bfe:	f023 0303 	bic.w	r3, r3, #3
 8015c02:	4423      	add	r3, r4
 8015c04:	4630      	mov	r0, r6
 8015c06:	685a      	ldr	r2, [r3, #4]
 8015c08:	60e9      	str	r1, [r5, #12]
 8015c0a:	f042 0201 	orr.w	r2, r2, #1
 8015c0e:	608d      	str	r5, [r1, #8]
 8015c10:	605a      	str	r2, [r3, #4]
 8015c12:	f000 fac5 	bl	80161a0 <__malloc_unlock>
 8015c16:	3408      	adds	r4, #8
 8015c18:	4620      	mov	r0, r4
 8015c1a:	b003      	add	sp, #12
 8015c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c20:	2910      	cmp	r1, #16
 8015c22:	f200 808f 	bhi.w	8015d44 <_malloc_r+0x184>
 8015c26:	f000 fab3 	bl	8016190 <__malloc_lock>
 8015c2a:	2510      	movs	r5, #16
 8015c2c:	e7dc      	b.n	8015be8 <_malloc_r+0x28>
 8015c2e:	0a68      	lsrs	r0, r5, #9
 8015c30:	f000 808f 	beq.w	8015d52 <_malloc_r+0x192>
 8015c34:	2804      	cmp	r0, #4
 8015c36:	f200 8154 	bhi.w	8015ee2 <_malloc_r+0x322>
 8015c3a:	09a8      	lsrs	r0, r5, #6
 8015c3c:	3038      	adds	r0, #56	; 0x38
 8015c3e:	0041      	lsls	r1, r0, #1
 8015c40:	4fac      	ldr	r7, [pc, #688]	; (8015ef4 <_malloc_r+0x334>)
 8015c42:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8015c46:	68cc      	ldr	r4, [r1, #12]
 8015c48:	42a1      	cmp	r1, r4
 8015c4a:	d106      	bne.n	8015c5a <_malloc_r+0x9a>
 8015c4c:	e00c      	b.n	8015c68 <_malloc_r+0xa8>
 8015c4e:	2a00      	cmp	r2, #0
 8015c50:	f280 8082 	bge.w	8015d58 <_malloc_r+0x198>
 8015c54:	68e4      	ldr	r4, [r4, #12]
 8015c56:	42a1      	cmp	r1, r4
 8015c58:	d006      	beq.n	8015c68 <_malloc_r+0xa8>
 8015c5a:	6863      	ldr	r3, [r4, #4]
 8015c5c:	f023 0303 	bic.w	r3, r3, #3
 8015c60:	1b5a      	subs	r2, r3, r5
 8015c62:	2a0f      	cmp	r2, #15
 8015c64:	ddf3      	ble.n	8015c4e <_malloc_r+0x8e>
 8015c66:	3801      	subs	r0, #1
 8015c68:	3001      	adds	r0, #1
 8015c6a:	49a2      	ldr	r1, [pc, #648]	; (8015ef4 <_malloc_r+0x334>)
 8015c6c:	693c      	ldr	r4, [r7, #16]
 8015c6e:	f101 0e08 	add.w	lr, r1, #8
 8015c72:	4574      	cmp	r4, lr
 8015c74:	f000 817d 	beq.w	8015f72 <_malloc_r+0x3b2>
 8015c78:	6863      	ldr	r3, [r4, #4]
 8015c7a:	f023 0303 	bic.w	r3, r3, #3
 8015c7e:	1b5a      	subs	r2, r3, r5
 8015c80:	2a0f      	cmp	r2, #15
 8015c82:	f300 8163 	bgt.w	8015f4c <_malloc_r+0x38c>
 8015c86:	2a00      	cmp	r2, #0
 8015c88:	f8c1 e014 	str.w	lr, [r1, #20]
 8015c8c:	f8c1 e010 	str.w	lr, [r1, #16]
 8015c90:	da73      	bge.n	8015d7a <_malloc_r+0x1ba>
 8015c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c96:	f080 8139 	bcs.w	8015f0c <_malloc_r+0x34c>
 8015c9a:	08db      	lsrs	r3, r3, #3
 8015c9c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8015ca0:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8015ca4:	684a      	ldr	r2, [r1, #4]
 8015ca6:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8015caa:	f8c4 9008 	str.w	r9, [r4, #8]
 8015cae:	2301      	movs	r3, #1
 8015cb0:	fa03 f30c 	lsl.w	r3, r3, ip
 8015cb4:	4313      	orrs	r3, r2
 8015cb6:	f8c4 800c 	str.w	r8, [r4, #12]
 8015cba:	604b      	str	r3, [r1, #4]
 8015cbc:	f8c8 4008 	str.w	r4, [r8, #8]
 8015cc0:	f8c9 400c 	str.w	r4, [r9, #12]
 8015cc4:	1082      	asrs	r2, r0, #2
 8015cc6:	2401      	movs	r4, #1
 8015cc8:	4094      	lsls	r4, r2
 8015cca:	429c      	cmp	r4, r3
 8015ccc:	d862      	bhi.n	8015d94 <_malloc_r+0x1d4>
 8015cce:	4223      	tst	r3, r4
 8015cd0:	d106      	bne.n	8015ce0 <_malloc_r+0x120>
 8015cd2:	f020 0003 	bic.w	r0, r0, #3
 8015cd6:	0064      	lsls	r4, r4, #1
 8015cd8:	4223      	tst	r3, r4
 8015cda:	f100 0004 	add.w	r0, r0, #4
 8015cde:	d0fa      	beq.n	8015cd6 <_malloc_r+0x116>
 8015ce0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8015ce4:	46c4      	mov	ip, r8
 8015ce6:	4681      	mov	r9, r0
 8015ce8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8015cec:	459c      	cmp	ip, r3
 8015cee:	d107      	bne.n	8015d00 <_malloc_r+0x140>
 8015cf0:	e141      	b.n	8015f76 <_malloc_r+0x3b6>
 8015cf2:	2900      	cmp	r1, #0
 8015cf4:	f280 8151 	bge.w	8015f9a <_malloc_r+0x3da>
 8015cf8:	68db      	ldr	r3, [r3, #12]
 8015cfa:	459c      	cmp	ip, r3
 8015cfc:	f000 813b 	beq.w	8015f76 <_malloc_r+0x3b6>
 8015d00:	685a      	ldr	r2, [r3, #4]
 8015d02:	f022 0203 	bic.w	r2, r2, #3
 8015d06:	1b51      	subs	r1, r2, r5
 8015d08:	290f      	cmp	r1, #15
 8015d0a:	ddf2      	ble.n	8015cf2 <_malloc_r+0x132>
 8015d0c:	461c      	mov	r4, r3
 8015d0e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8015d12:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8015d16:	195a      	adds	r2, r3, r5
 8015d18:	f045 0901 	orr.w	r9, r5, #1
 8015d1c:	f041 0501 	orr.w	r5, r1, #1
 8015d20:	f8c3 9004 	str.w	r9, [r3, #4]
 8015d24:	4630      	mov	r0, r6
 8015d26:	f8c8 c00c 	str.w	ip, [r8, #12]
 8015d2a:	f8cc 8008 	str.w	r8, [ip, #8]
 8015d2e:	617a      	str	r2, [r7, #20]
 8015d30:	613a      	str	r2, [r7, #16]
 8015d32:	f8c2 e00c 	str.w	lr, [r2, #12]
 8015d36:	f8c2 e008 	str.w	lr, [r2, #8]
 8015d3a:	6055      	str	r5, [r2, #4]
 8015d3c:	5051      	str	r1, [r2, r1]
 8015d3e:	f000 fa2f 	bl	80161a0 <__malloc_unlock>
 8015d42:	e769      	b.n	8015c18 <_malloc_r+0x58>
 8015d44:	2400      	movs	r4, #0
 8015d46:	230c      	movs	r3, #12
 8015d48:	4620      	mov	r0, r4
 8015d4a:	6033      	str	r3, [r6, #0]
 8015d4c:	b003      	add	sp, #12
 8015d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d52:	217e      	movs	r1, #126	; 0x7e
 8015d54:	203f      	movs	r0, #63	; 0x3f
 8015d56:	e773      	b.n	8015c40 <_malloc_r+0x80>
 8015d58:	4423      	add	r3, r4
 8015d5a:	68e1      	ldr	r1, [r4, #12]
 8015d5c:	685a      	ldr	r2, [r3, #4]
 8015d5e:	68a5      	ldr	r5, [r4, #8]
 8015d60:	f042 0201 	orr.w	r2, r2, #1
 8015d64:	60e9      	str	r1, [r5, #12]
 8015d66:	4630      	mov	r0, r6
 8015d68:	608d      	str	r5, [r1, #8]
 8015d6a:	605a      	str	r2, [r3, #4]
 8015d6c:	f000 fa18 	bl	80161a0 <__malloc_unlock>
 8015d70:	3408      	adds	r4, #8
 8015d72:	4620      	mov	r0, r4
 8015d74:	b003      	add	sp, #12
 8015d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7a:	4423      	add	r3, r4
 8015d7c:	4630      	mov	r0, r6
 8015d7e:	685a      	ldr	r2, [r3, #4]
 8015d80:	f042 0201 	orr.w	r2, r2, #1
 8015d84:	605a      	str	r2, [r3, #4]
 8015d86:	f000 fa0b 	bl	80161a0 <__malloc_unlock>
 8015d8a:	3408      	adds	r4, #8
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	b003      	add	sp, #12
 8015d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d94:	68bc      	ldr	r4, [r7, #8]
 8015d96:	6863      	ldr	r3, [r4, #4]
 8015d98:	f023 0803 	bic.w	r8, r3, #3
 8015d9c:	4545      	cmp	r5, r8
 8015d9e:	d804      	bhi.n	8015daa <_malloc_r+0x1ea>
 8015da0:	ebc5 0308 	rsb	r3, r5, r8
 8015da4:	2b0f      	cmp	r3, #15
 8015da6:	f300 808c 	bgt.w	8015ec2 <_malloc_r+0x302>
 8015daa:	4b53      	ldr	r3, [pc, #332]	; (8015ef8 <_malloc_r+0x338>)
 8015dac:	f8df a158 	ldr.w	sl, [pc, #344]	; 8015f08 <_malloc_r+0x348>
 8015db0:	681a      	ldr	r2, [r3, #0]
 8015db2:	f8da 3000 	ldr.w	r3, [sl]
 8015db6:	3301      	adds	r3, #1
 8015db8:	442a      	add	r2, r5
 8015dba:	eb04 0b08 	add.w	fp, r4, r8
 8015dbe:	f000 8150 	beq.w	8016062 <_malloc_r+0x4a2>
 8015dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8015dc6:	320f      	adds	r2, #15
 8015dc8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8015dcc:	f022 020f 	bic.w	r2, r2, #15
 8015dd0:	4611      	mov	r1, r2
 8015dd2:	4630      	mov	r0, r6
 8015dd4:	9201      	str	r2, [sp, #4]
 8015dd6:	f7fa fa3b 	bl	8010250 <_sbrk_r>
 8015dda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015dde:	4681      	mov	r9, r0
 8015de0:	9a01      	ldr	r2, [sp, #4]
 8015de2:	f000 8147 	beq.w	8016074 <_malloc_r+0x4b4>
 8015de6:	4583      	cmp	fp, r0
 8015de8:	f200 80ee 	bhi.w	8015fc8 <_malloc_r+0x408>
 8015dec:	4b43      	ldr	r3, [pc, #268]	; (8015efc <_malloc_r+0x33c>)
 8015dee:	6819      	ldr	r1, [r3, #0]
 8015df0:	45cb      	cmp	fp, r9
 8015df2:	4411      	add	r1, r2
 8015df4:	6019      	str	r1, [r3, #0]
 8015df6:	f000 8142 	beq.w	801607e <_malloc_r+0x4be>
 8015dfa:	f8da 0000 	ldr.w	r0, [sl]
 8015dfe:	f8df e108 	ldr.w	lr, [pc, #264]	; 8015f08 <_malloc_r+0x348>
 8015e02:	3001      	adds	r0, #1
 8015e04:	bf1b      	ittet	ne
 8015e06:	ebcb 0b09 	rsbne	fp, fp, r9
 8015e0a:	4459      	addne	r1, fp
 8015e0c:	f8ce 9000 	streq.w	r9, [lr]
 8015e10:	6019      	strne	r1, [r3, #0]
 8015e12:	f019 0107 	ands.w	r1, r9, #7
 8015e16:	f000 8107 	beq.w	8016028 <_malloc_r+0x468>
 8015e1a:	f1c1 0008 	rsb	r0, r1, #8
 8015e1e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8015e22:	4481      	add	r9, r0
 8015e24:	3108      	adds	r1, #8
 8015e26:	444a      	add	r2, r9
 8015e28:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8015e2c:	ebc2 0a01 	rsb	sl, r2, r1
 8015e30:	4651      	mov	r1, sl
 8015e32:	4630      	mov	r0, r6
 8015e34:	9301      	str	r3, [sp, #4]
 8015e36:	f7fa fa0b 	bl	8010250 <_sbrk_r>
 8015e3a:	1c43      	adds	r3, r0, #1
 8015e3c:	9b01      	ldr	r3, [sp, #4]
 8015e3e:	f000 812c 	beq.w	801609a <_malloc_r+0x4da>
 8015e42:	ebc9 0200 	rsb	r2, r9, r0
 8015e46:	4452      	add	r2, sl
 8015e48:	f042 0201 	orr.w	r2, r2, #1
 8015e4c:	6819      	ldr	r1, [r3, #0]
 8015e4e:	f8c7 9008 	str.w	r9, [r7, #8]
 8015e52:	4451      	add	r1, sl
 8015e54:	42bc      	cmp	r4, r7
 8015e56:	f8c9 2004 	str.w	r2, [r9, #4]
 8015e5a:	6019      	str	r1, [r3, #0]
 8015e5c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8015efc <_malloc_r+0x33c>
 8015e60:	d016      	beq.n	8015e90 <_malloc_r+0x2d0>
 8015e62:	f1b8 0f0f 	cmp.w	r8, #15
 8015e66:	f240 80ee 	bls.w	8016046 <_malloc_r+0x486>
 8015e6a:	6862      	ldr	r2, [r4, #4]
 8015e6c:	f1a8 030c 	sub.w	r3, r8, #12
 8015e70:	f023 0307 	bic.w	r3, r3, #7
 8015e74:	18e0      	adds	r0, r4, r3
 8015e76:	f002 0201 	and.w	r2, r2, #1
 8015e7a:	f04f 0e05 	mov.w	lr, #5
 8015e7e:	431a      	orrs	r2, r3
 8015e80:	2b0f      	cmp	r3, #15
 8015e82:	6062      	str	r2, [r4, #4]
 8015e84:	f8c0 e004 	str.w	lr, [r0, #4]
 8015e88:	f8c0 e008 	str.w	lr, [r0, #8]
 8015e8c:	f200 8109 	bhi.w	80160a2 <_malloc_r+0x4e2>
 8015e90:	4b1b      	ldr	r3, [pc, #108]	; (8015f00 <_malloc_r+0x340>)
 8015e92:	68bc      	ldr	r4, [r7, #8]
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	4291      	cmp	r1, r2
 8015e98:	bf88      	it	hi
 8015e9a:	6019      	strhi	r1, [r3, #0]
 8015e9c:	4b19      	ldr	r3, [pc, #100]	; (8015f04 <_malloc_r+0x344>)
 8015e9e:	681a      	ldr	r2, [r3, #0]
 8015ea0:	4291      	cmp	r1, r2
 8015ea2:	6862      	ldr	r2, [r4, #4]
 8015ea4:	bf88      	it	hi
 8015ea6:	6019      	strhi	r1, [r3, #0]
 8015ea8:	f022 0203 	bic.w	r2, r2, #3
 8015eac:	4295      	cmp	r5, r2
 8015eae:	eba2 0305 	sub.w	r3, r2, r5
 8015eb2:	d801      	bhi.n	8015eb8 <_malloc_r+0x2f8>
 8015eb4:	2b0f      	cmp	r3, #15
 8015eb6:	dc04      	bgt.n	8015ec2 <_malloc_r+0x302>
 8015eb8:	4630      	mov	r0, r6
 8015eba:	f000 f971 	bl	80161a0 <__malloc_unlock>
 8015ebe:	2400      	movs	r4, #0
 8015ec0:	e6aa      	b.n	8015c18 <_malloc_r+0x58>
 8015ec2:	1962      	adds	r2, r4, r5
 8015ec4:	f043 0301 	orr.w	r3, r3, #1
 8015ec8:	f045 0501 	orr.w	r5, r5, #1
 8015ecc:	6065      	str	r5, [r4, #4]
 8015ece:	4630      	mov	r0, r6
 8015ed0:	60ba      	str	r2, [r7, #8]
 8015ed2:	6053      	str	r3, [r2, #4]
 8015ed4:	f000 f964 	bl	80161a0 <__malloc_unlock>
 8015ed8:	3408      	adds	r4, #8
 8015eda:	4620      	mov	r0, r4
 8015edc:	b003      	add	sp, #12
 8015ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ee2:	2814      	cmp	r0, #20
 8015ee4:	d968      	bls.n	8015fb8 <_malloc_r+0x3f8>
 8015ee6:	2854      	cmp	r0, #84	; 0x54
 8015ee8:	f200 8097 	bhi.w	801601a <_malloc_r+0x45a>
 8015eec:	0b28      	lsrs	r0, r5, #12
 8015eee:	306e      	adds	r0, #110	; 0x6e
 8015ef0:	0041      	lsls	r1, r0, #1
 8015ef2:	e6a5      	b.n	8015c40 <_malloc_r+0x80>
 8015ef4:	20000c7c 	.word	0x20000c7c
 8015ef8:	20002f18 	.word	0x20002f18
 8015efc:	20002f1c 	.word	0x20002f1c
 8015f00:	20002f14 	.word	0x20002f14
 8015f04:	20002f10 	.word	0x20002f10
 8015f08:	20001088 	.word	0x20001088
 8015f0c:	0a5a      	lsrs	r2, r3, #9
 8015f0e:	2a04      	cmp	r2, #4
 8015f10:	d955      	bls.n	8015fbe <_malloc_r+0x3fe>
 8015f12:	2a14      	cmp	r2, #20
 8015f14:	f200 80a7 	bhi.w	8016066 <_malloc_r+0x4a6>
 8015f18:	325b      	adds	r2, #91	; 0x5b
 8015f1a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8015f1e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8015f22:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80160e0 <_malloc_r+0x520>
 8015f26:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8015f2a:	4561      	cmp	r1, ip
 8015f2c:	d07f      	beq.n	801602e <_malloc_r+0x46e>
 8015f2e:	684a      	ldr	r2, [r1, #4]
 8015f30:	f022 0203 	bic.w	r2, r2, #3
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d202      	bcs.n	8015f3e <_malloc_r+0x37e>
 8015f38:	6889      	ldr	r1, [r1, #8]
 8015f3a:	458c      	cmp	ip, r1
 8015f3c:	d1f7      	bne.n	8015f2e <_malloc_r+0x36e>
 8015f3e:	68ca      	ldr	r2, [r1, #12]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	60e2      	str	r2, [r4, #12]
 8015f44:	60a1      	str	r1, [r4, #8]
 8015f46:	6094      	str	r4, [r2, #8]
 8015f48:	60cc      	str	r4, [r1, #12]
 8015f4a:	e6bb      	b.n	8015cc4 <_malloc_r+0x104>
 8015f4c:	1963      	adds	r3, r4, r5
 8015f4e:	f042 0701 	orr.w	r7, r2, #1
 8015f52:	f045 0501 	orr.w	r5, r5, #1
 8015f56:	6065      	str	r5, [r4, #4]
 8015f58:	4630      	mov	r0, r6
 8015f5a:	614b      	str	r3, [r1, #20]
 8015f5c:	610b      	str	r3, [r1, #16]
 8015f5e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8015f62:	f8c3 e008 	str.w	lr, [r3, #8]
 8015f66:	605f      	str	r7, [r3, #4]
 8015f68:	509a      	str	r2, [r3, r2]
 8015f6a:	3408      	adds	r4, #8
 8015f6c:	f000 f918 	bl	80161a0 <__malloc_unlock>
 8015f70:	e652      	b.n	8015c18 <_malloc_r+0x58>
 8015f72:	684b      	ldr	r3, [r1, #4]
 8015f74:	e6a6      	b.n	8015cc4 <_malloc_r+0x104>
 8015f76:	f109 0901 	add.w	r9, r9, #1
 8015f7a:	f019 0f03 	tst.w	r9, #3
 8015f7e:	f10c 0c08 	add.w	ip, ip, #8
 8015f82:	f47f aeb1 	bne.w	8015ce8 <_malloc_r+0x128>
 8015f86:	e02c      	b.n	8015fe2 <_malloc_r+0x422>
 8015f88:	f104 0308 	add.w	r3, r4, #8
 8015f8c:	6964      	ldr	r4, [r4, #20]
 8015f8e:	42a3      	cmp	r3, r4
 8015f90:	bf08      	it	eq
 8015f92:	3002      	addeq	r0, #2
 8015f94:	f43f ae69 	beq.w	8015c6a <_malloc_r+0xaa>
 8015f98:	e62e      	b.n	8015bf8 <_malloc_r+0x38>
 8015f9a:	441a      	add	r2, r3
 8015f9c:	461c      	mov	r4, r3
 8015f9e:	6851      	ldr	r1, [r2, #4]
 8015fa0:	68db      	ldr	r3, [r3, #12]
 8015fa2:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8015fa6:	f041 0101 	orr.w	r1, r1, #1
 8015faa:	6051      	str	r1, [r2, #4]
 8015fac:	4630      	mov	r0, r6
 8015fae:	60eb      	str	r3, [r5, #12]
 8015fb0:	609d      	str	r5, [r3, #8]
 8015fb2:	f000 f8f5 	bl	80161a0 <__malloc_unlock>
 8015fb6:	e62f      	b.n	8015c18 <_malloc_r+0x58>
 8015fb8:	305b      	adds	r0, #91	; 0x5b
 8015fba:	0041      	lsls	r1, r0, #1
 8015fbc:	e640      	b.n	8015c40 <_malloc_r+0x80>
 8015fbe:	099a      	lsrs	r2, r3, #6
 8015fc0:	3238      	adds	r2, #56	; 0x38
 8015fc2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8015fc6:	e7aa      	b.n	8015f1e <_malloc_r+0x35e>
 8015fc8:	42bc      	cmp	r4, r7
 8015fca:	4b45      	ldr	r3, [pc, #276]	; (80160e0 <_malloc_r+0x520>)
 8015fcc:	f43f af0e 	beq.w	8015dec <_malloc_r+0x22c>
 8015fd0:	689c      	ldr	r4, [r3, #8]
 8015fd2:	6862      	ldr	r2, [r4, #4]
 8015fd4:	f022 0203 	bic.w	r2, r2, #3
 8015fd8:	e768      	b.n	8015eac <_malloc_r+0x2ec>
 8015fda:	f8d8 8000 	ldr.w	r8, [r8]
 8015fde:	4598      	cmp	r8, r3
 8015fe0:	d17c      	bne.n	80160dc <_malloc_r+0x51c>
 8015fe2:	f010 0f03 	tst.w	r0, #3
 8015fe6:	f1a8 0308 	sub.w	r3, r8, #8
 8015fea:	f100 30ff 	add.w	r0, r0, #4294967295
 8015fee:	d1f4      	bne.n	8015fda <_malloc_r+0x41a>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	ea23 0304 	bic.w	r3, r3, r4
 8015ff6:	607b      	str	r3, [r7, #4]
 8015ff8:	0064      	lsls	r4, r4, #1
 8015ffa:	429c      	cmp	r4, r3
 8015ffc:	f63f aeca 	bhi.w	8015d94 <_malloc_r+0x1d4>
 8016000:	2c00      	cmp	r4, #0
 8016002:	f43f aec7 	beq.w	8015d94 <_malloc_r+0x1d4>
 8016006:	4223      	tst	r3, r4
 8016008:	4648      	mov	r0, r9
 801600a:	f47f ae69 	bne.w	8015ce0 <_malloc_r+0x120>
 801600e:	0064      	lsls	r4, r4, #1
 8016010:	4223      	tst	r3, r4
 8016012:	f100 0004 	add.w	r0, r0, #4
 8016016:	d0fa      	beq.n	801600e <_malloc_r+0x44e>
 8016018:	e662      	b.n	8015ce0 <_malloc_r+0x120>
 801601a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 801601e:	d818      	bhi.n	8016052 <_malloc_r+0x492>
 8016020:	0be8      	lsrs	r0, r5, #15
 8016022:	3077      	adds	r0, #119	; 0x77
 8016024:	0041      	lsls	r1, r0, #1
 8016026:	e60b      	b.n	8015c40 <_malloc_r+0x80>
 8016028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801602c:	e6fb      	b.n	8015e26 <_malloc_r+0x266>
 801602e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016032:	1092      	asrs	r2, r2, #2
 8016034:	f04f 0c01 	mov.w	ip, #1
 8016038:	fa0c f202 	lsl.w	r2, ip, r2
 801603c:	4313      	orrs	r3, r2
 801603e:	f8c8 3004 	str.w	r3, [r8, #4]
 8016042:	460a      	mov	r2, r1
 8016044:	e77d      	b.n	8015f42 <_malloc_r+0x382>
 8016046:	2301      	movs	r3, #1
 8016048:	f8c9 3004 	str.w	r3, [r9, #4]
 801604c:	464c      	mov	r4, r9
 801604e:	2200      	movs	r2, #0
 8016050:	e72c      	b.n	8015eac <_malloc_r+0x2ec>
 8016052:	f240 5354 	movw	r3, #1364	; 0x554
 8016056:	4298      	cmp	r0, r3
 8016058:	d81c      	bhi.n	8016094 <_malloc_r+0x4d4>
 801605a:	0ca8      	lsrs	r0, r5, #18
 801605c:	307c      	adds	r0, #124	; 0x7c
 801605e:	0041      	lsls	r1, r0, #1
 8016060:	e5ee      	b.n	8015c40 <_malloc_r+0x80>
 8016062:	3210      	adds	r2, #16
 8016064:	e6b4      	b.n	8015dd0 <_malloc_r+0x210>
 8016066:	2a54      	cmp	r2, #84	; 0x54
 8016068:	d823      	bhi.n	80160b2 <_malloc_r+0x4f2>
 801606a:	0b1a      	lsrs	r2, r3, #12
 801606c:	326e      	adds	r2, #110	; 0x6e
 801606e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8016072:	e754      	b.n	8015f1e <_malloc_r+0x35e>
 8016074:	68bc      	ldr	r4, [r7, #8]
 8016076:	6862      	ldr	r2, [r4, #4]
 8016078:	f022 0203 	bic.w	r2, r2, #3
 801607c:	e716      	b.n	8015eac <_malloc_r+0x2ec>
 801607e:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8016082:	2800      	cmp	r0, #0
 8016084:	f47f aeb9 	bne.w	8015dfa <_malloc_r+0x23a>
 8016088:	4442      	add	r2, r8
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	f042 0201 	orr.w	r2, r2, #1
 8016090:	605a      	str	r2, [r3, #4]
 8016092:	e6fd      	b.n	8015e90 <_malloc_r+0x2d0>
 8016094:	21fc      	movs	r1, #252	; 0xfc
 8016096:	207e      	movs	r0, #126	; 0x7e
 8016098:	e5d2      	b.n	8015c40 <_malloc_r+0x80>
 801609a:	2201      	movs	r2, #1
 801609c:	f04f 0a00 	mov.w	sl, #0
 80160a0:	e6d4      	b.n	8015e4c <_malloc_r+0x28c>
 80160a2:	f104 0108 	add.w	r1, r4, #8
 80160a6:	4630      	mov	r0, r6
 80160a8:	f000 fd0a 	bl	8016ac0 <_free_r>
 80160ac:	f8da 1000 	ldr.w	r1, [sl]
 80160b0:	e6ee      	b.n	8015e90 <_malloc_r+0x2d0>
 80160b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80160b6:	d804      	bhi.n	80160c2 <_malloc_r+0x502>
 80160b8:	0bda      	lsrs	r2, r3, #15
 80160ba:	3277      	adds	r2, #119	; 0x77
 80160bc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80160c0:	e72d      	b.n	8015f1e <_malloc_r+0x35e>
 80160c2:	f240 5154 	movw	r1, #1364	; 0x554
 80160c6:	428a      	cmp	r2, r1
 80160c8:	d804      	bhi.n	80160d4 <_malloc_r+0x514>
 80160ca:	0c9a      	lsrs	r2, r3, #18
 80160cc:	327c      	adds	r2, #124	; 0x7c
 80160ce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80160d2:	e724      	b.n	8015f1e <_malloc_r+0x35e>
 80160d4:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 80160d8:	227e      	movs	r2, #126	; 0x7e
 80160da:	e720      	b.n	8015f1e <_malloc_r+0x35e>
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	e78b      	b.n	8015ff8 <_malloc_r+0x438>
 80160e0:	20000c7c 	.word	0x20000c7c
	...

080160f0 <memchr>:
 80160f0:	0783      	lsls	r3, r0, #30
 80160f2:	b470      	push	{r4, r5, r6}
 80160f4:	b2c9      	uxtb	r1, r1
 80160f6:	d040      	beq.n	801617a <memchr+0x8a>
 80160f8:	1e54      	subs	r4, r2, #1
 80160fa:	2a00      	cmp	r2, #0
 80160fc:	d03f      	beq.n	801617e <memchr+0x8e>
 80160fe:	7803      	ldrb	r3, [r0, #0]
 8016100:	428b      	cmp	r3, r1
 8016102:	bf18      	it	ne
 8016104:	1c43      	addne	r3, r0, #1
 8016106:	d106      	bne.n	8016116 <memchr+0x26>
 8016108:	e01d      	b.n	8016146 <memchr+0x56>
 801610a:	b1f4      	cbz	r4, 801614a <memchr+0x5a>
 801610c:	7802      	ldrb	r2, [r0, #0]
 801610e:	428a      	cmp	r2, r1
 8016110:	f104 34ff 	add.w	r4, r4, #4294967295
 8016114:	d017      	beq.n	8016146 <memchr+0x56>
 8016116:	f013 0f03 	tst.w	r3, #3
 801611a:	4618      	mov	r0, r3
 801611c:	f103 0301 	add.w	r3, r3, #1
 8016120:	d1f3      	bne.n	801610a <memchr+0x1a>
 8016122:	2c03      	cmp	r4, #3
 8016124:	d814      	bhi.n	8016150 <memchr+0x60>
 8016126:	b184      	cbz	r4, 801614a <memchr+0x5a>
 8016128:	7803      	ldrb	r3, [r0, #0]
 801612a:	428b      	cmp	r3, r1
 801612c:	d00b      	beq.n	8016146 <memchr+0x56>
 801612e:	1905      	adds	r5, r0, r4
 8016130:	1c43      	adds	r3, r0, #1
 8016132:	e002      	b.n	801613a <memchr+0x4a>
 8016134:	7802      	ldrb	r2, [r0, #0]
 8016136:	428a      	cmp	r2, r1
 8016138:	d005      	beq.n	8016146 <memchr+0x56>
 801613a:	42ab      	cmp	r3, r5
 801613c:	4618      	mov	r0, r3
 801613e:	f103 0301 	add.w	r3, r3, #1
 8016142:	d1f7      	bne.n	8016134 <memchr+0x44>
 8016144:	2000      	movs	r0, #0
 8016146:	bc70      	pop	{r4, r5, r6}
 8016148:	4770      	bx	lr
 801614a:	4620      	mov	r0, r4
 801614c:	bc70      	pop	{r4, r5, r6}
 801614e:	4770      	bx	lr
 8016150:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8016154:	4602      	mov	r2, r0
 8016156:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 801615a:	4610      	mov	r0, r2
 801615c:	3204      	adds	r2, #4
 801615e:	6803      	ldr	r3, [r0, #0]
 8016160:	4073      	eors	r3, r6
 8016162:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8016166:	ea25 0303 	bic.w	r3, r5, r3
 801616a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801616e:	d1da      	bne.n	8016126 <memchr+0x36>
 8016170:	3c04      	subs	r4, #4
 8016172:	2c03      	cmp	r4, #3
 8016174:	4610      	mov	r0, r2
 8016176:	d8f0      	bhi.n	801615a <memchr+0x6a>
 8016178:	e7d5      	b.n	8016126 <memchr+0x36>
 801617a:	4614      	mov	r4, r2
 801617c:	e7d1      	b.n	8016122 <memchr+0x32>
 801617e:	4610      	mov	r0, r2
 8016180:	e7e1      	b.n	8016146 <memchr+0x56>
 8016182:	bf00      	nop
	...

08016190 <__malloc_lock>:
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop
	...

080161a0 <__malloc_unlock>:
 80161a0:	4770      	bx	lr
 80161a2:	bf00      	nop
	...

080161b0 <_Balloc>:
 80161b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80161b2:	b570      	push	{r4, r5, r6, lr}
 80161b4:	4605      	mov	r5, r0
 80161b6:	460c      	mov	r4, r1
 80161b8:	b14b      	cbz	r3, 80161ce <_Balloc+0x1e>
 80161ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80161be:	b180      	cbz	r0, 80161e2 <_Balloc+0x32>
 80161c0:	6802      	ldr	r2, [r0, #0]
 80161c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80161c6:	2300      	movs	r3, #0
 80161c8:	6103      	str	r3, [r0, #16]
 80161ca:	60c3      	str	r3, [r0, #12]
 80161cc:	bd70      	pop	{r4, r5, r6, pc}
 80161ce:	2104      	movs	r1, #4
 80161d0:	2221      	movs	r2, #33	; 0x21
 80161d2:	f000 fbf5 	bl	80169c0 <_calloc_r>
 80161d6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80161d8:	4603      	mov	r3, r0
 80161da:	2800      	cmp	r0, #0
 80161dc:	d1ed      	bne.n	80161ba <_Balloc+0xa>
 80161de:	2000      	movs	r0, #0
 80161e0:	bd70      	pop	{r4, r5, r6, pc}
 80161e2:	2101      	movs	r1, #1
 80161e4:	fa01 f604 	lsl.w	r6, r1, r4
 80161e8:	1d72      	adds	r2, r6, #5
 80161ea:	4628      	mov	r0, r5
 80161ec:	0092      	lsls	r2, r2, #2
 80161ee:	f000 fbe7 	bl	80169c0 <_calloc_r>
 80161f2:	2800      	cmp	r0, #0
 80161f4:	d0f3      	beq.n	80161de <_Balloc+0x2e>
 80161f6:	6044      	str	r4, [r0, #4]
 80161f8:	6086      	str	r6, [r0, #8]
 80161fa:	e7e4      	b.n	80161c6 <_Balloc+0x16>
 80161fc:	0000      	movs	r0, r0
	...

08016200 <_Bfree>:
 8016200:	b131      	cbz	r1, 8016210 <_Bfree+0x10>
 8016202:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016204:	684a      	ldr	r2, [r1, #4]
 8016206:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801620a:	6008      	str	r0, [r1, #0]
 801620c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016210:	4770      	bx	lr
 8016212:	bf00      	nop
	...

08016220 <__multadd>:
 8016220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016222:	690c      	ldr	r4, [r1, #16]
 8016224:	b083      	sub	sp, #12
 8016226:	460d      	mov	r5, r1
 8016228:	4606      	mov	r6, r0
 801622a:	f101 0e14 	add.w	lr, r1, #20
 801622e:	2700      	movs	r7, #0
 8016230:	f8de 1000 	ldr.w	r1, [lr]
 8016234:	b288      	uxth	r0, r1
 8016236:	0c09      	lsrs	r1, r1, #16
 8016238:	fb02 3300 	mla	r3, r2, r0, r3
 801623c:	fb02 f101 	mul.w	r1, r2, r1
 8016240:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8016244:	3701      	adds	r7, #1
 8016246:	b29b      	uxth	r3, r3
 8016248:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801624c:	42bc      	cmp	r4, r7
 801624e:	f84e 3b04 	str.w	r3, [lr], #4
 8016252:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8016256:	dceb      	bgt.n	8016230 <__multadd+0x10>
 8016258:	b13b      	cbz	r3, 801626a <__multadd+0x4a>
 801625a:	68aa      	ldr	r2, [r5, #8]
 801625c:	4294      	cmp	r4, r2
 801625e:	da07      	bge.n	8016270 <__multadd+0x50>
 8016260:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8016264:	3401      	adds	r4, #1
 8016266:	6153      	str	r3, [r2, #20]
 8016268:	612c      	str	r4, [r5, #16]
 801626a:	4628      	mov	r0, r5
 801626c:	b003      	add	sp, #12
 801626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016270:	6869      	ldr	r1, [r5, #4]
 8016272:	9301      	str	r3, [sp, #4]
 8016274:	3101      	adds	r1, #1
 8016276:	4630      	mov	r0, r6
 8016278:	f7ff ff9a 	bl	80161b0 <_Balloc>
 801627c:	692a      	ldr	r2, [r5, #16]
 801627e:	3202      	adds	r2, #2
 8016280:	f105 010c 	add.w	r1, r5, #12
 8016284:	4607      	mov	r7, r0
 8016286:	0092      	lsls	r2, r2, #2
 8016288:	300c      	adds	r0, #12
 801628a:	f7f6 fba1 	bl	800c9d0 <memcpy>
 801628e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8016290:	6869      	ldr	r1, [r5, #4]
 8016292:	9b01      	ldr	r3, [sp, #4]
 8016294:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8016298:	6028      	str	r0, [r5, #0]
 801629a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 801629e:	463d      	mov	r5, r7
 80162a0:	e7de      	b.n	8016260 <__multadd+0x40>
 80162a2:	bf00      	nop
	...

080162b0 <__hi0bits>:
 80162b0:	0c03      	lsrs	r3, r0, #16
 80162b2:	041b      	lsls	r3, r3, #16
 80162b4:	b9b3      	cbnz	r3, 80162e4 <__hi0bits+0x34>
 80162b6:	0400      	lsls	r0, r0, #16
 80162b8:	2310      	movs	r3, #16
 80162ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80162be:	bf04      	itt	eq
 80162c0:	0200      	lsleq	r0, r0, #8
 80162c2:	3308      	addeq	r3, #8
 80162c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80162c8:	bf04      	itt	eq
 80162ca:	0100      	lsleq	r0, r0, #4
 80162cc:	3304      	addeq	r3, #4
 80162ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80162d2:	bf04      	itt	eq
 80162d4:	0080      	lsleq	r0, r0, #2
 80162d6:	3302      	addeq	r3, #2
 80162d8:	2800      	cmp	r0, #0
 80162da:	db07      	blt.n	80162ec <__hi0bits+0x3c>
 80162dc:	0042      	lsls	r2, r0, #1
 80162de:	d403      	bmi.n	80162e8 <__hi0bits+0x38>
 80162e0:	2020      	movs	r0, #32
 80162e2:	4770      	bx	lr
 80162e4:	2300      	movs	r3, #0
 80162e6:	e7e8      	b.n	80162ba <__hi0bits+0xa>
 80162e8:	1c58      	adds	r0, r3, #1
 80162ea:	4770      	bx	lr
 80162ec:	4618      	mov	r0, r3
 80162ee:	4770      	bx	lr

080162f0 <__lo0bits>:
 80162f0:	6803      	ldr	r3, [r0, #0]
 80162f2:	f013 0207 	ands.w	r2, r3, #7
 80162f6:	d007      	beq.n	8016308 <__lo0bits+0x18>
 80162f8:	07d9      	lsls	r1, r3, #31
 80162fa:	d420      	bmi.n	801633e <__lo0bits+0x4e>
 80162fc:	079a      	lsls	r2, r3, #30
 80162fe:	d420      	bmi.n	8016342 <__lo0bits+0x52>
 8016300:	089b      	lsrs	r3, r3, #2
 8016302:	6003      	str	r3, [r0, #0]
 8016304:	2002      	movs	r0, #2
 8016306:	4770      	bx	lr
 8016308:	b299      	uxth	r1, r3
 801630a:	b909      	cbnz	r1, 8016310 <__lo0bits+0x20>
 801630c:	0c1b      	lsrs	r3, r3, #16
 801630e:	2210      	movs	r2, #16
 8016310:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016314:	bf04      	itt	eq
 8016316:	0a1b      	lsreq	r3, r3, #8
 8016318:	3208      	addeq	r2, #8
 801631a:	0719      	lsls	r1, r3, #28
 801631c:	bf04      	itt	eq
 801631e:	091b      	lsreq	r3, r3, #4
 8016320:	3204      	addeq	r2, #4
 8016322:	0799      	lsls	r1, r3, #30
 8016324:	bf04      	itt	eq
 8016326:	089b      	lsreq	r3, r3, #2
 8016328:	3202      	addeq	r2, #2
 801632a:	07d9      	lsls	r1, r3, #31
 801632c:	d404      	bmi.n	8016338 <__lo0bits+0x48>
 801632e:	085b      	lsrs	r3, r3, #1
 8016330:	d101      	bne.n	8016336 <__lo0bits+0x46>
 8016332:	2020      	movs	r0, #32
 8016334:	4770      	bx	lr
 8016336:	3201      	adds	r2, #1
 8016338:	6003      	str	r3, [r0, #0]
 801633a:	4610      	mov	r0, r2
 801633c:	4770      	bx	lr
 801633e:	2000      	movs	r0, #0
 8016340:	4770      	bx	lr
 8016342:	085b      	lsrs	r3, r3, #1
 8016344:	6003      	str	r3, [r0, #0]
 8016346:	2001      	movs	r0, #1
 8016348:	4770      	bx	lr
 801634a:	bf00      	nop
 801634c:	0000      	movs	r0, r0
	...

08016350 <__i2b>:
 8016350:	b510      	push	{r4, lr}
 8016352:	460c      	mov	r4, r1
 8016354:	2101      	movs	r1, #1
 8016356:	f7ff ff2b 	bl	80161b0 <_Balloc>
 801635a:	2201      	movs	r2, #1
 801635c:	6144      	str	r4, [r0, #20]
 801635e:	6102      	str	r2, [r0, #16]
 8016360:	bd10      	pop	{r4, pc}
 8016362:	bf00      	nop
	...

08016370 <__multiply>:
 8016370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016374:	690f      	ldr	r7, [r1, #16]
 8016376:	6916      	ldr	r6, [r2, #16]
 8016378:	42b7      	cmp	r7, r6
 801637a:	b083      	sub	sp, #12
 801637c:	460d      	mov	r5, r1
 801637e:	4614      	mov	r4, r2
 8016380:	f2c0 808d 	blt.w	801649e <__multiply+0x12e>
 8016384:	4633      	mov	r3, r6
 8016386:	463e      	mov	r6, r7
 8016388:	461f      	mov	r7, r3
 801638a:	68ab      	ldr	r3, [r5, #8]
 801638c:	6869      	ldr	r1, [r5, #4]
 801638e:	eb06 0807 	add.w	r8, r6, r7
 8016392:	4598      	cmp	r8, r3
 8016394:	bfc8      	it	gt
 8016396:	3101      	addgt	r1, #1
 8016398:	f7ff ff0a 	bl	80161b0 <_Balloc>
 801639c:	f100 0c14 	add.w	ip, r0, #20
 80163a0:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80163a4:	45cc      	cmp	ip, r9
 80163a6:	9000      	str	r0, [sp, #0]
 80163a8:	d205      	bcs.n	80163b6 <__multiply+0x46>
 80163aa:	4663      	mov	r3, ip
 80163ac:	2100      	movs	r1, #0
 80163ae:	f843 1b04 	str.w	r1, [r3], #4
 80163b2:	4599      	cmp	r9, r3
 80163b4:	d8fb      	bhi.n	80163ae <__multiply+0x3e>
 80163b6:	f104 0214 	add.w	r2, r4, #20
 80163ba:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80163be:	f105 0314 	add.w	r3, r5, #20
 80163c2:	4552      	cmp	r2, sl
 80163c4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80163c8:	d254      	bcs.n	8016474 <__multiply+0x104>
 80163ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80163ce:	4699      	mov	r9, r3
 80163d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80163d4:	fa1f fb83 	uxth.w	fp, r3
 80163d8:	f1bb 0f00 	cmp.w	fp, #0
 80163dc:	d020      	beq.n	8016420 <__multiply+0xb0>
 80163de:	2000      	movs	r0, #0
 80163e0:	464f      	mov	r7, r9
 80163e2:	4666      	mov	r6, ip
 80163e4:	4605      	mov	r5, r0
 80163e6:	e000      	b.n	80163ea <__multiply+0x7a>
 80163e8:	461e      	mov	r6, r3
 80163ea:	f857 4b04 	ldr.w	r4, [r7], #4
 80163ee:	6830      	ldr	r0, [r6, #0]
 80163f0:	b2a1      	uxth	r1, r4
 80163f2:	b283      	uxth	r3, r0
 80163f4:	fb0b 3101 	mla	r1, fp, r1, r3
 80163f8:	0c24      	lsrs	r4, r4, #16
 80163fa:	0c00      	lsrs	r0, r0, #16
 80163fc:	194b      	adds	r3, r1, r5
 80163fe:	fb0b 0004 	mla	r0, fp, r4, r0
 8016402:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8016406:	b299      	uxth	r1, r3
 8016408:	4633      	mov	r3, r6
 801640a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801640e:	45be      	cmp	lr, r7
 8016410:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8016414:	f843 1b04 	str.w	r1, [r3], #4
 8016418:	d8e6      	bhi.n	80163e8 <__multiply+0x78>
 801641a:	6075      	str	r5, [r6, #4]
 801641c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8016420:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8016424:	d020      	beq.n	8016468 <__multiply+0xf8>
 8016426:	f8dc 3000 	ldr.w	r3, [ip]
 801642a:	4667      	mov	r7, ip
 801642c:	4618      	mov	r0, r3
 801642e:	464d      	mov	r5, r9
 8016430:	2100      	movs	r1, #0
 8016432:	e000      	b.n	8016436 <__multiply+0xc6>
 8016434:	4637      	mov	r7, r6
 8016436:	882c      	ldrh	r4, [r5, #0]
 8016438:	0c00      	lsrs	r0, r0, #16
 801643a:	fb0b 0004 	mla	r0, fp, r4, r0
 801643e:	4401      	add	r1, r0
 8016440:	b29c      	uxth	r4, r3
 8016442:	463e      	mov	r6, r7
 8016444:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8016448:	f846 3b04 	str.w	r3, [r6], #4
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f855 4b04 	ldr.w	r4, [r5], #4
 8016452:	b283      	uxth	r3, r0
 8016454:	0c24      	lsrs	r4, r4, #16
 8016456:	fb0b 3404 	mla	r4, fp, r4, r3
 801645a:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 801645e:	45ae      	cmp	lr, r5
 8016460:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8016464:	d8e6      	bhi.n	8016434 <__multiply+0xc4>
 8016466:	607b      	str	r3, [r7, #4]
 8016468:	4592      	cmp	sl, r2
 801646a:	f10c 0c04 	add.w	ip, ip, #4
 801646e:	d8af      	bhi.n	80163d0 <__multiply+0x60>
 8016470:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016474:	f1b8 0f00 	cmp.w	r8, #0
 8016478:	dd0b      	ble.n	8016492 <__multiply+0x122>
 801647a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801647e:	f1a9 0904 	sub.w	r9, r9, #4
 8016482:	b11b      	cbz	r3, 801648c <__multiply+0x11c>
 8016484:	e005      	b.n	8016492 <__multiply+0x122>
 8016486:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801648a:	b913      	cbnz	r3, 8016492 <__multiply+0x122>
 801648c:	f1b8 0801 	subs.w	r8, r8, #1
 8016490:	d1f9      	bne.n	8016486 <__multiply+0x116>
 8016492:	9800      	ldr	r0, [sp, #0]
 8016494:	f8c0 8010 	str.w	r8, [r0, #16]
 8016498:	b003      	add	sp, #12
 801649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801649e:	4615      	mov	r5, r2
 80164a0:	460c      	mov	r4, r1
 80164a2:	e772      	b.n	801638a <__multiply+0x1a>
	...

080164b0 <__pow5mult>:
 80164b0:	f012 0303 	ands.w	r3, r2, #3
 80164b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b8:	4614      	mov	r4, r2
 80164ba:	4607      	mov	r7, r0
 80164bc:	460e      	mov	r6, r1
 80164be:	d12d      	bne.n	801651c <__pow5mult+0x6c>
 80164c0:	10a4      	asrs	r4, r4, #2
 80164c2:	d01c      	beq.n	80164fe <__pow5mult+0x4e>
 80164c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80164c6:	b395      	cbz	r5, 801652e <__pow5mult+0x7e>
 80164c8:	07e3      	lsls	r3, r4, #31
 80164ca:	f04f 0800 	mov.w	r8, #0
 80164ce:	d406      	bmi.n	80164de <__pow5mult+0x2e>
 80164d0:	1064      	asrs	r4, r4, #1
 80164d2:	d014      	beq.n	80164fe <__pow5mult+0x4e>
 80164d4:	6828      	ldr	r0, [r5, #0]
 80164d6:	b1a8      	cbz	r0, 8016504 <__pow5mult+0x54>
 80164d8:	4605      	mov	r5, r0
 80164da:	07e3      	lsls	r3, r4, #31
 80164dc:	d5f8      	bpl.n	80164d0 <__pow5mult+0x20>
 80164de:	4638      	mov	r0, r7
 80164e0:	4631      	mov	r1, r6
 80164e2:	462a      	mov	r2, r5
 80164e4:	f7ff ff44 	bl	8016370 <__multiply>
 80164e8:	b1b6      	cbz	r6, 8016518 <__pow5mult+0x68>
 80164ea:	6872      	ldr	r2, [r6, #4]
 80164ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164ee:	1064      	asrs	r4, r4, #1
 80164f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164f4:	6031      	str	r1, [r6, #0]
 80164f6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80164fa:	4606      	mov	r6, r0
 80164fc:	d1ea      	bne.n	80164d4 <__pow5mult+0x24>
 80164fe:	4630      	mov	r0, r6
 8016500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016504:	4629      	mov	r1, r5
 8016506:	462a      	mov	r2, r5
 8016508:	4638      	mov	r0, r7
 801650a:	f7ff ff31 	bl	8016370 <__multiply>
 801650e:	6028      	str	r0, [r5, #0]
 8016510:	f8c0 8000 	str.w	r8, [r0]
 8016514:	4605      	mov	r5, r0
 8016516:	e7e0      	b.n	80164da <__pow5mult+0x2a>
 8016518:	4606      	mov	r6, r0
 801651a:	e7d9      	b.n	80164d0 <__pow5mult+0x20>
 801651c:	1e5a      	subs	r2, r3, #1
 801651e:	4d0b      	ldr	r5, [pc, #44]	; (801654c <__pow5mult+0x9c>)
 8016520:	2300      	movs	r3, #0
 8016522:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8016526:	f7ff fe7b 	bl	8016220 <__multadd>
 801652a:	4606      	mov	r6, r0
 801652c:	e7c8      	b.n	80164c0 <__pow5mult+0x10>
 801652e:	2101      	movs	r1, #1
 8016530:	4638      	mov	r0, r7
 8016532:	f7ff fe3d 	bl	80161b0 <_Balloc>
 8016536:	f240 2171 	movw	r1, #625	; 0x271
 801653a:	2201      	movs	r2, #1
 801653c:	2300      	movs	r3, #0
 801653e:	6141      	str	r1, [r0, #20]
 8016540:	6102      	str	r2, [r0, #16]
 8016542:	4605      	mov	r5, r0
 8016544:	64b8      	str	r0, [r7, #72]	; 0x48
 8016546:	6003      	str	r3, [r0, #0]
 8016548:	e7be      	b.n	80164c8 <__pow5mult+0x18>
 801654a:	bf00      	nop
 801654c:	08017b70 	.word	0x08017b70

08016550 <__lshift>:
 8016550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016554:	690f      	ldr	r7, [r1, #16]
 8016556:	688b      	ldr	r3, [r1, #8]
 8016558:	ea4f 1962 	mov.w	r9, r2, asr #5
 801655c:	444f      	add	r7, r9
 801655e:	1c7d      	adds	r5, r7, #1
 8016560:	429d      	cmp	r5, r3
 8016562:	460e      	mov	r6, r1
 8016564:	4614      	mov	r4, r2
 8016566:	6849      	ldr	r1, [r1, #4]
 8016568:	4680      	mov	r8, r0
 801656a:	dd04      	ble.n	8016576 <__lshift+0x26>
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	429d      	cmp	r5, r3
 8016570:	f101 0101 	add.w	r1, r1, #1
 8016574:	dcfa      	bgt.n	801656c <__lshift+0x1c>
 8016576:	4640      	mov	r0, r8
 8016578:	f7ff fe1a 	bl	80161b0 <_Balloc>
 801657c:	f1b9 0f00 	cmp.w	r9, #0
 8016580:	f100 0114 	add.w	r1, r0, #20
 8016584:	dd09      	ble.n	801659a <__lshift+0x4a>
 8016586:	2300      	movs	r3, #0
 8016588:	469e      	mov	lr, r3
 801658a:	460a      	mov	r2, r1
 801658c:	3301      	adds	r3, #1
 801658e:	454b      	cmp	r3, r9
 8016590:	f842 eb04 	str.w	lr, [r2], #4
 8016594:	d1fa      	bne.n	801658c <__lshift+0x3c>
 8016596:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801659a:	6932      	ldr	r2, [r6, #16]
 801659c:	f106 0314 	add.w	r3, r6, #20
 80165a0:	f014 0c1f 	ands.w	ip, r4, #31
 80165a4:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 80165a8:	d01f      	beq.n	80165ea <__lshift+0x9a>
 80165aa:	f1cc 0920 	rsb	r9, ip, #32
 80165ae:	2200      	movs	r2, #0
 80165b0:	681c      	ldr	r4, [r3, #0]
 80165b2:	fa04 f40c 	lsl.w	r4, r4, ip
 80165b6:	4314      	orrs	r4, r2
 80165b8:	468a      	mov	sl, r1
 80165ba:	f841 4b04 	str.w	r4, [r1], #4
 80165be:	f853 4b04 	ldr.w	r4, [r3], #4
 80165c2:	459e      	cmp	lr, r3
 80165c4:	fa24 f209 	lsr.w	r2, r4, r9
 80165c8:	d8f2      	bhi.n	80165b0 <__lshift+0x60>
 80165ca:	f8ca 2004 	str.w	r2, [sl, #4]
 80165ce:	b102      	cbz	r2, 80165d2 <__lshift+0x82>
 80165d0:	1cbd      	adds	r5, r7, #2
 80165d2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80165d6:	6872      	ldr	r2, [r6, #4]
 80165d8:	3d01      	subs	r5, #1
 80165da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165de:	6105      	str	r5, [r0, #16]
 80165e0:	6031      	str	r1, [r6, #0]
 80165e2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80165e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ea:	3904      	subs	r1, #4
 80165ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80165f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80165f4:	459e      	cmp	lr, r3
 80165f6:	d8f9      	bhi.n	80165ec <__lshift+0x9c>
 80165f8:	e7eb      	b.n	80165d2 <__lshift+0x82>
 80165fa:	bf00      	nop
 80165fc:	0000      	movs	r0, r0
	...

08016600 <__mcmp>:
 8016600:	6902      	ldr	r2, [r0, #16]
 8016602:	690b      	ldr	r3, [r1, #16]
 8016604:	1ad2      	subs	r2, r2, r3
 8016606:	d113      	bne.n	8016630 <__mcmp+0x30>
 8016608:	009b      	lsls	r3, r3, #2
 801660a:	3014      	adds	r0, #20
 801660c:	3114      	adds	r1, #20
 801660e:	4419      	add	r1, r3
 8016610:	b410      	push	{r4}
 8016612:	4403      	add	r3, r0
 8016614:	e001      	b.n	801661a <__mcmp+0x1a>
 8016616:	4298      	cmp	r0, r3
 8016618:	d20c      	bcs.n	8016634 <__mcmp+0x34>
 801661a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801661e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016622:	4294      	cmp	r4, r2
 8016624:	d0f7      	beq.n	8016616 <__mcmp+0x16>
 8016626:	d309      	bcc.n	801663c <__mcmp+0x3c>
 8016628:	2001      	movs	r0, #1
 801662a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801662e:	4770      	bx	lr
 8016630:	4610      	mov	r0, r2
 8016632:	4770      	bx	lr
 8016634:	2000      	movs	r0, #0
 8016636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801663a:	4770      	bx	lr
 801663c:	f04f 30ff 	mov.w	r0, #4294967295
 8016640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
	...

08016650 <__mdiff>:
 8016650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016654:	460e      	mov	r6, r1
 8016656:	4605      	mov	r5, r0
 8016658:	4611      	mov	r1, r2
 801665a:	4630      	mov	r0, r6
 801665c:	4614      	mov	r4, r2
 801665e:	f7ff ffcf 	bl	8016600 <__mcmp>
 8016662:	1e07      	subs	r7, r0, #0
 8016664:	d054      	beq.n	8016710 <__mdiff+0xc0>
 8016666:	db4d      	blt.n	8016704 <__mdiff+0xb4>
 8016668:	f04f 0800 	mov.w	r8, #0
 801666c:	6871      	ldr	r1, [r6, #4]
 801666e:	4628      	mov	r0, r5
 8016670:	f7ff fd9e 	bl	80161b0 <_Balloc>
 8016674:	6937      	ldr	r7, [r6, #16]
 8016676:	6923      	ldr	r3, [r4, #16]
 8016678:	f8c0 800c 	str.w	r8, [r0, #12]
 801667c:	3614      	adds	r6, #20
 801667e:	f104 0214 	add.w	r2, r4, #20
 8016682:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8016686:	f100 0514 	add.w	r5, r0, #20
 801668a:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 801668e:	2300      	movs	r3, #0
 8016690:	f856 8b04 	ldr.w	r8, [r6], #4
 8016694:	f852 4b04 	ldr.w	r4, [r2], #4
 8016698:	fa13 f388 	uxtah	r3, r3, r8
 801669c:	b2a1      	uxth	r1, r4
 801669e:	0c24      	lsrs	r4, r4, #16
 80166a0:	1a59      	subs	r1, r3, r1
 80166a2:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 80166a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80166aa:	b289      	uxth	r1, r1
 80166ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80166b0:	4594      	cmp	ip, r2
 80166b2:	f845 1b04 	str.w	r1, [r5], #4
 80166b6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80166ba:	4634      	mov	r4, r6
 80166bc:	d8e8      	bhi.n	8016690 <__mdiff+0x40>
 80166be:	45b6      	cmp	lr, r6
 80166c0:	46ac      	mov	ip, r5
 80166c2:	d915      	bls.n	80166f0 <__mdiff+0xa0>
 80166c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80166c8:	fa13 f182 	uxtah	r1, r3, r2
 80166cc:	0c13      	lsrs	r3, r2, #16
 80166ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80166d2:	b289      	uxth	r1, r1
 80166d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80166d8:	45a6      	cmp	lr, r4
 80166da:	f845 1b04 	str.w	r1, [r5], #4
 80166de:	ea4f 4323 	mov.w	r3, r3, asr #16
 80166e2:	d8ef      	bhi.n	80166c4 <__mdiff+0x74>
 80166e4:	43f6      	mvns	r6, r6
 80166e6:	4476      	add	r6, lr
 80166e8:	f026 0503 	bic.w	r5, r6, #3
 80166ec:	3504      	adds	r5, #4
 80166ee:	4465      	add	r5, ip
 80166f0:	3d04      	subs	r5, #4
 80166f2:	b921      	cbnz	r1, 80166fe <__mdiff+0xae>
 80166f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80166f8:	3f01      	subs	r7, #1
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d0fa      	beq.n	80166f4 <__mdiff+0xa4>
 80166fe:	6107      	str	r7, [r0, #16]
 8016700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016704:	4633      	mov	r3, r6
 8016706:	f04f 0801 	mov.w	r8, #1
 801670a:	4626      	mov	r6, r4
 801670c:	461c      	mov	r4, r3
 801670e:	e7ad      	b.n	801666c <__mdiff+0x1c>
 8016710:	4628      	mov	r0, r5
 8016712:	4639      	mov	r1, r7
 8016714:	f7ff fd4c 	bl	80161b0 <_Balloc>
 8016718:	2301      	movs	r3, #1
 801671a:	6147      	str	r7, [r0, #20]
 801671c:	6103      	str	r3, [r0, #16]
 801671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016722:	bf00      	nop
	...

08016730 <__d2b>:
 8016730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016734:	ec57 6b10 	vmov	r6, r7, d0
 8016738:	b083      	sub	sp, #12
 801673a:	4688      	mov	r8, r1
 801673c:	2101      	movs	r1, #1
 801673e:	463c      	mov	r4, r7
 8016740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016744:	4617      	mov	r7, r2
 8016746:	f7ff fd33 	bl	80161b0 <_Balloc>
 801674a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801674e:	4681      	mov	r9, r0
 8016750:	b10d      	cbz	r5, 8016756 <__d2b+0x26>
 8016752:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8016756:	9401      	str	r4, [sp, #4]
 8016758:	b31e      	cbz	r6, 80167a2 <__d2b+0x72>
 801675a:	a802      	add	r0, sp, #8
 801675c:	f840 6d08 	str.w	r6, [r0, #-8]!
 8016760:	f7ff fdc6 	bl	80162f0 <__lo0bits>
 8016764:	2800      	cmp	r0, #0
 8016766:	d134      	bne.n	80167d2 <__d2b+0xa2>
 8016768:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801676c:	f8c9 2014 	str.w	r2, [r9, #20]
 8016770:	2b00      	cmp	r3, #0
 8016772:	bf14      	ite	ne
 8016774:	2402      	movne	r4, #2
 8016776:	2401      	moveq	r4, #1
 8016778:	f8c9 3018 	str.w	r3, [r9, #24]
 801677c:	f8c9 4010 	str.w	r4, [r9, #16]
 8016780:	b9dd      	cbnz	r5, 80167ba <__d2b+0x8a>
 8016782:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8016786:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801678a:	f8c8 0000 	str.w	r0, [r8]
 801678e:	6918      	ldr	r0, [r3, #16]
 8016790:	f7ff fd8e 	bl	80162b0 <__hi0bits>
 8016794:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8016798:	6038      	str	r0, [r7, #0]
 801679a:	4648      	mov	r0, r9
 801679c:	b003      	add	sp, #12
 801679e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167a2:	a801      	add	r0, sp, #4
 80167a4:	f7ff fda4 	bl	80162f0 <__lo0bits>
 80167a8:	2401      	movs	r4, #1
 80167aa:	9b01      	ldr	r3, [sp, #4]
 80167ac:	f8c9 3014 	str.w	r3, [r9, #20]
 80167b0:	3020      	adds	r0, #32
 80167b2:	f8c9 4010 	str.w	r4, [r9, #16]
 80167b6:	2d00      	cmp	r5, #0
 80167b8:	d0e3      	beq.n	8016782 <__d2b+0x52>
 80167ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80167be:	4405      	add	r5, r0
 80167c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80167c4:	f8c8 5000 	str.w	r5, [r8]
 80167c8:	6038      	str	r0, [r7, #0]
 80167ca:	4648      	mov	r0, r9
 80167cc:	b003      	add	sp, #12
 80167ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167d2:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80167d6:	f1c0 0120 	rsb	r1, r0, #32
 80167da:	fa03 f101 	lsl.w	r1, r3, r1
 80167de:	430a      	orrs	r2, r1
 80167e0:	40c3      	lsrs	r3, r0
 80167e2:	9301      	str	r3, [sp, #4]
 80167e4:	f8c9 2014 	str.w	r2, [r9, #20]
 80167e8:	e7c2      	b.n	8016770 <__d2b+0x40>
 80167ea:	bf00      	nop
 80167ec:	0000      	movs	r0, r0
	...

080167f0 <__fpclassifyd>:
 80167f0:	ec53 2b10 	vmov	r2, r3, d0
 80167f4:	b410      	push	{r4}
 80167f6:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 80167fa:	d008      	beq.n	801680e <__fpclassifyd+0x1e>
 80167fc:	4911      	ldr	r1, [pc, #68]	; (8016844 <__fpclassifyd+0x54>)
 80167fe:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8016802:	4288      	cmp	r0, r1
 8016804:	d808      	bhi.n	8016818 <__fpclassifyd+0x28>
 8016806:	2004      	movs	r0, #4
 8016808:	f85d 4b04 	ldr.w	r4, [sp], #4
 801680c:	4770      	bx	lr
 801680e:	b91a      	cbnz	r2, 8016818 <__fpclassifyd+0x28>
 8016810:	2002      	movs	r0, #2
 8016812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016816:	4770      	bx	lr
 8016818:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 801681c:	4909      	ldr	r1, [pc, #36]	; (8016844 <__fpclassifyd+0x54>)
 801681e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016822:	428b      	cmp	r3, r1
 8016824:	d9ef      	bls.n	8016806 <__fpclassifyd+0x16>
 8016826:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801682a:	d201      	bcs.n	8016830 <__fpclassifyd+0x40>
 801682c:	2003      	movs	r0, #3
 801682e:	e7eb      	b.n	8016808 <__fpclassifyd+0x18>
 8016830:	4b05      	ldr	r3, [pc, #20]	; (8016848 <__fpclassifyd+0x58>)
 8016832:	429c      	cmp	r4, r3
 8016834:	d001      	beq.n	801683a <__fpclassifyd+0x4a>
 8016836:	2000      	movs	r0, #0
 8016838:	e7e6      	b.n	8016808 <__fpclassifyd+0x18>
 801683a:	fab2 f082 	clz	r0, r2
 801683e:	0940      	lsrs	r0, r0, #5
 8016840:	e7e2      	b.n	8016808 <__fpclassifyd+0x18>
 8016842:	bf00      	nop
 8016844:	7fdfffff 	.word	0x7fdfffff
 8016848:	7ff00000 	.word	0x7ff00000
 801684c:	00000000 	.word	0x00000000

08016850 <strlen>:
 8016850:	f020 0103 	bic.w	r1, r0, #3
 8016854:	f010 0003 	ands.w	r0, r0, #3
 8016858:	f1c0 0000 	rsb	r0, r0, #0
 801685c:	f851 3b04 	ldr.w	r3, [r1], #4
 8016860:	f100 0c04 	add.w	ip, r0, #4
 8016864:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016868:	f06f 0200 	mvn.w	r2, #0
 801686c:	bf1c      	itt	ne
 801686e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8016872:	4313      	orrne	r3, r2
 8016874:	f04f 0c01 	mov.w	ip, #1
 8016878:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 801687c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8016880:	eba3 020c 	sub.w	r2, r3, ip
 8016884:	ea22 0203 	bic.w	r2, r2, r3
 8016888:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 801688c:	bf04      	itt	eq
 801688e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8016892:	3004      	addeq	r0, #4
 8016894:	d0f4      	beq.n	8016880 <strlen+0x30>
 8016896:	f1c2 0100 	rsb	r1, r2, #0
 801689a:	ea02 0201 	and.w	r2, r2, r1
 801689e:	fab2 f282 	clz	r2, r2
 80168a2:	f1c2 021f 	rsb	r2, r2, #31
 80168a6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80168aa:	4770      	bx	lr
 80168ac:	0000      	movs	r0, r0
	...

080168b0 <__ssprint_r>:
 80168b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b4:	6893      	ldr	r3, [r2, #8]
 80168b6:	f8d2 8000 	ldr.w	r8, [r2]
 80168ba:	b083      	sub	sp, #12
 80168bc:	4691      	mov	r9, r2
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d072      	beq.n	80169a8 <__ssprint_r+0xf8>
 80168c2:	4607      	mov	r7, r0
 80168c4:	f04f 0b00 	mov.w	fp, #0
 80168c8:	6808      	ldr	r0, [r1, #0]
 80168ca:	688b      	ldr	r3, [r1, #8]
 80168cc:	460d      	mov	r5, r1
 80168ce:	465c      	mov	r4, fp
 80168d0:	2c00      	cmp	r4, #0
 80168d2:	d045      	beq.n	8016960 <__ssprint_r+0xb0>
 80168d4:	429c      	cmp	r4, r3
 80168d6:	461e      	mov	r6, r3
 80168d8:	469a      	mov	sl, r3
 80168da:	d348      	bcc.n	801696e <__ssprint_r+0xbe>
 80168dc:	89ab      	ldrh	r3, [r5, #12]
 80168de:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80168e2:	d02d      	beq.n	8016940 <__ssprint_r+0x90>
 80168e4:	696e      	ldr	r6, [r5, #20]
 80168e6:	6929      	ldr	r1, [r5, #16]
 80168e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80168ec:	ebc1 0a00 	rsb	sl, r1, r0
 80168f0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80168f4:	1c60      	adds	r0, r4, #1
 80168f6:	1076      	asrs	r6, r6, #1
 80168f8:	4450      	add	r0, sl
 80168fa:	4286      	cmp	r6, r0
 80168fc:	4632      	mov	r2, r6
 80168fe:	bf3c      	itt	cc
 8016900:	4606      	movcc	r6, r0
 8016902:	4632      	movcc	r2, r6
 8016904:	055b      	lsls	r3, r3, #21
 8016906:	d535      	bpl.n	8016974 <__ssprint_r+0xc4>
 8016908:	4611      	mov	r1, r2
 801690a:	4638      	mov	r0, r7
 801690c:	f7ff f958 	bl	8015bc0 <_malloc_r>
 8016910:	2800      	cmp	r0, #0
 8016912:	d039      	beq.n	8016988 <__ssprint_r+0xd8>
 8016914:	4652      	mov	r2, sl
 8016916:	6929      	ldr	r1, [r5, #16]
 8016918:	9001      	str	r0, [sp, #4]
 801691a:	f7f6 f859 	bl	800c9d0 <memcpy>
 801691e:	89aa      	ldrh	r2, [r5, #12]
 8016920:	9b01      	ldr	r3, [sp, #4]
 8016922:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801692a:	81aa      	strh	r2, [r5, #12]
 801692c:	ebca 0206 	rsb	r2, sl, r6
 8016930:	eb03 000a 	add.w	r0, r3, sl
 8016934:	616e      	str	r6, [r5, #20]
 8016936:	612b      	str	r3, [r5, #16]
 8016938:	6028      	str	r0, [r5, #0]
 801693a:	60aa      	str	r2, [r5, #8]
 801693c:	4626      	mov	r6, r4
 801693e:	46a2      	mov	sl, r4
 8016940:	4652      	mov	r2, sl
 8016942:	4659      	mov	r1, fp
 8016944:	f000 f994 	bl	8016c70 <memmove>
 8016948:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801694c:	68ab      	ldr	r3, [r5, #8]
 801694e:	6828      	ldr	r0, [r5, #0]
 8016950:	1b9b      	subs	r3, r3, r6
 8016952:	4450      	add	r0, sl
 8016954:	1b14      	subs	r4, r2, r4
 8016956:	60ab      	str	r3, [r5, #8]
 8016958:	6028      	str	r0, [r5, #0]
 801695a:	f8c9 4008 	str.w	r4, [r9, #8]
 801695e:	b31c      	cbz	r4, 80169a8 <__ssprint_r+0xf8>
 8016960:	f8d8 b000 	ldr.w	fp, [r8]
 8016964:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016968:	f108 0808 	add.w	r8, r8, #8
 801696c:	e7b0      	b.n	80168d0 <__ssprint_r+0x20>
 801696e:	4626      	mov	r6, r4
 8016970:	46a2      	mov	sl, r4
 8016972:	e7e5      	b.n	8016940 <__ssprint_r+0x90>
 8016974:	4638      	mov	r0, r7
 8016976:	f000 f9e3 	bl	8016d40 <_realloc_r>
 801697a:	4603      	mov	r3, r0
 801697c:	2800      	cmp	r0, #0
 801697e:	d1d5      	bne.n	801692c <__ssprint_r+0x7c>
 8016980:	4638      	mov	r0, r7
 8016982:	6929      	ldr	r1, [r5, #16]
 8016984:	f000 f89c 	bl	8016ac0 <_free_r>
 8016988:	230c      	movs	r3, #12
 801698a:	603b      	str	r3, [r7, #0]
 801698c:	89ab      	ldrh	r3, [r5, #12]
 801698e:	2200      	movs	r2, #0
 8016990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016994:	f04f 30ff 	mov.w	r0, #4294967295
 8016998:	81ab      	strh	r3, [r5, #12]
 801699a:	f8c9 2008 	str.w	r2, [r9, #8]
 801699e:	f8c9 2004 	str.w	r2, [r9, #4]
 80169a2:	b003      	add	sp, #12
 80169a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a8:	2000      	movs	r0, #0
 80169aa:	f8c9 0004 	str.w	r0, [r9, #4]
 80169ae:	b003      	add	sp, #12
 80169b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080169c0 <_calloc_r>:
 80169c0:	b510      	push	{r4, lr}
 80169c2:	fb02 f101 	mul.w	r1, r2, r1
 80169c6:	f7ff f8fb 	bl	8015bc0 <_malloc_r>
 80169ca:	4604      	mov	r4, r0
 80169cc:	b168      	cbz	r0, 80169ea <_calloc_r+0x2a>
 80169ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80169d2:	f022 0203 	bic.w	r2, r2, #3
 80169d6:	3a04      	subs	r2, #4
 80169d8:	2a24      	cmp	r2, #36	; 0x24
 80169da:	d818      	bhi.n	8016a0e <_calloc_r+0x4e>
 80169dc:	2a13      	cmp	r2, #19
 80169de:	d806      	bhi.n	80169ee <_calloc_r+0x2e>
 80169e0:	4603      	mov	r3, r0
 80169e2:	2200      	movs	r2, #0
 80169e4:	601a      	str	r2, [r3, #0]
 80169e6:	605a      	str	r2, [r3, #4]
 80169e8:	609a      	str	r2, [r3, #8]
 80169ea:	4620      	mov	r0, r4
 80169ec:	bd10      	pop	{r4, pc}
 80169ee:	2300      	movs	r3, #0
 80169f0:	2a1b      	cmp	r2, #27
 80169f2:	6003      	str	r3, [r0, #0]
 80169f4:	6043      	str	r3, [r0, #4]
 80169f6:	d90f      	bls.n	8016a18 <_calloc_r+0x58>
 80169f8:	2a24      	cmp	r2, #36	; 0x24
 80169fa:	6083      	str	r3, [r0, #8]
 80169fc:	60c3      	str	r3, [r0, #12]
 80169fe:	bf05      	ittet	eq
 8016a00:	6103      	streq	r3, [r0, #16]
 8016a02:	6143      	streq	r3, [r0, #20]
 8016a04:	f100 0310 	addne.w	r3, r0, #16
 8016a08:	f100 0318 	addeq.w	r3, r0, #24
 8016a0c:	e7e9      	b.n	80169e2 <_calloc_r+0x22>
 8016a0e:	2100      	movs	r1, #0
 8016a10:	f7fc fdd6 	bl	80135c0 <memset>
 8016a14:	4620      	mov	r0, r4
 8016a16:	bd10      	pop	{r4, pc}
 8016a18:	f100 0308 	add.w	r3, r0, #8
 8016a1c:	e7e1      	b.n	80169e2 <_calloc_r+0x22>
 8016a1e:	bf00      	nop

08016a20 <_malloc_trim_r>:
 8016a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a22:	4f23      	ldr	r7, [pc, #140]	; (8016ab0 <_malloc_trim_r+0x90>)
 8016a24:	460c      	mov	r4, r1
 8016a26:	4606      	mov	r6, r0
 8016a28:	f7ff fbb2 	bl	8016190 <__malloc_lock>
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	685d      	ldr	r5, [r3, #4]
 8016a30:	f025 0503 	bic.w	r5, r5, #3
 8016a34:	1b29      	subs	r1, r5, r4
 8016a36:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8016a3a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8016a3e:	f021 010f 	bic.w	r1, r1, #15
 8016a42:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8016a46:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8016a4a:	db07      	blt.n	8016a5c <_malloc_trim_r+0x3c>
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	2100      	movs	r1, #0
 8016a50:	f7f9 fbfe 	bl	8010250 <_sbrk_r>
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	442b      	add	r3, r5
 8016a58:	4298      	cmp	r0, r3
 8016a5a:	d004      	beq.n	8016a66 <_malloc_trim_r+0x46>
 8016a5c:	4630      	mov	r0, r6
 8016a5e:	f7ff fb9f 	bl	80161a0 <__malloc_unlock>
 8016a62:	2000      	movs	r0, #0
 8016a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a66:	4630      	mov	r0, r6
 8016a68:	4261      	negs	r1, r4
 8016a6a:	f7f9 fbf1 	bl	8010250 <_sbrk_r>
 8016a6e:	3001      	adds	r0, #1
 8016a70:	d00d      	beq.n	8016a8e <_malloc_trim_r+0x6e>
 8016a72:	4b10      	ldr	r3, [pc, #64]	; (8016ab4 <_malloc_trim_r+0x94>)
 8016a74:	68ba      	ldr	r2, [r7, #8]
 8016a76:	6819      	ldr	r1, [r3, #0]
 8016a78:	1b2d      	subs	r5, r5, r4
 8016a7a:	f045 0501 	orr.w	r5, r5, #1
 8016a7e:	4630      	mov	r0, r6
 8016a80:	1b09      	subs	r1, r1, r4
 8016a82:	6055      	str	r5, [r2, #4]
 8016a84:	6019      	str	r1, [r3, #0]
 8016a86:	f7ff fb8b 	bl	80161a0 <__malloc_unlock>
 8016a8a:	2001      	movs	r0, #1
 8016a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a8e:	4630      	mov	r0, r6
 8016a90:	2100      	movs	r1, #0
 8016a92:	f7f9 fbdd 	bl	8010250 <_sbrk_r>
 8016a96:	68ba      	ldr	r2, [r7, #8]
 8016a98:	1a83      	subs	r3, r0, r2
 8016a9a:	2b0f      	cmp	r3, #15
 8016a9c:	ddde      	ble.n	8016a5c <_malloc_trim_r+0x3c>
 8016a9e:	4c06      	ldr	r4, [pc, #24]	; (8016ab8 <_malloc_trim_r+0x98>)
 8016aa0:	4904      	ldr	r1, [pc, #16]	; (8016ab4 <_malloc_trim_r+0x94>)
 8016aa2:	6824      	ldr	r4, [r4, #0]
 8016aa4:	f043 0301 	orr.w	r3, r3, #1
 8016aa8:	1b00      	subs	r0, r0, r4
 8016aaa:	6053      	str	r3, [r2, #4]
 8016aac:	6008      	str	r0, [r1, #0]
 8016aae:	e7d5      	b.n	8016a5c <_malloc_trim_r+0x3c>
 8016ab0:	20000c7c 	.word	0x20000c7c
 8016ab4:	20002f1c 	.word	0x20002f1c
 8016ab8:	20001088 	.word	0x20001088
 8016abc:	00000000 	.word	0x00000000

08016ac0 <_free_r>:
 8016ac0:	2900      	cmp	r1, #0
 8016ac2:	d04e      	beq.n	8016b62 <_free_r+0xa2>
 8016ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac8:	460c      	mov	r4, r1
 8016aca:	4680      	mov	r8, r0
 8016acc:	f7ff fb60 	bl	8016190 <__malloc_lock>
 8016ad0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8016ad4:	4962      	ldr	r1, [pc, #392]	; (8016c60 <_free_r+0x1a0>)
 8016ad6:	f027 0201 	bic.w	r2, r7, #1
 8016ada:	f1a4 0508 	sub.w	r5, r4, #8
 8016ade:	18ab      	adds	r3, r5, r2
 8016ae0:	688e      	ldr	r6, [r1, #8]
 8016ae2:	6858      	ldr	r0, [r3, #4]
 8016ae4:	429e      	cmp	r6, r3
 8016ae6:	f020 0003 	bic.w	r0, r0, #3
 8016aea:	d05a      	beq.n	8016ba2 <_free_r+0xe2>
 8016aec:	07fe      	lsls	r6, r7, #31
 8016aee:	6058      	str	r0, [r3, #4]
 8016af0:	d40b      	bmi.n	8016b0a <_free_r+0x4a>
 8016af2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8016af6:	1bed      	subs	r5, r5, r7
 8016af8:	f101 0e08 	add.w	lr, r1, #8
 8016afc:	68ac      	ldr	r4, [r5, #8]
 8016afe:	4574      	cmp	r4, lr
 8016b00:	443a      	add	r2, r7
 8016b02:	d067      	beq.n	8016bd4 <_free_r+0x114>
 8016b04:	68ef      	ldr	r7, [r5, #12]
 8016b06:	60e7      	str	r7, [r4, #12]
 8016b08:	60bc      	str	r4, [r7, #8]
 8016b0a:	181c      	adds	r4, r3, r0
 8016b0c:	6864      	ldr	r4, [r4, #4]
 8016b0e:	07e4      	lsls	r4, r4, #31
 8016b10:	d40c      	bmi.n	8016b2c <_free_r+0x6c>
 8016b12:	4f54      	ldr	r7, [pc, #336]	; (8016c64 <_free_r+0x1a4>)
 8016b14:	689c      	ldr	r4, [r3, #8]
 8016b16:	42bc      	cmp	r4, r7
 8016b18:	4402      	add	r2, r0
 8016b1a:	d07c      	beq.n	8016c16 <_free_r+0x156>
 8016b1c:	68d8      	ldr	r0, [r3, #12]
 8016b1e:	60e0      	str	r0, [r4, #12]
 8016b20:	f042 0301 	orr.w	r3, r2, #1
 8016b24:	6084      	str	r4, [r0, #8]
 8016b26:	606b      	str	r3, [r5, #4]
 8016b28:	50aa      	str	r2, [r5, r2]
 8016b2a:	e003      	b.n	8016b34 <_free_r+0x74>
 8016b2c:	f042 0301 	orr.w	r3, r2, #1
 8016b30:	606b      	str	r3, [r5, #4]
 8016b32:	50aa      	str	r2, [r5, r2]
 8016b34:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8016b38:	d214      	bcs.n	8016b64 <_free_r+0xa4>
 8016b3a:	08d2      	lsrs	r2, r2, #3
 8016b3c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8016b40:	6848      	ldr	r0, [r1, #4]
 8016b42:	689f      	ldr	r7, [r3, #8]
 8016b44:	60af      	str	r7, [r5, #8]
 8016b46:	1092      	asrs	r2, r2, #2
 8016b48:	2401      	movs	r4, #1
 8016b4a:	fa04 f202 	lsl.w	r2, r4, r2
 8016b4e:	4310      	orrs	r0, r2
 8016b50:	60eb      	str	r3, [r5, #12]
 8016b52:	6048      	str	r0, [r1, #4]
 8016b54:	609d      	str	r5, [r3, #8]
 8016b56:	60fd      	str	r5, [r7, #12]
 8016b58:	4640      	mov	r0, r8
 8016b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5e:	f7ff bb1f 	b.w	80161a0 <__malloc_unlock>
 8016b62:	4770      	bx	lr
 8016b64:	0a53      	lsrs	r3, r2, #9
 8016b66:	2b04      	cmp	r3, #4
 8016b68:	d847      	bhi.n	8016bfa <_free_r+0x13a>
 8016b6a:	0993      	lsrs	r3, r2, #6
 8016b6c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8016b70:	0060      	lsls	r0, r4, #1
 8016b72:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8016b76:	493a      	ldr	r1, [pc, #232]	; (8016c60 <_free_r+0x1a0>)
 8016b78:	6883      	ldr	r3, [r0, #8]
 8016b7a:	4283      	cmp	r3, r0
 8016b7c:	d043      	beq.n	8016c06 <_free_r+0x146>
 8016b7e:	6859      	ldr	r1, [r3, #4]
 8016b80:	f021 0103 	bic.w	r1, r1, #3
 8016b84:	4291      	cmp	r1, r2
 8016b86:	d902      	bls.n	8016b8e <_free_r+0xce>
 8016b88:	689b      	ldr	r3, [r3, #8]
 8016b8a:	4298      	cmp	r0, r3
 8016b8c:	d1f7      	bne.n	8016b7e <_free_r+0xbe>
 8016b8e:	68da      	ldr	r2, [r3, #12]
 8016b90:	60ea      	str	r2, [r5, #12]
 8016b92:	60ab      	str	r3, [r5, #8]
 8016b94:	4640      	mov	r0, r8
 8016b96:	6095      	str	r5, [r2, #8]
 8016b98:	60dd      	str	r5, [r3, #12]
 8016b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b9e:	f7ff baff 	b.w	80161a0 <__malloc_unlock>
 8016ba2:	07ff      	lsls	r7, r7, #31
 8016ba4:	4402      	add	r2, r0
 8016ba6:	d407      	bmi.n	8016bb8 <_free_r+0xf8>
 8016ba8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8016bac:	1aed      	subs	r5, r5, r3
 8016bae:	441a      	add	r2, r3
 8016bb0:	68a8      	ldr	r0, [r5, #8]
 8016bb2:	68eb      	ldr	r3, [r5, #12]
 8016bb4:	60c3      	str	r3, [r0, #12]
 8016bb6:	6098      	str	r0, [r3, #8]
 8016bb8:	4b2b      	ldr	r3, [pc, #172]	; (8016c68 <_free_r+0x1a8>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	f042 0001 	orr.w	r0, r2, #1
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	6068      	str	r0, [r5, #4]
 8016bc4:	608d      	str	r5, [r1, #8]
 8016bc6:	d3c7      	bcc.n	8016b58 <_free_r+0x98>
 8016bc8:	4b28      	ldr	r3, [pc, #160]	; (8016c6c <_free_r+0x1ac>)
 8016bca:	4640      	mov	r0, r8
 8016bcc:	6819      	ldr	r1, [r3, #0]
 8016bce:	f7ff ff27 	bl	8016a20 <_malloc_trim_r>
 8016bd2:	e7c1      	b.n	8016b58 <_free_r+0x98>
 8016bd4:	1819      	adds	r1, r3, r0
 8016bd6:	6849      	ldr	r1, [r1, #4]
 8016bd8:	07c9      	lsls	r1, r1, #31
 8016bda:	d409      	bmi.n	8016bf0 <_free_r+0x130>
 8016bdc:	68d9      	ldr	r1, [r3, #12]
 8016bde:	689b      	ldr	r3, [r3, #8]
 8016be0:	4402      	add	r2, r0
 8016be2:	f042 0001 	orr.w	r0, r2, #1
 8016be6:	60d9      	str	r1, [r3, #12]
 8016be8:	608b      	str	r3, [r1, #8]
 8016bea:	6068      	str	r0, [r5, #4]
 8016bec:	50aa      	str	r2, [r5, r2]
 8016bee:	e7b3      	b.n	8016b58 <_free_r+0x98>
 8016bf0:	f042 0301 	orr.w	r3, r2, #1
 8016bf4:	606b      	str	r3, [r5, #4]
 8016bf6:	50aa      	str	r2, [r5, r2]
 8016bf8:	e7ae      	b.n	8016b58 <_free_r+0x98>
 8016bfa:	2b14      	cmp	r3, #20
 8016bfc:	d814      	bhi.n	8016c28 <_free_r+0x168>
 8016bfe:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8016c02:	0060      	lsls	r0, r4, #1
 8016c04:	e7b5      	b.n	8016b72 <_free_r+0xb2>
 8016c06:	684a      	ldr	r2, [r1, #4]
 8016c08:	10a4      	asrs	r4, r4, #2
 8016c0a:	2001      	movs	r0, #1
 8016c0c:	40a0      	lsls	r0, r4
 8016c0e:	4302      	orrs	r2, r0
 8016c10:	604a      	str	r2, [r1, #4]
 8016c12:	461a      	mov	r2, r3
 8016c14:	e7bc      	b.n	8016b90 <_free_r+0xd0>
 8016c16:	f042 0301 	orr.w	r3, r2, #1
 8016c1a:	614d      	str	r5, [r1, #20]
 8016c1c:	610d      	str	r5, [r1, #16]
 8016c1e:	60ec      	str	r4, [r5, #12]
 8016c20:	60ac      	str	r4, [r5, #8]
 8016c22:	606b      	str	r3, [r5, #4]
 8016c24:	50aa      	str	r2, [r5, r2]
 8016c26:	e797      	b.n	8016b58 <_free_r+0x98>
 8016c28:	2b54      	cmp	r3, #84	; 0x54
 8016c2a:	d804      	bhi.n	8016c36 <_free_r+0x176>
 8016c2c:	0b13      	lsrs	r3, r2, #12
 8016c2e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8016c32:	0060      	lsls	r0, r4, #1
 8016c34:	e79d      	b.n	8016b72 <_free_r+0xb2>
 8016c36:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016c3a:	d804      	bhi.n	8016c46 <_free_r+0x186>
 8016c3c:	0bd3      	lsrs	r3, r2, #15
 8016c3e:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8016c42:	0060      	lsls	r0, r4, #1
 8016c44:	e795      	b.n	8016b72 <_free_r+0xb2>
 8016c46:	f240 5054 	movw	r0, #1364	; 0x554
 8016c4a:	4283      	cmp	r3, r0
 8016c4c:	d804      	bhi.n	8016c58 <_free_r+0x198>
 8016c4e:	0c93      	lsrs	r3, r2, #18
 8016c50:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8016c54:	0060      	lsls	r0, r4, #1
 8016c56:	e78c      	b.n	8016b72 <_free_r+0xb2>
 8016c58:	20fc      	movs	r0, #252	; 0xfc
 8016c5a:	247e      	movs	r4, #126	; 0x7e
 8016c5c:	e789      	b.n	8016b72 <_free_r+0xb2>
 8016c5e:	bf00      	nop
 8016c60:	20000c7c 	.word	0x20000c7c
 8016c64:	20000c84 	.word	0x20000c84
 8016c68:	20001084 	.word	0x20001084
 8016c6c:	20002f18 	.word	0x20002f18

08016c70 <memmove>:
 8016c70:	4288      	cmp	r0, r1
 8016c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c74:	d90d      	bls.n	8016c92 <memmove+0x22>
 8016c76:	188b      	adds	r3, r1, r2
 8016c78:	4298      	cmp	r0, r3
 8016c7a:	d20a      	bcs.n	8016c92 <memmove+0x22>
 8016c7c:	1881      	adds	r1, r0, r2
 8016c7e:	2a00      	cmp	r2, #0
 8016c80:	d054      	beq.n	8016d2c <memmove+0xbc>
 8016c82:	1a9a      	subs	r2, r3, r2
 8016c84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016c8c:	4293      	cmp	r3, r2
 8016c8e:	d1f9      	bne.n	8016c84 <memmove+0x14>
 8016c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c92:	2a0f      	cmp	r2, #15
 8016c94:	d948      	bls.n	8016d28 <memmove+0xb8>
 8016c96:	ea40 0301 	orr.w	r3, r0, r1
 8016c9a:	079b      	lsls	r3, r3, #30
 8016c9c:	d147      	bne.n	8016d2e <memmove+0xbe>
 8016c9e:	f100 0410 	add.w	r4, r0, #16
 8016ca2:	f101 0310 	add.w	r3, r1, #16
 8016ca6:	4615      	mov	r5, r2
 8016ca8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8016cac:	f844 6c10 	str.w	r6, [r4, #-16]
 8016cb0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8016cb4:	f844 6c0c 	str.w	r6, [r4, #-12]
 8016cb8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8016cbc:	f844 6c08 	str.w	r6, [r4, #-8]
 8016cc0:	3d10      	subs	r5, #16
 8016cc2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016cc6:	f844 6c04 	str.w	r6, [r4, #-4]
 8016cca:	2d0f      	cmp	r5, #15
 8016ccc:	f103 0310 	add.w	r3, r3, #16
 8016cd0:	f104 0410 	add.w	r4, r4, #16
 8016cd4:	d8e8      	bhi.n	8016ca8 <memmove+0x38>
 8016cd6:	f1a2 0310 	sub.w	r3, r2, #16
 8016cda:	f023 030f 	bic.w	r3, r3, #15
 8016cde:	f002 0e0f 	and.w	lr, r2, #15
 8016ce2:	3310      	adds	r3, #16
 8016ce4:	f1be 0f03 	cmp.w	lr, #3
 8016ce8:	4419      	add	r1, r3
 8016cea:	4403      	add	r3, r0
 8016cec:	d921      	bls.n	8016d32 <memmove+0xc2>
 8016cee:	1f1e      	subs	r6, r3, #4
 8016cf0:	460d      	mov	r5, r1
 8016cf2:	4674      	mov	r4, lr
 8016cf4:	3c04      	subs	r4, #4
 8016cf6:	f855 7b04 	ldr.w	r7, [r5], #4
 8016cfa:	f846 7f04 	str.w	r7, [r6, #4]!
 8016cfe:	2c03      	cmp	r4, #3
 8016d00:	d8f8      	bhi.n	8016cf4 <memmove+0x84>
 8016d02:	f1ae 0404 	sub.w	r4, lr, #4
 8016d06:	f024 0403 	bic.w	r4, r4, #3
 8016d0a:	3404      	adds	r4, #4
 8016d0c:	4423      	add	r3, r4
 8016d0e:	4421      	add	r1, r4
 8016d10:	f002 0203 	and.w	r2, r2, #3
 8016d14:	b152      	cbz	r2, 8016d2c <memmove+0xbc>
 8016d16:	3b01      	subs	r3, #1
 8016d18:	440a      	add	r2, r1
 8016d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d22:	4291      	cmp	r1, r2
 8016d24:	d1f9      	bne.n	8016d1a <memmove+0xaa>
 8016d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d28:	4603      	mov	r3, r0
 8016d2a:	e7f3      	b.n	8016d14 <memmove+0xa4>
 8016d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d2e:	4603      	mov	r3, r0
 8016d30:	e7f1      	b.n	8016d16 <memmove+0xa6>
 8016d32:	4672      	mov	r2, lr
 8016d34:	e7ee      	b.n	8016d14 <memmove+0xa4>
 8016d36:	bf00      	nop
	...

08016d40 <_realloc_r>:
 8016d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d44:	4617      	mov	r7, r2
 8016d46:	b083      	sub	sp, #12
 8016d48:	460e      	mov	r6, r1
 8016d4a:	2900      	cmp	r1, #0
 8016d4c:	f000 80e7 	beq.w	8016f1e <_realloc_r+0x1de>
 8016d50:	4681      	mov	r9, r0
 8016d52:	f107 050b 	add.w	r5, r7, #11
 8016d56:	f7ff fa1b 	bl	8016190 <__malloc_lock>
 8016d5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016d5e:	2d16      	cmp	r5, #22
 8016d60:	f023 0403 	bic.w	r4, r3, #3
 8016d64:	f1a6 0808 	sub.w	r8, r6, #8
 8016d68:	d84c      	bhi.n	8016e04 <_realloc_r+0xc4>
 8016d6a:	2210      	movs	r2, #16
 8016d6c:	4615      	mov	r5, r2
 8016d6e:	42af      	cmp	r7, r5
 8016d70:	d84d      	bhi.n	8016e0e <_realloc_r+0xce>
 8016d72:	4294      	cmp	r4, r2
 8016d74:	f280 8084 	bge.w	8016e80 <_realloc_r+0x140>
 8016d78:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8017128 <_realloc_r+0x3e8>
 8016d7c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8016d80:	eb08 0104 	add.w	r1, r8, r4
 8016d84:	4288      	cmp	r0, r1
 8016d86:	f000 80d6 	beq.w	8016f36 <_realloc_r+0x1f6>
 8016d8a:	6848      	ldr	r0, [r1, #4]
 8016d8c:	f020 0e01 	bic.w	lr, r0, #1
 8016d90:	448e      	add	lr, r1
 8016d92:	f8de e004 	ldr.w	lr, [lr, #4]
 8016d96:	f01e 0f01 	tst.w	lr, #1
 8016d9a:	d13f      	bne.n	8016e1c <_realloc_r+0xdc>
 8016d9c:	f020 0003 	bic.w	r0, r0, #3
 8016da0:	4420      	add	r0, r4
 8016da2:	4290      	cmp	r0, r2
 8016da4:	f280 80c1 	bge.w	8016f2a <_realloc_r+0x1ea>
 8016da8:	07db      	lsls	r3, r3, #31
 8016daa:	f100 808f 	bmi.w	8016ecc <_realloc_r+0x18c>
 8016dae:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8016db2:	ebc3 0a08 	rsb	sl, r3, r8
 8016db6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016dba:	f023 0303 	bic.w	r3, r3, #3
 8016dbe:	eb00 0e03 	add.w	lr, r0, r3
 8016dc2:	4596      	cmp	lr, r2
 8016dc4:	db34      	blt.n	8016e30 <_realloc_r+0xf0>
 8016dc6:	68cb      	ldr	r3, [r1, #12]
 8016dc8:	688a      	ldr	r2, [r1, #8]
 8016dca:	4657      	mov	r7, sl
 8016dcc:	60d3      	str	r3, [r2, #12]
 8016dce:	609a      	str	r2, [r3, #8]
 8016dd0:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8016dd4:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016dd8:	60cb      	str	r3, [r1, #12]
 8016dda:	1f22      	subs	r2, r4, #4
 8016ddc:	2a24      	cmp	r2, #36	; 0x24
 8016dde:	6099      	str	r1, [r3, #8]
 8016de0:	f200 8136 	bhi.w	8017050 <_realloc_r+0x310>
 8016de4:	2a13      	cmp	r2, #19
 8016de6:	f240 80fd 	bls.w	8016fe4 <_realloc_r+0x2a4>
 8016dea:	6833      	ldr	r3, [r6, #0]
 8016dec:	f8ca 3008 	str.w	r3, [sl, #8]
 8016df0:	6873      	ldr	r3, [r6, #4]
 8016df2:	f8ca 300c 	str.w	r3, [sl, #12]
 8016df6:	2a1b      	cmp	r2, #27
 8016df8:	f200 8140 	bhi.w	801707c <_realloc_r+0x33c>
 8016dfc:	3608      	adds	r6, #8
 8016dfe:	f10a 0310 	add.w	r3, sl, #16
 8016e02:	e0f0      	b.n	8016fe6 <_realloc_r+0x2a6>
 8016e04:	f025 0507 	bic.w	r5, r5, #7
 8016e08:	2d00      	cmp	r5, #0
 8016e0a:	462a      	mov	r2, r5
 8016e0c:	daaf      	bge.n	8016d6e <_realloc_r+0x2e>
 8016e0e:	230c      	movs	r3, #12
 8016e10:	2000      	movs	r0, #0
 8016e12:	f8c9 3000 	str.w	r3, [r9]
 8016e16:	b003      	add	sp, #12
 8016e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e1c:	07d9      	lsls	r1, r3, #31
 8016e1e:	d455      	bmi.n	8016ecc <_realloc_r+0x18c>
 8016e20:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8016e24:	ebc3 0a08 	rsb	sl, r3, r8
 8016e28:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016e2c:	f023 0303 	bic.w	r3, r3, #3
 8016e30:	4423      	add	r3, r4
 8016e32:	4293      	cmp	r3, r2
 8016e34:	db4a      	blt.n	8016ecc <_realloc_r+0x18c>
 8016e36:	4657      	mov	r7, sl
 8016e38:	f8da 100c 	ldr.w	r1, [sl, #12]
 8016e3c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8016e40:	1f22      	subs	r2, r4, #4
 8016e42:	2a24      	cmp	r2, #36	; 0x24
 8016e44:	60c1      	str	r1, [r0, #12]
 8016e46:	6088      	str	r0, [r1, #8]
 8016e48:	f200 810e 	bhi.w	8017068 <_realloc_r+0x328>
 8016e4c:	2a13      	cmp	r2, #19
 8016e4e:	f240 8109 	bls.w	8017064 <_realloc_r+0x324>
 8016e52:	6831      	ldr	r1, [r6, #0]
 8016e54:	f8ca 1008 	str.w	r1, [sl, #8]
 8016e58:	6871      	ldr	r1, [r6, #4]
 8016e5a:	f8ca 100c 	str.w	r1, [sl, #12]
 8016e5e:	2a1b      	cmp	r2, #27
 8016e60:	f200 8121 	bhi.w	80170a6 <_realloc_r+0x366>
 8016e64:	3608      	adds	r6, #8
 8016e66:	f10a 0210 	add.w	r2, sl, #16
 8016e6a:	6831      	ldr	r1, [r6, #0]
 8016e6c:	6011      	str	r1, [r2, #0]
 8016e6e:	6871      	ldr	r1, [r6, #4]
 8016e70:	6051      	str	r1, [r2, #4]
 8016e72:	68b1      	ldr	r1, [r6, #8]
 8016e74:	6091      	str	r1, [r2, #8]
 8016e76:	461c      	mov	r4, r3
 8016e78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016e7c:	463e      	mov	r6, r7
 8016e7e:	46d0      	mov	r8, sl
 8016e80:	1b62      	subs	r2, r4, r5
 8016e82:	2a0f      	cmp	r2, #15
 8016e84:	f003 0301 	and.w	r3, r3, #1
 8016e88:	d80e      	bhi.n	8016ea8 <_realloc_r+0x168>
 8016e8a:	4323      	orrs	r3, r4
 8016e8c:	4444      	add	r4, r8
 8016e8e:	f8c8 3004 	str.w	r3, [r8, #4]
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	f043 0301 	orr.w	r3, r3, #1
 8016e98:	6063      	str	r3, [r4, #4]
 8016e9a:	4648      	mov	r0, r9
 8016e9c:	f7ff f980 	bl	80161a0 <__malloc_unlock>
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	b003      	add	sp, #12
 8016ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ea8:	eb08 0105 	add.w	r1, r8, r5
 8016eac:	431d      	orrs	r5, r3
 8016eae:	f042 0301 	orr.w	r3, r2, #1
 8016eb2:	440a      	add	r2, r1
 8016eb4:	f8c8 5004 	str.w	r5, [r8, #4]
 8016eb8:	604b      	str	r3, [r1, #4]
 8016eba:	6853      	ldr	r3, [r2, #4]
 8016ebc:	f043 0301 	orr.w	r3, r3, #1
 8016ec0:	3108      	adds	r1, #8
 8016ec2:	6053      	str	r3, [r2, #4]
 8016ec4:	4648      	mov	r0, r9
 8016ec6:	f7ff fdfb 	bl	8016ac0 <_free_r>
 8016eca:	e7e6      	b.n	8016e9a <_realloc_r+0x15a>
 8016ecc:	4639      	mov	r1, r7
 8016ece:	4648      	mov	r0, r9
 8016ed0:	f7fe fe76 	bl	8015bc0 <_malloc_r>
 8016ed4:	4607      	mov	r7, r0
 8016ed6:	b1d8      	cbz	r0, 8016f10 <_realloc_r+0x1d0>
 8016ed8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016edc:	f023 0201 	bic.w	r2, r3, #1
 8016ee0:	4442      	add	r2, r8
 8016ee2:	f1a0 0108 	sub.w	r1, r0, #8
 8016ee6:	4291      	cmp	r1, r2
 8016ee8:	f000 80ac 	beq.w	8017044 <_realloc_r+0x304>
 8016eec:	1f22      	subs	r2, r4, #4
 8016eee:	2a24      	cmp	r2, #36	; 0x24
 8016ef0:	f200 8099 	bhi.w	8017026 <_realloc_r+0x2e6>
 8016ef4:	2a13      	cmp	r2, #19
 8016ef6:	d86a      	bhi.n	8016fce <_realloc_r+0x28e>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	4632      	mov	r2, r6
 8016efc:	6811      	ldr	r1, [r2, #0]
 8016efe:	6019      	str	r1, [r3, #0]
 8016f00:	6851      	ldr	r1, [r2, #4]
 8016f02:	6059      	str	r1, [r3, #4]
 8016f04:	6892      	ldr	r2, [r2, #8]
 8016f06:	609a      	str	r2, [r3, #8]
 8016f08:	4631      	mov	r1, r6
 8016f0a:	4648      	mov	r0, r9
 8016f0c:	f7ff fdd8 	bl	8016ac0 <_free_r>
 8016f10:	4648      	mov	r0, r9
 8016f12:	f7ff f945 	bl	80161a0 <__malloc_unlock>
 8016f16:	4638      	mov	r0, r7
 8016f18:	b003      	add	sp, #12
 8016f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f1e:	4611      	mov	r1, r2
 8016f20:	b003      	add	sp, #12
 8016f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f26:	f7fe be4b 	b.w	8015bc0 <_malloc_r>
 8016f2a:	68ca      	ldr	r2, [r1, #12]
 8016f2c:	6889      	ldr	r1, [r1, #8]
 8016f2e:	4604      	mov	r4, r0
 8016f30:	60ca      	str	r2, [r1, #12]
 8016f32:	6091      	str	r1, [r2, #8]
 8016f34:	e7a4      	b.n	8016e80 <_realloc_r+0x140>
 8016f36:	6841      	ldr	r1, [r0, #4]
 8016f38:	f021 0103 	bic.w	r1, r1, #3
 8016f3c:	4421      	add	r1, r4
 8016f3e:	f105 0010 	add.w	r0, r5, #16
 8016f42:	4281      	cmp	r1, r0
 8016f44:	da5b      	bge.n	8016ffe <_realloc_r+0x2be>
 8016f46:	07db      	lsls	r3, r3, #31
 8016f48:	d4c0      	bmi.n	8016ecc <_realloc_r+0x18c>
 8016f4a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8016f4e:	ebc3 0a08 	rsb	sl, r3, r8
 8016f52:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016f56:	f023 0303 	bic.w	r3, r3, #3
 8016f5a:	eb01 0c03 	add.w	ip, r1, r3
 8016f5e:	4560      	cmp	r0, ip
 8016f60:	f73f af66 	bgt.w	8016e30 <_realloc_r+0xf0>
 8016f64:	4657      	mov	r7, sl
 8016f66:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016f6a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8016f6e:	1f22      	subs	r2, r4, #4
 8016f70:	2a24      	cmp	r2, #36	; 0x24
 8016f72:	60cb      	str	r3, [r1, #12]
 8016f74:	6099      	str	r1, [r3, #8]
 8016f76:	f200 80b8 	bhi.w	80170ea <_realloc_r+0x3aa>
 8016f7a:	2a13      	cmp	r2, #19
 8016f7c:	f240 80a9 	bls.w	80170d2 <_realloc_r+0x392>
 8016f80:	6833      	ldr	r3, [r6, #0]
 8016f82:	f8ca 3008 	str.w	r3, [sl, #8]
 8016f86:	6873      	ldr	r3, [r6, #4]
 8016f88:	f8ca 300c 	str.w	r3, [sl, #12]
 8016f8c:	2a1b      	cmp	r2, #27
 8016f8e:	f200 80b5 	bhi.w	80170fc <_realloc_r+0x3bc>
 8016f92:	3608      	adds	r6, #8
 8016f94:	f10a 0310 	add.w	r3, sl, #16
 8016f98:	6832      	ldr	r2, [r6, #0]
 8016f9a:	601a      	str	r2, [r3, #0]
 8016f9c:	6872      	ldr	r2, [r6, #4]
 8016f9e:	605a      	str	r2, [r3, #4]
 8016fa0:	68b2      	ldr	r2, [r6, #8]
 8016fa2:	609a      	str	r2, [r3, #8]
 8016fa4:	eb0a 0205 	add.w	r2, sl, r5
 8016fa8:	ebc5 030c 	rsb	r3, r5, ip
 8016fac:	f043 0301 	orr.w	r3, r3, #1
 8016fb0:	f8cb 2008 	str.w	r2, [fp, #8]
 8016fb4:	6053      	str	r3, [r2, #4]
 8016fb6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016fba:	f003 0301 	and.w	r3, r3, #1
 8016fbe:	431d      	orrs	r5, r3
 8016fc0:	4648      	mov	r0, r9
 8016fc2:	f8ca 5004 	str.w	r5, [sl, #4]
 8016fc6:	f7ff f8eb 	bl	80161a0 <__malloc_unlock>
 8016fca:	4638      	mov	r0, r7
 8016fcc:	e769      	b.n	8016ea2 <_realloc_r+0x162>
 8016fce:	6833      	ldr	r3, [r6, #0]
 8016fd0:	6003      	str	r3, [r0, #0]
 8016fd2:	6873      	ldr	r3, [r6, #4]
 8016fd4:	6043      	str	r3, [r0, #4]
 8016fd6:	2a1b      	cmp	r2, #27
 8016fd8:	d829      	bhi.n	801702e <_realloc_r+0x2ee>
 8016fda:	f100 0308 	add.w	r3, r0, #8
 8016fde:	f106 0208 	add.w	r2, r6, #8
 8016fe2:	e78b      	b.n	8016efc <_realloc_r+0x1bc>
 8016fe4:	463b      	mov	r3, r7
 8016fe6:	6832      	ldr	r2, [r6, #0]
 8016fe8:	601a      	str	r2, [r3, #0]
 8016fea:	6872      	ldr	r2, [r6, #4]
 8016fec:	605a      	str	r2, [r3, #4]
 8016fee:	68b2      	ldr	r2, [r6, #8]
 8016ff0:	609a      	str	r2, [r3, #8]
 8016ff2:	463e      	mov	r6, r7
 8016ff4:	4674      	mov	r4, lr
 8016ff6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016ffa:	46d0      	mov	r8, sl
 8016ffc:	e740      	b.n	8016e80 <_realloc_r+0x140>
 8016ffe:	eb08 0205 	add.w	r2, r8, r5
 8017002:	1b4b      	subs	r3, r1, r5
 8017004:	f043 0301 	orr.w	r3, r3, #1
 8017008:	f8cb 2008 	str.w	r2, [fp, #8]
 801700c:	6053      	str	r3, [r2, #4]
 801700e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017012:	f003 0301 	and.w	r3, r3, #1
 8017016:	431d      	orrs	r5, r3
 8017018:	4648      	mov	r0, r9
 801701a:	f846 5c04 	str.w	r5, [r6, #-4]
 801701e:	f7ff f8bf 	bl	80161a0 <__malloc_unlock>
 8017022:	4630      	mov	r0, r6
 8017024:	e73d      	b.n	8016ea2 <_realloc_r+0x162>
 8017026:	4631      	mov	r1, r6
 8017028:	f7ff fe22 	bl	8016c70 <memmove>
 801702c:	e76c      	b.n	8016f08 <_realloc_r+0x1c8>
 801702e:	68b3      	ldr	r3, [r6, #8]
 8017030:	6083      	str	r3, [r0, #8]
 8017032:	68f3      	ldr	r3, [r6, #12]
 8017034:	60c3      	str	r3, [r0, #12]
 8017036:	2a24      	cmp	r2, #36	; 0x24
 8017038:	d02c      	beq.n	8017094 <_realloc_r+0x354>
 801703a:	f100 0310 	add.w	r3, r0, #16
 801703e:	f106 0210 	add.w	r2, r6, #16
 8017042:	e75b      	b.n	8016efc <_realloc_r+0x1bc>
 8017044:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017048:	f022 0203 	bic.w	r2, r2, #3
 801704c:	4414      	add	r4, r2
 801704e:	e717      	b.n	8016e80 <_realloc_r+0x140>
 8017050:	4631      	mov	r1, r6
 8017052:	4638      	mov	r0, r7
 8017054:	4674      	mov	r4, lr
 8017056:	463e      	mov	r6, r7
 8017058:	f7ff fe0a 	bl	8016c70 <memmove>
 801705c:	46d0      	mov	r8, sl
 801705e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017062:	e70d      	b.n	8016e80 <_realloc_r+0x140>
 8017064:	463a      	mov	r2, r7
 8017066:	e700      	b.n	8016e6a <_realloc_r+0x12a>
 8017068:	4631      	mov	r1, r6
 801706a:	4638      	mov	r0, r7
 801706c:	461c      	mov	r4, r3
 801706e:	463e      	mov	r6, r7
 8017070:	f7ff fdfe 	bl	8016c70 <memmove>
 8017074:	46d0      	mov	r8, sl
 8017076:	f8da 3004 	ldr.w	r3, [sl, #4]
 801707a:	e701      	b.n	8016e80 <_realloc_r+0x140>
 801707c:	68b3      	ldr	r3, [r6, #8]
 801707e:	f8ca 3010 	str.w	r3, [sl, #16]
 8017082:	68f3      	ldr	r3, [r6, #12]
 8017084:	f8ca 3014 	str.w	r3, [sl, #20]
 8017088:	2a24      	cmp	r2, #36	; 0x24
 801708a:	d018      	beq.n	80170be <_realloc_r+0x37e>
 801708c:	3610      	adds	r6, #16
 801708e:	f10a 0318 	add.w	r3, sl, #24
 8017092:	e7a8      	b.n	8016fe6 <_realloc_r+0x2a6>
 8017094:	6933      	ldr	r3, [r6, #16]
 8017096:	6103      	str	r3, [r0, #16]
 8017098:	6973      	ldr	r3, [r6, #20]
 801709a:	6143      	str	r3, [r0, #20]
 801709c:	f106 0218 	add.w	r2, r6, #24
 80170a0:	f100 0318 	add.w	r3, r0, #24
 80170a4:	e72a      	b.n	8016efc <_realloc_r+0x1bc>
 80170a6:	68b1      	ldr	r1, [r6, #8]
 80170a8:	f8ca 1010 	str.w	r1, [sl, #16]
 80170ac:	68f1      	ldr	r1, [r6, #12]
 80170ae:	f8ca 1014 	str.w	r1, [sl, #20]
 80170b2:	2a24      	cmp	r2, #36	; 0x24
 80170b4:	d00f      	beq.n	80170d6 <_realloc_r+0x396>
 80170b6:	3610      	adds	r6, #16
 80170b8:	f10a 0218 	add.w	r2, sl, #24
 80170bc:	e6d5      	b.n	8016e6a <_realloc_r+0x12a>
 80170be:	6933      	ldr	r3, [r6, #16]
 80170c0:	f8ca 3018 	str.w	r3, [sl, #24]
 80170c4:	6973      	ldr	r3, [r6, #20]
 80170c6:	f8ca 301c 	str.w	r3, [sl, #28]
 80170ca:	3618      	adds	r6, #24
 80170cc:	f10a 0320 	add.w	r3, sl, #32
 80170d0:	e789      	b.n	8016fe6 <_realloc_r+0x2a6>
 80170d2:	463b      	mov	r3, r7
 80170d4:	e760      	b.n	8016f98 <_realloc_r+0x258>
 80170d6:	6932      	ldr	r2, [r6, #16]
 80170d8:	f8ca 2018 	str.w	r2, [sl, #24]
 80170dc:	6972      	ldr	r2, [r6, #20]
 80170de:	f8ca 201c 	str.w	r2, [sl, #28]
 80170e2:	3618      	adds	r6, #24
 80170e4:	f10a 0220 	add.w	r2, sl, #32
 80170e8:	e6bf      	b.n	8016e6a <_realloc_r+0x12a>
 80170ea:	4631      	mov	r1, r6
 80170ec:	4638      	mov	r0, r7
 80170ee:	f8cd c004 	str.w	ip, [sp, #4]
 80170f2:	f7ff fdbd 	bl	8016c70 <memmove>
 80170f6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80170fa:	e753      	b.n	8016fa4 <_realloc_r+0x264>
 80170fc:	68b3      	ldr	r3, [r6, #8]
 80170fe:	f8ca 3010 	str.w	r3, [sl, #16]
 8017102:	68f3      	ldr	r3, [r6, #12]
 8017104:	f8ca 3014 	str.w	r3, [sl, #20]
 8017108:	2a24      	cmp	r2, #36	; 0x24
 801710a:	d003      	beq.n	8017114 <_realloc_r+0x3d4>
 801710c:	3610      	adds	r6, #16
 801710e:	f10a 0318 	add.w	r3, sl, #24
 8017112:	e741      	b.n	8016f98 <_realloc_r+0x258>
 8017114:	6933      	ldr	r3, [r6, #16]
 8017116:	f8ca 3018 	str.w	r3, [sl, #24]
 801711a:	6973      	ldr	r3, [r6, #20]
 801711c:	f8ca 301c 	str.w	r3, [sl, #28]
 8017120:	3618      	adds	r6, #24
 8017122:	f10a 0320 	add.w	r3, sl, #32
 8017126:	e737      	b.n	8016f98 <_realloc_r+0x258>
 8017128:	20000c7c 	.word	0x20000c7c
 801712c:	00000000 	.word	0x00000000
 8017130:	656c6469 	.word	0x656c6469
	...

08017140 <ch_debug>:
 8017140:	6e69616d 18011600 08480404 1814100c     main......H.....
 8017150:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08017160 <vmt>:
 8017160:	0800df01 0800dee1 0800df41 0800df21     ........A...!...
 8017170:	0800df31 0800df11 0800def1 0800ded1     1...............

08017180 <zero_status>:
	...

08017190 <active_status>:
	...

080171a0 <halted_status>:
 80171a0:	00000001 00000000 00000000 00000000     ................

080171b0 <_stm32_dma_streams>:
 80171b0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 80171c0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 80171d0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 80171e0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 80171f0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8017200:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8017210:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8017220:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8017230:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8017240:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8017250:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8017260:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08017270 <fsparams>:
 8017270:	00000080 00000140 00000003 00000000     ....@...........
 8017280:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

08017290 <ep0config>:
 8017290:	00000000 0800e311 0800e661 0800e731     ........a...1...
 80172a0:	00400040 20001680 20001680 00000001     @.@.... ... ....
 80172b0:	20001694 00000000 00000000 00000000     ... ............

080172c0 <pal_default_config>:
 80172c0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 80172d0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 80172e0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 80172f0:	04000000 00000040 02208001 00000000     ....@..... .....
 8017300:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8017310:	00060600 55000100 00000000 ffffffff     .......U........
 8017320:	00555055 00000fff 00000000 00000000     UPU.............
 8017330:	00000040 00000000 ffffffff 00000000     @...............
 8017340:	0000ffff 00000000 00000000 00000000     ................
 8017350:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8017370:	ffffffff 00000000 0000ffff 00000000     ................
	...
 801738c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80173a8:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80173c0:	6e69614d 72657020 69646f69 00000063     Main periodic...
 80173d0:	74726175 20787220 636f7270 00737365     uart rx process.
 80173e0:	20303035 25206625 0d302066 0000000a     500 %f %f 0.....
 80173f0:	7770636d 6974206d 0072656d 00000000     mcpwm timer.....

08017400 <ep1config>:
 8017400:	00000002 00000000 0800e081 0800e0f1     ................
 8017410:	00400040 20002d90 20002da4 00000002     @.@..-. .-. ....
	...

08017430 <vcom_configuration_descriptor>:
 8017430:	00000043 08017480 00000000 00000000     C....t..........

08017440 <ep2config>:
 8017440:	00000003 00000000 0800e161 00000000     ........a.......
 8017450:	00000010 20002b24 00000000 00000001     ....$+. ........
	...

08017470 <usbcfg>:
 8017470:	08011101 080110d1 0800e041 00000000     ........A.......

08017480 <vcom_configuration_descriptor_data>:
 8017480:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8017490:	24050001 05011000 01000124 02022404     ...$....$....$..
 80174a0:	00062405 82050701 ff000803 00010409     .$..............
 80174b0:	00000a02 01050700 00004002 02810507     .........@......
 80174c0:	00000040 00000000 00000000 00000000     @...............

080174d0 <vcom_device_descriptor_data>:
 80174d0:	01100112 40000002 57400483 02010200     .......@..@W....
 80174e0:	00000103 00000000 00000000 00000000     ................

080174f0 <vcom_string0>:
 80174f0:	04090304 00000000 00000000 00000000     ................

08017500 <vcom_string1>:
 8017500:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8017510:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8017520:	00630069 00000073 00000000 00000000     i.c.s...........

08017530 <vcom_string2>:
 8017530:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8017540:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8017550:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 8017560:	006f0050 00740072 00000000 00000000     P.o.r.t.........

08017570 <vcom_string3>:
 8017570:	00330308 00310030 00000000 00000000     ..3.0.1.........

08017580 <vcom_strings>:
 8017580:	00000004 080174f0 00000026 08017500     .....t..&....u..
 8017590:	00000038 08017530 00000008 08017570     8...0u......pu..

080175a0 <serusbcfg>:
 80175a0:	20001400 00020101 00000000 00000000     ... ............

080175b0 <vcom_device_descriptor>:
 80175b0:	00000012 080174d0 00000000 00000000     .....t..........

080175c0 <flash_sector>:
 80175c0:	00080000 00180010 00280020 00380030     ........ .(.0.8.
 80175d0:	00480040 00580050 00000000 00000000     @.H.P.X.........

080175e0 <flash_addr>:
 80175e0:	08000000 08004000 08008000 0800c000     .....@..........
 80175f0:	08010000 08020000 08040000 08060000     ................
 8017600:	08080000 080a0000 080c0000 080e0000     ................
 8017610:	74727173 00000066 00000000 00000000     sqrtf...........

08017620 <npio2_hw>:
 8017620:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8017630:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8017640:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8017650:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8017660:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8017670:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8017680:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 8017690:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080176a0 <two_over_pi>:
 80176a0:	000000a2 000000f9 00000083 0000006e     ............n...
 80176b0:	0000004e 00000044 00000015 00000029     N...D.......)...
 80176c0:	000000fc 00000027 00000057 000000d1     ....'...W.......
 80176d0:	000000f5 00000034 000000dd 000000c0     ....4...........
 80176e0:	000000db 00000062 00000095 00000099     ....b...........
 80176f0:	0000003c 00000043 00000090 00000041     <...C.......A...
 8017700:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8017710:	000000de 000000bb 000000c5 00000061     ............a...
 8017720:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8017730:	00000042 0000004d 000000d2 000000e0     B...M...........
 8017740:	00000006 00000049 0000002e 000000ea     ....I...........
 8017750:	00000009 000000d1 00000092 0000001c     ................
 8017760:	000000fe 0000001d 000000eb 0000001c     ................
 8017770:	000000b1 00000029 000000a7 0000003e     ....).......>...
 8017780:	000000e8 00000082 00000035 000000f5     ........5.......
 8017790:	0000002e 000000bb 00000044 00000084     ........D.......
 80177a0:	000000e9 0000009c 00000070 00000026     ........p...&...
 80177b0:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 80177c0:	00000039 00000091 000000d6 00000039     9...........9...
 80177d0:	00000083 00000053 00000039 000000f4     ....S...9.......
 80177e0:	0000009c 00000084 0000005f 0000008b     ........_.......
 80177f0:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8017800:	0000001f 000000f8 00000097 000000ff     ................
 8017810:	000000de 00000005 00000098 0000000f     ................
 8017820:	000000ef 0000002f 00000011 0000008b     ..../...........
 8017830:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8017840:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8017850:	00000027 000000cb 00000009 000000b7     '...............
 8017860:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8017870:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8017880:	00000075 00000027 000000ba 000000c7     u...'...........
 8017890:	000000eb 000000e5 000000f1 0000007b     ............{...
 80178a0:	0000003d 00000007 00000039 000000f7     =.......9.......
 80178b0:	0000008a 00000052 00000092 000000ea     ....R...........
 80178c0:	0000006b 000000fb 0000005f 000000b1     k......._.......
 80178d0:	0000001f 0000008d 0000005d 00000008     ........].......
 80178e0:	00000056 00000003 00000030 00000046     V.......0...F...
 80178f0:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8017900:	000000f0 000000cf 000000bc 00000020     ............ ...
 8017910:	0000009a 000000f4 00000036 0000001d     ........6.......
 8017920:	000000a9 000000e3 00000091 00000061     ............a...
 8017930:	0000005e 000000e6 0000001b 00000008     ^...............
 8017940:	00000065 00000099 00000085 0000005f     e..........._...
 8017950:	00000014 000000a0 00000068 00000040     ........h...@...
 8017960:	0000008d 000000ff 000000d8 00000080     ................
 8017970:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8017980:	00000006 00000006 00000015 00000056     ............V...
 8017990:	000000ca 00000073 000000a8 000000c9     ....s...........
 80179a0:	00000060 000000e2 0000007b 000000c0     `.......{.......
 80179b0:	0000008c 0000006b 00000000 00000000     ....k...........

080179c0 <init_jk>:
 80179c0:	00000004 00000007 00000009 00000000     ................

080179d0 <PIo2>:
 80179d0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 80179e0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 80179f0:	1fc40000 1bc60000 17440000 00000000     ..........D.....
 8017a00:	00000043 00000000 00000000 00000000     C...............

08017a10 <zeroes.6911>:
 8017a10:	30303030 30303030 30303030 30303030     0000000000000000

08017a20 <blanks.6910>:
 8017a20:	20202020 20202020 20202020 20202020                     
 8017a30:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8017a40:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8017a50:	00000000 33323130 37363534 62613938     ....0123456789ab
 8017a60:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8017a70:	00000030 00000000 00000000 00000000     0...............
 8017a80:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8017a90:	49534f50 00000058 0000002e 00000000     POSIX...........

08017aa0 <__mprec_tens>:
 8017aa0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8017ab0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8017ac0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8017ad0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8017ae0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8017af0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8017b00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8017b10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8017b20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8017b30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8017b40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8017b50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8017b60:	79d99db4 44ea7843 00000000 00000000     ...yCx.D........

08017b70 <p05.5302>:
 8017b70:	00000005 00000019 0000007d 00000000     ........}.......

08017b80 <__mprec_bigtens>:
 8017b80:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8017b90:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8017ba0:	7f73bf3c 75154fdd                       <.s..O.u
