
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x6>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f000 fd32 	bl	800cac0 <__core_init>
 800c05c:	f003 fd60 	bl	800fb20 <__early_init>
 800c060:	481c      	ldr	r0, [pc, #112]	; (800c0d4 <endfiniloop+0xa>)
 800c062:	491d      	ldr	r1, [pc, #116]	; (800c0d8 <endfiniloop+0xe>)
 800c064:	4a1d      	ldr	r2, [pc, #116]	; (800c0dc <endfiniloop+0x12>)

0800c066 <msloop>:
 800c066:	4291      	cmp	r1, r2
 800c068:	bf3c      	itt	cc
 800c06a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c06e:	e7fa      	bcc.n	800c066 <msloop>
 800c070:	491b      	ldr	r1, [pc, #108]	; (800c0e0 <endfiniloop+0x16>)
 800c072:	4a17      	ldr	r2, [pc, #92]	; (800c0d0 <endfiniloop+0x6>)

0800c074 <psloop>:
 800c074:	4291      	cmp	r1, r2
 800c076:	bf3c      	itt	cc
 800c078:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07c:	e7fa      	bcc.n	800c074 <psloop>
 800c07e:	4919      	ldr	r1, [pc, #100]	; (800c0e4 <endfiniloop+0x1a>)
 800c080:	4a19      	ldr	r2, [pc, #100]	; (800c0e8 <endfiniloop+0x1e>)
 800c082:	4b1a      	ldr	r3, [pc, #104]	; (800c0ec <endfiniloop+0x22>)

0800c084 <dloop>:
 800c084:	429a      	cmp	r2, r3
 800c086:	bf3e      	ittt	cc
 800c088:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08c:	f842 0b04 	strcc.w	r0, [r2], #4
 800c090:	e7f8      	bcc.n	800c084 <dloop>
 800c092:	2000      	movs	r0, #0
 800c094:	4916      	ldr	r1, [pc, #88]	; (800c0f0 <endfiniloop+0x26>)
 800c096:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <endfiniloop+0x2a>)

0800c098 <bloop>:
 800c098:	4291      	cmp	r1, r2
 800c09a:	bf3c      	itt	cc
 800c09c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a0:	e7fa      	bcc.n	800c098 <bloop>
 800c0a2:	f000 fd15 	bl	800cad0 <__late_init>
 800c0a6:	4c14      	ldr	r4, [pc, #80]	; (800c0f8 <endfiniloop+0x2e>)
 800c0a8:	4d14      	ldr	r5, [pc, #80]	; (800c0fc <endfiniloop+0x32>)

0800c0aa <initloop>:
 800c0aa:	42ac      	cmp	r4, r5
 800c0ac:	da03      	bge.n	800c0b6 <endinitloop>
 800c0ae:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b2:	4788      	blx	r1
 800c0b4:	e7f9      	b.n	800c0aa <initloop>

0800c0b6 <endinitloop>:
 800c0b6:	f006 f8cb 	bl	8012250 <main>
 800c0ba:	4c11      	ldr	r4, [pc, #68]	; (800c100 <endfiniloop+0x36>)
 800c0bc:	4d11      	ldr	r5, [pc, #68]	; (800c104 <endfiniloop+0x3a>)

0800c0be <finiloop>:
 800c0be:	42ac      	cmp	r4, r5
 800c0c0:	da03      	bge.n	800c0ca <endfiniloop>
 800c0c2:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c6:	4788      	blx	r1
 800c0c8:	e7f9      	b.n	800c0be <finiloop>

0800c0ca <endfiniloop>:
 800c0ca:	f000 bd09 	b.w	800cae0 <__default_exit>
 800c0ce:	0000      	.short	0x0000
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	55555555 	.word	0x55555555
 800c0d8:	20000000 	.word	0x20000000
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	20000400 	.word	0x20000400
 800c0e4:	08013b48 	.word	0x08013b48
 800c0e8:	20000800 	.word	0x20000800
 800c0ec:	20000c3c 	.word	0x20000c3c
 800c0f0:	20000c40 	.word	0x20000c40
 800c0f4:	20002e28 	.word	0x20002e28
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
 800c104:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f000 ffe4 	bl	800d100 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f000 ff02 	bl	800cf40 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f092 0f00 	teq	r2, #0
 800c42a:	bf14      	ite	ne
 800c42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c430:	4770      	bxeq	lr
 800c432:	b530      	push	{r4, r5, lr}
 800c434:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c440:	e720      	b.n	800c284 <__adddf3+0x138>
 800c442:	bf00      	nop

0800c444 <__aeabi_ul2d>:
 800c444:	ea50 0201 	orrs.w	r2, r0, r1
 800c448:	bf08      	it	eq
 800c44a:	4770      	bxeq	lr
 800c44c:	b530      	push	{r4, r5, lr}
 800c44e:	f04f 0500 	mov.w	r5, #0
 800c452:	e00a      	b.n	800c46a <__aeabi_l2d+0x16>

0800c454 <__aeabi_l2d>:
 800c454:	ea50 0201 	orrs.w	r2, r0, r1
 800c458:	bf08      	it	eq
 800c45a:	4770      	bxeq	lr
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c462:	d502      	bpl.n	800c46a <__aeabi_l2d+0x16>
 800c464:	4240      	negs	r0, r0
 800c466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c46a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c46e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c476:	f43f aedc 	beq.w	800c232 <__adddf3+0xe6>
 800c47a:	f04f 0203 	mov.w	r2, #3
 800c47e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c482:	bf18      	it	ne
 800c484:	3203      	addne	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c492:	f1c2 0320 	rsb	r3, r2, #32
 800c496:	fa00 fc03 	lsl.w	ip, r0, r3
 800c49a:	fa20 f002 	lsr.w	r0, r0, r2
 800c49e:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4a2:	ea40 000e 	orr.w	r0, r0, lr
 800c4a6:	fa21 f102 	lsr.w	r1, r1, r2
 800c4aa:	4414      	add	r4, r2
 800c4ac:	e6c1      	b.n	800c232 <__adddf3+0xe6>
 800c4ae:	bf00      	nop

0800c4b0 <__aeabi_dmul>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4be:	bf1d      	ittte	ne
 800c4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4c4:	ea94 0f0c 	teqne	r4, ip
 800c4c8:	ea95 0f0c 	teqne	r5, ip
 800c4cc:	f000 f8de 	bleq	800c68c <__aeabi_dmul+0x1dc>
 800c4d0:	442c      	add	r4, r5
 800c4d2:	ea81 0603 	eor.w	r6, r1, r3
 800c4d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4e2:	bf18      	it	ne
 800c4e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f0:	d038      	beq.n	800c564 <__aeabi_dmul+0xb4>
 800c4f2:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4f6:	f04f 0500 	mov.w	r5, #0
 800c4fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c502:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c506:	f04f 0600 	mov.w	r6, #0
 800c50a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c50e:	f09c 0f00 	teq	ip, #0
 800c512:	bf18      	it	ne
 800c514:	f04e 0e01 	orrne.w	lr, lr, #1
 800c518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c51c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c524:	d204      	bcs.n	800c530 <__aeabi_dmul+0x80>
 800c526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c52a:	416d      	adcs	r5, r5
 800c52c:	eb46 0606 	adc.w	r6, r6, r6
 800c530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c53c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c548:	bf88      	it	hi
 800c54a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c54e:	d81e      	bhi.n	800c58e <__aeabi_dmul+0xde>
 800c550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c554:	bf08      	it	eq
 800c556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c55a:	f150 0000 	adcs.w	r0, r0, #0
 800c55e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c568:	ea46 0101 	orr.w	r1, r6, r1
 800c56c:	ea40 0002 	orr.w	r0, r0, r2
 800c570:	ea81 0103 	eor.w	r1, r1, r3
 800c574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c578:	bfc2      	ittt	gt
 800c57a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c57e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c582:	bd70      	popgt	{r4, r5, r6, pc}
 800c584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c588:	f04f 0e00 	mov.w	lr, #0
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f300 80ab 	bgt.w	800c6e8 <__aeabi_dmul+0x238>
 800c592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c596:	bfde      	ittt	le
 800c598:	2000      	movle	r0, #0
 800c59a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c59e:	bd70      	pople	{r4, r5, r6, pc}
 800c5a0:	f1c4 0400 	rsb	r4, r4, #0
 800c5a4:	3c20      	subs	r4, #32
 800c5a6:	da35      	bge.n	800c614 <__aeabi_dmul+0x164>
 800c5a8:	340c      	adds	r4, #12
 800c5aa:	dc1b      	bgt.n	800c5e4 <__aeabi_dmul+0x134>
 800c5ac:	f104 0414 	add.w	r4, r4, #20
 800c5b0:	f1c4 0520 	rsb	r5, r4, #32
 800c5b4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5b8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5bc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5c0:	ea40 0002 	orr.w	r0, r0, r2
 800c5c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5d0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5d4:	eb42 0106 	adc.w	r1, r2, r6
 800c5d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5dc:	bf08      	it	eq
 800c5de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f1c4 040c 	rsb	r4, r4, #12
 800c5e8:	f1c4 0520 	rsb	r5, r4, #32
 800c5ec:	fa00 f304 	lsl.w	r3, r0, r4
 800c5f0:	fa20 f005 	lsr.w	r0, r0, r5
 800c5f4:	fa01 f204 	lsl.w	r2, r1, r4
 800c5f8:	ea40 0002 	orr.w	r0, r0, r2
 800c5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c604:	f141 0100 	adc.w	r1, r1, #0
 800c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c60c:	bf08      	it	eq
 800c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f1c4 0520 	rsb	r5, r4, #32
 800c618:	fa00 f205 	lsl.w	r2, r0, r5
 800c61c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c620:	fa20 f304 	lsr.w	r3, r0, r4
 800c624:	fa01 f205 	lsl.w	r2, r1, r5
 800c628:	ea43 0302 	orr.w	r3, r3, r2
 800c62c:	fa21 f004 	lsr.w	r0, r1, r4
 800c630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c634:	fa21 f204 	lsr.w	r2, r1, r4
 800c638:	ea20 0002 	bic.w	r0, r0, r2
 800c63c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c644:	bf08      	it	eq
 800c646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f094 0f00 	teq	r4, #0
 800c650:	d10f      	bne.n	800c672 <__aeabi_dmul+0x1c2>
 800c652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c656:	0040      	lsls	r0, r0, #1
 800c658:	eb41 0101 	adc.w	r1, r1, r1
 800c65c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c660:	bf08      	it	eq
 800c662:	3c01      	subeq	r4, #1
 800c664:	d0f7      	beq.n	800c656 <__aeabi_dmul+0x1a6>
 800c666:	ea41 0106 	orr.w	r1, r1, r6
 800c66a:	f095 0f00 	teq	r5, #0
 800c66e:	bf18      	it	ne
 800c670:	4770      	bxne	lr
 800c672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c676:	0052      	lsls	r2, r2, #1
 800c678:	eb43 0303 	adc.w	r3, r3, r3
 800c67c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c680:	bf08      	it	eq
 800c682:	3d01      	subeq	r5, #1
 800c684:	d0f7      	beq.n	800c676 <__aeabi_dmul+0x1c6>
 800c686:	ea43 0306 	orr.w	r3, r3, r6
 800c68a:	4770      	bx	lr
 800c68c:	ea94 0f0c 	teq	r4, ip
 800c690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c694:	bf18      	it	ne
 800c696:	ea95 0f0c 	teqne	r5, ip
 800c69a:	d00c      	beq.n	800c6b6 <__aeabi_dmul+0x206>
 800c69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6a0:	bf18      	it	ne
 800c6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6a6:	d1d1      	bne.n	800c64c <__aeabi_dmul+0x19c>
 800c6a8:	ea81 0103 	eor.w	r1, r1, r3
 800c6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6b0:	f04f 0000 	mov.w	r0, #0
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ba:	bf06      	itte	eq
 800c6bc:	4610      	moveq	r0, r2
 800c6be:	4619      	moveq	r1, r3
 800c6c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6c4:	d019      	beq.n	800c6fa <__aeabi_dmul+0x24a>
 800c6c6:	ea94 0f0c 	teq	r4, ip
 800c6ca:	d102      	bne.n	800c6d2 <__aeabi_dmul+0x222>
 800c6cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6d0:	d113      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6d2:	ea95 0f0c 	teq	r5, ip
 800c6d6:	d105      	bne.n	800c6e4 <__aeabi_dmul+0x234>
 800c6d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6dc:	bf1c      	itt	ne
 800c6de:	4610      	movne	r0, r2
 800c6e0:	4619      	movne	r1, r3
 800c6e2:	d10a      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6e4:	ea81 0103 	eor.w	r1, r1, r3
 800c6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c702:	bd70      	pop	{r4, r5, r6, pc}

0800c704 <__aeabi_ddiv>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c712:	bf1d      	ittte	ne
 800c714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c718:	ea94 0f0c 	teqne	r4, ip
 800c71c:	ea95 0f0c 	teqne	r5, ip
 800c720:	f000 f8a7 	bleq	800c872 <__aeabi_ddiv+0x16e>
 800c724:	eba4 0405 	sub.w	r4, r4, r5
 800c728:	ea81 0e03 	eor.w	lr, r1, r3
 800c72c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c734:	f000 8088 	beq.w	800c848 <__aeabi_ddiv+0x144>
 800c738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c73c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c74c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c75c:	429d      	cmp	r5, r3
 800c75e:	bf08      	it	eq
 800c760:	4296      	cmpeq	r6, r2
 800c762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c76a:	d202      	bcs.n	800c772 <__aeabi_ddiv+0x6e>
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c772:	1ab6      	subs	r6, r6, r2
 800c774:	eb65 0503 	sbc.w	r5, r5, r3
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c77e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c786:	ebb6 0e02 	subs.w	lr, r6, r2
 800c78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c78e:	bf22      	ittt	cs
 800c790:	1ab6      	subcs	r6, r6, r2
 800c792:	4675      	movcs	r5, lr
 800c794:	ea40 000c 	orrcs.w	r0, r0, ip
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c79e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7a6:	bf22      	ittt	cs
 800c7a8:	1ab6      	subcs	r6, r6, r2
 800c7aa:	4675      	movcs	r5, lr
 800c7ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7be:	bf22      	ittt	cs
 800c7c0:	1ab6      	subcs	r6, r6, r2
 800c7c2:	4675      	movcs	r5, lr
 800c7c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7c8:	085b      	lsrs	r3, r3, #1
 800c7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7d6:	bf22      	ittt	cs
 800c7d8:	1ab6      	subcs	r6, r6, r2
 800c7da:	4675      	movcs	r5, lr
 800c7dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7e0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7e4:	d018      	beq.n	800c818 <__aeabi_ddiv+0x114>
 800c7e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c7f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c7fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c7fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c802:	d1c0      	bne.n	800c786 <__aeabi_ddiv+0x82>
 800c804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c808:	d10b      	bne.n	800c822 <__aeabi_ddiv+0x11e>
 800c80a:	ea41 0100 	orr.w	r1, r1, r0
 800c80e:	f04f 0000 	mov.w	r0, #0
 800c812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c816:	e7b6      	b.n	800c786 <__aeabi_ddiv+0x82>
 800c818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c81c:	bf04      	itt	eq
 800c81e:	4301      	orreq	r1, r0
 800c820:	2000      	moveq	r0, #0
 800c822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c826:	bf88      	it	hi
 800c828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c82c:	f63f aeaf 	bhi.w	800c58e <__aeabi_dmul+0xde>
 800c830:	ebb5 0c03 	subs.w	ip, r5, r3
 800c834:	bf04      	itt	eq
 800c836:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c83e:	f150 0000 	adcs.w	r0, r0, #0
 800c842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c84c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c854:	bfc2      	ittt	gt
 800c856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c85a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c85e:	bd70      	popgt	{r4, r5, r6, pc}
 800c860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c864:	f04f 0e00 	mov.w	lr, #0
 800c868:	3c01      	subs	r4, #1
 800c86a:	e690      	b.n	800c58e <__aeabi_dmul+0xde>
 800c86c:	ea45 0e06 	orr.w	lr, r5, r6
 800c870:	e68d      	b.n	800c58e <__aeabi_dmul+0xde>
 800c872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c876:	ea94 0f0c 	teq	r4, ip
 800c87a:	bf08      	it	eq
 800c87c:	ea95 0f0c 	teqeq	r5, ip
 800c880:	f43f af3b 	beq.w	800c6fa <__aeabi_dmul+0x24a>
 800c884:	ea94 0f0c 	teq	r4, ip
 800c888:	d10a      	bne.n	800c8a0 <__aeabi_ddiv+0x19c>
 800c88a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c88e:	f47f af34 	bne.w	800c6fa <__aeabi_dmul+0x24a>
 800c892:	ea95 0f0c 	teq	r5, ip
 800c896:	f47f af25 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c89a:	4610      	mov	r0, r2
 800c89c:	4619      	mov	r1, r3
 800c89e:	e72c      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8a0:	ea95 0f0c 	teq	r5, ip
 800c8a4:	d106      	bne.n	800c8b4 <__aeabi_ddiv+0x1b0>
 800c8a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8aa:	f43f aefd 	beq.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	e722      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8b8:	bf18      	it	ne
 800c8ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8be:	f47f aec5 	bne.w	800c64c <__aeabi_dmul+0x19c>
 800c8c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8c6:	f47f af0d 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c8ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8ce:	f47f aeeb 	bne.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8d2:	e712      	b.n	800c6fa <__aeabi_dmul+0x24a>
	...

0800c8e0 <__aeabi_d2f>:
 800c8e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c8e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800c8e8:	bf24      	itt	cs
 800c8ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800c8ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800c8f2:	d90d      	bls.n	800c910 <__aeabi_d2f+0x30>
 800c8f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800c8f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800c8fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800c900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800c904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800c908:	bf08      	it	eq
 800c90a:	f020 0001 	biceq.w	r0, r0, #1
 800c90e:	4770      	bx	lr
 800c910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800c914:	d121      	bne.n	800c95a <__aeabi_d2f+0x7a>
 800c916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800c91a:	bfbc      	itt	lt
 800c91c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800c920:	4770      	bxlt	lr
 800c922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c926:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800c92a:	f1c2 0218 	rsb	r2, r2, #24
 800c92e:	f1c2 0c20 	rsb	ip, r2, #32
 800c932:	fa10 f30c 	lsls.w	r3, r0, ip
 800c936:	fa20 f002 	lsr.w	r0, r0, r2
 800c93a:	bf18      	it	ne
 800c93c:	f040 0001 	orrne.w	r0, r0, #1
 800c940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800c948:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c94c:	ea40 000c 	orr.w	r0, r0, ip
 800c950:	fa23 f302 	lsr.w	r3, r3, r2
 800c954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c958:	e7cc      	b.n	800c8f4 <__aeabi_d2f+0x14>
 800c95a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800c95e:	d107      	bne.n	800c970 <__aeabi_d2f+0x90>
 800c960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800c964:	bf1e      	ittt	ne
 800c966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800c96a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800c96e:	4770      	bxne	lr
 800c970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800c974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800c978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop

0800c980 <memcpy>:
 800c980:	4684      	mov	ip, r0
 800c982:	ea41 0300 	orr.w	r3, r1, r0
 800c986:	f013 0303 	ands.w	r3, r3, #3
 800c98a:	d16d      	bne.n	800ca68 <memcpy+0xe8>
 800c98c:	3a40      	subs	r2, #64	; 0x40
 800c98e:	d341      	bcc.n	800ca14 <memcpy+0x94>
 800c990:	f851 3b04 	ldr.w	r3, [r1], #4
 800c994:	f840 3b04 	str.w	r3, [r0], #4
 800c998:	f851 3b04 	ldr.w	r3, [r1], #4
 800c99c:	f840 3b04 	str.w	r3, [r0], #4
 800c9a0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9a4:	f840 3b04 	str.w	r3, [r0], #4
 800c9a8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9ac:	f840 3b04 	str.w	r3, [r0], #4
 800c9b0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9b4:	f840 3b04 	str.w	r3, [r0], #4
 800c9b8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9bc:	f840 3b04 	str.w	r3, [r0], #4
 800c9c0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9c4:	f840 3b04 	str.w	r3, [r0], #4
 800c9c8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9cc:	f840 3b04 	str.w	r3, [r0], #4
 800c9d0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9d4:	f840 3b04 	str.w	r3, [r0], #4
 800c9d8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9dc:	f840 3b04 	str.w	r3, [r0], #4
 800c9e0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9e4:	f840 3b04 	str.w	r3, [r0], #4
 800c9e8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9ec:	f840 3b04 	str.w	r3, [r0], #4
 800c9f0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9f4:	f840 3b04 	str.w	r3, [r0], #4
 800c9f8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9fc:	f840 3b04 	str.w	r3, [r0], #4
 800ca00:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca04:	f840 3b04 	str.w	r3, [r0], #4
 800ca08:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca0c:	f840 3b04 	str.w	r3, [r0], #4
 800ca10:	3a40      	subs	r2, #64	; 0x40
 800ca12:	d2bd      	bcs.n	800c990 <memcpy+0x10>
 800ca14:	3230      	adds	r2, #48	; 0x30
 800ca16:	d311      	bcc.n	800ca3c <memcpy+0xbc>
 800ca18:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca1c:	f840 3b04 	str.w	r3, [r0], #4
 800ca20:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca24:	f840 3b04 	str.w	r3, [r0], #4
 800ca28:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca2c:	f840 3b04 	str.w	r3, [r0], #4
 800ca30:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca34:	f840 3b04 	str.w	r3, [r0], #4
 800ca38:	3a10      	subs	r2, #16
 800ca3a:	d2ed      	bcs.n	800ca18 <memcpy+0x98>
 800ca3c:	320c      	adds	r2, #12
 800ca3e:	d305      	bcc.n	800ca4c <memcpy+0xcc>
 800ca40:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca44:	f840 3b04 	str.w	r3, [r0], #4
 800ca48:	3a04      	subs	r2, #4
 800ca4a:	d2f9      	bcs.n	800ca40 <memcpy+0xc0>
 800ca4c:	3204      	adds	r2, #4
 800ca4e:	d008      	beq.n	800ca62 <memcpy+0xe2>
 800ca50:	07d2      	lsls	r2, r2, #31
 800ca52:	bf1c      	itt	ne
 800ca54:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800ca58:	f800 3b01 	strbne.w	r3, [r0], #1
 800ca5c:	d301      	bcc.n	800ca62 <memcpy+0xe2>
 800ca5e:	880b      	ldrh	r3, [r1, #0]
 800ca60:	8003      	strh	r3, [r0, #0]
 800ca62:	4660      	mov	r0, ip
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	2a08      	cmp	r2, #8
 800ca6a:	d313      	bcc.n	800ca94 <memcpy+0x114>
 800ca6c:	078b      	lsls	r3, r1, #30
 800ca6e:	d08d      	beq.n	800c98c <memcpy+0xc>
 800ca70:	f010 0303 	ands.w	r3, r0, #3
 800ca74:	d08a      	beq.n	800c98c <memcpy+0xc>
 800ca76:	f1c3 0304 	rsb	r3, r3, #4
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	07db      	lsls	r3, r3, #31
 800ca7e:	bf1c      	itt	ne
 800ca80:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800ca84:	f800 3b01 	strbne.w	r3, [r0], #1
 800ca88:	d380      	bcc.n	800c98c <memcpy+0xc>
 800ca8a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ca8e:	f820 3b02 	strh.w	r3, [r0], #2
 800ca92:	e77b      	b.n	800c98c <memcpy+0xc>
 800ca94:	3a04      	subs	r2, #4
 800ca96:	d3d9      	bcc.n	800ca4c <memcpy+0xcc>
 800ca98:	3a01      	subs	r2, #1
 800ca9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca9e:	f800 3b01 	strb.w	r3, [r0], #1
 800caa2:	d2f9      	bcs.n	800ca98 <memcpy+0x118>
 800caa4:	780b      	ldrb	r3, [r1, #0]
 800caa6:	7003      	strb	r3, [r0, #0]
 800caa8:	784b      	ldrb	r3, [r1, #1]
 800caaa:	7043      	strb	r3, [r0, #1]
 800caac:	788b      	ldrb	r3, [r1, #2]
 800caae:	7083      	strb	r3, [r0, #2]
 800cab0:	4660      	mov	r0, ip
 800cab2:	4770      	bx	lr
	...

0800cac0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	f3af 8000 	nop.w
 800cac8:	f3af 8000 	nop.w
 800cacc:	f3af 8000 	nop.w

0800cad0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	f3af 8000 	nop.w
 800cad8:	f3af 8000 	nop.w
 800cadc:	f3af 8000 	nop.w

0800cae0 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  }
 800cae0:	e7fe      	b.n	800cae0 <__default_exit>
 800cae2:	bf00      	nop
 800cae4:	f3af 8000 	nop.w
 800cae8:	f3af 8000 	nop.w
 800caec:	f3af 8000 	nop.w

0800caf0 <_unhandled_exception>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 800caf0:	e7fe      	b.n	800caf0 <_unhandled_exception>
 800caf2:	bf00      	nop
 800caf4:	f3af 8000 	nop.w
 800caf8:	f3af 8000 	nop.w
 800cafc:	f3af 8000 	nop.w

0800cb00 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800cb00:	e7fe      	b.n	800cb00 <_idle_thread>
 800cb02:	bf00      	nop
 800cb04:	f3af 8000 	nop.w
 800cb08:	f3af 8000 	nop.w
 800cb0c:	f3af 8000 	nop.w

0800cb10 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cb10:	4b20      	ldr	r3, [pc, #128]	; (800cb94 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800cb12:	4a21      	ldr	r2, [pc, #132]	; (800cb98 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cb14:	4821      	ldr	r0, [pc, #132]	; (800cb9c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800cb16:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cb18:	2400      	movs	r4, #0
 800cb1a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cb1c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cb1e:	4e20      	ldr	r6, [pc, #128]	; (800cba0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cb20:	4d20      	ldr	r5, [pc, #128]	; (800cba4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800cb22:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800cb26:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 800cb28:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800cb2a:	60da      	str	r2, [r3, #12]
 800cb2c:	68f2      	ldr	r2, [r6, #12]
 800cb2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cb32:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cb34:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800cb36:	2120      	movs	r1, #32
 800cb38:	f042 0201 	orr.w	r2, r2, #1
 800cb3c:	2610      	movs	r6, #16
 800cb3e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800cb40:	b083      	sub	sp, #12
 800cb42:	77de      	strb	r6, [r3, #31]
 800cb44:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 800cb48:	f000 f8fa 	bl	800cd40 <_scheduler_init>
  _vt_init();
 800cb4c:	f000 f878 	bl	800cc40 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800cb50:	f000 fb5e 	bl	800d210 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800cb54:	f000 fcd4 	bl	800d500 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800cb58:	f000 fd0a 	bl	800d570 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	2140      	movs	r1, #64	; 0x40
 800cb60:	f000 f9fe 	bl	800cf60 <_thread_init>
 800cb64:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800cb68:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cb6a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800cb6c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cb6e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800cb72:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	490c      	ldr	r1, [pc, #48]	; (800cba8 <chSysInit+0x98>)
 800cb78:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800cb7a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800cb7e:	9400      	str	r4, [sp, #0]
 800cb80:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800cb84:	4b09      	ldr	r3, [pc, #36]	; (800cbac <chSysInit+0x9c>)
 800cb86:	f000 fa4b 	bl	800d020 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800cb8a:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <chSysInit+0xa0>)
 800cb8c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800cb8e:	b003      	add	sp, #12
 800cb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb92:	bf00      	nop
 800cb94:	e000ed00 	.word	0xe000ed00
 800cb98:	05fa0300 	.word	0x05fa0300
 800cb9c:	e0001000 	.word	0xe0001000
 800cba0:	e000edf0 	.word	0xe000edf0
 800cba4:	20000c70 	.word	0x20000c70
 800cba8:	08013190 	.word	0x08013190
 800cbac:	0800cb01 	.word	0x0800cb01
 800cbb0:	08013180 	.word	0x08013180
 800cbb4:	f3af 8000 	nop.w
 800cbb8:	f3af 8000 	nop.w
 800cbbc:	f3af 8000 	nop.w

0800cbc0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800cbc2:	4d13      	ldr	r5, [pc, #76]	; (800cc10 <chSysTimerHandlerI+0x50>)
 800cbc4:	69aa      	ldr	r2, [r5, #24]
 800cbc6:	7fd3      	ldrb	r3, [r2, #31]
 800cbc8:	b10b      	cbz	r3, 800cbce <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800cbce:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cbd0:	69eb      	ldr	r3, [r5, #28]
 800cbd2:	4e10      	ldr	r6, [pc, #64]	; (800cc14 <chSysTimerHandlerI+0x54>)
 800cbd4:	3101      	adds	r1, #1
 800cbd6:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800cbd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cbda:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800cbdc:	f102 0201 	add.w	r2, r2, #1
 800cbe0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cbe2:	d013      	beq.n	800cc0c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800cbe4:	689c      	ldr	r4, [r3, #8]
 800cbe6:	3c01      	subs	r4, #1
 800cbe8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cbea:	b97c      	cbnz	r4, 800cc0c <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cbec:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cbee:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800cbf0:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800cbf2:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cbf4:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800cbf6:	61ea      	str	r2, [r5, #28]
 800cbf8:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800cbfc:	6918      	ldr	r0, [r3, #16]
 800cbfe:	4788      	blx	r1
 800cc00:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cc04:	69eb      	ldr	r3, [r5, #28]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	d0f0      	beq.n	800cbee <chSysTimerHandlerI+0x2e>
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000c40 	.word	0x20000c40
 800cc14:	20000c5c 	.word	0x20000c5c
 800cc18:	f3af 8000 	nop.w
 800cc1c:	f3af 8000 	nop.w

0800cc20 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800cc20:	4a03      	ldr	r2, [pc, #12]	; (800cc30 <chSysPolledDelayX+0x10>)
 800cc22:	6851      	ldr	r1, [r2, #4]
 800cc24:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 800cc26:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800cc28:	4298      	cmp	r0, r3
 800cc2a:	d8fb      	bhi.n	800cc24 <chSysPolledDelayX+0x4>
  }
}
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	e0001000 	.word	0xe0001000
 800cc34:	f3af 8000 	nop.w
 800cc38:	f3af 8000 	nop.w
 800cc3c:	f3af 8000 	nop.w

0800cc40 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cc40:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cc46:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cc4a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc4c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cc4e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cc50:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cc52:	621a      	str	r2, [r3, #32]
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	20000c40 	.word	0x20000c40
 800cc5c:	f3af 8000 	nop.w

0800cc60 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800cc60:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800cc62:	4e0d      	ldr	r6, [pc, #52]	; (800cc98 <chVTDoSetI+0x38>)
 800cc64:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800cc66:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800cc68:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cc6a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800cc6c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cc6e:	d904      	bls.n	800cc7a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800cc70:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800cc72:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cc74:	68a5      	ldr	r5, [r4, #8]
 800cc76:	428d      	cmp	r5, r1
 800cc78:	d3fa      	bcc.n	800cc70 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800cc7e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800cc80:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800cc82:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800cc84:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cc86:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cc8c:	1a59      	subs	r1, r3, r1
 800cc8e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc90:	6272      	str	r2, [r6, #36]	; 0x24
}
 800cc92:	bc70      	pop	{r4, r5, r6}
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	20000c40 	.word	0x20000c40
 800cc9c:	f3af 8000 	nop.w

0800cca0 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cca0:	6803      	ldr	r3, [r0, #0]
 800cca2:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800cca4:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800cca6:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cca8:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ccaa:	4c06      	ldr	r4, [pc, #24]	; (800ccc4 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800ccac:	442a      	add	r2, r5
 800ccae:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800ccb0:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800ccb2:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800ccb4:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800ccba:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800ccbc:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ccbe:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800ccc0:	bc30      	pop	{r4, r5}
 800ccc2:	4770      	bx	lr
 800ccc4:	20000c40 	.word	0x20000c40
 800ccc8:	f3af 8000 	nop.w
 800cccc:	f3af 8000 	nop.w

0800ccd0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800ccd0:	b410      	push	{r4}
 800ccd2:	2320      	movs	r3, #32
 800ccd4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800ccd8:	7f03      	ldrb	r3, [r0, #28]
 800ccda:	2b07      	cmp	r3, #7
 800ccdc:	d80e      	bhi.n	800ccfc <wakeup+0x2c>
 800ccde:	e8df f003 	tbb	[pc, r3]
 800cce2:	0d27      	.short	0x0d27
 800cce4:	0408230d 	.word	0x0408230d
 800cce8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800ccea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800ccec:	6893      	ldr	r3, [r2, #8]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800ccf2:	e890 000c 	ldmia.w	r0, {r2, r3}
 800ccf6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800ccf8:	6802      	ldr	r2, [r0, #0]
 800ccfa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800ccfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd00:	2200      	movs	r2, #0
 800cd02:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cd04:	4b0d      	ldr	r3, [pc, #52]	; (800cd3c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800cd06:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd08:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cd0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cd0c:	689a      	ldr	r2, [r3, #8]
 800cd0e:	428a      	cmp	r2, r1
 800cd10:	d2fb      	bcs.n	800cd0a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cd16:	6003      	str	r3, [r0, #0]
 800cd18:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cd1a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800cd1c:	6058      	str	r0, [r3, #4]
 800cd1e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cd22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd26:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800cd28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
    break;
 800cd2e:	e7e5      	b.n	800ccfc <wakeup+0x2c>
 800cd30:	2300      	movs	r3, #0
 800cd32:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	20000c40 	.word	0x20000c40

0800cd40 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cd40:	4b03      	ldr	r3, [pc, #12]	; (800cd50 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800cd42:	2200      	movs	r2, #0
 800cd44:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800cd46:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800cd48:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800cd4a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800cd4c:	609a      	str	r2, [r3, #8]
 800cd4e:	4770      	bx	lr
 800cd50:	20000c40 	.word	0x20000c40
 800cd54:	f3af 8000 	nop.w
 800cd58:	f3af 8000 	nop.w
 800cd5c:	f3af 8000 	nop.w

0800cd60 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd60:	2200      	movs	r2, #0
 800cd62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800cd66:	b410      	push	{r4}
 800cd68:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd6a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cd6c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	428a      	cmp	r2, r1
 800cd72:	d2fb      	bcs.n	800cd6c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cd74:	685a      	ldr	r2, [r3, #4]
 800cd76:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cd78:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800cd7a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cd7c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800cd7e:	605c      	str	r4, [r3, #4]

  return tp;
}
 800cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	20000c40 	.word	0x20000c40
 800cd8c:	f3af 8000 	nop.w

0800cd90 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800cd90:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <chSchGoSleepS+0x24>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800cd92:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cd94:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800cd96:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 800cd98:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800cd9a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cd9c:	2501      	movs	r5, #1
  otp = currp;
  otp->p_state = newstate;
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cd9e:	2004      	movs	r0, #4
 800cda0:	77c8      	strb	r0, [r1, #31]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cda2:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cda4:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800cda6:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 800cda8:	4610      	mov	r0, r2
}
 800cdaa:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800cdac:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800cdae:	f7ff b9af 	b.w	800c110 <_port_switch>
 800cdb2:	bf00      	nop
 800cdb4:	20000c40 	.word	0x20000c40
 800cdb8:	f3af 8000 	nop.w
 800cdbc:	f3af 8000 	nop.w

0800cdc0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800cdc0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800cdc2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800cdc4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800cdc6:	d012      	beq.n	800cdee <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800cdc8:	4c0c      	ldr	r4, [pc, #48]	; (800cdfc <chSchGoSleepTimeoutS+0x3c>)
 800cdca:	4a0d      	ldr	r2, [pc, #52]	; (800ce00 <chSchGoSleepTimeoutS+0x40>)
 800cdcc:	69a3      	ldr	r3, [r4, #24]
 800cdce:	4605      	mov	r5, r0
 800cdd0:	a801      	add	r0, sp, #4
 800cdd2:	f7ff ff45 	bl	800cc60 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f7ff ffda 	bl	800cd90 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800cddc:	9b04      	ldr	r3, [sp, #16]
 800cdde:	b113      	cbz	r3, 800cde6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800cde0:	a801      	add	r0, sp, #4
 800cde2:	f7ff ff5d 	bl	800cca0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800cde6:	69a3      	ldr	r3, [r4, #24]
}
 800cde8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cdea:	b007      	add	sp, #28
 800cdec:	bd30      	pop	{r4, r5, pc}
 800cdee:	4c03      	ldr	r4, [pc, #12]	; (800cdfc <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800cdf0:	f7ff ffce 	bl	800cd90 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800cdf4:	69a3      	ldr	r3, [r4, #24]
}
 800cdf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cdf8:	b007      	add	sp, #28
 800cdfa:	bd30      	pop	{r4, r5, pc}
 800cdfc:	20000c40 	.word	0x20000c40
 800ce00:	0800ccd1 	.word	0x0800ccd1
 800ce04:	f3af 8000 	nop.w
 800ce08:	f3af 8000 	nop.w
 800ce0c:	f3af 8000 	nop.w

0800ce10 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce10:	4b14      	ldr	r3, [pc, #80]	; (800ce64 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800ce12:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce14:	699e      	ldr	r6, [r3, #24]
 800ce16:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800ce18:	4605      	mov	r5, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce1a:	68b0      	ldr	r0, [r6, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800ce1c:	6269      	str	r1, [r5, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce1e:	4284      	cmp	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ce20:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce24:	d80b      	bhi.n	800ce3e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ce26:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800ce28:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	4294      	cmp	r4, r2
 800ce2e:	d9fb      	bls.n	800ce28 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	606a      	str	r2, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800ce34:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ce36:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 800ce38:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800ce3a:	bc70      	pop	{r4, r5, r6}
 800ce3c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ce3e:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800ce40:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 800ce42:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ce44:	6891      	ldr	r1, [r2, #8]
 800ce46:	4288      	cmp	r0, r1
 800ce48:	d9fb      	bls.n	800ce42 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800ce4a:	6850      	ldr	r0, [r2, #4]
 800ce4c:	6070      	str	r0, [r6, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800ce4e:	2401      	movs	r4, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800ce50:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ce52:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 800ce54:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800ce56:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800ce5c:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800ce5e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800ce60:	f7ff b956 	b.w	800c110 <_port_switch>
 800ce64:	20000c40 	.word	0x20000c40
 800ce68:	f3af 8000 	nop.w
 800ce6c:	f3af 8000 	nop.w

0800ce70 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ce70:	4b08      	ldr	r3, [pc, #32]	; (800ce94 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800ce72:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ce74:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ce76:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ce78:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800ce7a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ce7c:	b921      	cbnz	r1, 800ce88 <chSchIsPreemptionRequired+0x18>
 800ce7e:	4283      	cmp	r3, r0
 800ce80:	bf34      	ite	cc
 800ce82:	2000      	movcc	r0, #0
 800ce84:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800ce86:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ce88:	4283      	cmp	r3, r0
 800ce8a:	bf94      	ite	ls
 800ce8c:	2000      	movls	r0, #0
 800ce8e:	2001      	movhi	r0, #1
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	20000c40 	.word	0x20000c40
 800ce98:	f3af 8000 	nop.w
 800ce9c:	f3af 8000 	nop.w

0800cea0 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800cea0:	4a0e      	ldr	r2, [pc, #56]	; (800cedc <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cea2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 800cea4:	b4f0      	push	{r4, r5, r6, r7}

  tqp->p_next = tp->p_next;
 800cea6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp;

  otp = currp;
 800cea8:	6994      	ldr	r4, [r2, #24]
 800ceaa:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ceac:	2701      	movs	r7, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ceae:	2604      	movs	r6, #4
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ceb0:	2500      	movs	r5, #0
 800ceb2:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ceb4:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ceb6:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800ceb8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ceba:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cebc:	7725      	strb	r5, [r4, #28]
 800cebe:	e000      	b.n	800cec2 <chSchDoRescheduleBehind+0x22>
 800cec0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	428a      	cmp	r2, r1
 800cec6:	d2fb      	bcs.n	800cec0 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cecc:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800cece:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ced0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800ced2:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800ced4:	bcf0      	pop	{r4, r5, r6, r7}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800ced6:	f7ff b91b 	b.w	800c110 <_port_switch>
 800ceda:	bf00      	nop
 800cedc:	20000c40 	.word	0x20000c40

0800cee0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800cee0:	4a0d      	ldr	r2, [pc, #52]	; (800cf18 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cee2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 800cee4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 800cee6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp, *cp;

  otp = currp;
 800cee8:	6994      	ldr	r4, [r2, #24]
 800ceea:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ceec:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 800ceee:	2500      	movs	r5, #0
 800cef0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cef2:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cef4:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800cef6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800cef8:	7725      	strb	r5, [r4, #28]
 800cefa:	e000      	b.n	800cefe <chSchDoRescheduleAhead+0x1e>
 800cefc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	428a      	cmp	r2, r1
 800cf02:	d8fb      	bhi.n	800cefc <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800cf08:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800cf0a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800cf0c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800cf0e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 800cf10:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800cf12:	f7ff b8fd 	b.w	800c110 <_port_switch>
 800cf16:	bf00      	nop
 800cf18:	20000c40 	.word	0x20000c40
 800cf1c:	f3af 8000 	nop.w

0800cf20 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800cf20:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <chSchRescheduleS+0x14>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 800cf26:	6892      	ldr	r2, [r2, #8]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d800      	bhi.n	800cf30 <chSchRescheduleS+0x10>
 800cf2e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800cf30:	f7ff bfd6 	b.w	800cee0 <chSchDoRescheduleAhead>
 800cf34:	20000c40 	.word	0x20000c40
 800cf38:	f3af 8000 	nop.w
 800cf3c:	f3af 8000 	nop.w

0800cf40 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800cf40:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <chSchDoReschedule+0x10>)
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	7fdb      	ldrb	r3, [r3, #31]
 800cf46:	b10b      	cbz	r3, 800cf4c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800cf48:	f7ff bfca 	b.w	800cee0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800cf4c:	f7ff bfa8 	b.w	800cea0 <chSchDoRescheduleBehind>
 800cf50:	20000c40 	.word	0x20000c40
 800cf54:	f3af 8000 	nop.w
 800cf58:	f3af 8000 	nop.w
 800cf5c:	f3af 8000 	nop.w

0800cf60 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf64:	4c11      	ldr	r4, [pc, #68]	; (800cfac <_thread_init+0x4c>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800cf66:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf68:	6966      	ldr	r6, [r4, #20]
 800cf6a:	6146      	str	r6, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cf6c:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800cf6e:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cf72:	f04f 0802 	mov.w	r8, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cf76:	f04f 0c04 	mov.w	ip, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cf7a:	f04f 0e01 	mov.w	lr, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800cf7e:	f100 0728 	add.w	r7, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800cf82:	6081      	str	r1, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf84:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cf86:	f880 801c 	strb.w	r8, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cf8a:	f880 c01f 	strb.w	ip, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cf8e:	f880 e01e 	strb.w	lr, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cf92:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800cf94:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800cf96:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800cf98:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800cf9a:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800cf9c:	6130      	str	r0, [r6, #16]
 800cf9e:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800cfa0:	6287      	str	r7, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cfa2:	62c5      	str	r5, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800cfa4:	6305      	str	r5, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800cfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000c40 	.word	0x20000c40

0800cfb0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfb4:	3964      	subs	r1, #100	; 0x64
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cfb6:	4f18      	ldr	r7, [pc, #96]	; (800d018 <chThdCreateI+0x68>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfb8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800d01c <chThdCreateI+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cfbc:	f8d7 e014 	ldr.w	lr, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cfc2:	4401      	add	r1, r0
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cfc4:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfc6:	60c1      	str	r1, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cfc8:	f04f 0b02 	mov.w	fp, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfcc:	640b      	str	r3, [r1, #64]	; 0x40

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cfce:	f04f 0a04 	mov.w	sl, #4
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800cfd2:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cfd6:	f04f 0801 	mov.w	r8, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800cfda:	f100 0c28 	add.w	ip, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfde:	644e      	str	r6, [r1, #68]	; 0x44
 800cfe0:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800cfe4:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cfe6:	6107      	str	r7, [r0, #16]
 800cfe8:	f8c0 e014 	str.w	lr, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800cfec:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cfee:	f880 b01c 	strb.w	fp, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cff2:	f880 a01f 	strb.w	sl, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cff6:	f880 801e 	strb.w	r8, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cffa:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800cffc:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800cffe:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800d000:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800d002:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 800d004:	f8ce 0010 	str.w	r0, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800d008:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 800d00c:	6178      	str	r0, [r7, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d00e:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d010:	6303      	str	r3, [r0, #48]	; 0x30
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 800d012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d016:	bf00      	nop
 800d018:	20000c40 	.word	0x20000c40
 800d01c:	0800c129 	.word	0x0800c129

0800d020 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800d020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	4604      	mov	r4, r0
 800d026:	2520      	movs	r5, #32
 800d028:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d02c:	4e1a      	ldr	r6, [pc, #104]	; (800d098 <chThdCreateStatic+0x78>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d02e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d09c <chThdCreateStatic+0x7c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d032:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d034:	3964      	subs	r1, #100	; 0x64
 800d036:	4401      	add	r1, r0
 800d038:	60c1      	str	r1, [r0, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d03a:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d03c:	640b      	str	r3, [r1, #64]	; 0x40
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d03e:	f100 0b2c 	add.w	fp, r0, #44	; 0x2c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d042:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800d046:	f100 0e28 	add.w	lr, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04c:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d04e:	f04f 0902 	mov.w	r9, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d052:	f04f 0804 	mov.w	r8, #4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d056:	f8c1 a060 	str.w	sl, [r1, #96]	; 0x60
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800d05a:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d05c:	6106      	str	r6, [r0, #16]
 800d05e:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800d060:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800d062:	f880 901c 	strb.w	r9, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d066:	f880 801f 	strb.w	r8, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800d06a:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800d06e:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800d070:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800d072:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800d074:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800d076:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d078:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d07a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800d07c:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d080:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d084:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
 800d088:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d08a:	f7ff fec1 	bl	800ce10 <chSchWakeupS>
 800d08e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800d092:	4620      	mov	r0, r4
 800d094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	20000c40 	.word	0x20000c40
 800d09c:	0800c129 	.word	0x0800c129

0800d0a0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800d0a0:	b508      	push	{r3, lr}
 800d0a2:	4601      	mov	r1, r0
 800d0a4:	2320      	movs	r3, #32
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800d0aa:	2008      	movs	r0, #8
 800d0ac:	f7ff fe88 	bl	800cdc0 <chSchGoSleepTimeoutS>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	bd08      	pop	{r3, pc}
 800d0b8:	f3af 8000 	nop.w
 800d0bc:	f3af 8000 	nop.w

0800d0c0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800d0c0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800d0c2:	4b0e      	ldr	r3, [pc, #56]	; (800d0fc <chThdExitS+0x3c>)
 800d0c4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d0c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800d0c8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d0ca:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800d0ce:	429d      	cmp	r5, r3
 800d0d0:	d007      	beq.n	800d0e2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff fe42 	bl	800cd60 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d0dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d0de:	42ab      	cmp	r3, r5
 800d0e0:	d1f7      	bne.n	800d0d2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800d0e2:	7f63      	ldrb	r3, [r4, #29]
 800d0e4:	079b      	lsls	r3, r3, #30
 800d0e6:	d104      	bne.n	800d0f2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800d0e8:	6963      	ldr	r3, [r4, #20]
 800d0ea:	6922      	ldr	r2, [r4, #16]
 800d0ec:	611a      	str	r2, [r3, #16]
 800d0ee:	6922      	ldr	r2, [r4, #16]
 800d0f0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d0f2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800d0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d0f8:	f7ff be4a 	b.w	800cd90 <chSchGoSleepS>
 800d0fc:	20000c40 	.word	0x20000c40

0800d100 <chThdExit>:
 800d100:	2320      	movs	r3, #32
 800d102:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800d106:	f7ff bfdb 	b.w	800d0c0 <chThdExitS>
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w

0800d110 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800d110:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800d112:	4c05      	ldr	r4, [pc, #20]	; (800d128 <chThdSuspendS+0x18>)
 800d114:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800d116:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800d118:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 800d11a:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800d11c:	2003      	movs	r0, #3
 800d11e:	f7ff fe37 	bl	800cd90 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 800d122:	69a3      	ldr	r3, [r4, #24]
}
 800d124:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d126:	bd10      	pop	{r4, pc}
 800d128:	20000c40 	.word	0x20000c40
 800d12c:	f3af 8000 	nop.w

0800d130 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800d130:	6803      	ldr	r3, [r0, #0]
 800d132:	b12b      	cbz	r3, 800d140 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800d134:	2200      	movs	r2, #0
 800d136:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800d138:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800d13a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d13c:	f7ff be10 	b.w	800cd60 <chSchReadyI>
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	f3af 8000 	nop.w
 800d148:	f3af 8000 	nop.w
 800d14c:	f3af 8000 	nop.w

0800d150 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800d150:	b169      	cbz	r1, 800d16e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d152:	4b08      	ldr	r3, [pc, #32]	; (800d174 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800d154:	b410      	push	{r4}
 800d156:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800d158:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d15a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d15c:	2004      	movs	r0, #4
 800d15e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800d162:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800d164:	6053      	str	r3, [r2, #4]
}
 800d166:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d16a:	f7ff be29 	b.w	800cdc0 <chSchGoSleepTimeoutS>
}
 800d16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d172:	4770      	bx	lr
 800d174:	20000c40 	.word	0x20000c40
 800d178:	f3af 8000 	nop.w
 800d17c:	f3af 8000 	nop.w

0800d180 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d180:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d182:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800d184:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 800d18a:	d009      	beq.n	800d1a0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	6022      	str	r2, [r4, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800d190:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d192:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800d194:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d196:	f7ff fde3 	bl	800cd60 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	429c      	cmp	r4, r3
 800d19e:	d1f5      	bne.n	800d18c <chThdDequeueAllI+0xc>
 800d1a0:	bd38      	pop	{r3, r4, r5, pc}
 800d1a2:	bf00      	nop
 800d1a4:	f3af 8000 	nop.w
 800d1a8:	f3af 8000 	nop.w
 800d1ac:	f3af 8000 	nop.w

0800d1b0 <chTMStartMeasurementX>:
 800d1b0:	4b01      	ldr	r3, [pc, #4]	; (800d1b8 <chTMStartMeasurementX+0x8>)
 800d1b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800d1b4:	6083      	str	r3, [r0, #8]
 800d1b6:	4770      	bx	lr
 800d1b8:	e0001000 	.word	0xe0001000
 800d1bc:	f3af 8000 	nop.w

0800d1c0 <chTMStopMeasurementX>:
 800d1c0:	4b0f      	ldr	r3, [pc, #60]	; (800d200 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d1c2:	4910      	ldr	r1, [pc, #64]	; (800d204 <chTMStopMeasurementX+0x44>)
 800d1c4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d1c6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800d1c8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d1ca:	6f8f      	ldr	r7, [r1, #120]	; 0x78

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d1cc:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d1ce:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800d1d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800d1d8:	18e4      	adds	r4, r4, r3
 800d1da:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d1de:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d1e0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d1e2:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800d1e4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800d1e6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d1ea:	d805      	bhi.n	800d1f8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800d1ec:	6802      	ldr	r2, [r0, #0]
 800d1ee:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800d1f0:	bf38      	it	cc
 800d1f2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d1f4:	bcf0      	pop	{r4, r5, r6, r7}
 800d1f6:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800d1f8:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d1fa:	bcf0      	pop	{r4, r5, r6, r7}
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	e0001000 	.word	0xe0001000
 800d204:	20000c40 	.word	0x20000c40
 800d208:	f3af 8000 	nop.w
 800d20c:	f3af 8000 	nop.w

0800d210 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d210:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d212:	4c0c      	ldr	r4, [pc, #48]	; (800d244 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d214:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d216:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d21c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d21e:	2600      	movs	r6, #0
 800d220:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d222:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800d224:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800d226:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800d228:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d22a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d22c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d230:	f7ff ffbe 	bl	800d1b0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800d234:	4668      	mov	r0, sp
 800d236:	f7ff ffc3 	bl	800d1c0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800d23a:	9b02      	ldr	r3, [sp, #8]
 800d23c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d23e:	b006      	add	sp, #24
 800d240:	bdd0      	pop	{r4, r6, r7, pc}
 800d242:	bf00      	nop
 800d244:	20000c40 	.word	0x20000c40
 800d248:	f3af 8000 	nop.w
 800d24c:	f3af 8000 	nop.w

0800d250 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800d250:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d252:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d254:	6040      	str	r0, [r0, #4]
 800d256:	6083      	str	r3, [r0, #8]
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w

0800d260 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d260:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d262:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d264:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d266:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d268:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d26a:	d00a      	beq.n	800d282 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d26c:	2a0b      	cmp	r2, #11
 800d26e:	d000      	beq.n	800d272 <chEvtSignalI+0x12>
 800d270:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800d272:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d274:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800d276:	428b      	cmp	r3, r1
 800d278:	d1fa      	bne.n	800d270 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d27e:	f7ff bd6f 	b.w	800cd60 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d282:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d284:	4219      	tst	r1, r3
 800d286:	d1f8      	bne.n	800d27a <chEvtSignalI+0x1a>
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	f3af 8000 	nop.w

0800d290 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d290:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800d292:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d294:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d296:	4606      	mov	r6, r0
 800d298:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d29a:	d00d      	beq.n	800d2b8 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 800d29c:	68e3      	ldr	r3, [r4, #12]
 800d29e:	432b      	orrs	r3, r5
 800d2a0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800d2a2:	b115      	cbz	r5, 800d2aa <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800d2a4:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800d2a6:	4213      	tst	r3, r2
 800d2a8:	d003      	beq.n	800d2b2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800d2aa:	6860      	ldr	r0, [r4, #4]
 800d2ac:	68a1      	ldr	r1, [r4, #8]
 800d2ae:	f7ff ffd7 	bl	800d260 <chEvtSignalI>
    }
    elp = elp->el_next;
 800d2b2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d2b4:	42a6      	cmp	r6, r4
 800d2b6:	d1f1      	bne.n	800d29c <chEvtBroadcastFlagsI+0xc>
 800d2b8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w

0800d2c0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800d2c0:	b430      	push	{r4, r5}
 800d2c2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800d2c4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d2c6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d2c8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d2ca:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d2cc:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d2ce:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d2d0:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800d2d2:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 800d2d4:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 800d2d6:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800d2d8:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800d2da:	bc30      	pop	{r4, r5}
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop

0800d2e0 <chIQResetI>:

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800d2e0:	2100      	movs	r1, #0
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800d2e2:	68c2      	ldr	r2, [r0, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800d2e4:	6081      	str	r1, [r0, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800d2e6:	6182      	str	r2, [r0, #24]
  iqp->q_wrptr = iqp->q_buffer;
 800d2e8:	6142      	str	r2, [r0, #20]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800d2ea:	f06f 0101 	mvn.w	r1, #1
 800d2ee:	f7ff bf47 	b.w	800d180 <chThdDequeueAllI>
 800d2f2:	bf00      	nop
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	f3af 8000 	nop.w
 800d2fc:	f3af 8000 	nop.w

0800d300 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	2320      	movs	r3, #32
 800d304:	460e      	mov	r6, r1
 800d306:	4604      	mov	r4, r0
 800d308:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800d30c:	69c3      	ldr	r3, [r0, #28]
 800d30e:	b12b      	cbz	r3, 800d31c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800d310:	4798      	blx	r3
 800d312:	e003      	b.n	800d31c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d314:	f7ff ff1c 	bl	800d150 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d318:	2800      	cmp	r0, #0
 800d31a:	db15      	blt.n	800d348 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800d31c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d31e:	4620      	mov	r0, r4
 800d320:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 800d322:	2d00      	cmp	r5, #0
 800d324:	d0f6      	beq.n	800d314 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d326:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d328:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800d32a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d32c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d32e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800d330:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d332:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800d334:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800d336:	bf28      	it	cs
 800d338:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d33a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800d33c:	bf28      	it	cs
 800d33e:	61a3      	strcs	r3, [r4, #24]
 800d340:	2300      	movs	r3, #0
 800d342:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	bf00      	nop

0800d350 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	4604      	mov	r4, r0
 800d356:	b083      	sub	sp, #12
 800d358:	4689      	mov	r9, r1
 800d35a:	4693      	mov	fp, r2
 800d35c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800d35e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d362:	2720      	movs	r7, #32
 800d364:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800d368:	2600      	movs	r6, #0
 800d36a:	9701      	str	r7, [sp, #4]
 800d36c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800d36e:	f1b8 0f00 	cmp.w	r8, #0
 800d372:	d005      	beq.n	800d380 <chIQReadTimeout+0x30>
      nfy(iqp);
 800d374:	4620      	mov	r0, r4
 800d376:	47c0      	blx	r8
 800d378:	e002      	b.n	800d380 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800d37a:	f7ff fee9 	bl	800d150 <chThdEnqueueTimeoutS>
 800d37e:	b9e0      	cbnz	r0, 800d3ba <chIQReadTimeout+0x6a>
 800d380:	68a7      	ldr	r7, [r4, #8]
 800d382:	4620      	mov	r0, r4
 800d384:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800d386:	2f00      	cmp	r7, #0
 800d388:	d0f7      	beq.n	800d37a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800d38a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d38c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d38e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d390:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800d392:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d394:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d396:	7813      	ldrb	r3, [r2, #0]
 800d398:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	69a2      	ldr	r2, [r4, #24]
 800d3a0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800d3a2:	bf24      	itt	cs
 800d3a4:	68e3      	ldrcs	r3, [r4, #12]
 800d3a6:	61a3      	strcs	r3, [r4, #24]
 800d3a8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800d3ac:	3601      	adds	r6, #1
    if (--n == 0U) {
 800d3ae:	45b3      	cmp	fp, r6
 800d3b0:	d005      	beq.n	800d3be <chIQReadTimeout+0x6e>
 800d3b2:	9b01      	ldr	r3, [sp, #4]
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	e7d9      	b.n	800d36e <chIQReadTimeout+0x1e>
 800d3ba:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800d3be:	4630      	mov	r0, r6
 800d3c0:	b003      	add	sp, #12
 800d3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c6:	bf00      	nop
 800d3c8:	f3af 8000 	nop.w
 800d3cc:	f3af 8000 	nop.w

0800d3d0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800d3d0:	b430      	push	{r4, r5}
 800d3d2:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800d3d4:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800d3d6:	188d      	adds	r5, r1, r2
 800d3d8:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d3da:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d3dc:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800d3de:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 800d3e0:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 800d3e2:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800d3e4:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800d3e6:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 800d3e8:	bc30      	pop	{r4, r5}
 800d3ea:	4770      	bx	lr
 800d3ec:	f3af 8000 	nop.w

0800d3f0 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 800d3f0:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800d3f2:	6902      	ldr	r2, [r0, #16]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 800d3f4:	68c4      	ldr	r4, [r0, #12]
 800d3f6:	6184      	str	r4, [r0, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800d3f8:	1b12      	subs	r2, r2, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800d3fa:	6144      	str	r4, [r0, #20]
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800d3fc:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800d400:	6082      	str	r2, [r0, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
}
 800d402:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800d406:	f7ff bebb 	b.w	800d180 <chThdDequeueAllI>
 800d40a:	bf00      	nop
 800d40c:	f3af 8000 	nop.w

0800d410 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	4604      	mov	r4, r0
 800d414:	460f      	mov	r7, r1
 800d416:	4616      	mov	r6, r2
 800d418:	2320      	movs	r3, #32
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	e003      	b.n	800d428 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d420:	f7ff fe96 	bl	800d150 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d424:	2800      	cmp	r0, #0
 800d426:	db19      	blt.n	800d45c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d428:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d42a:	4620      	mov	r0, r4
 800d42c:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800d42e:	2d00      	cmp	r5, #0
 800d430:	d0f6      	beq.n	800d420 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800d432:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d434:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d436:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d438:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800d43a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d43c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d43e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	6962      	ldr	r2, [r4, #20]
 800d444:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800d446:	bf24      	itt	cs
 800d448:	68e3      	ldrcs	r3, [r4, #12]
 800d44a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800d44c:	69e3      	ldr	r3, [r4, #28]
 800d44e:	b10b      	cbz	r3, 800d454 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 800d450:	4620      	mov	r0, r4
 800d452:	4798      	blx	r3
 800d454:	2000      	movs	r0, #0
 800d456:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800d45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45c:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800d460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d462:	bf00      	nop
 800d464:	f3af 8000 	nop.w
 800d468:	f3af 8000 	nop.w
 800d46c:	f3af 8000 	nop.w

0800d470 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	b083      	sub	sp, #12
 800d476:	4604      	mov	r4, r0
 800d478:	468b      	mov	fp, r1
 800d47a:	4615      	mov	r5, r2
 800d47c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800d47e:	69c7      	ldr	r7, [r0, #28]
 800d480:	f04f 0820 	mov.w	r8, #32
 800d484:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 800d488:	2600      	movs	r6, #0
 800d48a:	46b1      	mov	r9, r6
 800d48c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d48e:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d492:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800d494:	b1fb      	cbz	r3, 800d4d6 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d496:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d498:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d49a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d49c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800d49e:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d4a0:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d4a2:	f89b 3000 	ldrb.w	r3, [fp]
 800d4a6:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	6962      	ldr	r2, [r4, #20]
 800d4ac:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800d4ae:	bf24      	itt	cs
 800d4b0:	68e3      	ldrcs	r3, [r4, #12]
 800d4b2:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 800d4b4:	b107      	cbz	r7, 800d4b8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 800d4b6:	47b8      	blx	r7
 800d4b8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800d4bc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800d4be:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 800d4c2:	d012      	beq.n	800d4ea <chOQWriteTimeout+0x7a>
 800d4c4:	f388 8811 	msr	BASEPRI, r8
 800d4c8:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d4ca:	46d3      	mov	fp, sl
 800d4cc:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d4d0:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1df      	bne.n	800d496 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	9901      	ldr	r1, [sp, #4]
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	f7ff fe38 	bl	800d150 <chThdEnqueueTimeoutS>
 800d4e0:	9b00      	ldr	r3, [sp, #0]
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d0d2      	beq.n	800d48c <chOQWriteTimeout+0x1c>
 800d4e6:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	b003      	add	sp, #12
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f2:	bf00      	nop
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	f3af 8000 	nop.w
 800d4fc:	f3af 8000 	nop.w

0800d500 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d500:	4a05      	ldr	r2, [pc, #20]	; (800d518 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d502:	4b06      	ldr	r3, [pc, #24]	; (800d51c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d504:	4806      	ldr	r0, [pc, #24]	; (800d520 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d506:	4907      	ldr	r1, [pc, #28]	; (800d524 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d508:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d50c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d510:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d512:	600b      	str	r3, [r1, #0]
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	20002e2f 	.word	0x20002e2f
 800d51c:	20020000 	.word	0x20020000
 800d520:	20000e9c 	.word	0x20000e9c
 800d524:	20000e98 	.word	0x20000e98
 800d528:	f3af 8000 	nop.w
 800d52c:	f3af 8000 	nop.w

0800d530 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800d530:	b410      	push	{r4}
 800d532:	2320      	movs	r3, #32
 800d534:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d538:	4c09      	ldr	r4, [pc, #36]	; (800d560 <chCoreAlloc+0x30>)
 800d53a:	4b0a      	ldr	r3, [pc, #40]	; (800d564 <chCoreAlloc+0x34>)
 800d53c:	6822      	ldr	r2, [r4, #0]
 800d53e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800d540:	1dc3      	adds	r3, r0, #7
 800d542:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d546:	1a89      	subs	r1, r1, r2
 800d548:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800d54a:	bf9d      	ittte	ls
 800d54c:	189b      	addls	r3, r3, r2
 800d54e:	6023      	strls	r3, [r4, #0]

  return p;
 800d550:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 800d552:	2000      	movhi	r0, #0
 800d554:	2300      	movs	r3, #0
 800d556:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800d55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	20000e9c 	.word	0x20000e9c
 800d564:	20000e98 	.word	0x20000e98
 800d568:	f3af 8000 	nop.w
 800d56c:	f3af 8000 	nop.w

0800d570 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800d570:	4b04      	ldr	r3, [pc, #16]	; (800d584 <_heap_init+0x14>)
 800d572:	4a05      	ldr	r2, [pc, #20]	; (800d588 <_heap_init+0x18>)
 800d574:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d576:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800d57a:	2200      	movs	r2, #0
 800d57c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800d57e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d580:	f7ff be66 	b.w	800d250 <chMtxObjectInit>
 800d584:	20000ea0 	.word	0x20000ea0
 800d588:	0800d531 	.word	0x0800d531
 800d58c:	f3af 8000 	nop.w

0800d590 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800d590:	4a06      	ldr	r2, [pc, #24]	; (800d5ac <SVC_Handler+0x1c>)
 800d592:	6853      	ldr	r3, [r2, #4]
 800d594:	f023 0301 	bic.w	r3, r3, #1
 800d598:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d59a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800d59e:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d5a0:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	4770      	bx	lr
 800d5ac:	e000ef30 	.word	0xe000ef30

0800d5b0 <_port_irq_epilogue>:
 800d5b0:	2320      	movs	r3, #32
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800d5b6:	4b12      	ldr	r3, [pc, #72]	; (800d600 <_port_irq_epilogue+0x50>)
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800d5be:	d102      	bne.n	800d5c6 <_port_irq_epilogue+0x16>
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800d5c6:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800d5c8:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d5cc:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d5d0:	4b0c      	ldr	r3, [pc, #48]	; (800d604 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800d5d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800d5dc:	f844 2c4c 	str.w	r2, [r4, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800d5e0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d5e4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800d5e8:	f7ff fc42 	bl	800ce70 <chSchIsPreemptionRequired>
 800d5ec:	b118      	cbz	r0, 800d5f6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800d5ee:	4b06      	ldr	r3, [pc, #24]	; (800d608 <_port_irq_epilogue+0x58>)
 800d5f0:	f844 3c50 	str.w	r3, [r4, #-80]
 800d5f4:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800d5f6:	4b05      	ldr	r3, [pc, #20]	; (800d60c <_port_irq_epilogue+0x5c>)
 800d5f8:	f844 3c50 	str.w	r3, [r4, #-80]
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	bf00      	nop
 800d600:	e000ed00 	.word	0xe000ed00
 800d604:	e000ef30 	.word	0xe000ef30
 800d608:	0800c139 	.word	0x0800c139
 800d60c:	0800c13c 	.word	0x0800c13c

0800d610 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800d610:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800d612:	f000 ff65 	bl	800e4e0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800d616:	480a      	ldr	r0, [pc, #40]	; (800d640 <halInit+0x30>)
 800d618:	f001 f97a 	bl	800e910 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800d61c:	f000 f818 	bl	800d650 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800d620:	f000 f846 	bl	800d6b0 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800d624:	f000 f854 	bl	800d6d0 <icuInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 800d628:	f000 fa22 	bl	800da70 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800d62c:	f000 fa30 	bl	800da90 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800d630:	f000 f906 	bl	800d840 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800d634:	f002 fa7c 	bl	800fb30 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800d638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800d63c:	f000 ba10 	b.w	800da60 <stInit>
 800d640:	08013310 	.word	0x08013310
 800d644:	f3af 8000 	nop.w
 800d648:	f3af 8000 	nop.w
 800d64c:	f3af 8000 	nop.w

0800d650 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800d650:	f001 b946 	b.w	800e8e0 <can_lld_init>
 800d654:	f3af 8000 	nop.w
 800d658:	f3af 8000 	nop.w
 800d65c:	f3af 8000 	nop.w

0800d660 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800d660:	b5f0      	push	{r4, r5, r6, r7, lr}

  canp->state    = CAN_STOP;
  canp->config   = NULL;
  osalThreadQueueObjectInit(&canp->txqueue);
 800d662:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800d666:	f100 0310 	add.w	r3, r0, #16
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800d66a:	f04f 0c01 	mov.w	ip, #1
  canp->config   = NULL;
 800d66e:	f04f 0e00 	mov.w	lr, #0
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800d672:	f100 0718 	add.w	r7, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800d676:	f100 061c 	add.w	r6, r0, #28
  osalEventObjectInit(&canp->error_event);
 800d67a:	f100 0520 	add.w	r5, r0, #32
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800d67e:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800d682:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800d686:	f880 c000 	strb.w	ip, [r0]
  canp->config   = NULL;
 800d68a:	f8c0 e004 	str.w	lr, [r0, #4]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800d68e:	6187      	str	r7, [r0, #24]
 800d690:	61c6      	str	r6, [r0, #28]
 800d692:	6205      	str	r5, [r0, #32]
 800d694:	6244      	str	r4, [r0, #36]	; 0x24
 800d696:	6281      	str	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d698:	6082      	str	r2, [r0, #8]
  tqp->p_prev = (thread_t *)tqp;
 800d69a:	60c2      	str	r2, [r0, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d69c:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800d69e:	6143      	str	r3, [r0, #20]
 800d6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	f3af 8000 	nop.w
 800d6a8:	f3af 8000 	nop.w
 800d6ac:	f3af 8000 	nop.w

0800d6b0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800d6b0:	f001 bb5e 	b.w	800ed70 <i2c_lld_init>
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	f3af 8000 	nop.w
 800d6bc:	f3af 8000 	nop.w

0800d6c0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d6c0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800d6c2:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d6c4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800d6c6:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800d6c8:	300c      	adds	r0, #12
 800d6ca:	f7ff bdc1 	b.w	800d250 <chMtxObjectInit>
 800d6ce:	bf00      	nop

0800d6d0 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800d6d0:	f002 b96e 	b.w	800f9b0 <icu_lld_init>
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	f3af 8000 	nop.w
 800d6dc:	f3af 8000 	nop.w

0800d6e0 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d6e0:	2201      	movs	r2, #1
  icup->config = NULL;
 800d6e2:	2300      	movs	r3, #0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d6e4:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800d6e6:	6043      	str	r3, [r0, #4]
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	f3af 8000 	nop.w

0800d6f0 <onotify>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 800d6f0:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 800d6f2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800d6f4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800d6f8:	6813      	ldr	r3, [r2, #0]
 800d6fa:	7819      	ldrb	r1, [r3, #0]
 800d6fc:	2904      	cmp	r1, #4
 800d6fe:	d000      	beq.n	800d702 <onotify+0x12>
 800d700:	bd10      	pop	{r4, pc}
 800d702:	7a21      	ldrb	r1, [r4, #8]
 800d704:	2902      	cmp	r1, #2
 800d706:	d1fb      	bne.n	800d700 <onotify+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800d708:	7911      	ldrb	r1, [r2, #4]
 800d70a:	891a      	ldrh	r2, [r3, #8]
 800d70c:	2301      	movs	r3, #1
 800d70e:	408b      	lsls	r3, r1
 800d710:	401a      	ands	r2, r3
 800d712:	d1f5      	bne.n	800d700 <onotify+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800d714:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d718:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d71a:	1acb      	subs	r3, r1, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800d71c:	1a1b      	subs	r3, r3, r0
 800d71e:	d0ef      	beq.n	800d700 <onotify+0x10>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d720:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 800d724:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800d728:	6810      	ldr	r0, [r2, #0]
 800d72a:	7911      	ldrb	r1, [r2, #4]
 800d72c:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800d730:	f000 fa0e 	bl	800db50 <usbPrepareQueuedTransmit>
 800d734:	2320      	movs	r3, #32
 800d736:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800d73a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    }
  }
}
 800d73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	7919      	ldrb	r1, [r3, #4]
 800d746:	f000 ba2b 	b.w	800dba0 <usbStartTransmitI>
 800d74a:	bf00      	nop
 800d74c:	f3af 8000 	nop.w

0800d750 <inotify>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 800d750:	b538      	push	{r3, r4, r5, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 800d752:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800d754:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800d758:	6813      	ldr	r3, [r2, #0]
 800d75a:	7819      	ldrb	r1, [r3, #0]
 800d75c:	2904      	cmp	r1, #4
 800d75e:	d000      	beq.n	800d762 <inotify+0x12>
 800d760:	bd38      	pop	{r3, r4, r5, pc}
 800d762:	7a21      	ldrb	r1, [r4, #8]
 800d764:	2902      	cmp	r1, #2
 800d766:	d1fb      	bne.n	800d760 <inotify+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800d768:	7950      	ldrb	r0, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800d76a:	8959      	ldrh	r1, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800d76c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800d770:	2201      	movs	r2, #1
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800d772:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800d774:	4082      	lsls	r2, r0
 800d776:	400a      	ands	r2, r1
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800d778:	8a5b      	ldrh	r3, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800d77a:	d1f1      	bne.n	800d760 <inotify+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800d77c:	69a1      	ldr	r1, [r4, #24]
 800d77e:	69e0      	ldr	r0, [r4, #28]
 800d780:	6965      	ldr	r5, [r4, #20]
 800d782:	1a40      	subs	r0, r0, r1
 800d784:	1b41      	subs	r1, r0, r5
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800d786:	428b      	cmp	r3, r1
 800d788:	d8ea      	bhi.n	800d760 <inotify+0x10>
 800d78a:	f382 8811 	msr	BASEPRI, r2
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 800d78e:	fbb1 f1f3 	udiv	r1, r1, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 800d792:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800d796:	fb03 f301 	mul.w	r3, r3, r1
 800d79a:	6810      	ldr	r0, [r2, #0]
 800d79c:	7951      	ldrb	r1, [r2, #5]
 800d79e:	f104 020c 	add.w	r2, r4, #12
 800d7a2:	f000 f9c5 	bl	800db30 <usbPrepareQueuedReceive>
 800d7a6:	2320      	movs	r3, #32
 800d7a8:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800d7ac:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800d7b0:	6818      	ldr	r0, [r3, #0]
 800d7b2:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 800d7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800d7b8:	f000 b9da 	b.w	800db70 <usbStartReceiveI>
 800d7bc:	f3af 8000 	nop.w

0800d7c0 <readt>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 800d7c0:	300c      	adds	r0, #12
 800d7c2:	f7ff bdc5 	b.w	800d350 <chIQReadTimeout>
 800d7c6:	bf00      	nop
 800d7c8:	f3af 8000 	nop.w
 800d7cc:	f3af 8000 	nop.w

0800d7d0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 800d7d0:	300c      	adds	r0, #12
 800d7d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7d6:	f7ff bdbb 	b.w	800d350 <chIQReadTimeout>
 800d7da:	bf00      	nop
 800d7dc:	f3af 8000 	nop.w

0800d7e0 <writet>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 800d7e0:	3030      	adds	r0, #48	; 0x30
 800d7e2:	f7ff be45 	b.w	800d470 <chOQWriteTimeout>
 800d7e6:	bf00      	nop
 800d7e8:	f3af 8000 	nop.w
 800d7ec:	f3af 8000 	nop.w

0800d7f0 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 800d7f0:	3030      	adds	r0, #48	; 0x30
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7f6:	f7ff be3b 	b.w	800d470 <chOQWriteTimeout>
 800d7fa:	bf00      	nop
 800d7fc:	f3af 8000 	nop.w

0800d800 <gett>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 800d800:	300c      	adds	r0, #12
 800d802:	f7ff bd7d 	b.w	800d300 <chIQGetTimeout>
 800d806:	bf00      	nop
 800d808:	f3af 8000 	nop.w
 800d80c:	f3af 8000 	nop.w

0800d810 <get>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 800d810:	300c      	adds	r0, #12
 800d812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d816:	f7ff bd73 	b.w	800d300 <chIQGetTimeout>
 800d81a:	bf00      	nop
 800d81c:	f3af 8000 	nop.w

0800d820 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 800d820:	3030      	adds	r0, #48	; 0x30
 800d822:	f7ff bdf5 	b.w	800d410 <chOQPutTimeout>
 800d826:	bf00      	nop
 800d828:	f3af 8000 	nop.w
 800d82c:	f3af 8000 	nop.w

0800d830 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 800d830:	3030      	adds	r0, #48	; 0x30
 800d832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d836:	f7ff bdeb 	b.w	800d410 <chOQPutTimeout>
 800d83a:	bf00      	nop
 800d83c:	f3af 8000 	nop.w

0800d840 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	f3af 8000 	nop.w
 800d848:	f3af 8000 	nop.w
 800d84c:	f3af 8000 	nop.w

0800d850 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800d850:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 800d852:	4603      	mov	r3, r0
 800d854:	4a0e      	ldr	r2, [pc, #56]	; (800d890 <sduObjectInit+0x40>)
 800d856:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800d85a:	b082      	sub	sp, #8
 800d85c:	4604      	mov	r4, r0

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800d85e:	2201      	movs	r2, #1
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800d860:	9000      	str	r0, [sp, #0]
 800d862:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800d866:	6043      	str	r3, [r0, #4]
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800d868:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800d86a:	4b0a      	ldr	r3, [pc, #40]	; (800d894 <sduObjectInit+0x44>)
 800d86c:	300c      	adds	r0, #12
 800d86e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d872:	f7ff fd25 	bl	800d2c0 <chIQObjectInit>
  oqObjectInit(&sdup->oqueue, sdup->ob, SERIAL_USB_BUFFERS_SIZE, onotify, sdup);
 800d876:	9400      	str	r4, [sp, #0]
 800d878:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d87c:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800d880:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d884:	4b04      	ldr	r3, [pc, #16]	; (800d898 <sduObjectInit+0x48>)
 800d886:	f7ff fda3 	bl	800d3d0 <chOQObjectInit>
}
 800d88a:	b002      	add	sp, #8
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	bf00      	nop
 800d890:	080131b0 	.word	0x080131b0
 800d894:	0800d751 	.word	0x0800d751
 800d898:	0800d6f1 	.word	0x0800d6f1
 800d89c:	f3af 8000 	nop.w

0800d8a0 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 800d8a0:	680b      	ldr	r3, [r1, #0]
 800d8a2:	2220      	movs	r2, #32
 800d8a4:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800d8a8:	790a      	ldrb	r2, [r1, #4]
 800d8aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d8ae:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800d8b0:	794a      	ldrb	r2, [r1, #5]
 800d8b2:	3209      	adds	r2, #9
 800d8b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 800d8b8:	798a      	ldrb	r2, [r1, #6]
 800d8ba:	b112      	cbz	r2, 800d8c2 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800d8bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d8c0:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 800d8c6:	f8c0 1254 	str.w	r1, [r0, #596]	; 0x254
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	f3af 8000 	nop.w
 800d8d8:	f3af 8000 	nop.w
 800d8dc:	f3af 8000 	nop.w

0800d8e0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800d8e0:	b570      	push	{r4, r5, r6, lr}
  USBDriver *usbp = sdup->config->usbp;
 800d8e2:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  iqResetI(&sdup->iqueue);
 800d8e6:	f100 060c 	add.w	r6, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800d8ea:	4604      	mov	r4, r0
  USBDriver *usbp = sdup->config->usbp;

  iqResetI(&sdup->iqueue);
 800d8ec:	4630      	mov	r0, r6
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 800d8ee:	681d      	ldr	r5, [r3, #0]

  iqResetI(&sdup->iqueue);
 800d8f0:	f7ff fcf6 	bl	800d2e0 <chIQResetI>
  oqResetI(&sdup->oqueue);
 800d8f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d8f8:	f7ff fd7a 	bl	800d3f0 <chOQResetI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800d8fc:	1d20      	adds	r0, r4, #4
 800d8fe:	2101      	movs	r1, #1
 800d900:	f7ff fcc6 	bl	800d290 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800d904:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800d908:	7959      	ldrb	r1, [r3, #5]
 800d90a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800d90e:	4628      	mov	r0, r5
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800d910:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800d912:	4632      	mov	r2, r6
 800d914:	8a5b      	ldrh	r3, [r3, #18]
 800d916:	f000 f90b 	bl	800db30 <usbPrepareQueuedReceive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800d91a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800d91e:	4628      	mov	r0, r5
 800d920:	7959      	ldrb	r1, [r3, #5]
}
 800d922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800d926:	f000 b923 	b.w	800db70 <usbStartReceiveI>
 800d92a:	bf00      	nop
 800d92c:	f3af 8000 	nop.w

0800d930 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800d930:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d938:	2b20      	cmp	r3, #32
 800d93a:	d001      	beq.n	800d940 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800d93c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800d93e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 800d940:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800d944:	2b21      	cmp	r3, #33	; 0x21
 800d946:	d003      	beq.n	800d950 <sduRequestsHook+0x20>
 800d948:	2b22      	cmp	r3, #34	; 0x22
 800d94a:	d009      	beq.n	800d960 <sduRequestsHook+0x30>
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	d1f5      	bne.n	800d93c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800d950:	4b06      	ldr	r3, [pc, #24]	; (800d96c <sduRequestsHook+0x3c>)
 800d952:	6383      	str	r3, [r0, #56]	; 0x38
 800d954:	2207      	movs	r2, #7
 800d956:	2300      	movs	r3, #0
 800d958:	63c2      	str	r2, [r0, #60]	; 0x3c
 800d95a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800d95c:	2001      	movs	r0, #1
 800d95e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800d960:	2300      	movs	r3, #0
 800d962:	6383      	str	r3, [r0, #56]	; 0x38
 800d964:	63c3      	str	r3, [r0, #60]	; 0x3c
 800d966:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800d968:	2001      	movs	r0, #1
 800d96a:	4770      	bx	lr
 800d96c:	20000800 	.word	0x20000800

0800d970 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800d972:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d976:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800d978:	b1bc      	cbz	r4, 800d9aa <sduDataTransmitted+0x3a>
 800d97a:	460e      	mov	r6, r1
 800d97c:	4605      	mov	r5, r0
 800d97e:	2720      	movs	r7, #32
 800d980:	f387 8811 	msr	BASEPRI, r7
 800d984:	2108      	movs	r1, #8
 800d986:	1d20      	adds	r0, r4, #4
 800d988:	f7ff fc82 	bl	800d290 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800d98c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d98e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d990:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d992:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800d994:	1a5b      	subs	r3, r3, r1
 800d996:	d110      	bne.n	800d9ba <sduDataTransmitted+0x4a>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800d998:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	695a      	ldr	r2, [r3, #20]
 800d9a0:	6852      	ldr	r2, [r2, #4]
 800d9a2:	b91a      	cbnz	r2, 800d9ac <sduDataTransmitted+0x3c>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800d9ac:	8a1b      	ldrh	r3, [r3, #16]
 800d9ae:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	d1f7      	bne.n	800d9a4 <sduDataTransmitted+0x34>
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	e002      	b.n	800d9c0 <sduDataTransmitted+0x50>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f382 8811 	msr	BASEPRI, r2
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800d9c0:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	f000 f8c2 	bl	800db50 <usbPrepareQueuedTransmit>
 800d9cc:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	f000 f8e4 	bl	800dba0 <usbStartTransmitI>
 800d9d8:	e7e4      	b.n	800d9a4 <sduDataTransmitted+0x34>
 800d9da:	bf00      	nop
 800d9dc:	f3af 8000 	nop.w

0800d9e0 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800d9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800d9e4:	f101 0309 	add.w	r3, r1, #9
 800d9e8:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800d9ec:	b1be      	cbz	r6, 800da1e <sduDataReceived+0x3e>
 800d9ee:	4680      	mov	r8, r0
 800d9f0:	460f      	mov	r7, r1
 800d9f2:	f04f 0920 	mov.w	r9, #32
 800d9f6:	f389 8811 	msr	BASEPRI, r9
 800d9fa:	2104      	movs	r1, #4
 800d9fc:	1870      	adds	r0, r6, r1
 800d9fe:	f7ff fc47 	bl	800d290 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 800da02:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800da06:	69b4      	ldr	r4, [r6, #24]
 800da08:	68da      	ldr	r2, [r3, #12]
 800da0a:	69f5      	ldr	r5, [r6, #28]
 800da0c:	6973      	ldr	r3, [r6, #20]
 800da0e:	8a51      	ldrh	r1, [r2, #18]
 800da10:	1b2d      	subs	r5, r5, r4
 800da12:	1aec      	subs	r4, r5, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800da14:	42a1      	cmp	r1, r4
 800da16:	d904      	bls.n	800da22 <sduDataReceived+0x42>
 800da18:	2300      	movs	r3, #0
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da22:	2300      	movs	r3, #0
 800da24:	f383 8811 	msr	BASEPRI, r3
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 800da28:	fbb4 f3f1 	udiv	r3, r4, r1
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 800da2c:	f106 020c 	add.w	r2, r6, #12
 800da30:	fb01 f303 	mul.w	r3, r1, r3
 800da34:	4640      	mov	r0, r8
 800da36:	4639      	mov	r1, r7
 800da38:	f000 f87a 	bl	800db30 <usbPrepareQueuedReceive>
 800da3c:	f389 8811 	msr	BASEPRI, r9

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 800da40:	4640      	mov	r0, r8
 800da42:	4639      	mov	r1, r7
 800da44:	f000 f894 	bl	800db70 <usbStartReceiveI>
 800da48:	e7e6      	b.n	800da18 <sduDataReceived+0x38>
 800da4a:	bf00      	nop
 800da4c:	f3af 8000 	nop.w

0800da50 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	f3af 8000 	nop.w
 800da58:	f3af 8000 	nop.w
 800da5c:	f3af 8000 	nop.w

0800da60 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800da60:	f001 bfc6 	b.w	800f9f0 <st_lld_init>
 800da64:	f3af 8000 	nop.w
 800da68:	f3af 8000 	nop.w
 800da6c:	f3af 8000 	nop.w

0800da70 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 800da70:	f002 b82e 	b.w	800fad0 <uart_lld_init>
 800da74:	f3af 8000 	nop.w
 800da78:	f3af 8000 	nop.w
 800da7c:	f3af 8000 	nop.w

0800da80 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 800da80:	2300      	movs	r3, #0
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 800da82:	2201      	movs	r2, #1
 800da84:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 800da86:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 800da88:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800da8a:	6043      	str	r3, [r0, #4]
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop

0800da90 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800da90:	f001 bb5e 	b.w	800f150 <usb_lld_init>
 800da94:	f3af 8000 	nop.w
 800da98:	f3af 8000 	nop.w
 800da9c:	f3af 8000 	nop.w

0800daa0 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800daa0:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800daa2:	2201      	movs	r2, #1
 800daa4:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800daa6:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800daa8:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800daaa:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800daac:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800daae:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800dab0:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800dab2:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800dab4:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800dab6:	8143      	strh	r3, [r0, #10]
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	f3af 8000 	nop.w

0800dac0 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4604      	mov	r4, r0
 800dac4:	2320      	movs	r3, #32
 800dac6:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800daca:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800dacc:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800dace:	60c5      	str	r5, [r0, #12]
 800dad0:	6105      	str	r5, [r0, #16]
 800dad2:	6145      	str	r5, [r0, #20]
 800dad4:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 800dad6:	f001 fb53 	bl	800f180 <usb_lld_start>
  usbp->state = USB_READY;
 800dada:	2302      	movs	r3, #2
 800dadc:	7023      	strb	r3, [r4, #0]
 800dade:	f385 8811 	msr	BASEPRI, r5
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	f3af 8000 	nop.w
 800dae8:	f3af 8000 	nop.w
 800daec:	f3af 8000 	nop.w

0800daf0 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	4606      	mov	r6, r0
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800daf4:	6950      	ldr	r0, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 800daf6:	4614      	mov	r4, r2
 800daf8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800dafa:	b118      	cbz	r0, 800db04 <usbInitEndpointI+0x14>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800dafc:	2100      	movs	r1, #0
 800dafe:	2214      	movs	r2, #20
 800db00:	f005 faee 	bl	80130e0 <memset>
  }
  if (epcp->out_state != NULL) {
 800db04:	69a0      	ldr	r0, [r4, #24]
 800db06:	b118      	cbz	r0, 800db10 <usbInitEndpointI+0x20>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800db08:	2100      	movs	r1, #0
 800db0a:	2214      	movs	r2, #20
 800db0c:	f005 fae8 	bl	80130e0 <memset>
  }

  usbp->epc[ep] = epcp;
 800db10:	eb06 0385 	add.w	r3, r6, r5, lsl #2

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800db14:	4630      	mov	r0, r6
  }
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  usbp->epc[ep] = epcp;
 800db16:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800db18:	4629      	mov	r1, r5
}
 800db1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800db1e:	f001 bc1f 	b.w	800f360 <usb_lld_init_endpoint>
 800db22:	bf00      	nop
 800db24:	f3af 8000 	nop.w
 800db28:	f3af 8000 	nop.w
 800db2c:	f3af 8000 	nop.w

0800db30 <usbPrepareQueuedReceive>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
 800db30:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800db32:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  osp->rxqueued           = true;
 800db36:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800db38:	68e4      	ldr	r4, [r4, #12]
 800db3a:	69a4      	ldr	r4, [r4, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800db3c:	2500      	movs	r5, #0
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 800db3e:	60e2      	str	r2, [r4, #12]
  osp->rxsize             = n;
 800db40:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 800db42:	7026      	strb	r6, [r4, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800db44:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_receive(usbp, ep);
}
 800db46:	bc70      	pop	{r4, r5, r6}
  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800db48:	f001 bcea 	b.w	800f520 <usb_lld_prepare_receive>
 800db4c:	f3af 8000 	nop.w

0800db50 <usbPrepareQueuedTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
 800db50:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db52:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  isp->txqueued           = true;
 800db56:	2601      	movs	r6, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db58:	68e4      	ldr	r4, [r4, #12]
 800db5a:	6964      	ldr	r4, [r4, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800db5c:	2500      	movs	r5, #0
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 800db5e:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 800db60:	6063      	str	r3, [r4, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 800db62:	7026      	strb	r6, [r4, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800db64:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 800db66:	bc70      	pop	{r4, r5, r6}
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800db68:	f001 bd5a 	b.w	800f620 <usb_lld_prepare_transmit>
 800db6c:	f3af 8000 	nop.w

0800db70 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800db70:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 800db72:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800db74:	fa02 f301 	lsl.w	r3, r2, r1
 800db78:	8944      	ldrh	r4, [r0, #10]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	ea13 0604 	ands.w	r6, r3, r4
 800db80:	d001      	beq.n	800db86 <usbStartReceiveI+0x16>
    return true;
 800db82:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 800db84:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800db86:	4323      	orrs	r3, r4
 800db88:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
 800db8a:	f001 fe59 	bl	800f840 <usb_lld_start_out>
  return false;
 800db8e:	4630      	mov	r0, r6
 800db90:	bd70      	pop	{r4, r5, r6, pc}
 800db92:	bf00      	nop
 800db94:	f3af 8000 	nop.w
 800db98:	f3af 8000 	nop.w
 800db9c:	f3af 8000 	nop.w

0800dba0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800dba0:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 800dba2:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800dba4:	fa02 f301 	lsl.w	r3, r2, r1
 800dba8:	8904      	ldrh	r4, [r0, #8]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	ea13 0604 	ands.w	r6, r3, r4
 800dbb0:	d001      	beq.n	800dbb6 <usbStartTransmitI+0x16>
    return true;
 800dbb2:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 800dbb4:	bd70      	pop	{r4, r5, r6, pc}

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dbb6:	4323      	orrs	r3, r4
 800dbb8:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
 800dbba:	f001 fe51 	bl	800f860 <usb_lld_start_in>
  return false;
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	bd70      	pop	{r4, r5, r6, pc}
 800dbc2:	bf00      	nop
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	f3af 8000 	nop.w
 800dbcc:	f3af 8000 	nop.w

0800dbd0 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800dbd0:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800dbd2:	2102      	movs	r1, #2
 800dbd4:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800dbd6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800dbda:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800dbde:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800dbe2:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 800dbe4:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800dbe6:	60c2      	str	r2, [r0, #12]
 800dbe8:	6102      	str	r2, [r0, #16]
 800dbea:	6142      	str	r2, [r0, #20]
 800dbec:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800dbee:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800dbf2:	f001 bb3d 	b.w	800f270 <usb_lld_reset>
 800dbf6:	bf00      	nop
 800dbf8:	f3af 8000 	nop.w
 800dbfc:	f3af 8000 	nop.w

0800dc00 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800dc02:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800dc04:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800dc06:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800dc0a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800dc0e:	f001 fc77 	bl	800f500 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800dc12:	6863      	ldr	r3, [r4, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	b363      	cbz	r3, 800dc72 <_usb_ep0setup+0x72>
      !(usbp->config->requests_hook_cb(usbp))) {
 800dc18:	4620      	mov	r0, r4
 800dc1a:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800dc1c:	b348      	cbz	r0, 800dc72 <_usb_ep0setup+0x72>
 800dc1e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800dc20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800dc24:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800dc28:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800dc2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800dc30:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 800dc32:	bf3c      	itt	cc
 800dc34:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800dc36:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800dc38:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dc3c:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800dc3e:	f040 8088 	bne.w	800dd52 <_usb_ep0setup+0x152>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	d16d      	bne.n	800dd22 <_usb_ep0setup+0x122>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dc46:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800dc48:	2205      	movs	r2, #5
 800dc4a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800dc4e:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dc50:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800dc52:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800dc54:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 800dc56:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800dc58:	4629      	mov	r1, r5
 800dc5a:	f001 fce1 	bl	800f620 <usb_lld_prepare_transmit>
 800dc5e:	2320      	movs	r3, #32
 800dc60:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7ff ff9a 	bl	800dba0 <usbStartTransmitI>
 800dc6c:	f385 8811 	msr	BASEPRI, r5
 800dc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800dc72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc76:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 800dc7a:	d011      	beq.n	800dca0 <_usb_ep0setup+0xa0>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	2100      	movs	r1, #0
 800dc80:	f001 fe16 	bl	800f8b0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800dc84:	4620      	mov	r0, r4
 800dc86:	2100      	movs	r1, #0
 800dc88:	f001 fe02 	bl	800f890 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800dc8c:	6863      	ldr	r3, [r4, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	b113      	cbz	r3, 800dc98 <_usb_ep0setup+0x98>
 800dc92:	4620      	mov	r0, r4
 800dc94:	2105      	movs	r1, #5
 800dc96:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800dc98:	2306      	movs	r3, #6
 800dc9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 800dca0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 800dca8:	ea42 2605 	orr.w	r6, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dcac:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 800dcb0:	f000 8100 	beq.w	800deb4 <_usb_ep0setup+0x2b4>
 800dcb4:	d917      	bls.n	800dce6 <_usb_ep0setup+0xe6>
 800dcb6:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800dcba:	f000 80e2 	beq.w	800de82 <_usb_ep0setup+0x282>
 800dcbe:	d977      	bls.n	800ddb0 <_usb_ep0setup+0x1b0>
 800dcc0:	f5b6 6f10 	cmp.w	r6, #2304	; 0x900
 800dcc4:	f000 8087 	beq.w	800ddd6 <_usb_ep0setup+0x1d6>
 800dcc8:	f640 4202 	movw	r2, #3074	; 0xc02
 800dccc:	4296      	cmp	r6, r2
 800dcce:	f000 8104 	beq.w	800deda <_usb_ep0setup+0x2da>
 800dcd2:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 800dcd6:	d1d1      	bne.n	800dc7c <_usb_ep0setup+0x7c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800dcd8:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800dcdc:	2501      	movs	r5, #1
 800dcde:	6427      	str	r7, [r4, #64]	; 0x40
 800dce0:	63a2      	str	r2, [r4, #56]	; 0x38
 800dce2:	63e5      	str	r5, [r4, #60]	; 0x3c
 800dce4:	e79e      	b.n	800dc24 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dce6:	2e02      	cmp	r6, #2
 800dce8:	f000 80b4 	beq.w	800de54 <_usb_ep0setup+0x254>
 800dcec:	f240 80a9 	bls.w	800de42 <_usb_ep0setup+0x242>
 800dcf0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800dcf4:	f000 8095 	beq.w	800de22 <_usb_ep0setup+0x222>
 800dcf8:	f5b6 7f81 	cmp.w	r6, #258	; 0x102
 800dcfc:	d1be      	bne.n	800dc7c <_usb_ep0setup+0x7c>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800dcfe:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800dd02:	2a00      	cmp	r2, #0
 800dd04:	d1ba      	bne.n	800dc7c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800dd06:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800dd0a:	f012 010f 	ands.w	r1, r2, #15
 800dd0e:	d05d      	beq.n	800ddcc <_usb_ep0setup+0x1cc>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dd10:	0612      	lsls	r2, r2, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800dd12:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dd14:	f100 8109 	bmi.w	800df2a <_usb_ep0setup+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800dd18:	f001 fdda 	bl	800f8d0 <usb_lld_clear_out>
 800dd1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dd20:	e054      	b.n	800ddcc <_usb_ep0setup+0x1cc>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800dd22:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800dd24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dd26:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800dd28:	2104      	movs	r1, #4
 800dd2a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800dd2e:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800dd30:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 800dd32:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dd34:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800dd36:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800dd38:	4631      	mov	r1, r6
 800dd3a:	f001 fbf1 	bl	800f520 <usb_lld_prepare_receive>
 800dd3e:	2320      	movs	r3, #32
 800dd40:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 800dd44:	4620      	mov	r0, r4
 800dd46:	4631      	mov	r1, r6
 800dd48:	f7ff ff12 	bl	800db70 <usbStartReceiveI>
 800dd4c:	f386 8811 	msr	BASEPRI, r6
 800dd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800dd52:	b1bd      	cbz	r5, 800dd84 <_usb_ep0setup+0x184>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dd54:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800dd56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dd58:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800dd60:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800dd62:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800dd64:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dd66:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800dd68:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800dd6a:	4631      	mov	r1, r6
 800dd6c:	f001 fc58 	bl	800f620 <usb_lld_prepare_transmit>
 800dd70:	2320      	movs	r3, #32
 800dd72:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800dd76:	4620      	mov	r0, r4
 800dd78:	4631      	mov	r1, r6
 800dd7a:	f7ff ff11 	bl	800dba0 <usbStartTransmitI>
 800dd7e:	f386 8811 	msr	BASEPRI, r6
 800dd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800dd84:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800dd86:	2203      	movs	r2, #3
 800dd88:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800dd8c:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dd8e:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800dd90:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800dd92:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800dd94:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800dd96:	4629      	mov	r1, r5
 800dd98:	f001 fbc2 	bl	800f520 <usb_lld_prepare_receive>
 800dd9c:	2320      	movs	r3, #32
 800dd9e:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 800dda2:	4620      	mov	r0, r4
 800dda4:	4629      	mov	r1, r5
 800dda6:	f7ff fee3 	bl	800db70 <usbStartReceiveI>
 800ddaa:	f385 8811 	msr	BASEPRI, r5
 800ddae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ddb0:	f240 3202 	movw	r2, #770	; 0x302
 800ddb4:	4296      	cmp	r6, r2
 800ddb6:	d021      	beq.n	800ddfc <_usb_ep0setup+0x1fc>
 800ddb8:	f5b6 6fa0 	cmp.w	r6, #1280	; 0x500
 800ddbc:	f47f af5e 	bne.w	800dc7c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800ddc0:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 800ddc4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800ddc8:	f000 809d 	beq.w	800df06 <_usb_ep0setup+0x306>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800ddcc:	2500      	movs	r5, #0
 800ddce:	63a5      	str	r5, [r4, #56]	; 0x38
 800ddd0:	63e5      	str	r5, [r4, #60]	; 0x3c
 800ddd2:	6425      	str	r5, [r4, #64]	; 0x40
 800ddd4:	e726      	b.n	800dc24 <_usb_ep0setup+0x24>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800ddd6:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800ddda:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800ddde:	2a00      	cmp	r2, #0
 800dde0:	f040 8082 	bne.w	800dee8 <_usb_ep0setup+0x2e8>
      usbp->state = USB_SELECTED;
 800dde4:	2203      	movs	r2, #3
 800dde6:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800dde8:	6862      	ldr	r2, [r4, #4]
 800ddea:	6812      	ldr	r2, [r2, #0]
 800ddec:	2a00      	cmp	r2, #0
 800ddee:	d0ed      	beq.n	800ddcc <_usb_ep0setup+0x1cc>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	2102      	movs	r1, #2
 800ddf4:	4790      	blx	r2
 800ddf6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ddfa:	e7e7      	b.n	800ddcc <_usb_ep0setup+0x1cc>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800ddfc:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800de00:	2a00      	cmp	r2, #0
 800de02:	f47f af3b 	bne.w	800dc7c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800de06:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800de0a:	f012 010f 	ands.w	r1, r2, #15
 800de0e:	d0dd      	beq.n	800ddcc <_usb_ep0setup+0x1cc>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800de10:	0613      	lsls	r3, r2, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800de12:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800de14:	f100 808e 	bmi.w	800df34 <_usb_ep0setup+0x334>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800de18:	f001 fd3a 	bl	800f890 <usb_lld_stall_out>
 800de1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800de20:	e7d4      	b.n	800ddcc <_usb_ep0setup+0x1cc>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800de22:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800de26:	2a01      	cmp	r2, #1
 800de28:	f47f af28 	bne.w	800dc7c <_usb_ep0setup+0x7c>
      usbp->status &= ~2U;
 800de2c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800de30:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800de32:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800de36:	63e7      	str	r7, [r4, #60]	; 0x3c
 800de38:	6427      	str	r7, [r4, #64]	; 0x40
 800de3a:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800de3c:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 800de40:	e6f0      	b.n	800dc24 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800de42:	2e00      	cmp	r6, #0
 800de44:	d146      	bne.n	800ded4 <_usb_ep0setup+0x2d4>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800de46:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800de4a:	2502      	movs	r5, #2
 800de4c:	6426      	str	r6, [r4, #64]	; 0x40
 800de4e:	63a2      	str	r2, [r4, #56]	; 0x38
 800de50:	63e5      	str	r5, [r4, #60]	; 0x3c
 800de52:	e6e7      	b.n	800dc24 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800de54:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800de58:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800de5c:	4620      	mov	r0, r4
 800de5e:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800de62:	d144      	bne.n	800deee <_usb_ep0setup+0x2ee>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800de64:	f001 fb2c 	bl	800f4c0 <usb_lld_get_status_out>
 800de68:	2801      	cmp	r0, #1
 800de6a:	d044      	beq.n	800def6 <_usb_ep0setup+0x2f6>
 800de6c:	2802      	cmp	r0, #2
 800de6e:	f47f af05 	bne.w	800dc7c <_usb_ep0setup+0x7c>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800de72:	4b33      	ldr	r3, [pc, #204]	; (800df40 <_usb_ep0setup+0x340>)
 800de74:	63a3      	str	r3, [r4, #56]	; 0x38
 800de76:	63e0      	str	r0, [r4, #60]	; 0x3c
 800de78:	6427      	str	r7, [r4, #64]	; 0x40
 800de7a:	4605      	mov	r5, r0
 800de7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800de80:	e6d0      	b.n	800dc24 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800de82:	6862      	ldr	r2, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800de84:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800de88:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800de8c:	6855      	ldr	r5, [r2, #4]
 800de8e:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800de92:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800de96:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800de9a:	4620      	mov	r0, r4
 800de9c:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800de9e:	2800      	cmp	r0, #0
 800dea0:	f43f aeec 	beq.w	800dc7c <_usb_ep0setup+0x7c>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800dea4:	6843      	ldr	r3, [r0, #4]
 800dea6:	6805      	ldr	r5, [r0, #0]
 800dea8:	63e5      	str	r5, [r4, #60]	; 0x3c
 800deaa:	63a3      	str	r3, [r4, #56]	; 0x38
 800deac:	6427      	str	r7, [r4, #64]	; 0x40
 800deae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800deb2:	e6b7      	b.n	800dc24 <_usb_ep0setup+0x24>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800deb4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800deb8:	2a01      	cmp	r2, #1
 800deba:	f47f aedf 	bne.w	800dc7c <_usb_ep0setup+0x7c>
      usbp->status |= 2U;
 800debe:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dec2:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800dec4:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dec8:	63e7      	str	r7, [r4, #60]	; 0x3c
 800deca:	6427      	str	r7, [r4, #64]	; 0x40
 800decc:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800dece:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 800ded2:	e6a7      	b.n	800dc24 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800ded4:	2e01      	cmp	r6, #1
 800ded6:	f47f aed1 	bne.w	800dc7c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800deda:	4a1a      	ldr	r2, [pc, #104]	; (800df44 <_usb_ep0setup+0x344>)
 800dedc:	63a2      	str	r2, [r4, #56]	; 0x38
 800dede:	2502      	movs	r5, #2
 800dee0:	2200      	movs	r2, #0
 800dee2:	63e5      	str	r5, [r4, #60]	; 0x3c
 800dee4:	6422      	str	r2, [r4, #64]	; 0x40
 800dee6:	e69d      	b.n	800dc24 <_usb_ep0setup+0x24>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800dee8:	2204      	movs	r2, #4
 800deea:	7022      	strb	r2, [r4, #0]
 800deec:	e77c      	b.n	800dde8 <_usb_ep0setup+0x1e8>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800deee:	f001 faf7 	bl	800f4e0 <usb_lld_get_status_in>
 800def2:	2801      	cmp	r0, #1
 800def4:	d1ba      	bne.n	800de6c <_usb_ep0setup+0x26c>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800def6:	4b14      	ldr	r3, [pc, #80]	; (800df48 <_usb_ep0setup+0x348>)
 800def8:	63a3      	str	r3, [r4, #56]	; 0x38
 800defa:	63e6      	str	r6, [r4, #60]	; 0x3c
 800defc:	6427      	str	r7, [r4, #64]	; 0x40
 800defe:	4635      	mov	r5, r6
 800df00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800df04:	e68e      	b.n	800dc24 <_usb_ep0setup+0x24>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 800df06:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800df0a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800df0e:	4620      	mov	r0, r4
 800df10:	f001 fa16 	bl	800f340 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800df14:	6863      	ldr	r3, [r4, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	b113      	cbz	r3, 800df20 <_usb_ep0setup+0x320>
 800df1a:	4620      	mov	r0, r4
 800df1c:	2101      	movs	r1, #1
 800df1e:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800df20:	2203      	movs	r2, #3
 800df22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800df26:	7022      	strb	r2, [r4, #0]
 800df28:	e750      	b.n	800ddcc <_usb_ep0setup+0x1cc>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800df2a:	f001 fce1 	bl	800f8f0 <usb_lld_clear_in>
 800df2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800df32:	e74b      	b.n	800ddcc <_usb_ep0setup+0x1cc>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800df34:	f001 fcbc 	bl	800f8b0 <usb_lld_stall_in>
 800df38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800df3c:	e746      	b.n	800ddcc <_usb_ep0setup+0x1cc>
 800df3e:	bf00      	nop
 800df40:	080131e0 	.word	0x080131e0
 800df44:	080131d0 	.word	0x080131d0
 800df48:	080131f0 	.word	0x080131f0
 800df4c:	f3af 8000 	nop.w

0800df50 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800df50:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800df52:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800df56:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800df58:	2b06      	cmp	r3, #6
 800df5a:	d815      	bhi.n	800df88 <_usb_ep0in+0x38>
 800df5c:	e8df f003 	tbb	[pc, r3]
 800df60:	041c3404 	.word	0x041c3404
 800df64:	1504      	.short	0x1504
 800df66:	04          	.byte	0x04
 800df67:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800df68:	2100      	movs	r1, #0
 800df6a:	f001 fca1 	bl	800f8b0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800df6e:	4620      	mov	r0, r4
 800df70:	2100      	movs	r1, #0
 800df72:	f001 fc8d 	bl	800f890 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800df76:	6863      	ldr	r3, [r4, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	b113      	cbz	r3, 800df82 <_usb_ep0in+0x32>
 800df7c:	4620      	mov	r0, r4
 800df7e:	2105      	movs	r1, #5
 800df80:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800df82:	2306      	movs	r3, #6
 800df84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800df88:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800df8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df8c:	b103      	cbz	r3, 800df90 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 800df8e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800df90:	2300      	movs	r3, #0
 800df92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800df9a:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800df9c:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800df9e:	2203      	movs	r2, #3
 800dfa0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800dfa4:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dfa6:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800dfa8:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800dfaa:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800dfac:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f001 fab6 	bl	800f520 <usb_lld_prepare_receive>
 800dfb4:	2320      	movs	r3, #32
 800dfb6:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 800dfba:	4620      	mov	r0, r4
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7ff fdd7 	bl	800db70 <usbStartReceiveI>
 800dfc2:	f385 8811 	msr	BASEPRI, r5
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800dfc8:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 800dfcc:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800dfd0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 800dfd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800dfd6:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800dfd8:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800dfda:	d9de      	bls.n	800df9a <_usb_ep0in+0x4a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800dfdc:	8a1d      	ldrh	r5, [r3, #16]
 800dfde:	fbb1 f2f5 	udiv	r2, r1, r5
 800dfe2:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800dfe6:	2d00      	cmp	r5, #0
 800dfe8:	d1d7      	bne.n	800df9a <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dfea:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800dfec:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dfee:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800dff0:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800dff2:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 800dff4:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800dff6:	f001 fb13 	bl	800f620 <usb_lld_prepare_transmit>
 800dffa:	2320      	movs	r3, #32
 800dffc:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800e000:	4620      	mov	r0, r4
 800e002:	4629      	mov	r1, r5
 800e004:	f7ff fdcc 	bl	800dba0 <usbStartTransmitI>
 800e008:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800e00c:	2302      	movs	r3, #2
 800e00e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	f3af 8000 	nop.w
 800e018:	f3af 8000 	nop.w
 800e01c:	f3af 8000 	nop.w

0800e020 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800e020:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800e024:	2a06      	cmp	r2, #6
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800e026:	b538      	push	{r3, r4, r5, lr}
 800e028:	d80a      	bhi.n	800e040 <_usb_ep0out+0x20>
 800e02a:	2301      	movs	r3, #1
 800e02c:	4093      	lsls	r3, r2
 800e02e:	f013 0f67 	tst.w	r3, #103	; 0x67
 800e032:	4604      	mov	r4, r0
 800e034:	d111      	bne.n	800e05a <_usb_ep0out+0x3a>
 800e036:	f013 0508 	ands.w	r5, r3, #8
 800e03a:	d102      	bne.n	800e042 <_usb_ep0out+0x22>
 800e03c:	06db      	lsls	r3, r3, #27
 800e03e:	d41d      	bmi.n	800e07c <_usb_ep0out+0x5c>
 800e040:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800e042:	68c3      	ldr	r3, [r0, #12]
 800e044:	699b      	ldr	r3, [r3, #24]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1f9      	bne.n	800e040 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800e04c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e04e:	b103      	cbz	r3, 800e052 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 800e050:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e052:	2300      	movs	r3, #0
 800e054:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800e058:	bd38      	pop	{r3, r4, r5, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800e05a:	2100      	movs	r1, #0
 800e05c:	f001 fc28 	bl	800f8b0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800e060:	4620      	mov	r0, r4
 800e062:	2100      	movs	r1, #0
 800e064:	f001 fc14 	bl	800f890 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e068:	6863      	ldr	r3, [r4, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	b113      	cbz	r3, 800e074 <_usb_ep0out+0x54>
 800e06e:	4620      	mov	r0, r4
 800e070:	2105      	movs	r1, #5
 800e072:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800e074:	2306      	movs	r3, #6
 800e076:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e07c:	68c3      	ldr	r3, [r0, #12]
 800e07e:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800e080:	2205      	movs	r2, #5
 800e082:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800e086:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800e088:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800e08a:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800e08c:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 800e08e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800e090:	f001 fac6 	bl	800f620 <usb_lld_prepare_transmit>
 800e094:	2320      	movs	r3, #32
 800e096:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 800e09a:	4620      	mov	r0, r4
 800e09c:	4629      	mov	r1, r5
 800e09e:	f7ff fd7f 	bl	800dba0 <usbStartTransmitI>
 800e0a2:	f385 8811 	msr	BASEPRI, r5
 800e0a6:	bd38      	pop	{r3, r4, r5, pc}
 800e0a8:	f3af 8000 	nop.w
 800e0ac:	f3af 8000 	nop.w

0800e0b0 <nvicEnableVector>:
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e0b0:	0943      	lsrs	r3, r0, #5
 800e0b2:	009b      	lsls	r3, r3, #2
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800e0b4:	b410      	push	{r4}
 800e0b6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800e0ba:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800e0be:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800e0c2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800e0c6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e0c8:	f000 001f 	and.w	r0, r0, #31
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	4082      	lsls	r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800e0d0:	b2c9      	uxtb	r1, r1
 800e0d2:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e0d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800e0da:	601a      	str	r2, [r3, #0]
}
 800e0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	f3af 8000 	nop.w
 800e0e8:	f3af 8000 	nop.w
 800e0ec:	f3af 8000 	nop.w

0800e0f0 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800e0f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800e0f4:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800e0f8:	0109      	lsls	r1, r1, #4
 800e0fa:	b2c9      	uxtb	r1, r1
 800e0fc:	7601      	strb	r1, [r0, #24]
 800e0fe:	4770      	bx	lr

0800e100 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800e100:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e102:	4b07      	ldr	r3, [pc, #28]	; (800e120 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800e104:	4a07      	ldr	r2, [pc, #28]	; (800e124 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e106:	6819      	ldr	r1, [r3, #0]
 800e108:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800e10c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800e10e:	6813      	ldr	r3, [r2, #0]
 800e110:	b10b      	cbz	r3, 800e116 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800e112:	6850      	ldr	r0, [r2, #4]
 800e114:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800e116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e11a:	f7ff ba49 	b.w	800d5b0 <_port_irq_epilogue>
 800e11e:	bf00      	nop
 800e120:	40026000 	.word	0x40026000
 800e124:	20000ec0 	.word	0x20000ec0
 800e128:	f3af 8000 	nop.w
 800e12c:	f3af 8000 	nop.w

0800e130 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e130:	4b08      	ldr	r3, [pc, #32]	; (800e154 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800e132:	4809      	ldr	r0, [pc, #36]	; (800e158 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e134:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800e136:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e138:	0989      	lsrs	r1, r1, #6
 800e13a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800e13e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 800e140:	018c      	lsls	r4, r1, #6
 800e142:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800e144:	b10a      	cbz	r2, 800e14a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800e146:	68c0      	ldr	r0, [r0, #12]
 800e148:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e14e:	f7ff ba2f 	b.w	800d5b0 <_port_irq_epilogue>
 800e152:	bf00      	nop
 800e154:	40026000 	.word	0x40026000
 800e158:	20000ec0 	.word	0x20000ec0
 800e15c:	f3af 8000 	nop.w

0800e160 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e160:	4b08      	ldr	r3, [pc, #32]	; (800e184 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800e162:	4809      	ldr	r0, [pc, #36]	; (800e188 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e164:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800e166:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e168:	0c09      	lsrs	r1, r1, #16
 800e16a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800e16e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 800e170:	040c      	lsls	r4, r1, #16
 800e172:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800e174:	b10a      	cbz	r2, 800e17a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800e176:	6940      	ldr	r0, [r0, #20]
 800e178:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e17e:	f7ff ba17 	b.w	800d5b0 <_port_irq_epilogue>
 800e182:	bf00      	nop
 800e184:	40026000 	.word	0x40026000
 800e188:	20000ec0 	.word	0x20000ec0
 800e18c:	f3af 8000 	nop.w

0800e190 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e190:	4b08      	ldr	r3, [pc, #32]	; (800e1b4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e192:	4809      	ldr	r0, [pc, #36]	; (800e1b8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e194:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e196:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e198:	0d89      	lsrs	r1, r1, #22
 800e19a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800e19e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 800e1a0:	058c      	lsls	r4, r1, #22
 800e1a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800e1a4:	b10a      	cbz	r2, 800e1aa <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800e1a6:	69c0      	ldr	r0, [r0, #28]
 800e1a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e1ae:	f7ff b9ff 	b.w	800d5b0 <_port_irq_epilogue>
 800e1b2:	bf00      	nop
 800e1b4:	40026000 	.word	0x40026000
 800e1b8:	20000ec0 	.word	0x20000ec0
 800e1bc:	f3af 8000 	nop.w

0800e1c0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800e1c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e1c2:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e1c4:	4807      	ldr	r0, [pc, #28]	; (800e1e4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e1c6:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e1c8:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e1ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800e1ce:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800e1d0:	b10a      	cbz	r2, 800e1d6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800e1d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e1d4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e1da:	f7ff b9e9 	b.w	800d5b0 <_port_irq_epilogue>
 800e1de:	bf00      	nop
 800e1e0:	40026000 	.word	0x40026000
 800e1e4:	20000ec0 	.word	0x20000ec0
 800e1e8:	f3af 8000 	nop.w
 800e1ec:	f3af 8000 	nop.w

0800e1f0 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e1f0:	4b08      	ldr	r3, [pc, #32]	; (800e214 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e1f2:	4809      	ldr	r0, [pc, #36]	; (800e218 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e1f4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e1f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e1f8:	0989      	lsrs	r1, r1, #6
 800e1fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800e1fe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 800e200:	018c      	lsls	r4, r1, #6
 800e202:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800e204:	b10a      	cbz	r2, 800e20a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800e206:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e208:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e20e:	f7ff b9cf 	b.w	800d5b0 <_port_irq_epilogue>
 800e212:	bf00      	nop
 800e214:	40026000 	.word	0x40026000
 800e218:	20000ec0 	.word	0x20000ec0
 800e21c:	f3af 8000 	nop.w

0800e220 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e220:	4b08      	ldr	r3, [pc, #32]	; (800e244 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e222:	4809      	ldr	r0, [pc, #36]	; (800e248 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e224:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e226:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e228:	0c09      	lsrs	r1, r1, #16
 800e22a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800e22e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 800e230:	040c      	lsls	r4, r1, #16
 800e232:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800e234:	b10a      	cbz	r2, 800e23a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800e236:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e238:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e23e:	f7ff b9b7 	b.w	800d5b0 <_port_irq_epilogue>
 800e242:	bf00      	nop
 800e244:	40026000 	.word	0x40026000
 800e248:	20000ec0 	.word	0x20000ec0
 800e24c:	f3af 8000 	nop.w

0800e250 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e250:	4b08      	ldr	r3, [pc, #32]	; (800e274 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e252:	4809      	ldr	r0, [pc, #36]	; (800e278 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e254:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e256:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e258:	0d89      	lsrs	r1, r1, #22
 800e25a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 800e25e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 800e260:	058c      	lsls	r4, r1, #22
 800e262:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800e264:	b10a      	cbz	r2, 800e26a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800e266:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e268:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e26e:	f7ff b99f 	b.w	800d5b0 <_port_irq_epilogue>
 800e272:	bf00      	nop
 800e274:	40026000 	.word	0x40026000
 800e278:	20000ec0 	.word	0x20000ec0
 800e27c:	f3af 8000 	nop.w

0800e280 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800e280:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e282:	4b07      	ldr	r3, [pc, #28]	; (800e2a0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e284:	4807      	ldr	r0, [pc, #28]	; (800e2a4 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e286:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e288:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e28a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800e28e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800e290:	b10a      	cbz	r2, 800e296 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800e292:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e294:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e29a:	f7ff b989 	b.w	800d5b0 <_port_irq_epilogue>
 800e29e:	bf00      	nop
 800e2a0:	40026400 	.word	0x40026400
 800e2a4:	20000ec0 	.word	0x20000ec0
 800e2a8:	f3af 8000 	nop.w
 800e2ac:	f3af 8000 	nop.w

0800e2b0 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e2b0:	4b08      	ldr	r3, [pc, #32]	; (800e2d4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e2b2:	4809      	ldr	r0, [pc, #36]	; (800e2d8 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e2b4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e2b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e2b8:	0989      	lsrs	r1, r1, #6
 800e2ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800e2be:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 800e2c0:	018c      	lsls	r4, r1, #6
 800e2c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800e2c4:	b10a      	cbz	r2, 800e2ca <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800e2c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e2c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e2ce:	f7ff b96f 	b.w	800d5b0 <_port_irq_epilogue>
 800e2d2:	bf00      	nop
 800e2d4:	40026400 	.word	0x40026400
 800e2d8:	20000ec0 	.word	0x20000ec0
 800e2dc:	f3af 8000 	nop.w

0800e2e0 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e2e0:	4b08      	ldr	r3, [pc, #32]	; (800e304 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e2e2:	4809      	ldr	r0, [pc, #36]	; (800e308 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e2e4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e2e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e2e8:	0c09      	lsrs	r1, r1, #16
 800e2ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800e2ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 800e2f0:	040c      	lsls	r4, r1, #16
 800e2f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800e2f4:	b10a      	cbz	r2, 800e2fa <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800e2f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800e2f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e2fe:	f7ff b957 	b.w	800d5b0 <_port_irq_epilogue>
 800e302:	bf00      	nop
 800e304:	40026400 	.word	0x40026400
 800e308:	20000ec0 	.word	0x20000ec0
 800e30c:	f3af 8000 	nop.w

0800e310 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e310:	4b08      	ldr	r3, [pc, #32]	; (800e334 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e312:	4809      	ldr	r0, [pc, #36]	; (800e338 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e314:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e316:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e318:	0d89      	lsrs	r1, r1, #22
 800e31a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800e31e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 800e320:	058c      	lsls	r4, r1, #22
 800e322:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800e324:	b10a      	cbz	r2, 800e32a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800e326:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800e328:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e32e:	f7ff b93f 	b.w	800d5b0 <_port_irq_epilogue>
 800e332:	bf00      	nop
 800e334:	40026400 	.word	0x40026400
 800e338:	20000ec0 	.word	0x20000ec0
 800e33c:	f3af 8000 	nop.w

0800e340 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800e340:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e342:	4b07      	ldr	r3, [pc, #28]	; (800e360 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e344:	4807      	ldr	r0, [pc, #28]	; (800e364 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e346:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e348:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e34a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800e34e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800e350:	b10a      	cbz	r2, 800e356 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800e352:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e354:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e35a:	f7ff b929 	b.w	800d5b0 <_port_irq_epilogue>
 800e35e:	bf00      	nop
 800e360:	40026400 	.word	0x40026400
 800e364:	20000ec0 	.word	0x20000ec0
 800e368:	f3af 8000 	nop.w
 800e36c:	f3af 8000 	nop.w

0800e370 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e370:	4b08      	ldr	r3, [pc, #32]	; (800e394 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e372:	4809      	ldr	r0, [pc, #36]	; (800e398 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e374:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e376:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e378:	0989      	lsrs	r1, r1, #6
 800e37a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800e37e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 800e380:	018c      	lsls	r4, r1, #6
 800e382:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800e384:	b10a      	cbz	r2, 800e38a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800e386:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800e388:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e38e:	f7ff b90f 	b.w	800d5b0 <_port_irq_epilogue>
 800e392:	bf00      	nop
 800e394:	40026400 	.word	0x40026400
 800e398:	20000ec0 	.word	0x20000ec0
 800e39c:	f3af 8000 	nop.w

0800e3a0 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e3a0:	4b08      	ldr	r3, [pc, #32]	; (800e3c4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e3a2:	4809      	ldr	r0, [pc, #36]	; (800e3c8 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e3a4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e3a6:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e3a8:	0c09      	lsrs	r1, r1, #16
 800e3aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 800e3ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 800e3b0:	040c      	lsls	r4, r1, #16
 800e3b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800e3b4:	b10a      	cbz	r2, 800e3ba <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800e3b6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800e3b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e3be:	f7ff b8f7 	b.w	800d5b0 <_port_irq_epilogue>
 800e3c2:	bf00      	nop
 800e3c4:	40026400 	.word	0x40026400
 800e3c8:	20000ec0 	.word	0x20000ec0
 800e3cc:	f3af 8000 	nop.w

0800e3d0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e3d0:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e3d2:	4809      	ldr	r0, [pc, #36]	; (800e3f8 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e3d4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e3d6:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e3d8:	0d89      	lsrs	r1, r1, #22
 800e3da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 800e3de:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 800e3e0:	058c      	lsls	r4, r1, #22
 800e3e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800e3e4:	b10a      	cbz	r2, 800e3ea <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800e3e6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800e3e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e3ee:	f7ff b8df 	b.w	800d5b0 <_port_irq_epilogue>
 800e3f2:	bf00      	nop
 800e3f4:	40026400 	.word	0x40026400
 800e3f8:	20000ec0 	.word	0x20000ec0
 800e3fc:	f3af 8000 	nop.w

0800e400 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800e400:	4b0d      	ldr	r3, [pc, #52]	; (800e438 <dmaInit+0x38>)
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800e402:	b430      	push	{r4, r5}
  int i;

  dma_streams_mask = 0;
 800e404:	2200      	movs	r2, #0
 800e406:	4d0d      	ldr	r5, [pc, #52]	; (800e43c <dmaInit+0x3c>)
 800e408:	4c0d      	ldr	r4, [pc, #52]	; (800e440 <dmaInit+0x40>)
 800e40a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800e40c:	4611      	mov	r1, r2
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e40e:	4613      	mov	r3, r2
    _stm32_dma_streams[i].stream->CR = 0;
 800e410:	58a8      	ldr	r0, [r5, r2]
 800e412:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800e414:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e418:	3301      	adds	r3, #1
 800e41a:	2b10      	cmp	r3, #16
 800e41c:	f102 020c 	add.w	r2, r2, #12
 800e420:	d1f6      	bne.n	800e410 <dmaInit+0x10>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e422:	4908      	ldr	r1, [pc, #32]	; (800e444 <dmaInit+0x44>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800e424:	4a08      	ldr	r2, [pc, #32]	; (800e448 <dmaInit+0x48>)
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e42a:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800e42c:	bc30      	pop	{r4, r5}
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
  DMA1->HIFCR = 0xFFFFFFFF;
 800e42e:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800e430:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800e432:	60d3      	str	r3, [r2, #12]
}
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	20000f40 	.word	0x20000f40
 800e43c:	08013200 	.word	0x08013200
 800e440:	20000ec0 	.word	0x20000ec0
 800e444:	40026000 	.word	0x40026000
 800e448:	40026400 	.word	0x40026400
 800e44c:	f3af 8000 	nop.w

0800e450 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800e452:	4f1f      	ldr	r7, [pc, #124]	; (800e4d0 <dmaStreamAllocate+0x80>)
 800e454:	7a46      	ldrb	r6, [r0, #9]
 800e456:	683d      	ldr	r5, [r7, #0]
 800e458:	2401      	movs	r4, #1
 800e45a:	fa04 fe06 	lsl.w	lr, r4, r6
 800e45e:	ea1e 0f05 	tst.w	lr, r5
 800e462:	d131      	bne.n	800e4c8 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e464:	4c1b      	ldr	r4, [pc, #108]	; (800e4d4 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e466:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e46a:	eb04 0cc6 	add.w	ip, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e46e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e472:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e474:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e478:	f8cc 3004 	str.w	r3, [ip, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e47c:	d004      	beq.n	800e488 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 800e47e:	4c16      	ldr	r4, [pc, #88]	; (800e4d8 <dmaStreamAllocate+0x88>)
 800e480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e486:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800e488:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800e48c:	d116      	bne.n	800e4bc <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e48e:	6805      	ldr	r5, [r0, #0]
 800e490:	682b      	ldr	r3, [r5, #0]
 800e492:	f023 031f 	bic.w	r3, r3, #31
 800e496:	602b      	str	r3, [r5, #0]
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	f013 0401 	ands.w	r4, r3, #1
 800e49e:	d1fb      	bne.n	800e498 <dmaStreamAllocate+0x48>
 800e4a0:	7a07      	ldrb	r7, [r0, #8]
 800e4a2:	6846      	ldr	r6, [r0, #4]
 800e4a4:	233d      	movs	r3, #61	; 0x3d
 800e4a6:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e4a8:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e4aa:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800e4ac:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e4ae:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800e4b0:	b162      	cbz	r2, 800e4cc <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 800e4b2:	7a80      	ldrb	r0, [r0, #10]
 800e4b4:	f7ff fdfc 	bl	800e0b0 <nvicEnableVector>

  return FALSE;
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 800e4bc:	4c06      	ldr	r4, [pc, #24]	; (800e4d8 <dmaStreamAllocate+0x88>)
 800e4be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e4c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e4c4:	6323      	str	r3, [r4, #48]	; 0x30
 800e4c6:	e7e2      	b.n	800e48e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 800e4cc:	4610      	mov	r0, r2
}
 800e4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d0:	20000f40 	.word	0x20000f40
 800e4d4:	20000ec0 	.word	0x20000ec0
 800e4d8:	40023800 	.word	0x40023800
 800e4dc:	f3af 8000 	nop.w

0800e4e0 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e4e0:	4b17      	ldr	r3, [pc, #92]	; (800e540 <hal_lld_init+0x60>)
 800e4e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e4e6:	691a      	ldr	r2, [r3, #16]
 800e4e8:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800e4ea:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e4ec:	6119      	str	r1, [r3, #16]
 800e4ee:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800e4f0:	6958      	ldr	r0, [r3, #20]
 800e4f2:	6159      	str	r1, [r3, #20]
 800e4f4:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e4f6:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800e4f8:	4c12      	ldr	r4, [pc, #72]	; (800e544 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e4fa:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800e4fe:	6218      	str	r0, [r3, #32]
 800e500:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800e502:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e504:	6259      	str	r1, [r3, #36]	; 0x24
 800e506:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800e508:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e50a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800e50e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800e510:	6821      	ldr	r1, [r4, #0]
 800e512:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e516:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800e518:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e51a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800e51e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e522:	d003      	beq.n	800e52c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800e524:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e528:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800e52a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800e52c:	4a05      	ldr	r2, [pc, #20]	; (800e544 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800e52e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800e532:	6853      	ldr	r3, [r2, #4]
 800e534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e538:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800e53a:	f7ff bf61 	b.w	800e400 <dmaInit>
 800e53e:	bf00      	nop
 800e540:	40023800 	.word	0x40023800
 800e544:	40007000 	.word	0x40007000
 800e548:	f3af 8000 	nop.w
 800e54c:	f3af 8000 	nop.w

0800e550 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e550:	492c      	ldr	r1, [pc, #176]	; (800e604 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e552:	4b2d      	ldr	r3, [pc, #180]	; (800e608 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e558:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e55c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e55e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800e560:	680b      	ldr	r3, [r1, #0]
 800e562:	f043 0301 	orr.w	r3, r3, #1
 800e566:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800e568:	680a      	ldr	r2, [r1, #0]
 800e56a:	4b26      	ldr	r3, [pc, #152]	; (800e604 <stm32_clock_init+0xb4>)
 800e56c:	0790      	lsls	r0, r2, #30
 800e56e:	d5fb      	bpl.n	800e568 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	f022 0203 	bic.w	r2, r2, #3
 800e576:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800e578:	689a      	ldr	r2, [r3, #8]
 800e57a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e57c:	4619      	mov	r1, r3
 800e57e:	688b      	ldr	r3, [r1, #8]
 800e580:	4a20      	ldr	r2, [pc, #128]	; (800e604 <stm32_clock_init+0xb4>)
 800e582:	f013 030c 	ands.w	r3, r3, #12
 800e586:	d1fa      	bne.n	800e57e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800e588:	6811      	ldr	r1, [r2, #0]
 800e58a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800e58e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800e590:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 800e592:	6813      	ldr	r3, [r2, #0]
 800e594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e598:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800e59a:	6811      	ldr	r1, [r2, #0]
 800e59c:	4b19      	ldr	r3, [pc, #100]	; (800e604 <stm32_clock_init+0xb4>)
 800e59e:	0389      	lsls	r1, r1, #14
 800e5a0:	d5fb      	bpl.n	800e59a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800e5a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e5a4:	f042 0201 	orr.w	r2, r2, #1
 800e5a8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800e5aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e5ac:	4915      	ldr	r1, [pc, #84]	; (800e604 <stm32_clock_init+0xb4>)
 800e5ae:	0790      	lsls	r0, r2, #30
 800e5b0:	d5fb      	bpl.n	800e5aa <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800e5b2:	4b16      	ldr	r3, [pc, #88]	; (800e60c <stm32_clock_init+0xbc>)
 800e5b4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e5b6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e5b8:	4a13      	ldr	r2, [pc, #76]	; (800e608 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e5ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5be:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e5c0:	6853      	ldr	r3, [r2, #4]
 800e5c2:	0459      	lsls	r1, r3, #17
 800e5c4:	d5fc      	bpl.n	800e5c0 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800e5c6:	490f      	ldr	r1, [pc, #60]	; (800e604 <stm32_clock_init+0xb4>)
 800e5c8:	680a      	ldr	r2, [r1, #0]
 800e5ca:	4b0e      	ldr	r3, [pc, #56]	; (800e604 <stm32_clock_init+0xb4>)
 800e5cc:	0192      	lsls	r2, r2, #6
 800e5ce:	d5fb      	bpl.n	800e5c8 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e5d0:	4a0f      	ldr	r2, [pc, #60]	; (800e610 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800e5d2:	4910      	ldr	r1, [pc, #64]	; (800e614 <stm32_clock_init+0xc4>)
 800e5d4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e5d6:	f240 7105 	movw	r1, #1797	; 0x705
 800e5da:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800e5dc:	689a      	ldr	r2, [r3, #8]
 800e5de:	f042 0202 	orr.w	r2, r2, #2
 800e5e2:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	6893      	ldr	r3, [r2, #8]
 800e5e8:	4906      	ldr	r1, [pc, #24]	; (800e604 <stm32_clock_init+0xb4>)
 800e5ea:	f003 030c 	and.w	r3, r3, #12
 800e5ee:	2b08      	cmp	r3, #8
 800e5f0:	d1f9      	bne.n	800e5e6 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800e5f2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800e5f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e5f8:	644b      	str	r3, [r1, #68]	; 0x44
 800e5fa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e5fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e600:	664b      	str	r3, [r1, #100]	; 0x64
 800e602:	4770      	bx	lr
 800e604:	40023800 	.word	0x40023800
 800e608:	40007000 	.word	0x40007000
 800e60c:	07405408 	.word	0x07405408
 800e610:	40023c00 	.word	0x40023c00
 800e614:	38089400 	.word	0x38089400
 800e618:	f3af 8000 	nop.w
 800e61c:	f3af 8000 	nop.w

0800e620 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800e620:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e622:	4c43      	ldr	r4, [pc, #268]	; (800e730 <can_lld_set_filters+0x110>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e624:	4d43      	ldr	r5, [pc, #268]	; (800e734 <can_lld_set_filters+0x114>)
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e62c:	6423      	str	r3, [r4, #64]	; 0x40

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e62e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800e632:	0c1b      	lsrs	r3, r3, #16
 800e634:	041b      	lsls	r3, r3, #16
 800e636:	f043 0301 	orr.w	r3, r3, #1
 800e63a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e63e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  if (num > 0) {
 800e642:	2900      	cmp	r1, #0
 800e644:	d04e      	beq.n	800e6e4 <can_lld_set_filters+0xc4>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e64c:	4618      	mov	r0, r3
  if (num > 0) {
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
 800e64e:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
      CAN1->sFilterRegister[i].FR1 = 0;
 800e652:	461c      	mov	r4, r3
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
 800e654:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800e658:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800e65c:	00c3      	lsls	r3, r0, #3
 800e65e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e662:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e666:	3001      	adds	r0, #1
 800e668:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800e66a:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800e66e:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e672:	d1f3      	bne.n	800e65c <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800e674:	482f      	ldr	r0, [pc, #188]	; (800e734 <can_lld_set_filters+0x114>)
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e676:	2600      	movs	r6, #0
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 800e678:	2701      	movs	r7, #1
 800e67a:	6815      	ldr	r5, [r2, #0]
      if (cfp->mode)
 800e67c:	7914      	ldrb	r4, [r2, #4]
 800e67e:	00eb      	lsls	r3, r5, #3
 800e680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e684:	f014 0f01 	tst.w	r4, #1
 800e688:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e68c:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800e690:	fa07 f505 	lsl.w	r5, r7, r5
      if (cfp->mode)
 800e694:	d005      	beq.n	800e6a2 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800e696:	f8d0 e204 	ldr.w	lr, [r0, #516]	; 0x204
 800e69a:	ea45 0e0e 	orr.w	lr, r5, lr
 800e69e:	f8c0 e204 	str.w	lr, [r0, #516]	; 0x204
      if (cfp->scale)
 800e6a2:	f014 0f02 	tst.w	r4, #2
 800e6a6:	d005      	beq.n	800e6b4 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800e6a8:	f8d0 e20c 	ldr.w	lr, [r0, #524]	; 0x20c
 800e6ac:	ea45 0e0e 	orr.w	lr, r5, lr
 800e6b0:	f8c0 e20c 	str.w	lr, [r0, #524]	; 0x20c
      if (cfp->assignment)
 800e6b4:	0764      	lsls	r4, r4, #29
 800e6b6:	d504      	bpl.n	800e6c2 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800e6b8:	f8d0 4214 	ldr.w	r4, [r0, #532]	; 0x214
 800e6bc:	432c      	orrs	r4, r5
 800e6be:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800e6c2:	6894      	ldr	r4, [r2, #8]
 800e6c4:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800e6c8:	68d4      	ldr	r4, [r2, #12]
 800e6ca:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800e6ce:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e6d2:	428e      	cmp	r6, r1
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800e6d4:	ea43 0305 	orr.w	r3, r3, r5
      cfp++;
 800e6d8:	f102 0210 	add.w	r2, r2, #16
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800e6dc:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e6e0:	d1cb      	bne.n	800e67a <can_lld_set_filters+0x5a>
 800e6e2:	e018      	b.n	800e716 <can_lld_set_filters+0xf6>
 800e6e4:	00c2      	lsls	r2, r0, #3
 800e6e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
    CAN1->FFA1R = 0;
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800e6f0:	4083      	lsls	r3, r0
 800e6f2:	f043 0301 	orr.w	r3, r3, #1
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 800e6f6:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800e6fa:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800e6fe:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800e702:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
#endif
    CAN1->FM1R = 0;
 800e706:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    CAN1->FFA1R = 0;
 800e70a:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800e70e:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800e712:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e716:	4907      	ldr	r1, [pc, #28]	; (800e734 <can_lld_set_filters+0x114>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e718:	4a05      	ldr	r2, [pc, #20]	; (800e730 <can_lld_set_filters+0x110>)
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e71a:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800e71e:	f023 0301 	bic.w	r3, r3, #1
 800e722:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e726:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e728:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e72c:	6413      	str	r3, [r2, #64]	; 0x40
 800e72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e730:	40023800 	.word	0x40023800
 800e734:	40006400 	.word	0x40006400
 800e738:	f3af 8000 	nop.w
 800e73c:	f3af 8000 	nop.w

0800e740 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800e740:	b510      	push	{r4, lr}
 * @notapi
 */
static void can_lld_tx_handler(CANDriver *canp) {

  /* No more events until a message is transmitted.*/
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800e742:	4c0c      	ldr	r4, [pc, #48]	; (800e774 <Vector8C+0x34>)
 800e744:	490c      	ldr	r1, [pc, #48]	; (800e778 <Vector8C+0x38>)
 800e746:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e748:	2320      	movs	r3, #32
 800e74a:	6091      	str	r1, [r2, #8]
 800e74c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e750:	2100      	movs	r1, #0
 800e752:	f104 0008 	add.w	r0, r4, #8
 800e756:	f7fe fd13 	bl	800d180 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e75a:	f104 001c 	add.w	r0, r4, #28
 800e75e:	2101      	movs	r1, #1
 800e760:	f7fe fd96 	bl	800d290 <chEvtBroadcastFlagsI>
 800e764:	2300      	movs	r3, #0
 800e766:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e76e:	f7fe bf1f 	b.w	800d5b0 <_port_irq_epilogue>
 800e772:	bf00      	nop
 800e774:	20000f44 	.word	0x20000f44
 800e778:	00010101 	.word	0x00010101
 800e77c:	f3af 8000 	nop.w

0800e780 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800e780:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 800e782:	4d16      	ldr	r5, [pc, #88]	; (800e7dc <Vector90+0x5c>)
 800e784:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e786:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800e788:	07a2      	lsls	r2, r4, #30
 800e78a:	d111      	bne.n	800e7b0 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800e78c:	06e3      	lsls	r3, r4, #27
 800e78e:	d50b      	bpl.n	800e7a8 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800e790:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e792:	2110      	movs	r1, #16
 800e794:	60d9      	str	r1, [r3, #12]
 800e796:	2320      	movs	r3, #32
 800e798:	f383 8811 	msr	BASEPRI, r3
 800e79c:	4810      	ldr	r0, [pc, #64]	; (800e7e0 <Vector90+0x60>)
 800e79e:	f7fe fd77 	bl	800d290 <chEvtBroadcastFlagsI>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e7ac:	f7fe bf00 	b.w	800d5b0 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800e7b0:	695a      	ldr	r2, [r3, #20]
 800e7b2:	f022 0202 	bic.w	r2, r2, #2
 800e7b6:	615a      	str	r2, [r3, #20]
 800e7b8:	2320      	movs	r3, #32
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e7be:	2100      	movs	r1, #0
 800e7c0:	f105 0010 	add.w	r0, r5, #16
 800e7c4:	f7fe fcdc 	bl	800d180 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e7c8:	f105 0018 	add.w	r0, r5, #24
 800e7cc:	2101      	movs	r1, #1
 800e7ce:	f7fe fd5f 	bl	800d290 <chEvtBroadcastFlagsI>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	e7d8      	b.n	800e78c <Vector90+0xc>
 800e7da:	bf00      	nop
 800e7dc:	20000f44 	.word	0x20000f44
 800e7e0:	20000f64 	.word	0x20000f64
 800e7e4:	f3af 8000 	nop.w
 800e7e8:	f3af 8000 	nop.w
 800e7ec:	f3af 8000 	nop.w

0800e7f0 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 800e7f2:	4d16      	ldr	r5, [pc, #88]	; (800e84c <Vector94+0x5c>)
 800e7f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e7f6:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800e7f8:	07a2      	lsls	r2, r4, #30
 800e7fa:	d111      	bne.n	800e820 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800e7fc:	06e3      	lsls	r3, r4, #27
 800e7fe:	d50b      	bpl.n	800e818 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800e800:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e802:	2110      	movs	r1, #16
 800e804:	6119      	str	r1, [r3, #16]
 800e806:	2320      	movs	r3, #32
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	4810      	ldr	r0, [pc, #64]	; (800e850 <Vector94+0x60>)
 800e80e:	f7fe fd3f 	bl	800d290 <chEvtBroadcastFlagsI>
 800e812:	2300      	movs	r3, #0
 800e814:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e81c:	f7fe bec8 	b.w	800d5b0 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800e820:	695a      	ldr	r2, [r3, #20]
 800e822:	f022 0210 	bic.w	r2, r2, #16
 800e826:	615a      	str	r2, [r3, #20]
 800e828:	2320      	movs	r3, #32
 800e82a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e82e:	2100      	movs	r1, #0
 800e830:	f105 0010 	add.w	r0, r5, #16
 800e834:	f7fe fca4 	bl	800d180 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e838:	f105 0018 	add.w	r0, r5, #24
 800e83c:	2102      	movs	r1, #2
 800e83e:	f7fe fd27 	bl	800d290 <chEvtBroadcastFlagsI>
 800e842:	2300      	movs	r3, #0
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	e7d8      	b.n	800e7fc <Vector94+0xc>
 800e84a:	bf00      	nop
 800e84c:	20000f44 	.word	0x20000f44
 800e850:	20000f64 	.word	0x20000f64
 800e854:	f3af 8000 	nop.w
 800e858:	f3af 8000 	nop.w
 800e85c:	f3af 8000 	nop.w

0800e860 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800e860:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  msr = canp->can->MSR;
 800e862:	4d1b      	ldr	r5, [pc, #108]	; (800e8d0 <Vector98+0x70>)
 800e864:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e866:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800e868:	221c      	movs	r2, #28
 800e86a:	605a      	str	r2, [r3, #4]
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800e86c:	0722      	lsls	r2, r4, #28
 800e86e:	d41d      	bmi.n	800e8ac <Vector98+0x4c>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800e870:	0763      	lsls	r3, r4, #29
 800e872:	d517      	bpl.n	800e8a4 <Vector98+0x44>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 800e874:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e876:	6993      	ldr	r3, [r2, #24]

    canp->can->ESR &= ~CAN_ESR_LEC;
 800e878:	6991      	ldr	r1, [r2, #24]
 800e87a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800e87e:	6191      	str	r1, [r2, #24]
    flags = (eventflags_t)(esr & 7);
    if ((esr & CAN_ESR_LEC) > 0)
 800e880:	f013 0f70 	tst.w	r3, #112	; 0x70
  if (msr & CAN_MSR_ERRI) {
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;

    canp->can->ESR &= ~CAN_ESR_LEC;
    flags = (eventflags_t)(esr & 7);
 800e884:	f003 0107 	and.w	r1, r3, #7
    if ((esr & CAN_ESR_LEC) > 0)
      flags |= CAN_FRAMING_ERROR;
 800e888:	bf18      	it	ne
 800e88a:	f041 0108 	orrne.w	r1, r1, #8
 800e88e:	2220      	movs	r2, #32
 800e890:	f382 8811 	msr	BASEPRI, r2
 800e894:	480f      	ldr	r0, [pc, #60]	; (800e8d4 <Vector98+0x74>)
 800e896:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e89a:	f7fe fcf9 	bl	800d290 <chEvtBroadcastFlagsI>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e8a8:	f7fe be82 	b.w	800d5b0 <_port_irq_epilogue>
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e8ac:	681a      	ldr	r2, [r3, #0]
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800e8ae:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e8b0:	f022 0202 	bic.w	r2, r2, #2
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800e8b4:	2103      	movs	r1, #3
 800e8b6:	f800 1b28 	strb.w	r1, [r0], #40
 800e8ba:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	f381 8811 	msr	BASEPRI, r1
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	f7fe fce4 	bl	800d290 <chEvtBroadcastFlagsI>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	e7cf      	b.n	800e870 <Vector98+0x10>
 800e8d0:	20000f44 	.word	0x20000f44
 800e8d4:	20000f64 	.word	0x20000f64
 800e8d8:	f3af 8000 	nop.w
 800e8dc:	f3af 8000 	nop.w

0800e8e0 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800e8e0:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800e8e2:	4c06      	ldr	r4, [pc, #24]	; (800e8fc <can_lld_init+0x1c>)
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f7fe febb 	bl	800d660 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e8ea:	2100      	movs	r1, #0
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800e8ec:	4b04      	ldr	r3, [pc, #16]	; (800e900 <can_lld_init+0x20>)
 800e8ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e8f0:	460a      	mov	r2, r1
 800e8f2:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800e8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e8f8:	f7ff be92 	b.w	800e620 <can_lld_set_filters>
 800e8fc:	20000f44 	.word	0x20000f44
 800e900:	40006400 	.word	0x40006400
 800e904:	f3af 8000 	nop.w
 800e908:	f3af 8000 	nop.w
 800e90c:	f3af 8000 	nop.w

0800e910 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e914:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800eacc <_pal_lld_init+0x1bc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e918:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800ead0 <_pal_lld_init+0x1c0>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e91c:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e920:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 800ead4 <_pal_lld_init+0x1c4>
 800e924:	4f63      	ldr	r7, [pc, #396]	; (800eab4 <_pal_lld_init+0x1a4>)
 800e926:	4e64      	ldr	r6, [pc, #400]	; (800eab8 <_pal_lld_init+0x1a8>)
 800e928:	4d64      	ldr	r5, [pc, #400]	; (800eabc <_pal_lld_init+0x1ac>)
 800e92a:	4c65      	ldr	r4, [pc, #404]	; (800eac0 <_pal_lld_init+0x1b0>)
 800e92c:	4965      	ldr	r1, [pc, #404]	; (800eac4 <_pal_lld_init+0x1b4>)
 800e92e:	4a66      	ldr	r2, [pc, #408]	; (800eac8 <_pal_lld_init+0x1b8>)
 800e930:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 800ead8 <_pal_lld_init+0x1c8>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e934:	f240 19ff 	movw	r9, #511	; 0x1ff
 800e938:	ea4a 0a09 	orr.w	sl, sl, r9
 800e93c:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800e940:	f8d8 a050 	ldr.w	sl, [r8, #80]	; 0x50
 800e944:	ea4a 0909 	orr.w	r9, sl, r9
 800e948:	f8c8 9050 	str.w	r9, [r8, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e94c:	6843      	ldr	r3, [r0, #4]
 800e94e:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e952:	6883      	ldr	r3, [r0, #8]
 800e954:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 800e958:	68c3      	ldr	r3, [r0, #12]
 800e95a:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 800e95e:	6903      	ldr	r3, [r0, #16]
 800e960:	f8cc 3014 	str.w	r3, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800e964:	6943      	ldr	r3, [r0, #20]
 800e966:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800e96a:	6983      	ldr	r3, [r0, #24]
 800e96c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e970:	6803      	ldr	r3, [r0, #0]
 800e972:	f8cc 3000 	str.w	r3, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e976:	6a03      	ldr	r3, [r0, #32]
 800e978:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e97c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e97e:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800e982:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e984:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 800e988:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e98a:	f8ce 3014 	str.w	r3, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800e98e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e990:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800e994:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e996:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e99a:	69c3      	ldr	r3, [r0, #28]
 800e99c:	f8ce 3000 	str.w	r3, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e9a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e9a2:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e9a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e9a6:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800e9a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e9aa:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 800e9ac:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800e9ae:	617b      	str	r3, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800e9b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e9b2:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800e9b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e9b6:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e9b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e9ba:	603b      	str	r3, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e9bc:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800e9be:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e9c0:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 800e9c2:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800e9c4:	6e07      	ldr	r7, [r0, #96]	; 0x60
 800e9c6:	60f7      	str	r7, [r6, #12]
  gpiop->ODR     = config->odr;
 800e9c8:	6e47      	ldr	r7, [r0, #100]	; 0x64
 800e9ca:	6177      	str	r7, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800e9cc:	6e87      	ldr	r7, [r0, #104]	; 0x68
 800e9ce:	6237      	str	r7, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800e9d0:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800e9d2:	6277      	str	r7, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e9d4:	6d47      	ldr	r7, [r0, #84]	; 0x54
 800e9d6:	6037      	str	r7, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e9d8:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800e9da:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e9dc:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800e9de:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800e9e0:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
 800e9e2:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 800e9e4:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 800e9e8:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800e9ea:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800e9ee:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800e9f0:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800e9f4:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e9f6:	6f06      	ldr	r6, [r0, #112]	; 0x70
 800e9f8:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e9fa:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
 800e9fe:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800ea00:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
 800ea04:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800ea06:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
 800ea0a:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800ea0c:	f8d0 509c 	ldr.w	r5, [r0, #156]	; 0x9c
 800ea10:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800ea12:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 800ea16:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800ea18:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
 800ea1c:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800ea1e:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 800ea22:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800ea24:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
 800ea28:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800ea2a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800ea2e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800ea30:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
 800ea34:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800ea36:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 800ea3a:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800ea3c:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
 800ea40:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800ea42:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 800ea46:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800ea48:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 800ea4c:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800ea4e:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 800ea52:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800ea54:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
 800ea58:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800ea5a:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
 800ea5e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800ea60:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
 800ea64:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800ea66:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
 800ea6a:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800ea6c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
 800ea70:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800ea72:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 800ea76:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800ea78:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800ea7c:	f8cb 2004 	str.w	r2, [fp, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800ea80:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800ea84:	f8cb 2008 	str.w	r2, [fp, #8]
  gpiop->PUPDR   = config->pupdr;
 800ea88:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800ea8c:	f8cb 200c 	str.w	r2, [fp, #12]
  gpiop->ODR     = config->odr;
 800ea90:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800ea94:	f8cb 2014 	str.w	r2, [fp, #20]
  gpiop->AFRL    = config->afrl;
 800ea98:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800ea9c:	f8cb 2020 	str.w	r2, [fp, #32]
  gpiop->AFRH    = config->afrh;
 800eaa0:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800eaa4:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800eaa8:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800eaac:	f8cb 2000 	str.w	r2, [fp]
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	40020800 	.word	0x40020800
 800eab8:	40020c00 	.word	0x40020c00
 800eabc:	40021000 	.word	0x40021000
 800eac0:	40021400 	.word	0x40021400
 800eac4:	40021800 	.word	0x40021800
 800eac8:	40021c00 	.word	0x40021c00
 800eacc:	40023800 	.word	0x40023800
 800ead0:	40020000 	.word	0x40020000
 800ead4:	40020400 	.word	0x40020400
 800ead8:	40022000 	.word	0x40022000
 800eadc:	f3af 8000 	nop.w

0800eae0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800eae4:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800eae8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800eaec:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800eaf0:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800eaf4:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800eaf8:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800eafa:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800eafe:	f04f 0901 	mov.w	r9, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800eb02:	f04f 0803 	mov.w	r8, #3
 800eb06:	e02b      	b.n	800eb60 <_pal_lld_setgroupmode+0x80>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800eb08:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800eb0c:	ea2b 0303 	bic.w	r3, fp, r3
 800eb10:	ea43 030a 	orr.w	r3, r3, sl
 800eb14:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800eb16:	6843      	ldr	r3, [r0, #4]
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800eb18:	fa09 fa04 	lsl.w	sl, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800eb1c:	ea23 030a 	bic.w	r3, r3, sl
 800eb20:	433b      	orrs	r3, r7
 800eb22:	6043      	str	r3, [r0, #4]
 800eb24:	ea4f 0a44 	mov.w	sl, r4, lsl #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800eb28:	6883      	ldr	r3, [r0, #8]
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800eb2a:	fa08 fa0a 	lsl.w	sl, r8, sl
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800eb2e:	ea6f 0a0a 	mvn.w	sl, sl
 800eb32:	ea0a 0303 	and.w	r3, sl, r3
 800eb36:	4333      	orrs	r3, r6
 800eb38:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800eb3a:	68c3      	ldr	r3, [r0, #12]
 800eb3c:	ea0a 0303 	and.w	r3, sl, r3
 800eb40:	432b      	orrs	r3, r5
 800eb42:	60c3      	str	r3, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800eb44:	6803      	ldr	r3, [r0, #0]
 800eb46:	ea0a 0303 	and.w	r3, sl, r3
 800eb4a:	ea43 030e 	orr.w	r3, r3, lr
 800eb4e:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800eb50:	0849      	lsrs	r1, r1, #1
 800eb52:	d019      	beq.n	800eb88 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
 800eb54:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800eb56:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800eb58:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800eb5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800eb5e:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800eb60:	f004 0307 	and.w	r3, r4, #7
 800eb64:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800eb66:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800eb6a:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 800eb6e:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800eb72:	d0ed      	beq.n	800eb50 <_pal_lld_setgroupmode+0x70>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800eb74:	2c07      	cmp	r4, #7
 800eb76:	d9c7      	bls.n	800eb08 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800eb78:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800eb7c:	ea2b 0303 	bic.w	r3, fp, r3
 800eb80:	ea43 030a 	orr.w	r3, r3, sl
 800eb84:	6243      	str	r3, [r0, #36]	; 0x24
 800eb86:	e7c6      	b.n	800eb16 <_pal_lld_setgroupmode+0x36>
 800eb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8c:	f3af 8000 	nop.w

0800eb90 <VectorC4>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800eb90:	483a      	ldr	r0, [pc, #232]	; (800ec7c <VectorC4+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800eb92:	4a3b      	ldr	r2, [pc, #236]	; (800ec80 <VectorC4+0xf0>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800eb94:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800eb96:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800eb98:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800eb9a:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800eb9c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800eba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d04c      	beq.n	800ec42 <VectorC4+0xb2>
 800eba8:	d81e      	bhi.n	800ebe8 <VectorC4+0x58>
 800ebaa:	3a07      	subs	r2, #7
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d03c      	beq.n	800ec2a <VectorC4+0x9a>
 800ebb0:	3201      	adds	r2, #1
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d110      	bne.n	800ebd8 <VectorC4+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ebb6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800ebb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ebba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800ebbe:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ebc0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	f042 0201 	orr.w	r2, r2, #1
 800ebc8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800ebca:	6862      	ldr	r2, [r4, #4]
 800ebcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ebd0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d94b      	bls.n	800ec70 <VectorC4+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800ebd8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800ebdc:	bf18      	it	ne
 800ebde:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ebe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800ebe4:	f7fe bce4 	b.w	800d5b0 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ebe8:	4a26      	ldr	r2, [pc, #152]	; (800ec84 <VectorC4+0xf4>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d012      	beq.n	800ec14 <VectorC4+0x84>
 800ebee:	3202      	adds	r2, #2
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d1f1      	bne.n	800ebd8 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800ebf4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	685e      	ldr	r6, [r3, #4]
 800ebfa:	b33e      	cbz	r6, 800ec4c <VectorC4+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ebfc:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800ebfe:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ec00:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800ec04:	f042 0201 	orr.w	r2, r2, #1
 800ec08:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ec0a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ec0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800ec10:	f7fe bcce 	b.w	800d5b0 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ec14:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ec16:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ec18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800ec1c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ec1e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ec20:	6813      	ldr	r3, [r2, #0]
 800ec22:	f043 0301 	orr.w	r3, r3, #1
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	e7d6      	b.n	800ebd8 <VectorC4+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800ec2a:	8c03      	ldrh	r3, [r0, #32]
 800ec2c:	0a1a      	lsrs	r2, r3, #8
 800ec2e:	d00b      	beq.n	800ec48 <VectorC4+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800ec38:	f002 0206 	and.w	r2, r2, #6
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	6123      	str	r3, [r4, #16]
 800ec40:	e7ca      	b.n	800ebd8 <VectorC4+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800ec42:	8c03      	ldrh	r3, [r0, #32]
 800ec44:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800ec48:	6123      	str	r3, [r4, #16]
 800ec4a:	e7c5      	b.n	800ebd8 <VectorC4+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec52:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec5a:	6023      	str	r3, [r4, #0]
 800ec5c:	2320      	movs	r3, #32
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800ec62:	301c      	adds	r0, #28
 800ec64:	4631      	mov	r1, r6
 800ec66:	f7fe fa63 	bl	800d130 <chThdResumeI>
 800ec6a:	f386 8811 	msr	BASEPRI, r6
 800ec6e:	e7b3      	b.n	800ebd8 <VectorC4+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800ec70:	6823      	ldr	r3, [r4, #0]
 800ec72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec76:	6023      	str	r3, [r4, #0]
 800ec78:	e7ae      	b.n	800ebd8 <VectorC4+0x48>
 800ec7a:	bf00      	nop
 800ec7c:	20000f74 	.word	0x20000f74
 800ec80:	00030008 	.word	0x00030008
 800ec84:	00070082 	.word	0x00070082
 800ec88:	f3af 8000 	nop.w
 800ec8c:	f3af 8000 	nop.w

0800ec90 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800ec90:	4834      	ldr	r0, [pc, #208]	; (800ed64 <VectorC8+0xd4>)
/**
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800ec92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 800ec94:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec96:	6b07      	ldr	r7, [r0, #48]	; 0x30
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800ec98:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec9a:	683a      	ldr	r2, [r7, #0]
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800ec9c:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800ec9e:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 800eca2:	43db      	mvns	r3, r3
 800eca4:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eca6:	6813      	ldr	r3, [r2, #0]
 800eca8:	f023 031f 	bic.w	r3, r3, #31
 800ecac:	6013      	str	r3, [r2, #0]
 800ecae:	6813      	ldr	r3, [r2, #0]
 800ecb0:	07db      	lsls	r3, r3, #31
 800ecb2:	d4fc      	bmi.n	800ecae <VectorC8+0x1e>
 800ecb4:	f897 e008 	ldrb.w	lr, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800ecb8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ecba:	687f      	ldr	r7, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 800ecbc:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ecbe:	233d      	movs	r3, #61	; 0x3d
 800ecc0:	fa03 f30e 	lsl.w	r3, r3, lr
 800ecc4:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800ecc6:	6813      	ldr	r3, [r2, #0]
 800ecc8:	f023 031f 	bic.w	r3, r3, #31
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	6813      	ldr	r3, [r2, #0]
 800ecd0:	f013 0301 	ands.w	r3, r3, #1
 800ecd4:	d1fb      	bne.n	800ecce <VectorC8+0x3e>
 800ecd6:	7a2f      	ldrb	r7, [r5, #8]
 800ecd8:	686d      	ldr	r5, [r5, #4]
 800ecda:	223d      	movs	r2, #61	; 0x3d
 800ecdc:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800ecde:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800ece0:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800ece2:	bf48      	it	mi
 800ece4:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800ece6:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800ece8:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800ecea:	bf44      	itt	mi
 800ecec:	f043 0302 	orrmi.w	r3, r3, #2
 800ecf0:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800ecf2:	054a      	lsls	r2, r1, #21
 800ecf4:	d50a      	bpl.n	800ed0c <VectorC8+0x7c>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800ecf6:	6862      	ldr	r2, [r4, #4]
 800ecf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ecfc:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800ecfe:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800ed00:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800ed04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed08:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800ed0a:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800ed0c:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800ed0e:	bf44      	itt	mi
 800ed10:	f043 0308 	orrmi.w	r3, r3, #8
 800ed14:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800ed16:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800ed18:	bf44      	itt	mi
 800ed1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ed1e:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800ed20:	04cc      	lsls	r4, r1, #19
 800ed22:	d513      	bpl.n	800ed4c <VectorC8+0xbc>
    i2cp->errors |= I2C_PEC_ERROR;
 800ed24:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800ed28:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800ed2a:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800ed2c:	d416      	bmi.n	800ed5c <VectorC8+0xcc>
 800ed2e:	2320      	movs	r3, #32
 800ed30:	f383 8811 	msr	BASEPRI, r3
 800ed34:	480c      	ldr	r0, [pc, #48]	; (800ed68 <VectorC8+0xd8>)
 800ed36:	f06f 0101 	mvn.w	r1, #1
 800ed3a:	f7fe f9f9 	bl	800d130 <chThdResumeI>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f383 8811 	msr	BASEPRI, r3

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800ed44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800ed48:	f7fe bc32 	b.w	800d5b0 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800ed4c:	0432      	lsls	r2, r6, #16
 800ed4e:	d405      	bmi.n	800ed5c <VectorC8+0xcc>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1ec      	bne.n	800ed2e <VectorC8+0x9e>

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800ed54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800ed58:	f7fe bc2a 	b.w	800d5b0 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800ed5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed60:	6083      	str	r3, [r0, #8]
 800ed62:	e7e4      	b.n	800ed2e <VectorC8+0x9e>
 800ed64:	20000f74 	.word	0x20000f74
 800ed68:	20000f90 	.word	0x20000f90
 800ed6c:	f3af 8000 	nop.w

0800ed70 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800ed70:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800ed72:	4c07      	ldr	r4, [pc, #28]	; (800ed90 <i2c_lld_init+0x20>)
 800ed74:	4620      	mov	r0, r4
 800ed76:	f7fe fca3 	bl	800d6c0 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800ed7a:	4b06      	ldr	r3, [pc, #24]	; (800ed94 <i2c_lld_init+0x24>)
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 800ed7c:	4a06      	ldr	r2, [pc, #24]	; (800ed98 <i2c_lld_init+0x28>)
 800ed7e:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800ed80:	2100      	movs	r1, #0
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800ed82:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800ed86:	61e1      	str	r1, [r4, #28]
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800ed88:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800ed8a:	6322      	str	r2, [r4, #48]	; 0x30
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop
 800ed90:	20000f74 	.word	0x20000f74
 800ed94:	08013218 	.word	0x08013218
 800ed98:	40005800 	.word	0x40005800
 800ed9c:	f3af 8000 	nop.w

0800eda0 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800eda4:	4bb2      	ldr	r3, [pc, #712]	; (800f070 <usb_lld_pump+0x2d0>)
 800eda6:	49b3      	ldr	r1, [pc, #716]	; (800f074 <usb_lld_pump+0x2d4>)
 800eda8:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 800edaa:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
 800edae:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800edb0:	b085      	sub	sp, #20
 800edb2:	2320      	movs	r3, #32
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800edbc:	46d3      	mov	fp, sl
 800edbe:	9303      	str	r3, [sp, #12]
 800edc0:	4682      	mov	sl, r0
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 800edc2:	f89a 3000 	ldrb.w	r3, [sl]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d006      	beq.n	800edd8 <usb_lld_pump+0x38>
 800edca:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 800edce:	b963      	cbnz	r3, 800edea <usb_lld_pump+0x4a>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 800edd0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800edd4:	06db      	lsls	r3, r3, #27
 800edd6:	d408      	bmi.n	800edea <usb_lld_pump+0x4a>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 800edd8:	f8db 3018 	ldr.w	r3, [fp, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 800eddc:	9803      	ldr	r0, [sp, #12]
 800edde:	f043 0310 	orr.w	r3, r3, #16
 800ede2:	f8cb 3018 	str.w	r3, [fp, #24]
 800ede6:	f7fe f993 	bl	800d110 <chThdSuspendS>
 800edea:	2300      	movs	r3, #0
 800edec:	f383 8811 	msr	BASEPRI, r3
 800edf0:	4698      	mov	r8, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800edf2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800edf6:	f013 0310 	ands.w	r3, r3, #16
 800edfa:	d024      	beq.n	800ee46 <usb_lld_pump+0xa6>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 800edfc:	f8da 2050 	ldr.w	r2, [sl, #80]	; 0x50
 800ee00:	6a13      	ldr	r3, [r2, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800ee02:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 800ee06:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800ee0a:	d031      	beq.n	800ee70 <usb_lld_pump+0xd0>
 800ee0c:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800ee10:	d1ef      	bne.n	800edf2 <usb_lld_pump+0x52>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 800ee12:	f003 010f 	and.w	r1, r3, #15
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800ee16:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
  sts = usbp->otg->GRXSTSP;
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800ee1a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800ee1e:	68c9      	ldr	r1, [r1, #12]
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 800ee20:	3303      	adds	r3, #3
  max = (max + 3) / 4;
  while (n) {
 800ee22:	089b      	lsrs	r3, r3, #2
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800ee24:	6a0c      	ldr	r4, [r1, #32]
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800ee26:	d0e4      	beq.n	800edf2 <usb_lld_pump+0x52>
 800ee28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee2c:	2102      	movs	r1, #2
    uint32_t w = *fifop;
 800ee2e:	6810      	ldr	r0, [r2, #0]
    if (max) {
 800ee30:	b111      	cbz	r1, 800ee38 <usb_lld_pump+0x98>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 800ee32:	f844 0b04 	str.w	r0, [r4], #4
      buf += 4;
      max--;
 800ee36:	3901      	subs	r1, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	d1f8      	bne.n	800ee2e <usb_lld_pump+0x8e>

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800ee3c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ee40:	f013 0310 	ands.w	r3, r3, #16
 800ee44:	d1da      	bne.n	800edfc <usb_lld_pump+0x5c>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800ee46:	2101      	movs	r1, #1
      if (usbp->txpending & epmask) {
 800ee48:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800ee4c:	fa01 f108 	lsl.w	r1, r1, r8
      if (usbp->txpending & epmask) {
 800ee50:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800ee52:	9101      	str	r1, [sp, #4]
      if (usbp->txpending & epmask) {
 800ee54:	d168      	bne.n	800ef28 <usb_lld_pump+0x188>
 800ee56:	f108 0801 	add.w	r8, r8, #1
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800ee5a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	fa5f f888 	uxtb.w	r8, r8
 800ee64:	4598      	cmp	r8, r3
 800ee66:	d9c4      	bls.n	800edf2 <usb_lld_pump+0x52>
 800ee68:	2320      	movs	r3, #32
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	e7a8      	b.n	800edc2 <usb_lld_pump+0x22>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 800ee70:	f003 050f 	and.w	r5, r3, #15
 800ee74:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800ee78:	f3c3 140a 	ubfx	r4, r3, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
 800ee7c:	68eb      	ldr	r3, [r5, #12]
 800ee7e:	6998      	ldr	r0, [r3, #24]
 800ee80:	7803      	ldrb	r3, [r0, #0]
 800ee82:	b9db      	cbnz	r3, 800eebc <usb_lld_pump+0x11c>
 800ee84:	6843      	ldr	r3, [r0, #4]
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800ee86:	6881      	ldr	r1, [r0, #8]
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
                             usbp->epc[ep]->out_state->mode.queue.rxqueue,
                             cnt);
    }
    else {
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 800ee88:	68c6      	ldr	r6, [r0, #12]
 800ee8a:	3303      	adds	r3, #3
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800ee8c:	1a59      	subs	r1, r3, r1
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
 800ee8e:	1ce3      	adds	r3, r4, #3
  max = (max + 3) / 4;
  while (n) {
 800ee90:	089b      	lsrs	r3, r3, #2
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
 800ee92:	ea4f 0191 	mov.w	r1, r1, lsr #2
  while (n) {
 800ee96:	d009      	beq.n	800eeac <usb_lld_pump+0x10c>
 800ee98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee9c:	46b6      	mov	lr, r6
    uint32_t w = *fifop;
 800ee9e:	6817      	ldr	r7, [r2, #0]
    if (max) {
 800eea0:	b111      	cbz	r1, 800eea8 <usb_lld_pump+0x108>
      /* Note, this line relies on the Cortex-M3/M4 ability to perform
         unaligned word accesses and on the LSB-first memory organization.*/
      *((PACKED_VAR uint32_t *)buf) = w;
 800eea2:	f84e 7b04 	str.w	r7, [lr], #4
      buf += 4;
      max--;
 800eea6:	3901      	subs	r1, #1
                                    size_t n,
                                    size_t max) {

  n = (n + 3) / 4;
  max = (max + 3) / 4;
  while (n) {
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	d1f8      	bne.n	800ee9e <usb_lld_pump+0xfe>
      otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                              usbp->epc[ep]->out_state->mode.linear.rxbuf,
                              cnt,
                              usbp->epc[ep]->out_state->rxsize -
                              usbp->epc[ep]->out_state->rxcnt);
      usbp->epc[ep]->out_state->mode.linear.rxbuf += cnt;
 800eeac:	4426      	add	r6, r4
 800eeae:	60c6      	str	r6, [r0, #12]
    }
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800eeb0:	68eb      	ldr	r3, [r5, #12]
 800eeb2:	699a      	ldr	r2, [r3, #24]
 800eeb4:	6893      	ldr	r3, [r2, #8]
 800eeb6:	4423      	add	r3, r4
 800eeb8:	6093      	str	r3, [r2, #8]
 800eeba:	e79a      	b.n	800edf2 <usb_lld_pump+0x52>
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    if (usbp->epc[ep]->out_state->rxqueued) {
      /* Queue associated.*/
      otg_fifo_read_to_queue(usbp->otg->FIFO[0],
 800eebc:	68c0      	ldr	r0, [r0, #12]
                                   input_queue_t *iqp,
                                   size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800eebe:	b324      	cbz	r4, 800ef0a <usb_lld_pump+0x16a>
 800eec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eec4:	4626      	mov	r6, r4
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800eec6:	2e03      	cmp	r6, #3
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
 800eec8:	6941      	ldr	r1, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800eeca:	d907      	bls.n	800eedc <usb_lld_pump+0x13c>
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
      if (iqp->q_wrptr >= iqp->q_top) {
 800eecc:	6903      	ldr	r3, [r0, #16]
 800eece:	4299      	cmp	r1, r3
 800eed0:	d304      	bcc.n	800eedc <usb_lld_pump+0x13c>
        iqp->q_wrptr = iqp->q_buffer;
 800eed2:	68c3      	ldr	r3, [r0, #12]
 800eed4:	6143      	str	r3, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800eed6:	2e03      	cmp	r6, #3
      size_t streak;
      uint32_t nw2end = (iqp->q_wrptr - iqp->q_wrptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      iqp->q_wrptr = otg_do_pop(fifop, iqp->q_wrptr, streak);
 800eed8:	6941      	ldr	r1, [r0, #20]
  ntogo = n;
  while (ntogo > 0) {
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800eeda:	d8f7      	bhi.n	800eecc <usb_lld_pump+0x12c>
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
      break;

    /* One byte at time.*/
    w = *fifop;
 800eedc:	f8d2 e000 	ldr.w	lr, [r2]
 800eee0:	2700      	movs	r7, #0
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      *iqp->q_wrptr++ = (uint8_t)(w >> (i * 8));
 800eee2:	f101 0c01 	add.w	ip, r1, #1
 800eee6:	fa2e f307 	lsr.w	r3, lr, r7
 800eeea:	f8c0 c014 	str.w	ip, [r0, #20]
 800eeee:	700b      	strb	r3, [r1, #0]
      if (iqp->q_wrptr >= iqp->q_top)
 800eef0:	6903      	ldr	r3, [r0, #16]
 800eef2:	6941      	ldr	r1, [r0, #20]
 800eef4:	4299      	cmp	r1, r3
        iqp->q_wrptr = iqp->q_buffer;
 800eef6:	bf24      	itt	cs
 800eef8:	68c3      	ldrcs	r3, [r0, #12]
 800eefa:	6143      	strcs	r3, [r0, #20]
      break;

    /* One byte at time.*/
    w = *fifop;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 800eefc:	3e01      	subs	r6, #1
 800eefe:	d004      	beq.n	800ef0a <usb_lld_pump+0x16a>
 800ef00:	2f18      	cmp	r7, #24
 800ef02:	d0e0      	beq.n	800eec6 <usb_lld_pump+0x126>
 800ef04:	3708      	adds	r7, #8
 800ef06:	6941      	ldr	r1, [r0, #20]
 800ef08:	e7eb      	b.n	800eee2 <usb_lld_pump+0x142>
 800ef0a:	2320      	movs	r3, #32
 800ef0c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  /* Updating queue.*/
  osalSysLock();
  iqp->q_counter += n;
 800ef10:	6883      	ldr	r3, [r0, #8]
 800ef12:	4423      	add	r3, r4
 800ef14:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800ef16:	2100      	movs	r1, #0
 800ef18:	f7fe f932 	bl	800d180 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 800ef1c:	f7fe f800 	bl	800cf20 <chSchRescheduleS>
 800ef20:	2300      	movs	r3, #0
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	e7c3      	b.n	800eeb0 <usb_lld_pump+0x110>
 800ef28:	2220      	movs	r2, #32
 800ef2a:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800ef2e:	f8db 1008 	ldr.w	r1, [fp, #8]
        usbp->txpending &= ~epmask;
 800ef32:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
 800ef36:	9801      	ldr	r0, [sp, #4]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800ef38:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 800ef3c:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800ef40:	f8cb 1008 	str.w	r1, [fp, #8]
        usbp->txpending &= ~epmask;
 800ef44:	f8ca 205c 	str.w	r2, [sl, #92]	; 0x5c
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800ef50:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800ef54:	6941      	ldr	r1, [r0, #20]
 800ef56:	688a      	ldr	r2, [r1, #8]
 800ef58:	684b      	ldr	r3, [r1, #4]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	f080 80b1 	bcs.w	800f0c2 <usb_lld_pump+0x322>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800ef60:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 800ef64:	8a07      	ldrh	r7, [r0, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800ef66:	ea4f 1048 	mov.w	r0, r8, lsl #5
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	1830      	adds	r0, r6, r0
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800ef6e:	1a9b      	subs	r3, r3, r2
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800ef70:	f8d0 2918 	ldr.w	r2, [r0, #2328]	; 0x918
 800ef74:	429f      	cmp	r7, r3
 800ef76:	bf28      	it	cs
 800ef78:	461f      	movcs	r7, r3
 800ef7a:	b293      	uxth	r3, r2
 800ef7c:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
 800ef80:	f108 0801 	add.w	r8, r8, #1
 800ef84:	d82e      	bhi.n	800efe4 <usb_lld_pump+0x244>
 800ef86:	f8cd b008 	str.w	fp, [sp, #8]
 800ef8a:	46a3      	mov	fp, r4

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
 800ef8c:	780b      	ldrb	r3, [r1, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d13d      	bne.n	800f00e <usb_lld_pump+0x26e>
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {

  otg_do_push(fifop, (uint8_t *)buf, (n + 3) / 4);
 800ef92:	1cfb      	adds	r3, r7, #3
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800ef94:	68cc      	ldr	r4, [r1, #12]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800ef96:	089b      	lsrs	r3, r3, #2
                                usbp->epc[ep]->in_state->mode.queue.txqueue,
                                n);
    }
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800ef98:	eb06 3608 	add.w	r6, r6, r8, lsl #12
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800ef9c:	bf18      	it	ne
 800ef9e:	4622      	movne	r2, r4
 800efa0:	d004      	beq.n	800efac <usb_lld_pump+0x20c>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800efa2:	f852 0b04 	ldr.w	r0, [r2], #4
 800efa6:	6030      	str	r0, [r6, #0]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800efa8:	3b01      	subs	r3, #1
 800efaa:	d1fa      	bne.n	800efa2 <usb_lld_pump+0x202>
    else {
      /* Linear buffer associated.*/
      otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                                 usbp->epc[ep]->in_state->mode.linear.txbuf,
                                 n);
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
 800efac:	443c      	add	r4, r7
 800efae:	60cc      	str	r4, [r1, #12]
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800efb0:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800efb4:	6941      	ldr	r1, [r0, #20]
 800efb6:	688b      	ldr	r3, [r1, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800efb8:	684a      	ldr	r2, [r1, #4]
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800efba:	443b      	add	r3, r7
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800efbc:	429a      	cmp	r2, r3
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
    }
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800efbe:	608b      	str	r3, [r1, #8]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800efc0:	d97b      	bls.n	800f0ba <usb_lld_pump+0x31a>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800efc2:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 800efc6:	8a00      	ldrh	r0, [r0, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800efc8:	eb06 040b 	add.w	r4, r6, fp
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800efcc:	1ad7      	subs	r7, r2, r3
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800efce:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
 800efd2:	4287      	cmp	r7, r0
 800efd4:	bf28      	it	cs
 800efd6:	4607      	movcs	r7, r0
 800efd8:	b29b      	uxth	r3, r3
 800efda:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
 800efde:	d9d5      	bls.n	800ef8c <usb_lld_pump+0x1ec>
 800efe0:	f8dd b008 	ldr.w	fp, [sp, #8]
      return FALSE;
 800efe4:	2200      	movs	r2, #0
 800efe6:	2320      	movs	r3, #32
 800efe8:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800efec:	f8db 3008 	ldr.w	r3, [fp, #8]
 800eff0:	f043 0301 	orr.w	r3, r3, #1
 800eff4:	f8cb 3008 	str.w	r3, [fp, #8]
        if (!done)
 800eff8:	b92a      	cbnz	r2, 800f006 <usb_lld_pump+0x266>
          otgp->DIEPEMPMSK |= epmask;
 800effa:	f8db 3834 	ldr.w	r3, [fp, #2100]	; 0x834
 800effe:	9a01      	ldr	r2, [sp, #4]
 800f000:	431a      	orrs	r2, r3
 800f002:	f8cb 2834 	str.w	r2, [fp, #2100]	; 0x834
 800f006:	2300      	movs	r3, #0
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	e725      	b.n	800ee5a <usb_lld_pump+0xba>
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    /* Handles the two cases: linear buffer or queue.*/
    if (usbp->epc[ep]->in_state->txqueued) {
      /* Queue associated.*/
      otg_fifo_write_from_queue(usbp->otg->FIFO[ep],
 800f00e:	eb06 3608 	add.w	r6, r6, r8, lsl #12
 800f012:	68c8      	ldr	r0, [r1, #12]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f014:	b1e7      	cbz	r7, 800f050 <usb_lld_pump+0x2b0>
 800f016:	f8d0 e010 	ldr.w	lr, [r0, #16]
 800f01a:	463a      	mov	r2, r7
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
 800f01c:	0893      	lsrs	r3, r2, #2
 800f01e:	d12b      	bne.n	800f078 <usb_lld_pump+0x2d8>
 800f020:	6983      	ldr	r3, [r0, #24]
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 800f022:	2100      	movs	r1, #0
 800f024:	460c      	mov	r4, r1

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800f026:	1c5d      	adds	r5, r3, #1
 800f028:	6185      	str	r5, [r0, #24]
 800f02a:	781b      	ldrb	r3, [r3, #0]
      if (oqp->q_rdptr >= oqp->q_top)
 800f02c:	4575      	cmp	r5, lr

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800f02e:	fa03 f301 	lsl.w	r3, r3, r1
 800f032:	ea44 0403 	orr.w	r4, r4, r3
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
 800f036:	bf24      	itt	cs
 800f038:	68c3      	ldrcs	r3, [r0, #12]
 800f03a:	6183      	strcs	r3, [r0, #24]
      break;

    /* One byte at time.*/
    w = 0;
    i = 0;
    while ((ntogo > 0) && (i < 4)) {
 800f03c:	3a01      	subs	r2, #1
 800f03e:	d004      	beq.n	800f04a <usb_lld_pump+0x2aa>
 800f040:	2918      	cmp	r1, #24
 800f042:	d002      	beq.n	800f04a <usb_lld_pump+0x2aa>
 800f044:	3108      	adds	r1, #8
 800f046:	6983      	ldr	r3, [r0, #24]
 800f048:	e7ed      	b.n	800f026 <usb_lld_pump+0x286>
      if (oqp->q_rdptr >= oqp->q_top)
        oqp->q_rdptr = oqp->q_buffer;
      ntogo--;
      i++;
    }
    *fifop = w;
 800f04a:	6034      	str	r4, [r6, #0]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	d1e5      	bne.n	800f01c <usb_lld_pump+0x27c>
 800f050:	2320      	movs	r3, #32
 800f052:	f383 8811 	msr	BASEPRI, r3
    *fifop = w;
  }

  /* Updating queue.*/
  osalSysLock();
  oqp->q_counter += n;
 800f056:	6883      	ldr	r3, [r0, #8]
 800f058:	443b      	add	r3, r7
 800f05a:	6083      	str	r3, [r0, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800f05c:	2100      	movs	r1, #0
 800f05e:	f7fe f88f 	bl	800d180 <chThdDequeueAllI>
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 800f062:	f7fd ff5d 	bl	800cf20 <chSchRescheduleS>
 800f066:	2300      	movs	r3, #0
 800f068:	f383 8811 	msr	BASEPRI, r3
 800f06c:	e7a0      	b.n	800efb0 <usb_lld_pump+0x210>
 800f06e:	bf00      	nop
 800f070:	20000c40 	.word	0x20000c40
 800f074:	080132d0 	.word	0x080132d0
    uint32_t w, i;
    size_t nw = ntogo / 4;

    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 800f078:	6984      	ldr	r4, [r0, #24]
 800f07a:	ebbe 0104 	subs.w	r1, lr, r4
 800f07e:	bf48      	it	mi
 800f080:	3103      	addmi	r1, #3
 800f082:	1089      	asrs	r1, r1, #2

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
 800f084:	428b      	cmp	r3, r1
 800f086:	bf28      	it	cs
 800f088:	460b      	movcs	r3, r1
 800f08a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f08e:	ebcc 0202 	rsb	r2, ip, r2
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f092:	b133      	cbz	r3, 800f0a2 <usb_lld_pump+0x302>
 800f094:	4621      	mov	r1, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses and on the LSB-first memory organization.*/
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800f096:	f851 5b04 	ldr.w	r5, [r1], #4
 800f09a:	6035      	str	r5, [r6, #0]
 *
 * @notapi
 */
static uint8_t *otg_do_push(volatile uint32_t *fifop, uint8_t *buf, size_t n) {

  while (n > 0) {
 800f09c:	3b01      	subs	r3, #1
 800f09e:	d1fa      	bne.n	800f096 <usb_lld_pump+0x2f6>
 800f0a0:	4464      	add	r4, ip
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
      if (oqp->q_rdptr >= oqp->q_top) {
 800f0a2:	45a6      	cmp	lr, r4
    if (nw > 0) {
      size_t streak;
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;

      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
 800f0a4:	6184      	str	r4, [r0, #24]
      if (oqp->q_rdptr >= oqp->q_top) {
 800f0a6:	d804      	bhi.n	800f0b2 <usb_lld_pump+0x312>
        oqp->q_rdptr = oqp->q_buffer;
 800f0a8:	68c3      	ldr	r3, [r0, #12]
 800f0aa:	6183      	str	r3, [r0, #24]
                                      output_queue_t *oqp,
                                      size_t n) {
  size_t ntogo;

  ntogo = n;
  while (ntogo > 0) {
 800f0ac:	2a00      	cmp	r2, #0
 800f0ae:	d1b5      	bne.n	800f01c <usb_lld_pump+0x27c>
 800f0b0:	e7ce      	b.n	800f050 <usb_lld_pump+0x2b0>
      }
    }

    /* If this condition is not satisfied then there is a word lying across
       queue circular buffer boundary or there are some remaining bytes.*/
    if (ntogo <= 0)
 800f0b2:	2a00      	cmp	r2, #0
 800f0b4:	d0cc      	beq.n	800f050 <usb_lld_pump+0x2b0>
 800f0b6:	4623      	mov	r3, r4
 800f0b8:	e7b3      	b.n	800f022 <usb_lld_pump+0x282>
 800f0ba:	f8dd b008 	ldr.w	fp, [sp, #8]
  while (TRUE) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return TRUE;
 800f0be:	2201      	movs	r2, #1
 800f0c0:	e791      	b.n	800efe6 <usb_lld_pump+0x246>
 800f0c2:	f108 0801 	add.w	r8, r8, #1
 800f0c6:	e7fa      	b.n	800f0be <usb_lld_pump+0x31e>
 800f0c8:	f3af 8000 	nop.w
 800f0cc:	f3af 8000 	nop.w

0800f0d0 <otg_disable_ep.isra.0>:
  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
    ;
}

static void otg_disable_ep(USBDriver *usbp) {
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f0d2:	2400      	movs	r4, #0
 800f0d4:	f8d1 e008 	ldr.w	lr, [r1, #8]
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 800f0d8:	4625      	mov	r5, r4
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800f0da:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800f0de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f0e2:	e014      	b.n	800f10e <otg_disable_ep.isra.0+0x3e>
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
        ;
    }
    else
      otgp->ie[i].DIEPCTL = 0;
 800f0e4:	f8c1 5900 	str.w	r5, [r1, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 800f0e8:	18c2      	adds	r2, r0, r3
 800f0ea:	f8c2 5910 	str.w	r5, [r2, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800f0ee:	f8c2 7908 	str.w	r7, [r2, #2312]	; 0x908
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
 800f0f2:	f8d1 6b00 	ldr.w	r6, [r1, #2816]	; 0xb00
 800f0f6:	2e00      	cmp	r6, #0
 800f0f8:	db17      	blt.n	800f12a <otg_disable_ep.isra.0+0x5a>
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
 800f0fa:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800f0fe:	4403      	add	r3, r0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f100:	3401      	adds	r4, #1
 800f102:	45a6      	cmp	lr, r4
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
        ;
    }
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
 800f104:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800f108:	f8c3 7b08 	str.w	r7, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f10c:	d314      	bcc.n	800f138 <otg_disable_ep.isra.0+0x68>
 800f10e:	0163      	lsls	r3, r4, #5
 800f110:	18c1      	adds	r1, r0, r3
    /* Disable only if enabled because this sentence in the manual:
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".*/
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
 800f112:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800f116:	2a00      	cmp	r2, #0
 800f118:	dae4      	bge.n	800f0e4 <otg_disable_ep.isra.0+0x14>
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800f11a:	f8c1 c900 	str.w	ip, [r1, #2304]	; 0x900
      /* Wait for endpoint disable.*/
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
 800f11e:	460e      	mov	r6, r1
 800f120:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 800f124:	0792      	lsls	r2, r2, #30
 800f126:	d5fb      	bpl.n	800f120 <otg_disable_ep.isra.0+0x50>
 800f128:	e7de      	b.n	800f0e8 <otg_disable_ep.isra.0+0x18>
       "The application must set this bit only if Endpoint Enable is
        already set for this endpoint".
       Note that the attempt to disable the OUT EP0 is ignored by the
       hardware but the code is simpler this way.*/
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
      otgp->oe[i].DOEPCTL = DOEPCTL_EPDIS;
 800f12a:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
      /* Wait for endpoint disable.*/
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
 800f12e:	f8d2 1b08 	ldr.w	r1, [r2, #2824]	; 0xb08
 800f132:	06c9      	lsls	r1, r1, #27
 800f134:	d5fb      	bpl.n	800f12e <otg_disable_ep.isra.0+0x5e>
 800f136:	e7e2      	b.n	800f0fe <otg_disable_ep.isra.0+0x2e>
    else
      otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800f138:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800f13c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 800f140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f142:	bf00      	nop
 800f144:	f3af 8000 	nop.w
 800f148:	f3af 8000 	nop.w
 800f14c:	f3af 8000 	nop.w

0800f150 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800f150:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800f152:	4c06      	ldr	r4, [pc, #24]	; (800f16c <usb_lld_init+0x1c>)
 800f154:	4620      	mov	r0, r4
 800f156:	f7fe fca3 	bl	800daa0 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800f15a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800f15e:	4a04      	ldr	r2, [pc, #16]	; (800f170 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800f160:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800f162:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 800f164:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800f166:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800f168:	6663      	str	r3, [r4, #100]	; 0x64
 800f16a:	bd10      	pop	{r4, pc}
 800f16c:	20000fb0 	.word	0x20000fb0
 800f170:	080132c0 	.word	0x080132c0
 800f174:	f3af 8000 	nop.w
 800f178:	f3af 8000 	nop.w
 800f17c:	f3af 8000 	nop.w

0800f180 <usb_lld_start>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 800f180:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 800f182:	7803      	ldrb	r3, [r0, #0]
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f184:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
 800f186:	2b01      	cmp	r3, #1
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 800f188:	b082      	sub	sp, #8
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 800f18a:	d001      	beq.n	800f190 <usb_lld_start+0x10>
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
  }
}
 800f18c:	b002      	add	sp, #8
 800f18e:	bd70      	pop	{r4, r5, r6, pc}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800f190:	4b30      	ldr	r3, [pc, #192]	; (800f254 <usb_lld_start+0xd4>)
 800f192:	4298      	cmp	r0, r3
 800f194:	4605      	mov	r5, r0
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f196:	bf18      	it	ne
 800f198:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800f19a:	d03a      	beq.n	800f212 <usb_lld_start+0x92>
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 800f19c:	2300      	movs	r3, #0

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 800f19e:	482e      	ldr	r0, [pc, #184]	; (800f258 <usb_lld_start+0xd8>)

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800f1a0:	492e      	ldr	r1, [pc, #184]	; (800f25c <usb_lld_start+0xdc>)
      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG2_NUMBER, STM32_USB_OTG2_IRQ_PRIORITY);
    }
#endif

    usbp->txpending = 0;
 800f1a2:	65eb      	str	r3, [r5, #92]	; 0x5c
    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 800f1a4:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
    usbp->txpending = 0;

    /* - Forced device mode.
       - USB turn-around time = TRDT_VALUE.
       - Full Speed 1.1 PHY.*/
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 800f1a8:	60f0      	str	r0, [r6, #12]

    /* 48MHz 1.1 PHY.*/
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800f1aa:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800f1ae:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 800f1b0:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

    /* Internal FS PHY activation.*/
#if defined(BOARD_OTG_NOVBUSSENS)
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 800f1b4:	63b2      	str	r2, [r6, #56]	; 0x38
 800f1b6:	f7fd fd33 	bl	800cc20 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 800f1be:	6923      	ldr	r3, [r4, #16]
 800f1c0:	07db      	lsls	r3, r3, #31
 800f1c2:	d4fc      	bmi.n	800f1be <usb_lld_start+0x3e>
 800f1c4:	200c      	movs	r0, #12
 800f1c6:	f7fd fd2b 	bl	800cc20 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(12);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	dafc      	bge.n	800f1ca <usb_lld_start+0x4a>

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 800f1d0:	2400      	movs	r4, #0
 800f1d2:	60b4      	str	r4, [r6, #8]

    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);
 800f1d4:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800f1d6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800f1d8:	f7ff ff7a 	bl	800f0d0 <otg_disable_ep.isra.0>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 800f1dc:	686b      	ldr	r3, [r5, #4]
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 800f1de:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 800f1e2:	68db      	ldr	r3, [r3, #12]
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
 800f1e4:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 800f1e8:	f8c6 481c 	str.w	r4, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800f1ec:	b16b      	cbz	r3, 800f20a <usb_lld_start+0x8a>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800f1ee:	f243 0308 	movw	r3, #12296	; 0x3008
 800f1f2:	61b3      	str	r3, [r6, #24]
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800f1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM  |*/;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM */ | GINTMSK_SOFM;
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */
 800f1f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1fa:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800f1fc:	b1d3      	cbz	r3, 800f234 <usb_lld_start+0xb4>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800f1fe:	68b3      	ldr	r3, [r6, #8]
 800f200:	f043 0301 	orr.w	r3, r3, #1
 800f204:	60b3      	str	r3, [r6, #8]
  }
}
 800f206:	b002      	add	sp, #8
 800f208:	bd70      	pop	{r4, r5, r6, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800f20a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f20e:	61b3      	str	r3, [r6, #24]
 800f210:	e7f0      	b.n	800f1f4 <usb_lld_start+0x74>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
 800f212:	4b13      	ldr	r3, [pc, #76]	; (800f260 <usb_lld_start+0xe0>)
 800f214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f21a:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 800f21c:	695a      	ldr	r2, [r3, #20]
 800f21e:	2100      	movs	r1, #0
 800f220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f224:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800f226:	2043      	movs	r0, #67	; 0x43
    /* Clock activation.*/
#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(FALSE);
      rccResetOTG_FS();
 800f228:	6159      	str	r1, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800f22a:	210e      	movs	r1, #14
 800f22c:	f7fe ff40 	bl	800e0b0 <nvicEnableVector>
 800f230:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f232:	e7b3      	b.n	800f19c <usb_lld_start+0x1c>
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 800f234:	f44f 7106 	mov.w	r1, #536	; 0x218
 800f238:	2202      	movs	r2, #2
 800f23a:	4b0a      	ldr	r3, [pc, #40]	; (800f264 <usb_lld_start+0xe4>)
 800f23c:	9500      	str	r5, [sp, #0]
 800f23e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800f242:	f7fd feb5 	bl	800cfb0 <chThdCreateI>
 800f246:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800f248:	f7fd fd8a 	bl	800cd60 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 800f24c:	f7fd fe68 	bl	800cf20 <chSchRescheduleS>
 800f250:	e7d5      	b.n	800f1fe <usb_lld_start+0x7e>
 800f252:	bf00      	nop
 800f254:	20000fb0 	.word	0x20000fb0
 800f258:	40001440 	.word	0x40001440
 800f25c:	02200003 	.word	0x02200003
 800f260:	40023800 	.word	0x40023800
 800f264:	0800eda1 	.word	0x0800eda1
 800f268:	f3af 8000 	nop.w
 800f26c:	f3af 8000 	nop.w

0800f270 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800f272:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f274:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800f276:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f278:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800f27a:	692b      	ldr	r3, [r5, #16]
 800f27c:	f013 0420 	ands.w	r4, r3, #32
 800f280:	d1fb      	bne.n	800f27a <usb_lld_reset+0xa>
 800f282:	200c      	movs	r0, #12
 800f284:	f7fd fccc 	bl	800cc20 <chSysPolledDelayX>
 800f288:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 800f28c:	f8de 6008 	ldr.w	r6, [lr, #8]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f290:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800f292:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 800f296:	21ff      	movs	r1, #255	; 0xff
 800f298:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f29c:	3301      	adds	r3, #1
 800f29e:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800f2a0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800f2a4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800f2a8:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800f2ac:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800f2b0:	d9f2      	bls.n	800f298 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800f2b2:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800f2ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800f2be:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 800f2c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800f2c4:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800f2c8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800f2ca:	f8de 3000 	ldr.w	r3, [lr]
 800f2ce:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800f2d0:	2310      	movs	r3, #16
 800f2d2:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800f2d4:	6913      	ldr	r3, [r2, #16]
 800f2d6:	f013 0410 	ands.w	r4, r3, #16
 800f2da:	d1fb      	bne.n	800f2d4 <usb_lld_reset+0x64>
 800f2dc:	200c      	movs	r0, #12
 800f2de:	f7fd fc9f 	bl	800cc20 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800f2e2:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800f2e6:	4a11      	ldr	r2, [pc, #68]	; (800f32c <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800f2e8:	4811      	ldr	r0, [pc, #68]	; (800f330 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800f2ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f2ee:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800f2f2:	69ab      	ldr	r3, [r5, #24]
 800f2f4:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800f2f8:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800f2fc:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800f2fe:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800f300:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800f304:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800f308:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800f30a:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800f30e:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800f312:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800f316:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800f31a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800f31c:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800f320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800f324:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800f326:	62ab      	str	r3, [r5, #40]	; 0x28
 800f328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f32a:	bf00      	nop
 800f32c:	10008040 	.word	0x10008040
 800f330:	080132e0 	.word	0x080132e0
 800f334:	f3af 8000 	nop.w
 800f338:	f3af 8000 	nop.w
 800f33c:	f3af 8000 	nop.w

0800f340 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f340:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800f342:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800f346:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800f34a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f34e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800f352:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800f356:	4770      	bx	lr
 800f358:	f3af 8000 	nop.w
 800f35c:	f3af 8000 	nop.w

0800f360 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 800f360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f364:	fa0f f881 	sxth.w	r8, r1
 800f368:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 800f36c:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800f36e:	68fb      	ldr	r3, [r7, #12]
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 800f370:	6d04      	ldr	r4, [r0, #80]	; 0x50

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	f002 0203 	and.w	r2, r2, #3
 800f378:	2a02      	cmp	r2, #2
 800f37a:	d05c      	beq.n	800f436 <usb_lld_init_endpoint+0xd6>
 800f37c:	2a03      	cmp	r2, #3
 800f37e:	d05c      	beq.n	800f43a <usb_lld_init_endpoint+0xda>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 800f380:	4e4a      	ldr	r6, [pc, #296]	; (800f4ac <usb_lld_init_endpoint+0x14c>)
 800f382:	494b      	ldr	r1, [pc, #300]	; (800f4b0 <usb_lld_init_endpoint+0x150>)
 800f384:	2a01      	cmp	r2, #1
 800f386:	bf18      	it	ne
 800f388:	460e      	movne	r6, r1
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800f38a:	016a      	lsls	r2, r5, #5
  if (usbp->epc[ep]->out_cb != NULL) {
 800f38c:	68d9      	ldr	r1, [r3, #12]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800f38e:	eb04 0e02 	add.w	lr, r4, r2
 800f392:	f04f 0c00 	mov.w	ip, #0
 800f396:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_cb != NULL) {
 800f39a:	2900      	cmp	r1, #0
 800f39c:	d071      	beq.n	800f482 <usb_lld_init_endpoint+0x122>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800f39e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800f3a2:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800f3a6:	0149      	lsls	r1, r1, #5
 800f3a8:	ea46 0e0e 	orr.w	lr, r6, lr
 800f3ac:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 800f3b0:	f105 0c10 	add.w	ip, r5, #16
 800f3b4:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800f3b8:	f04f 0e01 	mov.w	lr, #1
 800f3bc:	fa0e fe0c 	lsl.w	lr, lr, ip
 800f3c0:	ea4e 0101 	orr.w	r1, lr, r1
 800f3c4:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800f3c8:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_cb != NULL) {
 800f3ca:	6899      	ldr	r1, [r3, #8]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800f3cc:	f04f 0e00 	mov.w	lr, #0
 800f3d0:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_cb != NULL) {
 800f3d4:	b399      	cbz	r1, 800f43e <usb_lld_init_endpoint+0xde>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 800f3d6:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800f3d8:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 800f3da:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800f3dc:	ea4f 0392 	mov.w	r3, r2, lsr #2
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 800f3e0:	bf88      	it	hi
 800f3e2:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800f3e4:	f105 0e3f 	add.w	lr, r5, #63	; 0x3f
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800f3e8:	6d81      	ldr	r1, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800f3ea:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f3ee:	01aa      	lsls	r2, r5, #6
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800f3f0:	eb03 0c01 	add.w	ip, r3, r1
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f3f4:	f042 0220 	orr.w	r2, r2, #32
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800f3f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800f3fc:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_cb != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800f400:	f8ce 3004 	str.w	r3, [lr, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f404:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	069a      	lsls	r2, r3, #26
 800f40a:	d4fc      	bmi.n	800f406 <usb_lld_init_endpoint+0xa6>
 800f40c:	200c      	movs	r0, #12
 800f40e:	f7fd fc07 	bl	800cc20 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 800f412:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 800f414:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800f416:	f105 0348 	add.w	r3, r5, #72	; 0x48
 800f41a:	015b      	lsls	r3, r3, #5
 800f41c:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
                           DIEPCTL_TXFNUM(ep) |
 800f420:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800f422:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 800f424:	2301      	movs	r3, #1
 800f426:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 800f42a:	40ab      	lsls	r3, r5
 800f42c:	4313      	orrs	r3, r2
 800f42e:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 800f432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 800f436:	4e1f      	ldr	r6, [pc, #124]	; (800f4b4 <usb_lld_init_endpoint+0x154>)
    break;
 800f438:	e7a7      	b.n	800f38a <usb_lld_init_endpoint+0x2a>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 800f43a:	4e1f      	ldr	r6, [pc, #124]	; (800f4b8 <usb_lld_init_endpoint+0x158>)
    break;
 800f43c:	e7a5      	b.n	800f38a <usb_lld_init_endpoint+0x2a>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800f43e:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 800f442:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f446:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800f448:	491c      	ldr	r1, [pc, #112]	; (800f4bc <usb_lld_init_endpoint+0x15c>)
 800f44a:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800f44c:	f043 0320 	orr.w	r3, r3, #32
 800f450:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	069b      	lsls	r3, r3, #26
 800f456:	d4fc      	bmi.n	800f452 <usb_lld_init_endpoint+0xf2>
 800f458:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 800f45c:	200c      	movs	r0, #12
 800f45e:	f7fd fbdf 	bl	800cc20 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800f462:	f8d8 2900 	ldr.w	r2, [r8, #2304]	; 0x900
 800f466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f46a:	f8c8 2900 	str.w	r2, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 800f46e:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 800f472:	2301      	movs	r3, #1
 800f474:	40ab      	lsls	r3, r5
 800f476:	ea22 0303 	bic.w	r3, r2, r3
 800f47a:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 800f47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f482:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800f486:	f105 0c10 	add.w	ip, r5, #16
  if (usbp->epc[ep]->out_cb != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800f48a:	f8d1 eb00 	ldr.w	lr, [r1, #2816]	; 0xb00
 800f48e:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 800f492:	f8c1 eb00 	str.w	lr, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800f496:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800f49a:	f04f 0e01 	mov.w	lr, #1
 800f49e:	fa0e fe0c 	lsl.w	lr, lr, ip
 800f4a2:	ea21 010e 	bic.w	r1, r1, lr
 800f4a6:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 800f4aa:	e78d      	b.n	800f3c8 <usb_lld_init_endpoint+0x68>
 800f4ac:	10048000 	.word	0x10048000
 800f4b0:	10008000 	.word	0x10008000
 800f4b4:	10088000 	.word	0x10088000
 800f4b8:	100c8000 	.word	0x100c8000
 800f4bc:	02000400 	.word	0x02000400

0800f4c0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800f4c0:	3158      	adds	r1, #88	; 0x58
 800f4c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f4c4:	0149      	lsls	r1, r1, #5
 800f4c6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800f4c8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800f4cc:	d004      	beq.n	800f4d8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800f4ce:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800f4d2:	bf14      	ite	ne
 800f4d4:	2001      	movne	r0, #1
 800f4d6:	2002      	moveq	r0, #2
}
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	f3af 8000 	nop.w

0800f4e0 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800f4e0:	3148      	adds	r1, #72	; 0x48
 800f4e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f4e4:	0149      	lsls	r1, r1, #5
 800f4e6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800f4e8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800f4ec:	d004      	beq.n	800f4f8 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800f4ee:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800f4f2:	bf14      	ite	ne
 800f4f4:	2001      	movne	r0, #1
 800f4f6:	2002      	moveq	r0, #2
}
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop
 800f4fc:	f3af 8000 	nop.w

0800f500 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800f500:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f504:	68cb      	ldr	r3, [r1, #12]
 800f506:	6a1b      	ldr	r3, [r3, #32]
 800f508:	6819      	ldr	r1, [r3, #0]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	6053      	str	r3, [r2, #4]
 800f50e:	6011      	str	r1, [r2, #0]
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	f3af 8000 	nop.w
 800f518:	f3af 8000 	nop.w
 800f51c:	f3af 8000 	nop.w

0800f520 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800f520:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 800f524:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800f526:	68dd      	ldr	r5, [r3, #12]
 800f528:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800f52a:	6863      	ldr	r3, [r4, #4]
 800f52c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 800f52e:	b931      	cbnz	r1, 800f53e <usb_lld_prepare_receive+0x1e>
 800f530:	2b40      	cmp	r3, #64	; 0x40
 800f532:	d904      	bls.n	800f53e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 800f534:	2340      	movs	r3, #64	; 0x40
 800f536:	6063      	str	r3, [r4, #4]
 800f538:	4a09      	ldr	r2, [pc, #36]	; (800f560 <usb_lld_prepare_receive+0x40>)
 800f53a:	243f      	movs	r4, #63	; 0x3f
 800f53c:	e002      	b.n	800f544 <usb_lld_prepare_receive+0x24>
 800f53e:	1e5c      	subs	r4, r3, #1
 800f540:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800f544:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800f546:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800f548:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800f54c:	1963      	adds	r3, r4, r5
 800f54e:	fbb3 f3f5 	udiv	r3, r3, r5
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800f552:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 800f556:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 800f55a:	bc30      	pop	{r4, r5}
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	60000040 	.word	0x60000040
 800f564:	f3af 8000 	nop.w
 800f568:	f3af 8000 	nop.w
 800f56c:	f3af 8000 	nop.w

0800f570 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800f570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800f574:	4e26      	ldr	r6, [pc, #152]	; (800f610 <otg_epout_handler.constprop.7+0xa0>)
 800f576:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800f578:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800f57c:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800f57e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 800f582:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800f586:	0720      	lsls	r0, r4, #28
 800f588:	d503      	bpl.n	800f592 <otg_epout_handler.constprop.7+0x22>
 800f58a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800f58e:	0719      	lsls	r1, r3, #28
 800f590:	d41d      	bmi.n	800f5ce <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800f592:	07e2      	lsls	r2, r4, #31
 800f594:	d519      	bpl.n	800f5ca <otg_epout_handler.constprop.7+0x5a>
 800f596:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800f59a:	07db      	lsls	r3, r3, #31
 800f59c:	d515      	bpl.n	800f5ca <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800f59e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800f5a2:	4c1b      	ldr	r4, [pc, #108]	; (800f610 <otg_epout_handler.constprop.7+0xa0>)
 800f5a4:	68f1      	ldr	r1, [r6, #12]
 800f5a6:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 800f5a8:	6858      	ldr	r0, [r3, #4]
 800f5aa:	691a      	ldr	r2, [r3, #16]
 800f5ac:	4290      	cmp	r0, r2
 800f5ae:	d316      	bcc.n	800f5de <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800f5b0:	8962      	ldrh	r2, [r4, #10]
 800f5b2:	68ce      	ldr	r6, [r1, #12]
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	40ab      	lsls	r3, r5
 800f5b8:	ea22 0303 	bic.w	r3, r2, r3
 800f5bc:	8163      	strh	r3, [r4, #10]
 800f5be:	4629      	mov	r1, r5
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	4633      	mov	r3, r6
    }
  }
}
 800f5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800f5c8:	4718      	bx	r3
 800f5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800f5ce:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	4798      	blx	r3
 800f5dc:	e7d9      	b.n	800f592 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800f5de:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 800f5e0:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800f5e2:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 800f5e4:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	4629      	mov	r1, r5
 800f5ea:	f7ff ff99 	bl	800f520 <usb_lld_prepare_receive>
 800f5ee:	2320      	movs	r3, #32
 800f5f0:	f383 8811 	msr	BASEPRI, r3
 800f5f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f5f6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800f5fa:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800f5fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f602:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800f606:	f386 8811 	msr	BASEPRI, r6
 800f60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f60e:	bf00      	nop
 800f610:	20000fb0 	.word	0x20000fb0
 800f614:	f3af 8000 	nop.w
 800f618:	f3af 8000 	nop.w
 800f61c:	f3af 8000 	nop.w

0800f620 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f620:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800f624:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f626:	68dc      	ldr	r4, [r3, #12]
 800f628:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800f62a:	6853      	ldr	r3, [r2, #4]
 800f62c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 800f62e:	b1ab      	cbz	r3, 800f65c <usb_lld_prepare_transmit+0x3c>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800f630:	b171      	cbz	r1, 800f650 <usb_lld_prepare_transmit+0x30>
 800f632:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800f634:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800f636:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800f638:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800f63c:	4422      	add	r2, r4
 800f63e:	fbb2 f2f4 	udiv	r2, r2, r4
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800f642:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800f646:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800f64a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f64e:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800f650:	2b40      	cmp	r3, #64	; 0x40
 800f652:	d9ee      	bls.n	800f632 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 800f654:	2340      	movs	r3, #64	; 0x40
 800f656:	6053      	str	r3, [r2, #4]
 800f658:	223f      	movs	r2, #63	; 0x3f
 800f65a:	e7eb      	b.n	800f634 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800f65c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800f65e:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800f662:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800f666:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f66a:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800f66e:	4770      	bx	lr

0800f670 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800f674:	4f30      	ldr	r7, [pc, #192]	; (800f738 <otg_epin_handler.constprop.8+0xc8>)
 800f676:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800f678:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800f67c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800f67e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 800f682:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800f686:	07e1      	lsls	r1, r4, #31
 800f688:	d503      	bpl.n	800f692 <otg_epin_handler.constprop.8+0x22>
 800f68a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800f68e:	07da      	lsls	r2, r3, #31
 800f690:	d409      	bmi.n	800f6a6 <otg_epin_handler.constprop.8+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800f692:	0623      	lsls	r3, r4, #24
 800f694:	d505      	bpl.n	800f6a2 <otg_epin_handler.constprop.8+0x32>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800f696:	2301      	movs	r3, #1
 800f698:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 800f69c:	40b3      	lsls	r3, r6
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800f69e:	4213      	tst	r3, r2
 800f6a0:	d129      	bne.n	800f6f6 <otg_epin_handler.constprop.8+0x86>
 800f6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f6a6:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f6aa:	68d9      	ldr	r1, [r3, #12]
 800f6ac:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800f6ae:	6858      	ldr	r0, [r3, #4]
 800f6b0:	691a      	ldr	r2, [r3, #16]
 800f6b2:	4290      	cmp	r0, r2
 800f6b4:	d234      	bcs.n	800f720 <otg_epin_handler.constprop.8+0xb0>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800f6b6:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800f6b8:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800f6bc:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 800f6be:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 800f6c2:	4638      	mov	r0, r7
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	f7ff ffab 	bl	800f620 <usb_lld_prepare_transmit>
 800f6ca:	2320      	movs	r3, #32
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d2:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f6d6:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f6d8:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800f6dc:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800f6e0:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f6e4:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800f6e8:	40b2      	lsls	r2, r6
 800f6ea:	430a      	orrs	r2, r1
 800f6ec:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800f6f0:	f388 8811 	msr	BASEPRI, r8
 800f6f4:	e7cd      	b.n	800f692 <otg_epin_handler.constprop.8+0x22>
 800f6f6:	2220      	movs	r2, #32
 800f6f8:	f382 8811 	msr	BASEPRI, r2
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800f6fc:	f8d5 1834 	ldr.w	r1, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800f700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800f702:	480e      	ldr	r0, [pc, #56]	; (800f73c <otg_epin_handler.constprop.8+0xcc>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800f704:	ea21 0103 	bic.w	r1, r1, r3
 800f708:	f8c5 1834 	str.w	r1, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800f70c:	4313      	orrs	r3, r2
 800f70e:	2100      	movs	r1, #0
 800f710:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f712:	f7fd fd0d 	bl	800d130 <chThdResumeI>
 800f716:	2300      	movs	r3, #0
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800f720:	893a      	ldrh	r2, [r7, #8]
 800f722:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f726:	2301      	movs	r3, #1
 800f728:	40b3      	lsls	r3, r6
 800f72a:	ea22 0303 	bic.w	r3, r2, r3
 800f72e:	813b      	strh	r3, [r7, #8]
 800f730:	4638      	mov	r0, r7
 800f732:	4631      	mov	r1, r6
 800f734:	47e0      	blx	ip
 800f736:	e7ac      	b.n	800f692 <otg_epin_handler.constprop.8+0x22>
 800f738:	20000fb0 	.word	0x20000fb0
 800f73c:	20001010 	.word	0x20001010

0800f740 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800f740:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f742:	4d3a      	ldr	r5, [pc, #232]	; (800f82c <Vector14C+0xec>)
 800f744:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 800f746:	6973      	ldr	r3, [r6, #20]
  sts &= otgp->GINTMSK;
 800f748:	69b4      	ldr	r4, [r6, #24]
 800f74a:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800f74c:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 800f74e:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800f750:	d42d      	bmi.n	800f7ae <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 800f752:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 800f754:	bf48      	it	mi
 800f756:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800f75a:	0723      	lsls	r3, r4, #28
 800f75c:	d504      	bpl.n	800f768 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 800f75e:	686b      	ldr	r3, [r5, #4]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	b10b      	cbz	r3, 800f768 <Vector14C+0x28>
 800f764:	4831      	ldr	r0, [pc, #196]	; (800f82c <Vector14C+0xec>)
 800f766:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 800f768:	06e5      	lsls	r5, r4, #27
 800f76a:	d42b      	bmi.n	800f7c4 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 800f76c:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 800f76e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800f772:	d507      	bpl.n	800f784 <Vector14C+0x44>
    if (src & (1 << 0))
 800f774:	07e9      	lsls	r1, r5, #31
 800f776:	d445      	bmi.n	800f804 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 800f778:	07aa      	lsls	r2, r5, #30
 800f77a:	d448      	bmi.n	800f80e <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800f77c:	076b      	lsls	r3, r5, #29
 800f77e:	d44b      	bmi.n	800f818 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 800f780:	072e      	lsls	r6, r5, #28
 800f782:	d44e      	bmi.n	800f822 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800f784:	0324      	lsls	r4, r4, #12
 800f786:	d507      	bpl.n	800f798 <Vector14C+0x58>
    if (src & (1 << 16))
 800f788:	03e8      	lsls	r0, r5, #15
 800f78a:	d430      	bmi.n	800f7ee <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 800f78c:	03a9      	lsls	r1, r5, #14
 800f78e:	d433      	bmi.n	800f7f8 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 800f790:	036a      	lsls	r2, r5, #13
 800f792:	d426      	bmi.n	800f7e2 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800f794:	032b      	lsls	r3, r5, #12
 800f796:	d403      	bmi.n	800f7a0 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800f798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800f79c:	f7fd bf08 	b.w	800d5b0 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800f7a0:	2003      	movs	r0, #3
 800f7a2:	f7ff fee5 	bl	800f570 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800f7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800f7aa:	f7fd bf01 	b.w	800d5b0 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f7fe fa0e 	bl	800dbd0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800f7b4:	686b      	ldr	r3, [r5, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0ca      	beq.n	800f752 <Vector14C+0x12>
 800f7bc:	4628      	mov	r0, r5
 800f7be:	2100      	movs	r1, #0
 800f7c0:	4798      	blx	r3
 800f7c2:	e7c6      	b.n	800f752 <Vector14C+0x12>
 800f7c4:	2320      	movs	r3, #32
 800f7c6:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800f7ca:	69b3      	ldr	r3, [r6, #24]
 800f7cc:	4818      	ldr	r0, [pc, #96]	; (800f830 <Vector14C+0xf0>)
 800f7ce:	f023 0310 	bic.w	r3, r3, #16
 800f7d2:	61b3      	str	r3, [r6, #24]
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	f7fd fcab 	bl	800d130 <chThdResumeI>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f383 8811 	msr	BASEPRI, r3
 800f7e0:	e7c4      	b.n	800f76c <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800f7e2:	2002      	movs	r0, #2
 800f7e4:	f7ff fec4 	bl	800f570 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 800f7e8:	032b      	lsls	r3, r5, #12
 800f7ea:	d5d5      	bpl.n	800f798 <Vector14C+0x58>
 800f7ec:	e7d8      	b.n	800f7a0 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	f7ff febe 	bl	800f570 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 800f7f4:	03a9      	lsls	r1, r5, #14
 800f7f6:	d5cb      	bpl.n	800f790 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 800f7f8:	2001      	movs	r0, #1
 800f7fa:	f7ff feb9 	bl	800f570 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 800f7fe:	036a      	lsls	r2, r5, #13
 800f800:	d5c8      	bpl.n	800f794 <Vector14C+0x54>
 800f802:	e7ee      	b.n	800f7e2 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 800f804:	2000      	movs	r0, #0
 800f806:	f7ff ff33 	bl	800f670 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 800f80a:	07aa      	lsls	r2, r5, #30
 800f80c:	d5b6      	bpl.n	800f77c <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 800f80e:	2001      	movs	r0, #1
 800f810:	f7ff ff2e 	bl	800f670 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 800f814:	076b      	lsls	r3, r5, #29
 800f816:	d5b3      	bpl.n	800f780 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 800f818:	2002      	movs	r0, #2
 800f81a:	f7ff ff29 	bl	800f670 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 800f81e:	072e      	lsls	r6, r5, #28
 800f820:	d5b0      	bpl.n	800f784 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 800f822:	2003      	movs	r0, #3
 800f824:	f7ff ff24 	bl	800f670 <otg_epin_handler.constprop.8>
 800f828:	e7ac      	b.n	800f784 <Vector14C+0x44>
 800f82a:	bf00      	nop
 800f82c:	20000fb0 	.word	0x20000fb0
 800f830:	20001010 	.word	0x20001010
 800f834:	f3af 8000 	nop.w
 800f838:	f3af 8000 	nop.w
 800f83c:	f3af 8000 	nop.w

0800f840 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800f840:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f842:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800f846:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f84a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f84e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f852:	4770      	bx	lr
 800f854:	f3af 8000 	nop.w
 800f858:	f3af 8000 	nop.w
 800f85c:	f3af 8000 	nop.w

0800f860 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f860:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800f862:	b410      	push	{r4}
 800f864:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f868:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f86a:	f8d4 0900 	ldr.w	r0, [r4, #2304]	; 0x900
 800f86e:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 800f872:	f8c4 0900 	str.w	r0, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f876:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
}
 800f87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f87e:	408a      	lsls	r2, r1
 800f880:	4302      	orrs	r2, r0
 800f882:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 800f886:	4770      	bx	lr
 800f888:	f3af 8000 	nop.w
 800f88c:	f3af 8000 	nop.w

0800f890 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800f890:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f892:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800f896:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f89a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f89e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f8a2:	4770      	bx	lr
 800f8a4:	f3af 8000 	nop.w
 800f8a8:	f3af 8000 	nop.w
 800f8ac:	f3af 8000 	nop.w

0800f8b0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800f8b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8b2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800f8b6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f8ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f8be:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800f8c2:	4770      	bx	lr
 800f8c4:	f3af 8000 	nop.w
 800f8c8:	f3af 8000 	nop.w
 800f8cc:	f3af 8000 	nop.w

0800f8d0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800f8d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8d2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800f8d6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f8da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8de:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f8e2:	4770      	bx	lr
 800f8e4:	f3af 8000 	nop.w
 800f8e8:	f3af 8000 	nop.w
 800f8ec:	f3af 8000 	nop.w

0800f8f0 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 800f8f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8f2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800f8f6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f8fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8fe:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800f902:	4770      	bx	lr
 800f904:	f3af 8000 	nop.w
 800f908:	f3af 8000 	nop.w
 800f90c:	f3af 8000 	nop.w

0800f910 <VectorB4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 800f910:	b538      	push	{r3, r4, r5, lr}
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800f912:	4d25      	ldr	r5, [pc, #148]	; (800f9a8 <VectorB4+0x98>)
 800f914:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f916:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800f918:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800f91a:	68dc      	ldr	r4, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f91c:	7d08      	ldrb	r0, [r1, #20]
 800f91e:	4014      	ands	r4, r2
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800f920:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 800f922:	43d2      	mvns	r2, r2
 800f924:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f926:	b9f8      	cbnz	r0, 800f968 <VectorB4+0x58>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f928:	0760      	lsls	r0, r4, #29
 800f92a:	d514      	bpl.n	800f956 <VectorB4+0x46>
      _icu_isr_invoke_width_cb(icup);
 800f92c:	782b      	ldrb	r3, [r5, #0]
 800f92e:	2b04      	cmp	r3, #4
 800f930:	d00d      	beq.n	800f94e <VectorB4+0x3e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f932:	07a1      	lsls	r1, r4, #30
 800f934:	d415      	bmi.n	800f962 <VectorB4+0x52>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800f936:	07e4      	lsls	r4, r4, #31
 800f938:	d505      	bpl.n	800f946 <VectorB4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 800f93a:	686b      	ldr	r3, [r5, #4]
 800f93c:	481a      	ldr	r0, [pc, #104]	; (800f9a8 <VectorB4+0x98>)
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	4798      	blx	r3
 800f942:	2303      	movs	r3, #3
 800f944:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 800f946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
 800f94a:	f7fd be31 	b.w	800d5b0 <_port_irq_epilogue>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800f94e:	688b      	ldr	r3, [r1, #8]
 800f950:	b31b      	cbz	r3, 800f99a <VectorB4+0x8a>
 800f952:	4628      	mov	r0, r5
 800f954:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f956:	07a1      	lsls	r1, r4, #30
 800f958:	d5ed      	bpl.n	800f936 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
 800f95a:	782b      	ldrb	r3, [r5, #0]
 800f95c:	4a12      	ldr	r2, [pc, #72]	; (800f9a8 <VectorB4+0x98>)
 800f95e:	2b04      	cmp	r3, #4
 800f960:	d014      	beq.n	800f98c <VectorB4+0x7c>
 800f962:	2304      	movs	r3, #4
 800f964:	702b      	strb	r3, [r5, #0]
 800f966:	e7e6      	b.n	800f936 <VectorB4+0x26>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f968:	07a2      	lsls	r2, r4, #30
 800f96a:	d509      	bpl.n	800f980 <VectorB4+0x70>
      _icu_isr_invoke_width_cb(icup);
 800f96c:	782b      	ldrb	r3, [r5, #0]
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d002      	beq.n	800f978 <VectorB4+0x68>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f972:	0763      	lsls	r3, r4, #29
 800f974:	d4f5      	bmi.n	800f962 <VectorB4+0x52>
 800f976:	e7de      	b.n	800f936 <VectorB4+0x26>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800f978:	688b      	ldr	r3, [r1, #8]
 800f97a:	b18b      	cbz	r3, 800f9a0 <VectorB4+0x90>
 800f97c:	4628      	mov	r0, r5
 800f97e:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f980:	0763      	lsls	r3, r4, #29
 800f982:	d5d8      	bpl.n	800f936 <VectorB4+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800f984:	782b      	ldrb	r3, [r5, #0]
 800f986:	4a08      	ldr	r2, [pc, #32]	; (800f9a8 <VectorB4+0x98>)
 800f988:	2b04      	cmp	r3, #4
 800f98a:	d1ea      	bne.n	800f962 <VectorB4+0x52>
 800f98c:	6851      	ldr	r1, [r2, #4]
 800f98e:	68cb      	ldr	r3, [r1, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0e6      	beq.n	800f962 <VectorB4+0x52>
 800f994:	4804      	ldr	r0, [pc, #16]	; (800f9a8 <VectorB4+0x98>)
 800f996:	4798      	blx	r3
 800f998:	e7e3      	b.n	800f962 <VectorB4+0x52>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f99a:	07a0      	lsls	r0, r4, #30
 800f99c:	d4f7      	bmi.n	800f98e <VectorB4+0x7e>
 800f99e:	e7ca      	b.n	800f936 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f9a0:	0762      	lsls	r2, r4, #29
 800f9a2:	d4f4      	bmi.n	800f98e <VectorB4+0x7e>
 800f9a4:	e7c7      	b.n	800f936 <VectorB4+0x26>
 800f9a6:	bf00      	nop
 800f9a8:	2000124c 	.word	0x2000124c
 800f9ac:	f3af 8000 	nop.w

0800f9b0 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 800f9b0:	b510      	push	{r4, lr}
  ICUD2.tim = STM32_TIM2;
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
 800f9b2:	4c03      	ldr	r4, [pc, #12]	; (800f9c0 <icu_lld_init+0x10>)
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f7fd fe93 	bl	800d6e0 <icuObjectInit>
  ICUD3.tim = STM32_TIM3;
 800f9ba:	4b02      	ldr	r3, [pc, #8]	; (800f9c4 <icu_lld_init+0x14>)
 800f9bc:	60e3      	str	r3, [r4, #12]
 800f9be:	bd10      	pop	{r4, pc}
 800f9c0:	2000124c 	.word	0x2000124c
 800f9c4:	40000400 	.word	0x40000400
 800f9c8:	f3af 8000 	nop.w
 800f9cc:	f3af 8000 	nop.w

0800f9d0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800f9d0:	b508      	push	{r3, lr}
 800f9d2:	2320      	movs	r3, #32
 800f9d4:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 800f9d8:	f7fd f8f2 	bl	800cbc0 <chSysTimerHandlerI>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800f9e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800f9e6:	f7fd bde3 	b.w	800d5b0 <_port_irq_epilogue>
 800f9ea:	bf00      	nop
 800f9ec:	f3af 8000 	nop.w

0800f9f0 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f9f0:	4b05      	ldr	r3, [pc, #20]	; (800fa08 <st_lld_init+0x18>)
 800f9f2:	f244 109f 	movw	r0, #16799	; 0x419f
  SysTick->VAL = 0;
 800f9f6:	2100      	movs	r1, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f9f8:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f9fa:	6058      	str	r0, [r3, #4]
  SysTick->VAL = 0;
 800f9fc:	6099      	str	r1, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f9fe:	200b      	movs	r0, #11
 800fa00:	2108      	movs	r1, #8
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800fa02:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800fa04:	f7fe bb74 	b.w	800e0f0 <nvicSetSystemHandlerPriority>
 800fa08:	e000e010 	.word	0xe000e010
 800fa0c:	f3af 8000 	nop.w

0800fa10 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 800fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 800fa14:	6884      	ldr	r4, [r0, #8]
  uint32_t cr1 = u->CR1;
 800fa16:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 800fa18:	6826      	ldr	r6, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800fa1a:	6862      	ldr	r2, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800fa1c:	f240 130f 	movw	r3, #271	; 0x10f
 800fa20:	4033      	ands	r3, r6
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 800fa22:	4605      	mov	r5, r0
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800fa24:	b1eb      	cbz	r3, 800fa62 <serve_usart_irq+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
 800fa26:	6843      	ldr	r3, [r0, #4]
 800fa28:	691a      	ldr	r2, [r3, #16]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 800fa2a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fa2e:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 800fa30:	b1ba      	cbz	r2, 800fa62 <serve_usart_irq+0x52>
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
 800fa32:	b2b3      	uxth	r3, r6
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 800fa34:	f013 0f08 	tst.w	r3, #8
 800fa38:	bf0c      	ite	eq
 800fa3a:	2100      	moveq	r1, #0
 800fa3c:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 800fa3e:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 800fa40:	bf48      	it	mi
 800fa42:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 800fa46:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 800fa48:	bf48      	it	mi
 800fa4a:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 800fa4e:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 800fa50:	bf48      	it	mi
 800fa52:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 800fa56:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 800fa58:	bf48      	it	mi
 800fa5a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 800fa5e:	4628      	mov	r0, r5
 800fa60:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 800fa62:	0672      	lsls	r2, r6, #25
 800fa64:	d50e      	bpl.n	800fa84 <serve_usart_irq+0x74>
 800fa66:	067b      	lsls	r3, r7, #25
 800fa68:	d50c      	bpl.n	800fa84 <serve_usart_irq+0x74>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 800fa6a:	686b      	ldr	r3, [r5, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800fa6e:	f027 0740 	bic.w	r7, r7, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 800fa72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa76:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800fa78:	60e7      	str	r7, [r4, #12]

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 800fa7a:	b11b      	cbz	r3, 800fa84 <serve_usart_irq+0x74>
      uartp->config->txend2_cb(uartp);
 800fa7c:	4628      	mov	r0, r5
  }
}
 800fa7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
      uartp->config->txend2_cb(uartp);
 800fa82:	4718      	bx	r3
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	f3af 8000 	nop.w
 800fa8c:	f3af 8000 	nop.w

0800fa90 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 800fa90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);
 800fa92:	4803      	ldr	r0, [pc, #12]	; (800faa0 <VectorDC+0x10>)
 800fa94:	f7ff ffbc 	bl	800fa10 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 800fa98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);

  OSAL_IRQ_EPILOGUE();
 800fa9c:	f7fd bd88 	b.w	800d5b0 <_port_irq_epilogue>
 800faa0:	20001264 	.word	0x20001264
 800faa4:	f3af 8000 	nop.w
 800faa8:	f3af 8000 	nop.w
 800faac:	f3af 8000 	nop.w

0800fab0 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 800fab0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);
 800fab2:	4803      	ldr	r0, [pc, #12]	; (800fac0 <Vector15C+0x10>)
 800fab4:	f7ff ffac 	bl	800fa10 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 800fab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
 800fabc:	f7fd bd78 	b.w	800d5b0 <_port_irq_epilogue>
 800fac0:	20001280 	.word	0x20001280
 800fac4:	f3af 8000 	nop.w
 800fac8:	f3af 8000 	nop.w
 800facc:	f3af 8000 	nop.w

0800fad0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 800fad0:	b570      	push	{r4, r5, r6, lr}
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 800fad2:	4d0c      	ldr	r5, [pc, #48]	; (800fb04 <uart_lld_init+0x34>)
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 800fad4:	4c0c      	ldr	r4, [pc, #48]	; (800fb08 <uart_lld_init+0x38>)
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 800fad6:	4e0d      	ldr	r6, [pc, #52]	; (800fb0c <uart_lld_init+0x3c>)
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 800fad8:	4628      	mov	r0, r5
 800fada:	f7fd ffd1 	bl	800da80 <uartObjectInit>
  UARTD3.usart   = USART3;
 800fade:	4b0c      	ldr	r3, [pc, #48]	; (800fb10 <uart_lld_init+0x40>)
 800fae0:	60ab      	str	r3, [r5, #8]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 800fae2:	2206      	movs	r2, #6
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 800fae4:	f104 0318 	add.w	r3, r4, #24
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 800fae8:	4630      	mov	r0, r6

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 800faea:	612c      	str	r4, [r5, #16]
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 800faec:	616b      	str	r3, [r5, #20]
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 800faee:	60ea      	str	r2, [r5, #12]
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 800faf0:	f7fd ffc6 	bl	800da80 <uartObjectInit>
  UARTD6.usart   = USART6;
 800faf4:	4b07      	ldr	r3, [pc, #28]	; (800fb14 <uart_lld_init+0x44>)
 800faf6:	60b3      	str	r3, [r6, #8]
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 800faf8:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 800fafc:	34a8      	adds	r4, #168	; 0xa8
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 800fafe:	6133      	str	r3, [r6, #16]
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 800fb00:	6174      	str	r4, [r6, #20]
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	20001264 	.word	0x20001264
 800fb08:	0801320c 	.word	0x0801320c
 800fb0c:	20001280 	.word	0x20001280
 800fb10:	40004800 	.word	0x40004800
 800fb14:	40011400 	.word	0x40011400
 800fb18:	f3af 8000 	nop.w
 800fb1c:	f3af 8000 	nop.w

0800fb20 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 800fb20:	f7fe bd16 	b.w	800e550 <stm32_clock_init>
 800fb24:	f3af 8000 	nop.w
 800fb28:	f3af 8000 	nop.w
 800fb2c:	f3af 8000 	nop.w

0800fb30 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	f3af 8000 	nop.w
 800fb38:	f3af 8000 	nop.w
 800fb3c:	f3af 8000 	nop.w

0800fb40 <periodic_thread>:
static THD_WORKING_AREA(periodic_thread_wa, 1024);
static THD_WORKING_AREA(uart_thread_wa, 128);



static msg_t periodic_thread(void *arg) {
 800fb40:	b508      	push	{r3, lr}
 800fb42:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <periodic_thread+0x14>)
 800fb44:	4a04      	ldr	r2, [pc, #16]	; (800fb58 <periodic_thread+0x18>)
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	619a      	str	r2, [r3, #24]
	int fault_print = 0;

	for(;;)
	{

		chThdSleepMilliseconds(10);
 800fb4a:	2064      	movs	r0, #100	; 0x64
 800fb4c:	f7fd faa8 	bl	800d0a0 <chThdSleep>
	}
 800fb50:	e7fb      	b.n	800fb4a <periodic_thread+0xa>
 800fb52:	bf00      	nop
 800fb54:	20000c40 	.word	0x20000c40
 800fb58:	08013410 	.word	0x08013410
 800fb5c:	f3af 8000 	nop.w

0800fb60 <bldc_init>:




int bldc_init(void)
{
 800fb60:	b500      	push	{lr}
 800fb62:	b0d1      	sub	sp, #324	; 0x144
	halInit();
 800fb64:	f7fd fd54 	bl	800d610 <halInit>
	chSysInit();
 800fb68:	f7fc ffd2 	bl	800cb10 <chSysInit>

	chThdSleepMilliseconds(1000);
 800fb6c:	f242 7010 	movw	r0, #10000	; 0x2710
 800fb70:	f7fd fa96 	bl	800d0a0 <chThdSleep>

	conf_general_init();
 800fb74:	f001 f934 	bl	8010de0 <conf_general_init>
	hw_init_gpio();
 800fb78:	f001 fc2a 	bl	80113d0 <hw_init_gpio>


	mc_configuration mcconf;
	conf_general_read_mc_configuration(&mcconf);
 800fb7c:	a824      	add	r0, sp, #144	; 0x90
 800fb7e:	f001 f9f7 	bl	8010f70 <conf_general_read_mc_configuration>
	mcpwm_init(&mcconf);
 800fb82:	a824      	add	r0, sp, #144	; 0x90
 800fb84:	f000 fa9c 	bl	80100c0 <mcpwm_init>

	comm_usb_init();
 800fb88:	f001 f8fa 	bl	8010d80 <comm_usb_init>

	app_configuration appconf;
	conf_general_read_app_configuration(&appconf);
 800fb8c:	a801      	add	r0, sp, #4
 800fb8e:	f001 f957 	bl	8010e40 <conf_general_read_app_configuration>



	return 0;
}
 800fb92:	2000      	movs	r0, #0
 800fb94:	b051      	add	sp, #324	; 0x144
 800fb96:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb9a:	bf00      	nop
 800fb9c:	f3af 8000 	nop.w

0800fba0 <bldc_start>:
float dbg_fTheta;
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
 800fba0:	b500      	push	{lr}
 800fba2:	b083      	sub	sp, #12



	//-- 스레드 생성
	//
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800fba4:	2400      	movs	r4, #0
 800fba6:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <bldc_start+0x30>)
 800fba8:	9400      	str	r4, [sp, #0]
 800fbaa:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 800fbae:	2240      	movs	r2, #64	; 0x40
 800fbb0:	4808      	ldr	r0, [pc, #32]	; (800fbd4 <bldc_start+0x34>)
 800fbb2:	f7fd fa35 	bl	800d020 <chThdCreateStatic>
	chThdCreateStatic(uart_thread_wa, sizeof(uart_thread_wa), NORMALPRIO, uart_process_thread, NULL);
 800fbb6:	9400      	str	r4, [sp, #0]
 800fbb8:	4807      	ldr	r0, [pc, #28]	; (800fbd8 <bldc_start+0x38>)
 800fbba:	4b08      	ldr	r3, [pc, #32]	; (800fbdc <bldc_start+0x3c>)
 800fbbc:	f44f 7106 	mov.w	r1, #536	; 0x218
 800fbc0:	2240      	movs	r2, #64	; 0x40
 800fbc2:	f7fd fa2d 	bl	800d020 <chThdCreateStatic>
	//-- IDLE
	//
	for(;;)
	{
		//palSetPad(GPIOA, 7);
		chThdSleepMilliseconds(1);
 800fbc6:	200a      	movs	r0, #10
 800fbc8:	f7fd fa6a 	bl	800d0a0 <chThdSleep>

		//debug_print_usb("8 %f 0\r\n", dbg_fTheta );
		//debug_print_usb("%d\r\n", dbg_AccumTheta );
		usb_uart_printf("500 %f %f 0\r\n", qVelRef*10000, dbg_fMea*10000 );
		*/
	}
 800fbcc:	e7fb      	b.n	800fbc6 <bldc_start+0x26>
 800fbce:	bf00      	nop
 800fbd0:	0800fb41 	.word	0x0800fb41
 800fbd4:	20001928 	.word	0x20001928
 800fbd8:	200016e0 	.word	0x200016e0
 800fbdc:	0800fee1 	.word	0x0800fee1

0800fbe0 <send>:
}


int send( uint8_t data )
{
 800fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	msg->magic = MAVLINK_STX;
	msg->len = length;
	msg->sysid = system_id;
	msg->compid = component_id;
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 800fbe2:	4a37      	ldr	r2, [pc, #220]	; (800fcc0 <send+0xe0>)
 800fbe4:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 800fbe8:	7993      	ldrb	r3, [r2, #6]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_TEST_CMD_LEN);
#else
	mavlink_test_cmd_t packet;
	packet.arg2 = arg2;
	packet.cmd_1 = cmd_1;
 800fbea:	f88d 0112 	strb.w	r0, [sp, #274]	; 0x112
	packet.arg1 = arg1;
 800fbee:	215c      	movs	r1, #92	; 0x5c
	_mav_put_uint8_t(buf, 3, arg1);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_TEST_CMD_LEN);
#else
	mavlink_test_cmd_t packet;
	packet.arg2 = arg2;
 800fbf0:	205d      	movs	r0, #93	; 0x5d
 800fbf2:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 800fbf6:	1c5f      	adds	r7, r3, #1
	packet.cmd_1 = cmd_1;
	packet.arg1 = arg1;
 800fbf8:	f88d 1113 	strb.w	r1, [sp, #275]	; 0x113
{
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
	msg->len = length;
	msg->sysid = system_id;
	msg->compid = component_id;
 800fbfc:	2079      	movs	r0, #121	; 0x79

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_TEST_CMD_LEN);
 800fbfe:	9944      	ldr	r1, [sp, #272]	; 0x110
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 800fc00:	7197      	strb	r7, [r2, #6]
#endif

	msg->msgid = MAVLINK_MSG_ID_TEST_CMD;
 800fc02:	26dc      	movs	r6, #220	; 0xdc
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 800fc04:	25fe      	movs	r5, #254	; 0xfe
	msg->len = length;
	msg->sysid = system_id;
 800fc06:	2409      	movs	r4, #9
						      uint8_t chan, uint8_t length)
#endif
{
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
	msg->len = length;
 800fc08:	2204      	movs	r2, #4
	msg->sysid = system_id;
	msg->compid = component_id;
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 800fc0a:	f88d 3004 	strb.w	r3, [sp, #4]
{
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
	msg->len = length;
	msg->sysid = system_id;
	msg->compid = component_id;
 800fc0e:	f88d 0006 	strb.w	r0, [sp, #6]
	mavlink_test_cmd_t packet;
	packet.arg2 = arg2;
	packet.cmd_1 = cmd_1;
	packet.arg1 = arg1;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_TEST_CMD_LEN);
 800fc12:	9102      	str	r1, [sp, #8]
#endif

	msg->msgid = MAVLINK_MSG_ID_TEST_CMD;
 800fc14:	f88d 6007 	strb.w	r6, [sp, #7]
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 800fc18:	f88d 5002 	strb.w	r5, [sp, #2]
	msg->len = length;
	msg->sysid = system_id;
 800fc1c:	f88d 4005 	strb.w	r4, [sp, #5]
						      uint8_t chan, uint8_t length)
#endif
{
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
	msg->len = length;
 800fc20:	f88d 2003 	strb.w	r2, [sp, #3]
 800fc24:	f10d 0103 	add.w	r1, sp, #3
 800fc28:	f10d 0007 	add.w	r0, sp, #7
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 800fc2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc30:	e001      	b.n	800fc36 <send+0x56>
 800fc32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fc36:	405a      	eors	r2, r3
        tmp ^= (tmp<<4);
 800fc38:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800fc3c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fc3e:	0a1b      	lsrs	r3, r3, #8
 800fc40:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 800fc44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 800fc48:	4281      	cmp	r1, r0
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
        tmp ^= (tmp<<4);
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fc4a:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 800fc4e:	d1f0      	bne.n	800fc32 <send+0x52>
	msg->sysid = system_id;
	msg->compid = component_id;
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 800fc50:	f8ad 3000 	strh.w	r3, [sp]
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 800fc54:	a902      	add	r1, sp, #8
 800fc56:	a803      	add	r0, sp, #12
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fc58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc5c:	405a      	eors	r2, r3
        tmp ^= (tmp<<4);
 800fc5e:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800fc62:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fc64:	0a1b      	lsrs	r3, r3, #8
 800fc66:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 800fc6a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 800fc6e:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 800fc72:	b29b      	uxth	r3, r3
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
 800fc74:	4281      	cmp	r1, r0
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
        tmp ^= (tmp<<4);
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fc76:	f8ad 3000 	strh.w	r3, [sp]
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
 800fc7a:	d1ed      	bne.n	800fc58 <send+0x78>
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fc7c:	f083 0225 	eor.w	r2, r3, #37	; 0x25
        tmp ^= (tmp<<4);
 800fc80:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800fc84:	b2d2      	uxtb	r2, r2
/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800fc86:	f8dd 0002 	ldr.w	r0, [sp, #2]
 800fc8a:	f8dd 1006 	ldr.w	r1, [sp, #6]
 800fc8e:	f8bd 500a 	ldrh.w	r5, [sp, #10]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fc92:	0a1b      	lsrs	r3, r3, #8
 800fc94:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 800fc98:	ac44      	add	r4, sp, #272	; 0x110
 800fc9a:	c403      	stmia	r4!, {r0, r1}
 800fc9c:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 800fca0:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	8025      	strh	r5, [r4, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 800fca8:	0a1a      	lsrs	r2, r3, #8
    // 다음 함수내부에서 전송할 프레임을 완성함, CRC 생성등
    int len = mavlink_msg_to_send_buffer(buf, &msg);

   // 시리얼 포트로 버퍼 포인터는 buf, 길이는 len 내용을 전달 하면 완성됨

    usb_uart_write(buf, len);
 800fcaa:	a844      	add	r0, sp, #272	; 0x110
 800fcac:	210c      	movs	r1, #12
 800fcae:	f88d 211b 	strb.w	r2, [sp, #283]	; 0x11b
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 800fcb2:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 800fcb6:	f001 f80b 	bl	8010cd0 <usb_uart_write>
}
 800fcba:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800fcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcc0:	200018f8 	.word	0x200018f8
 800fcc4:	f3af 8000 	nop.w
 800fcc8:	f3af 8000 	nop.w
 800fccc:	f3af 8000 	nop.w

0800fcd0 <recv>:


bool recv( uint8_t ch )
{
 800fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
#endif

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800fcd4:	4d7e      	ldr	r5, [pc, #504]	; (800fed0 <recv+0x200>)

	switch (status->parse_state)
 800fcd6:	78eb      	ldrb	r3, [r5, #3]
#endif
#endif

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800fcd8:	2200      	movs	r2, #0
 800fcda:	b0c6      	sub	sp, #280	; 0x118
 800fcdc:	4604      	mov	r4, r0
 800fcde:	702a      	strb	r2, [r5, #0]

	switch (status->parse_state)
 800fce0:	2b0a      	cmp	r3, #10
 800fce2:	f200 80d1 	bhi.w	800fe88 <recv+0x1b8>
 800fce6:	e8df f003 	tbb	[pc, r3]
 800fcea:	3636      	.short	0x3636
 800fcec:	3ca997bb 	.word	0x3ca997bb
 800fcf0:	067c624e 	.word	0x067c624e
 800fcf4:	06          	.byte	0x06
 800fcf5:	00          	.byte	0x00
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		break;

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800fcf6:	2b0a      	cmp	r3, #10
 800fcf8:	4976      	ldr	r1, [pc, #472]	; (800fed4 <recv+0x204>)
 800fcfa:	d004      	beq.n	800fd06 <recv+0x36>
 800fcfc:	880b      	ldrh	r3, [r1, #0]
 800fcfe:	ebb0 2f13 	cmp.w	r0, r3, lsr #8
 800fd02:	f000 80e2 	beq.w	800feca <recv+0x1fa>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 800fd06:	2702      	movs	r7, #2
 800fd08:	702f      	strb	r7, [r5, #0]
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 800fd0a:	792b      	ldrb	r3, [r5, #4]
 800fd0c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800fed4 <recv+0x204>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800fd10:	4e6f      	ldr	r6, [pc, #444]	; (800fed0 <recv+0x200>)
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 800fd12:	440b      	add	r3, r1
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800fd14:	f04f 0e01 	mov.w	lr, #1
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800fd18:	4641      	mov	r1, r8
 800fd1a:	a802      	add	r0, sp, #8
 800fd1c:	f44f 7288 	mov.w	r2, #272	; 0x110
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 800fd20:	725c      	strb	r4, [r3, #9]
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800fd22:	f885 e003 	strb.w	lr, [r5, #3]
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800fd26:	f7fc fe2b 	bl	800c980 <memcpy>
		break;
	}

	bufferIndex++;
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 800fd2a:	2f01      	cmp	r7, #1
 800fd2c:	f040 80ad 	bne.w	800fe8a <recv+0x1ba>
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800fd30:	8933      	ldrh	r3, [r6, #8]
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800fd32:	f898 2004 	ldrb.w	r2, [r8, #4]
 800fd36:	7172      	strb	r2, [r6, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800fd38:	b903      	cbnz	r3, 800fd3c <recv+0x6c>
 800fd3a:	8173      	strh	r3, [r6, #10]
	mavlink_message_t msg; // 로컬변수로 선언해도 잘 수행 되는데 아마도 실제 자료구조는 static 으로 구현 되는거 같아요.
	mavlink_status_t status; // 현재 수신된 데이터 파싱한 상태 리턴값.

	if (mavlink_parse_char(MAVLINK_COMM_0, ch, &msg, &status) == MAVLINK_FRAMING_OK)
	{
		if( MAVLINK_MSG_ID_TEST_CMD == msg.msgid ) // 메세지 ID 가  TEST_CMD 라면 해석
 800fd3c:	f89d 200f 	ldrb.w	r2, [sp, #15]
		// Count this packet as received
		status->packet_rx_success_count++;
 800fd40:	3301      	adds	r3, #1
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 800fd42:	2100      	movs	r1, #0
 800fd44:	2adc      	cmp	r2, #220	; 0xdc
		//}
		status->current_rx_seq = rxmsg->seq;
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
		// Count this packet as received
		status->packet_rx_success_count++;
 800fd46:	812b      	strh	r3, [r5, #8]
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 800fd48:	70a9      	strb	r1, [r5, #2]
 800fd4a:	f000 80b2 	beq.w	800feb2 <recv+0x1e2>
}


bool recv( uint8_t ch )
{
	bool ret = false;
 800fd4e:	2000      	movs	r0, #0
			ret = true;
		}
    }

	return ret;
}
 800fd50:	b046      	add	sp, #280	; 0x118
 800fd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	switch (status->parse_state)
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 800fd56:	28fe      	cmp	r0, #254	; 0xfe
 800fd58:	f000 80ad 	beq.w	800feb6 <recv+0x1e6>
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	70ab      	strb	r3, [r5, #2]
 800fd60:	e7f5      	b.n	800fd4e <recv+0x7e>
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
		break;

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 800fd62:	4a5c      	ldr	r2, [pc, #368]	; (800fed4 <recv+0x204>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fd64:	8813      	ldrh	r3, [r2, #0]
 800fd66:	7190      	strb	r0, [r2, #6]
 800fd68:	405c      	eors	r4, r3
        tmp ^= (tmp<<4);
 800fd6a:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 800fd6e:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fd70:	0a1b      	lsrs	r3, r3, #8
 800fd72:	ea83 1314 	eor.w	r3, r3, r4, lsr #4
 800fd76:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fd7a:	ea83 03c4 	eor.w	r3, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800fd7e:	2106      	movs	r1, #6
 800fd80:	8013      	strh	r3, [r2, #0]
 800fd82:	70e9      	strb	r1, [r5, #3]
 800fd84:	e7ea      	b.n	800fd5c <recv+0x8c>
			status->parse_error++;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
	    }
#endif
		rxmsg->msgid = c;
 800fd86:	4a53      	ldr	r2, [pc, #332]	; (800fed4 <recv+0x204>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fd88:	8813      	ldrh	r3, [r2, #0]
		mavlink_update_checksum(rxmsg, c);
		if (rxmsg->len == 0)
 800fd8a:	78d1      	ldrb	r1, [r2, #3]
			status->parse_error++;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
	    }
#endif
		rxmsg->msgid = c;
 800fd8c:	71d0      	strb	r0, [r2, #7]
 800fd8e:	405c      	eors	r4, r3
        tmp ^= (tmp<<4);
 800fd90:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 800fd94:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fd96:	0a1b      	lsrs	r3, r3, #8
 800fd98:	ea83 1314 	eor.w	r3, r3, r4, lsr #4
 800fd9c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fda0:	ea83 03c4 	eor.w	r3, r3, r4, lsl #3
 800fda4:	8013      	strh	r3, [r2, #0]
		mavlink_update_checksum(rxmsg, c);
		if (rxmsg->len == 0)
 800fda6:	b1c9      	cbz	r1, 800fddc <recv+0x10c>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
 800fda8:	2307      	movs	r3, #7
 800fdaa:	70eb      	strb	r3, [r5, #3]
 800fdac:	e7d6      	b.n	800fd5c <recv+0x8c>
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800fdae:	4949      	ldr	r1, [pc, #292]	; (800fed4 <recv+0x204>)
 800fdb0:	792a      	ldrb	r2, [r5, #4]
 800fdb2:	188b      	adds	r3, r1, r2
 800fdb4:	3201      	adds	r2, #1
 800fdb6:	7218      	strb	r0, [r3, #8]
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fdb8:	880b      	ldrh	r3, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
 800fdba:	78c8      	ldrb	r0, [r1, #3]
 800fdbc:	405c      	eors	r4, r3
        tmp ^= (tmp<<4);
 800fdbe:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 800fdc2:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fdc4:	0a1b      	lsrs	r3, r3, #8
 800fdc6:	ea83 1314 	eor.w	r3, r3, r4, lsr #4
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800fdca:	b2d2      	uxtb	r2, r2
 800fdcc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fdd0:	ea83 03c4 	eor.w	r3, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
 800fdd4:	4290      	cmp	r0, r2
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800fdd6:	712a      	strb	r2, [r5, #4]
 800fdd8:	800b      	strh	r3, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
 800fdda:	d1bf      	bne.n	800fd5c <recv+0x8c>
#endif
		rxmsg->msgid = c;
		mavlink_update_checksum(rxmsg, c);
		if (rxmsg->len == 0)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800fddc:	2308      	movs	r3, #8
 800fdde:	70eb      	strb	r3, [r5, #3]
 800fde0:	e7bc      	b.n	800fd5c <recv+0x8c>
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fde2:	493c      	ldr	r1, [pc, #240]	; (800fed4 <recv+0x204>)
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 800fde4:	483c      	ldr	r0, [pc, #240]	; (800fed8 <recv+0x208>)
 800fde6:	79cb      	ldrb	r3, [r1, #7]
 800fde8:	880a      	ldrh	r2, [r1, #0]
 800fdea:	5cc3      	ldrb	r3, [r0, r3]
 800fdec:	4053      	eors	r3, r2
        tmp ^= (tmp<<4);
 800fdee:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800fdf2:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fdf4:	0a12      	lsrs	r2, r2, #8
 800fdf6:	ea82 1213 	eor.w	r2, r2, r3, lsr #4
 800fdfa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800fdfe:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
 800fe02:	b2da      	uxtb	r2, r3
 800fe04:	4294      	cmp	r4, r2
 800fe06:	800b      	strh	r3, [r1, #0]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800fe08:	bf14      	ite	ne
 800fe0a:	230a      	movne	r3, #10
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800fe0c:	2309      	moveq	r3, #9
 800fe0e:	70eb      	strb	r3, [r5, #3]
		}
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 800fe10:	792b      	ldrb	r3, [r5, #4]
 800fe12:	4419      	add	r1, r3
 800fe14:	720c      	strb	r4, [r1, #8]
 800fe16:	e7a1      	b.n	800fd5c <recv+0x8c>
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
		break;

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 800fe18:	4a2e      	ldr	r2, [pc, #184]	; (800fed4 <recv+0x204>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fe1a:	8813      	ldrh	r3, [r2, #0]
 800fe1c:	7150      	strb	r0, [r2, #5]
 800fe1e:	405c      	eors	r4, r3
        tmp ^= (tmp<<4);
 800fe20:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 800fe24:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fe26:	0a1b      	lsrs	r3, r3, #8
 800fe28:	ea83 1314 	eor.w	r3, r3, r4, lsr #4
 800fe2c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fe30:	ea83 03c4 	eor.w	r3, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 800fe34:	2105      	movs	r1, #5
 800fe36:	8013      	strh	r3, [r2, #0]
 800fe38:	70e9      	strb	r1, [r5, #3]
 800fe3a:	e78f      	b.n	800fd5c <recv+0x8c>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
 800fe3c:	4a25      	ldr	r2, [pc, #148]	; (800fed4 <recv+0x204>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fe3e:	8813      	ldrh	r3, [r2, #0]
 800fe40:	7110      	strb	r0, [r2, #4]
 800fe42:	405c      	eors	r4, r3
        tmp ^= (tmp<<4);
 800fe44:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 800fe48:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fe4a:	0a1b      	lsrs	r3, r3, #8
 800fe4c:	ea83 1314 	eor.w	r3, r3, r4, lsr #4
 800fe50:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fe54:	ea83 03c4 	eor.w	r3, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800fe58:	2103      	movs	r1, #3
 800fe5a:	8013      	strh	r3, [r2, #0]
 800fe5c:	70e9      	strb	r1, [r5, #3]
 800fe5e:	e77d      	b.n	800fd5c <recv+0x8c>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
 800fe60:	4a1c      	ldr	r2, [pc, #112]	; (800fed4 <recv+0x204>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800fe62:	8813      	ldrh	r3, [r2, #0]
 800fe64:	70d0      	strb	r0, [r2, #3]
 800fe66:	405c      	eors	r4, r3
        tmp ^= (tmp<<4);
 800fe68:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 800fe6c:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800fe6e:	0a1b      	lsrs	r3, r3, #8
 800fe70:	ea83 1314 	eor.w	r3, r3, r4, lsr #4
 800fe74:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fe78:	ea83 03c4 	eor.w	r3, r3, r4, lsl #3
			status->packet_idx = 0;
 800fe7c:	2000      	movs	r0, #0
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800fe7e:	2104      	movs	r1, #4
 800fe80:	8013      	strh	r3, [r2, #0]
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
			status->packet_idx = 0;
 800fe82:	7128      	strb	r0, [r5, #4]
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800fe84:	70e9      	strb	r1, [r5, #3]
 800fe86:	e769      	b.n	800fd5c <recv+0x8c>

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;

	switch (status->parse_state)
 800fe88:	2700      	movs	r7, #0
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 800fe8a:	2100      	movs	r1, #0

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800fe8c:	2f02      	cmp	r7, #2
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 800fe8e:	70a9      	strb	r1, [r5, #2]
 800fe90:	4b0f      	ldr	r3, [pc, #60]	; (800fed0 <recv+0x200>)

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800fe92:	f47f af5c 	bne.w	800fd4e <recv+0x7e>
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
 800fe96:	2201      	movs	r2, #1
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 800fe98:	2cfe      	cmp	r4, #254	; 0xfe
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800fe9a:	7019      	strb	r1, [r3, #0]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
 800fe9c:	709a      	strb	r2, [r3, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 800fe9e:	d001      	beq.n	800fea4 <recv+0x1d4>
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800fea0:	70da      	strb	r2, [r3, #3]
 800fea2:	e754      	b.n	800fd4e <recv+0x7e>
	    if (c == MAVLINK_STX)
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
		    rxmsg->len = 0;
 800fea4:	4a0b      	ldr	r2, [pc, #44]	; (800fed4 <recv+0x204>)
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800fea6:	70df      	strb	r7, [r3, #3]
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 800fea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
		    rxmsg->len = 0;
 800feac:	70d1      	strb	r1, [r2, #3]
 800feae:	8013      	strh	r3, [r2, #0]
 800feb0:	e74d      	b.n	800fd4e <recv+0x7e>
			mavlink_test_cmd_t test_cmd;
			mavlink_msg_test_cmd_decode( &msg, &test_cmd); // 메세지 디코딩

			//Serial.print("seq= ");
			//Serial.println(test_cmd.arg1);
			ret = true;
 800feb2:	2001      	movs	r0, #1
 800feb4:	e74c      	b.n	800fd50 <recv+0x80>
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
 800feb6:	4b07      	ldr	r3, [pc, #28]	; (800fed4 <recv+0x204>)
 800feb8:	2000      	movs	r0, #0
 800feba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800febe:	2202      	movs	r2, #2
			rxmsg->len = 0;
			rxmsg->magic = c;
 800fec0:	709c      	strb	r4, [r3, #2]
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
 800fec2:	70d8      	strb	r0, [r3, #3]
 800fec4:	8019      	strh	r1, [r3, #0]
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800fec6:	70ea      	strb	r2, [r5, #3]
 800fec8:	e748      	b.n	800fd5c <recv+0x8c>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 800feca:	2701      	movs	r7, #1
 800fecc:	702f      	strb	r7, [r5, #0]
 800fece:	e71c      	b.n	800fd0a <recv+0x3a>
 800fed0:	200018f8 	.word	0x200018f8
 800fed4:	200012a0 	.word	0x200012a0
 800fed8:	08013430 	.word	0x08013430
 800fedc:	f3af 8000 	nop.w

0800fee0 <uart_process_thread>:
}


uint8_t Ch;

static msg_t uart_process_thread(void *arg) {
 800fee0:	b508      	push	{r3, lr}
 800fee2:	4b08      	ldr	r3, [pc, #32]	; (800ff04 <uart_process_thread+0x24>)
 800fee4:	4a08      	ldr	r2, [pc, #32]	; (800ff08 <uart_process_thread+0x28>)
 800fee6:	699b      	ldr	r3, [r3, #24]
 800fee8:	4c08      	ldr	r4, [pc, #32]	; (800ff0c <uart_process_thread+0x2c>)
 800feea:	619a      	str	r2, [r3, #24]

	for(;;)
	{
		//chThdSleepMilliseconds(1);

		Ch = usb_uart_getch();
 800feec:	f000 ff00 	bl	8010cf0 <usb_uart_getch>
 800fef0:	7020      	strb	r0, [r4, #0]
		if( recv( Ch ) )
 800fef2:	f7ff feed 	bl	800fcd0 <recv>
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d0f8      	beq.n	800feec <uart_process_thread+0xc>
		{
			send( 1 );
 800fefa:	2001      	movs	r0, #1
 800fefc:	f7ff fe70 	bl	800fbe0 <send>
 800ff00:	e7f4      	b.n	800feec <uart_process_thread+0xc>
 800ff02:	bf00      	nop
 800ff04:	20000c40 	.word	0x20000c40
 800ff08:	08013420 	.word	0x08013420
 800ff0c:	2000129c 	.word	0x2000129c

0800ff10 <SEQUENCE_thread>:
unsigned int Drive_Status = 0;
unsigned int State_Index = 0;


static msg_t SEQUENCE_thread(void *arg) 
{
 800ff10:	b508      	push	{r3, lr}
 800ff12:	4b04      	ldr	r3, [pc, #16]	; (800ff24 <SEQUENCE_thread+0x14>)
 800ff14:	4a04      	ldr	r2, [pc, #16]	; (800ff28 <SEQUENCE_thread+0x18>)
 800ff16:	699b      	ldr	r3, [r3, #24]
	//	asm("   nop");					//END_SEQ:


#endif //pbhp 151001

	chThdSleepMilliseconds(1);
 800ff18:	200a      	movs	r0, #10
 800ff1a:	619a      	str	r2, [r3, #24]
 800ff1c:	f7fd f8c0 	bl	800d0a0 <chThdSleep>

	return 0;
}
 800ff20:	2000      	movs	r0, #0
 800ff22:	bd08      	pop	{r3, pc}
 800ff24:	20000c40 	.word	0x20000c40
 800ff28:	08013530 	.word	0x08013530
 800ff2c:	f3af 8000 	nop.w

0800ff30 <mcpwm_adc_int_handler>:
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
	LED_GREEN_ON();
 800ff30:	4b04      	ldr	r3, [pc, #16]	; (800ff44 <mcpwm_adc_int_handler+0x14>)
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 800ff32:	4905      	ldr	r1, [pc, #20]	; (800ff48 <mcpwm_adc_int_handler+0x18>)
 800ff34:	2000      	movs	r0, #0
	LED_GREEN_ON();
 800ff36:	2240      	movs	r2, #64	; 0x40
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) {
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 800ff38:	6248      	str	r0, [r1, #36]	; 0x24
	LED_GREEN_ON();
 800ff3a:	831a      	strh	r2, [r3, #24]
	LED_GREEN_OFF();


	// Reset the watchdog
	WWDG_SetCounter(100);
 800ff3c:	2064      	movs	r0, #100	; 0x64
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
	LED_GREEN_ON();
	LED_GREEN_OFF();
 800ff3e:	835a      	strh	r2, [r3, #26]


	// Reset the watchdog
	WWDG_SetCounter(100);
 800ff40:	f002 b976 	b.w	8012230 <WWDG_SetCounter>
 800ff44:	40020400 	.word	0x40020400
 800ff48:	40001800 	.word	0x40001800
 800ff4c:	f3af 8000 	nop.w

0800ff50 <ClarkePark>:

	return False;
}

void ClarkePark(void)
{
 800ff50:	b510      	push	{r4, lr}
	ParkParm.qIalpha = ParkParm.qIa;
 800ff52:	4c17      	ldr	r4, [pc, #92]	; (800ffb0 <ClarkePark+0x60>)
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 800ff54:	eddf 7a17 	vldr	s15, [pc, #92]	; 800ffb4 <ClarkePark+0x64>

	return False;
}

void ClarkePark(void)
{
 800ff58:	ed2d 8b04 	vpush	{d8-d9}
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 800ff5c:	ed94 8a04 	vldr	s16, [r4, #16]
	return False;
}

void ClarkePark(void)
{
	ParkParm.qIalpha = ParkParm.qIa;
 800ff60:	edd4 8a03 	vldr	s17, [r4, #12]
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 800ff64:	edd4 9a00 	vldr	s19, [r4]
	return False;
}

void ClarkePark(void)
{
	ParkParm.qIalpha = ParkParm.qIa;
 800ff68:	edc4 8a05 	vstr	s17, [r4, #20]
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 800ff6c:	ee38 8a08 	vadd.f32	s16, s16, s16
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 800ff70:	eeb0 0a69 	vmov.f32	s0, s19
}

void ClarkePark(void)
{
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 800ff74:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ff78:	eea8 8aa7 	vfma.f32	s16, s17, s15
 800ff7c:	ed84 8a06 	vstr	s16, [r4, #24]
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 800ff80:	f002 f96e 	bl	8012260 <cosf>
 800ff84:	eeb0 9a40 	vmov.f32	s18, s0
 800ff88:	eeb0 0a69 	vmov.f32	s0, s19
 800ff8c:	f002 f9a8 	bl	80122e0 <sinf>
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 800ff90:	ee68 7a09 	vmul.f32	s15, s16, s18
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 800ff94:	ee28 8a00 	vmul.f32	s16, s16, s0
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 800ff98:	eee8 7ac0 	vfms.f32	s15, s17, s0
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 800ff9c:	eea8 8a89 	vfma.f32	s16, s17, s18
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 800ffa0:	edc4 7a08 	vstr	s15, [r4, #32]
	ParkParm.qIalpha = ParkParm.qIa;
	ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
	// Ialpha and Ibeta have been calculated. Now do rotation.
	// Get qSin, qCos from ParkParm structure

	ParkParm.qId =  ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 800ffa4:	ed84 8a07 	vstr	s16, [r4, #28]
	ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);

	return;
}
 800ffa8:	ecbd 8b04 	vpop	{d8-d9}
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	bf00      	nop
 800ffb0:	200029ac 	.word	0x200029ac
 800ffb4:	3f13cd3a 	.word	0x3f13cd3a
 800ffb8:	f3af 8000 	nop.w
 800ffbc:	f3af 8000 	nop.w

0800ffc0 <CalcPI>:

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 800ffc0:	ed90 7a06 	vldr	s14, [r0, #24]
 800ffc4:	ed90 6a07 	vldr	s12, [r0, #28]
	
	U  = pParm->qdSum + pParm->qKp * Err;
 800ffc8:	edd0 7a00 	vldr	s15, [r0]
 800ffcc:	edd0 5a01 	vldr	s11, [r0, #4]

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 800ffd0:	edd0 6a04 	vldr	s13, [r0, #16]

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 800ffd4:	ee37 6a46 	vsub.f32	s12, s14, s12
	
	U  = pParm->qdSum + pParm->qKp * Err;
 800ffd8:	eeb0 7a67 	vmov.f32	s14, s15
 800ffdc:	eea5 7a86 	vfma.f32	s14, s11, s12

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 800ffe0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ffe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe8:	dc0b      	bgt.n	8010002 <CalcPI+0x42>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 800ffea:	edd0 6a05 	vldr	s13, [r0, #20]
 800ffee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff6:	d404      	bmi.n	8010002 <CalcPI+0x42>
	else                  pParm->qOut = U ;
 800fff8:	eef0 6a47 	vmov.f32	s13, s14
 800fffc:	ed80 7a08 	vstr	s14, [r0, #32]
 8010000:	e001      	b.n	8010006 <CalcPI+0x46>
	Err  = pParm->qInRef - pParm->qInMeas;
	
	U  = pParm->qdSum + pParm->qKp * Err;

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 8010002:	edc0 6a08 	vstr	s13, [r0, #32]
	else                  pParm->qOut = U ;

	Exc = U - pParm->qOut;

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 8010006:	ed90 5a02 	vldr	s10, [r0, #8]
 801000a:	edd0 5a03 	vldr	s11, [r0, #12]
 801000e:	eee5 7a06 	vfma.f32	s15, s10, s12

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
	else                  pParm->qOut = U ;

	Exc = U - pParm->qOut;
 8010012:	ee37 7a66 	vsub.f32	s14, s14, s13

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 8010016:	eee5 7ac7 	vfms.f32	s15, s11, s14
 801001a:	edc0 7a00 	vstr	s15, [r0]
 801001e:	4770      	bx	lr

08010020 <SetupControlParameters>:
	
	return;
}
void SetupControlParameters(void)
{
 8010020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8010024:	481a      	ldr	r0, [pc, #104]	; (8010090 <SetupControlParameters+0x70>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 8010026:	4c1b      	ldr	r4, [pc, #108]	; (8010094 <SetupControlParameters+0x74>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010028:	491b      	ldr	r1, [pc, #108]	; (8010098 <SetupControlParameters+0x78>)
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
 801002a:	4a1c      	ldr	r2, [pc, #112]	; (801009c <SetupControlParameters+0x7c>)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 801002c:	4d1c      	ldr	r5, [pc, #112]	; (80100a0 <SetupControlParameters+0x80>)
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 801002e:	4e1d      	ldr	r6, [pc, #116]	; (80100a4 <SetupControlParameters+0x84>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 8010030:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80100ac <SetupControlParameters+0x8c>
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 8010034:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80100b0 <SetupControlParameters+0x90>

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 8010038:	f8df e078 	ldr.w	lr, [pc, #120]	; 80100b4 <SetupControlParameters+0x94>
	PIParmW.qOutMin = -PIParmW.qOutMax;
 801003c:	4f1a      	ldr	r7, [pc, #104]	; (80100a8 <SetupControlParameters+0x88>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 801003e:	f8c4 9004 	str.w	r9, [r4, #4]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010042:	2300      	movs	r3, #0
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010044:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8010048:	f8c0 9004 	str.w	r9, [r0, #4]
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 801004c:	60a6      	str	r6, [r4, #8]

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
 801004e:	6086      	str	r6, [r0, #8]
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 8010050:	60e5      	str	r5, [r4, #12]
	PIParmD.qOutMax = DOUTMAX;
 8010052:	6125      	str	r5, [r4, #16]
	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
 8010054:	60c5      	str	r5, [r0, #12]
	PIParmQ.qOutMax = QOUTMAX;
 8010056:	6105      	str	r5, [r0, #16]
	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 8010058:	f8c4 8014 	str.w	r8, [r4, #20]
	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
	PIParmQ.qOutMax = QOUTMAX;
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 801005c:	f8c0 8014 	str.w	r8, [r0, #20]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010060:	6023      	str	r3, [r4, #0]
	pParm->qOut=0;
 8010062:	6223      	str	r3, [r4, #32]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010064:	6003      	str	r3, [r0, #0]
	pParm->qOut=0;
 8010066:	6203      	str	r3, [r0, #32]

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
 8010068:	608e      	str	r6, [r1, #8]
	PIParmW.qKc = WKC;
 801006a:	60cd      	str	r5, [r1, #12]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 801006c:	600b      	str	r3, [r1, #0]
	pParm->qOut=0;
 801006e:	620b      	str	r3, [r1, #32]

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
	PIParmPLL.qKi = WKI;		 
 8010070:	6096      	str	r6, [r2, #8]
	PIParmPLL.qKc = WKC;		 
 8010072:	60d5      	str	r5, [r2, #12]
			}
		}
	}
void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010074:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 8010076:	6213      	str	r3, [r2, #32]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010078:	f8c1 c004 	str.w	ip, [r1, #4]
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
 801007c:	f8c2 c004 	str.w	ip, [r2, #4]

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 8010080:	f8c1 e010 	str.w	lr, [r1, #16]

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
	PIParmPLL.qKi = WKI;		 
	PIParmPLL.qKc = WKC;		 
	PIParmPLL.qOutMax = WOUTMAX;	 
 8010084:	f8c2 e010 	str.w	lr, [r2, #16]
	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
	PIParmW.qOutMin = -PIParmW.qOutMax;
 8010088:	614f      	str	r7, [r1, #20]
	// ============= PI PLL Term ===============
	PIParmPLL.qKp = WKP;		 
	PIParmPLL.qKi = WKI;		 
	PIParmPLL.qKc = WKC;		 
	PIParmPLL.qOutMax = WOUTMAX;	 
	PIParmPLL.qOutMin = -PIParmPLL.qOutMax;
 801008a:	6157      	str	r7, [r2, #20]
 801008c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010090:	200028d0 	.word	0x200028d0
 8010094:	20001ee8 	.word	0x20001ee8
 8010098:	20001f10 	.word	0x20001f10
 801009c:	2000290c 	.word	0x2000290c
 80100a0:	3f7fff58 	.word	0x3f7fff58
 80100a4:	3c23d70a 	.word	0x3c23d70a
 80100a8:	bf733333 	.word	0xbf733333
 80100ac:	3d4ccccd 	.word	0x3d4ccccd
 80100b0:	bf7fff58 	.word	0xbf7fff58
 80100b4:	3f733333 	.word	0x3f733333
 80100b8:	f3af 8000 	nop.w
 80100bc:	f3af 8000 	nop.w

080100c0 <mcpwm_init>:
static THD_WORKING_AREA(SEQUENCE_thread_wa, 2048);
static msg_t SEQUENCE_thread(void *arg);
//static WORKING_AREA(rpm_thread_wa, 1024);
//static msg_t rpm_thread(void *arg);

void mcpwm_init(mc_configuration *configuration) {
 80100c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	b0a9      	sub	sp, #164	; 0xa4
	utils_sys_lock_cnt();
 80100c6:	f000 fe6b 	bl	8010da0 <utils_sys_lock_cnt>
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	fault_now = FAULT_CODE_NONE;
 80100ca:	4bd9      	ldr	r3, [pc, #868]	; (8010430 <mcpwm_init+0x370>)
	dccal_done = false;

	TIM_DeInit(TIM1);
 80100cc:	4ed9      	ldr	r6, [pc, #868]	; (8010434 <mcpwm_init+0x374>)
	TIM_DeInit(TIM8);
 80100ce:	4fda      	ldr	r7, [pc, #872]	; (8010438 <mcpwm_init+0x378>)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80100d0:	f8df b390 	ldr.w	fp, [pc, #912]	; 8010464 <mcpwm_init+0x3a4>
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	fault_now = FAULT_CODE_NONE;
 80100d4:	2400      	movs	r4, #0
 80100d6:	701c      	strb	r4, [r3, #0]
	dccal_done = false;
 80100d8:	4bd8      	ldr	r3, [pc, #864]	; (801043c <mcpwm_init+0x37c>)

	TIM_DeInit(TIM1);
 80100da:	4630      	mov	r0, r6
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	fault_now = FAULT_CODE_NONE;
	dccal_done = false;
 80100dc:	701c      	strb	r4, [r3, #0]

	TIM_DeInit(TIM1);
 80100de:	f001 fd6f 	bl	8011bc0 <TIM_DeInit>
	TIM_DeInit(TIM8);
 80100e2:	4638      	mov	r0, r7
 80100e4:	f001 fd6c 	bl	8011bc0 <TIM_DeInit>
	TIM1->CNT = 0;
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80100e8:	2001      	movs	r0, #1
 80100ea:	4601      	mov	r1, r0
	fault_now = FAULT_CODE_NONE;
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
 80100ec:	6274      	str	r4, [r6, #36]	; 0x24
	TIM8->CNT = 0;
 80100ee:	627c      	str	r4, [r7, #36]	; 0x24
	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 80100f0:	2501      	movs	r5, #1
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80100f2:	f001 fd35 	bl	8011b60 <RCC_APB2PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 80100f6:	f04f 0e20 	mov.w	lr, #32
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80100fa:	4630      	mov	r0, r6
 80100fc:	a903      	add	r1, sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80100fe:	f8db 2000 	ldr.w	r2, [fp]
	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 8010102:	f8ad e00e 	strh.w	lr, [sp, #14]

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8010106:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801010a:	f8ad 4014 	strh.w	r4, [sp, #20]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 801010e:	4bcc      	ldr	r3, [pc, #816]	; (8010440 <mcpwm_init+0x380>)
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 8010110:	f88d 5016 	strb.w	r5, [sp, #22]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 8010114:	fb93 f3f2 	sdiv	r3, r3, r2
 8010118:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 801011a:	f001 fe31 	bl	8011d80 <TIM_TimeBaseInit>

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 801011e:	6af3      	ldr	r3, [r6, #44]	; 0x2c

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8010120:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8010124:	40eb      	lsrs	r3, r5
 8010126:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010128:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 801012a:	f44f 7880 	mov.w	r8, #256	; 0x100
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 801012e:	f04f 0904 	mov.w	r9, #4
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8010132:	4630      	mov	r0, r6
 8010134:	a90e      	add	r1, sp, #56	; 0x38
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010136:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801013a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801013e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8010142:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8010146:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 801014a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 801014e:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8010152:	f001 fe85 	bl	8011e60 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 8010156:	4630      	mov	r0, r6
 8010158:	a90e      	add	r1, sp, #56	; 0x38
 801015a:	f001 fec1 	bl	8011ee0 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 801015e:	4630      	mov	r0, r6
 8010160:	a90e      	add	r1, sp, #56	; 0x38
 8010162:	f001 ff0d 	bl	8011f80 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8010166:	4630      	mov	r0, r6
 8010168:	a90e      	add	r1, sp, #56	; 0x38
 801016a:	f001 ff51 	bl	8012010 <TIM_OC4Init>

	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801016e:	4630      	mov	r0, r6
 8010170:	2108      	movs	r1, #8
 8010172:	f001 ff8d 	bl	8012090 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010176:	4630      	mov	r0, r6
 8010178:	2108      	movs	r1, #8
 801017a:	f001 ff91 	bl	80120a0 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801017e:	4630      	mov	r0, r6
 8010180:	2108      	movs	r1, #8
 8010182:	f001 ff9d 	bl	80120c0 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010186:	4630      	mov	r0, r6
 8010188:	2108      	movs	r1, #8
 801018a:	f001 ffa1 	bl	80120d0 <TIM_OC4PreloadConfig>

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 801018e:	2350      	movs	r3, #80	; 0x50
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8010190:	f44f 6a00 	mov.w	sl, #2048	; 0x800
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8010194:	4630      	mov	r0, r6
 8010196:	a906      	add	r1, sp, #24

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 8010198:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 801019c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80101a0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 80101a4:	f8ad a018 	strh.w	sl, [sp, #24]
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
 80101a8:	f8ad a01a 	strh.w	sl, [sp, #26]
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80101ac:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 80101b0:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80101b4:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 80101b8:	f001 ff9a 	bl	80120f0 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 80101bc:	4630      	mov	r0, r6
 80101be:	4629      	mov	r1, r5
 80101c0:	f001 ffbe 	bl	8012140 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 80101c4:	4630      	mov	r0, r6
 80101c6:	4629      	mov	r1, r5
 80101c8:	f001 fe2a 	bl	8011e20 <TIM_ARRPreloadConfig>
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;

	// Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 80101cc:	4629      	mov	r1, r5
 80101ce:	489d      	ldr	r0, [pc, #628]	; (8010444 <mcpwm_init+0x384>)
 80101d0:	f001 fca6 	bl	8011b20 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 80101d4:	4629      	mov	r1, r5
 80101d6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80101da:	f001 fcc1 	bl	8011b60 <RCC_APB2PeriphClockCmd>

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
 80101de:	4623      	mov	r3, r4
 80101e0:	4a99      	ldr	r2, [pc, #612]	; (8010448 <mcpwm_init+0x388>)
 80101e2:	489a      	ldr	r0, [pc, #616]	; (801044c <mcpwm_init+0x38c>)
 80101e4:	2103      	movs	r1, #3
 80101e6:	f7fe f933 	bl	800e450 <dmaStreamAllocate>
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80101ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 80101ee:	f8df c278 	ldr.w	ip, [pc, #632]	; 8010468 <mcpwm_init+0x3a8>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 80101f2:	f8df e278 	ldr.w	lr, [pc, #632]	; 801046c <mcpwm_init+0x3ac>
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80101f6:	4896      	ldr	r0, [pc, #600]	; (8010450 <mcpwm_init+0x390>)
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80101f8:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80101fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8010200:	f44f 6280 	mov.w	r2, #1024	; 0x400
	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 8010204:	f04f 0a0c 	mov.w	sl, #12
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8010208:	9121      	str	r1, [sp, #132]	; 0x84
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801020a:	a919      	add	r1, sp, #100	; 0x64

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 801020c:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 8010210:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8010214:	9323      	str	r3, [sp, #140]	; 0x8c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8010216:	921f      	str	r2, [sp, #124]	; 0x7c
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8010218:	9419      	str	r4, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 801021a:	941c      	str	r4, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801021c:	941e      	str	r4, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 801021e:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8010222:	9424      	str	r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8010224:	9425      	str	r4, [sp, #148]	; 0x94
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8010226:	9426      	str	r4, [sp, #152]	; 0x98
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8010228:	9427      	str	r4, [sp, #156]	; 0x9c
	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 801022a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801022e:	f001 fb47 	bl	80118c0 <DMA_Init>

	// DMA2_Stream0 enable
	DMA_Cmd(DMA2_Stream4, ENABLE);
 8010232:	4629      	mov	r1, r5
 8010234:	4886      	ldr	r0, [pc, #536]	; (8010450 <mcpwm_init+0x390>)
 8010236:	f001 fb7b 	bl	8011930 <DMA_Cmd>

	// Enable transfer complete interrupt
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 801023a:	2110      	movs	r1, #16
 801023c:	462a      	mov	r2, r5
 801023e:	4884      	ldr	r0, [pc, #528]	; (8010450 <mcpwm_init+0x390>)
 8010240:	f001 fb86 	bl	8011950 <DMA_ITConfig>

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8010244:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8010246:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);
 801024a:	a80a      	add	r0, sp, #40	; 0x28
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 801024c:	920a      	str	r2, [sp, #40]	; 0x28
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 801024e:	930c      	str	r3, [sp, #48]	; 0x30

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8010250:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8010252:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_CommonInit(&ADC_CommonInitStructure);
 8010254:	f001 fa44 	bl	80116e0 <ADC_CommonInit>
	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 8010258:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 801025c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
 8010260:	a913      	add	r1, sp, #76	; 0x4c
 8010262:	487c      	ldr	r0, [pc, #496]	; (8010454 <mcpwm_init+0x394>)
	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 8010264:	9316      	str	r3, [sp, #88]	; 0x58

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8010266:	9215      	str	r2, [sp, #84]	; 0x54
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8010268:	9413      	str	r4, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 801026a:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 801026e:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8010272:	9417      	str	r4, [sp, #92]	; 0x5c
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 8010274:	f88d 9060 	strb.w	r9, [sp, #96]	; 0x60

	ADC_Init(ADC1, &ADC_InitStructure);
 8010278:	f001 fa0a 	bl	8011690 <ADC_Init>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_ExternalTrigConv = 0;
	ADC_Init(ADC2, &ADC_InitStructure);
 801027c:	a913      	add	r1, sp, #76	; 0x4c
 801027e:	4876      	ldr	r0, [pc, #472]	; (8010458 <mcpwm_init+0x398>)
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8010280:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_ExternalTrigConv = 0;
 8010282:	9416      	str	r4, [sp, #88]	; 0x58
	ADC_Init(ADC2, &ADC_InitStructure);
 8010284:	f001 fa04 	bl	8011690 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 8010288:	a913      	add	r1, sp, #76	; 0x4c
 801028a:	4874      	ldr	r0, [pc, #464]	; (801045c <mcpwm_init+0x39c>)
 801028c:	f001 fa00 	bl	8011690 <ADC_Init>

	hw_setup_adc_channels();
 8010290:	f001 f966 	bl	8011560 <hw_setup_adc_channels>

	// Enable DMA request after last transfer (Multi-ADC mode)
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 8010294:	4628      	mov	r0, r5
 8010296:	f001 fa93 	bl	80117c0 <ADC_MultiModeDMARequestAfterLastTransferCmd>

	// Injected channels for current measurement at end of cycle
	ADC_ExternalTrigInjectedConvConfig(ADC1, ADC_ExternalTrigInjecConv_T8_CC2);
 801029a:	486e      	ldr	r0, [pc, #440]	; (8010454 <mcpwm_init+0x394>)
 801029c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80102a0:	f001 fad6 	bl	8011850 <ADC_ExternalTrigInjectedConvConfig>
	ADC_ExternalTrigInjectedConvConfig(ADC2, ADC_ExternalTrigInjecConv_T8_CC3);
 80102a4:	486c      	ldr	r0, [pc, #432]	; (8010458 <mcpwm_init+0x398>)
 80102a6:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80102aa:	f001 fad1 	bl	8011850 <ADC_ExternalTrigInjectedConvConfig>
	ADC_ExternalTrigInjectedConvEdgeConfig(ADC1, ADC_ExternalTrigInjecConvEdge_Falling);
 80102ae:	4869      	ldr	r0, [pc, #420]	; (8010454 <mcpwm_init+0x394>)
 80102b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102b4:	f001 fad4 	bl	8011860 <ADC_ExternalTrigInjectedConvEdgeConfig>
	ADC_ExternalTrigInjectedConvEdgeConfig(ADC2, ADC_ExternalTrigInjecConvEdge_Falling);
 80102b8:	4867      	ldr	r0, [pc, #412]	; (8010458 <mcpwm_init+0x398>)
 80102ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102be:	f001 facf 	bl	8011860 <ADC_ExternalTrigInjectedConvEdgeConfig>
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
 80102c2:	4629      	mov	r1, r5
 80102c4:	4863      	ldr	r0, [pc, #396]	; (8010454 <mcpwm_init+0x394>)
 80102c6:	f001 fabb 	bl	8011840 <ADC_InjectedSequencerLengthConfig>
	ADC_InjectedSequencerLengthConfig(ADC2, 1);
 80102ca:	4629      	mov	r1, r5
 80102cc:	4862      	ldr	r0, [pc, #392]	; (8010458 <mcpwm_init+0x398>)
 80102ce:	f001 fab7 	bl	8011840 <ADC_InjectedSequencerLengthConfig>

	// Interrupt
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
 80102d2:	f240 4107 	movw	r1, #1031	; 0x407
 80102d6:	462a      	mov	r2, r5
 80102d8:	485e      	ldr	r0, [pc, #376]	; (8010454 <mcpwm_init+0x394>)
 80102da:	f001 fad9 	bl	8011890 <ADC_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 80102de:	2303      	movs	r3, #3
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
	ADC_InjectedSequencerLengthConfig(ADC2, 1);

	// Interrupt
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
 80102e0:	2212      	movs	r2, #18
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80102e2:	a802      	add	r0, sp, #8
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
	ADC_InjectedSequencerLengthConfig(ADC2, 1);

	// Interrupt
	ADC_ITConfig(ADC1, ADC_IT_JEOC, ENABLE);
	NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
 80102e4:	f88d 2008 	strb.w	r2, [sp, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 80102e8:	f88d 3009 	strb.w	r3, [sp, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 80102ec:	f88d 300a 	strb.w	r3, [sp, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80102f0:	f88d 500b 	strb.w	r5, [sp, #11]
	NVIC_Init(&NVIC_InitStructure);
 80102f4:	f001 f994 	bl	8011620 <NVIC_Init>

	// Enable ADC1
	ADC_Cmd(ADC1, ENABLE);
 80102f8:	4629      	mov	r1, r5
 80102fa:	4856      	ldr	r0, [pc, #344]	; (8010454 <mcpwm_init+0x394>)
 80102fc:	f001 fa08 	bl	8011710 <ADC_Cmd>

	// Enable ADC2
	ADC_Cmd(ADC2, ENABLE);
 8010300:	4629      	mov	r1, r5
 8010302:	4855      	ldr	r0, [pc, #340]	; (8010458 <mcpwm_init+0x398>)
 8010304:	f001 fa04 	bl	8011710 <ADC_Cmd>

	// Enable ADC3
	ADC_Cmd(ADC3, ENABLE);
 8010308:	4629      	mov	r1, r5
 801030a:	4854      	ldr	r0, [pc, #336]	; (801045c <mcpwm_init+0x39c>)
 801030c:	f001 fa00 	bl	8011710 <ADC_Cmd>

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8010310:	4629      	mov	r1, r5
 8010312:	2002      	movs	r0, #2
 8010314:	f001 fc24 	bl	8011b60 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 8010318:	4638      	mov	r0, r7
 801031a:	eb0d 010a 	add.w	r1, sp, sl
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 801031e:	f8db 2000 	ldr.w	r2, [fp]

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8010322:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010326:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801032a:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 801032e:	f88d 4016 	strb.w	r4, [sp, #22]
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 8010332:	4b4b      	ldr	r3, [pc, #300]	; (8010460 <mcpwm_init+0x3a0>)
 8010334:	fb93 f3f2 	sdiv	r3, r3, r2
 8010338:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 801033a:	f001 fd21 	bl	8011d80 <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 801033e:	2260      	movs	r2, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 8010340:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010342:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010346:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 8010348:	f44f 7200 	mov.w	r2, #512	; 0x200
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 801034c:	a90e      	add	r1, sp, #56	; 0x38
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 801034e:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 8010352:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8010354:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8010358:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 801035c:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8010360:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010364:	f001 fd7c 	bl	8011e60 <TIM_OC1Init>
 8010368:	4638      	mov	r0, r7
 801036a:	2108      	movs	r1, #8
 801036c:	f001 fe90 	bl	8012090 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010370:	4638      	mov	r0, r7
 8010372:	a90e      	add	r1, sp, #56	; 0x38
 8010374:	f001 fdb4 	bl	8011ee0 <TIM_OC2Init>
 8010378:	4638      	mov	r0, r7
 801037a:	2108      	movs	r1, #8
 801037c:	f001 fe90 	bl	80120a0 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010380:	4638      	mov	r0, r7
 8010382:	a90e      	add	r1, sp, #56	; 0x38
 8010384:	f001 fdfc 	bl	8011f80 <TIM_OC3Init>
 8010388:	4638      	mov	r0, r7
 801038a:	2108      	movs	r1, #8
 801038c:	f001 fe98 	bl	80120c0 <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM8, ENABLE);
 8010390:	4638      	mov	r0, r7
 8010392:	4629      	mov	r1, r5
 8010394:	f001 fd44 	bl	8011e20 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 8010398:	4638      	mov	r0, r7
 801039a:	4629      	mov	r1, r5
 801039c:	f001 fed0 	bl	8012140 <TIM_CCPreloadControl>

	// PWM outputs have to be enabled in order to trigger ADC on CCx
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 80103a0:	4638      	mov	r0, r7
 80103a2:	4629      	mov	r1, r5
 80103a4:	f001 febc 	bl	8012120 <TIM_CtrlPWMOutputs>

	// TIM1 Master and TIM8 slave
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 80103a8:	4630      	mov	r0, r6
 80103aa:	2120      	movs	r1, #32
 80103ac:	f001 fee8 	bl	8012180 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 80103b0:	4630      	mov	r0, r6
 80103b2:	2180      	movs	r1, #128	; 0x80
 80103b4:	f001 ff04 	bl	80121c0 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 80103b8:	4638      	mov	r0, r7
 80103ba:	4621      	mov	r1, r4
 80103bc:	f001 fed8 	bl	8012170 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 80103c0:	4638      	mov	r0, r7
 80103c2:	4649      	mov	r1, r9
 80103c4:	f001 feec 	bl	80121a0 <TIM_SelectSlaveMode>

	// Enable TIM8
	TIM_Cmd(TIM8, ENABLE);
 80103c8:	4638      	mov	r0, r7
 80103ca:	4629      	mov	r1, r5
 80103cc:	f001 fd38 	bl	8011e40 <TIM_Cmd>

	// Enable TIM1
	TIM_Cmd(TIM1, ENABLE);
 80103d0:	4630      	mov	r0, r6
 80103d2:	4629      	mov	r1, r5
 80103d4:	f001 fd34 	bl	8011e40 <TIM_Cmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80103d8:	4630      	mov	r0, r6
 80103da:	4629      	mov	r1, r5
 80103dc:	f001 fea0 	bl	8012120 <TIM_CtrlPWMOutputs>

	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80103e0:	4628      	mov	r0, r5
 80103e2:	4629      	mov	r1, r5
 80103e4:	f001 fbac 	bl	8011b40 <RCC_APB1PeriphClockCmd>
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80103e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80103ec:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80103ee:	eb0d 010a 	add.w	r1, sp, sl
 80103f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80103f6:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80103f8:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80103fc:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010400:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8010404:	f001 fcbc 	bl	8011d80 <TIM_TimeBaseInit>

	// TIM2 enable counter
	TIM_Cmd(TIM2, ENABLE);
 8010408:	4629      	mov	r1, r5
 801040a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801040e:	f001 fd17 	bl	8011e40 <TIM_Cmd>


	// ADC sampling locations
	//stop_pwm_hw();
	utils_sys_lock_cnt();
 8010412:	f000 fcc5 	bl	8010da0 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 8010416:	6833      	ldr	r3, [r6, #0]
 8010418:	f043 0302 	orr.w	r3, r3, #2
 801041c:	6033      	str	r3, [r6, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 801041e:	683b      	ldr	r3, [r7, #0]

	TIM8->CCR1 = 500;//for vdc
 8010420:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	//stop_pwm_hw();
	utils_sys_lock_cnt();

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
	TIM8->CR1 |= TIM_CR1_UDIS;
 8010424:	f043 0302 	orr.w	r3, r3, #2
 8010428:	603b      	str	r3, [r7, #0]

	TIM8->CCR1 = 500;//for vdc
 801042a:	637a      	str	r2, [r7, #52]	; 0x34
 801042c:	e020      	b.n	8010470 <mcpwm_init+0x3b0>
 801042e:	bf00      	nop
 8010430:	20002a20 	.word	0x20002a20
 8010434:	40010000 	.word	0x40010000
 8010438:	40010400 	.word	0x40010400
 801043c:	20002900 	.word	0x20002900
 8010440:	0501bd00 	.word	0x0501bd00
 8010444:	00400005 	.word	0x00400005
 8010448:	0800ff31 	.word	0x0800ff31
 801044c:	08013290 	.word	0x08013290
 8010450:	40026470 	.word	0x40026470
 8010454:	40012000 	.word	0x40012000
 8010458:	40012100 	.word	0x40012100
 801045c:	40012200 	.word	0x40012200
 8010460:	0a037a00 	.word	0x0a037a00
 8010464:	20000808 	.word	0x20000808
 8010468:	20001ec4 	.word	0x20001ec4
 801046c:	40012308 	.word	0x40012308
	TIM8->CCR2 = TIM1->ARR;//for Ib
 8010470:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010472:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM8->CCR3 = TIM1->ARR;//for Ia
 8010474:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010476:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 8010478:	6833      	ldr	r3, [r6, #0]
 801047a:	f023 0302 	bic.w	r3, r3, #2
 801047e:	6033      	str	r3, [r6, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	f023 0302 	bic.w	r3, r3, #2
 8010486:	603b      	str	r3, [r7, #0]

	utils_sys_unlock_cnt();
 8010488:	f000 fc9a 	bl	8010dc0 <utils_sys_unlock_cnt>


	// Calibrate current offset
	ENABLE_GATE();
 801048c:	4b31      	ldr	r3, [pc, #196]	; (8010554 <mcpwm_init+0x494>)
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
static void do_dc_cal(void) {
	DCCAL_ON();
	while(IS_DRV_FAULT()){};
 801048e:	4a32      	ldr	r2, [pc, #200]	; (8010558 <mcpwm_init+0x498>)
	utils_sys_unlock_cnt();


	// Calibrate current offset
	ENABLE_GATE();
	DCCAL_OFF();
 8010490:	2180      	movs	r1, #128	; 0x80

	utils_sys_unlock_cnt();


	// Calibrate current offset
	ENABLE_GATE();
 8010492:	2040      	movs	r0, #64	; 0x40
 8010494:	8318      	strh	r0, [r3, #24]
	DCCAL_OFF();
 8010496:	8359      	strh	r1, [r3, #26]
	GAIN_FULLDN();
 8010498:	f8a3 801a 	strh.w	r8, [r3, #26]
static volatile int curr1_sum;
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
static void do_dc_cal(void) {
	DCCAL_ON();
 801049c:	8319      	strh	r1, [r3, #24]
	while(IS_DRV_FAULT()){};
 801049e:	6913      	ldr	r3, [r2, #16]
 80104a0:	04db      	lsls	r3, r3, #19
 80104a2:	d5fc      	bpl.n	801049e <mcpwm_init+0x3de>
	chThdSleepMilliseconds(1000);
 80104a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80104a8:	f7fc fdfa 	bl	800d0a0 <chThdSleep>
	curr0_sum = 0;
 80104ac:	4c2b      	ldr	r4, [pc, #172]	; (801055c <mcpwm_init+0x49c>)
	curr1_sum = 0;
 80104ae:	482c      	ldr	r0, [pc, #176]	; (8010560 <mcpwm_init+0x4a0>)
	curr_start_samples = 0;
 80104b0:	492c      	ldr	r1, [pc, #176]	; (8010564 <mcpwm_init+0x4a4>)
static volatile int curr1_offset;
static void do_dc_cal(void) {
	DCCAL_ON();
	while(IS_DRV_FAULT()){};
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	6023      	str	r3, [r4, #0]
	curr1_sum = 0;
 80104b6:	6003      	str	r3, [r0, #0]
	curr_start_samples = 0;
 80104b8:	600b      	str	r3, [r1, #0]
	while(curr_start_samples < 4000) {};
 80104ba:	680b      	ldr	r3, [r1, #0]
 80104bc:	4a29      	ldr	r2, [pc, #164]	; (8010564 <mcpwm_init+0x4a4>)
 80104be:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80104c2:	dbfa      	blt.n	80104ba <mcpwm_init+0x3fa>
	curr0_offset = curr0_sum / curr_start_samples;
 80104c4:	4928      	ldr	r1, [pc, #160]	; (8010568 <mcpwm_init+0x4a8>)
	curr1_offset = curr1_sum / curr_start_samples;
 80104c6:	4f29      	ldr	r7, [pc, #164]	; (801056c <mcpwm_init+0x4ac>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 80104c8:	6823      	ldr	r3, [r4, #0]
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
 80104ca:	4e22      	ldr	r6, [pc, #136]	; (8010554 <mcpwm_init+0x494>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 80104cc:	6814      	ldr	r4, [r2, #0]
 80104ce:	fb93 f3f4 	sdiv	r3, r3, r4
 80104d2:	600b      	str	r3, [r1, #0]
	curr1_offset = curr1_sum / curr_start_samples;
 80104d4:	6803      	ldr	r3, [r0, #0]
 80104d6:	6812      	ldr	r2, [r2, #0]
 80104d8:	fb93 f3f2 	sdiv	r3, r3, r2
	DCCAL_OFF();
	dccal_done = true;
 80104dc:	2501      	movs	r5, #1
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
 80104de:	603b      	str	r3, [r7, #0]
	DCCAL_OFF();
 80104e0:	2480      	movs	r4, #128	; 0x80
	dccal_done = true;
 80104e2:	4b23      	ldr	r3, [pc, #140]	; (8010570 <mcpwm_init+0x4b0>)
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
 80104e4:	8374      	strh	r4, [r6, #26]
	GAIN_FULLDN();
	do_dc_cal();


	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80104e6:	4629      	mov	r1, r5
 80104e8:	2040      	movs	r0, #64	; 0x40
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80104ea:	2400      	movs	r4, #0
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
	dccal_done = true;
 80104ec:	701d      	strb	r5, [r3, #0]
	GAIN_FULLDN();
	do_dc_cal();


	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80104ee:	f001 fb27 	bl	8011b40 <RCC_APB1PeriphClockCmd>
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80104f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80104f6:	2307      	movs	r3, #7
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80104f8:	a903      	add	r1, sp, #12
 80104fa:	481e      	ldr	r0, [pc, #120]	; (8010574 <mcpwm_init+0x4b4>)
	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80104fc:	9204      	str	r2, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80104fe:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8010502:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010506:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 801050a:	f001 fc39 	bl	8011d80 <TIM_TimeBaseInit>

	// TIM3 enable counter
	TIM_Cmd(TIM12, ENABLE);
 801050e:	4629      	mov	r1, r5
 8010510:	4818      	ldr	r0, [pc, #96]	; (8010574 <mcpwm_init+0x4b4>)
 8010512:	f001 fc95 	bl	8011e40 <TIM_Cmd>

	// Start threads
	chThdCreateStatic(SEQUENCE_thread_wa, sizeof(SEQUENCE_thread_wa), NORMALPRIO, SEQUENCE_thread, NULL);
 8010516:	4b18      	ldr	r3, [pc, #96]	; (8010578 <mcpwm_init+0x4b8>)
 8010518:	9400      	str	r4, [sp, #0]
 801051a:	2240      	movs	r2, #64	; 0x40
 801051c:	f640 1198 	movw	r1, #2456	; 0x998
 8010520:	4816      	ldr	r0, [pc, #88]	; (801057c <mcpwm_init+0x4bc>)
 8010522:	f7fc fd7d 	bl	800d020 <chThdCreateStatic>
	////chThdCreateStatic(rpm_thread_wa, sizeof(rpm_thread_wa), NORMALPRIO, rpm_thread, NULL);

	// WWDG configuration
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8010526:	4629      	mov	r1, r5
 8010528:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801052c:	f001 fb08 	bl	8011b40 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 8010530:	4620      	mov	r0, r4
 8010532:	f001 fe55 	bl	80121e0 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 8010536:	20ff      	movs	r0, #255	; 0xff
 8010538:	f001 fe62 	bl	8012200 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 801053c:	2064      	movs	r0, #100	; 0x64
 801053e:	f001 fe7f 	bl	8012240 <WWDG_Enable>


//---------------------------------------------------------------------------


	SetupControlParameters();
 8010542:	f7ff fd6d 	bl	8010020 <SetupControlParameters>


	uGF.Word = 0;                   // clear flags
 8010546:	4b0e      	ldr	r3, [pc, #56]	; (8010580 <mcpwm_init+0x4c0>)

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 8010548:	2202      	movs	r2, #2


	SetupControlParameters();


	uGF.Word = 0;                   // clear flags
 801054a:	801c      	strh	r4, [r3, #0]

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 801054c:	701a      	strb	r2, [r3, #0]

}
 801054e:	b029      	add	sp, #164	; 0xa4
 8010550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010554:	40020800 	.word	0x40020800
 8010558:	40020400 	.word	0x40020400
 801055c:	20002a18 	.word	0x20002a18
 8010560:	20001f0c 	.word	0x20001f0c
 8010564:	200028f8 	.word	0x200028f8
 8010568:	20001ec0 	.word	0x20001ec0
 801056c:	20002a14 	.word	0x20002a14
 8010570:	20002900 	.word	0x20002900
 8010574:	40001800 	.word	0x40001800
 8010578:	0800ff11 	.word	0x0800ff11
 801057c:	20001f38 	.word	0x20001f38
 8010580:	200028f4 	.word	0x200028f4
 8010584:	f3af 8000 	nop.w
 8010588:	f3af 8000 	nop.w
 801058c:	f3af 8000 	nop.w

08010590 <VoltRippleComp>:
	// CompVdq = ------------- * Vdq
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
 8010590:	4a14      	ldr	r2, [pc, #80]	; (80105e4 <VoltRippleComp+0x54>)
 8010592:	4b15      	ldr	r3, [pc, #84]	; (80105e8 <VoltRippleComp+0x58>)
 8010594:	ed92 7a00 	vldr	s14, [r2]
 8010598:	edd3 7a00 	vldr	s15, [r3]
 801059c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a4:	dc11      	bgt.n	80105ca <VoltRippleComp+0x3a>
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
	else if (DCbus > TargetDCbus)
 80105a6:	ed93 7a00 	vldr	s14, [r3]
 80105aa:	edd2 7a00 	vldr	s15, [r2]
 80105ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b6:	dd07      	ble.n	80105c8 <VoltRippleComp+0x38>
		CompVdq = ((TargetDCbus/ DCbus)* Vdq);
 80105b8:	edd2 7a00 	vldr	s15, [r2]
 80105bc:	ed93 7a00 	vldr	s14, [r3]
 80105c0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80105c4:	ee20 0a27 	vmul.f32	s0, s0, s15
	else
		CompVdq = Vdq;

	return CompVdq;
}
 80105c8:	4770      	bx	lr
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
 80105ca:	ed92 7a00 	vldr	s14, [r2]
 80105ce:	edd3 7a00 	vldr	s15, [r3]
 80105d2:	edd3 6a00 	vldr	s13, [r3]
 80105d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105da:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80105de:	eea7 0a80 	vfma.f32	s0, s15, s0
 80105e2:	4770      	bx	lr
 80105e4:	2000293c 	.word	0x2000293c
 80105e8:	20002938 	.word	0x20002938
 80105ec:	f3af 8000 	nop.w

080105f0 <DoControl.part.1>:

		}
		else
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
 80105f0:	4b37      	ldr	r3, [pc, #220]	; (80106d0 <DoControl.part.1+0xe0>)
 80105f2:	881b      	ldrh	r3, [r3, #0]
	return;
}
//---------------------------------------------------------------------
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
 80105f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 80105f8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80106f8 <DoControl.part.1+0x108>

		}
		else
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d055      	beq.n	80106ac <DoControl.part.1+0xbc>
 8010600:	4f34      	ldr	r7, [pc, #208]	; (80106d4 <DoControl.part.1+0xe4>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
			}

			if (uGF.bit.EnTorqueMod)
 8010602:	4d35      	ldr	r5, [pc, #212]	; (80106d8 <DoControl.part.1+0xe8>)
				CtrlParm.qVqRef = CtrlParm.qVelRef;

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
 8010604:	4c35      	ldr	r4, [pc, #212]	; (80106dc <DoControl.part.1+0xec>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
			}

			if (uGF.bit.EnTorqueMod)
 8010606:	782b      	ldrb	r3, [r5, #0]
				CtrlParm.qVqRef = CtrlParm.qVelRef;

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
 8010608:	4e35      	ldr	r6, [pc, #212]	; (80106e0 <DoControl.part.1+0xf0>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
			}

			if (uGF.bit.EnTorqueMod)
 801060a:	0759      	lsls	r1, r3, #29
				CtrlParm.qVqRef = CtrlParm.qVelRef;
 801060c:	bf44      	itt	mi
 801060e:	683b      	ldrmi	r3, [r7, #0]
 8010610:	60bb      	strmi	r3, [r7, #8]

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
 8010612:	69f2      	ldr	r2, [r6, #28]
 8010614:	61e2      	str	r2, [r4, #28]
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
 8010616:	2300      	movs	r3, #0
			CalcPI(&PIParmD);
 8010618:	4620      	mov	r0, r4

			//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));
	
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
 801061a:	61a3      	str	r3, [r4, #24]
			CalcPI(&PIParmD);
 801061c:	f7ff fcd0 	bl	800ffc0 <CalcPI>
	
			if(uGF.bit.EnVoltRipCo)
 8010620:	782b      	ldrb	r3, [r5, #0]
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 8010622:	ed94 0a08 	vldr	s0, [r4, #32]
			// PI control for D
			PIParmD.qInMeas = ParkParm.qId;
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
			CalcPI(&PIParmD);
	
			if(uGF.bit.EnVoltRipCo)
 8010626:	071a      	lsls	r2, r3, #28
 8010628:	d43b      	bmi.n	80106a2 <DoControl.part.1+0xb2>
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;
 801062a:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
 801062e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010632:	4b2c      	ldr	r3, [pc, #176]	; (80106e4 <DoControl.part.1+0xf4>)
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010634:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80106e8 <DoControl.part.1+0xf8>
			if(uGF.bit.EnVoltRipCo)
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8010638:	ed83 0a00 	vstr	s0, [r3]
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801063c:	ed93 0a00 	vldr	s0, [r3]
 8010640:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010644:	eef1 7ac0 	vsqrt.f32	s15, s0
 8010648:	eef4 7a67 	vcmp.f32	s15, s15
 801064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010650:	d139      	bne.n	80106c6 <DoControl.part.1+0xd6>
 8010652:	4c26      	ldr	r4, [pc, #152]	; (80106ec <DoControl.part.1+0xfc>)
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
 8010654:	6a32      	ldr	r2, [r6, #32]
			PIParmQ.qInRef	= CtrlParm.qVqRef;
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	61a3      	str	r3, [r4, #24]
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
 801065a:	eeb1 7a67 	vneg.f32	s14, s15
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
			PIParmQ.qInRef	= CtrlParm.qVqRef;
			CalcPI(&PIParmQ);
 801065e:	4620      	mov	r0, r4
			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
 8010660:	61e2      	str	r2, [r4, #28]
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010662:	edc4 7a04 	vstr	s15, [r4, #16]
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
 8010666:	ed84 7a05 	vstr	s14, [r4, #20]
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
			PIParmQ.qInRef	= CtrlParm.qVqRef;
			CalcPI(&PIParmQ);
 801066a:	f7ff fca9 	bl	800ffc0 <CalcPI>
	
			// If voltage ripple compensation flag is set, adjust the output
			// of the Q controller depending on measured DC Bus voltage
			if(uGF.bit.EnVoltRipCo)
 801066e:	782b      	ldrb	r3, [r5, #0]
			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
			PIParmQ.qOutMin = -PIParmQ.qOutMax;
	
			// PI control for Q
			PIParmQ.qInMeas = ParkParm.qIq;
 8010670:	4e1b      	ldr	r6, [pc, #108]	; (80106e0 <DoControl.part.1+0xf0>)
			PIParmQ.qInRef	= CtrlParm.qVqRef;
			CalcPI(&PIParmQ);
	
			// If voltage ripple compensation flag is set, adjust the output
			// of the Q controller depending on measured DC Bus voltage
			if(uGF.bit.EnVoltRipCo)
 8010672:	071b      	lsls	r3, r3, #28
 8010674:	d40e      	bmi.n	8010694 <DoControl.part.1+0xa4>
				ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
			else
				ParkParm.qVq = PIParmQ.qOut;
 8010676:	6a23      	ldr	r3, [r4, #32]
 8010678:	62b3      	str	r3, [r6, #40]	; 0x28
	
			// Limit, if motor is stalled, stop motor commutation
			if (smc1.OmegaFltred < 0)
 801067a:	edd8 7a18 	vldr	s15, [r8, #96]	; 0x60
 801067e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010686:	d503      	bpl.n	8010690 <DoControl.part.1+0xa0>
			{
				uGF.bit.RunMotor = 0;
 8010688:	782b      	ldrb	r3, [r5, #0]
 801068a:	f36f 0341 	bfc	r3, #1, #1
 801068e:	702b      	strb	r3, [r5, #0]
 8010690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			CalcPI(&PIParmQ);
	
			// If voltage ripple compensation flag is set, adjust the output
			// of the Q controller depending on measured DC Bus voltage
			if(uGF.bit.EnVoltRipCo)
				ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
 8010694:	ed94 0a08 	vldr	s0, [r4, #32]
 8010698:	f7ff ff7a 	bl	8010590 <VoltRippleComp>
 801069c:	ed86 0a0a 	vstr	s0, [r6, #40]	; 0x28
 80106a0:	e7eb      	b.n	801067a <DoControl.part.1+0x8a>
			PIParmD.qInMeas = ParkParm.qId;
			PIParmD.qInRef	= 0.0f;//CtrlParm.qVdRef;
			CalcPI(&PIParmD);
	
			if(uGF.bit.EnVoltRipCo)
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 80106a2:	f7ff ff75 	bl	8010590 <VoltRippleComp>
 80106a6:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
 80106aa:	e7c0      	b.n	801062e <DoControl.part.1+0x3e>
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 80106ac:	4c10      	ldr	r4, [pc, #64]	; (80106f0 <DoControl.part.1+0x100>)
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
 80106ae:	4b11      	ldr	r3, [pc, #68]	; (80106f4 <DoControl.part.1+0x104>)
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 80106b0:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
				CtrlParm.qVqRef = PIParmW.qOut;
 80106b4:	4f07      	ldr	r7, [pc, #28]	; (80106d4 <DoControl.part.1+0xe4>)
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
 80106b6:	61a3      	str	r3, [r4, #24]
				CalcPI(&PIParmW);
 80106b8:	4620      	mov	r0, r4
		// Closed Loop Vector Control
		{
			if(AccumThetaCnt == 0)
			{
				// Execute the velocity control loop
				PIParmW.qInMeas = smc1.Omega;
 80106ba:	61e2      	str	r2, [r4, #28]
				PIParmW.qInRef	=  -0.01f;//CtrlParm.qVelRef;
				CalcPI(&PIParmW);
 80106bc:	f7ff fc80 	bl	800ffc0 <CalcPI>
				CtrlParm.qVqRef = PIParmW.qOut;
 80106c0:	6a23      	ldr	r3, [r4, #32]
 80106c2:	60bb      	str	r3, [r7, #8]
 80106c4:	e79d      	b.n	8010602 <DoControl.part.1+0x12>
				ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
			else
				ParkParm.qVd = PIParmD.qOut;

			qVdSquared = ParkParm.qVd * ParkParm.qVd;
			PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80106c6:	f001 fe4b 	bl	8012360 <sqrtf>
 80106ca:	eef0 7a40 	vmov.f32	s15, s0
 80106ce:	e7c0      	b.n	8010652 <DoControl.part.1+0x62>
 80106d0:	20002940 	.word	0x20002940
 80106d4:	20001edc 	.word	0x20001edc
 80106d8:	200028f4 	.word	0x200028f4
 80106dc:	20001ee8 	.word	0x20001ee8
 80106e0:	200029ac 	.word	0x200029ac
 80106e4:	20002934 	.word	0x20002934
 80106e8:	3f670a3d 	.word	0x3f670a3d
 80106ec:	200028d0 	.word	0x200028d0
 80106f0:	20001f10 	.word	0x20001f10
 80106f4:	bc23d70a 	.word	0xbc23d70a
 80106f8:	20002948 	.word	0x20002948
 80106fc:	f3af 8000 	nop.w

08010700 <InvPark>:
	MeasCurrParm.Offseta = Offset_a;
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
 8010700:	b510      	push	{r4, lr}
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010702:	4c11      	ldr	r4, [pc, #68]	; (8010748 <InvPark+0x48>)
	MeasCurrParm.Offseta = Offset_a;
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
 8010704:	ed2d 8b04 	vpush	{d8-d9}
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010708:	ed94 9a00 	vldr	s18, [r4]
 801070c:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8010710:	eeb0 0a49 	vmov.f32	s0, s18
 8010714:	f001 fda4 	bl	8012260 <cosf>
 8010718:	eef0 8a40 	vmov.f32	s17, s0
 801071c:	eeb0 0a49 	vmov.f32	s0, s18
 8010720:	f001 fdde 	bl	80122e0 <sinf>
 8010724:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8010728:	ee20 7a67 	vnmul.f32	s14, s0, s15
	ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 801072c:	ee68 7aa7 	vmul.f32	s15, s17, s15
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010730:	eea8 7a28 	vfma.f32	s14, s16, s17
	ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010734:	eee8 7a00 	vfma.f32	s15, s16, s0
	return;
}
 8010738:	ecbd 8b04 	vpop	{d8-d9}
	MeasCurrParm.Offsetb = Offset_b;
	return;
}
void InvPark(void)
{
	ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 801073c:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
	ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010740:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
	return;
}
 8010744:	bd10      	pop	{r4, pc}
 8010746:	bf00      	nop
 8010748:	200029ac 	.word	0x200029ac
 801074c:	f3af 8000 	nop.w

08010750 <CalcTimes>:

     return;
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 8010750:	4b18      	ldr	r3, [pc, #96]	; (80107b4 <CalcTimes+0x64>)
 8010752:	4a19      	ldr	r2, [pc, #100]	; (80107b8 <CalcTimes+0x68>)
 8010754:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010756:	ed92 7a04 	vldr	s14, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 801075a:	edd2 6a05 	vldr	s13, [r2, #20]

     return;
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 801075e:	6013      	str	r3, [r2, #0]

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010760:	ee07 3a90 	vmov	s15, r3
 8010764:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010768:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 801076c:	ee27 7a87 	vmul.f32	s14, s15, s14
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010770:	ee67 6aa6 	vmul.f32	s13, s15, s13
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010774:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010778:	ed82 7a04 	vstr	s14, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 801077c:	ee77 7ae6 	vsub.f32	s15, s15, s13
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010780:	edc2 6a05 	vstr	s13, [r2, #20]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010784:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 801078c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010790:	edc2 7a08 	vstr	s15, [r2, #32]
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010794:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010798:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 801079c:	eef8 7a47 	vcvt.f32.u32	s15, s14
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 80107a0:	ed82 7a07 	vstr	s14, [r2, #28]
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 80107a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80107a8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80107ac:	edc2 6a06 	vstr	s13, [r2, #24]
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	40010000 	.word	0x40010000
 80107b8:	200029f0 	.word	0x200029f0
 80107bc:	f3af 8000 	nop.w

080107c0 <update_timer_Duty>:

	return;
}  
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
 80107c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c4:	4616      	mov	r6, r2
 80107c6:	4680      	mov	r8, r0
 80107c8:	460f      	mov	r7, r1
	utils_sys_lock_cnt();
 80107ca:	f000 fae9 	bl	8010da0 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80107ce:	4b0d      	ldr	r3, [pc, #52]	; (8010804 <update_timer_Duty+0x44>)
	TIM8->CR1 |= TIM_CR1_UDIS;
 80107d0:	4c0d      	ldr	r4, [pc, #52]	; (8010808 <update_timer_Duty+0x48>)
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
	utils_sys_lock_cnt();

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80107d2:	681d      	ldr	r5, [r3, #0]
 80107d4:	f045 0502 	orr.w	r5, r5, #2
 80107d8:	601d      	str	r5, [r3, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80107da:	6825      	ldr	r5, [r4, #0]
 80107dc:	f045 0502 	orr.w	r5, r5, #2
 80107e0:	6025      	str	r5, [r4, #0]

	TIM1->CCR1 = duty_A;
 80107e2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_B;
 80107e6:	639f      	str	r7, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_C;
 80107e8:	63de      	str	r6, [r3, #60]	; 0x3c
	//TIM8->CCR2 = duty_A;
	//TIM8->CCR3 = duty_C;


	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	f022 0202 	bic.w	r2, r2, #2
 80107f0:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	f023 0302 	bic.w	r3, r3, #2
 80107f8:	6023      	str	r3, [r4, #0]

	utils_sys_unlock_cnt();
}
 80107fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
	TIM8->CR1 &= ~TIM_CR1_UDIS;

	utils_sys_unlock_cnt();
 80107fe:	f000 badf 	b.w	8010dc0 <utils_sys_unlock_cnt>
 8010802:	bf00      	nop
 8010804:	40010000 	.word	0x40010000
 8010808:	40010400 	.word	0x40010400
 801080c:	f3af 8000 	nop.w

08010810 <CalcSVGen>:
}
void CalcSVGen( void )
{ 
 8010810:	b510      	push	{r4, lr}
	if( SVGenParm.qVr1 >= 0 )
 8010812:	4c3f      	ldr	r4, [pc, #252]	; (8010910 <CalcSVGen+0x100>)
 8010814:	edd4 7a01 	vldr	s15, [r4, #4]
 8010818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010820:	db27      	blt.n	8010872 <CalcSVGen+0x62>
	{       
		// (xx1)
		if( SVGenParm.qVr2 >= 0 )
 8010822:	ed94 7a02 	vldr	s14, [r4, #8]
 8010826:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082e:	da13      	bge.n	8010858 <CalcSVGen+0x48>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
		}
		else
		{            
			// (x01)
			if( SVGenParm.qVr3 >= 0 )
 8010830:	edd4 6a03 	vldr	s13, [r4, #12]
 8010834:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801083c:	db45      	blt.n	80108ca <CalcSVGen+0xba>
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
 801083e:	edc4 7a05 	vstr	s15, [r4, #20]
				SVGenParm.T1 = SVGenParm.qVr3;
 8010842:	edc4 6a04 	vstr	s13, [r4, #16]
				CalcTimes();
 8010846:	f7ff ff83 	bl	8010750 <CalcTimes>
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 801084a:	6a20      	ldr	r0, [r4, #32]
 801084c:	69a1      	ldr	r1, [r4, #24]
 801084e:	69e2      	ldr	r2, [r4, #28]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
				SVGenParm.T1 = SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 8010854:	f7ff bfb4 	b.w	80107c0 <update_timer_Duty>
		if( SVGenParm.qVr2 >= 0 )
		{
			// (x11)
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
 8010858:	ed84 7a05 	vstr	s14, [r4, #20]
			SVGenParm.T1 = SVGenParm.qVr1;
 801085c:	edc4 7a04 	vstr	s15, [r4, #16]
			CalcTimes();
 8010860:	f7ff ff76 	bl	8010750 <CalcTimes>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8010864:	f104 0018 	add.w	r0, r4, #24
 8010868:	c807      	ldmia	r0, {r0, r1, r2}
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 801086a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
			SVGenParm.T1 = SVGenParm.qVr1;
			CalcTimes();
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 801086e:	f7ff bfa7 	b.w	80107c0 <update_timer_Duty>
		}
	}
	else
	{
		// (xx0)
		if( SVGenParm.qVr2 >= 0 )
 8010872:	edd4 6a02 	vldr	s13, [r4, #8]
 8010876:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801087a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801087e:	db35      	blt.n	80108ec <CalcSVGen+0xdc>
		{
			// (x10)
			if( SVGenParm.qVr3 >= 0 )
 8010880:	ed94 7a03 	vldr	s14, [r4, #12]
 8010884:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088c:	db0c      	blt.n	80108a8 <CalcSVGen+0x98>
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
 801088e:	ed84 7a05 	vstr	s14, [r4, #20]
				SVGenParm.T1 = SVGenParm.qVr2;
 8010892:	edc4 6a04 	vstr	s13, [r4, #16]
				CalcTimes();
 8010896:	f7ff ff5b 	bl	8010750 <CalcTimes>
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 801089a:	69e0      	ldr	r0, [r4, #28]
 801089c:	6a21      	ldr	r1, [r4, #32]
 801089e:	69a2      	ldr	r2, [r4, #24]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80108a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
				SVGenParm.T1 = SVGenParm.qVr2;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 80108a4:	f7ff bf8c 	b.w	80107c0 <update_timer_Duty>
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 80108a8:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr1;
 80108ac:	eef1 7a67 	vneg.f32	s15, s15
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 80108b0:	ed84 7a05 	vstr	s14, [r4, #20]
				SVGenParm.T1 = -SVGenParm.qVr1;
 80108b4:	edc4 7a04 	vstr	s15, [r4, #16]
				CalcTimes();
 80108b8:	f7ff ff4a 	bl	8010750 <CalcTimes>
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 80108bc:	69a0      	ldr	r0, [r4, #24]
 80108be:	6a21      	ldr	r1, [r4, #32]
 80108c0:	69e2      	ldr	r2, [r4, #28]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80108c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
				SVGenParm.T1 = -SVGenParm.qVr1;
				CalcTimes();
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 80108c6:	f7ff bf7b 	b.w	80107c0 <update_timer_Duty>

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 80108ca:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr3;
 80108ce:	eef1 6a66 	vneg.f32	s13, s13

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 80108d2:	ed84 7a05 	vstr	s14, [r4, #20]
				SVGenParm.T1 = -SVGenParm.qVr3;
 80108d6:	edc4 6a04 	vstr	s13, [r4, #16]
				CalcTimes();
 80108da:	f7ff ff39 	bl	8010750 <CalcTimes>
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 80108de:	69e0      	ldr	r0, [r4, #28]
 80108e0:	69a1      	ldr	r1, [r4, #24]
 80108e2:	6a22      	ldr	r2, [r4, #32]
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80108e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
				SVGenParm.T1 = -SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 80108e8:	f7ff bf6a 	b.w	80107c0 <update_timer_Duty>
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 80108ec:	eef1 7a67 	vneg.f32	s15, s15
			SVGenParm.T1 = -SVGenParm.qVr2;
 80108f0:	eef1 6a66 	vneg.f32	s13, s13
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 80108f4:	edc4 7a05 	vstr	s15, [r4, #20]
			SVGenParm.T1 = -SVGenParm.qVr2;
 80108f8:	edc4 6a04 	vstr	s13, [r4, #16]
			CalcTimes();
 80108fc:	f7ff ff28 	bl	8010750 <CalcTimes>
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 8010900:	6a20      	ldr	r0, [r4, #32]
 8010902:	69e1      	ldr	r1, [r4, #28]
 8010904:	69a2      	ldr	r2, [r4, #24]
		}
	}

}
 8010906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
			SVGenParm.T1 = -SVGenParm.qVr2;
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 801090a:	f7ff bf59 	b.w	80107c0 <update_timer_Duty>
 801090e:	bf00      	nop
 8010910:	200029f0 	.word	0x200029f0
 8010914:	f3af 8000 	nop.w
 8010918:	f3af 8000 	nop.w
 801091c:	f3af 8000 	nop.w

08010920 <SMC_HallSensor_Estimation>:
float sinth;



void SMC_HallSensor_Estimation (SMC *s)
{
 8010920:	b570      	push	{r4, r5, r6, lr}


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010922:	4b55      	ldr	r3, [pc, #340]	; (8010a78 <SMC_HallSensor_Estimation+0x158>)
 8010924:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8010a7c <SMC_HallSensor_Estimation+0x15c>
 8010928:	889a      	ldrh	r2, [r3, #4]
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801092a:	885b      	ldrh	r3, [r3, #2]
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 801092c:	4c54      	ldr	r4, [pc, #336]	; (8010a80 <SMC_HallSensor_Estimation+0x160>)
	sinth = sinf(Theta);

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
 801092e:	4e55      	ldr	r6, [pc, #340]	; (8010a84 <SMC_HallSensor_Estimation+0x164>)
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 8010930:	ed94 0a00 	vldr	s0, [r4]
float sinth;



void SMC_HallSensor_Estimation (SMC *s)
{
 8010934:	ed2d 8b04 	vpush	{d8-d9}


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010938:	ee07 3a90 	vmov	s15, r3

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801093c:	ee08 2a10 	vmov	s16, r2
 8010940:	eddf 8a51 	vldr	s17, [pc, #324]	; 8010a88 <SMC_HallSensor_Estimation+0x168>
 8010944:	4a51      	ldr	r2, [pc, #324]	; (8010a8c <SMC_HallSensor_Estimation+0x16c>)
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010946:	4b52      	ldr	r3, [pc, #328]	; (8010a90 <SMC_HallSensor_Estimation+0x170>)

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010948:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801094c:	eef8 7a67 	vcvt.f32.u32	s15, s15

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010950:	ee38 8a68 	vsub.f32	s16, s16, s17
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010954:	ee77 7ae8 	vsub.f32	s15, s15, s17

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010958:	ee88 8a07 	vdiv.f32	s16, s16, s14
float sinth;



void SMC_HallSensor_Estimation (SMC *s)
{
 801095c:	4605      	mov	r5, r0


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801095e:	eec7 8a87 	vdiv.f32	s17, s15, s14

void SMC_HallSensor_Estimation (SMC *s)
{


	HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010962:	ed82 8a00 	vstr	s16, [r2]
	HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010966:	edc3 8a00 	vstr	s17, [r3]
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 801096a:	f001 fc79 	bl	8012260 <cosf>
 801096e:	4b49      	ldr	r3, [pc, #292]	; (8010a94 <SMC_HallSensor_Estimation+0x174>)
 8010970:	eeb0 9a40 	vmov.f32	s18, s0
	sinth = sinf(Theta);
 8010974:	ed94 0a00 	vldr	s0, [r4]
	//HallPLLB = HallPLLB / Hall_KB;

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
 8010978:	ed83 9a00 	vstr	s18, [r3]
	sinth = sinf(Theta);
 801097c:	f001 fcb0 	bl	80122e0 <sinf>

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
 8010980:	ee28 8a09 	vmul.f32	s16, s16, s18
	Hall_CosSin = HallPLLB * sinth;
 8010984:	ee68 8a80 	vmul.f32	s17, s17, s0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 8010988:	4a43      	ldr	r2, [pc, #268]	; (8010a98 <SMC_HallSensor_Estimation+0x178>)
 801098a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8010a9c <SMC_HallSensor_Estimation+0x17c>
 801098e:	edd2 7a00 	vldr	s15, [r2]
	sinth = sinf(Theta);

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
 8010992:	ed86 8a00 	vstr	s16, [r6]
	//Digital_PI_controller(Hall_PIout, Hall_SinCos, Hall_CosSin, Hall_Err0, 10, 1, 1, Tsamp);

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
 8010996:	ee38 8a68 	vsub.f32	s16, s16, s17
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 801099a:	4b41      	ldr	r3, [pc, #260]	; (8010aa0 <SMC_HallSensor_Estimation+0x180>)

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
	Hall_CosSin = HallPLLB * sinth;
 801099c:	4841      	ldr	r0, [pc, #260]	; (8010aa4 <SMC_HallSensor_Estimation+0x184>)

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 801099e:	edd3 6a00 	vldr	s13, [r3]

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
	sinth = sinf(Theta);
 80109a2:	4941      	ldr	r1, [pc, #260]	; (8010aa8 <SMC_HallSensor_Estimation+0x188>)

	//Hall_SinCos = HallPLLA_filtered * costh;
	//Hall_CosSin = HallPLLB_filtered * sinth;
	
	Hall_SinCos = HallPLLA * costh;
	Hall_CosSin = HallPLLB * sinth;
 80109a4:	edc0 8a00 	vstr	s17, [r0]

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 80109a8:	eed8 7a06 	vfnms.f32	s15, s16, s12
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
 80109ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 80109b0:	ee77 7aa6 	vadd.f32	s15, s15, s13

 	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	//Low_pass_filter(HallPLLA_filtered, HallPLLA, HallPLLA_old, alpha);
	
	costh = cosf(Theta);
	sinth = sinf(Theta);
 80109b4:	ed81 0a00 	vstr	s0, [r1]

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * Tsamp);
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
 80109b8:	edc3 7a00 	vstr	s15, [r3]
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
 80109bc:	edd3 7a00 	vldr	s15, [r3]
 80109c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c8:	dc0a      	bgt.n	80109e0 <SMC_HallSensor_Estimation+0xc0>
 80109ca:	edd3 7a00 	vldr	s15, [r3]
 80109ce:	eeba 7a04 	vmov.f32	s14, #164	; 0xa4
 80109d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109da:	bf58      	it	pl
 80109dc:	ed93 7a00 	vldrpl	s14, [r3]
 80109e0:	ed83 7a00 	vstr	s14, [r3]
	Hall_Err0= err;									
 80109e4:	ed82 8a00 	vstr	s16, [r2]
	
	Theta += Hall_PIout ;
 80109e8:	edd3 7a00 	vldr	s15, [r3]
 80109ec:	edd4 6a00 	vldr	s13, [r4]
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
 80109f0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8010aac <SMC_HallSensor_Estimation+0x18c>
	err = Hall_SinCos - Hall_CosSin; 											
	Hall_PIout += ((tmp_kpi * err) - (tmp_kp * Hall_Err0)); 					
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
	Hall_Err0= err;									
	
	Theta += Hall_PIout ;
 80109f4:	4a22      	ldr	r2, [pc, #136]	; (8010a80 <SMC_HallSensor_Estimation+0x160>)
 80109f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109fa:	edc4 7a00 	vstr	s15, [r4]
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
 80109fe:	edd4 7a00 	vldr	s15, [r4]
 8010a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a0a:	edd2 7a00 	vldr	s15, [r2]
 8010a0e:	dd1e      	ble.n	8010a4e <SMC_HallSensor_Estimation+0x12e>
 8010a10:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010a14:	ed82 7a00 	vstr	s14, [r2]
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;
 8010a18:	ed94 7a00 	vldr	s14, [r4]
 8010a1c:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010ab0 <SMC_HallSensor_Estimation+0x190>

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010a20:	eddf 6a22 	vldr	s13, [pc, #136]	; 8010aac <SMC_HallSensor_Estimation+0x18c>
	
	Theta += Hall_PIout ;
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;
 8010a24:	ee77 7a27 	vadd.f32	s15, s14, s15

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010a28:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a30:	dc19      	bgt.n	8010a66 <SMC_HallSensor_Estimation+0x146>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010a32:	ecbd 8b04 	vpop	{d8-d9}
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 8010a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3e:	bf48      	it	mi
 8010a40:	ee77 7aa6 	vaddmi.f32	s15, s15, s13

	s->Omega = Hall_PIout;
 8010a44:	681b      	ldr	r3, [r3, #0]
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 8010a46:	edc5 7a16 	vstr	s15, [r5, #88]	; 0x58

	s->Omega = Hall_PIout;
 8010a4a:	65eb      	str	r3, [r5, #92]	; 0x5c

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010a4c:	bd70      	pop	{r4, r5, r6, pc}
	Hall_PIout = Bound_limit(Hall_PIout, 10.0f);						
	Hall_Err0= err;									
	
	Theta += Hall_PIout ;
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;
 8010a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a56:	d5df      	bpl.n	8010a18 <SMC_HallSensor_Estimation+0xf8>
 8010a58:	edd2 7a00 	vldr	s15, [r2]
 8010a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a60:	ed82 7a00 	vstr	s14, [r2]
 8010a64:	e7d8      	b.n	8010a18 <SMC_HallSensor_Estimation+0xf8>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010a66:	ecbd 8b04 	vpop	{d8-d9}
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010a6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->Omega = Hall_PIout;
 8010a6e:	681b      	ldr	r3, [r3, #0]
	if((2.0f * PI) < Theta) Theta = Theta - (2.0f * PI);
	else if(Theta < 0.0f) Theta = (2.0f * PI) + Theta;

	s->Theta= Theta + 0.3f;

	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8010a70:	edc5 7a16 	vstr	s15, [r5, #88]	; 0x58
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->Omega = Hall_PIout;
 8010a74:	65eb      	str	r3, [r5, #92]	; 0x5c

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	20001ec4 	.word	0x20001ec4
 8010a7c:	457ff000 	.word	0x457ff000
 8010a80:	20002944 	.word	0x20002944
 8010a84:	20002908 	.word	0x20002908
 8010a88:	449b2000 	.word	0x449b2000
 8010a8c:	20002a24 	.word	0x20002a24
 8010a90:	20002a28 	.word	0x20002a28
 8010a94:	200029ec 	.word	0x200029ec
 8010a98:	20002904 	.word	0x20002904
 8010a9c:	3f80020c 	.word	0x3f80020c
 8010aa0:	20002a1c 	.word	0x20002a1c
 8010aa4:	200028fc 	.word	0x200028fc
 8010aa8:	20002930 	.word	0x20002930
 8010aac:	40c90fdb 	.word	0x40c90fdb
 8010ab0:	3e99999a 	.word	0x3e99999a
 8010ab4:	f3af 8000 	nop.w
 8010ab8:	f3af 8000 	nop.w
 8010abc:	f3af 8000 	nop.w

08010ac0 <mcpwm_adc_inj_int_handler>:
{
    return(ITM_SendChar(ch));
}

void mcpwm_adc_inj_int_handler(void) 
{
 8010ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TIM12->CNT = 0;
 8010ac4:	4b41      	ldr	r3, [pc, #260]	; (8010bcc <mcpwm_adc_inj_int_handler+0x10c>)

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8010ac6:	4842      	ldr	r0, [pc, #264]	; (8010bd0 <mcpwm_adc_inj_int_handler+0x110>)
		debug_print_usb( " Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test 12345 \r\n");
	}
	*/
	//debug_print_usb( "iT ");
	
	SMC_HallSensor_Estimation (&smc1);
 8010ac8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8010bfc <mcpwm_adc_inj_int_handler+0x13c>

	//spi_dac_write_A( dacDataA++);
	//spi_dac_write_B( dacDataB--);

	
	if( uGF.bit.RunMotor )
 8010acc:	4e41      	ldr	r6, [pc, #260]	; (8010bd4 <mcpwm_adc_inj_int_handler+0x114>)
    return(ITM_SendChar(ch));
}

void mcpwm_adc_inj_int_handler(void) 
{
	TIM12->CNT = 0;
 8010ace:	2700      	movs	r7, #0
 8010ad0:	625f      	str	r7, [r3, #36]	; 0x24

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8010ad2:	2114      	movs	r1, #20
 8010ad4:	f000 fecc 	bl	8011870 <ADC_GetInjectedConversionValue>
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8010ad8:	2114      	movs	r1, #20

void mcpwm_adc_inj_int_handler(void) 
{
	TIM12->CNT = 0;

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
 8010ada:	4605      	mov	r5, r0
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);
 8010adc:	483e      	ldr	r0, [pc, #248]	; (8010bd8 <mcpwm_adc_inj_int_handler+0x118>)
 8010ade:	f000 fec7 	bl	8011870 <ADC_GetInjectedConversionValue>
 8010ae2:	4604      	mov	r4, r0

	curr0_sum += curr0;
 8010ae4:	483d      	ldr	r0, [pc, #244]	; (8010bdc <mcpwm_adc_inj_int_handler+0x11c>)
	curr1_sum += curr1;
 8010ae6:	493e      	ldr	r1, [pc, #248]	; (8010be0 <mcpwm_adc_inj_int_handler+0x120>)
	TIM12->CNT = 0;

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);

	curr0_sum += curr0;
 8010ae8:	6803      	ldr	r3, [r0, #0]
	curr1_sum += curr1;
	curr_start_samples++;
 8010aea:	4a3e      	ldr	r2, [pc, #248]	; (8010be4 <mcpwm_adc_inj_int_handler+0x124>)
	TIM12->CNT = 0;

	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);

	curr0_sum += curr0;
 8010aec:	442b      	add	r3, r5
 8010aee:	6003      	str	r3, [r0, #0]
	curr1_sum += curr1;
 8010af0:	680b      	ldr	r3, [r1, #0]
 8010af2:	4423      	add	r3, r4
 8010af4:	600b      	str	r3, [r1, #0]
	curr_start_samples++;
 8010af6:	6813      	ldr	r3, [r2, #0]
		debug_print_usb( " Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test 12345 \r\n");
	}
	*/
	//debug_print_usb( "iT ");
	
	SMC_HallSensor_Estimation (&smc1);
 8010af8:	4640      	mov	r0, r8
	int curr0 = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1);
	int curr1 = ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1);

	curr0_sum += curr0;
	curr1_sum += curr1;
	curr_start_samples++;
 8010afa:	3301      	adds	r3, #1
 8010afc:	6013      	str	r3, [r2, #0]
		debug_print_usb( " Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test Debug Test 12345 \r\n");
	}
	*/
	//debug_print_usb( "iT ");
	
	SMC_HallSensor_Estimation (&smc1);
 8010afe:	f7ff ff0f 	bl	8010920 <SMC_HallSensor_Estimation>

	//spi_dac_write_A( dacDataA++);
	//spi_dac_write_B( dacDataB--);

	
	if( uGF.bit.RunMotor )
 8010b02:	7833      	ldrb	r3, [r6, #0]
 8010b04:	079a      	lsls	r2, r3, #30
 8010b06:	d55b      	bpl.n	8010bc0 <mcpwm_adc_inj_int_handler+0x100>
	{
	ENABLE_GATE();
 8010b08:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8010c00 <mcpwm_adc_inj_int_handler+0x140>
		LED_RED_ON();
 8010b0c:	4b36      	ldr	r3, [pc, #216]	; (8010be8 <mcpwm_adc_inj_int_handler+0x128>)
}
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
 8010b0e:	4a37      	ldr	r2, [pc, #220]	; (8010bec <mcpwm_adc_inj_int_handler+0x12c>)

		//debug_print_usb( "%f,%d,%d\r\n",ParkParm.qAngle ,curr0,curr1);
		

		// Calculate commutation angle using estimator
		ParkParm.qAngle = smc1.Theta;
 8010b10:	f8d8 c058 	ldr.w	ip, [r8, #88]	; 0x58

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8010b14:	4936      	ldr	r1, [pc, #216]	; (8010bf0 <mcpwm_adc_inj_int_handler+0x130>)

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010b16:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8010c04 <mcpwm_adc_inj_int_handler+0x144>

	
	if( uGF.bit.RunMotor )
	{
	ENABLE_GATE();
		LED_RED_ON();
 8010b1a:	2080      	movs	r0, #128	; 0x80
	//spi_dac_write_B( dacDataB--);

	
	if( uGF.bit.RunMotor )
	{
	ENABLE_GATE();
 8010b1c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8010b20:	f8ae 9018 	strh.w	r9, [lr, #24]
		LED_RED_ON();
 8010b24:	8318      	strh	r0, [r3, #24]
}
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
 8010b26:	f8b2 e004 	ldrh.w	lr, [r2, #4]
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
 8010b2a:	8990      	ldrh	r0, [r2, #12]
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010b2c:	ed92 6a00 	vldr	s12, [r2]
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 8010b30:	edd2 6a02 	vldr	s13, [r2, #8]
		ParkParm.qAngle = smc1.Theta;

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8010b34:	880b      	ldrh	r3, [r1, #0]

		//debug_print_usb( "%f,%d,%d\r\n",ParkParm.qAngle ,curr0,curr1);
		

		// Calculate commutation angle using estimator
		ParkParm.qAngle = smc1.Theta;
 8010b36:	f8c8 c000 	str.w	ip, [r8]
}
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
 8010b3a:	fa0f fe8e 	sxth.w	lr, lr
 8010b3e:	ebce 0505 	rsb	r5, lr, r5
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
 8010b42:	b202      	sxth	r2, r0
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010b44:	ee07 5a90 	vmov	s15, r5
void MeasCompCurr( int curr1, int curr2 )
{
	 int CorrADC1, CorrADC2;

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
 8010b48:	1aa4      	subs	r4, r4, r2
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 8010b4e:	ee07 4a90 	vmov	s15, r4
 8010b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ParkParm.qAngle = smc1.Theta;

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8010b56:	3301      	adds	r3, #1
 8010b58:	b29b      	uxth	r3, r3

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010b5a:	ee26 7a07 	vmul.f32	s14, s12, s14
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 8010b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
		if (AccumThetaCnt == IRP_PERCALC)
 8010b62:	2b10      	cmp	r3, #16
		ParkParm.qAngle = smc1.Theta;

		//ParkParm.qAngle = (float)IN[2];
		//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;

		AccumThetaCnt++;
 8010b64:	bf14      	ite	ne
 8010b66:	800b      	strhne	r3, [r1, #0]
		if (AccumThetaCnt == IRP_PERCALC)
		{
			AccumThetaCnt = 0;
 8010b68:	800f      	strheq	r7, [r1, #0]

	 CorrADC1 = curr1 - MeasCurrParm.Offseta;
	 CorrADC2 = curr2 - MeasCurrParm.Offsetb;
	// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

	 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010b6a:	ed88 7a03 	vstr	s14, [r8, #12]
	 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;
 8010b6e:	edc8 7a04 	vstr	s15, [r8, #16]
			AccumThetaCnt = 0;
		}


		// Calculate qId,qIq from qSin,qCos,qIa,qIb
		ClarkePark();
 8010b72:	f7ff f9ed 	bl	800ff50 <ClarkePark>
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
	{

		if( uGF.bit.OpenLoop )
 8010b76:	7833      	ldrb	r3, [r6, #0]
 8010b78:	07db      	lsls	r3, r3, #31
 8010b7a:	d523      	bpl.n	8010bc4 <mcpwm_adc_inj_int_handler+0x104>
		//ParkParm.qAngle += 0.002f;
		//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;


		// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
		InvPark();
 8010b7c:	f7ff fdc0 	bl	8010700 <InvPark>
{
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
 8010b80:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010b84:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 8010b88:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8010bf4 <mcpwm_adc_inj_int_handler+0x134>
{
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
 8010b8c:	4b1a      	ldr	r3, [pc, #104]	; (8010bf8 <mcpwm_adc_inj_int_handler+0x138>)
 8010b8e:	eef1 7a66 	vneg.f32	s15, s13
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010b92:	eeb0 7a67 	vmov.f32	s14, s15
 8010b96:	eea5 7a86 	vfma.f32	s14, s11, s12
    SVGenParm.qVr3 = (-ParkParm.qVbeta  - SQRT3 * ParkParm.qValpha)/2;
 8010b9a:	eee5 7ac6 	vfms.f32	s15, s11, s12
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010b9e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8010ba2:	ee27 7a06 	vmul.f32	s14, s14, s12
    SVGenParm.qVr3 = (-ParkParm.qVbeta  - SQRT3 * ParkParm.qValpha)/2;
 8010ba6:	ee67 7a86 	vmul.f32	s15, s15, s12
{
     //SVGenParm.qVr1 =ParkParm.qValpha;
     //SVGenParm.qVr2 = (-ParkParm.qValpha + SQRT3 * ParkParm.qVbeta)/2;
     //SVGenParm.qVr3 = (-ParkParm.qValpha  - SQRT3 * ParkParm.qVbeta)/2;

    SVGenParm.qVr1 =ParkParm.qVbeta;
 8010baa:	edc3 6a01 	vstr	s13, [r3, #4]
    SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010bae:	ed83 7a02 	vstr	s14, [r3, #8]
    SVGenParm.qVr3 = (-ParkParm.qVbeta  - SQRT3 * ParkParm.qValpha)/2;
 8010bb2:	edc3 7a03 	vstr	s15, [r3, #12]

		// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
		CalcRefVec();

		// Calculate and set PWM duty cycles from Vr1,Vr2,Vr3
		CalcSVGen();
 8010bb6:	f7ff fe2b 	bl	8010810 <CalcSVGen>

		LED_RED_OFF();
 8010bba:	4b0b      	ldr	r3, [pc, #44]	; (8010be8 <mcpwm_adc_inj_int_handler+0x128>)
 8010bbc:	2280      	movs	r2, #128	; 0x80
 8010bbe:	835a      	strh	r2, [r3, #26]
 8010bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bc4:	f7ff fd14 	bl	80105f0 <DoControl.part.1>
 8010bc8:	e7d8      	b.n	8010b7c <mcpwm_adc_inj_int_handler+0xbc>
 8010bca:	bf00      	nop
 8010bcc:	40001800 	.word	0x40001800
 8010bd0:	40012000 	.word	0x40012000
 8010bd4:	200028f4 	.word	0x200028f4
 8010bd8:	40012100 	.word	0x40012100
 8010bdc:	20002a18 	.word	0x20002a18
 8010be0:	20001f0c 	.word	0x20001f0c
 8010be4:	200028f8 	.word	0x200028f8
 8010be8:	40020400 	.word	0x40020400
 8010bec:	20002a2c 	.word	0x20002a2c
 8010bf0:	20002940 	.word	0x20002940
 8010bf4:	3fddb3d7 	.word	0x3fddb3d7
 8010bf8:	200029f0 	.word	0x200029f0
 8010bfc:	20002948 	.word	0x20002948
 8010c00:	40020800 	.word	0x40020800
 8010c04:	200029ac 	.word	0x200029ac
 8010c08:	f3af 8000 	nop.w
 8010c0c:	f3af 8000 	nop.w

08010c10 <get_descriptor>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 8010c10:	2902      	cmp	r1, #2
 8010c12:	d006      	beq.n	8010c22 <get_descriptor+0x12>
 8010c14:	2903      	cmp	r1, #3
 8010c16:	d006      	beq.n	8010c26 <get_descriptor+0x16>
 8010c18:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 8010c1a:	4806      	ldr	r0, [pc, #24]	; (8010c34 <get_descriptor+0x24>)
 8010c1c:	bf18      	it	ne
 8010c1e:	2000      	movne	r0, #0
 8010c20:	4770      	bx	lr
	(void)lang;
	switch (dtype) {
	case USB_DESCRIPTOR_DEVICE:
		return &vcom_device_descriptor;
	case USB_DESCRIPTOR_CONFIGURATION:
		return &vcom_configuration_descriptor;
 8010c22:	4805      	ldr	r0, [pc, #20]	; (8010c38 <get_descriptor+0x28>)
 8010c24:	4770      	bx	lr
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
 8010c26:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 8010c28:	bf9a      	itte	ls
 8010c2a:	4b04      	ldrls	r3, [pc, #16]	; (8010c3c <get_descriptor+0x2c>)
 8010c2c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
	}
	return NULL;
 8010c30:	2000      	movhi	r0, #0
}
 8010c32:	4770      	bx	lr
 8010c34:	080136f0 	.word	0x080136f0
 8010c38:	08013570 	.word	0x08013570
 8010c3c:	080136c0 	.word	0x080136c0

08010c40 <usb_event>:
/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {

	switch (event) {
 8010c40:	2902      	cmp	r1, #2
 8010c42:	d115      	bne.n	8010c70 <usb_event+0x30>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4605      	mov	r5, r0
 8010c48:	460c      	mov	r4, r1
 8010c4a:	2320      	movs	r3, #32
 8010c4c:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD2_DATA_REQUEST_EP, &ep1config);
 8010c50:	2101      	movs	r1, #1
 8010c52:	4a08      	ldr	r2, [pc, #32]	; (8010c74 <usb_event+0x34>)
 8010c54:	f7fc ff4c 	bl	800daf0 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD2_INTERRUPT_REQUEST_EP, &ep2config);
 8010c58:	4628      	mov	r0, r5
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4a06      	ldr	r2, [pc, #24]	; (8010c78 <usb_event+0x38>)
 8010c5e:	f7fc ff47 	bl	800daf0 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 8010c62:	4806      	ldr	r0, [pc, #24]	; (8010c7c <usb_event+0x3c>)
 8010c64:	f7fc fe3c 	bl	800d8e0 <sduConfigureHookI>
 8010c68:	2300      	movs	r3, #0
 8010c6a:	f383 8811 	msr	BASEPRI, r3
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	08013540 	.word	0x08013540
 8010c78:	08013580 	.word	0x08013580
 8010c7c:	20002a50 	.word	0x20002a50

08010c80 <usb_uart_init>:
		USBD2_INTERRUPT_REQUEST_EP
};


void usb_uart_init(void)
{
 8010c80:	b538      	push	{r3, r4, r5, lr}
	sduObjectInit(&SDU1);
 8010c82:	4d0e      	ldr	r5, [pc, #56]	; (8010cbc <usb_uart_init+0x3c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8010c84:	4c0e      	ldr	r4, [pc, #56]	; (8010cc0 <usb_uart_init+0x40>)
};


void usb_uart_init(void)
{
	sduObjectInit(&SDU1);
 8010c86:	4628      	mov	r0, r5
 8010c88:	f7fc fde2 	bl	800d850 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 8010c8c:	490d      	ldr	r1, [pc, #52]	; (8010cc4 <usb_uart_init+0x44>)
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f7fc fe06 	bl	800d8a0 <sduStart>
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8010c94:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010c96:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010c98:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010c9c:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 8010c9e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8010ca2:	f7fc f9fd 	bl	800d0a0 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	4907      	ldr	r1, [pc, #28]	; (8010cc8 <usb_uart_init+0x48>)
 8010caa:	f7fc ff09 	bl	800dac0 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 8010cae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010cb0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cb6:	6393      	str	r3, [r2, #56]	; 0x38
 8010cb8:	bd38      	pop	{r3, r4, r5, pc}
 8010cba:	bf00      	nop
 8010cbc:	20002a50 	.word	0x20002a50
 8010cc0:	20000fb0 	.word	0x20000fb0
 8010cc4:	080136e0 	.word	0x080136e0
 8010cc8:	080135b0 	.word	0x080135b0
 8010ccc:	f3af 8000 	nop.w

08010cd0 <usb_uart_write>:

int usb_uart_write( uint8_t *p_data, uint32_t len )
{
	int ret = 0;

	ret = chSequentialStreamWrite(&SDU1, p_data, len);
 8010cd0:	4b05      	ldr	r3, [pc, #20]	; (8010ce8 <usb_uart_write+0x18>)
	return ret;
}


int usb_uart_write( uint8_t *p_data, uint32_t len )
{
 8010cd2:	b410      	push	{r4}
	int ret = 0;

	ret = chSequentialStreamWrite(&SDU1, p_data, len);
 8010cd4:	681c      	ldr	r4, [r3, #0]
 8010cd6:	6824      	ldr	r4, [r4, #0]
	return ret;
}


int usb_uart_write( uint8_t *p_data, uint32_t len )
{
 8010cd8:	460a      	mov	r2, r1
	int ret = 0;

	ret = chSequentialStreamWrite(&SDU1, p_data, len);
 8010cda:	4601      	mov	r1, r0
 8010cdc:	4618      	mov	r0, r3
 8010cde:	4623      	mov	r3, r4

	return ret;
}
 8010ce0:	f85d 4b04 	ldr.w	r4, [sp], #4

int usb_uart_write( uint8_t *p_data, uint32_t len )
{
	int ret = 0;

	ret = chSequentialStreamWrite(&SDU1, p_data, len);
 8010ce4:	4718      	bx	r3
 8010ce6:	bf00      	nop
 8010ce8:	20002a50 	.word	0x20002a50
 8010cec:	f3af 8000 	nop.w

08010cf0 <usb_uart_getch>:

	return ret;
}

uint8_t usb_uart_getch( void )
{
 8010cf0:	b500      	push	{lr}
	uint8_t buffer[128];
	int len;


	len = chSequentialStreamRead(&SDU1, (uint8_t*) buffer, 1);
 8010cf2:	4806      	ldr	r0, [pc, #24]	; (8010d0c <usb_uart_getch+0x1c>)
 8010cf4:	6803      	ldr	r3, [r0, #0]

	return ret;
}

uint8_t usb_uart_getch( void )
{
 8010cf6:	b0a1      	sub	sp, #132	; 0x84
	uint8_t buffer[128];
	int len;


	len = chSequentialStreamRead(&SDU1, (uint8_t*) buffer, 1);
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4669      	mov	r1, sp
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	4798      	blx	r3

	return buffer[0];
}
 8010d00:	f89d 0000 	ldrb.w	r0, [sp]
 8010d04:	b021      	add	sp, #132	; 0x84
 8010d06:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d0a:	bf00      	nop
 8010d0c:	20002a50 	.word	0x20002a50

08010d10 <Vector11C>:
#include "isr_vector_table.h"
#include "main.h"
#include "mcpwm.h"
#include "hw.h"

CH_IRQ_HANDLER(TIM7_IRQHandler) {
 8010d10:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8010d12:	4804      	ldr	r0, [pc, #16]	; (8010d24 <Vector11C+0x14>)
 8010d14:	2101      	movs	r1, #1
 8010d16:	f001 fa23 	bl	8012160 <TIM_ClearITPendingBit>

	CH_IRQ_EPILOGUE();
}
 8010d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(TIM7_IRQHandler) {
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);

	CH_IRQ_EPILOGUE();
 8010d1e:	f7fc bc47 	b.w	800d5b0 <_port_irq_epilogue>
 8010d22:	bf00      	nop
 8010d24:	40001400 	.word	0x40001400
 8010d28:	f3af 8000 	nop.w
 8010d2c:	f3af 8000 	nop.w

08010d30 <Vector88>:
}

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
 8010d30:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
 8010d32:	4805      	ldr	r0, [pc, #20]	; (8010d48 <Vector88+0x18>)
 8010d34:	f240 4107 	movw	r1, #1031	; 0x407
 8010d38:	f000 fdba 	bl	80118b0 <ADC_ClearITPendingBit>
	mcpwm_adc_inj_int_handler();
 8010d3c:	f7ff fec0 	bl	8010ac0 <mcpwm_adc_inj_int_handler>
	CH_IRQ_EPILOGUE();
}
 8010d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
	mcpwm_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
 8010d44:	f7fc bc34 	b.w	800d5b0 <_port_irq_epilogue>
 8010d48:	40012000 	.word	0x40012000
 8010d4c:	f3af 8000 	nop.w

08010d50 <VectorE0>:
}

CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8010d50:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8010d52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010d56:	f000 fe1b 	bl	8011990 <EXTI_GetITStatus>
 8010d5a:	b900      	cbnz	r0, 8010d5e <VectorE0+0xe>
 8010d5c:	bd08      	pop	{r3, pc}
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;
 8010d5e:	4b04      	ldr	r3, [pc, #16]	; (8010d70 <VectorE0+0x20>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	625a      	str	r2, [r3, #36]	; 0x24

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8010d64:	f44f 6000 	mov.w	r0, #2048	; 0x800
	}
}
 8010d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8010d6c:	f000 be20 	b.w	80119b0 <EXTI_ClearITPendingBit>
 8010d70:	40000800 	.word	0x40000800
 8010d74:	f3af 8000 	nop.w
 8010d78:	f3af 8000 	nop.w
 8010d7c:	f3af 8000 	nop.w

08010d80 <comm_usb_init>:
	chMtxLock(&send_mutex);
	chSequentialStreamWrite(&SDU1, buffer, len);
	chMtxUnlock(&send_mutex);
}

void comm_usb_init(void) {
 8010d80:	b508      	push	{r3, lr}
	usb_uart_init();
 8010d82:	f7ff ff7d 	bl	8010c80 <usb_uart_init>
	//packet_init(send_packet, process_packet, PACKET_HANDLER);

	chMtxObjectInit(&send_mutex);
 8010d86:	4802      	ldr	r0, [pc, #8]	; (8010d90 <comm_usb_init+0x10>)

	// Threads
	//chThdCreateStatic(serial_read_thread_wa, sizeof(serial_read_thread_wa), NORMALPRIO, serial_read_thread, NULL);
	//chThdCreateStatic(serial_process_thread_wa, sizeof(serial_process_thread_wa), NORMALPRIO, serial_process_thread, NULL);
}
 8010d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void comm_usb_init(void) {
	usb_uart_init();
	//packet_init(send_packet, process_packet, PACKET_HANDLER);

	chMtxObjectInit(&send_mutex);
 8010d8c:	f7fc ba60 	b.w	800d250 <chMtxObjectInit>
 8010d90:	20002cd0 	.word	0x20002cd0
 8010d94:	f3af 8000 	nop.w
 8010d98:	f3af 8000 	nop.w
 8010d9c:	f3af 8000 	nop.w

08010da0 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 8010da0:	4b04      	ldr	r3, [pc, #16]	; (8010db4 <utils_sys_lock_cnt+0x14>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	b912      	cbnz	r2, 8010dac <utils_sys_lock_cnt+0xc>
 8010da6:	2220      	movs	r2, #32
 8010da8:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	3201      	adds	r2, #1
 8010db0:	601a      	str	r2, [r3, #0]
 8010db2:	4770      	bx	lr
 8010db4:	20002ce0 	.word	0x20002ce0
 8010db8:	f3af 8000 	nop.w
 8010dbc:	f3af 8000 	nop.w

08010dc0 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 8010dc0:	4b05      	ldr	r3, [pc, #20]	; (8010dd8 <utils_sys_unlock_cnt+0x18>)
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	b132      	cbz	r2, 8010dd4 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 8010dc6:	681a      	ldr	r2, [r3, #0]
 8010dc8:	3a01      	subs	r2, #1
 8010dca:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	b90b      	cbnz	r3, 8010dd4 <utils_sys_unlock_cnt+0x14>
 8010dd0:	f383 8811 	msr	BASEPRI, r3
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	20002ce0 	.word	0x20002ce0
 8010ddc:	f3af 8000 	nop.w

08010de0 <conf_general_init>:
#define EEPROM_BASE_APPCONF		2000

// Global variables
uint16_t VirtAddVarTab[NB_OF_VAR];

void conf_general_init(void) {
 8010de0:	b508      	push	{r3, lr}
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));
 8010de2:	2100      	movs	r1, #0
 8010de4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010de8:	4810      	ldr	r0, [pc, #64]	; (8010e2c <conf_general_init+0x4c>)
 8010dea:	f002 f979 	bl	80130e0 <memset>
 8010dee:	4a10      	ldr	r2, [pc, #64]	; (8010e30 <conf_general_init+0x50>)
 8010df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010df4:	f102 018c 	add.w	r1, r2, #140	; 0x8c

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
 8010df8:	f822 3f02 	strh.w	r3, [r2, #2]!
 8010dfc:	3301      	adds	r3, #1
void conf_general_init(void) {
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8010dfe:	428a      	cmp	r2, r1
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	d1f9      	bne.n	8010df8 <conf_general_init+0x18>
 8010e04:	4a0b      	ldr	r2, [pc, #44]	; (8010e34 <conf_general_init+0x54>)
 8010e06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010e0a:	f102 018c 	add.w	r1, r2, #140	; 0x8c
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
 8010e0e:	f822 3f02 	strh.w	r3, [r2, #2]!
 8010e12:	3301      	adds	r3, #1
	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8010e14:	428a      	cmp	r2, r1
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	d1f9      	bne.n	8010e0e <conf_general_init+0x2e>
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
	}

	FLASH_Unlock();
 8010e1a:	f000 fdd1 	bl	80119c0 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 8010e1e:	20f2      	movs	r0, #242	; 0xf2
 8010e20:	f000 fdde 	bl	80119e0 <FLASH_ClearFlag>
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
	EE_Init();
}
 8010e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
	EE_Init();
 8010e28:	f000 ba1a 	b.w	8011260 <EE_Init>
 8010e2c:	20002ce4 	.word	0x20002ce4
 8010e30:	20002ce2 	.word	0x20002ce2
 8010e34:	20002d6e 	.word	0x20002d6e
 8010e38:	f3af 8000 	nop.w
 8010e3c:	f3af 8000 	nop.w

08010e40 <conf_general_read_app_configuration>:
 * Read app_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a app_configuration struct to write the read configuration to.
 */
void conf_general_read_app_configuration(app_configuration *conf) {
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	4605      	mov	r5, r0
 8010e46:	b083      	sub	sp, #12
 8010e48:	4606      	mov	r6, r0
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8010e4a:	2400      	movs	r4, #0
 8010e4c:	e00a      	b.n	8010e64 <conf_general_read_app_configuration+0x24>
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8010e4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010e52:	0a1a      	lsrs	r2, r3, #8
 8010e54:	f805 2014 	strb.w	r2, [r5, r4, lsl #1]
void conf_general_read_app_configuration(app_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8010e58:	3401      	adds	r4, #1
 8010e5a:	2c46      	cmp	r4, #70	; 0x46
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
			conf_addr[2 * i + 1] = var & 0xFF;
 8010e5c:	7073      	strb	r3, [r6, #1]
 8010e5e:	f106 0602 	add.w	r6, r6, #2
void conf_general_read_app_configuration(app_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 8010e62:	d06b      	beq.n	8010f3c <conf_general_read_app_configuration+0xfc>
 8010e64:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
 8010e68:	b280      	uxth	r0, r0
 8010e6a:	f10d 0106 	add.w	r1, sp, #6
 8010e6e:	f000 f9bf 	bl	80111f0 <EE_ReadVariable>
 8010e72:	2800      	cmp	r0, #0
 8010e74:	d0eb      	beq.n	8010e4e <conf_general_read_app_configuration+0xe>
		}
	}

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
 8010e76:	2100      	movs	r1, #0
 8010e78:	228c      	movs	r2, #140	; 0x8c
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	f002 f930 	bl	80130e0 <memset>
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
 8010e80:	4f30      	ldr	r7, [pc, #192]	; (8010f44 <conf_general_read_app_configuration+0x104>)
		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
 8010e82:	4b31      	ldr	r3, [pc, #196]	; (8010f48 <conf_general_read_app_configuration+0x108>)
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
 8010e84:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8010f58 <conf_general_read_app_configuration+0x118>
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
 8010e88:	4c30      	ldr	r4, [pc, #192]	; (8010f4c <conf_general_read_app_configuration+0x10c>)
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
 8010e8a:	4831      	ldr	r0, [pc, #196]	; (8010f50 <conf_general_read_app_configuration+0x110>)
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
		conf->app_ppm_conf.multi_esc = false;
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;
 8010e8c:	4931      	ldr	r1, [pc, #196]	; (8010f54 <conf_general_read_app_configuration+0x114>)
		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
 8010e8e:	61eb      	str	r3, [r5, #28]
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
		conf->timeout_brake_current = 0.0;
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;
 8010e90:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
	}

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
 8010e94:	2300      	movs	r3, #0
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
 8010e96:	2201      	movs	r2, #1
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
 8010e98:	636f      	str	r7, [r5, #52]	; 0x34
		conf->app_adc_conf.use_filter = true;
		conf->app_adc_conf.safe_start = true;
		conf->app_adc_conf.button_inverted = false;
		conf->app_adc_conf.voltage_inverted = false;
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
 8010e9a:	65af      	str	r7, [r5, #88]	; 0x58
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
 8010e9c:	f8c5 c048 	str.w	ip, [r5, #72]	; 0x48
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
		conf->timeout_brake_current = 0.0;
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;
 8010ea0:	612e      	str	r6, [r5, #16]
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;
 8010ea2:	666e      	str	r6, [r5, #100]	; 0x64
		conf->app_uart_baudrate = 115200;

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
 8010ea4:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8010f5c <conf_general_read_app_configuration+0x11c>
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
 8010ea8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8010f60 <conf_general_read_app_configuration+0x120>
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
 8010eac:	622c      	str	r4, [r5, #32]

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
 8010eae:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;

		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;
 8010eb2:	f04f 0903 	mov.w	r9, #3

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
 8010eb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
		conf->app_ppm_conf.pulse_end = 2.0;
 8010eba:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;

		conf->app_uart_baudrate = 115200;
 8010ebe:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
		conf->app_chuk_conf.ramp_time_pos = 0.5;
 8010ec2:	f04f 577c 	mov.w	r7, #1056964608	; 0x3f000000
		conf->app_chuk_conf.ramp_time_neg = 0.25;
 8010ec6:	f04f 567a 	mov.w	r6, #1048576000	; 0x3e800000
		conf->app_ppm_conf.multi_esc = false;
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
 8010eca:	646c      	str	r4, [r5, #68]	; 0x44
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
 8010ecc:	6328      	str	r0, [r5, #48]	; 0x30
		conf->app_adc_conf.voltage_end = 3.0;
		conf->app_adc_conf.use_filter = true;
		conf->app_adc_conf.safe_start = true;
		conf->app_adc_conf.button_inverted = false;
		conf->app_adc_conf.voltage_inverted = false;
		conf->app_adc_conf.rpm_lim_start = 150000;
 8010ece:	6568      	str	r0, [r5, #84]	; 0x54
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
		conf->app_ppm_conf.multi_esc = false;
		conf->app_ppm_conf.tc = false;
		conf->app_ppm_conf.tc_max_diff = 3000.0;
 8010ed0:	63e9      	str	r1, [r5, #60]	; 0x3c
		conf->app_adc_conf.voltage_inverted = false;
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
 8010ed2:	6629      	str	r1, [r5, #96]	; 0x60
	}

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
 8010ed4:	702b      	strb	r3, [r5, #0]
		conf->timeout_msec = 1000;
		conf->timeout_brake_current = 0.0;
		conf->send_can_status = false;
 8010ed6:	732b      	strb	r3, [r5, #12]

		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
 8010ed8:	762b      	strb	r3, [r5, #24]
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
		conf->app_ppm_conf.pulse_end = 2.0;
		conf->app_ppm_conf.median_filter = false;
 8010eda:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
		conf->app_ppm_conf.safe_start = true;
		conf->app_ppm_conf.rpm_lim_start = 150000.0;
		conf->app_ppm_conf.rpm_lim_end = 200000.0;
		conf->app_ppm_conf.multi_esc = false;
 8010ede:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		conf->app_ppm_conf.tc = false;
 8010ee2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
 8010ee6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
		conf->app_adc_conf.use_filter = true;
		conf->app_adc_conf.safe_start = true;
		conf->app_adc_conf.button_inverted = false;
 8010eea:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
		conf->app_adc_conf.voltage_inverted = false;
 8010eee:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
		conf->app_adc_conf.rpm_lim_start = 150000;
		conf->app_adc_conf.rpm_lim_end = 200000;
		conf->app_adc_conf.multi_esc = false;
 8010ef2:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
		conf->app_adc_conf.tc = false;
 8010ef6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

	// Set the default configuration
	if (!is_ok) {
		memset(conf, 0, sizeof(app_configuration));
		conf->controller_id = 0;
		conf->timeout_msec = 1000;
 8010efa:	f8c5 b004 	str.w	fp, [r5, #4]
		conf->send_can_status = false;
		conf->send_can_status_rate_hz = 500;

		// The default app is UART in case the UART port is used for
		// firmware updates.
		conf->app_to_use = APP_UART;
 8010efe:	f885 9014 	strb.w	r9, [r5, #20]

		conf->app_ppm_conf.ctrl_type = PPM_CTRL_TYPE_NONE;
		conf->app_ppm_conf.pid_max_erpm = 15000;
		conf->app_ppm_conf.hyst = 0.15;
		conf->app_ppm_conf.pulse_start = 1.0;
 8010f02:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
		conf->app_ppm_conf.pulse_end = 2.0;
 8010f06:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
		conf->app_ppm_conf.median_filter = false;
		conf->app_ppm_conf.safe_start = true;
 8010f0a:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
		conf->app_adc_conf.use_filter = true;
 8010f0e:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
		conf->app_adc_conf.safe_start = true;
 8010f12:	f885 2051 	strb.w	r2, [r5, #81]	; 0x51
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;

		conf->app_uart_baudrate = 115200;

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
 8010f16:	f885 206c 	strb.w	r2, [r5, #108]	; 0x6c
		conf->app_ppm_conf.tc_max_diff = 3000.0;

		conf->app_adc_conf.ctrl_type = ADC_CTRL_TYPE_NONE;
		conf->app_adc_conf.hyst = 0.15;
		conf->app_adc_conf.voltage_start = 0.9;
		conf->app_adc_conf.voltage_end = 3.0;
 8010f1a:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
		conf->app_adc_conf.multi_esc = false;
		conf->app_adc_conf.tc = false;
		conf->app_adc_conf.tc_max_diff = 3000.0;
		conf->app_adc_conf.update_rate_hz = 500;

		conf->app_uart_baudrate = 115200;
 8010f1e:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
 8010f22:	672c      	str	r4, [r5, #112]	; 0x70
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
 8010f24:	6768      	str	r0, [r5, #116]	; 0x74
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
		conf->app_chuk_conf.ramp_time_pos = 0.5;
		conf->app_chuk_conf.ramp_time_neg = 0.25;
		conf->app_chuk_conf.multi_esc = true;
 8010f26:	f885 2084 	strb.w	r2, [r5, #132]	; 0x84
		conf->app_chuk_conf.tc = false;
 8010f2a:	f885 3085 	strb.w	r3, [r5, #133]	; 0x85
		conf->app_chuk_conf.tc_max_diff = 3000.0;
 8010f2e:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
		conf->app_uart_baudrate = 115200;

		conf->app_chuk_conf.ctrl_type = CHUK_CTRL_TYPE_CURRENT;
		conf->app_chuk_conf.hyst = 0.15;
		conf->app_chuk_conf.rpm_lim_start = 150000.0;
		conf->app_chuk_conf.rpm_lim_end = 250000.0;
 8010f32:	f8c5 e078 	str.w	lr, [r5, #120]	; 0x78
		conf->app_chuk_conf.ramp_time_pos = 0.5;
 8010f36:	67ef      	str	r7, [r5, #124]	; 0x7c
		conf->app_chuk_conf.ramp_time_neg = 0.25;
 8010f38:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		conf->app_chuk_conf.multi_esc = true;
		conf->app_chuk_conf.tc = false;
		conf->app_chuk_conf.tc_max_diff = 3000.0;
	}
}
 8010f3c:	b003      	add	sp, #12
 8010f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f42:	bf00      	nop
 8010f44:	48435000 	.word	0x48435000
 8010f48:	466a6000 	.word	0x466a6000
 8010f4c:	3e19999a 	.word	0x3e19999a
 8010f50:	48127c00 	.word	0x48127c00
 8010f54:	453b8000 	.word	0x453b8000
 8010f58:	3f666666 	.word	0x3f666666
 8010f5c:	48742400 	.word	0x48742400
 8010f60:	40400000 	.word	0x40400000
 8010f64:	f3af 8000 	nop.w
 8010f68:	f3af 8000 	nop.w
 8010f6c:	f3af 8000 	nop.w

08010f70 <conf_general_read_mc_configuration>:
 * Read mc_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a mc_configuration struct to write the read configuration to.
 */
void conf_general_read_mc_configuration(mc_configuration *conf) {
 8010f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f74:	4605      	mov	r5, r0
 8010f76:	b083      	sub	sp, #12
 8010f78:	4606      	mov	r6, r0
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8010f7a:	2400      	movs	r4, #0
 8010f7c:	e00b      	b.n	8010f96 <conf_general_read_mc_configuration+0x26>
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8010f7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010f82:	0a1a      	lsrs	r2, r3, #8
 8010f84:	f805 2014 	strb.w	r2, [r5, r4, lsl #1]
void conf_general_read_mc_configuration(mc_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8010f88:	3401      	adds	r4, #1
 8010f8a:	2c58      	cmp	r4, #88	; 0x58
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
			conf_addr[2 * i + 1] = var & 0xFF;
 8010f8c:	7073      	strb	r3, [r6, #1]
 8010f8e:	f106 0602 	add.w	r6, r6, #2
void conf_general_read_mc_configuration(mc_configuration *conf) {
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mc_configuration) / 2);i++) {
 8010f92:	f000 8088 	beq.w	80110a6 <conf_general_read_mc_configuration+0x136>
 8010f96:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) {
 8010f9a:	b280      	uxth	r0, r0
 8010f9c:	f10d 0106 	add.w	r1, sp, #6
 8010fa0:	f000 f926 	bl	80111f0 <EE_ReadVariable>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d0ea      	beq.n	8010f7e <conf_general_read_mc_configuration+0xe>
	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
 8010fa8:	4b40      	ldr	r3, [pc, #256]	; (80110ac <conf_general_read_mc_configuration+0x13c>)
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
 8010faa:	4a41      	ldr	r2, [pc, #260]	; (80110b0 <conf_general_read_mc_configuration+0x140>)
		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
 8010fac:	f8df e130 	ldr.w	lr, [pc, #304]	; 80110e0 <conf_general_read_mc_configuration+0x170>

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
 8010fb0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80110b4 <conf_general_read_mc_configuration+0x144>
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
 8010fb4:	4940      	ldr	r1, [pc, #256]	; (80110b8 <conf_general_read_mc_configuration+0x148>)
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
 8010fb6:	4f41      	ldr	r7, [pc, #260]	; (80110bc <conf_general_read_mc_configuration+0x14c>)

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
 8010fb8:	f8df a128 	ldr.w	sl, [pc, #296]	; 80110e4 <conf_general_read_mc_configuration+0x174>
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
 8010fbc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80110e8 <conf_general_read_mc_configuration+0x178>
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
 8010fc0:	4c3f      	ldr	r4, [pc, #252]	; (80110c0 <conf_general_read_mc_configuration+0x150>)
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
 8010fc2:	4840      	ldr	r0, [pc, #256]	; (80110c4 <conf_general_read_mc_configuration+0x154>)
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
 8010fc4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80110ec <conf_general_read_mc_configuration+0x17c>
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;
 8010fc8:	f8df c124 	ldr.w	ip, [pc, #292]	; 80110f0 <conf_general_read_mc_configuration+0x180>
	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
 8010fcc:	606b      	str	r3, [r5, #4]
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
 8010fce:	60eb      	str	r3, [r5, #12]
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;

		conf->lo_current_max = conf->l_current_max;
 8010fd0:	64eb      	str	r3, [r5, #76]	; 0x4c
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
 8010fd2:	656b      	str	r3, [r5, #84]	; 0x54
		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
 8010fd4:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80110f4 <conf_general_read_mc_configuration+0x184>
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
 8010fd8:	4b3b      	ldr	r3, [pc, #236]	; (80110c8 <conf_general_read_mc_configuration+0x158>)
		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
 8010fda:	f8c5 e018 	str.w	lr, [r5, #24]
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
 8010fde:	63aa      	str	r2, [r5, #56]	; 0x38
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
 8010fe0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80110f8 <conf_general_read_mc_configuration+0x188>
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
 8010fe4:	642a      	str	r2, [r5, #64]	; 0x40
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
 8010fe6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80110cc <conf_general_read_mc_configuration+0x15c>
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
 8010fea:	4e39      	ldr	r6, [pc, #228]	; (80110d0 <conf_general_read_mc_configuration+0x160>)
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
 8010fec:	60a9      	str	r1, [r5, #8]
			break;
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
 8010fee:	2201      	movs	r2, #1
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;

		conf->lo_current_max = conf->l_current_max;
		conf->lo_current_min = conf->l_current_min;
 8010ff0:	6529      	str	r1, [r5, #80]	; 0x50

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
 8010ff2:	f8c5 a014 	str.w	sl, [r5, #20]
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
 8010ff6:	f8c5 901c 	str.w	r9, [r5, #28]
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
 8010ffa:	622c      	str	r4, [r5, #32]
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
 8010ffc:	6268      	str	r0, [r5, #36]	; 0x24

		conf->hall_dir = MCPWM_HALL_DIR;
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
 8010ffe:	4c35      	ldr	r4, [pc, #212]	; (80110d4 <conf_general_read_mc_configuration+0x164>)
		conf->s_pid_ki = MCPWM_PID_KI;
 8011000:	4835      	ldr	r0, [pc, #212]	; (80110d8 <conf_general_read_mc_configuration+0x168>)
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
 8011002:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
 8011006:	2100      	movs	r1, #0
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
 8011008:	636f      	str	r7, [r5, #52]	; 0x34
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
 801100a:	63ef      	str	r7, [r5, #60]	; 0x3c
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
		conf->l_max_duty = MCPWM_MAX_DUTY;
 801100c:	f8c5 c048 	str.w	ip, [r5, #72]	; 0x48
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
 8011010:	666b      	str	r3, [r5, #100]	; 0x64
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
 8011012:	edc5 7a1b 	vstr	s15, [r5, #108]	; 0x6c
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
 8011016:	2300      	movs	r3, #0
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
 8011018:	4f30      	ldr	r7, [pc, #192]	; (80110dc <conf_general_read_mc_configuration+0x16c>)
		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
 801101a:	f8c5 b070 	str.w	fp, [r5, #112]	; 0x70
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
 801101e:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
			break;
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
 8011022:	702a      	strb	r2, [r5, #0]
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
		conf->l_max_vin = MCPWM_MAX_VOLTAGE;
		conf->l_slow_abs_current = MCPWM_SLOW_ABS_OVERCURRENT;
 8011024:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
 8011028:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
		conf->lo_current_max = conf->l_current_max;
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
 801102c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
		conf->sl_bemf_coupling_k = MCPWM_BEMF_INPUT_COUPLING_K;
 8011030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80110fc <conf_general_read_mc_configuration+0x18c>
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;
 8011034:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011100 <conf_general_read_mc_configuration+0x190>
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
 8011038:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8011104 <conf_general_read_mc_configuration+0x194>
		conf->cc_ramp_step_max = 0.04;
 801103c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8011108 <conf_general_read_mc_configuration+0x198>
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
 8011040:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 801110c <conf_general_read_mc_configuration+0x19c>
		conf->l_rpm_lim_neg_torque = MCPWM_RPM_LIMIT_NEG_TORQUE;
		conf->l_temp_fet_start = MCPWM_LIM_TEMP_FET_START;
		conf->l_temp_fet_end = MCPWM_LIM_TEMP_FET_END;
		conf->l_temp_motor_start = MCPWM_LIM_TEMP_MOTOR_START;
		conf->l_temp_motor_end = MCPWM_LIM_TEMP_MOTOR_END;
		conf->l_min_duty = MCPWM_MIN_DUTY;
 8011044:	646e      	str	r6, [r5, #68]	; 0x44
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
 8011046:	eef2 7a00 	vmov.f32	s15, #32
		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
 801104a:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
		conf->cc_ramp_step_max = 0.04;

		conf->m_fault_stop_time_ms = MCPWM_FAULT_STOP_TIME;
 801104e:	f640 32b8 	movw	r2, #3000	; 0xbb8
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
 8011052:	ed85 7a18 	vstr	s14, [r5, #96]	; 0x60
		}
	}

	if (!is_ok) {
		conf->pwm_mode = MCPWM_PWM_MODE;
		conf->comm_mode = MCPWM_COMM_MODE;
 8011056:	706b      	strb	r3, [r5, #1]
		conf->motor_type = MC_DEFAULT_MOTOR_TYPE;
 8011058:	70ab      	strb	r3, [r5, #2]

		conf->l_current_max = MCPWM_CURRENT_MAX;
		conf->l_current_min = MCPWM_CURRENT_MIN;
		conf->l_in_current_max = MCPWM_IN_CURRENT_MAX;
		conf->l_in_current_min = MCPWM_IN_CURRENT_MIN;
 801105a:	612f      	str	r7, [r5, #16]
		conf->l_max_duty = MCPWM_MAX_DUTY;

		conf->lo_current_max = conf->l_current_max;
		conf->lo_current_min = conf->l_current_min;
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;
 801105c:	65af      	str	r7, [r5, #88]	; 0x58
		conf->l_abs_current_max = MCPWM_MAX_ABS_CURRENT;
		conf->l_min_erpm = MCPWM_RPM_MIN;
		conf->l_max_erpm = MCPWM_RPM_MAX;
		conf->l_max_erpm_fbrake = MCPWM_CURR_MAX_RPM_FBRAKE;
		conf->l_max_erpm_fbrake_cc = MCPWM_CURR_MAX_RPM_FBRAKE_CC;
		conf->l_min_vin = MCPWM_MIN_VOLTAGE;
 801105e:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
		conf->lo_in_current_max = conf->l_in_current_max;
		conf->lo_in_current_min = conf->l_in_current_min;

		conf->sl_is_sensorless = MCPWM_IS_SENSORLESS;
		conf->sl_min_erpm = MCPWM_MIN_RPM;
		conf->sl_max_fullbreak_current_dir_change = MCPWM_MAX_FB_CURR_DIR_CHANGE;
 8011062:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
		conf->sl_min_erpm_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT_MIN_RPM;
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
		conf->sl_bemf_coupling_k = MCPWM_BEMF_INPUT_COUPLING_K;
 8011066:	f8c5 a078 	str.w	sl, [r5, #120]	; 0x78

		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
 801106a:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
		conf->sl_cycle_int_limit = MCPWM_CYCLE_INT_LIMIT;
		conf->sl_phase_advance_at_br = MCPWM_CYCLE_INT_LIMIT_HIGH_FAC;
		conf->sl_cycle_int_rpm_br = MCPWM_CYCLE_INT_START_RPM_BR;
		conf->sl_bemf_coupling_k = MCPWM_BEMF_INPUT_COUPLING_K;

		conf->hall_dir = MCPWM_HALL_DIR;
 801106e:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
 8011072:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;
 8011076:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e

		conf->s_pid_kp = MCPWM_PID_KP;
 801107a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;

		conf->p_pid_kp = MCPWM_P_PID_KP;
 801107e:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
		conf->hall_dir = MCPWM_HALL_DIR;
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
 8011082:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;

		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
 8011086:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
		conf->hall_fwd_add = MCPWM_HALL_FWD_ADD;
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
 801108a:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;

		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;
 801108e:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
		conf->hall_rev_add = MCPWM_HALL_REV_ADD;

		conf->s_pid_kp = MCPWM_PID_KP;
		conf->s_pid_ki = MCPWM_PID_KI;
		conf->s_pid_kd = MCPWM_PID_KD;
		conf->s_pid_min_rpm = MCPWM_PID_MIN_RPM;
 8011092:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
 8011096:	f8c5 80a4 	str.w	r8, [r5, #164]	; 0xa4
		conf->cc_ramp_step_max = 0.04;
 801109a:	f8c5 c0a8 	str.w	ip, [r5, #168]	; 0xa8
		conf->p_pid_kp = MCPWM_P_PID_KP;
		conf->p_pid_ki = MCPWM_P_PID_KI;
		conf->p_pid_kd = MCPWM_P_PID_KD;

		conf->cc_startup_boost_duty = MCPWM_CURRENT_STARTUP_BOOST;
		conf->cc_min_current = MCPWM_CURRENT_CONTROL_MIN;
 801109e:	f8c5 e0a0 	str.w	lr, [r5, #160]	; 0xa0
		conf->cc_gain = MCPWM_CURRENT_CONTROL_GAIN;
		conf->cc_ramp_step_max = 0.04;

		conf->m_fault_stop_time_ms = MCPWM_FAULT_STOP_TIME;
 80110a2:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
	}
}
 80110a6:	b003      	add	sp, #12
 80110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ac:	42700000 	.word	0x42700000
 80110b0:	42c80000 	.word	0x42c80000
 80110b4:	42780000 	.word	0x42780000
 80110b8:	c2700000 	.word	0xc2700000
 80110bc:	42a00000 	.word	0x42a00000
 80110c0:	43960000 	.word	0x43960000
 80110c4:	44bb8000 	.word	0x44bb8000
 80110c8:	44898000 	.word	0x44898000
 80110cc:	43160000 	.word	0x43160000
 80110d0:	3c23d70a 	.word	0x3c23d70a
 80110d4:	38d1b717 	.word	0x38d1b717
 80110d8:	3b03126f 	.word	0x3b03126f
 80110dc:	c1a00000 	.word	0xc1a00000
 80110e0:	c7c35000 	.word	0xc7c35000
 80110e4:	43020000 	.word	0x43020000
 80110e8:	47c35000 	.word	0x47c35000
 80110ec:	42480000 	.word	0x42480000
 80110f0:	3f733333 	.word	0x3f733333
 80110f4:	3f4ccccd 	.word	0x3f4ccccd
 80110f8:	479c4000 	.word	0x479c4000
 80110fc:	44160000 	.word	0x44160000
 8011100:	44610000 	.word	0x44610000
 8011104:	3b96bb99 	.word	0x3b96bb99
 8011108:	3d23d70a 	.word	0x3d23d70a
 801110c:	41200000 	.word	0x41200000

08011110 <EE_VerifyPageFullWriteVariable>:
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8011110:	b538      	push	{r3, r4, r5, lr}

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011112:	4a1b      	ldr	r2, [pc, #108]	; (8011180 <EE_VerifyPageFullWriteVariable+0x70>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011114:	4b1b      	ldr	r3, [pc, #108]	; (8011184 <EE_VerifyPageFullWriteVariable+0x74>)
 8011116:	881b      	ldrh	r3, [r3, #0]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011118:	8812      	ldrh	r2, [r2, #0]
 801111a:	b292      	uxth	r2, r2
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801111c:	b29b      	uxth	r3, r3

	/* Write or read operation */
	switch (Operation)
	{
	case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
		if (PageStatus1 == VALID_PAGE)
 801111e:	b9ea      	cbnz	r2, 801115c <EE_VerifyPageFullWriteVariable+0x4c>
		{
			/* Page0 receiving data */
			if (PageStatus0 == RECEIVE_DATA)
 8011120:	f64e 62ee 	movw	r2, #61166	; 0xeeee
		else if (PageStatus0 == VALID_PAGE)
		{
			/* Page1 receiving data */
			if (PageStatus1 == RECEIVE_DATA)
			{
				return PAGE1;         /* Page1 valid */
 8011124:	1a9b      	subs	r3, r3, r2
 8011126:	bf18      	it	ne
 8011128:	2301      	movne	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801112a:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801112e:	4a16      	ldr	r2, [pc, #88]	; (8011188 <EE_VerifyPageFullWriteVariable+0x78>)
 8011130:	3301      	adds	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011132:	3401      	adds	r4, #1

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8011134:	039b      	lsls	r3, r3, #14
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011136:	03a4      	lsls	r4, r4, #14

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8011138:	441a      	add	r2, r3

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 801113a:	4294      	cmp	r4, r2
 801113c:	d303      	bcc.n	8011146 <EE_VerifyPageFullWriteVariable+0x36>
 801113e:	e010      	b.n	8011162 <EE_VerifyPageFullWriteVariable+0x52>
			return FlashStatus;
		}
		else
		{
			/* Next address location */
			Address = Address + 4;
 8011140:	3404      	adds	r4, #4

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 8011142:	42a2      	cmp	r2, r4
 8011144:	d90d      	bls.n	8011162 <EE_VerifyPageFullWriteVariable+0x52>
	{
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	3301      	adds	r3, #1
 801114a:	d1f9      	bne.n	8011140 <EE_VerifyPageFullWriteVariable+0x30>
 801114c:	4605      	mov	r5, r0
		{
			/* Set variable data */
			FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 801114e:	4620      	mov	r0, r4
 8011150:	f000 fcc6 	bl	8011ae0 <FLASH_ProgramHalfWord>
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 8011154:	2809      	cmp	r0, #9
 8011156:	d00d      	beq.n	8011174 <EE_VerifyPageFullWriteVariable+0x64>
				return FlashStatus;
			}
			/* Set variable virtual address */
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
			/* Return program operation status */
			return FlashStatus;
 8011158:	b280      	uxth	r0, r0
 801115a:	bd38      	pop	{r3, r4, r5, pc}
			else
			{
				return PAGE1;         /* Page1 valid */
			}
		}
		else if (PageStatus0 == VALID_PAGE)
 801115c:	b11b      	cbz	r3, 8011166 <EE_VerifyPageFullWriteVariable+0x56>
	ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE)
	{
		return  NO_VALID_PAGE;
 801115e:	20ab      	movs	r0, #171	; 0xab
 8011160:	bd38      	pop	{r3, r4, r5, pc}
			Address = Address + 4;
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8011162:	2080      	movs	r0, #128	; 0x80
 8011164:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else if (PageStatus0 == VALID_PAGE)
		{
			/* Page1 receiving data */
			if (PageStatus1 == RECEIVE_DATA)
 8011166:	f64e 63ee 	movw	r3, #61166	; 0xeeee
			{
				return PAGE1;         /* Page1 valid */
 801116a:	1ad3      	subs	r3, r2, r3
 801116c:	fab3 f383 	clz	r3, r3
 8011170:	095b      	lsrs	r3, r3, #5
 8011172:	e7da      	b.n	801112a <EE_VerifyPageFullWriteVariable+0x1a>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
			/* Set variable virtual address */
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8011174:	1ca0      	adds	r0, r4, #2
 8011176:	4629      	mov	r1, r5
 8011178:	f000 fcb2 	bl	8011ae0 <FLASH_ProgramHalfWord>
 801117c:	e7ec      	b.n	8011158 <EE_VerifyPageFullWriteVariable+0x48>
 801117e:	bf00      	nop
 8011180:	08008000 	.word	0x08008000
 8011184:	08004000 	.word	0x08004000
 8011188:	08003ffe 	.word	0x08003ffe
 801118c:	f3af 8000 	nop.w

08011190 <EE_EraseSectorIfNotEmpty.constprop.1>:

/*
 * Erase flash page if it is not already erased. This is to save write cycles and
 * prevent the memory from getting erased in case of unstable voltage at boot.
 */
static uint16_t EE_EraseSectorIfNotEmpty(uint32_t FLASH_Sector, uint8_t VoltageRange) {
 8011190:	b510      	push	{r4, lr}
 8011192:	4604      	mov	r4, r0
	uint8_t *addr = flash_helper_get_sector_address(FLASH_Sector);
 8011194:	f000 f904 	bl	80113a0 <flash_helper_get_sector_address>
 8011198:	f500 527f 	add.w	r2, r0, #16320	; 0x3fc0
 801119c:	323f      	adds	r2, #63	; 0x3f
 801119e:	3801      	subs	r0, #1
 80111a0:	e001      	b.n	80111a6 <EE_EraseSectorIfNotEmpty.constprop.1+0x16>

	for (unsigned int i = 0;i < PAGE_SIZE;i++) {
 80111a2:	4290      	cmp	r0, r2
 80111a4:	d009      	beq.n	80111ba <EE_EraseSectorIfNotEmpty.constprop.1+0x2a>
		if (addr[i] != 0xFF) {
 80111a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80111aa:	2bff      	cmp	r3, #255	; 0xff
 80111ac:	d0f9      	beq.n	80111a2 <EE_EraseSectorIfNotEmpty.constprop.1+0x12>
			return FLASH_EraseSector(FLASH_Sector, VoltageRange);
 80111ae:	4620      	mov	r0, r4
 80111b0:	2102      	movs	r1, #2
 80111b2:	f000 fc55 	bl	8011a60 <FLASH_EraseSector>
 80111b6:	b280      	uxth	r0, r0
 80111b8:	bd10      	pop	{r4, pc}
		}
	}

	return FLASH_COMPLETE;
 80111ba:	2009      	movs	r0, #9
}
 80111bc:	bd10      	pop	{r4, pc}
 80111be:	bf00      	nop

080111c0 <EE_Format>:
 * @param  None
 * @retval Status of the last operation (Flash write or erase) done during
 *         EEPROM formating
 */
static FLASH_Status EE_Format(void)
{
 80111c0:	b508      	push	{r3, lr}
	FLASH_Status FlashStatus = FLASH_COMPLETE;

	/* Erase Page0 */
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80111c2:	2008      	movs	r0, #8
 80111c4:	f7ff ffe4 	bl	8011190 <EE_EraseSectorIfNotEmpty.constprop.1>
 80111c8:	b2c0      	uxtb	r0, r0

	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != FLASH_COMPLETE)
 80111ca:	2809      	cmp	r0, #9
 80111cc:	d000      	beq.n	80111d0 <EE_Format+0x10>
	/* Erase Page1 */
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);

	/* Return Page1 erase operation status */
	return FlashStatus;
}
 80111ce:	bd08      	pop	{r3, pc}
	{
		return FlashStatus;
	}

	/* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
	FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80111d0:	4805      	ldr	r0, [pc, #20]	; (80111e8 <EE_Format+0x28>)
 80111d2:	2100      	movs	r1, #0
 80111d4:	f000 fc84 	bl	8011ae0 <FLASH_ProgramHalfWord>

	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != FLASH_COMPLETE)
 80111d8:	2809      	cmp	r0, #9
 80111da:	d1f8      	bne.n	80111ce <EE_Format+0xe>
	{
		return FlashStatus;
	}

	/* Erase Page1 */
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 80111dc:	2010      	movs	r0, #16
 80111de:	f7ff ffd7 	bl	8011190 <EE_EraseSectorIfNotEmpty.constprop.1>
 80111e2:	b2c0      	uxtb	r0, r0
 80111e4:	e7f3      	b.n	80111ce <EE_Format+0xe>
 80111e6:	bf00      	nop
 80111e8:	08004000 	.word	0x08004000
 80111ec:	f3af 8000 	nop.w

080111f0 <EE_ReadVariable>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80111f0:	4b15      	ldr	r3, [pc, #84]	; (8011248 <EE_ReadVariable+0x58>)

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80111f2:	4a16      	ldr	r2, [pc, #88]	; (801124c <EE_ReadVariable+0x5c>)
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80111f4:	881b      	ldrh	r3, [r3, #0]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80111f6:	8812      	ldrh	r2, [r2, #0]
static uint16_t EE_FindValidPage(uint8_t Operation)
{
	uint16_t PageStatus0 = 6, PageStatus1 = 6;

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80111f8:	b29b      	uxth	r3, r3
 *           - 0: if variable was found
 *           - 1: if the variable was not found
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80111fa:	b410      	push	{r4}

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80111fc:	b292      	uxth	r2, r2
		{
			return NO_VALID_PAGE;   /* No valid Page */
		}

	case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
		if (PageStatus0 == VALID_PAGE)
 80111fe:	b1bb      	cbz	r3, 8011230 <EE_ReadVariable+0x40>
		{
			return PAGE0;           /* Page0 valid */
		}
		else if (PageStatus1 == VALID_PAGE)
 8011200:	b11a      	cbz	r2, 801120a <EE_ReadVariable+0x1a>
	ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);

	/* Check if there is no valid page */
	if (ValidPage == NO_VALID_PAGE)
	{
		return  NO_VALID_PAGE;
 8011202:	20ab      	movs	r0, #171	; 0xab
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
}
 8011204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011208:	4770      	bx	lr
	case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
		if (PageStatus0 == VALID_PAGE)
		{
			return PAGE0;           /* Page0 valid */
		}
		else if (PageStatus1 == VALID_PAGE)
 801120a:	4b11      	ldr	r3, [pc, #68]	; (8011250 <EE_ReadVariable+0x60>)
 801120c:	4c11      	ldr	r4, [pc, #68]	; (8011254 <EE_ReadVariable+0x64>)
 801120e:	461a      	mov	r2, r3

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
	{
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*)Address);
 8011210:	8812      	ldrh	r2, [r2, #0]
 8011212:	b292      	uxth	r2, r2

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
 8011214:	4282      	cmp	r2, r0
 8011216:	d104      	bne.n	8011222 <EE_ReadVariable+0x32>
 8011218:	e00e      	b.n	8011238 <EE_ReadVariable+0x48>

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
	{
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO uint16_t*)Address);
 801121a:	881a      	ldrh	r2, [r3, #0]
 801121c:	b292      	uxth	r2, r2

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
 801121e:	4282      	cmp	r2, r0
 8011220:	d00a      	beq.n	8011238 <EE_ReadVariable+0x48>
			break;
		}
		else
		{
			/* Next address location */
			Address = Address - 4;
 8011222:	3b04      	subs	r3, #4

	/* Get the valid Page end Address */
	Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
 8011224:	429c      	cmp	r4, r3
 8011226:	d3f8      	bcc.n	801121a <EE_ReadVariable+0x2a>
 *           - NO_VALID_PAGE: if no valid page was found.
 */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
	uint16_t ValidPage = PAGE0;
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8011228:	2001      	movs	r0, #1
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
}
 801122a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801122e:	4770      	bx	lr
		{
			return NO_VALID_PAGE;   /* No valid Page */
		}

	case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
		if (PageStatus0 == VALID_PAGE)
 8011230:	4b09      	ldr	r3, [pc, #36]	; (8011258 <EE_ReadVariable+0x68>)
 8011232:	4c0a      	ldr	r4, [pc, #40]	; (801125c <EE_ReadVariable+0x6c>)
 8011234:	461a      	mov	r2, r3
 8011236:	e7eb      	b.n	8011210 <EE_ReadVariable+0x20>

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
		{
			/* Get content of Address-2 which is variable value */
			*Data = (*(__IO uint16_t*)(Address - 2));
 8011238:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 801123c:	800b      	strh	r3, [r1, #0]

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 801123e:	2000      	movs	r0, #0
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
}
 8011240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	08004000 	.word	0x08004000
 801124c:	08008000 	.word	0x08008000
 8011250:	0800bffe 	.word	0x0800bffe
 8011254:	08008002 	.word	0x08008002
 8011258:	08007ffe 	.word	0x08007ffe
 801125c:	08004002 	.word	0x08004002

08011260 <EE_Init>:
 * @param  None.
 * @retval - Flash error code: on write Flash error
 *         - FLASH_COMPLETE: on success
 */
uint16_t EE_Init(void)
{
 8011260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t EepromStatus = 0, ReadStatus = 0;
	int16_t x = -1;
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011264:	4d48      	ldr	r5, [pc, #288]	; (8011388 <EE_Init+0x128>)
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011266:	4e49      	ldr	r6, [pc, #292]	; (801138c <EE_Init+0x12c>)
	uint16_t EepromStatus = 0, ReadStatus = 0;
	int16_t x = -1;
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011268:	882c      	ldrh	r4, [r5, #0]
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801126a:	8833      	ldrh	r3, [r6, #0]
	uint16_t EepromStatus = 0, ReadStatus = 0;
	int16_t x = -1;
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801126c:	b2a4      	uxth	r4, r4
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
 801126e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011272:	4294      	cmp	r4, r2
	uint16_t  FlashStatus;

	/* Get Page0 status */
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
	/* Get Page1 status */
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011274:	b29b      	uxth	r3, r3

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
 8011276:	d048      	beq.n	801130a <EE_Init+0xaa>
 8011278:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801127c:	4544      	cmp	r4, r8
 801127e:	d034      	beq.n	80112ea <EE_Init+0x8a>
 8011280:	b124      	cbz	r4, 801128c <EE_Init+0x2c>
		}
		break;

	default:  /* Any other state -> format eeprom */
		/* Erase both Page0 and Page1 and set Page0 as valid page */
		FlashStatus = EE_Format();
 8011282:	f7ff ff9d 	bl	80111c0 <EE_Format>
 8011286:	b280      	uxth	r0, r0
		}
		break;
	}

	return FLASH_COMPLETE;
}
 8011288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		break;

	case VALID_PAGE:
		if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801128c:	2b00      	cmp	r3, #0
 801128e:	d0f8      	beq.n	8011282 <EE_Init+0x22>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8011290:	4543      	cmp	r3, r8
 8011292:	d064      	beq.n	801135e <EE_Init+0xfe>
 8011294:	4d3e      	ldr	r5, [pc, #248]	; (8011390 <EE_Init+0x130>)
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011296:	4e3f      	ldr	r6, [pc, #252]	; (8011394 <EE_Init+0x134>)
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011298:	4f3f      	ldr	r7, [pc, #252]	; (8011398 <EE_Init+0x138>)
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801129a:	8833      	ldrh	r3, [r6, #0]
 801129c:	f835 2f02 	ldrh.w	r2, [r5, #2]!
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80112a0:	493d      	ldr	r1, [pc, #244]	; (8011398 <EE_Init+0x138>)
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	4293      	cmp	r3, r2
				{
					x = VarIdx;
 80112a6:	bf08      	it	eq
 80112a8:	fa1f f884 	uxtheq.w	r8, r4
				}
				if (VarIdx != x)
 80112ac:	fa0f f388 	sxth.w	r3, r8
 80112b0:	429c      	cmp	r4, r3
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80112b2:	4610      	mov	r0, r2
 80112b4:	f104 0401 	add.w	r4, r4, #1
			{
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
				{
					x = VarIdx;
				}
				if (VarIdx != x)
 80112b8:	d009      	beq.n	80112ce <EE_Init+0x6e>
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80112ba:	f7ff ff99 	bl	80111f0 <EE_ReadVariable>
					/* In case variable corresponding to the virtual address was found */
					if (ReadStatus != 0x1)
 80112be:	2801      	cmp	r0, #1
 80112c0:	d005      	beq.n	80112ce <EE_Init+0x6e>
					{
						/* Transfer the variable to the Page1 */
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80112c2:	8828      	ldrh	r0, [r5, #0]
 80112c4:	8839      	ldrh	r1, [r7, #0]
 80112c6:	f7ff ff23 	bl	8011110 <EE_VerifyPageFullWriteVariable>
						/* If program operation was failed, a Flash error code is returned */
						if (EepromStatus != FLASH_COMPLETE)
 80112ca:	2809      	cmp	r0, #9
 80112cc:	d1dc      	bne.n	8011288 <EE_Init+0x28>
			}
		}
		else /* Page0 valid, Page1 receive */
		{
			/* Transfer data from Page0 to Page1 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80112ce:	2ca0      	cmp	r4, #160	; 0xa0
 80112d0:	d1e3      	bne.n	801129a <EE_Init+0x3a>
						}
					}
				}
			}
			/* Mark Page1 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80112d2:	482e      	ldr	r0, [pc, #184]	; (801138c <EE_Init+0x12c>)
 80112d4:	2100      	movs	r1, #0
 80112d6:	f000 fc03 	bl	8011ae0 <FLASH_ProgramHalfWord>
 80112da:	b280      	uxth	r0, r0
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 80112dc:	2809      	cmp	r0, #9
 80112de:	d1d3      	bne.n	8011288 <EE_Init+0x28>
			{
				return FlashStatus;
			}
			/* Erase Page0 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80112e0:	2008      	movs	r0, #8
		}
		break;
	}

	return FLASH_COMPLETE;
}
 80112e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
			/* Erase Page0 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80112e6:	f7ff bf53 	b.w	8011190 <EE_EraseSectorIfNotEmpty.constprop.1>

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
	{
	case ERASED:
		if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d0f8      	beq.n	80112e0 <EE_Init+0x80>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
		}
		else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d1c7      	bne.n	8011282 <EE_Init+0x22>
		{
			/* Erase Page0 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80112f2:	2008      	movs	r0, #8
 80112f4:	f7ff ff4c 	bl	8011190 <EE_EraseSectorIfNotEmpty.constprop.1>
			/* If erase operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 80112f8:	2809      	cmp	r0, #9
 80112fa:	d1c5      	bne.n	8011288 <EE_Init+0x28>
			{
				return FlashStatus;
			}
			/* Mark Page1 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80112fc:	4630      	mov	r0, r6
 80112fe:	2100      	movs	r1, #0
 8011300:	f000 fbee 	bl	8011ae0 <FLASH_ProgramHalfWord>
 8011304:	b280      	uxth	r0, r0
 8011306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		break;

	case RECEIVE_DATA:
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801130a:	bb6b      	cbnz	r3, 8011368 <EE_Init+0x108>
 801130c:	4d20      	ldr	r5, [pc, #128]	; (8011390 <EE_Init+0x130>)
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801130e:	4e23      	ldr	r6, [pc, #140]	; (801139c <EE_Init+0x13c>)
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011310:	4f21      	ldr	r7, [pc, #132]	; (8011398 <EE_Init+0x138>)
			}
		}
		break;

	case RECEIVE_DATA:
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8011312:	461c      	mov	r4, r3
 8011314:	f64f 78ff 	movw	r8, #65535	; 0xffff
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011318:	8833      	ldrh	r3, [r6, #0]
 801131a:	f835 2f02 	ldrh.w	r2, [r5, #2]!
					x = VarIdx;
				}
				if (VarIdx != x)
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801131e:	491e      	ldr	r1, [pc, #120]	; (8011398 <EE_Init+0x138>)
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011320:	b29b      	uxth	r3, r3
 8011322:	4293      	cmp	r3, r2
				{
					x = VarIdx;
 8011324:	bf08      	it	eq
 8011326:	fa1f f884 	uxtheq.w	r8, r4
				}
				if (VarIdx != x)
 801132a:	fa0f f388 	sxth.w	r3, r8
 801132e:	429c      	cmp	r4, r3
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011330:	4610      	mov	r0, r2
 8011332:	f104 0401 	add.w	r4, r4, #1
			{
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
				{
					x = VarIdx;
				}
				if (VarIdx != x)
 8011336:	d009      	beq.n	801134c <EE_Init+0xec>
				{
					/* Read the last variables' updates */
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011338:	f7ff ff5a 	bl	80111f0 <EE_ReadVariable>
					/* In case variable corresponding to the virtual address was found */
					if (ReadStatus != 0x1)
 801133c:	2801      	cmp	r0, #1
 801133e:	d005      	beq.n	801134c <EE_Init+0xec>
					{
						/* Transfer the variable to the Page0 */
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011340:	8828      	ldrh	r0, [r5, #0]
 8011342:	8839      	ldrh	r1, [r7, #0]
 8011344:	f7ff fee4 	bl	8011110 <EE_VerifyPageFullWriteVariable>
						/* If program operation was failed, a Flash error code is returned */
						if (EepromStatus != FLASH_COMPLETE)
 8011348:	2809      	cmp	r0, #9
 801134a:	d19d      	bne.n	8011288 <EE_Init+0x28>

	case RECEIVE_DATA:
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
		{
			/* Transfer data from Page1 to Page0 */
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801134c:	2ca0      	cmp	r4, #160	; 0xa0
 801134e:	d1e3      	bne.n	8011318 <EE_Init+0xb8>
						}
					}
				}
			}
			/* Mark Page0 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8011350:	480d      	ldr	r0, [pc, #52]	; (8011388 <EE_Init+0x128>)
 8011352:	2100      	movs	r1, #0
 8011354:	f000 fbc4 	bl	8011ae0 <FLASH_ProgramHalfWord>
 8011358:	b280      	uxth	r0, r0
			/* If program operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 801135a:	2809      	cmp	r0, #9
 801135c:	d194      	bne.n	8011288 <EE_Init+0x28>
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
		{
			/* Erase Page1 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 801135e:	2010      	movs	r0, #16
		}
		break;
	}

	return FLASH_COMPLETE;
}
 8011360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
		{
			/* Erase Page1 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8011364:	f7ff bf14 	b.w	8011190 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
			{
				return FlashStatus;
			}
		}
		else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8011368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801136c:	4293      	cmp	r3, r2
 801136e:	d188      	bne.n	8011282 <EE_Init+0x22>
		{
			/* Erase Page1 */
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8011370:	2010      	movs	r0, #16
 8011372:	f7ff ff0d 	bl	8011190 <EE_EraseSectorIfNotEmpty.constprop.1>
			/* If erase operation was failed, a Flash error code is returned */
			if (FlashStatus != FLASH_COMPLETE)
 8011376:	2809      	cmp	r0, #9
 8011378:	d186      	bne.n	8011288 <EE_Init+0x28>
			{
				return FlashStatus;
			}
			/* Mark Page0 as valid */
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 801137a:	4628      	mov	r0, r5
 801137c:	2100      	movs	r1, #0
 801137e:	f000 fbaf 	bl	8011ae0 <FLASH_ProgramHalfWord>
 8011382:	b280      	uxth	r0, r0
 8011384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011388:	08004000 	.word	0x08004000
 801138c:	08008000 	.word	0x08008000
 8011390:	20002ce2 	.word	0x20002ce2
 8011394:	08008006 	.word	0x08008006
 8011398:	20002e24 	.word	0x20002e24
 801139c:	08004006 	.word	0x08004006

080113a0 <flash_helper_get_sector_address>:

	// Jump to the bootloader
	jump_to_bootloader();
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
 80113a0:	4a07      	ldr	r2, [pc, #28]	; (80113c0 <flash_helper_get_sector_address+0x20>)
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 80113a2:	2300      	movs	r3, #0
		if (flash_sector[i] == fsector) {
 80113a4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80113a8:	4281      	cmp	r1, r0
 80113aa:	d004      	beq.n	80113b6 <flash_helper_get_sector_address+0x16>
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 80113ac:	3301      	adds	r3, #1
 80113ae:	2b0c      	cmp	r3, #12
 80113b0:	d1f8      	bne.n	80113a4 <flash_helper_get_sector_address+0x4>
	// Jump to the bootloader
	jump_to_bootloader();
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
	uint8_t *res = 0;
 80113b2:	2000      	movs	r0, #0
			break;
		}
	}

	return res;
}
 80113b4:	4770      	bx	lr
uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
		if (flash_sector[i] == fsector) {
			res = (uint8_t *)flash_addr[i];
 80113b6:	4a03      	ldr	r2, [pc, #12]	; (80113c4 <flash_helper_get_sector_address+0x24>)
 80113b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
			break;
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	08013700 	.word	0x08013700
 80113c4:	08013720 	.word	0x08013720
 80113c8:	f3af 8000 	nop.w
 80113cc:	f3af 8000 	nop.w

080113d0 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80113d0:	2001      	movs	r0, #1
		OPMODE_I2C,
		100000,
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
 80113d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80113d6:	4601      	mov	r1, r0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80113d8:	4e5e      	ldr	r6, [pc, #376]	; (8011554 <hw_init_gpio+0x184>)

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80113da:	4c5f      	ldr	r4, [pc, #380]	; (8011558 <hw_init_gpio+0x188>)

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 80113dc:	4d5f      	ldr	r5, [pc, #380]	; (801155c <hw_init_gpio+0x18c>)
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80113de:	f000 fb9f 	bl	8011b20 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80113e2:	2002      	movs	r0, #2
 80113e4:	2101      	movs	r1, #1
 80113e6:	f000 fb9b 	bl	8011b20 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80113ea:	2004      	movs	r0, #4
 80113ec:	2101      	movs	r1, #1
 80113ee:	f000 fb97 	bl	8011b20 <RCC_AHB1PeriphClockCmd>

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80113f2:	4630      	mov	r0, r6
 80113f4:	2140      	movs	r1, #64	; 0x40
 80113f6:	2219      	movs	r2, #25
 80113f8:	f7fd fb72 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 80113fc:	2180      	movs	r1, #128	; 0x80

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);
 80113fe:	4688      	mov	r8, r1

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 8011400:	2740      	movs	r7, #64	; 0x40
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011402:	4630      	mov	r0, r6
 8011404:	2219      	movs	r2, #25
 8011406:	f7fd fb6b 	bl	800eae0 <_pal_lld_setgroupmode>

	palClearPad(GPIOB, 6);
 801140a:	8377      	strh	r7, [r6, #26]
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 801140c:	4639      	mov	r1, r7
 801140e:	4620      	mov	r0, r4
	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);
 8011410:	f8a6 801a 	strh.w	r8, [r6, #26]

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011414:	2219      	movs	r2, #25
 8011416:	f7fd fb63 	bl	800eae0 <_pal_lld_setgroupmode>
	DISABLE_GATE();

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 801141a:	4620      	mov	r0, r4
 801141c:	4641      	mov	r1, r8
	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();
 801141e:	8367      	strh	r7, [r4, #26]

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011420:	2219      	movs	r2, #25
 8011422:	f7fd fb5d 	bl	800eae0 <_pal_lld_setgroupmode>
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011426:	f44f 7180 	mov.w	r1, #256	; 0x100
	GAIN_FULLDN();
 801142a:	4689      	mov	r9, r1

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 801142c:	4620      	mov	r0, r4
 801142e:	2219      	movs	r2, #25
 8011430:	f7fd fb56 	bl	800eae0 <_pal_lld_setgroupmode>
	GAIN_FULLDN();

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 8011434:	4630      	mov	r0, r6
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 8011436:	f8a4 901a 	strh.w	r9, [r4, #26]

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 801143a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801143e:	2220      	movs	r2, #32
 8011440:	f7fd fb4e 	bl	800eae0 <_pal_lld_setgroupmode>

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 8011444:	4649      	mov	r1, r9
 8011446:	4628      	mov	r0, r5
 8011448:	229a      	movs	r2, #154	; 0x9a
 801144a:	f7fd fb49 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 801144e:	4628      	mov	r0, r5
 8011450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011454:	229a      	movs	r2, #154	; 0x9a
 8011456:	f7fd fb43 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 801145a:	4628      	mov	r0, r5
 801145c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011460:	229a      	movs	r2, #154	; 0x9a
 8011462:	f7fd fb3d 	bl	800eae0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 8011466:	4630      	mov	r0, r6
 8011468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801146c:	229a      	movs	r2, #154	; 0x9a
 801146e:	f7fd fb37 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 8011472:	4630      	mov	r0, r6
 8011474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011478:	229a      	movs	r2, #154	; 0x9a
 801147a:	f7fd fb31 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 801147e:	4630      	mov	r0, r6
 8011480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011484:	229a      	movs	r2, #154	; 0x9a
 8011486:	f7fd fb2b 	bl	800eae0 <_pal_lld_setgroupmode>

	// DHall sensors
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 801148a:	4620      	mov	r0, r4
 801148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011490:	2220      	movs	r2, #32
 8011492:	f7fd fb25 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 8011496:	4620      	mov	r0, r4
 8011498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801149c:	2220      	movs	r2, #32
 801149e:	f7fd fb1f 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);
 80114a2:	4620      	mov	r0, r4
 80114a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80114a8:	2220      	movs	r2, #32
 80114aa:	f7fd fb19 	bl	800eae0 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);//sen3
 80114ae:	4628      	mov	r0, r5
 80114b0:	2101      	movs	r1, #1
 80114b2:	2203      	movs	r2, #3
 80114b4:	f7fd fb14 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);//sen2
 80114b8:	4628      	mov	r0, r5
 80114ba:	2102      	movs	r1, #2
 80114bc:	2203      	movs	r2, #3
 80114be:	f7fd fb0f 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);//sen1
 80114c2:	4628      	mov	r0, r5
 80114c4:	2104      	movs	r1, #4
 80114c6:	2203      	movs	r2, #3
 80114c8:	f7fd fb0a 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);//INV_TEMP
 80114cc:	4628      	mov	r0, r5
 80114ce:	2108      	movs	r1, #8
 80114d0:	2203      	movs	r2, #3
 80114d2:	f7fd fb05 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 80114d6:	4628      	mov	r0, r5
 80114d8:	2110      	movs	r1, #16
 80114da:	2203      	movs	r2, #3
 80114dc:	f7fd fb00 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 80114e0:	4628      	mov	r0, r5
 80114e2:	2120      	movs	r1, #32
 80114e4:	2203      	movs	r2, #3
 80114e6:	f7fd fafb 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 80114ea:	4628      	mov	r0, r5
 80114ec:	4639      	mov	r1, r7
 80114ee:	2203      	movs	r2, #3
 80114f0:	f7fd faf6 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT_ANALOG);
 80114f4:	4628      	mov	r0, r5
 80114f6:	4641      	mov	r1, r8
 80114f8:	2203      	movs	r2, #3
 80114fa:	f7fd faf1 	bl	800eae0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);//BR_SO1
 80114fe:	4630      	mov	r0, r6
 8011500:	2101      	movs	r1, #1
 8011502:	2203      	movs	r2, #3
 8011504:	f7fd faec 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);//BR_SO2
 8011508:	4630      	mov	r0, r6
 801150a:	2102      	movs	r1, #2
 801150c:	2203      	movs	r2, #3
 801150e:	f7fd fae7 	bl	800eae0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
 8011512:	4620      	mov	r0, r4
 8011514:	2101      	movs	r1, #1
 8011516:	2203      	movs	r2, #3
 8011518:	f7fd fae2 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 801151c:	4620      	mov	r0, r4
 801151e:	2102      	movs	r1, #2
 8011520:	2203      	movs	r2, #3
 8011522:	f7fd fadd 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
 8011526:	4620      	mov	r0, r4
 8011528:	2104      	movs	r1, #4
 801152a:	2203      	movs	r2, #3
 801152c:	f7fd fad8 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 8011530:	4620      	mov	r0, r4
 8011532:	2108      	movs	r1, #8
 8011534:	2203      	movs	r2, #3
 8011536:	f7fd fad3 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
 801153a:	4620      	mov	r0, r4
 801153c:	2110      	movs	r1, #16
 801153e:	2203      	movs	r2, #3
 8011540:	f7fd face 	bl	800eae0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 8011544:	4620      	mov	r0, r4
 8011546:	2120      	movs	r1, #32
 8011548:	2203      	movs	r2, #3

}
 801154a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 801154e:	f7fd bac7 	b.w	800eae0 <_pal_lld_setgroupmode>
 8011552:	bf00      	nop
 8011554:	40020400 	.word	0x40020400
 8011558:	40020800 	.word	0x40020800
 801155c:	40020000 	.word	0x40020000

08011560 <hw_setup_adc_channels>:

}

void hw_setup_adc_channels(void) {
 8011560:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8011562:	4d2c      	ldr	r5, [pc, #176]	; (8011614 <hw_setup_adc_channels+0xb4>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8011564:	4c2c      	ldr	r4, [pc, #176]	; (8011618 <hw_setup_adc_channels+0xb8>)
	ADC_RegularChannelConfig(ADC2, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 8011566:	4e2d      	ldr	r6, [pc, #180]	; (801161c <hw_setup_adc_channels+0xbc>)

}

void hw_setup_adc_channels(void) {
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8011568:	2201      	movs	r2, #1
 801156a:	4628      	mov	r0, r5
 801156c:	4613      	mov	r3, r2
 801156e:	2100      	movs	r1, #0
 8011570:	f000 f8de 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 2, ADC_SampleTime_15Cycles);
 8011574:	4628      	mov	r0, r5
 8011576:	2107      	movs	r1, #7
 8011578:	2202      	movs	r2, #2
 801157a:	2301      	movs	r3, #1
 801157c:	f000 f8d8 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
 8011580:	4628      	mov	r0, r5
 8011582:	210a      	movs	r1, #10
 8011584:	2203      	movs	r2, #3
 8011586:	2301      	movs	r3, #1
 8011588:	f000 f8d2 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 801158c:	2104      	movs	r1, #4
 801158e:	4628      	mov	r0, r5
 8011590:	460a      	mov	r2, r1
 8011592:	2301      	movs	r3, #1
 8011594:	f000 f8cc 	bl	8011730 <ADC_RegularChannelConfig>

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8011598:	2101      	movs	r1, #1
 801159a:	4620      	mov	r0, r4
 801159c:	460a      	mov	r2, r1
 801159e:	460b      	mov	r3, r1
 80115a0:	f000 f8c6 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 80115a4:	4620      	mov	r0, r4
 80115a6:	2108      	movs	r1, #8
 80115a8:	2202      	movs	r2, #2
 80115aa:	2301      	movs	r3, #1
 80115ac:	f000 f8c0 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
 80115b0:	4620      	mov	r0, r4
 80115b2:	210b      	movs	r1, #11
 80115b4:	2203      	movs	r2, #3
 80115b6:	2301      	movs	r3, #1
 80115b8:	f000 f8ba 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);
 80115bc:	4620      	mov	r0, r4
 80115be:	210f      	movs	r1, #15
 80115c0:	2204      	movs	r2, #4
 80115c2:	2301      	movs	r3, #1
 80115c4:	f000 f8b4 	bl	8011730 <ADC_RegularChannelConfig>

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 80115c8:	2201      	movs	r2, #1
 80115ca:	4630      	mov	r0, r6
 80115cc:	4613      	mov	r3, r2
 80115ce:	2102      	movs	r1, #2
 80115d0:	f000 f8ae 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 80115d4:	4630      	mov	r0, r6
 80115d6:	2103      	movs	r1, #3
 80115d8:	2202      	movs	r2, #2
 80115da:	2301      	movs	r3, #1
 80115dc:	f000 f8a8 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 80115e0:	4630      	mov	r0, r6
 80115e2:	210c      	movs	r1, #12
 80115e4:	2203      	movs	r2, #3
 80115e6:	2301      	movs	r3, #1
 80115e8:	f000 f8a2 	bl	8011730 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 80115ec:	4630      	mov	r0, r6
 80115ee:	2105      	movs	r1, #5
 80115f0:	2204      	movs	r2, #4
 80115f2:	2301      	movs	r3, #1
 80115f4:	f000 f89c 	bl	8011730 <ADC_RegularChannelConfig>

	// Injected channels
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
 80115f8:	2201      	movs	r2, #1
 80115fa:	4628      	mov	r0, r5
 80115fc:	4613      	mov	r3, r2
 80115fe:	2108      	movs	r1, #8
 8011600:	f000 f8ee 	bl	80117e0 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
 8011604:	2201      	movs	r2, #1
 8011606:	4620      	mov	r0, r4
 8011608:	4613      	mov	r3, r2
 801160a:	2109      	movs	r1, #9
}
 801160c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);

	// Injected channels
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
 8011610:	f000 b8e6 	b.w	80117e0 <ADC_InjectedChannelConfig>
 8011614:	40012000 	.word	0x40012000
 8011618:	40012100 	.word	0x40012100
 801161c:	40012200 	.word	0x40012200

08011620 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8011620:	78c3      	ldrb	r3, [r0, #3]
 8011622:	b95b      	cbnz	r3, 801163c <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011624:	7803      	ldrb	r3, [r0, #0]
 8011626:	4818      	ldr	r0, [pc, #96]	; (8011688 <NVIC_Init+0x68>)
 8011628:	095a      	lsrs	r2, r3, #5
 801162a:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 801162c:	f003 031f 	and.w	r3, r3, #31
 8011630:	2101      	movs	r1, #1
 8011632:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011636:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801163a:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 801163c:	4b13      	ldr	r3, [pc, #76]	; (801168c <NVIC_Init+0x6c>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 801163e:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8011640:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011642:	7845      	ldrb	r5, [r0, #1]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8011644:	7882      	ldrb	r2, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8011646:	7804      	ldrb	r4, [r0, #0]
 8011648:	4e0f      	ldr	r6, [pc, #60]	; (8011688 <NVIC_Init+0x68>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 801164a:	43c9      	mvns	r1, r1
 801164c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 8011650:	f1c1 0704 	rsb	r7, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011654:	b2ff      	uxtb	r7, r7
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8011656:	230f      	movs	r3, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8011658:	40bd      	lsls	r5, r7
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 801165a:	410b      	asrs	r3, r1

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 801165c:	4013      	ands	r3, r2
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 801165e:	b2e9      	uxtb	r1, r5
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8011660:	430b      	orrs	r3, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8011662:	f104 4260 	add.w	r2, r4, #3758096384	; 0xe0000000
 8011666:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 801166a:	011b      	lsls	r3, r3, #4
 801166c:	b2db      	uxtb	r3, r3
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 801166e:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8011672:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8011674:	2201      	movs	r2, #1
 8011676:	f003 011f 	and.w	r1, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 801167a:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 801167c:	408a      	lsls	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 801167e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8011682:	bcf0      	pop	{r4, r5, r6, r7}
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	e000e100 	.word	0xe000e100
 801168c:	e000ed00 	.word	0xe000ed00

08011690 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8011690:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8011692:	6844      	ldr	r4, [r0, #4]
 8011694:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8011696:	f891 c004 	ldrb.w	ip, [r1, #4]
 801169a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 801169e:	690e      	ldr	r6, [r1, #16]
 80116a0:	688d      	ldr	r5, [r1, #8]
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80116a2:	794f      	ldrb	r7, [r1, #5]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80116a4:	4b0d      	ldr	r3, [pc, #52]	; (80116dc <ADC_Init+0x4c>)
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80116a6:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 80116aa:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80116ae:	4322      	orrs	r2, r4
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80116b0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80116b4:	6042      	str	r2, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80116b6:	6884      	ldr	r4, [r0, #8]
 80116b8:	ea4e 0206 	orr.w	r2, lr, r6
 80116bc:	432a      	orrs	r2, r5
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80116be:	4023      	ands	r3, r4
 80116c0:	4313      	orrs	r3, r2
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80116c2:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80116c6:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80116c8:	7d0a      	ldrb	r2, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80116ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80116cc:	3a01      	subs	r2, #1
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80116ce:	b2d2      	uxtb	r2, r2
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80116d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80116d4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80116d8:	62c3      	str	r3, [r0, #44]	; 0x2c
 80116da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116dc:	c0fff7fd 	.word	0xc0fff7fd

080116e0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80116e0:	b470      	push	{r4, r5, r6}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80116e2:	e890 0044 	ldmia.w	r0, {r2, r6}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80116e6:	4d06      	ldr	r5, [pc, #24]	; (8011700 <ADC_CommonInit+0x20>)
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80116e8:	6884      	ldr	r4, [r0, #8]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80116ea:	68c1      	ldr	r1, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80116ec:	4b05      	ldr	r3, [pc, #20]	; (8011704 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80116ee:	6868      	ldr	r0, [r5, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80116f0:	4332      	orrs	r2, r6
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80116f2:	4322      	orrs	r2, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80116f4:	430a      	orrs	r2, r1
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80116f6:	4003      	ands	r3, r0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80116f8:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80116fa:	606b      	str	r3, [r5, #4]
}
 80116fc:	bc70      	pop	{r4, r5, r6}
 80116fe:	4770      	bx	lr
 8011700:	40012300 	.word	0x40012300
 8011704:	fffc30e0 	.word	0xfffc30e0
 8011708:	f3af 8000 	nop.w
 801170c:	f3af 8000 	nop.w

08011710 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8011710:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011712:	b919      	cbnz	r1, 801171c <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8011714:	f023 0301 	bic.w	r3, r3, #1
 8011718:	6083      	str	r3, [r0, #8]
 801171a:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 801171c:	f043 0301 	orr.w	r3, r3, #1
 8011720:	6083      	str	r3, [r0, #8]
 8011722:	4770      	bx	lr
 8011724:	f3af 8000 	nop.w
 8011728:	f3af 8000 	nop.w
 801172c:	f3af 8000 	nop.w

08011730 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011730:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8011732:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011734:	d91c      	bls.n	8011770 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8011736:	f1a1 040a 	sub.w	r4, r1, #10
 801173a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 801173e:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8011740:	2607      	movs	r6, #7
 8011742:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8011744:	40a3      	lsls	r3, r4
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011746:	ea25 0406 	bic.w	r4, r5, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 801174a:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 801174c:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 801174e:	60c3      	str	r3, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011750:	d91a      	bls.n	8011788 <ADC_RegularChannelConfig+0x58>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8011752:	2a0c      	cmp	r2, #12
 8011754:	d925      	bls.n	80117a2 <ADC_RegularChannelConfig+0x72>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8011756:	3a0d      	subs	r2, #13
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8011758:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 801175a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801175e:	231f      	movs	r3, #31
 8011760:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011762:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8011766:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011768:	4319      	orrs	r1, r3
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 801176a:	62c1      	str	r1, [r0, #44]	; 0x2c
  }
}
 801176c:	bc70      	pop	{r4, r5, r6}
 801176e:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011770:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8011774:	6905      	ldr	r5, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011776:	2407      	movs	r4, #7
 8011778:	40b4      	lsls	r4, r6
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 801177a:	40b3      	lsls	r3, r6
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 801177c:	ea25 0404 	bic.w	r4, r5, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011780:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011782:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8011784:	6103      	str	r3, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011786:	d8e4      	bhi.n	8011752 <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8011788:	3a01      	subs	r2, #1
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 801178a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 801178c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011790:	231f      	movs	r3, #31
 8011792:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011794:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8011798:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 801179a:	4319      	orrs	r1, r3
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 801179c:	6341      	str	r1, [r0, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 801179e:	bc70      	pop	{r4, r5, r6}
 80117a0:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80117a2:	3a07      	subs	r2, #7
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80117a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80117a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80117aa:	231f      	movs	r3, #31
 80117ac:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80117ae:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80117b2:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80117b4:	4319      	orrs	r1, r3
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80117b6:	6301      	str	r1, [r0, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80117b8:	bc70      	pop	{r4, r5, r6}
 80117ba:	4770      	bx	lr
 80117bc:	f3af 8000 	nop.w

080117c0 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80117c0:	4a05      	ldr	r2, [pc, #20]	; (80117d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 80117c2:	6853      	ldr	r3, [r2, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80117c4:	b918      	cbnz	r0, 80117ce <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80117c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80117ca:	6053      	str	r3, [r2, #4]
 80117cc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80117ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80117d2:	6053      	str	r3, [r2, #4]
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	40012300 	.word	0x40012300
 80117dc:	f3af 8000 	nop.w

080117e0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80117e0:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80117e2:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80117e4:	d81a      	bhi.n	801181c <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80117e6:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80117ea:	6905      	ldr	r5, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80117ec:	2407      	movs	r4, #7
 80117ee:	40b4      	lsls	r4, r6
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80117f0:	40b3      	lsls	r3, r6
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80117f2:	ea25 0404 	bic.w	r4, r5, r4
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80117f6:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80117f8:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80117fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80117fc:	3202      	adds	r2, #2
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80117fe:	f3c3 5401 	ubfx	r4, r3, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8011802:	1b12      	subs	r2, r2, r4
 8011804:	b2d2      	uxtb	r2, r2
 8011806:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801180a:	241f      	movs	r4, #31
 801180c:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 801180e:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8011812:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8011814:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8011816:	6381      	str	r1, [r0, #56]	; 0x38
}
 8011818:	bc70      	pop	{r4, r5, r6}
 801181a:	4770      	bx	lr
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 801181c:	f1a1 040a 	sub.w	r4, r1, #10
 8011820:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8011824:	68c5      	ldr	r5, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8011826:	2607      	movs	r6, #7
 8011828:	40a6      	lsls	r6, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 801182a:	40a3      	lsls	r3, r4
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 801182c:	ea25 0406 	bic.w	r4, r5, r6
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011830:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8011832:	60c3      	str	r3, [r0, #12]
 8011834:	e7e1      	b.n	80117fa <ADC_InjectedChannelConfig+0x1a>
 8011836:	bf00      	nop
 8011838:	f3af 8000 	nop.w
 801183c:	f3af 8000 	nop.w

08011840 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8011840:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8011842:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8011844:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8011848:	ea43 5101 	orr.w	r1, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 801184c:	6381      	str	r1, [r0, #56]	; 0x38
 801184e:	4770      	bx	lr

08011850 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8011850:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8011852:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8011856:	4319      	orrs	r1, r3
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8011858:	6081      	str	r1, [r0, #8]
 801185a:	4770      	bx	lr
 801185c:	f3af 8000 	nop.w

08011860 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8011860:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8011862:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8011866:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8011868:	6081      	str	r1, [r0, #8]
 801186a:	4770      	bx	lr
 801186c:	f3af 8000 	nop.w

08011870 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8011870:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8011872:	2300      	movs	r3, #0
 8011874:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8011876:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8011878:	9b01      	ldr	r3, [sp, #4]
 801187a:	3328      	adds	r3, #40	; 0x28
 801187c:	4419      	add	r1, r3
 801187e:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8011880:	9b01      	ldr	r3, [sp, #4]
 8011882:	6818      	ldr	r0, [r3, #0]
}
 8011884:	b280      	uxth	r0, r0
 8011886:	b002      	add	sp, #8
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	f3af 8000 	nop.w

08011890 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 8011890:	b2c9      	uxtb	r1, r1
 8011892:	2301      	movs	r3, #1
 8011894:	408b      	lsls	r3, r1

  if (NewState != DISABLE)
 8011896:	b922      	cbnz	r2, 80118a2 <ADC_ITConfig+0x12>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8011898:	6842      	ldr	r2, [r0, #4]
 801189a:	ea22 0303 	bic.w	r3, r2, r3
 801189e:	6043      	str	r3, [r0, #4]
 80118a0:	4770      	bx	lr
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80118a2:	6842      	ldr	r2, [r0, #4]
 80118a4:	4313      	orrs	r3, r2
 80118a6:	6043      	str	r3, [r0, #4]
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	f3af 8000 	nop.w

080118b0 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80118b0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80118b4:	6001      	str	r1, [r0, #0]
 80118b6:	4770      	bx	lr
 80118b8:	f3af 8000 	nop.w
 80118bc:	f3af 8000 	nop.w

080118c0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	b082      	sub	sp, #8
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80118c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80118c8:	9301      	str	r3, [sp, #4]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80118ca:	68cb      	ldr	r3, [r1, #12]
 80118cc:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80118ce:	698e      	ldr	r6, [r1, #24]
 80118d0:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80118d2:	6a0c      	ldr	r4, [r1, #32]
 80118d4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80118d6:	f8d0 c000 	ldr.w	ip, [r0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80118da:	f8df e050 	ldr.w	lr, [pc, #80]	; 801192c <DMA_Init+0x6c>
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80118de:	4698      	mov	r8, r3
 80118e0:	680b      	ldr	r3, [r1, #0]
 80118e2:	ea48 0803 	orr.w	r8, r8, r3
 80118e6:	ea48 0707 	orr.w	r7, r8, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80118ea:	433e      	orrs	r6, r7
 80118ec:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80118ee:	432c      	orrs	r4, r5
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80118f0:	9b01      	ldr	r3, [sp, #4]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80118f2:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80118f4:	690d      	ldr	r5, [r1, #16]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80118f6:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80118f8:	4313      	orrs	r3, r2
 80118fa:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80118fc:	684c      	ldr	r4, [r1, #4]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80118fe:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8011900:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011902:	ea0c 0e0e 	and.w	lr, ip, lr
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8011906:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011908:	ea43 030e 	orr.w	r3, r3, lr
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 801190c:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 801190e:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011910:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8011912:	6889      	ldr	r1, [r1, #8]
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011914:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011918:	4333      	orrs	r3, r6
 801191a:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 801191c:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 801191e:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8011920:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8011922:	60c1      	str	r1, [r0, #12]
}
 8011924:	b002      	add	sp, #8
 8011926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801192a:	bf00      	nop
 801192c:	f01c803f 	.word	0xf01c803f

08011930 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011930:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011932:	b919      	cbnz	r1, 801193c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8011934:	f023 0301 	bic.w	r3, r3, #1
 8011938:	6003      	str	r3, [r0, #0]
 801193a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 801193c:	f043 0301 	orr.w	r3, r3, #1
 8011940:	6003      	str	r3, [r0, #0]
 8011942:	4770      	bx	lr
 8011944:	f3af 8000 	nop.w
 8011948:	f3af 8000 	nop.w
 801194c:	f3af 8000 	nop.w

08011950 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8011950:	060b      	lsls	r3, r1, #24
 8011952:	d50c      	bpl.n	801196e <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011954:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8011956:	b1aa      	cbz	r2, 8011984 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801195c:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 801195e:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011960:	d00f      	beq.n	8011982 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8011962:	6803      	ldr	r3, [r0, #0]
 8011964:	f001 011e 	and.w	r1, r1, #30
 8011968:	4319      	orrs	r1, r3
 801196a:	6001      	str	r1, [r0, #0]
 801196c:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801196e:	2980      	cmp	r1, #128	; 0x80
 8011970:	d007      	beq.n	8011982 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8011972:	2a00      	cmp	r2, #0
 8011974:	d1f5      	bne.n	8011962 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8011976:	6803      	ldr	r3, [r0, #0]
 8011978:	f001 011e 	and.w	r1, r1, #30
 801197c:	ea23 0101 	bic.w	r1, r3, r1
 8011980:	6001      	str	r1, [r0, #0]
 8011982:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8011984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011988:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 801198a:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801198c:	d1f3      	bne.n	8011976 <DMA_ITConfig+0x26>
 801198e:	4770      	bx	lr

08011990 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8011990:	4b03      	ldr	r3, [pc, #12]	; (80119a0 <EXTI_GetITStatus+0x10>)
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 8011996:	bf14      	ite	ne
 8011998:	2001      	movne	r0, #1
 801199a:	2000      	moveq	r0, #0
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	40013c00 	.word	0x40013c00
 80119a4:	f3af 8000 	nop.w
 80119a8:	f3af 8000 	nop.w
 80119ac:	f3af 8000 	nop.w

080119b0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80119b0:	4b01      	ldr	r3, [pc, #4]	; (80119b8 <EXTI_ClearITPendingBit+0x8>)
 80119b2:	6158      	str	r0, [r3, #20]
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop
 80119b8:	40013c00 	.word	0x40013c00
 80119bc:	f3af 8000 	nop.w

080119c0 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80119c0:	4b04      	ldr	r3, [pc, #16]	; (80119d4 <FLASH_Unlock+0x14>)
 80119c2:	691a      	ldr	r2, [r3, #16]
 80119c4:	2a00      	cmp	r2, #0
 80119c6:	da03      	bge.n	80119d0 <FLASH_Unlock+0x10>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80119c8:	4903      	ldr	r1, [pc, #12]	; (80119d8 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_KEY2;
 80119ca:	4a04      	ldr	r2, [pc, #16]	; (80119dc <FLASH_Unlock+0x1c>)
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80119cc:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80119ce:	605a      	str	r2, [r3, #4]
 80119d0:	4770      	bx	lr
 80119d2:	bf00      	nop
 80119d4:	40023c00 	.word	0x40023c00
 80119d8:	45670123 	.word	0x45670123
 80119dc:	cdef89ab 	.word	0xcdef89ab

080119e0 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80119e0:	4b01      	ldr	r3, [pc, #4]	; (80119e8 <FLASH_ClearFlag+0x8>)
 80119e2:	60d8      	str	r0, [r3, #12]
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop
 80119e8:	40023c00 	.word	0x40023c00
 80119ec:	f3af 8000 	nop.w

080119f0 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80119f0:	4b0e      	ldr	r3, [pc, #56]	; (8011a2c <FLASH_GetStatus+0x3c>)
 80119f2:	68da      	ldr	r2, [r3, #12]
 80119f4:	03d2      	lsls	r2, r2, #15
 80119f6:	d409      	bmi.n	8011a0c <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80119f8:	68da      	ldr	r2, [r3, #12]
 80119fa:	06d1      	lsls	r1, r2, #27
 80119fc:	d501      	bpl.n	8011a02 <FLASH_GetStatus+0x12>
    { 
      flashstatus = FLASH_ERROR_WRP;
 80119fe:	2006      	movs	r0, #6
 8011a00:	4770      	bx	lr
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8011a02:	68da      	ldr	r2, [r3, #12]
 8011a04:	05d2      	lsls	r2, r2, #23
 8011a06:	d503      	bpl.n	8011a10 <FLASH_GetStatus+0x20>
      { 
        flashstatus = FLASH_ERROR_RD;
 8011a08:	2002      	movs	r0, #2
 8011a0a:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8011a0c:	2001      	movs	r0, #1
 8011a0e:	4770      	bx	lr
      { 
        flashstatus = FLASH_ERROR_RD;
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8011a10:	68da      	ldr	r2, [r3, #12]
 8011a12:	f012 0fe0 	tst.w	r2, #224	; 0xe0
 8011a16:	d001      	beq.n	8011a1c <FLASH_GetStatus+0x2c>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8011a18:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8011a1a:	4770      	bx	lr
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	f013 0f02 	tst.w	r3, #2
          {
            flashstatus = FLASH_ERROR_OPERATION;
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8011a22:	bf14      	ite	ne
 8011a24:	2008      	movne	r0, #8
 8011a26:	2009      	moveq	r0, #9
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop
 8011a2c:	40023c00 	.word	0x40023c00

08011a30 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8011a30:	b500      	push	{lr}
 8011a32:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 8011a34:	2309      	movs	r3, #9
 8011a36:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8011a3a:	f7ff ffd9 	bl	80119f0 <FLASH_GetStatus>
 8011a3e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8011a42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d0f7      	beq.n	8011a3a <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8011a4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011a4e:	b2c0      	uxtb	r0, r0
}
 8011a50:	b003      	add	sp, #12
 8011a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a56:	bf00      	nop
 8011a58:	f3af 8000 	nop.w
 8011a5c:	f3af 8000 	nop.w

08011a60 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8011a60:	b570      	push	{r4, r5, r6, lr}
 8011a62:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8011a64:	b359      	cbz	r1, 8011abe <FLASH_EraseSector+0x5e>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8011a66:	2901      	cmp	r1, #1
 8011a68:	d02f      	beq.n	8011aca <FLASH_EraseSector+0x6a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
 8011a6a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011a6c:	bf0c      	ite	eq
 8011a6e:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8011a72:	f44f 7440 	movne.w	r4, #768	; 0x300
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8011a76:	f7ff ffdb 	bl	8011a30 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8011a7a:	2809      	cmp	r0, #9
 8011a7c:	d124      	bne.n	8011ac8 <FLASH_EraseSector+0x68>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8011a7e:	4d14      	ldr	r5, [pc, #80]	; (8011ad0 <FLASH_EraseSector+0x70>)
 8011a80:	692b      	ldr	r3, [r5, #16]
 8011a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a86:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 8011a88:	6929      	ldr	r1, [r5, #16]
 8011a8a:	4321      	orrs	r1, r4
 8011a8c:	6129      	str	r1, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 8011a8e:	692b      	ldr	r3, [r5, #16]
 8011a90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011a94:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8011a96:	692b      	ldr	r3, [r5, #16]
 8011a98:	f043 0302 	orr.w	r3, r3, #2
 8011a9c:	431e      	orrs	r6, r3
 8011a9e:	612e      	str	r6, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8011aa0:	692b      	ldr	r3, [r5, #16]
 8011aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011aa6:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8011aa8:	f7ff ffc2 	bl	8011a30 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8011aac:	692b      	ldr	r3, [r5, #16]
 8011aae:	f023 0302 	bic.w	r3, r3, #2
 8011ab2:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 8011ab4:	692b      	ldr	r3, [r5, #16]
 8011ab6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011aba:	612b      	str	r3, [r5, #16]
  }
  /* Return the Erase Status */
  return status;
}
 8011abc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8011abe:	460c      	mov	r4, r1
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8011ac0:	f7ff ffb6 	bl	8011a30 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8011ac4:	2809      	cmp	r0, #9
 8011ac6:	d0da      	beq.n	8011a7e <FLASH_EraseSector+0x1e>
    FLASH->CR &= (~FLASH_CR_SER);
    FLASH->CR &= SECTOR_MASK; 
  }
  /* Return the Erase Status */
  return status;
}
 8011ac8:	bd70      	pop	{r4, r5, r6, pc}
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011aca:	f44f 7480 	mov.w	r4, #256	; 0x100
 8011ace:	e7f7      	b.n	8011ac0 <FLASH_EraseSector+0x60>
 8011ad0:	40023c00 	.word	0x40023c00
 8011ad4:	f3af 8000 	nop.w
 8011ad8:	f3af 8000 	nop.w
 8011adc:	f3af 8000 	nop.w

08011ae0 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8011ae0:	b570      	push	{r4, r5, r6, lr}
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8011ae6:	f7ff ffa3 	bl	8011a30 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8011aea:	2809      	cmp	r0, #9
 8011aec:	d000      	beq.n	8011af0 <FLASH_ProgramHalfWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 8011aee:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8011af0:	4c0a      	ldr	r4, [pc, #40]	; (8011b1c <FLASH_ProgramHalfWord+0x3c>)
 8011af2:	6923      	ldr	r3, [r4, #16]
 8011af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011af8:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011afa:	6923      	ldr	r3, [r4, #16]
 8011afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b00:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8011b02:	6923      	ldr	r3, [r4, #16]
 8011b04:	f043 0301 	orr.w	r3, r3, #1
 8011b08:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = Data;
 8011b0a:	802e      	strh	r6, [r5, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8011b0c:	f7ff ff90 	bl	8011a30 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8011b10:	6923      	ldr	r3, [r4, #16]
 8011b12:	f023 0301 	bic.w	r3, r3, #1
 8011b16:	6123      	str	r3, [r4, #16]
  } 
  /* Return the Program Status */
  return status;
}
 8011b18:	bd70      	pop	{r4, r5, r6, pc}
 8011b1a:	bf00      	nop
 8011b1c:	40023c00 	.word	0x40023c00

08011b20 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8011b20:	4a04      	ldr	r2, [pc, #16]	; (8011b34 <RCC_AHB1PeriphClockCmd+0x14>)
 8011b22:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011b24:	b919      	cbnz	r1, 8011b2e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8011b26:	ea23 0000 	bic.w	r0, r3, r0
 8011b2a:	6310      	str	r0, [r2, #48]	; 0x30
 8011b2c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8011b2e:	4318      	orrs	r0, r3
 8011b30:	6310      	str	r0, [r2, #48]	; 0x30
 8011b32:	4770      	bx	lr
 8011b34:	40023800 	.word	0x40023800
 8011b38:	f3af 8000 	nop.w
 8011b3c:	f3af 8000 	nop.w

08011b40 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8011b40:	4a04      	ldr	r2, [pc, #16]	; (8011b54 <RCC_APB1PeriphClockCmd+0x14>)
 8011b42:	6c13      	ldr	r3, [r2, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011b44:	b919      	cbnz	r1, 8011b4e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8011b46:	ea23 0000 	bic.w	r0, r3, r0
 8011b4a:	6410      	str	r0, [r2, #64]	; 0x40
 8011b4c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8011b4e:	4318      	orrs	r0, r3
 8011b50:	6410      	str	r0, [r2, #64]	; 0x40
 8011b52:	4770      	bx	lr
 8011b54:	40023800 	.word	0x40023800
 8011b58:	f3af 8000 	nop.w
 8011b5c:	f3af 8000 	nop.w

08011b60 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8011b60:	4a04      	ldr	r2, [pc, #16]	; (8011b74 <RCC_APB2PeriphClockCmd+0x14>)
 8011b62:	6c53      	ldr	r3, [r2, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011b64:	b919      	cbnz	r1, 8011b6e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8011b66:	ea23 0000 	bic.w	r0, r3, r0
 8011b6a:	6450      	str	r0, [r2, #68]	; 0x44
 8011b6c:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8011b6e:	4318      	orrs	r0, r3
 8011b70:	6450      	str	r0, [r2, #68]	; 0x44
 8011b72:	4770      	bx	lr
 8011b74:	40023800 	.word	0x40023800
 8011b78:	f3af 8000 	nop.w
 8011b7c:	f3af 8000 	nop.w

08011b80 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8011b80:	4a04      	ldr	r2, [pc, #16]	; (8011b94 <RCC_APB1PeriphResetCmd+0x14>)
 8011b82:	6a13      	ldr	r3, [r2, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011b84:	b919      	cbnz	r1, 8011b8e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8011b86:	ea23 0000 	bic.w	r0, r3, r0
 8011b8a:	6210      	str	r0, [r2, #32]
 8011b8c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8011b8e:	4318      	orrs	r0, r3
 8011b90:	6210      	str	r0, [r2, #32]
 8011b92:	4770      	bx	lr
 8011b94:	40023800 	.word	0x40023800
 8011b98:	f3af 8000 	nop.w
 8011b9c:	f3af 8000 	nop.w

08011ba0 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8011ba0:	4a04      	ldr	r2, [pc, #16]	; (8011bb4 <RCC_APB2PeriphResetCmd+0x14>)
 8011ba2:	6a53      	ldr	r3, [r2, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011ba4:	b919      	cbnz	r1, 8011bae <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8011ba6:	ea23 0000 	bic.w	r0, r3, r0
 8011baa:	6250      	str	r0, [r2, #36]	; 0x24
 8011bac:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8011bae:	4318      	orrs	r0, r3
 8011bb0:	6250      	str	r0, [r2, #36]	; 0x24
 8011bb2:	4770      	bx	lr
 8011bb4:	40023800 	.word	0x40023800
 8011bb8:	f3af 8000 	nop.w
 8011bbc:	f3af 8000 	nop.w

08011bc0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8011bc0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8011bc2:	4b60      	ldr	r3, [pc, #384]	; (8011d44 <TIM_DeInit+0x184>)
 8011bc4:	4298      	cmp	r0, r3
 8011bc6:	d035      	beq.n	8011c34 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8011bc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011bcc:	d03c      	beq.n	8011c48 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8011bce:	4b5e      	ldr	r3, [pc, #376]	; (8011d48 <TIM_DeInit+0x188>)
 8011bd0:	4298      	cmp	r0, r3
 8011bd2:	d043      	beq.n	8011c5c <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8011bd4:	4b5d      	ldr	r3, [pc, #372]	; (8011d4c <TIM_DeInit+0x18c>)
 8011bd6:	4298      	cmp	r0, r3
 8011bd8:	d04a      	beq.n	8011c70 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8011bda:	4b5d      	ldr	r3, [pc, #372]	; (8011d50 <TIM_DeInit+0x190>)
 8011bdc:	4298      	cmp	r0, r3
 8011bde:	d051      	beq.n	8011c84 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8011be0:	4b5c      	ldr	r3, [pc, #368]	; (8011d54 <TIM_DeInit+0x194>)
 8011be2:	4298      	cmp	r0, r3
 8011be4:	d058      	beq.n	8011c98 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8011be6:	4b5c      	ldr	r3, [pc, #368]	; (8011d58 <TIM_DeInit+0x198>)
 8011be8:	4298      	cmp	r0, r3
 8011bea:	d05f      	beq.n	8011cac <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8011bec:	4b5b      	ldr	r3, [pc, #364]	; (8011d5c <TIM_DeInit+0x19c>)
 8011bee:	4298      	cmp	r0, r3
 8011bf0:	d066      	beq.n	8011cc0 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8011bf2:	4b5b      	ldr	r3, [pc, #364]	; (8011d60 <TIM_DeInit+0x1a0>)
 8011bf4:	4298      	cmp	r0, r3
 8011bf6:	d06d      	beq.n	8011cd4 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8011bf8:	4b5a      	ldr	r3, [pc, #360]	; (8011d64 <TIM_DeInit+0x1a4>)
 8011bfa:	4298      	cmp	r0, r3
 8011bfc:	d076      	beq.n	8011cec <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8011bfe:	4b5a      	ldr	r3, [pc, #360]	; (8011d68 <TIM_DeInit+0x1a8>)
 8011c00:	4298      	cmp	r0, r3
 8011c02:	d07f      	beq.n	8011d04 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8011c04:	4b59      	ldr	r3, [pc, #356]	; (8011d6c <TIM_DeInit+0x1ac>)
 8011c06:	4298      	cmp	r0, r3
 8011c08:	f000 8088 	beq.w	8011d1c <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8011c0c:	4b58      	ldr	r3, [pc, #352]	; (8011d70 <TIM_DeInit+0x1b0>)
 8011c0e:	4298      	cmp	r0, r3
 8011c10:	f000 808e 	beq.w	8011d30 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8011c14:	4b57      	ldr	r3, [pc, #348]	; (8011d74 <TIM_DeInit+0x1b4>)
 8011c16:	4298      	cmp	r0, r3
 8011c18:	d000      	beq.n	8011c1c <TIM_DeInit+0x5c>
 8011c1a:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8011c1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011c20:	2101      	movs	r1, #1
 8011c22:	f7ff ffad 	bl	8011b80 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011c26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011c2a:	2100      	movs	r1, #0
    }   
  }
}
 8011c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011c30:	f7ff bfa6 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8011c34:	2001      	movs	r0, #1
 8011c36:	4601      	mov	r1, r0
 8011c38:	f7ff ffb2 	bl	8011ba0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8011c3c:	2001      	movs	r0, #1
 8011c3e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8011c44:	f7ff bfac 	b.w	8011ba0 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8011c48:	2001      	movs	r0, #1
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	f7ff ff98 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8011c50:	2001      	movs	r0, #1
 8011c52:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8011c58:	f7ff bf92 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8011c5c:	2002      	movs	r0, #2
 8011c5e:	2101      	movs	r1, #1
 8011c60:	f7ff ff8e 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8011c64:	2002      	movs	r0, #2
 8011c66:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8011c6c:	f7ff bf88 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8011c70:	2004      	movs	r0, #4
 8011c72:	2101      	movs	r1, #1
 8011c74:	f7ff ff84 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8011c78:	2004      	movs	r0, #4
 8011c7a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8011c80:	f7ff bf7e 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8011c84:	2008      	movs	r0, #8
 8011c86:	2101      	movs	r1, #1
 8011c88:	f7ff ff7a 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8011c8c:	2008      	movs	r0, #8
 8011c8e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8011c94:	f7ff bf74 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8011c98:	2010      	movs	r0, #16
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	f7ff ff70 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8011ca0:	2010      	movs	r0, #16
 8011ca2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8011ca8:	f7ff bf6a 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8011cac:	2020      	movs	r0, #32
 8011cae:	2101      	movs	r1, #1
 8011cb0:	f7ff ff66 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8011cb4:	2020      	movs	r0, #32
 8011cb6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8011cbc:	f7ff bf60 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8011cc0:	2002      	movs	r0, #2
 8011cc2:	2101      	movs	r1, #1
 8011cc4:	f7ff ff6c 	bl	8011ba0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8011cc8:	2002      	movs	r0, #2
 8011cca:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011ccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8011cd0:	f7ff bf66 	b.w	8011ba0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8011cd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011cd8:	2101      	movs	r1, #1
 8011cda:	f7ff ff61 	bl	8011ba0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8011cde:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011ce2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8011ce8:	f7ff bf5a 	b.w	8011ba0 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8011cec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011cf0:	2101      	movs	r1, #1
 8011cf2:	f7ff ff55 	bl	8011ba0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8011cf6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011cfa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8011d00:	f7ff bf4e 	b.w	8011ba0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8011d04:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011d08:	2101      	movs	r1, #1
 8011d0a:	f7ff ff49 	bl	8011ba0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8011d0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011d12:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8011d18:	f7ff bf42 	b.w	8011ba0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8011d1c:	2040      	movs	r0, #64	; 0x40
 8011d1e:	2101      	movs	r1, #1
 8011d20:	f7ff ff2e 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8011d24:	2040      	movs	r0, #64	; 0x40
 8011d26:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8011d2c:	f7ff bf28 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8011d30:	2080      	movs	r0, #128	; 0x80
 8011d32:	2101      	movs	r1, #1
 8011d34:	f7ff ff24 	bl	8011b80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011d38:	2080      	movs	r0, #128	; 0x80
 8011d3a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011d40:	f7ff bf1e 	b.w	8011b80 <RCC_APB1PeriphResetCmd>
 8011d44:	40010000 	.word	0x40010000
 8011d48:	40000400 	.word	0x40000400
 8011d4c:	40000800 	.word	0x40000800
 8011d50:	40000c00 	.word	0x40000c00
 8011d54:	40001000 	.word	0x40001000
 8011d58:	40001400 	.word	0x40001400
 8011d5c:	40010400 	.word	0x40010400
 8011d60:	40014000 	.word	0x40014000
 8011d64:	40014400 	.word	0x40014400
 8011d68:	40014800 	.word	0x40014800
 8011d6c:	40001800 	.word	0x40001800
 8011d70:	40001c00 	.word	0x40001c00
 8011d74:	40002000 	.word	0x40002000
 8011d78:	f3af 8000 	nop.w
 8011d7c:	f3af 8000 	nop.w

08011d80 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011d80:	4a22      	ldr	r2, [pc, #136]	; (8011e0c <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8011d82:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011d84:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8011d86:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011d88:	d012      	beq.n	8011db0 <TIM_TimeBaseInit+0x30>
 8011d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d8e:	4290      	cmp	r0, r2
 8011d90:	d00e      	beq.n	8011db0 <TIM_TimeBaseInit+0x30>
 8011d92:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011d96:	d00b      	beq.n	8011db0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8011d98:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8011d9c:	4290      	cmp	r0, r2
 8011d9e:	d007      	beq.n	8011db0 <TIM_TimeBaseInit+0x30>
 8011da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011da4:	4290      	cmp	r0, r2
 8011da6:	d003      	beq.n	8011db0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8011da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011dac:	4290      	cmp	r0, r2
 8011dae:	d103      	bne.n	8011db8 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011db0:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8011db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011db6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8011db8:	4a15      	ldr	r2, [pc, #84]	; (8011e10 <TIM_TimeBaseInit+0x90>)
 8011dba:	4290      	cmp	r0, r2
 8011dbc:	d01e      	beq.n	8011dfc <TIM_TimeBaseInit+0x7c>
 8011dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011dc2:	4290      	cmp	r0, r2
 8011dc4:	d01a      	beq.n	8011dfc <TIM_TimeBaseInit+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8011dc6:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8011dc8:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8011dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011dce:	4c0f      	ldr	r4, [pc, #60]	; (8011e0c <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011dd0:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011dd2:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8011dd4:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011dd6:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011dd8:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011dda:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011ddc:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011dde:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011de0:	d006      	beq.n	8011df0 <TIM_TimeBaseInit+0x70>
 8011de2:	4b0c      	ldr	r3, [pc, #48]	; (8011e14 <TIM_TimeBaseInit+0x94>)
 8011de4:	4298      	cmp	r0, r3
 8011de6:	d003      	beq.n	8011df0 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011de8:	2301      	movs	r3, #1
 8011dea:	6143      	str	r3, [r0, #20]
}
 8011dec:	bc70      	pop	{r4, r5, r6}
 8011dee:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8011df0:	7a8b      	ldrb	r3, [r1, #10]
 8011df2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011df4:	2301      	movs	r3, #1
 8011df6:	6143      	str	r3, [r0, #20]
}
 8011df8:	bc70      	pop	{r4, r5, r6}
 8011dfa:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011dfc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011dfe:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011e00:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011e02:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011e04:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011e06:	2301      	movs	r3, #1
 8011e08:	6143      	str	r3, [r0, #20]
 8011e0a:	4770      	bx	lr
 8011e0c:	40010000 	.word	0x40010000
 8011e10:	40001000 	.word	0x40001000
 8011e14:	40010400 	.word	0x40010400
 8011e18:	f3af 8000 	nop.w
 8011e1c:	f3af 8000 	nop.w

08011e20 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011e20:	b929      	cbnz	r1, 8011e2e <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8011e22:	6802      	ldr	r2, [r0, #0]
 8011e24:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8011e28:	4013      	ands	r3, r2
 8011e2a:	6003      	str	r3, [r0, #0]
 8011e2c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8011e2e:	6803      	ldr	r3, [r0, #0]
 8011e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e34:	6003      	str	r3, [r0, #0]
 8011e36:	4770      	bx	lr
 8011e38:	f3af 8000 	nop.w
 8011e3c:	f3af 8000 	nop.w

08011e40 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011e40:	b929      	cbnz	r1, 8011e4e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8011e42:	6802      	ldr	r2, [r0, #0]
 8011e44:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011e48:	4013      	ands	r3, r2
 8011e4a:	6003      	str	r3, [r0, #0]
 8011e4c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8011e4e:	6803      	ldr	r3, [r0, #0]
 8011e50:	f043 0301 	orr.w	r3, r3, #1
 8011e54:	6003      	str	r3, [r0, #0]
 8011e56:	4770      	bx	lr
 8011e58:	f3af 8000 	nop.w
 8011e5c:	f3af 8000 	nop.w

08011e60 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8011e60:	6a02      	ldr	r2, [r0, #32]
 8011e62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011e66:	4013      	ands	r3, r2
 8011e68:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8011e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e6c:	898a      	ldrh	r2, [r1, #12]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011e6e:	6a04      	ldr	r4, [r0, #32]
 8011e70:	884b      	ldrh	r3, [r1, #2]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e72:	6846      	ldr	r6, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011e74:	4f17      	ldr	r7, [pc, #92]	; (8011ed4 <TIM_OC1Init+0x74>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011e76:	f8d0 c018 	ldr.w	ip, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011e7a:	f8b1 e000 	ldrh.w	lr, [r1]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8011e7e:	f64f 75fd 	movw	r5, #65533	; 0xfffd
 8011e82:	4025      	ands	r5, r4
 8011e84:	4313      	orrs	r3, r2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8011e86:	f64f 748c 	movw	r4, #65420	; 0xff8c
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8011e8a:	432b      	orrs	r3, r5
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8011e8c:	ea0c 0404 	and.w	r4, ip, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011e90:	42b8      	cmp	r0, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8011e92:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e94:	b2b2      	uxth	r2, r6
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011e96:	ea44 040e 	orr.w	r4, r4, lr
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011e9a:	d008      	beq.n	8011eae <TIM_OC1Init+0x4e>
 8011e9c:	4d0e      	ldr	r5, [pc, #56]	; (8011ed8 <TIM_OC1Init+0x78>)
 8011e9e:	42a8      	cmp	r0, r5
 8011ea0:	d005      	beq.n	8011eae <TIM_OC1Init+0x4e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8011ea2:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ea4:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011ea6:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8011ea8:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011eaa:	6203      	str	r3, [r0, #32]
 8011eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8011eae:	89ce      	ldrh	r6, [r1, #14]
 8011eb0:	f8b1 e012 	ldrh.w	lr, [r1, #18]
 8011eb4:	8a0d      	ldrh	r5, [r1, #16]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8011eb6:	888f      	ldrh	r7, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8011eb8:	f023 0308 	bic.w	r3, r3, #8
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8011ebc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8011ec0:	4333      	orrs	r3, r6
 8011ec2:	ea4e 0505 	orr.w	r5, lr, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8011ec6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8011eca:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8011ecc:	433b      	orrs	r3, r7
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8011ece:	b292      	uxth	r2, r2
 8011ed0:	e7e7      	b.n	8011ea2 <TIM_OC1Init+0x42>
 8011ed2:	bf00      	nop
 8011ed4:	40010000 	.word	0x40010000
 8011ed8:	40010400 	.word	0x40010400
 8011edc:	f3af 8000 	nop.w

08011ee0 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8011ee0:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8011ee2:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8011ee6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8011eea:	4013      	ands	r3, r2
 8011eec:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8011eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8011ef2:	f8d0 8020 	ldr.w	r8, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8011ef6:	898d      	ldrh	r5, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ef8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011efa:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011efe:	4e1c      	ldr	r6, [pc, #112]	; (8011f70 <TIM_OC2Init+0x90>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011f00:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8011f02:	f64f 72df 	movw	r2, #65503	; 0xffdf
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8011f06:	f648 43ff 	movw	r3, #36095	; 0x8cff
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8011f0a:	ea08 0202 	and.w	r2, r8, r2
 8011f0e:	ea4c 0505 	orr.w	r5, ip, r5
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8011f12:	ea0e 0303 	and.w	r3, lr, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8011f16:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011f1a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011f1e:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8011f20:	b292      	uxth	r2, r2
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011f22:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011f24:	b29b      	uxth	r3, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011f26:	d009      	beq.n	8011f3c <TIM_OC2Init+0x5c>
 8011f28:	4d12      	ldr	r5, [pc, #72]	; (8011f74 <TIM_OC2Init+0x94>)
 8011f2a:	42a8      	cmp	r0, r5
 8011f2c:	d006      	beq.n	8011f3c <TIM_OC2Init+0x5c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8011f2e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011f30:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011f32:	6183      	str	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8011f34:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011f36:	6202      	str	r2, [r0, #32]
 8011f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8011f3c:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011f3e:	f8b1 8012 	ldrh.w	r8, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8011f42:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8011f44:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8011f48:	f022 0e80 	bic.w	lr, r2, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8011f4c:	ea4e 1e05 	orr.w	lr, lr, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8011f50:	f64f 75bf 	movw	r5, #65471	; 0xffbf
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8011f54:	f424 6640 	bic.w	r6, r4, #3072	; 0xc00
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8011f58:	ea0e 0505 	and.w	r5, lr, r5
 8011f5c:	ea48 0407 	orr.w	r4, r8, r7
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8011f60:	ea45 120c 	orr.w	r2, r5, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011f64:	ea46 0484 	orr.w	r4, r6, r4, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8011f68:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011f6a:	b2a4      	uxth	r4, r4
 8011f6c:	e7df      	b.n	8011f2e <TIM_OC2Init+0x4e>
 8011f6e:	bf00      	nop
 8011f70:	40010000 	.word	0x40010000
 8011f74:	40010400 	.word	0x40010400
 8011f78:	f3af 8000 	nop.w
 8011f7c:	f3af 8000 	nop.w

08011f80 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8011f80:	6a02      	ldr	r2, [r0, #32]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011f82:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8011f86:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8011f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011f92:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8011f94:	f8b1 e002 	ldrh.w	lr, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8011f98:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011f9a:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011f9c:	4e1a      	ldr	r6, [pc, #104]	; (8012008 <TIM_OC3Init+0x88>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011f9e:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8011fa0:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8011fa4:	4013      	ands	r3, r2
 8011fa6:	ea4e 0404 	orr.w	r4, lr, r4
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8011faa:	f64f 728c 	movw	r2, #65420	; 0xff8c
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8011fae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8011fb2:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011fb4:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8011fb6:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011fb8:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011fba:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011fbe:	d009      	beq.n	8011fd4 <TIM_OC3Init+0x54>
 8011fc0:	4c12      	ldr	r4, [pc, #72]	; (801200c <TIM_OC3Init+0x8c>)
 8011fc2:	42a0      	cmp	r0, r4
 8011fc4:	d006      	beq.n	8011fd4 <TIM_OC3Init+0x54>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8011fc6:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011fc8:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011fca:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8011fcc:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011fce:	6203      	str	r3, [r0, #32]
 8011fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8011fd4:	89cc      	ldrh	r4, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8011fd6:	f8b1 8012 	ldrh.w	r8, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8011fda:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8011fdc:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8011fe0:	f423 6e00 	bic.w	lr, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8011fe4:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8011fe8:	f64f 34ff 	movw	r4, #64511	; 0xfbff
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8011fec:	f425 5640 	bic.w	r6, r5, #12288	; 0x3000
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8011ff0:	ea0e 0404 	and.w	r4, lr, r4
 8011ff4:	ea48 0507 	orr.w	r5, r8, r7
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8011ff8:	ea44 230c 	orr.w	r3, r4, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8011ffc:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8012000:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8012002:	b2ad      	uxth	r5, r5
 8012004:	e7df      	b.n	8011fc6 <TIM_OC3Init+0x46>
 8012006:	bf00      	nop
 8012008:	40010000 	.word	0x40010000
 801200c:	40010400 	.word	0x40010400

08012010 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8012010:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8012012:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8012016:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801201a:	4013      	ands	r3, r2
 801201c:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801201e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012022:	f8d0 8020 	ldr.w	r8, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8012026:	898d      	ldrh	r5, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012028:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801202a:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801202e:	4e13      	ldr	r6, [pc, #76]	; (801207c <TIM_OC4Init+0x6c>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012030:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8012032:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8012036:	f648 42ff 	movw	r2, #36095	; 0x8cff
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 801203a:	ea08 0303 	and.w	r3, r8, r3
 801203e:	ea4c 0505 	orr.w	r5, ip, r5
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8012042:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8012046:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801204a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801204e:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8012050:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012052:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012054:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012056:	d009      	beq.n	801206c <TIM_OC4Init+0x5c>
 8012058:	4d09      	ldr	r5, [pc, #36]	; (8012080 <TIM_OC4Init+0x70>)
 801205a:	42a8      	cmp	r0, r5
 801205c:	d006      	beq.n	801206c <TIM_OC4Init+0x5c>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801205e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012060:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8012062:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8012064:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012066:	6203      	str	r3, [r0, #32]
 8012068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 801206c:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 801206e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8012072:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8012076:	b2a4      	uxth	r4, r4
 8012078:	e7f1      	b.n	801205e <TIM_OC4Init+0x4e>
 801207a:	bf00      	nop
 801207c:	40010000 	.word	0x40010000
 8012080:	40010400 	.word	0x40010400
 8012084:	f3af 8000 	nop.w
 8012088:	f3af 8000 	nop.w
 801208c:	f3af 8000 	nop.w

08012090 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8012090:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8012092:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8012096:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012098:	4319      	orrs	r1, r3
 801209a:	6181      	str	r1, [r0, #24]
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop

080120a0 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80120a0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80120a2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80120a6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80120a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80120ac:	b289      	uxth	r1, r1
 80120ae:	6181      	str	r1, [r0, #24]
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	f3af 8000 	nop.w
 80120b8:	f3af 8000 	nop.w
 80120bc:	f3af 8000 	nop.w

080120c0 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80120c0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80120c2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80120c6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80120c8:	4319      	orrs	r1, r3
 80120ca:	61c1      	str	r1, [r0, #28]
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop

080120d0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80120d0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80120d2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80120d6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80120d8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80120dc:	b289      	uxth	r1, r1
 80120de:	61c1      	str	r1, [r0, #28]
 80120e0:	4770      	bx	lr
 80120e2:	bf00      	nop
 80120e4:	f3af 8000 	nop.w
 80120e8:	f3af 8000 	nop.w
 80120ec:	f3af 8000 	nop.w

080120f0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80120f0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80120f2:	880b      	ldrh	r3, [r1, #0]
 80120f4:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 80120f8:	888f      	ldrh	r7, [r1, #4]
 80120fa:	88ce      	ldrh	r6, [r1, #6]
 80120fc:	890d      	ldrh	r5, [r1, #8]
 80120fe:	894c      	ldrh	r4, [r1, #10]
 8012100:	898a      	ldrh	r2, [r1, #12]
 8012102:	ea4e 0303 	orr.w	r3, lr, r3
 8012106:	433b      	orrs	r3, r7
 8012108:	4333      	orrs	r3, r6
 801210a:	432b      	orrs	r3, r5
 801210c:	4323      	orrs	r3, r4
 801210e:	4313      	orrs	r3, r2
 8012110:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8012112:	6443      	str	r3, [r0, #68]	; 0x44
 8012114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012116:	bf00      	nop
 8012118:	f3af 8000 	nop.w
 801211c:	f3af 8000 	nop.w

08012120 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8012120:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012122:	b919      	cbnz	r1, 801212c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8012124:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012128:	6443      	str	r3, [r0, #68]	; 0x44
 801212a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 801212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012130:	6443      	str	r3, [r0, #68]	; 0x44
 8012132:	4770      	bx	lr
 8012134:	f3af 8000 	nop.w
 8012138:	f3af 8000 	nop.w
 801213c:	f3af 8000 	nop.w

08012140 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012140:	b929      	cbnz	r1, 801214e <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8012142:	6842      	ldr	r2, [r0, #4]
 8012144:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8012148:	4013      	ands	r3, r2
 801214a:	6043      	str	r3, [r0, #4]
 801214c:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 801214e:	6843      	ldr	r3, [r0, #4]
 8012150:	f043 0301 	orr.w	r3, r3, #1
 8012154:	6043      	str	r3, [r0, #4]
 8012156:	4770      	bx	lr
 8012158:	f3af 8000 	nop.w
 801215c:	f3af 8000 	nop.w

08012160 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8012160:	43c9      	mvns	r1, r1
 8012162:	b289      	uxth	r1, r1
 8012164:	6101      	str	r1, [r0, #16]
 8012166:	4770      	bx	lr
 8012168:	f3af 8000 	nop.w
 801216c:	f3af 8000 	nop.w

08012170 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012170:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8012172:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8012176:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012178:	4319      	orrs	r1, r3
 801217a:	6081      	str	r1, [r0, #8]
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop

08012180 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8012180:	6842      	ldr	r2, [r0, #4]
 8012182:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8012186:	4013      	ands	r3, r2
 8012188:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 801218a:	6843      	ldr	r3, [r0, #4]
 801218c:	4319      	orrs	r1, r3
 801218e:	6041      	str	r1, [r0, #4]
 8012190:	4770      	bx	lr
 8012192:	bf00      	nop
 8012194:	f3af 8000 	nop.w
 8012198:	f3af 8000 	nop.w
 801219c:	f3af 8000 	nop.w

080121a0 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80121a0:	6882      	ldr	r2, [r0, #8]
 80121a2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80121a6:	4013      	ands	r3, r2
 80121a8:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80121aa:	6883      	ldr	r3, [r0, #8]
 80121ac:	4319      	orrs	r1, r3
 80121ae:	6081      	str	r1, [r0, #8]
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop
 80121b4:	f3af 8000 	nop.w
 80121b8:	f3af 8000 	nop.w
 80121bc:	f3af 8000 	nop.w

080121c0 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80121c0:	6882      	ldr	r2, [r0, #8]
 80121c2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80121c6:	4013      	ands	r3, r2
 80121c8:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80121ca:	6883      	ldr	r3, [r0, #8]
 80121cc:	4319      	orrs	r1, r3
 80121ce:	6081      	str	r1, [r0, #8]
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop
 80121d4:	f3af 8000 	nop.w
 80121d8:	f3af 8000 	nop.w
 80121dc:	f3af 8000 	nop.w

080121e0 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80121e0:	4a03      	ldr	r2, [pc, #12]	; (80121f0 <WWDG_SetPrescaler+0x10>)
 80121e2:	6853      	ldr	r3, [r2, #4]
 80121e4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80121e8:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80121ea:	6050      	str	r0, [r2, #4]
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop
 80121f0:	40002c00 	.word	0x40002c00
 80121f4:	f3af 8000 	nop.w
 80121f8:	f3af 8000 	nop.w
 80121fc:	f3af 8000 	nop.w

08012200 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8012200:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8012202:	4a08      	ldr	r2, [pc, #32]	; (8012224 <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 8012204:	2300      	movs	r3, #0
 8012206:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8012208:	6853      	ldr	r3, [r2, #4]
 801220a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801220e:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8012210:	9b01      	ldr	r3, [sp, #4]
 8012212:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012216:	4303      	orrs	r3, r0
 8012218:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 801221a:	9b01      	ldr	r3, [sp, #4]
 801221c:	6053      	str	r3, [r2, #4]
}
 801221e:	b002      	add	sp, #8
 8012220:	4770      	bx	lr
 8012222:	bf00      	nop
 8012224:	40002c00 	.word	0x40002c00
 8012228:	f3af 8000 	nop.w
 801222c:	f3af 8000 	nop.w

08012230 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8012230:	4b02      	ldr	r3, [pc, #8]	; (801223c <WWDG_SetCounter+0xc>)
 8012232:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012236:	6018      	str	r0, [r3, #0]
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop
 801223c:	40002c00 	.word	0x40002c00

08012240 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8012240:	4b02      	ldr	r3, [pc, #8]	; (801224c <WWDG_Enable+0xc>)
 8012242:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8012246:	6018      	str	r0, [r3, #0]
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	40002c00 	.word	0x40002c00

08012250 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 8012250:	b508      	push	{r3, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void main_init(void)
{
	bldc_init();
 8012252:	f7fd fc85 	bl	800fb60 <bldc_init>

	test.print();

	//-- BLDC 시작
	//
	bldc_start();
 8012256:	f7fd fca3 	bl	800fba0 <bldc_start>


	return 0;
}
 801225a:	2000      	movs	r0, #0
 801225c:	bd08      	pop	{r3, pc}
 801225e:	bf00      	nop

08012260 <cosf>:
 8012260:	b500      	push	{lr}
 8012262:	ee10 3a10 	vmov	r3, s0
 8012266:	4a1a      	ldr	r2, [pc, #104]	; (80122d0 <cosf+0x70>)
 8012268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801226c:	4293      	cmp	r3, r2
 801226e:	b083      	sub	sp, #12
 8012270:	dd19      	ble.n	80122a6 <cosf+0x46>
 8012272:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012276:	db04      	blt.n	8012282 <cosf+0x22>
 8012278:	ee30 0a40 	vsub.f32	s0, s0, s0
 801227c:	b003      	add	sp, #12
 801227e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012282:	4668      	mov	r0, sp
 8012284:	f000 f8cc 	bl	8012420 <__ieee754_rem_pio2f>
 8012288:	f000 0003 	and.w	r0, r0, #3
 801228c:	2801      	cmp	r0, #1
 801228e:	ed9d 0a00 	vldr	s0, [sp]
 8012292:	eddd 0a01 	vldr	s1, [sp, #4]
 8012296:	d012      	beq.n	80122be <cosf+0x5e>
 8012298:	2802      	cmp	r0, #2
 801229a:	d00b      	beq.n	80122b4 <cosf+0x54>
 801229c:	b1a0      	cbz	r0, 80122c8 <cosf+0x68>
 801229e:	2001      	movs	r0, #1
 80122a0:	f000 fdde 	bl	8012e60 <__kernel_sinf>
 80122a4:	e7ea      	b.n	801227c <cosf+0x1c>
 80122a6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80122d4 <cosf+0x74>
 80122aa:	f000 fa59 	bl	8012760 <__kernel_cosf>
 80122ae:	b003      	add	sp, #12
 80122b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80122b4:	f000 fa54 	bl	8012760 <__kernel_cosf>
 80122b8:	eeb1 0a40 	vneg.f32	s0, s0
 80122bc:	e7de      	b.n	801227c <cosf+0x1c>
 80122be:	f000 fdcf 	bl	8012e60 <__kernel_sinf>
 80122c2:	eeb1 0a40 	vneg.f32	s0, s0
 80122c6:	e7d9      	b.n	801227c <cosf+0x1c>
 80122c8:	f000 fa4a 	bl	8012760 <__kernel_cosf>
 80122cc:	e7d6      	b.n	801227c <cosf+0x1c>
 80122ce:	bf00      	nop
 80122d0:	3f490fd8 	.word	0x3f490fd8
	...

080122e0 <sinf>:
 80122e0:	b500      	push	{lr}
 80122e2:	ee10 3a10 	vmov	r3, s0
 80122e6:	4a1b      	ldr	r2, [pc, #108]	; (8012354 <sinf+0x74>)
 80122e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80122ec:	4293      	cmp	r3, r2
 80122ee:	b083      	sub	sp, #12
 80122f0:	dd1a      	ble.n	8012328 <sinf+0x48>
 80122f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80122f6:	db04      	blt.n	8012302 <sinf+0x22>
 80122f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80122fc:	b003      	add	sp, #12
 80122fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012302:	4668      	mov	r0, sp
 8012304:	f000 f88c 	bl	8012420 <__ieee754_rem_pio2f>
 8012308:	f000 0003 	and.w	r0, r0, #3
 801230c:	2801      	cmp	r0, #1
 801230e:	ed9d 0a00 	vldr	s0, [sp]
 8012312:	eddd 0a01 	vldr	s1, [sp, #4]
 8012316:	d015      	beq.n	8012344 <sinf+0x64>
 8012318:	2802      	cmp	r0, #2
 801231a:	d00d      	beq.n	8012338 <sinf+0x58>
 801231c:	b1a8      	cbz	r0, 801234a <sinf+0x6a>
 801231e:	f000 fa1f 	bl	8012760 <__kernel_cosf>
 8012322:	eeb1 0a40 	vneg.f32	s0, s0
 8012326:	e7e9      	b.n	80122fc <sinf+0x1c>
 8012328:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8012358 <sinf+0x78>
 801232c:	2000      	movs	r0, #0
 801232e:	f000 fd97 	bl	8012e60 <__kernel_sinf>
 8012332:	b003      	add	sp, #12
 8012334:	f85d fb04 	ldr.w	pc, [sp], #4
 8012338:	2001      	movs	r0, #1
 801233a:	f000 fd91 	bl	8012e60 <__kernel_sinf>
 801233e:	eeb1 0a40 	vneg.f32	s0, s0
 8012342:	e7db      	b.n	80122fc <sinf+0x1c>
 8012344:	f000 fa0c 	bl	8012760 <__kernel_cosf>
 8012348:	e7d8      	b.n	80122fc <sinf+0x1c>
 801234a:	2001      	movs	r0, #1
 801234c:	f000 fd88 	bl	8012e60 <__kernel_sinf>
 8012350:	e7d4      	b.n	80122fc <sinf+0x1c>
 8012352:	bf00      	nop
 8012354:	3f490fd8 	.word	0x3f490fd8
	...

08012360 <sqrtf>:
 8012360:	b510      	push	{r4, lr}
 8012362:	ed2d 8b02 	vpush	{d8}
 8012366:	4c2a      	ldr	r4, [pc, #168]	; (8012410 <sqrtf+0xb0>)
 8012368:	b08a      	sub	sp, #40	; 0x28
 801236a:	eef0 8a40 	vmov.f32	s17, s0
 801236e:	f000 f99f 	bl	80126b0 <__ieee754_sqrtf>
 8012372:	f994 3000 	ldrsb.w	r3, [r4]
 8012376:	3301      	adds	r3, #1
 8012378:	eeb0 8a40 	vmov.f32	s16, s0
 801237c:	d009      	beq.n	8012392 <sqrtf+0x32>
 801237e:	eeb0 0a68 	vmov.f32	s0, s17
 8012382:	f000 fe0d 	bl	8012fa0 <__fpclassifyf>
 8012386:	b120      	cbz	r0, 8012392 <sqrtf+0x32>
 8012388:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012390:	d405      	bmi.n	801239e <sqrtf+0x3e>
 8012392:	eeb0 0a48 	vmov.f32	s0, s16
 8012396:	b00a      	add	sp, #40	; 0x28
 8012398:	ecbd 8b02 	vpop	{d8}
 801239c:	bd10      	pop	{r4, pc}
 801239e:	2301      	movs	r3, #1
 80123a0:	4a1c      	ldr	r2, [pc, #112]	; (8012414 <sqrtf+0xb4>)
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	ee18 0a90 	vmov	r0, s17
 80123a8:	2300      	movs	r3, #0
 80123aa:	9201      	str	r2, [sp, #4]
 80123ac:	9308      	str	r3, [sp, #32]
 80123ae:	f7fa f82b 	bl	800c408 <__aeabi_f2d>
 80123b2:	7824      	ldrb	r4, [r4, #0]
 80123b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123bc:	b99c      	cbnz	r4, 80123e6 <sqrtf+0x86>
 80123be:	2200      	movs	r2, #0
 80123c0:	2300      	movs	r3, #0
 80123c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80123c6:	4668      	mov	r0, sp
 80123c8:	f000 fd92 	bl	8012ef0 <matherr>
 80123cc:	b1a8      	cbz	r0, 80123fa <sqrtf+0x9a>
 80123ce:	9b08      	ldr	r3, [sp, #32]
 80123d0:	b9c3      	cbnz	r3, 8012404 <sqrtf+0xa4>
 80123d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123d6:	f7fa fa83 	bl	800c8e0 <__aeabi_d2f>
 80123da:	ee00 0a10 	vmov	s0, r0
 80123de:	b00a      	add	sp, #40	; 0x28
 80123e0:	ecbd 8b02 	vpop	{d8}
 80123e4:	bd10      	pop	{r4, pc}
 80123e6:	2000      	movs	r0, #0
 80123e8:	2100      	movs	r1, #0
 80123ea:	4602      	mov	r2, r0
 80123ec:	460b      	mov	r3, r1
 80123ee:	f7fa f989 	bl	800c704 <__aeabi_ddiv>
 80123f2:	2c02      	cmp	r4, #2
 80123f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80123f8:	d1e5      	bne.n	80123c6 <sqrtf+0x66>
 80123fa:	f000 fe69 	bl	80130d0 <__errno>
 80123fe:	2321      	movs	r3, #33	; 0x21
 8012400:	6003      	str	r3, [r0, #0]
 8012402:	e7e4      	b.n	80123ce <sqrtf+0x6e>
 8012404:	f000 fe64 	bl	80130d0 <__errno>
 8012408:	9b08      	ldr	r3, [sp, #32]
 801240a:	6003      	str	r3, [r0, #0]
 801240c:	e7e1      	b.n	80123d2 <sqrtf+0x72>
 801240e:	bf00      	nop
 8012410:	2000080c 	.word	0x2000080c
 8012414:	08013750 	.word	0x08013750
	...

08012420 <__ieee754_rem_pio2f>:
 8012420:	b570      	push	{r4, r5, r6, lr}
 8012422:	ee10 3a10 	vmov	r3, s0
 8012426:	4a94      	ldr	r2, [pc, #592]	; (8012678 <__ieee754_rem_pio2f+0x258>)
 8012428:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801242c:	4294      	cmp	r4, r2
 801242e:	b086      	sub	sp, #24
 8012430:	ee10 6a10 	vmov	r6, s0
 8012434:	4605      	mov	r5, r0
 8012436:	dd66      	ble.n	8012506 <__ieee754_rem_pio2f+0xe6>
 8012438:	4a90      	ldr	r2, [pc, #576]	; (801267c <__ieee754_rem_pio2f+0x25c>)
 801243a:	4294      	cmp	r4, r2
 801243c:	dc1a      	bgt.n	8012474 <__ieee754_rem_pio2f+0x54>
 801243e:	2b00      	cmp	r3, #0
 8012440:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8012680 <__ieee754_rem_pio2f+0x260>
 8012444:	4a8f      	ldr	r2, [pc, #572]	; (8012684 <__ieee754_rem_pio2f+0x264>)
 8012446:	f024 040f 	bic.w	r4, r4, #15
 801244a:	f340 80dd 	ble.w	8012608 <__ieee754_rem_pio2f+0x1e8>
 801244e:	4294      	cmp	r4, r2
 8012450:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012454:	d066      	beq.n	8012524 <__ieee754_rem_pio2f+0x104>
 8012456:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8012688 <__ieee754_rem_pio2f+0x268>
 801245a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801245e:	2001      	movs	r0, #1
 8012460:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012464:	edc5 6a00 	vstr	s13, [r5]
 8012468:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801246c:	edc5 7a01 	vstr	s15, [r5, #4]
 8012470:	b006      	add	sp, #24
 8012472:	bd70      	pop	{r4, r5, r6, pc}
 8012474:	4a85      	ldr	r2, [pc, #532]	; (801268c <__ieee754_rem_pio2f+0x26c>)
 8012476:	4294      	cmp	r4, r2
 8012478:	dd66      	ble.n	8012548 <__ieee754_rem_pio2f+0x128>
 801247a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801247e:	da49      	bge.n	8012514 <__ieee754_rem_pio2f+0xf4>
 8012480:	15e2      	asrs	r2, r4, #23
 8012482:	3a86      	subs	r2, #134	; 0x86
 8012484:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8012488:	ee07 3a10 	vmov	s14, r3
 801248c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8012490:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8012690 <__ieee754_rem_pio2f+0x270>
 8012494:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012498:	ee37 7a66 	vsub.f32	s14, s14, s13
 801249c:	edcd 6a03 	vstr	s13, [sp, #12]
 80124a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80124a4:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 80124a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80124ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 80124b0:	edcd 6a04 	vstr	s13, [sp, #16]
 80124b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80124bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c0:	edcd 7a05 	vstr	s15, [sp, #20]
 80124c4:	f040 80b3 	bne.w	801262e <__ieee754_rem_pio2f+0x20e>
 80124c8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80124cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d0:	bf14      	ite	ne
 80124d2:	2302      	movne	r3, #2
 80124d4:	2301      	moveq	r3, #1
 80124d6:	496f      	ldr	r1, [pc, #444]	; (8012694 <__ieee754_rem_pio2f+0x274>)
 80124d8:	2002      	movs	r0, #2
 80124da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80124de:	a803      	add	r0, sp, #12
 80124e0:	4629      	mov	r1, r5
 80124e2:	f000 f9c5 	bl	8012870 <__kernel_rem_pio2f>
 80124e6:	2e00      	cmp	r6, #0
 80124e8:	da12      	bge.n	8012510 <__ieee754_rem_pio2f+0xf0>
 80124ea:	ed95 7a00 	vldr	s14, [r5]
 80124ee:	edd5 7a01 	vldr	s15, [r5, #4]
 80124f2:	eeb1 7a47 	vneg.f32	s14, s14
 80124f6:	eef1 7a67 	vneg.f32	s15, s15
 80124fa:	4240      	negs	r0, r0
 80124fc:	ed85 7a00 	vstr	s14, [r5]
 8012500:	edc5 7a01 	vstr	s15, [r5, #4]
 8012504:	e004      	b.n	8012510 <__ieee754_rem_pio2f+0xf0>
 8012506:	2200      	movs	r2, #0
 8012508:	ed85 0a00 	vstr	s0, [r5]
 801250c:	6042      	str	r2, [r0, #4]
 801250e:	2000      	movs	r0, #0
 8012510:	b006      	add	sp, #24
 8012512:	bd70      	pop	{r4, r5, r6, pc}
 8012514:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012518:	2000      	movs	r0, #0
 801251a:	edc5 7a01 	vstr	s15, [r5, #4]
 801251e:	edc5 7a00 	vstr	s15, [r5]
 8012522:	e7f5      	b.n	8012510 <__ieee754_rem_pio2f+0xf0>
 8012524:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8012698 <__ieee754_rem_pio2f+0x278>
 8012528:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801269c <__ieee754_rem_pio2f+0x27c>
 801252c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012530:	2001      	movs	r0, #1
 8012532:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012536:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801253a:	edc5 6a00 	vstr	s13, [r5]
 801253e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012542:	edc5 7a01 	vstr	s15, [r5, #4]
 8012546:	e7e3      	b.n	8012510 <__ieee754_rem_pio2f+0xf0>
 8012548:	f000 fcda 	bl	8012f00 <fabsf>
 801254c:	eddf 6a54 	vldr	s13, [pc, #336]	; 80126a0 <__ieee754_rem_pio2f+0x280>
 8012550:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8012680 <__ieee754_rem_pio2f+0x260>
 8012554:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8012688 <__ieee754_rem_pio2f+0x268>
 8012558:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 801255c:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012564:	ee17 0a90 	vmov	r0, s15
 8012568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801256c:	281f      	cmp	r0, #31
 801256e:	eeb1 6a66 	vneg.f32	s12, s13
 8012572:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012576:	ee66 7a87 	vmul.f32	s15, s13, s14
 801257a:	dc1d      	bgt.n	80125b8 <__ieee754_rem_pio2f+0x198>
 801257c:	4a49      	ldr	r2, [pc, #292]	; (80126a4 <__ieee754_rem_pio2f+0x284>)
 801257e:	1e41      	subs	r1, r0, #1
 8012580:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8012584:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012588:	4293      	cmp	r3, r2
 801258a:	d015      	beq.n	80125b8 <__ieee754_rem_pio2f+0x198>
 801258c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012590:	ed85 7a00 	vstr	s14, [r5]
 8012594:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012598:	2e00      	cmp	r6, #0
 801259a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801259e:	ed85 0a01 	vstr	s0, [r5, #4]
 80125a2:	dab5      	bge.n	8012510 <__ieee754_rem_pio2f+0xf0>
 80125a4:	eeb1 7a47 	vneg.f32	s14, s14
 80125a8:	eeb1 0a40 	vneg.f32	s0, s0
 80125ac:	ed85 7a00 	vstr	s14, [r5]
 80125b0:	ed85 0a01 	vstr	s0, [r5, #4]
 80125b4:	4240      	negs	r0, r0
 80125b6:	e7ab      	b.n	8012510 <__ieee754_rem_pio2f+0xf0>
 80125b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80125bc:	15e4      	asrs	r4, r4, #23
 80125be:	ee17 3a10 	vmov	r3, s14
 80125c2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80125c6:	1ae3      	subs	r3, r4, r3
 80125c8:	2b08      	cmp	r3, #8
 80125ca:	dde1      	ble.n	8012590 <__ieee754_rem_pio2f+0x170>
 80125cc:	eddf 7a32 	vldr	s15, [pc, #200]	; 8012698 <__ieee754_rem_pio2f+0x278>
 80125d0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801269c <__ieee754_rem_pio2f+0x27c>
 80125d4:	eef0 5a40 	vmov.f32	s11, s0
 80125d8:	eee6 5a27 	vfma.f32	s11, s12, s15
 80125dc:	ee30 0a65 	vsub.f32	s0, s0, s11
 80125e0:	eea6 0a27 	vfma.f32	s0, s12, s15
 80125e4:	eef0 7a40 	vmov.f32	s15, s0
 80125e8:	eed6 7a87 	vfnms.f32	s15, s13, s14
 80125ec:	ee35 7ae7 	vsub.f32	s14, s11, s15
 80125f0:	ee17 3a10 	vmov	r3, s14
 80125f4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80125f8:	1ae4      	subs	r4, r4, r3
 80125fa:	2c19      	cmp	r4, #25
 80125fc:	dc2c      	bgt.n	8012658 <__ieee754_rem_pio2f+0x238>
 80125fe:	ed85 7a00 	vstr	s14, [r5]
 8012602:	eeb0 0a65 	vmov.f32	s0, s11
 8012606:	e7c5      	b.n	8012594 <__ieee754_rem_pio2f+0x174>
 8012608:	4294      	cmp	r4, r2
 801260a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801260e:	d010      	beq.n	8012632 <__ieee754_rem_pio2f+0x212>
 8012610:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012688 <__ieee754_rem_pio2f+0x268>
 8012614:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801261c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012620:	edc5 6a00 	vstr	s13, [r5]
 8012624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012628:	edc5 7a01 	vstr	s15, [r5, #4]
 801262c:	e770      	b.n	8012510 <__ieee754_rem_pio2f+0xf0>
 801262e:	2303      	movs	r3, #3
 8012630:	e751      	b.n	80124d6 <__ieee754_rem_pio2f+0xb6>
 8012632:	eddf 6a19 	vldr	s13, [pc, #100]	; 8012698 <__ieee754_rem_pio2f+0x278>
 8012636:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801269c <__ieee754_rem_pio2f+0x27c>
 801263a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801263e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012642:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012646:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801264a:	edc5 6a00 	vstr	s13, [r5]
 801264e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012652:	edc5 7a01 	vstr	s15, [r5, #4]
 8012656:	e75b      	b.n	8012510 <__ieee754_rem_pio2f+0xf0>
 8012658:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80126a8 <__ieee754_rem_pio2f+0x288>
 801265c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80126ac <__ieee754_rem_pio2f+0x28c>
 8012660:	eeb0 0a65 	vmov.f32	s0, s11
 8012664:	eea6 0a07 	vfma.f32	s0, s12, s14
 8012668:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801266c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012670:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8012674:	e78a      	b.n	801258c <__ieee754_rem_pio2f+0x16c>
 8012676:	bf00      	nop
 8012678:	3f490fd8 	.word	0x3f490fd8
 801267c:	4016cbe3 	.word	0x4016cbe3
 8012680:	3fc90f80 	.word	0x3fc90f80
 8012684:	3fc90fd0 	.word	0x3fc90fd0
 8012688:	37354443 	.word	0x37354443
 801268c:	43490f80 	.word	0x43490f80
 8012690:	43800000 	.word	0x43800000
 8012694:	080137e0 	.word	0x080137e0
 8012698:	37354400 	.word	0x37354400
 801269c:	2e85a308 	.word	0x2e85a308
 80126a0:	3f22f984 	.word	0x3f22f984
 80126a4:	08013760 	.word	0x08013760
 80126a8:	2e85a300 	.word	0x2e85a300
 80126ac:	248d3132 	.word	0x248d3132

080126b0 <__ieee754_sqrtf>:
 80126b0:	ee10 3a10 	vmov	r3, s0
 80126b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80126b8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80126bc:	b470      	push	{r4, r5, r6}
 80126be:	d230      	bcs.n	8012722 <__ieee754_sqrtf+0x72>
 80126c0:	b36a      	cbz	r2, 801271e <__ieee754_sqrtf+0x6e>
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	db3d      	blt.n	8012742 <__ieee754_sqrtf+0x92>
 80126c6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80126ca:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80126ce:	d32c      	bcc.n	801272a <__ieee754_sqrtf+0x7a>
 80126d0:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 80126d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80126d8:	07d1      	lsls	r1, r2, #31
 80126da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80126de:	bf48      	it	mi
 80126e0:	005b      	lslmi	r3, r3, #1
 80126e2:	2400      	movs	r4, #0
 80126e4:	1056      	asrs	r6, r2, #1
 80126e6:	005b      	lsls	r3, r3, #1
 80126e8:	4625      	mov	r5, r4
 80126ea:	2119      	movs	r1, #25
 80126ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80126f0:	18a8      	adds	r0, r5, r2
 80126f2:	4298      	cmp	r0, r3
 80126f4:	dc02      	bgt.n	80126fc <__ieee754_sqrtf+0x4c>
 80126f6:	1a1b      	subs	r3, r3, r0
 80126f8:	1885      	adds	r5, r0, r2
 80126fa:	4414      	add	r4, r2
 80126fc:	3901      	subs	r1, #1
 80126fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012702:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012706:	d1f3      	bne.n	80126f0 <__ieee754_sqrtf+0x40>
 8012708:	b113      	cbz	r3, 8012710 <__ieee754_sqrtf+0x60>
 801270a:	f004 0301 	and.w	r3, r4, #1
 801270e:	441c      	add	r4, r3
 8012710:	1064      	asrs	r4, r4, #1
 8012712:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8012716:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 801271a:	ee00 3a10 	vmov	s0, r3
 801271e:	bc70      	pop	{r4, r5, r6}
 8012720:	4770      	bx	lr
 8012722:	eea0 0a00 	vfma.f32	s0, s0, s0
 8012726:	bc70      	pop	{r4, r5, r6}
 8012728:	4770      	bx	lr
 801272a:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 801272e:	d10d      	bne.n	801274c <__ieee754_sqrtf+0x9c>
 8012730:	005b      	lsls	r3, r3, #1
 8012732:	0218      	lsls	r0, r3, #8
 8012734:	f102 0201 	add.w	r2, r2, #1
 8012738:	d5fa      	bpl.n	8012730 <__ieee754_sqrtf+0x80>
 801273a:	f1c2 0201 	rsb	r2, r2, #1
 801273e:	4411      	add	r1, r2
 8012740:	e7c6      	b.n	80126d0 <__ieee754_sqrtf+0x20>
 8012742:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012746:	ee80 0a00 	vdiv.f32	s0, s0, s0
 801274a:	e7e8      	b.n	801271e <__ieee754_sqrtf+0x6e>
 801274c:	2201      	movs	r2, #1
 801274e:	4411      	add	r1, r2
 8012750:	e7be      	b.n	80126d0 <__ieee754_sqrtf+0x20>
 8012752:	bf00      	nop
	...

08012760 <__kernel_cosf>:
 8012760:	ee10 3a10 	vmov	r3, s0
 8012764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012768:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801276c:	da2c      	bge.n	80127c8 <__kernel_cosf+0x68>
 801276e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012772:	ee17 3a90 	vmov	r3, s15
 8012776:	2b00      	cmp	r3, #0
 8012778:	d060      	beq.n	801283c <__kernel_cosf+0xdc>
 801277a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801277e:	eddf 4a31 	vldr	s9, [pc, #196]	; 8012844 <__kernel_cosf+0xe4>
 8012782:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012848 <__kernel_cosf+0xe8>
 8012786:	eddf 5a31 	vldr	s11, [pc, #196]	; 801284c <__kernel_cosf+0xec>
 801278a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012850 <__kernel_cosf+0xf0>
 801278e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012854 <__kernel_cosf+0xf4>
 8012792:	eddf 6a31 	vldr	s13, [pc, #196]	; 8012858 <__kernel_cosf+0xf8>
 8012796:	eea7 5a24 	vfma.f32	s10, s14, s9
 801279a:	eee5 5a07 	vfma.f32	s11, s10, s14
 801279e:	eea5 6a87 	vfma.f32	s12, s11, s14
 80127a2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80127a6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80127aa:	ee66 6a87 	vmul.f32	s13, s13, s14
 80127ae:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80127b2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 80127b6:	eee7 0a26 	vfma.f32	s1, s14, s13
 80127ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80127be:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80127c2:	ee37 0ae0 	vsub.f32	s0, s15, s1
 80127c6:	4770      	bx	lr
 80127c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80127cc:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8012844 <__kernel_cosf+0xe4>
 80127d0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8012848 <__kernel_cosf+0xe8>
 80127d4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801284c <__kernel_cosf+0xec>
 80127d8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8012850 <__kernel_cosf+0xf0>
 80127dc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8012854 <__kernel_cosf+0xf4>
 80127e0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8012858 <__kernel_cosf+0xf8>
 80127e4:	4a1d      	ldr	r2, [pc, #116]	; (801285c <__kernel_cosf+0xfc>)
 80127e6:	eea7 5a24 	vfma.f32	s10, s14, s9
 80127ea:	4293      	cmp	r3, r2
 80127ec:	eee5 5a07 	vfma.f32	s11, s10, s14
 80127f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80127f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80127f8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80127fc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012800:	ddd5      	ble.n	80127ae <__kernel_cosf+0x4e>
 8012802:	4a17      	ldr	r2, [pc, #92]	; (8012860 <__kernel_cosf+0x100>)
 8012804:	4293      	cmp	r3, r2
 8012806:	dc14      	bgt.n	8012832 <__kernel_cosf+0xd2>
 8012808:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801280c:	ee07 3a90 	vmov	s15, r3
 8012810:	eeb7 6a00 	vmov.f32	s12, #112	; 0x70
 8012814:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012818:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801281c:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 8012820:	eee7 0a26 	vfma.f32	s1, s14, s13
 8012824:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012828:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801282c:	ee36 0a67 	vsub.f32	s0, s12, s15
 8012830:	4770      	bx	lr
 8012832:	eeb6 6a07 	vmov.f32	s12, #103	; 0x67
 8012836:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 801283a:	e7ed      	b.n	8012818 <__kernel_cosf+0xb8>
 801283c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8012840:	4770      	bx	lr
 8012842:	bf00      	nop
 8012844:	ad47d74e 	.word	0xad47d74e
 8012848:	310f74f6 	.word	0x310f74f6
 801284c:	b493f27c 	.word	0xb493f27c
 8012850:	37d00d01 	.word	0x37d00d01
 8012854:	bab60b61 	.word	0xbab60b61
 8012858:	3d2aaaab 	.word	0x3d2aaaab
 801285c:	3e999999 	.word	0x3e999999
 8012860:	3f480000 	.word	0x3f480000
	...

08012870 <__kernel_rem_pio2f>:
 8012870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012874:	ed2d 8b04 	vpush	{d8-d9}
 8012878:	b0d7      	sub	sp, #348	; 0x15c
 801287a:	1e5f      	subs	r7, r3, #1
 801287c:	4cd7      	ldr	r4, [pc, #860]	; (8012bdc <__kernel_rem_pio2f+0x36c>)
 801287e:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8012880:	9302      	str	r3, [sp, #8]
 8012882:	1ed3      	subs	r3, r2, #3
 8012884:	bf48      	it	mi
 8012886:	1d13      	addmi	r3, r2, #4
 8012888:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 801288c:	9101      	str	r1, [sp, #4]
 801288e:	10db      	asrs	r3, r3, #3
 8012890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012894:	ea6f 0b03 	mvn.w	fp, r3
 8012898:	19b9      	adds	r1, r7, r6
 801289a:	9303      	str	r3, [sp, #12]
 801289c:	4682      	mov	sl, r0
 801289e:	eb02 0bcb 	add.w	fp, r2, fp, lsl #3
 80128a2:	eba3 0307 	sub.w	r3, r3, r7
 80128a6:	d414      	bmi.n	80128d2 <__kernel_rem_pio2f+0x62>
 80128a8:	4419      	add	r1, r3
 80128aa:	9865      	ldr	r0, [sp, #404]	; 0x194
 80128ac:	3101      	adds	r1, #1
 80128ae:	aa1a      	add	r2, sp, #104	; 0x68
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	bfaa      	itet	ge
 80128b4:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 80128b8:	eddf 7acc 	vldrlt	s15, [pc, #816]	; 8012bec <__kernel_rem_pio2f+0x37c>
 80128bc:	ee07 4a90 	vmovge	s15, r4
 80128c0:	f103 0301 	add.w	r3, r3, #1
 80128c4:	bfa8      	it	ge
 80128c6:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80128ca:	428b      	cmp	r3, r1
 80128cc:	ece2 7a01 	vstmia	r2!, {s15}
 80128d0:	d1ee      	bne.n	80128b0 <__kernel_rem_pio2f+0x40>
 80128d2:	2e00      	cmp	r6, #0
 80128d4:	db1a      	blt.n	801290c <__kernel_rem_pio2f+0x9c>
 80128d6:	9b02      	ldr	r3, [sp, #8]
 80128d8:	a91a      	add	r1, sp, #104	; 0x68
 80128da:	1c74      	adds	r4, r6, #1
 80128dc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80128e0:	a842      	add	r0, sp, #264	; 0x108
 80128e2:	009d      	lsls	r5, r3, #2
 80128e4:	2f00      	cmp	r7, #0
 80128e6:	f2c0 81ba 	blt.w	8012c5e <__kernel_rem_pio2f+0x3ee>
 80128ea:	eddf 7ac0 	vldr	s15, [pc, #768]	; 8012bec <__kernel_rem_pio2f+0x37c>
 80128ee:	4652      	mov	r2, sl
 80128f0:	194b      	adds	r3, r1, r5
 80128f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80128f6:	ecf2 6a01 	vldmia	r2!, {s13}
 80128fa:	4299      	cmp	r1, r3
 80128fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012900:	d1f7      	bne.n	80128f2 <__kernel_rem_pio2f+0x82>
 8012902:	3104      	adds	r1, #4
 8012904:	42a1      	cmp	r1, r4
 8012906:	ece0 7a01 	vstmia	r0!, {s15}
 801290a:	d1eb      	bne.n	80128e4 <__kernel_rem_pio2f+0x74>
 801290c:	9a02      	ldr	r2, [sp, #8]
 801290e:	eddf 8ab4 	vldr	s17, [pc, #720]	; 8012be0 <__kernel_rem_pio2f+0x370>
 8012912:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 8012be4 <__kernel_rem_pio2f+0x374>
 8012916:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 801291a:	3b01      	subs	r3, #1
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	ebc2 7982 	rsb	r9, r2, r2, lsl #30
 8012922:	aa06      	add	r2, sp, #24
 8012924:	f103 0804 	add.w	r8, r3, #4
 8012928:	4413      	add	r3, r2
 801292a:	4490      	add	r8, r2
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8012932:	4634      	mov	r4, r6
 8012934:	00a5      	lsls	r5, r4, #2
 8012936:	ab56      	add	r3, sp, #344	; 0x158
 8012938:	442b      	add	r3, r5
 801293a:	2c00      	cmp	r4, #0
 801293c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8012940:	dd18      	ble.n	8012974 <__kernel_rem_pio2f+0x104>
 8012942:	a942      	add	r1, sp, #264	; 0x108
 8012944:	194b      	adds	r3, r1, r5
 8012946:	aa05      	add	r2, sp, #20
 8012948:	ee60 7a28 	vmul.f32	s15, s0, s17
 801294c:	eeb0 7a40 	vmov.f32	s14, s0
 8012950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012954:	ed73 6a01 	vldmdb	r3!, {s13}
 8012958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801295c:	428b      	cmp	r3, r1
 801295e:	eea7 7ac8 	vfms.f32	s14, s15, s16
 8012962:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8012966:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801296a:	ee17 0a10 	vmov	r0, s14
 801296e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012972:	d1e9      	bne.n	8012948 <__kernel_rem_pio2f+0xd8>
 8012974:	4658      	mov	r0, fp
 8012976:	f000 fb33 	bl	8012fe0 <scalbnf>
 801297a:	eeb0 9a40 	vmov.f32	s18, s0
 801297e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x40
 8012982:	ee29 0a00 	vmul.f32	s0, s18, s0
 8012986:	f000 fac3 	bl	8012f10 <floorf>
 801298a:	eef2 7a00 	vmov.f32	s15, #32
 801298e:	eea0 9a67 	vfms.f32	s18, s0, s15
 8012992:	f1bb 0f00 	cmp.w	fp, #0
 8012996:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 801299a:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 801299e:	ee39 9a67 	vsub.f32	s18, s18, s15
 80129a2:	f340 8141 	ble.w	8012c28 <__kernel_rem_pio2f+0x3b8>
 80129a6:	1e60      	subs	r0, r4, #1
 80129a8:	aa06      	add	r2, sp, #24
 80129aa:	f1cb 0308 	rsb	r3, fp, #8
 80129ae:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80129b2:	fa41 f203 	asr.w	r2, r1, r3
 80129b6:	fa02 f303 	lsl.w	r3, r2, r3
 80129ba:	f10d 0e18 	add.w	lr, sp, #24
 80129be:	1ac9      	subs	r1, r1, r3
 80129c0:	f84e 1020 	str.w	r1, [lr, r0, lsl #2]
 80129c4:	ee19 0a90 	vmov	r0, s19
 80129c8:	4410      	add	r0, r2
 80129ca:	f1cb 0307 	rsb	r3, fp, #7
 80129ce:	ee09 0a90 	vmov	s19, r0
 80129d2:	4119      	asrs	r1, r3
 80129d4:	2900      	cmp	r1, #0
 80129d6:	dd39      	ble.n	8012a4c <__kernel_rem_pio2f+0x1dc>
 80129d8:	ee19 3a90 	vmov	r3, s19
 80129dc:	2c00      	cmp	r4, #0
 80129de:	f103 0301 	add.w	r3, r3, #1
 80129e2:	ee09 3a90 	vmov	s19, r3
 80129e6:	f340 81cb 	ble.w	8012d80 <__kernel_rem_pio2f+0x510>
 80129ea:	2200      	movs	r2, #0
 80129ec:	4610      	mov	r0, r2
 80129ee:	f10d 0e14 	add.w	lr, sp, #20
 80129f2:	e008      	b.n	8012a06 <__kernel_rem_pio2f+0x196>
 80129f4:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80129f8:	b113      	cbz	r3, 8012a00 <__kernel_rem_pio2f+0x190>
 80129fa:	f8ce c000 	str.w	ip, [lr]
 80129fe:	2001      	movs	r0, #1
 8012a00:	3201      	adds	r2, #1
 8012a02:	4294      	cmp	r4, r2
 8012a04:	dd0c      	ble.n	8012a20 <__kernel_rem_pio2f+0x1b0>
 8012a06:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d0f2      	beq.n	80129f4 <__kernel_rem_pio2f+0x184>
 8012a0e:	3201      	adds	r2, #1
 8012a10:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012a14:	4294      	cmp	r4, r2
 8012a16:	f8ce 3000 	str.w	r3, [lr]
 8012a1a:	f04f 0001 	mov.w	r0, #1
 8012a1e:	dcf2      	bgt.n	8012a06 <__kernel_rem_pio2f+0x196>
 8012a20:	f1bb 0f00 	cmp.w	fp, #0
 8012a24:	dd10      	ble.n	8012a48 <__kernel_rem_pio2f+0x1d8>
 8012a26:	f1bb 0f01 	cmp.w	fp, #1
 8012a2a:	f000 8104 	beq.w	8012c36 <__kernel_rem_pio2f+0x3c6>
 8012a2e:	f1bb 0f02 	cmp.w	fp, #2
 8012a32:	d109      	bne.n	8012a48 <__kernel_rem_pio2f+0x1d8>
 8012a34:	1e62      	subs	r2, r4, #1
 8012a36:	ab06      	add	r3, sp, #24
 8012a38:	f10d 0e18 	add.w	lr, sp, #24
 8012a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a44:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 8012a48:	2902      	cmp	r1, #2
 8012a4a:	d059      	beq.n	8012b00 <__kernel_rem_pio2f+0x290>
 8012a4c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a54:	d166      	bne.n	8012b24 <__kernel_rem_pio2f+0x2b4>
 8012a56:	1e63      	subs	r3, r4, #1
 8012a58:	429e      	cmp	r6, r3
 8012a5a:	dc0b      	bgt.n	8012a74 <__kernel_rem_pio2f+0x204>
 8012a5c:	aa06      	add	r2, sp, #24
 8012a5e:	4415      	add	r5, r2
 8012a60:	2200      	movs	r2, #0
 8012a62:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8012a66:	4545      	cmp	r5, r8
 8012a68:	ea42 0200 	orr.w	r2, r2, r0
 8012a6c:	d1f9      	bne.n	8012a62 <__kernel_rem_pio2f+0x1f2>
 8012a6e:	2a00      	cmp	r2, #0
 8012a70:	f040 8170 	bne.w	8012d54 <__kernel_rem_pio2f+0x4e4>
 8012a74:	1e73      	subs	r3, r6, #1
 8012a76:	aa06      	add	r2, sp, #24
 8012a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f040 817c 	bne.w	8012d7a <__kernel_rem_pio2f+0x50a>
 8012a82:	9b04      	ldr	r3, [sp, #16]
 8012a84:	f04f 0e01 	mov.w	lr, #1
 8012a88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012a8c:	f10e 0e01 	add.w	lr, lr, #1
 8012a90:	2a00      	cmp	r2, #0
 8012a92:	d0f9      	beq.n	8012a88 <__kernel_rem_pio2f+0x218>
 8012a94:	44a6      	add	lr, r4
 8012a96:	1c63      	adds	r3, r4, #1
 8012a98:	4573      	cmp	r3, lr
 8012a9a:	dc2f      	bgt.n	8012afc <__kernel_rem_pio2f+0x28c>
 8012a9c:	9a03      	ldr	r2, [sp, #12]
 8012a9e:	189d      	adds	r5, r3, r2
 8012aa0:	9a02      	ldr	r2, [sp, #8]
 8012aa2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8012aa6:	18a0      	adds	r0, r4, r2
 8012aa8:	eb0e 0c02 	add.w	ip, lr, r2
 8012aac:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012aae:	3d01      	subs	r5, #1
 8012ab0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8012ab4:	aa1a      	add	r2, sp, #104	; 0x68
 8012ab6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8012aba:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8012abe:	aa42      	add	r2, sp, #264	; 0x108
 8012ac0:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8012ac4:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8012ac8:	ee07 3a90 	vmov	s15, r3
 8012acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ad0:	2f00      	cmp	r7, #0
 8012ad2:	ece0 7a01 	vstmia	r0!, {s15}
 8012ad6:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012ada:	db0b      	blt.n	8012af4 <__kernel_rem_pio2f+0x284>
 8012adc:	4652      	mov	r2, sl
 8012ade:	eb00 0109 	add.w	r1, r0, r9
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	ed33 7a01 	vldmdb	r3!, {s14}
 8012ae8:	ecf2 6a01 	vldmia	r2!, {s13}
 8012aec:	428b      	cmp	r3, r1
 8012aee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012af2:	d1f7      	bne.n	8012ae4 <__kernel_rem_pio2f+0x274>
 8012af4:	4560      	cmp	r0, ip
 8012af6:	ece4 7a01 	vstmia	r4!, {s15}
 8012afa:	d1e3      	bne.n	8012ac4 <__kernel_rem_pio2f+0x254>
 8012afc:	4674      	mov	r4, lr
 8012afe:	e719      	b.n	8012934 <__kernel_rem_pio2f+0xc4>
 8012b00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8012b04:	ee30 9a49 	vsub.f32	s18, s0, s18
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d09f      	beq.n	8012a4c <__kernel_rem_pio2f+0x1dc>
 8012b0c:	4658      	mov	r0, fp
 8012b0e:	9105      	str	r1, [sp, #20]
 8012b10:	f000 fa66 	bl	8012fe0 <scalbnf>
 8012b14:	ee39 9a40 	vsub.f32	s18, s18, s0
 8012b18:	9905      	ldr	r1, [sp, #20]
 8012b1a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b22:	d098      	beq.n	8012a56 <__kernel_rem_pio2f+0x1e6>
 8012b24:	eeb0 0a49 	vmov.f32	s0, s18
 8012b28:	f1cb 0000 	rsb	r0, fp, #0
 8012b2c:	9102      	str	r1, [sp, #8]
 8012b2e:	f000 fa57 	bl	8012fe0 <scalbnf>
 8012b32:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8012be4 <__kernel_rem_pio2f+0x374>
 8012b36:	9902      	ldr	r1, [sp, #8]
 8012b38:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b40:	f2c0 817e 	blt.w	8012e40 <__kernel_rem_pio2f+0x5d0>
 8012b44:	eddf 7a26 	vldr	s15, [pc, #152]	; 8012be0 <__kernel_rem_pio2f+0x370>
 8012b48:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012b4c:	a806      	add	r0, sp, #24
 8012b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b52:	1c63      	adds	r3, r4, #1
 8012b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b58:	f10b 0b08 	add.w	fp, fp, #8
 8012b5c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012b68:	ee10 2a10 	vmov	r2, s0
 8012b6c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8012b70:	ee17 2a90 	vmov	r2, s15
 8012b74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8012b78:	4658      	mov	r0, fp
 8012b7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8012b7e:	9303      	str	r3, [sp, #12]
 8012b80:	9102      	str	r1, [sp, #8]
 8012b82:	f000 fa2d 	bl	8012fe0 <scalbnf>
 8012b86:	9b03      	ldr	r3, [sp, #12]
 8012b88:	9902      	ldr	r1, [sp, #8]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f2c0 80c7 	blt.w	8012d1e <__kernel_rem_pio2f+0x4ae>
 8012b90:	f103 0e01 	add.w	lr, r3, #1
 8012b94:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8012b98:	ac42      	add	r4, sp, #264	; 0x108
 8012b9a:	a806      	add	r0, sp, #24
 8012b9c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012be0 <__kernel_rem_pio2f+0x370>
 8012ba0:	4410      	add	r0, r2
 8012ba2:	18a7      	adds	r7, r4, r2
 8012ba4:	ed70 7a01 	vldmdb	r0!, {s15}
 8012ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bac:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012bb0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012bb4:	ed67 7a01 	vstmdb	r7!, {s15}
 8012bb8:	42a7      	cmp	r7, r4
 8012bba:	d1f3      	bne.n	8012ba4 <__kernel_rem_pio2f+0x334>
 8012bbc:	3a04      	subs	r2, #4
 8012bbe:	4417      	add	r7, r2
 8012bc0:	2500      	movs	r5, #0
 8012bc2:	2e00      	cmp	r6, #0
 8012bc4:	f2c0 80a8 	blt.w	8012d18 <__kernel_rem_pio2f+0x4a8>
 8012bc8:	2d00      	cmp	r5, #0
 8012bca:	f2c0 80a5 	blt.w	8012d18 <__kernel_rem_pio2f+0x4a8>
 8012bce:	4c06      	ldr	r4, [pc, #24]	; (8012be8 <__kernel_rem_pio2f+0x378>)
 8012bd0:	eddf 7a06 	vldr	s15, [pc, #24]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	e00c      	b.n	8012bf4 <__kernel_rem_pio2f+0x384>
 8012bda:	bf00      	nop
 8012bdc:	08013b00 	.word	0x08013b00
 8012be0:	3b800000 	.word	0x3b800000
 8012be4:	43800000 	.word	0x43800000
 8012be8:	08013b10 	.word	0x08013b10
 8012bec:	00000000 	.word	0x00000000
 8012bf0:	42aa      	cmp	r2, r5
 8012bf2:	dc08      	bgt.n	8012c06 <__kernel_rem_pio2f+0x396>
 8012bf4:	ecf4 6a01 	vldmia	r4!, {s13}
 8012bf8:	ecb0 7a01 	vldmia	r0!, {s14}
 8012bfc:	3201      	adds	r2, #1
 8012bfe:	4296      	cmp	r6, r2
 8012c00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012c04:	daf4      	bge.n	8012bf0 <__kernel_rem_pio2f+0x380>
 8012c06:	aa56      	add	r2, sp, #344	; 0x158
 8012c08:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012c0c:	3501      	adds	r5, #1
 8012c0e:	4575      	cmp	r5, lr
 8012c10:	f1a7 0704 	sub.w	r7, r7, #4
 8012c14:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8012c18:	d1d3      	bne.n	8012bc2 <__kernel_rem_pio2f+0x352>
 8012c1a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012c1c:	2a03      	cmp	r2, #3
 8012c1e:	d85f      	bhi.n	8012ce0 <__kernel_rem_pio2f+0x470>
 8012c20:	e8df f002 	tbb	[pc, r2]
 8012c24:	b0373767 	.word	0xb0373767
 8012c28:	d110      	bne.n	8012c4c <__kernel_rem_pio2f+0x3dc>
 8012c2a:	1e63      	subs	r3, r4, #1
 8012c2c:	aa06      	add	r2, sp, #24
 8012c2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012c32:	1209      	asrs	r1, r1, #8
 8012c34:	e6ce      	b.n	80129d4 <__kernel_rem_pio2f+0x164>
 8012c36:	1e62      	subs	r2, r4, #1
 8012c38:	ab06      	add	r3, sp, #24
 8012c3a:	f10d 0e18 	add.w	lr, sp, #24
 8012c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c46:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 8012c4a:	e6fd      	b.n	8012a48 <__kernel_rem_pio2f+0x1d8>
 8012c4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8012c50:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c58:	da0a      	bge.n	8012c70 <__kernel_rem_pio2f+0x400>
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	e6f6      	b.n	8012a4c <__kernel_rem_pio2f+0x1dc>
 8012c5e:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012c62:	3104      	adds	r1, #4
 8012c64:	42a1      	cmp	r1, r4
 8012c66:	ece0 7a01 	vstmia	r0!, {s15}
 8012c6a:	f47f ae3b 	bne.w	80128e4 <__kernel_rem_pio2f+0x74>
 8012c6e:	e64d      	b.n	801290c <__kernel_rem_pio2f+0x9c>
 8012c70:	ee19 3a90 	vmov	r3, s19
 8012c74:	2c00      	cmp	r4, #0
 8012c76:	f103 0301 	add.w	r3, r3, #1
 8012c7a:	ee09 3a90 	vmov	s19, r3
 8012c7e:	bfc8      	it	gt
 8012c80:	2102      	movgt	r1, #2
 8012c82:	f73f aeb2 	bgt.w	80129ea <__kernel_rem_pio2f+0x17a>
 8012c86:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8012c8a:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8012c8e:	2102      	movs	r1, #2
 8012c90:	e6dc      	b.n	8012a4c <__kernel_rem_pio2f+0x1dc>
 8012c92:	aa2e      	add	r2, sp, #184	; 0xb8
 8012c94:	ed5f 7a2b 	vldr	s15, [pc, #-172]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012c98:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8012c9c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8012ca0:	4596      	cmp	lr, r2
 8012ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ca6:	d1f9      	bne.n	8012c9c <__kernel_rem_pio2f+0x42c>
 8012ca8:	2900      	cmp	r1, #0
 8012caa:	d043      	beq.n	8012d34 <__kernel_rem_pio2f+0x4c4>
 8012cac:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8012cb0:	9a01      	ldr	r2, [sp, #4]
 8012cb2:	eeb1 7a67 	vneg.f32	s14, s15
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012cbc:	ed82 7a00 	vstr	s14, [r2]
 8012cc0:	dd09      	ble.n	8012cd6 <__kernel_rem_pio2f+0x466>
 8012cc2:	a82f      	add	r0, sp, #188	; 0xbc
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	ecb0 7a01 	vldmia	r0!, {s14}
 8012cca:	3201      	adds	r2, #1
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012cd2:	daf8      	bge.n	8012cc6 <__kernel_rem_pio2f+0x456>
 8012cd4:	b109      	cbz	r1, 8012cda <__kernel_rem_pio2f+0x46a>
 8012cd6:	eef1 7a67 	vneg.f32	s15, s15
 8012cda:	9b01      	ldr	r3, [sp, #4]
 8012cdc:	edc3 7a01 	vstr	s15, [r3, #4]
 8012ce0:	ee19 3a90 	vmov	r3, s19
 8012ce4:	f003 0007 	and.w	r0, r3, #7
 8012ce8:	b057      	add	sp, #348	; 0x15c
 8012cea:	ecbd 8b04 	vpop	{d8-d9}
 8012cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf2:	aa2e      	add	r2, sp, #184	; 0xb8
 8012cf4:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012cf8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8012cfc:	ed3e 7a01 	vldmdb	lr!, {s14}
 8012d00:	3b01      	subs	r3, #1
 8012d02:	1c5a      	adds	r2, r3, #1
 8012d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d08:	d1f8      	bne.n	8012cfc <__kernel_rem_pio2f+0x48c>
 8012d0a:	b109      	cbz	r1, 8012d10 <__kernel_rem_pio2f+0x4a0>
 8012d0c:	eef1 7a67 	vneg.f32	s15, s15
 8012d10:	9b01      	ldr	r3, [sp, #4]
 8012d12:	edc3 7a00 	vstr	s15, [r3]
 8012d16:	e7e3      	b.n	8012ce0 <__kernel_rem_pio2f+0x470>
 8012d18:	ed5f 7a4c 	vldr	s15, [pc, #-304]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012d1c:	e773      	b.n	8012c06 <__kernel_rem_pio2f+0x396>
 8012d1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012d20:	2a03      	cmp	r2, #3
 8012d22:	d8dd      	bhi.n	8012ce0 <__kernel_rem_pio2f+0x470>
 8012d24:	e8df f002 	tbb	[pc, r2]
 8012d28:	80020213 	.word	0x80020213
 8012d2c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012d30:	2900      	cmp	r1, #0
 8012d32:	d1bb      	bne.n	8012cac <__kernel_rem_pio2f+0x43c>
 8012d34:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8012d38:	9a01      	ldr	r2, [sp, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	edc2 7a00 	vstr	s15, [r2]
 8012d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d44:	dcbd      	bgt.n	8012cc2 <__kernel_rem_pio2f+0x452>
 8012d46:	9b01      	ldr	r3, [sp, #4]
 8012d48:	edc3 7a01 	vstr	s15, [r3, #4]
 8012d4c:	e7c8      	b.n	8012ce0 <__kernel_rem_pio2f+0x470>
 8012d4e:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012d52:	e7da      	b.n	8012d0a <__kernel_rem_pio2f+0x49a>
 8012d54:	aa06      	add	r2, sp, #24
 8012d56:	f1ab 0b08 	sub.w	fp, fp, #8
 8012d5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012d5e:	2a00      	cmp	r2, #0
 8012d60:	f47f af0a 	bne.w	8012b78 <__kernel_rem_pio2f+0x308>
 8012d64:	aa06      	add	r2, sp, #24
 8012d66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012d6a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012d6e:	3b01      	subs	r3, #1
 8012d70:	f1ab 0b08 	sub.w	fp, fp, #8
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d0f8      	beq.n	8012d6a <__kernel_rem_pio2f+0x4fa>
 8012d78:	e6fe      	b.n	8012b78 <__kernel_rem_pio2f+0x308>
 8012d7a:	f04f 0e01 	mov.w	lr, #1
 8012d7e:	e689      	b.n	8012a94 <__kernel_rem_pio2f+0x224>
 8012d80:	2000      	movs	r0, #0
 8012d82:	e64d      	b.n	8012a20 <__kernel_rem_pio2f+0x1b0>
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	dd4f      	ble.n	8012e28 <__kernel_rem_pio2f+0x5b8>
 8012d88:	009a      	lsls	r2, r3, #2
 8012d8a:	a856      	add	r0, sp, #344	; 0x158
 8012d8c:	4410      	add	r0, r2
 8012d8e:	ad2e      	add	r5, sp, #184	; 0xb8
 8012d90:	1d14      	adds	r4, r2, #4
 8012d92:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 8012d96:	442c      	add	r4, r5
 8012d98:	18a8      	adds	r0, r5, r2
 8012d9a:	ed70 7a01 	vldmdb	r0!, {s15}
 8012d9e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012da2:	42a8      	cmp	r0, r5
 8012da4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012dac:	eeb0 7a66 	vmov.f32	s14, s13
 8012db0:	ed64 7a01 	vstmdb	r4!, {s15}
 8012db4:	edc0 6a00 	vstr	s13, [r0]
 8012db8:	d1ef      	bne.n	8012d9a <__kernel_rem_pio2f+0x52a>
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	dd34      	ble.n	8012e28 <__kernel_rem_pio2f+0x5b8>
 8012dbe:	1d13      	adds	r3, r2, #4
 8012dc0:	ac56      	add	r4, sp, #344	; 0x158
 8012dc2:	4414      	add	r4, r2
 8012dc4:	4403      	add	r3, r0
 8012dc6:	ed14 7a28 	vldr	s14, [r4, #-160]	; 0xffffff60
 8012dca:	4402      	add	r2, r0
 8012dcc:	ac2f      	add	r4, sp, #188	; 0xbc
 8012dce:	4618      	mov	r0, r3
 8012dd0:	ed72 7a01 	vldmdb	r2!, {s15}
 8012dd4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012dd8:	42a2      	cmp	r2, r4
 8012dda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012dde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012de2:	eeb0 7a66 	vmov.f32	s14, s13
 8012de6:	ed60 7a01 	vstmdb	r0!, {s15}
 8012dea:	edc2 6a00 	vstr	s13, [r2]
 8012dee:	d1ef      	bne.n	8012dd0 <__kernel_rem_pio2f+0x560>
 8012df0:	ed5f 7a82 	vldr	s15, [pc, #-520]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012df4:	aa30      	add	r2, sp, #192	; 0xc0
 8012df6:	ed33 7a01 	vldmdb	r3!, {s14}
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e00:	d1f9      	bne.n	8012df6 <__kernel_rem_pio2f+0x586>
 8012e02:	b1a9      	cbz	r1, 8012e30 <__kernel_rem_pio2f+0x5c0>
 8012e04:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8012e08:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8012e0c:	9a01      	ldr	r2, [sp, #4]
 8012e0e:	eef1 7a67 	vneg.f32	s15, s15
 8012e12:	eef1 6a66 	vneg.f32	s13, s13
 8012e16:	eeb1 7a47 	vneg.f32	s14, s14
 8012e1a:	edc2 7a02 	vstr	s15, [r2, #8]
 8012e1e:	edc2 6a00 	vstr	s13, [r2]
 8012e22:	ed82 7a01 	vstr	s14, [r2, #4]
 8012e26:	e75b      	b.n	8012ce0 <__kernel_rem_pio2f+0x470>
 8012e28:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8012bec <__kernel_rem_pio2f+0x37c>
 8012e2c:	2900      	cmp	r1, #0
 8012e2e:	d1e9      	bne.n	8012e04 <__kernel_rem_pio2f+0x594>
 8012e30:	9801      	ldr	r0, [sp, #4]
 8012e32:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8012e34:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012e36:	edc0 7a02 	vstr	s15, [r0, #8]
 8012e3a:	6002      	str	r2, [r0, #0]
 8012e3c:	6043      	str	r3, [r0, #4]
 8012e3e:	e74f      	b.n	8012ce0 <__kernel_rem_pio2f+0x470>
 8012e40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012e44:	a806      	add	r0, sp, #24
 8012e46:	ee10 2a10 	vmov	r2, s0
 8012e4a:	4623      	mov	r3, r4
 8012e4c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8012e50:	e692      	b.n	8012b78 <__kernel_rem_pio2f+0x308>
 8012e52:	bf00      	nop
	...

08012e60 <__kernel_sinf>:
 8012e60:	ee10 3a10 	vmov	r3, s0
 8012e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012e6c:	da04      	bge.n	8012e78 <__kernel_sinf+0x18>
 8012e6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012e72:	ee17 3a90 	vmov	r3, s15
 8012e76:	b323      	cbz	r3, 8012ec2 <__kernel_sinf+0x62>
 8012e78:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012e7c:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8012ed4 <__kernel_sinf+0x74>
 8012e80:	eddf 5a15 	vldr	s11, [pc, #84]	; 8012ed8 <__kernel_sinf+0x78>
 8012e84:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012edc <__kernel_sinf+0x7c>
 8012e88:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012ee0 <__kernel_sinf+0x80>
 8012e8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012ee4 <__kernel_sinf+0x84>
 8012e90:	eee7 5a85 	vfma.f32	s11, s15, s10
 8012e94:	ee27 5a80 	vmul.f32	s10, s15, s0
 8012e98:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012e9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012ea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ea4:	b170      	cbz	r0, 8012ec4 <__kernel_sinf+0x64>
 8012ea6:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8012eaa:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 8012eae:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8012eb2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8012ee8 <__kernel_sinf+0x88>
 8012eb6:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8012eba:	eee5 0a26 	vfma.f32	s1, s10, s13
 8012ebe:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012ec2:	4770      	bx	lr
 8012ec4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8012eec <__kernel_sinf+0x8c>
 8012ec8:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012ecc:	eea6 0a85 	vfma.f32	s0, s13, s10
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	2f2ec9d3 	.word	0x2f2ec9d3
 8012ed8:	b2d72f34 	.word	0xb2d72f34
 8012edc:	3638ef1b 	.word	0x3638ef1b
 8012ee0:	b9500d01 	.word	0xb9500d01
 8012ee4:	3c088889 	.word	0x3c088889
 8012ee8:	3e2aaaab 	.word	0x3e2aaaab
 8012eec:	be2aaaab 	.word	0xbe2aaaab

08012ef0 <matherr>:
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	4770      	bx	lr
	...

08012f00 <fabsf>:
 8012f00:	ee10 3a10 	vmov	r3, s0
 8012f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f08:	ee00 3a10 	vmov	s0, r3
 8012f0c:	4770      	bx	lr
 8012f0e:	bf00      	nop

08012f10 <floorf>:
 8012f10:	ee10 2a10 	vmov	r2, s0
 8012f14:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012f18:	0dcb      	lsrs	r3, r1, #23
 8012f1a:	3b7f      	subs	r3, #127	; 0x7f
 8012f1c:	2b16      	cmp	r3, #22
 8012f1e:	dc17      	bgt.n	8012f50 <floorf+0x40>
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	ee10 0a10 	vmov	r0, s0
 8012f26:	db19      	blt.n	8012f5c <floorf+0x4c>
 8012f28:	491a      	ldr	r1, [pc, #104]	; (8012f94 <floorf+0x84>)
 8012f2a:	4119      	asrs	r1, r3
 8012f2c:	4211      	tst	r1, r2
 8012f2e:	d022      	beq.n	8012f76 <floorf+0x66>
 8012f30:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012f98 <floorf+0x88>
 8012f34:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f40:	dd19      	ble.n	8012f76 <floorf+0x66>
 8012f42:	2a00      	cmp	r2, #0
 8012f44:	db18      	blt.n	8012f78 <floorf+0x68>
 8012f46:	ea20 0301 	bic.w	r3, r0, r1
 8012f4a:	ee00 3a10 	vmov	s0, r3
 8012f4e:	4770      	bx	lr
 8012f50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012f54:	d30f      	bcc.n	8012f76 <floorf+0x66>
 8012f56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f5a:	4770      	bx	lr
 8012f5c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8012f98 <floorf+0x88>
 8012f60:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6c:	dd03      	ble.n	8012f76 <floorf+0x66>
 8012f6e:	2a00      	cmp	r2, #0
 8012f70:	db08      	blt.n	8012f84 <floorf+0x74>
 8012f72:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012f9c <floorf+0x8c>
 8012f76:	4770      	bx	lr
 8012f78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8012f7c:	fa42 f303 	asr.w	r3, r2, r3
 8012f80:	4418      	add	r0, r3
 8012f82:	e7e0      	b.n	8012f46 <floorf+0x36>
 8012f84:	2900      	cmp	r1, #0
 8012f86:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 8012f8a:	bf18      	it	ne
 8012f8c:	eeb0 0a67 	vmovne.f32	s0, s15
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop
 8012f94:	007fffff 	.word	0x007fffff
 8012f98:	7149f2ca 	.word	0x7149f2ca
 8012f9c:	00000000 	.word	0x00000000

08012fa0 <__fpclassifyf>:
 8012fa0:	ee10 3a10 	vmov	r3, s0
 8012fa4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8012fa8:	d101      	bne.n	8012fae <__fpclassifyf+0xe>
 8012faa:	2002      	movs	r0, #2
 8012fac:	4770      	bx	lr
 8012fae:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8012fb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012fb6:	d201      	bcs.n	8012fbc <__fpclassifyf+0x1c>
 8012fb8:	2004      	movs	r0, #4
 8012fba:	4770      	bx	lr
 8012fbc:	4b05      	ldr	r3, [pc, #20]	; (8012fd4 <__fpclassifyf+0x34>)
 8012fbe:	1e42      	subs	r2, r0, #1
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d801      	bhi.n	8012fc8 <__fpclassifyf+0x28>
 8012fc4:	2003      	movs	r0, #3
 8012fc6:	4770      	bx	lr
 8012fc8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 8012fcc:	fab0 f080 	clz	r0, r0
 8012fd0:	0940      	lsrs	r0, r0, #5
 8012fd2:	4770      	bx	lr
 8012fd4:	007ffffe 	.word	0x007ffffe
	...

08012fe0 <scalbnf>:
 8012fe0:	b508      	push	{r3, lr}
 8012fe2:	ee10 3a10 	vmov	r3, s0
 8012fe6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012fea:	ed2d 8b02 	vpush	{d8}
 8012fee:	d011      	beq.n	8013014 <scalbnf+0x34>
 8012ff0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012ff4:	d211      	bcs.n	801301a <scalbnf+0x3a>
 8012ff6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012ffa:	d313      	bcc.n	8013024 <scalbnf+0x44>
 8012ffc:	0dd2      	lsrs	r2, r2, #23
 8012ffe:	4402      	add	r2, r0
 8013000:	2afe      	cmp	r2, #254	; 0xfe
 8013002:	dc2e      	bgt.n	8013062 <scalbnf+0x82>
 8013004:	2a00      	cmp	r2, #0
 8013006:	dd1a      	ble.n	801303e <scalbnf+0x5e>
 8013008:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801300c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013010:	ee00 3a10 	vmov	s0, r3
 8013014:	ecbd 8b02 	vpop	{d8}
 8013018:	bd08      	pop	{r3, pc}
 801301a:	ecbd 8b02 	vpop	{d8}
 801301e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013022:	bd08      	pop	{r3, pc}
 8013024:	4b1d      	ldr	r3, [pc, #116]	; (801309c <scalbnf+0xbc>)
 8013026:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80130a0 <scalbnf+0xc0>
 801302a:	4298      	cmp	r0, r3
 801302c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013030:	db22      	blt.n	8013078 <scalbnf+0x98>
 8013032:	ee10 3a10 	vmov	r3, s0
 8013036:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801303a:	3a19      	subs	r2, #25
 801303c:	e7df      	b.n	8012ffe <scalbnf+0x1e>
 801303e:	f112 0f16 	cmn.w	r2, #22
 8013042:	da1e      	bge.n	8013082 <scalbnf+0xa2>
 8013044:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013048:	4298      	cmp	r0, r3
 801304a:	dc0a      	bgt.n	8013062 <scalbnf+0x82>
 801304c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80130a4 <scalbnf+0xc4>
 8013050:	eef0 0a40 	vmov.f32	s1, s0
 8013054:	eeb0 0a48 	vmov.f32	s0, s16
 8013058:	f000 f82a 	bl	80130b0 <copysignf>
 801305c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013060:	e7d8      	b.n	8013014 <scalbnf+0x34>
 8013062:	ed9f 8a11 	vldr	s16, [pc, #68]	; 80130a8 <scalbnf+0xc8>
 8013066:	eef0 0a40 	vmov.f32	s1, s0
 801306a:	eeb0 0a48 	vmov.f32	s0, s16
 801306e:	f000 f81f 	bl	80130b0 <copysignf>
 8013072:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013076:	e7cd      	b.n	8013014 <scalbnf+0x34>
 8013078:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80130a4 <scalbnf+0xc4>
 801307c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8013080:	e7c8      	b.n	8013014 <scalbnf+0x34>
 8013082:	3219      	adds	r2, #25
 8013084:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013088:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801308c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80130ac <scalbnf+0xcc>
 8013090:	ee00 3a10 	vmov	s0, r3
 8013094:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013098:	e7bc      	b.n	8013014 <scalbnf+0x34>
 801309a:	bf00      	nop
 801309c:	ffff3cb0 	.word	0xffff3cb0
 80130a0:	4c000000 	.word	0x4c000000
 80130a4:	0da24260 	.word	0x0da24260
 80130a8:	7149f2ca 	.word	0x7149f2ca
 80130ac:	33000000 	.word	0x33000000

080130b0 <copysignf>:
 80130b0:	ee10 3a10 	vmov	r3, s0
 80130b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80130b8:	ee10 3a90 	vmov	r3, s1
 80130bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130c0:	4313      	orrs	r3, r2
 80130c2:	ee00 3a10 	vmov	s0, r3
 80130c6:	4770      	bx	lr
	...

080130d0 <__errno>:
 80130d0:	4b01      	ldr	r3, [pc, #4]	; (80130d8 <__errno+0x8>)
 80130d2:	6818      	ldr	r0, [r3, #0]
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop
 80130d8:	20000c38 	.word	0x20000c38
 80130dc:	00000000 	.word	0x00000000

080130e0 <memset>:
 80130e0:	b470      	push	{r4, r5, r6}
 80130e2:	0784      	lsls	r4, r0, #30
 80130e4:	d046      	beq.n	8013174 <memset+0x94>
 80130e6:	1e54      	subs	r4, r2, #1
 80130e8:	2a00      	cmp	r2, #0
 80130ea:	d041      	beq.n	8013170 <memset+0x90>
 80130ec:	b2cd      	uxtb	r5, r1
 80130ee:	4603      	mov	r3, r0
 80130f0:	e002      	b.n	80130f8 <memset+0x18>
 80130f2:	1e62      	subs	r2, r4, #1
 80130f4:	b3e4      	cbz	r4, 8013170 <memset+0x90>
 80130f6:	4614      	mov	r4, r2
 80130f8:	f803 5b01 	strb.w	r5, [r3], #1
 80130fc:	079a      	lsls	r2, r3, #30
 80130fe:	d1f8      	bne.n	80130f2 <memset+0x12>
 8013100:	2c03      	cmp	r4, #3
 8013102:	d92e      	bls.n	8013162 <memset+0x82>
 8013104:	b2cd      	uxtb	r5, r1
 8013106:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801310a:	2c0f      	cmp	r4, #15
 801310c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8013110:	d919      	bls.n	8013146 <memset+0x66>
 8013112:	f103 0210 	add.w	r2, r3, #16
 8013116:	4626      	mov	r6, r4
 8013118:	3e10      	subs	r6, #16
 801311a:	2e0f      	cmp	r6, #15
 801311c:	f842 5c10 	str.w	r5, [r2, #-16]
 8013120:	f842 5c0c 	str.w	r5, [r2, #-12]
 8013124:	f842 5c08 	str.w	r5, [r2, #-8]
 8013128:	f842 5c04 	str.w	r5, [r2, #-4]
 801312c:	f102 0210 	add.w	r2, r2, #16
 8013130:	d8f2      	bhi.n	8013118 <memset+0x38>
 8013132:	f1a4 0210 	sub.w	r2, r4, #16
 8013136:	f022 020f 	bic.w	r2, r2, #15
 801313a:	f004 040f 	and.w	r4, r4, #15
 801313e:	3210      	adds	r2, #16
 8013140:	2c03      	cmp	r4, #3
 8013142:	4413      	add	r3, r2
 8013144:	d90d      	bls.n	8013162 <memset+0x82>
 8013146:	461e      	mov	r6, r3
 8013148:	4622      	mov	r2, r4
 801314a:	3a04      	subs	r2, #4
 801314c:	2a03      	cmp	r2, #3
 801314e:	f846 5b04 	str.w	r5, [r6], #4
 8013152:	d8fa      	bhi.n	801314a <memset+0x6a>
 8013154:	1f22      	subs	r2, r4, #4
 8013156:	f022 0203 	bic.w	r2, r2, #3
 801315a:	3204      	adds	r2, #4
 801315c:	4413      	add	r3, r2
 801315e:	f004 0403 	and.w	r4, r4, #3
 8013162:	b12c      	cbz	r4, 8013170 <memset+0x90>
 8013164:	b2c9      	uxtb	r1, r1
 8013166:	441c      	add	r4, r3
 8013168:	f803 1b01 	strb.w	r1, [r3], #1
 801316c:	42a3      	cmp	r3, r4
 801316e:	d1fb      	bne.n	8013168 <memset+0x88>
 8013170:	bc70      	pop	{r4, r5, r6}
 8013172:	4770      	bx	lr
 8013174:	4614      	mov	r4, r2
 8013176:	4603      	mov	r3, r0
 8013178:	e7c2      	b.n	8013100 <memset+0x20>
 801317a:	bf00      	nop
 801317c:	0000      	movs	r0, r0
 801317e:	0000      	movs	r0, r0
 8013180:	656c6469 	.word	0x656c6469
	...

08013190 <ch_debug>:
 8013190:	6e69616d 18011600 08480404 1814100c     main......H.....
 80131a0:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

080131b0 <vmt>:
 80131b0:	0800d7f1 0800d7d1 0800d831 0800d811     ........1.......
 80131c0:	0800d821 0800d801 0800d7e1 0800d7c1     !...............

080131d0 <zero_status>:
	...

080131e0 <active_status>:
	...

080131f0 <halted_status>:
 80131f0:	00000001 00000000 00000000 00000000     ................

08013200 <_stm32_dma_streams>:
 8013200:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8013210:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8013220:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8013230:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8013240:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8013250:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8013260:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8013270:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8013280:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8013290:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80132a0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80132b0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080132c0 <fsparams>:
 80132c0:	00000080 00000140 00000003 00000000     ....@...........
 80132d0:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

080132e0 <ep0config>:
 80132e0:	00000000 0800dc01 0800df51 0800e021     ........Q...!...
 80132f0:	00400040 20001230 20001230 00000001     @.@.0.. 0.. ....
 8013300:	20001244 00000000 00000000 00000000     D.. ............

08013310 <pal_default_config>:
 8013310:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8013320:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8013330:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8013340:	04000000 00000040 02208001 00000000     ....@..... .....
 8013350:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8013360:	00060600 55000100 00000000 ffffffff     .......U........
 8013370:	00555055 00000fff 00000000 00000000     UPU.............
 8013380:	00000040 00000000 ffffffff 00000000     @...............
 8013390:	0000ffff 00000000 00000000 00000000     ................
 80133a0:	00000000 ffffffff 00000000 0000ffff     ................
	...
 80133c0:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80133dc:	ffffffff 00000000 0000ffff 00000000     ................
	...
 80133f8:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8013410:	6e69614d 72657020 69646f69 00000063     Main periodic...
 8013420:	74726175 20787220 636f7270 00737365     uart rx process.

08013430 <mavlink_message_crcs.11197>:
 8013430:	00897c32 7768d9ed 59000000 00000000     2|....hw...Y....
 8013440:	00000000 a8dc9fd6 90aa1718 f6277343     ............Cs'.
 8013450:	f4ed68b9 fe09d4de 841c1ce6 990be8dd     .h..............
 8013460:	c44e2729 030f0000 00000000 33b79900     )'N............3
 8013470:	1594763b 007cf300 9e142600 00008f98     ;v....|..&......
 8013480:	16316a00 96058c8f 3fb7e700 00000036     .j1........?6...
 8013490:	00000000 d09e66af 6c8a5d38 2254b920     .....f..8].l .T"
 80134a0:	04ed7cae 7438804c facbed86 19dccb57     .|..L.8t....W...
 80134b0:	df1d2ee2 cbe50655 a86dc301 83482fb5     ....U.....m../H.
 80134c0:	9a67007f 0000c8b2 00000000 00000000     ..g.............
	...
 801350c:	0000b125 00000000 69a30000 00000000     %..........i....
 801351c:	00000000 55685a00 00b8825f aa31cc08     .....ZhU_.....1.
 801352c:	002e532c 7770636d 6974206d 0072656d     ,S..mcpwm timer.
 801353c:	00000000                                ....

08013540 <ep1config>:
 8013540:	00000002 00000000 0800d971 0800d9e1     ........q.......
 8013550:	00400040 20002ca8 20002cbc 00000002     @.@..,. .,. ....
	...

08013570 <vcom_configuration_descriptor>:
 8013570:	00000043 080135c0 00000000 00000000     C....5..........

08013580 <ep2config>:
 8013580:	00000003 00000000 0800da51 00000000     ........Q.......
 8013590:	00000010 20002a3c 00000000 00000001     ....<*. ........
	...

080135b0 <usbcfg>:
 80135b0:	08010c41 08010c11 0800d931 00000000     A.......1.......

080135c0 <vcom_configuration_descriptor_data>:
 80135c0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80135d0:	24050001 05011000 01000124 02022404     ...$....$....$..
 80135e0:	00062405 82050701 ff000803 00010409     .$..............
 80135f0:	00000a02 01050700 00004002 02810507     .........@......
 8013600:	00000040 00000000 00000000 00000000     @...............

08013610 <vcom_device_descriptor_data>:
 8013610:	01100112 40000002 57400483 02010200     .......@..@W....
 8013620:	00000103 00000000 00000000 00000000     ................

08013630 <vcom_string0>:
 8013630:	04090304 00000000 00000000 00000000     ................

08013640 <vcom_string1>:
 8013640:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8013650:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8013660:	00630069 00000073 00000000 00000000     i.c.s...........

08013670 <vcom_string2>:
 8013670:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8013680:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8013690:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 80136a0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

080136b0 <vcom_string3>:
 80136b0:	00330308 00310030 00000000 00000000     ..3.0.1.........

080136c0 <vcom_strings>:
 80136c0:	00000004 08013630 00000026 08013640     ....06..&...@6..
 80136d0:	00000038 08013670 00000008 080136b0     8...p6.......6..

080136e0 <serusbcfg>:
 80136e0:	20000fb0 00020101 00000000 00000000     ... ............

080136f0 <vcom_device_descriptor>:
 80136f0:	00000012 08013610 00000000 00000000     .....6..........

08013700 <flash_sector>:
 8013700:	00080000 00180010 00280020 00380030     ........ .(.0.8.
 8013710:	00480040 00580050 00000000 00000000     @.H.P.X.........

08013720 <flash_addr>:
 8013720:	08000000 08004000 08008000 0800c000     .....@..........
 8013730:	08010000 08020000 08040000 08060000     ................
 8013740:	08080000 080a0000 080c0000 080e0000     ................
 8013750:	74727173 00000066 00000000 00000000     sqrtf...........

08013760 <npio2_hw>:
 8013760:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8013770:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8013780:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8013790:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80137a0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80137b0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80137c0:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80137d0:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080137e0 <two_over_pi>:
 80137e0:	000000a2 000000f9 00000083 0000006e     ............n...
 80137f0:	0000004e 00000044 00000015 00000029     N...D.......)...
 8013800:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8013810:	000000f5 00000034 000000dd 000000c0     ....4...........
 8013820:	000000db 00000062 00000095 00000099     ....b...........
 8013830:	0000003c 00000043 00000090 00000041     <...C.......A...
 8013840:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8013850:	000000de 000000bb 000000c5 00000061     ............a...
 8013860:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8013870:	00000042 0000004d 000000d2 000000e0     B...M...........
 8013880:	00000006 00000049 0000002e 000000ea     ....I...........
 8013890:	00000009 000000d1 00000092 0000001c     ................
 80138a0:	000000fe 0000001d 000000eb 0000001c     ................
 80138b0:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80138c0:	000000e8 00000082 00000035 000000f5     ........5.......
 80138d0:	0000002e 000000bb 00000044 00000084     ........D.......
 80138e0:	000000e9 0000009c 00000070 00000026     ........p...&...
 80138f0:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8013900:	00000039 00000091 000000d6 00000039     9...........9...
 8013910:	00000083 00000053 00000039 000000f4     ....S...9.......
 8013920:	0000009c 00000084 0000005f 0000008b     ........_.......
 8013930:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8013940:	0000001f 000000f8 00000097 000000ff     ................
 8013950:	000000de 00000005 00000098 0000000f     ................
 8013960:	000000ef 0000002f 00000011 0000008b     ..../...........
 8013970:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8013980:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8013990:	00000027 000000cb 00000009 000000b7     '...............
 80139a0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80139b0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80139c0:	00000075 00000027 000000ba 000000c7     u...'...........
 80139d0:	000000eb 000000e5 000000f1 0000007b     ............{...
 80139e0:	0000003d 00000007 00000039 000000f7     =.......9.......
 80139f0:	0000008a 00000052 00000092 000000ea     ....R...........
 8013a00:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8013a10:	0000001f 0000008d 0000005d 00000008     ........].......
 8013a20:	00000056 00000003 00000030 00000046     V.......0...F...
 8013a30:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8013a40:	000000f0 000000cf 000000bc 00000020     ............ ...
 8013a50:	0000009a 000000f4 00000036 0000001d     ........6.......
 8013a60:	000000a9 000000e3 00000091 00000061     ............a...
 8013a70:	0000005e 000000e6 0000001b 00000008     ^...............
 8013a80:	00000065 00000099 00000085 0000005f     e..........._...
 8013a90:	00000014 000000a0 00000068 00000040     ........h...@...
 8013aa0:	0000008d 000000ff 000000d8 00000080     ................
 8013ab0:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8013ac0:	00000006 00000006 00000015 00000056     ............V...
 8013ad0:	000000ca 00000073 000000a8 000000c9     ....s...........
 8013ae0:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8013af0:	0000008c 0000006b 00000000 00000000     ....k...........

08013b00 <init_jk>:
 8013b00:	00000004 00000007 00000009 00000000     ................

08013b10 <PIo2>:
 8013b10:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8013b20:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8013b30:	1fc40000 1bc60000 17440000 00000000     ..........D.....
 8013b40:	00000043                                C...
