

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
    
namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{220, new MavPacketInfo(Deserialize_SET_VELOCITY, 100)},
			{0, new MavPacketInfo(Deserialize_DEBUG_STRING, 50)},
		};

		internal static MavlinkMessage Deserialize_SET_VELOCITY(byte[] bytes, int offset)
		{
			return new Msg_set_velocity
			{
				ref_angular_velocity = bitconverter.ToUInt16(bytes, offset + 0),
			};
		}

		internal static MavlinkMessage Deserialize_DEBUG_STRING(byte[] bytes, int offset)
		{
			return new Msg_debug_string
			{
				dbg_str =  ByteArrayUtil.ToChar(bytes, offset + 0, 250),
			};
		}

		internal static int Serialize_SET_VELOCITY(this Msg_set_velocity msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.ref_angular_velocity, bytes, offset + 0);
			offset += 2;
			return 220;
		}

		internal static int Serialize_DEBUG_STRING(this Msg_debug_string msg, byte[] bytes, ref int offset)
		{
			ByteArrayUtil.ToByteArray(msg.dbg_str, bytes, offset + 0, 250);
			offset += 250;
			return 0;
		}
	}

}

