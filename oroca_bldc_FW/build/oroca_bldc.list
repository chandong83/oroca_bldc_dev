
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x4>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f000 fe5a 	bl	800cd10 <__core_init>
 800c05c:	f004 fd90 	bl	8010b80 <__early_init>
 800c060:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800c064:	491b      	ldr	r1, [pc, #108]	; (800c0d4 <endfiniloop+0x8>)
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <endfiniloop+0xc>)

0800c068 <msloop>:
 800c068:	4291      	cmp	r1, r2
 800c06a:	bf3c      	itt	cc
 800c06c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c070:	e7fa      	bcc.n	800c068 <msloop>
 800c072:	491a      	ldr	r1, [pc, #104]	; (800c0dc <endfiniloop+0x10>)
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <endfiniloop+0x4>)

0800c076 <psloop>:
 800c076:	4291      	cmp	r1, r2
 800c078:	bf3c      	itt	cc
 800c07a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07e:	e7fa      	bcc.n	800c076 <psloop>
 800c080:	4917      	ldr	r1, [pc, #92]	; (800c0e0 <endfiniloop+0x14>)
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <endfiniloop+0x18>)
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <endfiniloop+0x1c>)

0800c086 <dloop>:
 800c086:	429a      	cmp	r2, r3
 800c088:	bf3e      	ittt	cc
 800c08a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08e:	f842 0b04 	strcc.w	r0, [r2], #4
 800c092:	e7f8      	bcc.n	800c086 <dloop>
 800c094:	2000      	movs	r0, #0
 800c096:	4915      	ldr	r1, [pc, #84]	; (800c0ec <endfiniloop+0x20>)
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <endfiniloop+0x24>)

0800c09a <bloop>:
 800c09a:	4291      	cmp	r1, r2
 800c09c:	bf3c      	itt	cc
 800c09e:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a2:	e7fa      	bcc.n	800c09a <bloop>
 800c0a4:	f000 fe3c 	bl	800cd20 <__late_init>
 800c0a8:	4c12      	ldr	r4, [pc, #72]	; (800c0f4 <endfiniloop+0x28>)
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <endfiniloop+0x2c>)

0800c0ac <initloop>:
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	da03      	bge.n	800c0b8 <endinitloop>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	4788      	blx	r1
 800c0b6:	e7f9      	b.n	800c0ac <initloop>

0800c0b8 <endinitloop>:
 800c0b8:	f009 faea 	bl	8015690 <main>
 800c0bc:	4c0f      	ldr	r4, [pc, #60]	; (800c0fc <endfiniloop+0x30>)
 800c0be:	4d10      	ldr	r5, [pc, #64]	; (800c100 <endfiniloop+0x34>)

0800c0c0 <finiloop>:
 800c0c0:	42ac      	cmp	r4, r5
 800c0c2:	da03      	bge.n	800c0cc <endfiniloop>
 800c0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c8:	4788      	blx	r1
 800c0ca:	e7f9      	b.n	800c0c0 <finiloop>

0800c0cc <endfiniloop>:
 800c0cc:	f000 be30 	b.w	800cd30 <__default_exit>
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	20000000 	.word	0x20000000
 800c0d8:	20000400 	.word	0x20000400
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	08018c98 	.word	0x08018c98
 800c0e4:	20000800 	.word	0x20000800
 800c0e8:	20000c90 	.word	0x20000c90
 800c0ec:	20000c90 	.word	0x20000c90
 800c0f0:	2000af00 	.word	0x2000af00
 800c0f4:	0800c000 	.word	0x0800c000
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f001 f8fc 	bl	800d330 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f001 f832 	bl	800d1a0 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800c42a:	bf08      	it	eq
 800c42c:	4770      	bxeq	lr
 800c42e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800c432:	bf04      	itt	eq
 800c434:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800c438:	4770      	bxeq	lr
 800c43a:	b530      	push	{r4, r5, lr}
 800c43c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c448:	e71c      	b.n	800c284 <__adddf3+0x138>
 800c44a:	bf00      	nop

0800c44c <__aeabi_ul2d>:
 800c44c:	ea50 0201 	orrs.w	r2, r0, r1
 800c450:	bf08      	it	eq
 800c452:	4770      	bxeq	lr
 800c454:	b530      	push	{r4, r5, lr}
 800c456:	f04f 0500 	mov.w	r5, #0
 800c45a:	e00a      	b.n	800c472 <__aeabi_l2d+0x16>

0800c45c <__aeabi_l2d>:
 800c45c:	ea50 0201 	orrs.w	r2, r0, r1
 800c460:	bf08      	it	eq
 800c462:	4770      	bxeq	lr
 800c464:	b530      	push	{r4, r5, lr}
 800c466:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c46a:	d502      	bpl.n	800c472 <__aeabi_l2d+0x16>
 800c46c:	4240      	negs	r0, r0
 800c46e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c472:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c476:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c47a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c47e:	f43f aed8 	beq.w	800c232 <__adddf3+0xe6>
 800c482:	f04f 0203 	mov.w	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c492:	bf18      	it	ne
 800c494:	3203      	addne	r2, #3
 800c496:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c49a:	f1c2 0320 	rsb	r3, r2, #32
 800c49e:	fa00 fc03 	lsl.w	ip, r0, r3
 800c4a2:	fa20 f002 	lsr.w	r0, r0, r2
 800c4a6:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4aa:	ea40 000e 	orr.w	r0, r0, lr
 800c4ae:	fa21 f102 	lsr.w	r1, r1, r2
 800c4b2:	4414      	add	r4, r2
 800c4b4:	e6bd      	b.n	800c232 <__adddf3+0xe6>
 800c4b6:	bf00      	nop
	...

0800c4c0 <__aeabi_dmul>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4ce:	bf1d      	ittte	ne
 800c4d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4d4:	ea94 0f0c 	teqne	r4, ip
 800c4d8:	ea95 0f0c 	teqne	r5, ip
 800c4dc:	f000 f8de 	bleq	800c69c <__aeabi_dmul+0x1dc>
 800c4e0:	442c      	add	r4, r5
 800c4e2:	ea81 0603 	eor.w	r6, r1, r3
 800c4e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4f2:	bf18      	it	ne
 800c4f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c500:	d038      	beq.n	800c574 <__aeabi_dmul+0xb4>
 800c502:	fba0 ce02 	umull	ip, lr, r0, r2
 800c506:	f04f 0500 	mov.w	r5, #0
 800c50a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c50e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c512:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c516:	f04f 0600 	mov.w	r6, #0
 800c51a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c51e:	f09c 0f00 	teq	ip, #0
 800c522:	bf18      	it	ne
 800c524:	f04e 0e01 	orrne.w	lr, lr, #1
 800c528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c52c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c534:	d204      	bcs.n	800c540 <__aeabi_dmul+0x80>
 800c536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c53a:	416d      	adcs	r5, r5
 800c53c:	eb46 0606 	adc.w	r6, r6, r6
 800c540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c54c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c558:	bf88      	it	hi
 800c55a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c55e:	d81e      	bhi.n	800c59e <__aeabi_dmul+0xde>
 800c560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c564:	bf08      	it	eq
 800c566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c56a:	f150 0000 	adcs.w	r0, r0, #0
 800c56e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c578:	ea46 0101 	orr.w	r1, r6, r1
 800c57c:	ea40 0002 	orr.w	r0, r0, r2
 800c580:	ea81 0103 	eor.w	r1, r1, r3
 800c584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c588:	bfc2      	ittt	gt
 800c58a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c58e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c592:	bd70      	popgt	{r4, r5, r6, pc}
 800c594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c598:	f04f 0e00 	mov.w	lr, #0
 800c59c:	3c01      	subs	r4, #1
 800c59e:	f300 80ab 	bgt.w	800c6f8 <__aeabi_dmul+0x238>
 800c5a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c5a6:	bfde      	ittt	le
 800c5a8:	2000      	movle	r0, #0
 800c5aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c5ae:	bd70      	pople	{r4, r5, r6, pc}
 800c5b0:	f1c4 0400 	rsb	r4, r4, #0
 800c5b4:	3c20      	subs	r4, #32
 800c5b6:	da35      	bge.n	800c624 <__aeabi_dmul+0x164>
 800c5b8:	340c      	adds	r4, #12
 800c5ba:	dc1b      	bgt.n	800c5f4 <__aeabi_dmul+0x134>
 800c5bc:	f104 0414 	add.w	r4, r4, #20
 800c5c0:	f1c4 0520 	rsb	r5, r4, #32
 800c5c4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5c8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5cc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5d0:	ea40 0002 	orr.w	r0, r0, r2
 800c5d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5e0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5e4:	eb42 0106 	adc.w	r1, r2, r6
 800c5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5ec:	bf08      	it	eq
 800c5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	f1c4 040c 	rsb	r4, r4, #12
 800c5f8:	f1c4 0520 	rsb	r5, r4, #32
 800c5fc:	fa00 f304 	lsl.w	r3, r0, r4
 800c600:	fa20 f005 	lsr.w	r0, r0, r5
 800c604:	fa01 f204 	lsl.w	r2, r1, r4
 800c608:	ea40 0002 	orr.w	r0, r0, r2
 800c60c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c614:	f141 0100 	adc.w	r1, r1, #0
 800c618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c61c:	bf08      	it	eq
 800c61e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	f1c4 0520 	rsb	r5, r4, #32
 800c628:	fa00 f205 	lsl.w	r2, r0, r5
 800c62c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c630:	fa20 f304 	lsr.w	r3, r0, r4
 800c634:	fa01 f205 	lsl.w	r2, r1, r5
 800c638:	ea43 0302 	orr.w	r3, r3, r2
 800c63c:	fa21 f004 	lsr.w	r0, r1, r4
 800c640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c644:	fa21 f204 	lsr.w	r2, r1, r4
 800c648:	ea20 0002 	bic.w	r0, r0, r2
 800c64c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c654:	bf08      	it	eq
 800c656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	f094 0f00 	teq	r4, #0
 800c660:	d10f      	bne.n	800c682 <__aeabi_dmul+0x1c2>
 800c662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c666:	0040      	lsls	r0, r0, #1
 800c668:	eb41 0101 	adc.w	r1, r1, r1
 800c66c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c670:	bf08      	it	eq
 800c672:	3c01      	subeq	r4, #1
 800c674:	d0f7      	beq.n	800c666 <__aeabi_dmul+0x1a6>
 800c676:	ea41 0106 	orr.w	r1, r1, r6
 800c67a:	f095 0f00 	teq	r5, #0
 800c67e:	bf18      	it	ne
 800c680:	4770      	bxne	lr
 800c682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c686:	0052      	lsls	r2, r2, #1
 800c688:	eb43 0303 	adc.w	r3, r3, r3
 800c68c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c690:	bf08      	it	eq
 800c692:	3d01      	subeq	r5, #1
 800c694:	d0f7      	beq.n	800c686 <__aeabi_dmul+0x1c6>
 800c696:	ea43 0306 	orr.w	r3, r3, r6
 800c69a:	4770      	bx	lr
 800c69c:	ea94 0f0c 	teq	r4, ip
 800c6a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c6a4:	bf18      	it	ne
 800c6a6:	ea95 0f0c 	teqne	r5, ip
 800c6aa:	d00c      	beq.n	800c6c6 <__aeabi_dmul+0x206>
 800c6ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6b0:	bf18      	it	ne
 800c6b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6b6:	d1d1      	bne.n	800c65c <__aeabi_dmul+0x19c>
 800c6b8:	ea81 0103 	eor.w	r1, r1, r3
 800c6bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6c0:	f04f 0000 	mov.w	r0, #0
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ca:	bf06      	itte	eq
 800c6cc:	4610      	moveq	r0, r2
 800c6ce:	4619      	moveq	r1, r3
 800c6d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6d4:	d019      	beq.n	800c70a <__aeabi_dmul+0x24a>
 800c6d6:	ea94 0f0c 	teq	r4, ip
 800c6da:	d102      	bne.n	800c6e2 <__aeabi_dmul+0x222>
 800c6dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6e0:	d113      	bne.n	800c70a <__aeabi_dmul+0x24a>
 800c6e2:	ea95 0f0c 	teq	r5, ip
 800c6e6:	d105      	bne.n	800c6f4 <__aeabi_dmul+0x234>
 800c6e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6ec:	bf1c      	itt	ne
 800c6ee:	4610      	movne	r0, r2
 800c6f0:	4619      	movne	r1, r3
 800c6f2:	d10a      	bne.n	800c70a <__aeabi_dmul+0x24a>
 800c6f4:	ea81 0103 	eor.w	r1, r1, r3
 800c6f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c70e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c712:	bd70      	pop	{r4, r5, r6, pc}

0800c714 <__aeabi_ddiv>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c71a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c71e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c722:	bf1d      	ittte	ne
 800c724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c728:	ea94 0f0c 	teqne	r4, ip
 800c72c:	ea95 0f0c 	teqne	r5, ip
 800c730:	f000 f8a7 	bleq	800c882 <__aeabi_ddiv+0x16e>
 800c734:	eba4 0405 	sub.w	r4, r4, r5
 800c738:	ea81 0e03 	eor.w	lr, r1, r3
 800c73c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c744:	f000 8088 	beq.w	800c858 <__aeabi_ddiv+0x144>
 800c748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c74c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c75c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c76c:	429d      	cmp	r5, r3
 800c76e:	bf08      	it	eq
 800c770:	4296      	cmpeq	r6, r2
 800c772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c77a:	d202      	bcs.n	800c782 <__aeabi_ddiv+0x6e>
 800c77c:	085b      	lsrs	r3, r3, #1
 800c77e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c782:	1ab6      	subs	r6, r6, r2
 800c784:	eb65 0503 	sbc.w	r5, r5, r3
 800c788:	085b      	lsrs	r3, r3, #1
 800c78a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c78e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c796:	ebb6 0e02 	subs.w	lr, r6, r2
 800c79a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c79e:	bf22      	ittt	cs
 800c7a0:	1ab6      	subcs	r6, r6, r2
 800c7a2:	4675      	movcs	r5, lr
 800c7a4:	ea40 000c 	orrcs.w	r0, r0, ip
 800c7a8:	085b      	lsrs	r3, r3, #1
 800c7aa:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ae:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7b6:	bf22      	ittt	cs
 800c7b8:	1ab6      	subcs	r6, r6, r2
 800c7ba:	4675      	movcs	r5, lr
 800c7bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7c6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7ce:	bf22      	ittt	cs
 800c7d0:	1ab6      	subcs	r6, r6, r2
 800c7d2:	4675      	movcs	r5, lr
 800c7d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7d8:	085b      	lsrs	r3, r3, #1
 800c7da:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7de:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7e6:	bf22      	ittt	cs
 800c7e8:	1ab6      	subcs	r6, r6, r2
 800c7ea:	4675      	movcs	r5, lr
 800c7ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7f0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7f4:	d018      	beq.n	800c828 <__aeabi_ddiv+0x114>
 800c7f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c80a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c80e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c812:	d1c0      	bne.n	800c796 <__aeabi_ddiv+0x82>
 800c814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c818:	d10b      	bne.n	800c832 <__aeabi_ddiv+0x11e>
 800c81a:	ea41 0100 	orr.w	r1, r1, r0
 800c81e:	f04f 0000 	mov.w	r0, #0
 800c822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c826:	e7b6      	b.n	800c796 <__aeabi_ddiv+0x82>
 800c828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c82c:	bf04      	itt	eq
 800c82e:	4301      	orreq	r1, r0
 800c830:	2000      	moveq	r0, #0
 800c832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c836:	bf88      	it	hi
 800c838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c83c:	f63f aeaf 	bhi.w	800c59e <__aeabi_dmul+0xde>
 800c840:	ebb5 0c03 	subs.w	ip, r5, r3
 800c844:	bf04      	itt	eq
 800c846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c84a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c84e:	f150 0000 	adcs.w	r0, r0, #0
 800c852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c856:	bd70      	pop	{r4, r5, r6, pc}
 800c858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c85c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c864:	bfc2      	ittt	gt
 800c866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c86e:	bd70      	popgt	{r4, r5, r6, pc}
 800c870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c874:	f04f 0e00 	mov.w	lr, #0
 800c878:	3c01      	subs	r4, #1
 800c87a:	e690      	b.n	800c59e <__aeabi_dmul+0xde>
 800c87c:	ea45 0e06 	orr.w	lr, r5, r6
 800c880:	e68d      	b.n	800c59e <__aeabi_dmul+0xde>
 800c882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c886:	ea94 0f0c 	teq	r4, ip
 800c88a:	bf08      	it	eq
 800c88c:	ea95 0f0c 	teqeq	r5, ip
 800c890:	f43f af3b 	beq.w	800c70a <__aeabi_dmul+0x24a>
 800c894:	ea94 0f0c 	teq	r4, ip
 800c898:	d10a      	bne.n	800c8b0 <__aeabi_ddiv+0x19c>
 800c89a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c89e:	f47f af34 	bne.w	800c70a <__aeabi_dmul+0x24a>
 800c8a2:	ea95 0f0c 	teq	r5, ip
 800c8a6:	f47f af25 	bne.w	800c6f4 <__aeabi_dmul+0x234>
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	e72c      	b.n	800c70a <__aeabi_dmul+0x24a>
 800c8b0:	ea95 0f0c 	teq	r5, ip
 800c8b4:	d106      	bne.n	800c8c4 <__aeabi_ddiv+0x1b0>
 800c8b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8ba:	f43f aefd 	beq.w	800c6b8 <__aeabi_dmul+0x1f8>
 800c8be:	4610      	mov	r0, r2
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	e722      	b.n	800c70a <__aeabi_dmul+0x24a>
 800c8c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8c8:	bf18      	it	ne
 800c8ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8ce:	f47f aec5 	bne.w	800c65c <__aeabi_dmul+0x19c>
 800c8d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8d6:	f47f af0d 	bne.w	800c6f4 <__aeabi_dmul+0x234>
 800c8da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8de:	f47f aeeb 	bne.w	800c6b8 <__aeabi_dmul+0x1f8>
 800c8e2:	e712      	b.n	800c70a <__aeabi_dmul+0x24a>
	...

0800c8f0 <__gedf2>:
 800c8f0:	f04f 3cff 	mov.w	ip, #4294967295
 800c8f4:	e006      	b.n	800c904 <__cmpdf2+0x4>
 800c8f6:	bf00      	nop

0800c8f8 <__ledf2>:
 800c8f8:	f04f 0c01 	mov.w	ip, #1
 800c8fc:	e002      	b.n	800c904 <__cmpdf2+0x4>
 800c8fe:	bf00      	nop

0800c900 <__cmpdf2>:
 800c900:	f04f 0c01 	mov.w	ip, #1
 800c904:	f84d cd04 	str.w	ip, [sp, #-4]!
 800c908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c90c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c914:	bf18      	it	ne
 800c916:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800c91a:	d01b      	beq.n	800c954 <__cmpdf2+0x54>
 800c91c:	b001      	add	sp, #4
 800c91e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800c922:	bf0c      	ite	eq
 800c924:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800c928:	ea91 0f03 	teqne	r1, r3
 800c92c:	bf02      	ittt	eq
 800c92e:	ea90 0f02 	teqeq	r0, r2
 800c932:	2000      	moveq	r0, #0
 800c934:	4770      	bxeq	lr
 800c936:	f110 0f00 	cmn.w	r0, #0
 800c93a:	ea91 0f03 	teq	r1, r3
 800c93e:	bf58      	it	pl
 800c940:	4299      	cmppl	r1, r3
 800c942:	bf08      	it	eq
 800c944:	4290      	cmpeq	r0, r2
 800c946:	bf2c      	ite	cs
 800c948:	17d8      	asrcs	r0, r3, #31
 800c94a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800c94e:	f040 0001 	orr.w	r0, r0, #1
 800c952:	4770      	bx	lr
 800c954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c95c:	d102      	bne.n	800c964 <__cmpdf2+0x64>
 800c95e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c962:	d107      	bne.n	800c974 <__cmpdf2+0x74>
 800c964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c96c:	d1d6      	bne.n	800c91c <__cmpdf2+0x1c>
 800c96e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c972:	d0d3      	beq.n	800c91c <__cmpdf2+0x1c>
 800c974:	f85d 0b04 	ldr.w	r0, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop

0800c97c <__aeabi_cdrcmple>:
 800c97c:	4684      	mov	ip, r0
 800c97e:	4610      	mov	r0, r2
 800c980:	4662      	mov	r2, ip
 800c982:	468c      	mov	ip, r1
 800c984:	4619      	mov	r1, r3
 800c986:	4663      	mov	r3, ip
 800c988:	e000      	b.n	800c98c <__aeabi_cdcmpeq>
 800c98a:	bf00      	nop

0800c98c <__aeabi_cdcmpeq>:
 800c98c:	b501      	push	{r0, lr}
 800c98e:	f7ff ffb7 	bl	800c900 <__cmpdf2>
 800c992:	2800      	cmp	r0, #0
 800c994:	bf48      	it	mi
 800c996:	f110 0f00 	cmnmi.w	r0, #0
 800c99a:	bd01      	pop	{r0, pc}

0800c99c <__aeabi_dcmpeq>:
 800c99c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9a0:	f7ff fff4 	bl	800c98c <__aeabi_cdcmpeq>
 800c9a4:	bf0c      	ite	eq
 800c9a6:	2001      	moveq	r0, #1
 800c9a8:	2000      	movne	r0, #0
 800c9aa:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9ae:	bf00      	nop

0800c9b0 <__aeabi_dcmplt>:
 800c9b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9b4:	f7ff ffea 	bl	800c98c <__aeabi_cdcmpeq>
 800c9b8:	bf34      	ite	cc
 800c9ba:	2001      	movcc	r0, #1
 800c9bc:	2000      	movcs	r0, #0
 800c9be:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9c2:	bf00      	nop

0800c9c4 <__aeabi_dcmple>:
 800c9c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9c8:	f7ff ffe0 	bl	800c98c <__aeabi_cdcmpeq>
 800c9cc:	bf94      	ite	ls
 800c9ce:	2001      	movls	r0, #1
 800c9d0:	2000      	movhi	r0, #0
 800c9d2:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9d6:	bf00      	nop

0800c9d8 <__aeabi_dcmpge>:
 800c9d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9dc:	f7ff ffce 	bl	800c97c <__aeabi_cdrcmple>
 800c9e0:	bf94      	ite	ls
 800c9e2:	2001      	movls	r0, #1
 800c9e4:	2000      	movhi	r0, #0
 800c9e6:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9ea:	bf00      	nop

0800c9ec <__aeabi_dcmpgt>:
 800c9ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9f0:	f7ff ffc4 	bl	800c97c <__aeabi_cdrcmple>
 800c9f4:	bf34      	ite	cc
 800c9f6:	2001      	movcc	r0, #1
 800c9f8:	2000      	movcs	r0, #0
 800c9fa:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9fe:	bf00      	nop

0800ca00 <__aeabi_d2iz>:
 800ca00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ca08:	d215      	bcs.n	800ca36 <__aeabi_d2iz+0x36>
 800ca0a:	d511      	bpl.n	800ca30 <__aeabi_d2iz+0x30>
 800ca0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ca10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ca14:	d912      	bls.n	800ca3c <__aeabi_d2iz+0x3c>
 800ca16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ca1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ca22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ca26:	fa23 f002 	lsr.w	r0, r3, r2
 800ca2a:	bf18      	it	ne
 800ca2c:	4240      	negne	r0, r0
 800ca2e:	4770      	bx	lr
 800ca30:	f04f 0000 	mov.w	r0, #0
 800ca34:	4770      	bx	lr
 800ca36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ca3a:	d105      	bne.n	800ca48 <__aeabi_d2iz+0x48>
 800ca3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ca40:	bf08      	it	eq
 800ca42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ca46:	4770      	bx	lr
 800ca48:	f04f 0000 	mov.w	r0, #0
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop

0800ca50 <__aeabi_d2f>:
 800ca50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800ca58:	bf24      	itt	cs
 800ca5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800ca5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800ca62:	d90d      	bls.n	800ca80 <__aeabi_d2f+0x30>
 800ca64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ca68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800ca6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800ca70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ca74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800ca78:	bf08      	it	eq
 800ca7a:	f020 0001 	biceq.w	r0, r0, #1
 800ca7e:	4770      	bx	lr
 800ca80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800ca84:	d121      	bne.n	800caca <__aeabi_d2f+0x7a>
 800ca86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800ca8a:	bfbc      	itt	lt
 800ca8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800ca90:	4770      	bxlt	lr
 800ca92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ca96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800ca9a:	f1c2 0218 	rsb	r2, r2, #24
 800ca9e:	f1c2 0c20 	rsb	ip, r2, #32
 800caa2:	fa10 f30c 	lsls.w	r3, r0, ip
 800caa6:	fa20 f002 	lsr.w	r0, r0, r2
 800caaa:	bf18      	it	ne
 800caac:	f040 0001 	orrne.w	r0, r0, #1
 800cab0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cab4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800cab8:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cabc:	ea40 000c 	orr.w	r0, r0, ip
 800cac0:	fa23 f302 	lsr.w	r3, r3, r2
 800cac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cac8:	e7cc      	b.n	800ca64 <__aeabi_d2f+0x14>
 800caca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800cace:	d107      	bne.n	800cae0 <__aeabi_d2f+0x90>
 800cad0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800cad4:	bf1e      	ittt	ne
 800cad6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800cada:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800cade:	4770      	bxne	lr
 800cae0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800cae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800cae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop

0800caf0 <memcpy>:
 800caf0:	4684      	mov	ip, r0
 800caf2:	ea41 0300 	orr.w	r3, r1, r0
 800caf6:	f013 0303 	ands.w	r3, r3, #3
 800cafa:	d16d      	bne.n	800cbd8 <memcpy+0xe8>
 800cafc:	3a40      	subs	r2, #64	; 0x40
 800cafe:	d341      	bcc.n	800cb84 <memcpy+0x94>
 800cb00:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb04:	f840 3b04 	str.w	r3, [r0], #4
 800cb08:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb0c:	f840 3b04 	str.w	r3, [r0], #4
 800cb10:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb14:	f840 3b04 	str.w	r3, [r0], #4
 800cb18:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb1c:	f840 3b04 	str.w	r3, [r0], #4
 800cb20:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb24:	f840 3b04 	str.w	r3, [r0], #4
 800cb28:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb2c:	f840 3b04 	str.w	r3, [r0], #4
 800cb30:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb34:	f840 3b04 	str.w	r3, [r0], #4
 800cb38:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb3c:	f840 3b04 	str.w	r3, [r0], #4
 800cb40:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb44:	f840 3b04 	str.w	r3, [r0], #4
 800cb48:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb4c:	f840 3b04 	str.w	r3, [r0], #4
 800cb50:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb54:	f840 3b04 	str.w	r3, [r0], #4
 800cb58:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb5c:	f840 3b04 	str.w	r3, [r0], #4
 800cb60:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb64:	f840 3b04 	str.w	r3, [r0], #4
 800cb68:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb6c:	f840 3b04 	str.w	r3, [r0], #4
 800cb70:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb74:	f840 3b04 	str.w	r3, [r0], #4
 800cb78:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb7c:	f840 3b04 	str.w	r3, [r0], #4
 800cb80:	3a40      	subs	r2, #64	; 0x40
 800cb82:	d2bd      	bcs.n	800cb00 <memcpy+0x10>
 800cb84:	3230      	adds	r2, #48	; 0x30
 800cb86:	d311      	bcc.n	800cbac <memcpy+0xbc>
 800cb88:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb8c:	f840 3b04 	str.w	r3, [r0], #4
 800cb90:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb94:	f840 3b04 	str.w	r3, [r0], #4
 800cb98:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb9c:	f840 3b04 	str.w	r3, [r0], #4
 800cba0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cba4:	f840 3b04 	str.w	r3, [r0], #4
 800cba8:	3a10      	subs	r2, #16
 800cbaa:	d2ed      	bcs.n	800cb88 <memcpy+0x98>
 800cbac:	320c      	adds	r2, #12
 800cbae:	d305      	bcc.n	800cbbc <memcpy+0xcc>
 800cbb0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbb4:	f840 3b04 	str.w	r3, [r0], #4
 800cbb8:	3a04      	subs	r2, #4
 800cbba:	d2f9      	bcs.n	800cbb0 <memcpy+0xc0>
 800cbbc:	3204      	adds	r2, #4
 800cbbe:	d008      	beq.n	800cbd2 <memcpy+0xe2>
 800cbc0:	07d2      	lsls	r2, r2, #31
 800cbc2:	bf1c      	itt	ne
 800cbc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cbc8:	f800 3b01 	strbne.w	r3, [r0], #1
 800cbcc:	d301      	bcc.n	800cbd2 <memcpy+0xe2>
 800cbce:	880b      	ldrh	r3, [r1, #0]
 800cbd0:	8003      	strh	r3, [r0, #0]
 800cbd2:	4660      	mov	r0, ip
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	2a08      	cmp	r2, #8
 800cbda:	d313      	bcc.n	800cc04 <memcpy+0x114>
 800cbdc:	078b      	lsls	r3, r1, #30
 800cbde:	d08d      	beq.n	800cafc <memcpy+0xc>
 800cbe0:	f010 0303 	ands.w	r3, r0, #3
 800cbe4:	d08a      	beq.n	800cafc <memcpy+0xc>
 800cbe6:	f1c3 0304 	rsb	r3, r3, #4
 800cbea:	1ad2      	subs	r2, r2, r3
 800cbec:	07db      	lsls	r3, r3, #31
 800cbee:	bf1c      	itt	ne
 800cbf0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cbf4:	f800 3b01 	strbne.w	r3, [r0], #1
 800cbf8:	d380      	bcc.n	800cafc <memcpy+0xc>
 800cbfa:	f831 3b02 	ldrh.w	r3, [r1], #2
 800cbfe:	f820 3b02 	strh.w	r3, [r0], #2
 800cc02:	e77b      	b.n	800cafc <memcpy+0xc>
 800cc04:	3a04      	subs	r2, #4
 800cc06:	d3d9      	bcc.n	800cbbc <memcpy+0xcc>
 800cc08:	3a01      	subs	r2, #1
 800cc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc0e:	f800 3b01 	strb.w	r3, [r0], #1
 800cc12:	d2f9      	bcs.n	800cc08 <memcpy+0x118>
 800cc14:	780b      	ldrb	r3, [r1, #0]
 800cc16:	7003      	strb	r3, [r0, #0]
 800cc18:	784b      	ldrb	r3, [r1, #1]
 800cc1a:	7043      	strb	r3, [r0, #1]
 800cc1c:	788b      	ldrb	r3, [r1, #2]
 800cc1e:	7083      	strb	r3, [r0, #2]
 800cc20:	4660      	mov	r0, ip
 800cc22:	4770      	bx	lr
	...

0800cc30 <strlen>:
 800cc30:	f890 f000 	pld	[r0]
 800cc34:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 800cc38:	f020 0107 	bic.w	r1, r0, #7
 800cc3c:	f06f 0c00 	mvn.w	ip, #0
 800cc40:	f010 0407 	ands.w	r4, r0, #7
 800cc44:	f891 f020 	pld	[r1, #32]
 800cc48:	f040 8049 	bne.w	800ccde <strlen+0xae>
 800cc4c:	f04f 0400 	mov.w	r4, #0
 800cc50:	f06f 0007 	mvn.w	r0, #7
 800cc54:	e9d1 2300 	ldrd	r2, r3, [r1]
 800cc58:	f891 f040 	pld	[r1, #64]	; 0x40
 800cc5c:	f100 0008 	add.w	r0, r0, #8
 800cc60:	fa82 f24c 	uadd8	r2, r2, ip
 800cc64:	faa4 f28c 	sel	r2, r4, ip
 800cc68:	fa83 f34c 	uadd8	r3, r3, ip
 800cc6c:	faa2 f38c 	sel	r3, r2, ip
 800cc70:	bb4b      	cbnz	r3, 800ccc6 <strlen+0x96>
 800cc72:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800cc76:	fa82 f24c 	uadd8	r2, r2, ip
 800cc7a:	f100 0008 	add.w	r0, r0, #8
 800cc7e:	faa4 f28c 	sel	r2, r4, ip
 800cc82:	fa83 f34c 	uadd8	r3, r3, ip
 800cc86:	faa2 f38c 	sel	r3, r2, ip
 800cc8a:	b9e3      	cbnz	r3, 800ccc6 <strlen+0x96>
 800cc8c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800cc90:	fa82 f24c 	uadd8	r2, r2, ip
 800cc94:	f100 0008 	add.w	r0, r0, #8
 800cc98:	faa4 f28c 	sel	r2, r4, ip
 800cc9c:	fa83 f34c 	uadd8	r3, r3, ip
 800cca0:	faa2 f38c 	sel	r3, r2, ip
 800cca4:	b97b      	cbnz	r3, 800ccc6 <strlen+0x96>
 800cca6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800ccaa:	f101 0120 	add.w	r1, r1, #32
 800ccae:	fa82 f24c 	uadd8	r2, r2, ip
 800ccb2:	f100 0008 	add.w	r0, r0, #8
 800ccb6:	faa4 f28c 	sel	r2, r4, ip
 800ccba:	fa83 f34c 	uadd8	r3, r3, ip
 800ccbe:	faa2 f38c 	sel	r3, r2, ip
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0c6      	beq.n	800cc54 <strlen+0x24>
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	bf04      	itt	eq
 800ccca:	3004      	addeq	r0, #4
 800cccc:	461a      	moveq	r2, r3
 800ccce:	ba12      	rev	r2, r2
 800ccd0:	fab2 f282 	clz	r2, r2
 800ccd4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 800ccd8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800ccdc:	4770      	bx	lr
 800ccde:	e9d1 2300 	ldrd	r2, r3, [r1]
 800cce2:	f004 0503 	and.w	r5, r4, #3
 800cce6:	f1c4 0000 	rsb	r0, r4, #0
 800ccea:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800ccee:	f014 0f04 	tst.w	r4, #4
 800ccf2:	f891 f040 	pld	[r1, #64]	; 0x40
 800ccf6:	fa0c f505 	lsl.w	r5, ip, r5
 800ccfa:	ea62 0205 	orn	r2, r2, r5
 800ccfe:	bf1c      	itt	ne
 800cd00:	ea63 0305 	ornne	r3, r3, r5
 800cd04:	4662      	movne	r2, ip
 800cd06:	f04f 0400 	mov.w	r4, #0
 800cd0a:	e7a9      	b.n	800cc60 <strlen+0x30>
 800cd0c:	0000      	movs	r0, r0
	...

0800cd10 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
	...

0800cd20 <__late_init>:
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
	...

0800cd30 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800cd30:	e7fe      	b.n	800cd30 <__default_exit>
 800cd32:	bf00      	nop
	...

0800cd40 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800cd40:	e7fe      	b.n	800cd40 <_unhandled_exception>
 800cd42:	bf00      	nop
	...

0800cd50 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800cd50:	e7fe      	b.n	800cd50 <_idle_thread>
 800cd52:	bf00      	nop
	...

0800cd60 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cd60:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800cd62:	4a21      	ldr	r2, [pc, #132]	; (800cde8 <chSysInit+0x88>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cd64:	4821      	ldr	r0, [pc, #132]	; (800cdec <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800cd66:	b530      	push	{r4, r5, lr}
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cd68:	2400      	movs	r4, #0
 800cd6a:	609c      	str	r4, [r3, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cd6c:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800cd6e:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 800cd72:	4029      	ands	r1, r5
  reg_value  =  (reg_value                                 |
 800cd74:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800cd76:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cd78:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cd7a:	491d      	ldr	r1, [pc, #116]	; (800cdf0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cd7c:	4d1d      	ldr	r5, [pc, #116]	; (800cdf4 <chSysInit+0x94>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cd7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cd82:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cd84:	680a      	ldr	r2, [r1, #0]
 800cd86:	f042 0201 	orr.w	r2, r2, #1
 800cd8a:	600a      	str	r2, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800cd8c:	2010      	movs	r0, #16
 800cd8e:	2220      	movs	r2, #32
void chSysInit(void) {
 800cd90:	b083      	sub	sp, #12
 800cd92:	77d8      	strb	r0, [r3, #31]
 800cd94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  _scheduler_init();
 800cd98:	f000 f902 	bl	800cfa0 <_scheduler_init>
  _vt_init();
 800cd9c:	f000 f880 	bl	800cea0 <_vt_init>
  _tm_init();
 800cda0:	f000 fb5e 	bl	800d460 <_tm_init>
  _core_init();
 800cda4:	f000 fe0c 	bl	800d9c0 <_core_init>
  _heap_init();
 800cda8:	f000 fe42 	bl	800da30 <_heap_init>
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cdac:	4628      	mov	r0, r5
 800cdae:	2140      	movs	r1, #64	; 0x40
 800cdb0:	f000 fa06 	bl	800d1c0 <_thread_init>
 800cdb4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800cdb8:	2201      	movs	r2, #1
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cdba:	6198      	str	r0, [r3, #24]
  currp->p_state = CH_STATE_CURRENT;
 800cdbc:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cdbe:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800cdc2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	490c      	ldr	r1, [pc, #48]	; (800cdf8 <chSysInit+0x98>)
 800cdc8:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800cdca:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800cdce:	9400      	str	r4, [sp, #0]
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <chSysInit+0x9c>)
 800cdd2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800cdd6:	f000 fa43 	bl	800d260 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800cdda:	4b09      	ldr	r3, [pc, #36]	; (800ce00 <chSysInit+0xa0>)
 800cddc:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800cdde:	b003      	add	sp, #12
 800cde0:	bd30      	pop	{r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	e000ed00 	.word	0xe000ed00
 800cde8:	05fa0300 	.word	0x05fa0300
 800cdec:	e000edf0 	.word	0xe000edf0
 800cdf0:	e0001000 	.word	0xe0001000
 800cdf4:	20000cc0 	.word	0x20000cc0
 800cdf8:	08017a40 	.word	0x08017a40
 800cdfc:	0800cd51 	.word	0x0800cd51
 800ce00:	08017a30 	.word	0x08017a30
	...

0800ce10 <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ce10:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800ce12:	4b01      	ldr	r3, [pc, #4]	; (800ce18 <chSysHalt+0x8>)
 800ce14:	62d8      	str	r0, [r3, #44]	; 0x2c
 800ce16:	e7fe      	b.n	800ce16 <chSysHalt+0x6>
 800ce18:	20000c90 	.word	0x20000c90
 800ce1c:	00000000 	.word	0x00000000

0800ce20 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800ce22:	4c13      	ldr	r4, [pc, #76]	; (800ce70 <chSysTimerHandlerI+0x50>)
 800ce24:	69a2      	ldr	r2, [r4, #24]
 800ce26:	7fd3      	ldrb	r3, [r2, #31]
 800ce28:	b10b      	cbz	r3, 800ce2e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800ce2e:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800ce30:	69e3      	ldr	r3, [r4, #28]
 800ce32:	4e10      	ldr	r6, [pc, #64]	; (800ce74 <chSysTimerHandlerI+0x54>)
 800ce34:	3101      	adds	r1, #1
 800ce36:	6211      	str	r1, [r2, #32]
  ch.vtlist.vt_systime++;
 800ce38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800ce3a:	42b3      	cmp	r3, r6
  ch.vtlist.vt_systime++;
 800ce3c:	f102 0201 	add.w	r2, r2, #1
 800ce40:	62a2      	str	r2, [r4, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800ce42:	d013      	beq.n	800ce6c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800ce44:	689d      	ldr	r5, [r3, #8]
 800ce46:	3d01      	subs	r5, #1
 800ce48:	609d      	str	r5, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800ce4a:	b97d      	cbnz	r5, 800ce6c <chSysTimerHandlerI+0x4c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ce4c:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800ce4e:	681a      	ldr	r2, [r3, #0]
      fn = vtp->vt_func;
 800ce50:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800ce52:	60dd      	str	r5, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800ce54:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800ce56:	61e2      	str	r2, [r4, #28]
 800ce58:	f385 8811 	msr	BASEPRI, r5
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800ce5c:	6918      	ldr	r0, [r3, #16]
 800ce5e:	4788      	blx	r1
 800ce60:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800ce64:	69e3      	ldr	r3, [r4, #28]
 800ce66:	689a      	ldr	r2, [r3, #8]
 800ce68:	2a00      	cmp	r2, #0
 800ce6a:	d0f0      	beq.n	800ce4e <chSysTimerHandlerI+0x2e>
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 800ce6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	20000c90 	.word	0x20000c90
 800ce74:	20000cac 	.word	0x20000cac
	...

0800ce80 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800ce80:	4a03      	ldr	r2, [pc, #12]	; (800ce90 <chSysPolledDelayX+0x10>)
 800ce82:	6851      	ldr	r1, [r2, #4]
 800ce84:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 800ce86:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800ce88:	4298      	cmp	r0, r3
 800ce8a:	d8fb      	bhi.n	800ce84 <chSysPolledDelayX+0x4>
  }
}
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	e0001000 	.word	0xe0001000
	...

0800cea0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cea2:	f04f 30ff 	mov.w	r0, #4294967295
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cea6:	2100      	movs	r1, #0
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cea8:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_delta = (systime_t)-1;
 800ceac:	6258      	str	r0, [r3, #36]	; 0x24
  ch.vtlist.vt_systime = (systime_t)0;
 800ceae:	6299      	str	r1, [r3, #40]	; 0x28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800ceb0:	e9c3 2207 	strd	r2, r2, [r3, #28]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	20000c90 	.word	0x20000c90
 800cebc:	00000000 	.word	0x00000000

0800cec0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800cec0:	b430      	push	{r4, r5}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800cec2:	4d0d      	ldr	r5, [pc, #52]	; (800cef8 <chVTDoSetI+0x38>)
 800cec4:	69ec      	ldr	r4, [r5, #28]
  vtp->vt_par = par;
 800cec6:	6103      	str	r3, [r0, #16]
  while (p->vt_delta < delta) {
 800cec8:	68a3      	ldr	r3, [r4, #8]
  vtp->vt_func = vtfunc;
 800ceca:	60c2      	str	r2, [r0, #12]
  while (p->vt_delta < delta) {
 800cecc:	4299      	cmp	r1, r3
 800cece:	d904      	bls.n	800ceda <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800ced0:	6824      	ldr	r4, [r4, #0]
    delta -= p->vt_delta;
 800ced2:	1ac9      	subs	r1, r1, r3
  while (p->vt_delta < delta) {
 800ced4:	68a3      	ldr	r3, [r4, #8]
 800ced6:	428b      	cmp	r3, r1
 800ced8:	d3fa      	bcc.n	800ced0 <chVTDoSetI+0x10>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800ceda:	6863      	ldr	r3, [r4, #4]
 800cedc:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->vt_prev->vt_next = vtp;
 800cee0:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800cee2:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800cee4:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cee6:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cee8:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_delta -= delta;
 800ceec:	1a59      	subs	r1, r3, r1
 800ceee:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cef0:	626a      	str	r2, [r5, #36]	; 0x24
}
 800cef2:	bc30      	pop	{r4, r5}
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	20000c90 	.word	0x20000c90
 800cefc:	00000000 	.word	0x00000000

0800cf00 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cf00:	6803      	ldr	r3, [r0, #0]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800cf02:	6841      	ldr	r1, [r0, #4]
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cf04:	689a      	ldr	r2, [r3, #8]
void chVTDoResetI(virtual_timer_t *vtp) {
 800cf06:	b430      	push	{r4, r5}
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cf08:	6885      	ldr	r5, [r0, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800cf0a:	4c06      	ldr	r4, [pc, #24]	; (800cf24 <chVTDoResetI+0x24>)
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cf0c:	442a      	add	r2, r5
 800cf0e:	609a      	str	r2, [r3, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 800cf10:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800cf12:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800cf14:	2200      	movs	r2, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 800cf16:	f04f 33ff 	mov.w	r3, #4294967295
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800cf1a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800cf1c:	60c2      	str	r2, [r0, #12]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cf1e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800cf20:	bc30      	pop	{r4, r5}
 800cf22:	4770      	bx	lr
 800cf24:	20000c90 	.word	0x20000c90
	...

0800cf30 <wakeup>:
 800cf30:	2320      	movs	r3, #32
 800cf32:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800cf36:	7f03      	ldrb	r3, [r0, #28]
 800cf38:	2b07      	cmp	r3, #7
 800cf3a:	d80e      	bhi.n	800cf5a <wakeup+0x2a>
 800cf3c:	e8df f003 	tbb	[pc, r3]
 800cf40:	240d0d28 	.word	0x240d0d28
 800cf44:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800cf48:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800cf4a:	6893      	ldr	r3, [r2, #8]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800cf50:	e9d0 2300 	ldrd	r2, r3, [r0]
 800cf54:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800cf56:	6802      	ldr	r2, [r0, #0]
 800cf58:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800cf5a:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 800cf5c:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800cf5e:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->p_prio >= tp->p_prio);
 800cf62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cf64:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800cf66:	6244      	str	r4, [r0, #36]	; 0x24
  tp->p_state = CH_STATE_READY;
 800cf68:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800cf6a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cf6c:	689a      	ldr	r2, [r3, #8]
 800cf6e:	428a      	cmp	r2, r1
 800cf70:	d2fb      	bcs.n	800cf6a <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	2100      	movs	r1, #0
 800cf76:	e9c0 3200 	strd	r3, r2, [r0]
  tp->p_prev->p_next = tp;
 800cf7a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800cf7c:	6058      	str	r0, [r3, #4]
 800cf7e:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cf82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf86:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 800cf88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
    break;
 800cf8e:	e7e4      	b.n	800cf5a <wakeup+0x2a>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	4770      	bx	lr
 800cf98:	20000c90 	.word	0x20000c90
 800cf9c:	00000000 	.word	0x00000000

0800cfa0 <_scheduler_init>:
  tqp->p_next = (thread_t *)tqp;
 800cfa0:	4b03      	ldr	r3, [pc, #12]	; (800cfb0 <_scheduler_init+0x10>)
  ch.rlist.r_prio = NOPRIO;
 800cfa2:	2200      	movs	r2, #0
  tqp->p_prev = (thread_t *)tqp;
 800cfa4:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800cfa8:	e9c3 3304 	strd	r3, r3, [r3, #16]
  ch.rlist.r_prio = NOPRIO;
 800cfac:	609a      	str	r2, [r3, #8]
}
 800cfae:	4770      	bx	lr
 800cfb0:	20000c90 	.word	0x20000c90
	...

0800cfc0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 800cfc0:	4601      	mov	r1, r0
  tp->p_state = CH_STATE_READY;
 800cfc2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.r_queue;
 800cfc4:	4b06      	ldr	r3, [pc, #24]	; (800cfe0 <chSchReadyI+0x20>)
  } while (cp->p_prio >= tp->p_prio);
 800cfc6:	6880      	ldr	r0, [r0, #8]
  tp->p_state = CH_STATE_READY;
 800cfc8:	770a      	strb	r2, [r1, #28]
    cp = cp->p_next;
 800cfca:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cfcc:	689a      	ldr	r2, [r3, #8]
 800cfce:	4282      	cmp	r2, r0
 800cfd0:	d2fb      	bcs.n	800cfca <chSchReadyI+0xa>
  tp->p_prev = cp->p_prev;
 800cfd2:	685a      	ldr	r2, [r3, #4]
}
 800cfd4:	4608      	mov	r0, r1
  tp->p_prev = cp->p_prev;
 800cfd6:	e9c1 3200 	strd	r3, r2, [r1]
  tp->p_prev->p_next = tp;
 800cfda:	6011      	str	r1, [r2, #0]
  cp->p_prev = tp;
 800cfdc:	6059      	str	r1, [r3, #4]
}
 800cfde:	4770      	bx	lr
 800cfe0:	20000c90 	.word	0x20000c90
	...

0800cff0 <chSchGoSleepS>:
  otp = currp;
 800cff0:	4b08      	ldr	r3, [pc, #32]	; (800d014 <chSchGoSleepS+0x24>)
 800cff2:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 800cff4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 800cff6:	b410      	push	{r4}
  otp->p_state = newstate;
 800cff8:	7708      	strb	r0, [r1, #28]
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cffa:	2004      	movs	r0, #4
 800cffc:	77c8      	strb	r0, [r1, #31]
  tqp->p_next = tp->p_next;
 800cffe:	6810      	ldr	r0, [r2, #0]
 800d000:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 800d002:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d004:	6043      	str	r3, [r0, #4]
 800d006:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800d008:	4610      	mov	r0, r2
}
 800d00a:	f85d 4b04 	ldr.w	r4, [sp], #4
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d00e:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800d010:	f7ff b87e 	b.w	800c110 <_port_switch>
 800d014:	20000c90 	.word	0x20000c90
	...

0800d020 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800d020:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800d022:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800d024:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800d026:	d012      	beq.n	800d04e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800d028:	4c0c      	ldr	r4, [pc, #48]	; (800d05c <chSchGoSleepTimeoutS+0x3c>)
 800d02a:	4a0d      	ldr	r2, [pc, #52]	; (800d060 <chSchGoSleepTimeoutS+0x40>)
 800d02c:	69a3      	ldr	r3, [r4, #24]
 800d02e:	4605      	mov	r5, r0
 800d030:	a801      	add	r0, sp, #4
 800d032:	f7ff ff45 	bl	800cec0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800d036:	4628      	mov	r0, r5
 800d038:	f7ff ffda 	bl	800cff0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800d03c:	9b04      	ldr	r3, [sp, #16]
 800d03e:	b113      	cbz	r3, 800d046 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800d040:	a801      	add	r0, sp, #4
 800d042:	f7ff ff5d 	bl	800cf00 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800d046:	69a3      	ldr	r3, [r4, #24]
}
 800d048:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d04a:	b007      	add	sp, #28
 800d04c:	bd30      	pop	{r4, r5, pc}
 800d04e:	4c03      	ldr	r4, [pc, #12]	; (800d05c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 800d050:	f7ff ffce 	bl	800cff0 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 800d054:	69a3      	ldr	r3, [r4, #24]
}
 800d056:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d058:	b007      	add	sp, #28
 800d05a:	bd30      	pop	{r4, r5, pc}
 800d05c:	20000c90 	.word	0x20000c90
 800d060:	0800cf31 	.word	0x0800cf31
	...

0800d070 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800d070:	4b14      	ldr	r3, [pc, #80]	; (800d0c4 <chSchWakeupS+0x54>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800d072:	b470      	push	{r4, r5, r6}
  if (ntp->p_prio <= currp->p_prio) {
 800d074:	699e      	ldr	r6, [r3, #24]
 800d076:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800d078:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 800d07a:	68b0      	ldr	r0, [r6, #8]
  ntp->p_u.rdymsg = msg;
 800d07c:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->p_prio <= currp->p_prio) {
 800d07e:	4285      	cmp	r5, r0
  tp->p_state = CH_STATE_READY;
 800d080:	f04f 0200 	mov.w	r2, #0
  if (ntp->p_prio <= currp->p_prio) {
 800d084:	d80b      	bhi.n	800d09e <chSchWakeupS+0x2e>
  tp->p_state = CH_STATE_READY;
 800d086:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 800d088:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	4295      	cmp	r5, r2
 800d08e:	d9fb      	bls.n	800d088 <chSchWakeupS+0x18>
  tp->p_prev = cp->p_prev;
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 800d096:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d098:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800d09a:	bc70      	pop	{r4, r5, r6}
 800d09c:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 800d09e:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800d0a0:	461a      	mov	r2, r3
    cp = cp->p_next;
 800d0a2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d0a4:	6891      	ldr	r1, [r2, #8]
 800d0a6:	4288      	cmp	r0, r1
 800d0a8:	d9fb      	bls.n	800d0a2 <chSchWakeupS+0x32>
  tp->p_prev = cp->p_prev;
 800d0aa:	6851      	ldr	r1, [r2, #4]
 800d0ac:	6071      	str	r1, [r6, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800d0ae:	2001      	movs	r0, #1
  tp->p_next = cp;
 800d0b0:	6032      	str	r2, [r6, #0]
  tp->p_prev->p_next = tp;
 800d0b2:	600e      	str	r6, [r1, #0]
  cp->p_prev = tp;
 800d0b4:	6056      	str	r6, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800d0b6:	7720      	strb	r0, [r4, #28]
    chSysSwitch(ntp, otp);
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4620      	mov	r0, r4
    setcurrp(ntp);
 800d0bc:	619c      	str	r4, [r3, #24]
}
 800d0be:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 800d0c0:	f7ff b826 	b.w	800c110 <_port_switch>
 800d0c4:	20000c90 	.word	0x20000c90
	...

0800d0d0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d0d0:	4a08      	ldr	r2, [pc, #32]	; (800d0f4 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800d0d2:	6993      	ldr	r3, [r2, #24]
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d0d4:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d0d6:	7fda      	ldrb	r2, [r3, #31]
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800d0d8:	6888      	ldr	r0, [r1, #8]
  tprio_t p2 = currp->p_prio;
 800d0da:	689b      	ldr	r3, [r3, #8]
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d0dc:	b922      	cbnz	r2, 800d0e8 <chSchIsPreemptionRequired+0x18>
 800d0de:	4298      	cmp	r0, r3
 800d0e0:	bf34      	ite	cc
 800d0e2:	2000      	movcc	r0, #0
 800d0e4:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800d0e6:	4770      	bx	lr
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800d0e8:	4298      	cmp	r0, r3
 800d0ea:	bf94      	ite	ls
 800d0ec:	2000      	movls	r0, #0
 800d0ee:	2001      	movhi	r0, #1
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	20000c90 	.word	0x20000c90
	...

0800d100 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800d100:	4b0d      	ldr	r3, [pc, #52]	; (800d138 <chSchDoRescheduleBehind+0x38>)
  thread_t *tp = tqp->p_next;
 800d102:	6818      	ldr	r0, [r3, #0]
void chSchDoRescheduleBehind(void) {
 800d104:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 800d106:	6802      	ldr	r2, [r0, #0]
  otp = currp;
 800d108:	699c      	ldr	r4, [r3, #24]
 800d10a:	601a      	str	r2, [r3, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
 800d10c:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d10e:	6053      	str	r3, [r2, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d110:	2601      	movs	r6, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d112:	2504      	movs	r5, #4
  tp->p_state = CH_STATE_READY;
 800d114:	2200      	movs	r2, #0
  currp->p_state = CH_STATE_CURRENT;
 800d116:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d118:	6198      	str	r0, [r3, #24]
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d11a:	77e5      	strb	r5, [r4, #31]
  tp->p_state = CH_STATE_READY;
 800d11c:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 800d11e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	4291      	cmp	r1, r2
 800d124:	d9fb      	bls.n	800d11e <chSchDoRescheduleBehind+0x1e>
  tp->p_prev = cp->p_prev;
 800d126:	685a      	ldr	r2, [r3, #4]
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800d128:	4621      	mov	r1, r4
  tp->p_prev = cp->p_prev;
 800d12a:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 800d12e:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d130:	605c      	str	r4, [r3, #4]
}
 800d132:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 800d134:	f7fe bfec 	b.w	800c110 <_port_switch>
 800d138:	20000c90 	.word	0x20000c90
 800d13c:	00000000 	.word	0x00000000

0800d140 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800d140:	4b0c      	ldr	r3, [pc, #48]	; (800d174 <chSchDoRescheduleAhead+0x34>)
  thread_t *tp = tqp->p_next;
 800d142:	6818      	ldr	r0, [r3, #0]
void chSchDoRescheduleAhead(void) {
 800d144:	b430      	push	{r4, r5}
  tqp->p_next = tp->p_next;
 800d146:	6802      	ldr	r2, [r0, #0]
  otp = currp;
 800d148:	699c      	ldr	r4, [r3, #24]
 800d14a:	601a      	str	r2, [r3, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
 800d14c:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d14e:	6053      	str	r3, [r2, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d150:	2501      	movs	r5, #1

  otp->p_state = CH_STATE_READY;
 800d152:	2200      	movs	r2, #0
  currp->p_state = CH_STATE_CURRENT;
 800d154:	7705      	strb	r5, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d156:	6198      	str	r0, [r3, #24]
  otp->p_state = CH_STATE_READY;
 800d158:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800d15a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 800d15c:	689a      	ldr	r2, [r3, #8]
 800d15e:	4291      	cmp	r1, r2
 800d160:	d3fb      	bcc.n	800d15a <chSchDoRescheduleAhead+0x1a>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800d162:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800d164:	4621      	mov	r1, r4
  otp->p_prev = cp->p_prev;
 800d166:	e9c4 3200 	strd	r3, r2, [r4]
  otp->p_prev->p_next = otp;
 800d16a:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800d16c:	605c      	str	r4, [r3, #4]
}
 800d16e:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 800d170:	f7fe bfce 	b.w	800c110 <_port_switch>
 800d174:	20000c90 	.word	0x20000c90
	...

0800d180 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800d180:	4b04      	ldr	r3, [pc, #16]	; (800d194 <chSchRescheduleS+0x14>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 800d186:	6892      	ldr	r2, [r2, #8]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d800      	bhi.n	800d190 <chSchRescheduleS+0x10>
}
 800d18e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800d190:	f7ff bfd6 	b.w	800d140 <chSchDoRescheduleAhead>
 800d194:	20000c90 	.word	0x20000c90
	...

0800d1a0 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800d1a0:	4b03      	ldr	r3, [pc, #12]	; (800d1b0 <chSchDoReschedule+0x10>)
 800d1a2:	699b      	ldr	r3, [r3, #24]
 800d1a4:	7fdb      	ldrb	r3, [r3, #31]
 800d1a6:	b10b      	cbz	r3, 800d1ac <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800d1a8:	f7ff bfca 	b.w	800d140 <chSchDoRescheduleAhead>
    chSchDoRescheduleBehind();
 800d1ac:	f7ff bfa8 	b.w	800d100 <chSchDoRescheduleBehind>
 800d1b0:	20000c90 	.word	0x20000c90
	...

0800d1c0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800d1c0:	b470      	push	{r4, r5, r6}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d1c2:	4c0e      	ldr	r4, [pc, #56]	; (800d1fc <_thread_init+0x3c>)
  tp->p_realprio = prio;
 800d1c4:	6401      	str	r1, [r0, #64]	; 0x40
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d1c6:	2204      	movs	r2, #4
  REG_INSERT(tp);
 800d1c8:	6965      	ldr	r5, [r4, #20]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d1ca:	77c2      	strb	r2, [r0, #31]
  tp->p_prio = prio;
 800d1cc:	6081      	str	r1, [r0, #8]
  tp->p_mtxlist = NULL;
 800d1ce:	2200      	movs	r2, #0
  tp->p_refs = (trefs_t)1;
 800d1d0:	2101      	movs	r1, #1
  tp->p_state = CH_STATE_WTSTART;
 800d1d2:	2602      	movs	r6, #2
  tp->p_refs = (trefs_t)1;
 800d1d4:	7781      	strb	r1, [r0, #30]
  tp->p_epending = (eventmask_t)0;
 800d1d6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d1da:	6202      	str	r2, [r0, #32]
  tp->p_name = NULL;
 800d1dc:	6182      	str	r2, [r0, #24]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800d1de:	f100 0128 	add.w	r1, r0, #40	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d1e2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  REG_INSERT(tp);
 800d1e6:	6145      	str	r5, [r0, #20]
 800d1e8:	6104      	str	r4, [r0, #16]
  tp->p_state = CH_STATE_WTSTART;
 800d1ea:	8386      	strh	r6, [r0, #28]
  REG_INSERT(tp);
 800d1ec:	6128      	str	r0, [r5, #16]
 800d1ee:	6160      	str	r0, [r4, #20]
  tqp->p_next = (thread_t *)tqp;
 800d1f0:	e9c0 120a 	strd	r1, r2, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800d1f4:	6302      	str	r2, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800d1f6:	bc70      	pop	{r4, r5, r6}
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	20000c90 	.word	0x20000c90

0800d200 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 800d200:	b4f0      	push	{r4, r5, r6, r7}
  REG_INSERT(tp);
 800d202:	4e12      	ldr	r6, [pc, #72]	; (800d24c <chThdCreateI+0x4c>)
                       tprio_t prio, tfunc_t pf, void *arg) {
 800d204:	9d04      	ldr	r5, [sp, #16]
  REG_INSERT(tp);
 800d206:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d208:	3964      	subs	r1, #100	; 0x64
 800d20a:	4401      	add	r1, r0
 800d20c:	60c1      	str	r1, [r0, #12]
 800d20e:	e9c1 3510 	strd	r3, r5, [r1, #64]	; 0x40
 800d212:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <chThdCreateI+0x50>)
 800d214:	660b      	str	r3, [r1, #96]	; 0x60
  tp->p_prio = prio;
 800d216:	6082      	str	r2, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800d218:	2102      	movs	r1, #2
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d21a:	2304      	movs	r3, #4
  tp->p_realprio = prio;
 800d21c:	6402      	str	r2, [r0, #64]	; 0x40
  tp->p_refs = (trefs_t)1;
 800d21e:	2201      	movs	r2, #1
  tp->p_state = CH_STATE_WTSTART;
 800d220:	8381      	strh	r1, [r0, #28]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d222:	77c3      	strb	r3, [r0, #31]
  tp->p_refs = (trefs_t)1;
 800d224:	7782      	strb	r2, [r0, #30]
  tp->p_mtxlist = NULL;
 800d226:	2300      	movs	r3, #0
  list_init(&tp->p_waiting);
 800d228:	f100 0128 	add.w	r1, r0, #40	; 0x28
  queue_init(&tp->p_msgqueue);
 800d22c:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  REG_INSERT(tp);
 800d230:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tp->p_epending = (eventmask_t)0;
 800d234:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d238:	6203      	str	r3, [r0, #32]
  tp->p_name = NULL;
 800d23a:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 800d23c:	6138      	str	r0, [r7, #16]
 800d23e:	6170      	str	r0, [r6, #20]
  tlp->p_next = (thread_t *)tlp;
 800d240:	6281      	str	r1, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800d242:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c

  return _thread_init(tp, prio);
}
 800d246:	bcf0      	pop	{r4, r5, r6, r7}
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	20000c90 	.word	0x20000c90
 800d250:	0800c129 	.word	0x0800c129
	...

0800d260 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d262:	461d      	mov	r5, r3
 800d264:	4604      	mov	r4, r0
 800d266:	2320      	movs	r3, #32
 800d268:	f383 8811 	msr	BASEPRI, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d26c:	3964      	subs	r1, #100	; 0x64
 800d26e:	4401      	add	r1, r0
  REG_INSERT(tp);
 800d270:	4e13      	ldr	r6, [pc, #76]	; (800d2c0 <chThdCreateStatic+0x60>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d272:	4b14      	ldr	r3, [pc, #80]	; (800d2c4 <chThdCreateStatic+0x64>)
  REG_INSERT(tp);
 800d274:	6977      	ldr	r7, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d276:	60c1      	str	r1, [r0, #12]
 800d278:	640d      	str	r5, [r1, #64]	; 0x40
 800d27a:	9d06      	ldr	r5, [sp, #24]
 800d27c:	644d      	str	r5, [r1, #68]	; 0x44
 800d27e:	660b      	str	r3, [r1, #96]	; 0x60
  tp->p_state = CH_STATE_WTSTART;
 800d280:	2502      	movs	r5, #2
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d282:	2304      	movs	r3, #4
  tp->p_prio = prio;
 800d284:	6082      	str	r2, [r0, #8]
  tp->p_realprio = prio;
 800d286:	6402      	str	r2, [r0, #64]	; 0x40
  tp->p_state = CH_STATE_WTSTART;
 800d288:	8385      	strh	r5, [r0, #28]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d28a:	77c3      	strb	r3, [r0, #31]
  tp->p_mtxlist = NULL;
 800d28c:	2500      	movs	r5, #0
  queue_init(&tp->p_msgqueue);
 800d28e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  list_init(&tp->p_waiting);
 800d292:	f100 0228 	add.w	r2, r0, #40	; 0x28
  tp->p_refs = (trefs_t)1;
 800d296:	2101      	movs	r1, #1
 800d298:	7781      	strb	r1, [r0, #30]
  REG_INSERT(tp);
 800d29a:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tp->p_epending = (eventmask_t)0;
 800d29e:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d2a2:	6205      	str	r5, [r0, #32]
  tp->p_name = NULL;
 800d2a4:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d2a6:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800d2a8:	6138      	str	r0, [r7, #16]
  tqp->p_next = (thread_t *)tqp;
 800d2aa:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800d2ae:	6303      	str	r3, [r0, #48]	; 0x30
 800d2b0:	6170      	str	r0, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800d2b2:	f7ff fedd 	bl	800d070 <chSchWakeupS>
 800d2b6:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	20000c90 	.word	0x20000c90
 800d2c4:	0800c129 	.word	0x0800c129
	...

0800d2d0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800d2d0:	b508      	push	{r3, lr}
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	2320      	movs	r3, #32
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800d2da:	2008      	movs	r0, #8
 800d2dc:	f7ff fea0 	bl	800d020 <chSchGoSleepTimeoutS>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 800d2e6:	bd08      	pop	{r3, pc}
	...

0800d2f0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800d2f0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800d2f2:	4b0e      	ldr	r3, [pc, #56]	; (800d32c <chThdExitS+0x3c>)
 800d2f4:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d2f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800d2f8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d2fa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800d2fe:	42ab      	cmp	r3, r5
 800d300:	d007      	beq.n	800d312 <chThdExitS+0x22>
  tlp->p_next = tp->p_next;
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff fe5a 	bl	800cfc0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d30c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->p_waiting)) {
 800d30e:	42ab      	cmp	r3, r5
 800d310:	d1f7      	bne.n	800d302 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800d312:	7f63      	ldrb	r3, [r4, #29]
 800d314:	079b      	lsls	r3, r3, #30
 800d316:	d104      	bne.n	800d322 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800d318:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d31c:	611a      	str	r2, [r3, #16]
 800d31e:	6922      	ldr	r2, [r4, #16]
 800d320:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d322:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800d324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800d328:	f7ff be62 	b.w	800cff0 <chSchGoSleepS>
 800d32c:	20000c90 	.word	0x20000c90

0800d330 <chThdExit>:
 800d330:	2320      	movs	r3, #32
 800d332:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 800d336:	f7ff bfdb 	b.w	800d2f0 <chThdExitS>
 800d33a:	bf00      	nop
 800d33c:	0000      	movs	r0, r0
	...

0800d340 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 800d340:	b510      	push	{r4, lr}
  return ch.rlist.r_current;
 800d342:	4c05      	ldr	r4, [pc, #20]	; (800d358 <chThdSuspendS+0x18>)
 800d344:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800d346:	6003      	str	r3, [r0, #0]
msg_t chThdSuspendS(thread_reference_t *trp) {
 800d348:	4602      	mov	r2, r0
  tp->p_u.wttrp = trp;
 800d34a:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800d34c:	2003      	movs	r0, #3
 800d34e:	f7ff fe4f 	bl	800cff0 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 800d352:	69a3      	ldr	r3, [r4, #24]
}
 800d354:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d356:	bd10      	pop	{r4, pc}
 800d358:	20000c90 	.word	0x20000c90
 800d35c:	00000000 	.word	0x00000000

0800d360 <chThdSuspendTimeoutS>:
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 800d362:	4602      	mov	r2, r0
 800d364:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 800d366:	b121      	cbz	r1, 800d372 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 800d368:	6003      	str	r3, [r0, #0]
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800d36a:	2003      	movs	r0, #3
  tp->p_u.wttrp = trp;
 800d36c:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800d36e:	f7ff be57 	b.w	800d020 <chSchGoSleepTimeoutS>
}
 800d372:	f04f 30ff 	mov.w	r0, #4294967295
 800d376:	4770      	bx	lr
 800d378:	20000c90 	.word	0x20000c90
 800d37c:	00000000 	.word	0x00000000

0800d380 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800d380:	6803      	ldr	r3, [r0, #0]
 800d382:	b12b      	cbz	r3, 800d390 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800d384:	2200      	movs	r2, #0
 800d386:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800d388:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 800d38a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d38c:	f7ff be18 	b.w	800cfc0 <chSchReadyI>
  }
}
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
	...

0800d3a0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800d3a0:	b169      	cbz	r1, 800d3be <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d3a2:	4b08      	ldr	r3, [pc, #32]	; (800d3c4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800d3a4:	b410      	push	{r4}
 800d3a6:	4602      	mov	r2, r0
  tp->p_prev = tqp->p_prev;
 800d3a8:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800d3aa:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d3ac:	2004      	movs	r0, #4
 800d3ae:	e9c3 2400 	strd	r2, r4, [r3]
  tp->p_prev->p_next = tp;
 800d3b2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800d3b4:	6053      	str	r3, [r2, #4]
}
 800d3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d3ba:	f7ff be31 	b.w	800d020 <chSchGoSleepTimeoutS>
}
 800d3be:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c2:	4770      	bx	lr
 800d3c4:	20000c90 	.word	0x20000c90
	...

0800d3d0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d3d0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d3d2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800d3d4:	4298      	cmp	r0, r3
 800d3d6:	d00b      	beq.n	800d3f0 <chThdDequeueAllI+0x20>
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460d      	mov	r5, r1
  tqp->p_next = tp->p_next;
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	6022      	str	r2, [r4, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800d3e0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d3e2:	6054      	str	r4, [r2, #4]
  tp->p_u.rdymsg = msg;
 800d3e4:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d3e6:	f7ff fdeb 	bl	800cfc0 <chSchReadyI>
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	429c      	cmp	r4, r3
 800d3ee:	d1f5      	bne.n	800d3dc <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800d3f0:	bd38      	pop	{r3, r4, r5, pc}
 800d3f2:	bf00      	nop
	...

0800d400 <chTMStartMeasurementX>:
 800d400:	4b01      	ldr	r3, [pc, #4]	; (800d408 <chTMStartMeasurementX+0x8>)
 800d402:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800d404:	6083      	str	r3, [r0, #8]
}
 800d406:	4770      	bx	lr
 800d408:	e0001000 	.word	0xe0001000
 800d40c:	00000000 	.word	0x00000000

0800d410 <chTMStopMeasurementX>:
 800d410:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d412:	4a10      	ldr	r2, [pc, #64]	; (800d454 <chTMStopMeasurementX+0x44>)
 800d414:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 800d416:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800d418:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800d41a:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d41c:	6f96      	ldr	r6, [r2, #120]	; 0x78
  if (tmp->last > tmp->worst) {
 800d41e:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 800d420:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 800d422:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800d426:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 800d428:	18e6      	adds	r6, r4, r3
 800d42a:	f145 0700 	adc.w	r7, r5, #0
  tmp->n++;
 800d42e:	3101      	adds	r1, #1
  if (tmp->last > tmp->worst) {
 800d430:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800d432:	e9c0 3102 	strd	r3, r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800d436:	e9c0 6704 	strd	r6, r7, [r0, #16]
  if (tmp->last > tmp->worst) {
 800d43a:	d805      	bhi.n	800d448 <chTMStopMeasurementX+0x38>
  else if (tmp->last < tmp->best) {
 800d43c:	6802      	ldr	r2, [r0, #0]
 800d43e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800d440:	bf38      	it	cc
 800d442:	6003      	strcc	r3, [r0, #0]
}
 800d444:	bcf0      	pop	{r4, r5, r6, r7}
 800d446:	4770      	bx	lr
    tmp->worst = tmp->last;
 800d448:	6043      	str	r3, [r0, #4]
}
 800d44a:	bcf0      	pop	{r4, r5, r6, r7}
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	e0001000 	.word	0xe0001000
 800d454:	20000c90 	.word	0x20000c90
	...

0800d460 <_tm_init>:
void _tm_init(void) {
 800d460:	b510      	push	{r4, lr}
  ch.tm.offset = (rtcnt_t)0;
 800d462:	4c0c      	ldr	r4, [pc, #48]	; (800d494 <_tm_init+0x34>)
void _tm_init(void) {
 800d464:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 800d466:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 800d468:	f04f 31ff 	mov.w	r1, #4294967295
  tmp->cumulative = (rttime_t)0;
 800d46c:	2200      	movs	r2, #0
  chTMStartMeasurementX(&tm);
 800d46e:	4668      	mov	r0, sp
  ch.tm.offset = (rtcnt_t)0;
 800d470:	67a3      	str	r3, [r4, #120]	; 0x78
  tmp->last       = (rtcnt_t)0;
 800d472:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 800d476:	9303      	str	r3, [sp, #12]
  tmp->cumulative = (rttime_t)0;
 800d478:	2300      	movs	r3, #0
 800d47a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 800d47e:	9100      	str	r1, [sp, #0]
  chTMStartMeasurementX(&tm);
 800d480:	f7ff ffbe 	bl	800d400 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800d484:	4668      	mov	r0, sp
 800d486:	f7ff ffc3 	bl	800d410 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d48e:	b006      	add	sp, #24
 800d490:	bd10      	pop	{r4, pc}
 800d492:	bf00      	nop
 800d494:	20000c90 	.word	0x20000c90
	...

0800d4a0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800d4a0:	2300      	movs	r3, #0
  tqp->p_prev = (thread_t *)tqp;
 800d4a2:	e9c0 0000 	strd	r0, r0, [r0]
 800d4a6:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
#endif
}
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	0000      	movs	r0, r0
	...

0800d4b0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 800d4b2:	4a36      	ldr	r2, [pc, #216]	; (800d58c <chMtxLockS+0xdc>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800d4b4:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 800d4b6:	6995      	ldr	r5, [r2, #24]
  if (mp->m_owner != NULL) {
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d03f      	beq.n	800d53c <chMtxLockS+0x8c>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800d4bc:	68a9      	ldr	r1, [r5, #8]
 800d4be:	689a      	ldr	r2, [r3, #8]
 800d4c0:	4291      	cmp	r1, r2
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	d906      	bls.n	800d4d4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800d4c6:	7f1a      	ldrb	r2, [r3, #28]
        tp->p_prio = ctp->p_prio;
 800d4c8:	6099      	str	r1, [r3, #8]
        switch (tp->p_state) {
 800d4ca:	2a06      	cmp	r2, #6
 800d4cc:	d03b      	beq.n	800d546 <chMtxLockS+0x96>
 800d4ce:	2a07      	cmp	r2, #7
 800d4d0:	d015      	beq.n	800d4fe <chMtxLockS+0x4e>
 800d4d2:	b342      	cbz	r2, 800d526 <chMtxLockS+0x76>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
 800d4d4:	4626      	mov	r6, r4
 800d4d6:	4623      	mov	r3, r4
 800d4d8:	e003      	b.n	800d4e2 <chMtxLockS+0x32>
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d4da:	6899      	ldr	r1, [r3, #8]
 800d4dc:	68aa      	ldr	r2, [r5, #8]
 800d4de:	4291      	cmp	r1, r2
 800d4e0:	d32a      	bcc.n	800d538 <chMtxLockS+0x88>
    cp = cp->p_next;
 800d4e2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d4e4:	429c      	cmp	r4, r3
 800d4e6:	d1f8      	bne.n	800d4da <chMtxLockS+0x2a>
  tp->p_prev = cp->p_prev;
 800d4e8:	6873      	ldr	r3, [r6, #4]
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 800d4ea:	2006      	movs	r0, #6
 800d4ec:	e9c5 6300 	strd	r6, r3, [r5]
  tp->p_prev->p_next = tp;
 800d4f0:	601d      	str	r5, [r3, #0]
  cp->p_prev = tp;
 800d4f2:	6075      	str	r5, [r6, #4]
      ctp->p_u.wtmtxp = mp;
 800d4f4:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 800d4f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 800d4fa:	f7ff bd79 	b.w	800cff0 <chSchGoSleepS>
  tp->p_prev->p_next = tp->p_next;
 800d4fe:	e9d3 0200 	ldrd	r0, r2, [r3]
 800d502:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800d504:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->p_next->p_prev = tp->p_prev;
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	6042      	str	r2, [r0, #4]
 800d50a:	4632      	mov	r2, r6
 800d50c:	e002      	b.n	800d514 <chMtxLockS+0x64>
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d50e:	6890      	ldr	r0, [r2, #8]
 800d510:	4288      	cmp	r0, r1
 800d512:	d332      	bcc.n	800d57a <chMtxLockS+0xca>
    cp = cp->p_next;
 800d514:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d516:	4296      	cmp	r6, r2
 800d518:	d1f9      	bne.n	800d50e <chMtxLockS+0x5e>
  tp->p_prev = cp->p_prev;
 800d51a:	6872      	ldr	r2, [r6, #4]
 800d51c:	e9c3 6200 	strd	r6, r2, [r3]
  tp->p_prev->p_next = tp;
 800d520:	6013      	str	r3, [r2, #0]
  cp->p_prev = tp;
 800d522:	6073      	str	r3, [r6, #4]
 800d524:	e7d6      	b.n	800d4d4 <chMtxLockS+0x24>
  tp->p_prev->p_next = tp->p_next;
 800d526:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d52a:	6011      	str	r1, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 800d52c:	6819      	ldr	r1, [r3, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 800d52e:	4618      	mov	r0, r3
 800d530:	604a      	str	r2, [r1, #4]
 800d532:	f7ff fd45 	bl	800cfc0 <chSchReadyI>
          break;
 800d536:	e7cd      	b.n	800d4d4 <chMtxLockS+0x24>
    cp = cp->p_next;
 800d538:	461e      	mov	r6, r3
 800d53a:	e7d5      	b.n	800d4e8 <chMtxLockS+0x38>
    mp->m_next = ctp->p_mtxlist;
 800d53c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d53e:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->p_mtxlist = mp;
 800d542:	63e8      	str	r0, [r5, #60]	; 0x3c
}
 800d544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->p_prev->p_next = tp->p_next;
 800d546:	e9d3 0200 	ldrd	r0, r2, [r3]
 800d54a:	6010      	str	r0, [r2, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800d54c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  tp->p_next->p_prev = tp->p_prev;
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	4637      	mov	r7, r6
 800d552:	6042      	str	r2, [r0, #4]
 800d554:	4632      	mov	r2, r6
 800d556:	e002      	b.n	800d55e <chMtxLockS+0xae>
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d558:	6890      	ldr	r0, [r2, #8]
 800d55a:	4288      	cmp	r0, r1
 800d55c:	d314      	bcc.n	800d588 <chMtxLockS+0xd8>
    cp = cp->p_next;
 800d55e:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d560:	4296      	cmp	r6, r2
 800d562:	d1f9      	bne.n	800d558 <chMtxLockS+0xa8>
  tp->p_prev = cp->p_prev;
 800d564:	687a      	ldr	r2, [r7, #4]
      while (tp->p_prio < ctp->p_prio) {
 800d566:	68a9      	ldr	r1, [r5, #8]
 800d568:	e9c3 7200 	strd	r7, r2, [r3]
  tp->p_prev->p_next = tp;
 800d56c:	6013      	str	r3, [r2, #0]
  cp->p_prev = tp;
 800d56e:	607b      	str	r3, [r7, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800d570:	68b3      	ldr	r3, [r6, #8]
      while (tp->p_prio < ctp->p_prio) {
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	428a      	cmp	r2, r1
 800d576:	d3a6      	bcc.n	800d4c6 <chMtxLockS+0x16>
 800d578:	e7ac      	b.n	800d4d4 <chMtxLockS+0x24>
    cp = cp->p_next;
 800d57a:	4616      	mov	r6, r2
  tp->p_prev = cp->p_prev;
 800d57c:	6872      	ldr	r2, [r6, #4]
 800d57e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->p_prev->p_next = tp;
 800d582:	6013      	str	r3, [r2, #0]
  cp->p_prev = tp;
 800d584:	6073      	str	r3, [r6, #4]
 800d586:	e7a5      	b.n	800d4d4 <chMtxLockS+0x24>
    cp = cp->p_next;
 800d588:	4617      	mov	r7, r2
 800d58a:	e7eb      	b.n	800d564 <chMtxLockS+0xb4>
 800d58c:	20000c90 	.word	0x20000c90

0800d590 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 800d590:	b508      	push	{r3, lr}
 800d592:	2320      	movs	r3, #32
 800d594:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800d598:	f7ff ff8a 	bl	800d4b0 <chMtxLockS>
 800d59c:	2300      	movs	r3, #0
 800d59e:	f383 8811 	msr	BASEPRI, r3
}
 800d5a2:	bd08      	pop	{r3, pc}
	...

0800d5b0 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 800d5b0:	4b17      	ldr	r3, [pc, #92]	; (800d610 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 800d5b2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800d5b4:	699d      	ldr	r5, [r3, #24]
 800d5b6:	2320      	movs	r3, #32
 800d5b8:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d5bc:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800d5be:	68c3      	ldr	r3, [r0, #12]
 800d5c0:	63eb      	str	r3, [r5, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800d5c2:	4284      	cmp	r4, r0
 800d5c4:	d01d      	beq.n	800d602 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 800d5c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800d5c8:	b14b      	cbz	r3, 800d5de <chMtxUnlock+0x2e>
 800d5ca:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d003      	beq.n	800d5d8 <chMtxUnlock+0x28>
 800d5d0:	6892      	ldr	r2, [r2, #8]
 800d5d2:	4291      	cmp	r1, r2
 800d5d4:	bf38      	it	cc
 800d5d6:	4611      	movcc	r1, r2
            (lmp->m_queue.p_next->p_prio > newprio)) {
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 800d5d8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1f5      	bne.n	800d5ca <chMtxUnlock+0x1a>
 800d5de:	4603      	mov	r3, r0
  tqp->p_next = tp->p_next;
 800d5e0:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800d5e2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
      ctp->p_prio = newprio;
 800d5e4:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d5ea:	6053      	str	r3, [r2, #4]
      mp->m_next = tp->p_mtxlist;
 800d5ec:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->p_mtxlist = mp;
 800d5f0:	63e3      	str	r3, [r4, #60]	; 0x3c
      (void) chSchReadyI(tp);
 800d5f2:	f7ff fce5 	bl	800cfc0 <chSchReadyI>
      chSchRescheduleS();
 800d5f6:	f7ff fdc3 	bl	800d180 <chSchRescheduleS>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 800d600:	bd70      	pop	{r4, r5, r6, pc}
      mp->m_owner = NULL;
 800d602:	2300      	movs	r3, #0
 800d604:	60a3      	str	r3, [r4, #8]
 800d606:	2300      	movs	r3, #0
 800d608:	f383 8811 	msr	BASEPRI, r3
}
 800d60c:	bd70      	pop	{r4, r5, r6, pc}
 800d60e:	bf00      	nop
 800d610:	20000c90 	.word	0x20000c90
	...

0800d620 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 800d620:	b430      	push	{r4, r5}
 800d622:	2420      	movs	r4, #32
 800d624:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 800d628:	4d06      	ldr	r5, [pc, #24]	; (800d644 <chEvtRegisterMaskWithFlags+0x24>)
  elp->el_next     = esp->es_next;
 800d62a:	6804      	ldr	r4, [r0, #0]
  elp->el_listener = currp;
 800d62c:	69ad      	ldr	r5, [r5, #24]
  elp->el_next     = esp->es_next;
 800d62e:	600c      	str	r4, [r1, #0]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800d630:	2400      	movs	r4, #0
  esp->es_next     = elp;
 800d632:	6001      	str	r1, [r0, #0]
  elp->el_events   = events;
 800d634:	e9c1 5201 	strd	r5, r2, [r1, #4]
  elp->el_flags    = (eventflags_t)0;
 800d638:	e9c1 4303 	strd	r4, r3, [r1, #12]
 800d63c:	f384 8811 	msr	BASEPRI, r4
  elp->el_wflags   = wflags;
  chSysUnlock();
}
 800d640:	bc30      	pop	{r4, r5}
 800d642:	4770      	bx	lr
 800d644:	20000c90 	.word	0x20000c90
	...

0800d650 <chEvtUnregister>:
 800d650:	2320      	movs	r3, #32
 800d652:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 800d656:	4602      	mov	r2, r0
 800d658:	e002      	b.n	800d660 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 800d65a:	428b      	cmp	r3, r1
 800d65c:	d007      	beq.n	800d66e <chEvtUnregister+0x1e>
 800d65e:	461a      	mov	r2, r3
  while (p->el_next != (event_listener_t *)esp) {
 800d660:	6813      	ldr	r3, [r2, #0]
 800d662:	4283      	cmp	r3, r0
 800d664:	d1f9      	bne.n	800d65a <chEvtUnregister+0xa>
 800d666:	2300      	movs	r3, #0
 800d668:	f383 8811 	msr	BASEPRI, r3
      break;
    }
    p = p->el_next;
  }
  chSysUnlock();
}
 800d66c:	4770      	bx	lr
      p->el_next = elp->el_next;
 800d66e:	680b      	ldr	r3, [r1, #0]
 800d670:	6013      	str	r3, [r2, #0]
 800d672:	2300      	movs	r3, #0
 800d674:	f383 8811 	msr	BASEPRI, r3
}
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	0000      	movs	r0, r0
	...

0800d680 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d680:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d682:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 800d684:	4319      	orrs	r1, r3
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d686:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 800d688:	6381      	str	r1, [r0, #56]	; 0x38
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d68a:	d009      	beq.n	800d6a0 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d68c:	2a0b      	cmp	r2, #11
 800d68e:	d000      	beq.n	800d692 <chEvtSignalI+0x12>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800d690:	4770      	bx	lr
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800d692:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800d694:	438b      	bics	r3, r1
 800d696:	d1fb      	bne.n	800d690 <chEvtSignalI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 800d698:	2300      	movs	r3, #0
 800d69a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d69c:	f7ff bc90 	b.w	800cfc0 <chSchReadyI>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d6a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d6a2:	4219      	tst	r1, r3
 800d6a4:	d1f8      	bne.n	800d698 <chEvtSignalI+0x18>
 800d6a6:	4770      	bx	lr
	...

0800d6b0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d6b0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->es_next;
 800d6b2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 800d6b4:	42a0      	cmp	r0, r4
 800d6b6:	d00f      	beq.n	800d6d8 <chEvtBroadcastFlagsI+0x28>
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	460d      	mov	r5, r1
    elp->el_flags |= flags;
 800d6bc:	68e3      	ldr	r3, [r4, #12]
 800d6be:	432b      	orrs	r3, r5
 800d6c0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800d6c2:	b115      	cbz	r5, 800d6ca <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800d6c4:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 800d6c6:	4213      	tst	r3, r2
 800d6c8:	d003      	beq.n	800d6d2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 800d6ca:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800d6ce:	f7ff ffd7 	bl	800d680 <chEvtSignalI>
    elp = elp->el_next;
 800d6d2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800d6d4:	42a6      	cmp	r6, r4
 800d6d6:	d1f1      	bne.n	800d6bc <chEvtBroadcastFlagsI+0xc>
}
 800d6d8:	bd70      	pop	{r4, r5, r6, pc}
 800d6da:	bf00      	nop
 800d6dc:	0000      	movs	r0, r0
	...

0800d6e0 <chEvtSignal>:
void chEvtSignal(thread_t *tp, eventmask_t events) {
 800d6e0:	b508      	push	{r3, lr}
 800d6e2:	2320      	movs	r3, #32
 800d6e4:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 800d6e8:	f7ff ffca 	bl	800d680 <chEvtSignalI>
  chSchRescheduleS();
 800d6ec:	f7ff fd48 	bl	800d180 <chSchRescheduleS>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f383 8811 	msr	BASEPRI, r3
}
 800d6f6:	bd08      	pop	{r3, pc}
	...

0800d700 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800d700:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800d702:	4b0c      	ldr	r3, [pc, #48]	; (800d734 <chEvtWaitAny+0x34>)
 800d704:	699d      	ldr	r5, [r3, #24]
 800d706:	2320      	movs	r3, #32
 800d708:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800d70c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800d70e:	ea13 0400 	ands.w	r4, r3, r0
 800d712:	d106      	bne.n	800d722 <chEvtWaitAny+0x22>
 800d714:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 800d716:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800d718:	200a      	movs	r0, #10
 800d71a:	f7ff fc69 	bl	800cff0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800d71e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d720:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 800d722:	ea23 0304 	bic.w	r3, r3, r4
 800d726:	63ab      	str	r3, [r5, #56]	; 0x38
 800d728:	2300      	movs	r3, #0
 800d72a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800d72e:	4620      	mov	r0, r4
 800d730:	bd38      	pop	{r3, r4, r5, pc}
 800d732:	bf00      	nop
 800d734:	20000c90 	.word	0x20000c90
	...

0800d740 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800d740:	4b10      	ldr	r3, [pc, #64]	; (800d784 <chEvtWaitAnyTimeout+0x44>)
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
 800d742:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800d744:	699e      	ldr	r6, [r3, #24]
 800d746:	2320      	movs	r3, #32
 800d748:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800d74c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800d74e:	ea13 0500 	ands.w	r5, r3, r0
 800d752:	d10e      	bne.n	800d772 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 800d754:	b919      	cbnz	r1, 800d75e <chEvtWaitAnyTimeout+0x1e>
 800d756:	f385 8811 	msr	BASEPRI, r5
  }
  ctp->p_epending &= ~m;
  chSysUnlock();

  return m;
}
 800d75a:	4628      	mov	r0, r5
 800d75c:	bd70      	pop	{r4, r5, r6, pc}
    ctp->p_u.ewmask = events;
 800d75e:	6270      	str	r0, [r6, #36]	; 0x24
 800d760:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 800d762:	200a      	movs	r0, #10
 800d764:	f7ff fc5c 	bl	800d020 <chSchGoSleepTimeoutS>
 800d768:	2800      	cmp	r0, #0
 800d76a:	dbf4      	blt.n	800d756 <chEvtWaitAnyTimeout+0x16>
    m = ctp->p_epending & events;
 800d76c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800d76e:	ea03 0504 	and.w	r5, r3, r4
  ctp->p_epending &= ~m;
 800d772:	ea23 0305 	bic.w	r3, r3, r5
 800d776:	63b3      	str	r3, [r6, #56]	; 0x38
 800d778:	2300      	movs	r3, #0
 800d77a:	f383 8811 	msr	BASEPRI, r3
}
 800d77e:	4628      	mov	r0, r5
 800d780:	bd70      	pop	{r4, r5, r6, pc}
 800d782:	bf00      	nop
 800d784:	20000c90 	.word	0x20000c90
	...

0800d790 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800d790:	b430      	push	{r4, r5}
 800d792:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800d794:	6204      	str	r4, [r0, #32]
  iqp->q_counter = 0;
 800d796:	2500      	movs	r5, #0
  iqp->q_top     = bp + size;
 800d798:	440a      	add	r2, r1
  iqp->q_counter = 0;
 800d79a:	6085      	str	r5, [r0, #8]
  iqp->q_top     = bp + size;
 800d79c:	6102      	str	r2, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800d79e:	e9c0 0000 	strd	r0, r0, [r0]
  iqp->q_buffer  = bp;
 800d7a2:	60c1      	str	r1, [r0, #12]
  iqp->q_wrptr   = bp;
 800d7a4:	e9c0 1105 	strd	r1, r1, [r0, #20]
  iqp->q_notify  = infy;
 800d7a8:	61c3      	str	r3, [r0, #28]
}
 800d7aa:	bc30      	pop	{r4, r5}
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop

0800d7b0 <chIQResetI>:
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800d7b0:	68c2      	ldr	r2, [r0, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	6081      	str	r1, [r0, #8]
  iqp->q_wrptr = iqp->q_buffer;
 800d7b6:	e9c0 2205 	strd	r2, r2, [r0, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800d7ba:	f06f 0101 	mvn.w	r1, #1
 800d7be:	f7ff be07 	b.w	800d3d0 <chThdDequeueAllI>
 800d7c2:	bf00      	nop
	...

0800d7d0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	2320      	movs	r3, #32
 800d7d4:	460e      	mov	r6, r1
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800d7dc:	69c3      	ldr	r3, [r0, #28]
 800d7de:	b12b      	cbz	r3, 800d7ec <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800d7e0:	4798      	blx	r3
 800d7e2:	e003      	b.n	800d7ec <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d7e4:	f7ff fddc 	bl	800d3a0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	db15      	blt.n	800d818 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800d7ec:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 800d7f2:	2d00      	cmp	r5, #0
 800d7f4:	d0f6      	beq.n	800d7e4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d7f6:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800d7f8:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800d7fa:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800d7fc:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800d7fe:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800d800:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 800d802:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800d804:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 800d806:	bf28      	it	cs
 800d808:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800d80a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800d80c:	bf28      	it	cs
 800d80e:	61a3      	strcs	r3, [r4, #24]
 800d810:	2300      	movs	r3, #0
 800d812:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	f385 8811 	msr	BASEPRI, r5
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
 800d81e:	bf00      	nop

0800d820 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4604      	mov	r4, r0
 800d826:	b083      	sub	sp, #12
 800d828:	4689      	mov	r9, r1
 800d82a:	4693      	mov	fp, r2
 800d82c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800d82e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d832:	2720      	movs	r7, #32
 800d834:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800d838:	2600      	movs	r6, #0
 800d83a:	9701      	str	r7, [sp, #4]
 800d83c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800d83e:	f1b8 0f00 	cmp.w	r8, #0
 800d842:	d005      	beq.n	800d850 <chIQReadTimeout+0x30>
      nfy(iqp);
 800d844:	4620      	mov	r0, r4
 800d846:	47c0      	blx	r8
 800d848:	e002      	b.n	800d850 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800d84a:	f7ff fda9 	bl	800d3a0 <chThdEnqueueTimeoutS>
 800d84e:	b9e0      	cbnz	r0, 800d88a <chIQReadTimeout+0x6a>
 800d850:	68a7      	ldr	r7, [r4, #8]
 800d852:	4629      	mov	r1, r5
 800d854:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 800d856:	2f00      	cmp	r7, #0
 800d858:	d0f7      	beq.n	800d84a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800d85a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 800d85c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d85e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 800d860:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800d862:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 800d864:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d866:	7813      	ldrb	r3, [r2, #0]
 800d868:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	69a2      	ldr	r2, [r4, #24]
 800d870:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800d872:	bf24      	itt	cs
 800d874:	68e3      	ldrcs	r3, [r4, #12]
 800d876:	61a3      	strcs	r3, [r4, #24]
 800d878:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800d87c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800d87e:	45b3      	cmp	fp, r6
 800d880:	d005      	beq.n	800d88e <chIQReadTimeout+0x6e>
 800d882:	9b01      	ldr	r3, [sp, #4]
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	e7d9      	b.n	800d83e <chIQReadTimeout+0x1e>
 800d88a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800d88e:	4630      	mov	r0, r6
 800d890:	b003      	add	sp, #12
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	bf00      	nop
	...

0800d8a0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800d8a0:	b430      	push	{r4, r5}
 800d8a2:	9c02      	ldr	r4, [sp, #8]

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800d8a4:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800d8a6:	188d      	adds	r5, r1, r2
  oqp->q_buffer  = bp;
 800d8a8:	e9c0 1503 	strd	r1, r5, [r0, #12]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800d8ac:	e9c0 3407 	strd	r3, r4, [r0, #28]
 800d8b0:	e9c0 0000 	strd	r0, r0, [r0]
  oqp->q_wrptr   = bp;
 800d8b4:	e9c0 1105 	strd	r1, r1, [r0, #20]
}
 800d8b8:	bc30      	pop	{r4, r5}
 800d8ba:	4770      	bx	lr
 800d8bc:	0000      	movs	r0, r0
	...

0800d8c0 <chOQResetI>:
 *
 * @param[in] oqp       pointer to an @p output_queue_t structure
 *
 * @iclass
 */
void chOQResetI(output_queue_t *oqp) {
 800d8c0:	b410      	push	{r4}

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800d8c2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800d8c6:	1b12      	subs	r2, r2, r4
  oqp->q_rdptr = oqp->q_buffer;
 800d8c8:	6184      	str	r4, [r0, #24]
  oqp->q_wrptr = oqp->q_buffer;
 800d8ca:	6144      	str	r4, [r0, #20]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800d8cc:	f06f 0101 	mvn.w	r1, #1
  oqp->q_counter = chQSizeX(oqp);
 800d8d0:	6082      	str	r2, [r0, #8]
}
 800d8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800d8d6:	f7ff bd7b 	b.w	800d3d0 <chThdDequeueAllI>
 800d8da:	bf00      	nop
 800d8dc:	0000      	movs	r0, r0
	...

0800d8e0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800d8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	460f      	mov	r7, r1
 800d8e6:	4616      	mov	r6, r2
 800d8e8:	2320      	movs	r3, #32
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	e003      	b.n	800d8f8 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d8f0:	f7ff fd56 	bl	800d3a0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	db18      	blt.n	800d92a <chOQPutTimeout+0x4a>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d8f8:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800d8fe:	2d00      	cmp	r5, #0
 800d900:	d0f6      	beq.n	800d8f0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800d902:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 800d904:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d906:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800d908:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800d90a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800d90c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d90e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800d910:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d914:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800d916:	bf24      	itt	cs
 800d918:	68e3      	ldrcs	r3, [r4, #12]
 800d91a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800d91c:	69e3      	ldr	r3, [r4, #28]
 800d91e:	b103      	cbz	r3, 800d922 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800d920:	4798      	blx	r3
 800d922:	2000      	movs	r0, #0
 800d924:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800d928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d92a:	f385 8811 	msr	BASEPRI, r5
 800d92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d930 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	b083      	sub	sp, #12
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	4616      	mov	r6, r2
 800d93c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800d93e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d942:	f04f 0920 	mov.w	r9, #32
 800d946:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800d94a:	2700      	movs	r7, #0
 800d94c:	46ba      	mov	sl, r7
 800d94e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d950:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d954:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 800d956:	b303      	cbz	r3, 800d99a <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 800d958:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 800d95a:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d95c:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 800d95e:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800d960:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 800d962:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d964:	782b      	ldrb	r3, [r5, #0]
 800d966:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800d968:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800d96c:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800d96e:	bf24      	itt	cs
 800d970:	68e3      	ldrcs	r3, [r4, #12]
 800d972:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 800d974:	f1b8 0f00 	cmp.w	r8, #0
 800d978:	d000      	beq.n	800d97c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800d97a:	47c0      	blx	r8
 800d97c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800d980:	3e01      	subs	r6, #1
    w++;
 800d982:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800d986:	d012      	beq.n	800d9ae <chOQWriteTimeout+0x7e>
 800d988:	f389 8811 	msr	BASEPRI, r9
 800d98c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d98e:	465d      	mov	r5, fp
 800d990:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 800d994:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1de      	bne.n	800d958 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800d99a:	9901      	ldr	r1, [sp, #4]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f7ff fcfe 	bl	800d3a0 <chThdEnqueueTimeoutS>
 800d9a4:	9b00      	ldr	r3, [sp, #0]
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d0d1      	beq.n	800d94e <chOQWriteTimeout+0x1e>
 800d9aa:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	b003      	add	sp, #12
 800d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b6:	bf00      	nop
	...

0800d9c0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d9c0:	4a05      	ldr	r2, [pc, #20]	; (800d9d8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d9c2:	4b06      	ldr	r3, [pc, #24]	; (800d9dc <_core_init+0x1c>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d9c4:	4806      	ldr	r0, [pc, #24]	; (800d9e0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d9c6:	4907      	ldr	r1, [pc, #28]	; (800d9e4 <_core_init+0x24>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d9c8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d9cc:	f023 0307 	bic.w	r3, r3, #7
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d9d0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d9d2:	600b      	str	r3, [r1, #0]

  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_CFG_MEMCORE_SIZE) /
                              MEM_ALIGN_SIZE];
#endif
}
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	2000af07 	.word	0x2000af07
 800d9dc:	20020000 	.word	0x20020000
 800d9e0:	20000eec 	.word	0x20000eec
 800d9e4:	20000ee8 	.word	0x20000ee8
	...

0800d9f0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2220      	movs	r2, #32
 800d9f4:	f382 8811 	msr	BASEPRI, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d9f8:	4908      	ldr	r1, [pc, #32]	; (800da1c <chCoreAlloc+0x2c>)
 800d9fa:	4a09      	ldr	r2, [pc, #36]	; (800da20 <chCoreAlloc+0x30>)
 800d9fc:	6808      	ldr	r0, [r1, #0]
 800d9fe:	6812      	ldr	r2, [r2, #0]
  size = MEM_ALIGN_NEXT(size);
 800da00:	3307      	adds	r3, #7
 800da02:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 800da06:	1a12      	subs	r2, r2, r0
 800da08:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800da0a:	bf9a      	itte	ls
 800da0c:	181b      	addls	r3, r3, r0
 800da0e:	600b      	strls	r3, [r1, #0]
    return NULL;
 800da10:	2000      	movhi	r0, #0
 800da12:	2300      	movs	r3, #0
 800da14:	f383 8811 	msr	BASEPRI, r3
}
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	20000eec 	.word	0x20000eec
 800da20:	20000ee8 	.word	0x20000ee8
	...

0800da30 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800da30:	4b04      	ldr	r3, [pc, #16]	; (800da44 <_heap_init+0x14>)
 800da32:	4a05      	ldr	r2, [pc, #20]	; (800da48 <_heap_init+0x18>)
 800da34:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800da36:	f103 0010 	add.w	r0, r3, #16
  default_heap.h_free.h.u.next = NULL;
 800da3a:	2200      	movs	r2, #0
  default_heap.h_free.h.size = 0;
 800da3c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMtxObjectInit(&default_heap.h_mtx);
 800da40:	f7ff bd2e 	b.w	800d4a0 <chMtxObjectInit>
 800da44:	20000ef0 	.word	0x20000ef0
 800da48:	0800d9f1 	.word	0x0800d9f1
 800da4c:	00000000 	.word	0x00000000

0800da50 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 800da50:	b480      	push	{r7}
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800da52:	4a09      	ldr	r2, [pc, #36]	; (800da78 <SVC_Handler+0x28>)
 800da54:	6853      	ldr	r3, [r2, #4]
 800da56:	f023 0301 	bic.w	r3, r3, #1
void SVC_Handler(void) {
 800da5a:	af00      	add	r7, sp, #0
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800da5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800da5e:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800da62:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800da64:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800da68:	2300      	movs	r3, #0
 800da6a:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	e000ef30 	.word	0xe000ef30
 800da7c:	00000000 	.word	0x00000000

0800da80 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800da80:	b598      	push	{r3, r4, r7, lr}
 800da82:	2320      	movs	r3, #32
 800da84:	af00      	add	r7, sp, #0
 800da86:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800da8a:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <_port_irq_epilogue+0x50>)
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800da92:	d102      	bne.n	800da9a <_port_irq_epilogue+0x1a>
 800da94:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 800da98:	bd98      	pop	{r3, r4, r7, pc}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800da9a:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800da9e:	f3ef 8409 	mrs	r4, PSP
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800daa2:	4b0c      	ldr	r3, [pc, #48]	; (800dad4 <_port_irq_epilogue+0x54>)
    ctxp->xpsr = (regarm_t)0x01000000;
 800daa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	f844 3c08 	str.w	r3, [r4, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 800daae:	f844 2c4c 	str.w	r2, [r4, #-76]
    ctxp--;
 800dab2:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800dab6:	f383 8809 	msr	PSP, r3
    if (chSchIsPreemptionRequired()) {
 800daba:	f7ff fb09 	bl	800d0d0 <chSchIsPreemptionRequired>
 800dabe:	b118      	cbz	r0, 800dac8 <_port_irq_epilogue+0x48>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800dac0:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <_port_irq_epilogue+0x58>)
 800dac2:	f844 3c50 	str.w	r3, [r4, #-80]
}
 800dac6:	bd98      	pop	{r3, r4, r7, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800dac8:	4b04      	ldr	r3, [pc, #16]	; (800dadc <_port_irq_epilogue+0x5c>)
 800daca:	f844 3c50 	str.w	r3, [r4, #-80]
}
 800dace:	bd98      	pop	{r3, r4, r7, pc}
 800dad0:	e000ed00 	.word	0xe000ed00
 800dad4:	e000ef30 	.word	0xe000ef30
 800dad8:	0800c139 	.word	0x0800c139
 800dadc:	0800c13c 	.word	0x0800c13c

0800dae0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800dae0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800dae2:	f001 f895 	bl	800ec10 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800dae6:	480b      	ldr	r0, [pc, #44]	; (800db14 <halInit+0x34>)
 800dae8:	f001 fb52 	bl	800f190 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800daec:	f000 f818 	bl	800db20 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800daf0:	f000 f876 	bl	800dbe0 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800daf4:	f000 f8ec 	bl	800dcd0 <icuInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 800daf8:	f000 fae2 	bl	800e0c0 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 800dafc:	f000 faf8 	bl	800e0f0 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800db00:	f000 fb16 	bl	800e130 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800db04:	f000 f9cc 	bl	800dea0 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800db08:	f003 f842 	bl	8010b90 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800db0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 800db10:	f000 bae6 	b.w	800e0e0 <stInit>
 800db14:	08017bd0 	.word	0x08017bd0
	...

0800db20 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800db20:	f001 ba6e 	b.w	800f000 <can_lld_init>
	...

0800db30 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800db30:	b430      	push	{r4, r5}

  canp->state    = CAN_STOP;
  canp->config   = NULL;
 800db32:	2100      	movs	r1, #0
  canp->state    = CAN_STOP;
 800db34:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800db36:	f100 0218 	add.w	r2, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800db3a:	f100 031c 	add.w	r3, r0, #28
  osalEventObjectInit(&canp->error_event);
 800db3e:	f100 0520 	add.w	r5, r0, #32
  canp->state    = CAN_STOP;
 800db42:	7004      	strb	r4, [r0, #0]
  canp->config   = NULL;
 800db44:	6041      	str	r1, [r0, #4]
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800db46:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800db4a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800db4e:	6182      	str	r2, [r0, #24]
 800db50:	61c3      	str	r3, [r0, #28]
  osalThreadQueueObjectInit(&canp->txqueue);
 800db52:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800db56:	f100 0310 	add.w	r3, r0, #16
 800db5a:	e9c0 5408 	strd	r5, r4, [r0, #32]
 800db5e:	6281      	str	r1, [r0, #40]	; 0x28
 800db60:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800db64:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif
}
 800db68:	bc30      	pop	{r4, r5}
 800db6a:	4770      	bx	lr
 800db6c:	0000      	movs	r0, r0
	...

0800db70 <canStart>:
 * @param[in] config    pointer to the @p CANConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void canStart(CANDriver *canp, const CANConfig *config) {
 800db70:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800db72:	2320      	movs	r3, #32
 800db74:	4604      	mov	r4, r0
 800db76:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 800db7a:	2302      	movs	r3, #2
 800db7c:	7003      	strb	r3, [r0, #0]
  canp->config = config;
 800db7e:	6041      	str	r1, [r0, #4]

  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);
 800db80:	f001 fa56 	bl	800f030 <can_lld_start>

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 800db84:	2303      	movs	r3, #3
 800db86:	7023      	strb	r3, [r4, #0]
 800db88:	2300      	movs	r3, #0
 800db8a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800db8e:	bd10      	pop	{r4, pc}

0800db90 <canReceive>:
 * @api
 */
msg_t canReceive(CANDriver *canp,
                 canmbx_t mailbox,
                 CANRxFrame *crfp,
                 systime_t timeout) {
 800db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db94:	461f      	mov	r7, r3
 800db96:	4604      	mov	r4, r0
 800db98:	460d      	mov	r5, r1
 800db9a:	4690      	mov	r8, r2
 800db9c:	2320      	movs	r3, #32
 800db9e:	f383 8811 	msr	BASEPRI, r3
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");
  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
 800dba2:	f100 0610 	add.w	r6, r0, #16
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 800dba6:	7823      	ldrb	r3, [r4, #0]
 800dba8:	2b04      	cmp	r3, #4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4620      	mov	r0, r4
 800dbae:	d002      	beq.n	800dbb6 <canReceive+0x26>
 800dbb0:	f001 fa76 	bl	800f0a0 <can_lld_is_rx_nonempty>
 800dbb4:	b950      	cbnz	r0, 800dbcc <canReceive+0x3c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f7ff fbf1 	bl	800d3a0 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d0f1      	beq.n	800dba6 <canReceive+0x16>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_receive(canp, mailbox, crfp);
  osalSysUnlock();
  return MSG_OK;
}
 800dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  can_lld_receive(canp, mailbox, crfp);
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4642      	mov	r2, r8
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f001 fa85 	bl	800f0e0 <can_lld_receive>
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	f380 8811 	msr	BASEPRI, r0
}
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbe0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800dbe0:	f001 bd56 	b.w	800f690 <i2c_lld_init>
	...

0800dbf0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800dbf0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800dbf2:	2300      	movs	r3, #0
  i2cp->state  = I2C_STOP;
 800dbf4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800dbf6:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800dbf8:	300c      	adds	r0, #12
 800dbfa:	f7ff bc51 	b.w	800d4a0 <chMtxObjectInit>
 800dbfe:	bf00      	nop

0800dc00 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 800dc00:	b510      	push	{r4, lr}
 800dc02:	2320      	movs	r3, #32
 800dc04:	4604      	mov	r4, r0
 800dc06:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800dc0a:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 800dc0c:	f001 fd58 	bl	800f6c0 <i2c_lld_start>
  i2cp->state = I2C_READY;
 800dc10:	2302      	movs	r3, #2
 800dc12:	7023      	strb	r3, [r4, #0]
 800dc14:	2300      	movs	r3, #0
 800dc16:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800dc1a:	bd10      	pop	{r4, pc}
 800dc1c:	0000      	movs	r0, r0
	...

0800dc20 <i2cStop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cStop(I2CDriver *i2cp) {
 800dc20:	b510      	push	{r4, lr}
 800dc22:	2320      	movs	r3, #32
 800dc24:	4604      	mov	r4, r0
 800dc26:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(i2cp != NULL);
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2c_lld_stop(i2cp);
 800dc2a:	f001 fe01 	bl	800f830 <i2c_lld_stop>
  i2cp->state = I2C_STOP;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	7023      	strb	r3, [r4, #0]
 800dc32:	2300      	movs	r3, #0
 800dc34:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800dc38:	bd10      	pop	{r4, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0000      	movs	r0, r0
	...

0800dc40 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
 800dc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc42:	b085      	sub	sp, #20
 800dc44:	4604      	mov	r4, r0
 800dc46:	e9dd 670b 	ldrd	r6, r7, [sp, #44]	; 0x2c
 800dc4a:	f04f 0c20 	mov.w	ip, #32
 800dc4e:	f38c 8811 	msr	BASEPRI, ip

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 800dc52:	f04f 0c03 	mov.w	ip, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800dc56:	e9cd 6701 	strd	r6, r7, [sp, #4]
  i2cp->errors = I2C_NO_ERROR;
 800dc5a:	2500      	movs	r5, #0
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800dc5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dc5e:	9600      	str	r6, [sp, #0]
  i2cp->errors = I2C_NO_ERROR;
 800dc60:	6085      	str	r5, [r0, #8]
  i2cp->state = I2C_ACTIVE_TX;
 800dc62:	f880 c000 	strb.w	ip, [r0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800dc66:	f001 fe6b 	bl	800f940 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800dc6a:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 800dc6c:	bf0c      	ite	eq
 800dc6e:	2305      	moveq	r3, #5
  }
  else {
    i2cp->state = I2C_READY;
 800dc70:	2302      	movne	r3, #2
 800dc72:	7023      	strb	r3, [r4, #0]
 800dc74:	2300      	movs	r3, #0
 800dc76:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800dc7a:	b005      	add	sp, #20
 800dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7e:	bf00      	nop

0800dc80 <i2cMasterReceiveTimeout>:
 */
msg_t i2cMasterReceiveTimeout(I2CDriver *i2cp,
                              i2caddr_t addr,
                              uint8_t *rxbuf,
                              size_t rxbytes,
                              systime_t timeout){
 800dc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc82:	b083      	sub	sp, #12
 800dc84:	4604      	mov	r4, r0
 800dc86:	9f08      	ldr	r7, [sp, #32]
 800dc88:	2520      	movs	r5, #32
 800dc8a:	f385 8811 	msr	BASEPRI, r5
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800dc8e:	2600      	movs	r6, #0
  i2cp->state = I2C_ACTIVE_RX;
 800dc90:	2504      	movs	r5, #4
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 800dc92:	9700      	str	r7, [sp, #0]
  i2cp->errors = I2C_NO_ERROR;
 800dc94:	6086      	str	r6, [r0, #8]
  i2cp->state = I2C_ACTIVE_RX;
 800dc96:	7005      	strb	r5, [r0, #0]
  rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 800dc98:	f001 fe12 	bl	800f8c0 <i2c_lld_master_receive_timeout>
  if (rdymsg == MSG_TIMEOUT) {
 800dc9c:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 800dc9e:	bf0c      	ite	eq
 800dca0:	2305      	moveq	r3, #5
  }
  else {
    i2cp->state = I2C_READY;
 800dca2:	2302      	movne	r3, #2
 800dca4:	7023      	strb	r3, [r4, #0]
 800dca6:	2300      	movs	r3, #0
 800dca8:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800dcac:	b003      	add	sp, #12
 800dcae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dcb0 <i2cAcquireBus>:
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 800dcb0:	300c      	adds	r0, #12
 800dcb2:	f7ff bc6d 	b.w	800d590 <chMtxLock>
 800dcb6:	bf00      	nop
	...

0800dcc0 <i2cReleaseBus>:
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 800dcc0:	300c      	adds	r0, #12
 800dcc2:	f7ff bc75 	b.w	800d5b0 <chMtxUnlock>
 800dcc6:	bf00      	nop
	...

0800dcd0 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800dcd0:	f002 bcce 	b.w	8010670 <icu_lld_init>
	...

0800dce0 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800dce0:	2201      	movs	r2, #1
  icup->config = NULL;
 800dce2:	2300      	movs	r3, #0
  icup->state  = ICU_STOP;
 800dce4:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800dce6:	6043      	str	r3, [r0, #4]
}
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	0000      	movs	r0, r0
	...

0800dcf0 <icuStart>:
 * @param[in] icup      pointer to the @p ICUDriver object
 * @param[in] config    pointer to the @p ICUConfig object
 *
 * @api
 */
void icuStart(ICUDriver *icup, const ICUConfig *config) {
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	2320      	movs	r3, #32
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 800dcfa:	6041      	str	r1, [r0, #4]
  icu_lld_start(icup);
 800dcfc:	f002 fcc8 	bl	8010690 <icu_lld_start>
  icup->state = ICU_READY;
 800dd00:	2302      	movs	r3, #2
 800dd02:	7023      	strb	r3, [r4, #0]
 800dd04:	2300      	movs	r3, #0
 800dd06:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800dd0a:	bd10      	pop	{r4, pc}
 800dd0c:	0000      	movs	r0, r0
	...

0800dd10 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 800dd10:	b510      	push	{r4, lr}
 800dd12:	2320      	movs	r3, #32
 800dd14:	4604      	mov	r4, r0
 800dd16:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 800dd1a:	f002 fd19 	bl	8010750 <icu_lld_start_capture>
 800dd1e:	2303      	movs	r3, #3
 800dd20:	7023      	strb	r3, [r4, #0]
 800dd22:	2300      	movs	r3, #0
 800dd24:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	bf00      	nop
 800dd2c:	0000      	movs	r0, r0
	...

0800dd30 <icuEnableNotifications>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuEnableNotifications(ICUDriver *icup) {
 800dd30:	b508      	push	{r3, lr}
 800dd32:	2320      	movs	r3, #32
 800dd34:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800dd38:	f002 fd1a 	bl	8010770 <icu_lld_enable_notifications>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800dd42:	bd08      	pop	{r3, pc}
	...

0800dd50 <onotify>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 800dd50:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 800dd52:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800dd54:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800dd58:	6813      	ldr	r3, [r2, #0]
 800dd5a:	7819      	ldrb	r1, [r3, #0]
 800dd5c:	2904      	cmp	r1, #4
 800dd5e:	d000      	beq.n	800dd62 <onotify+0x12>

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
    }
  }
}
 800dd60:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800dd62:	7a21      	ldrb	r1, [r4, #8]
 800dd64:	2902      	cmp	r1, #2
 800dd66:	d1fb      	bne.n	800dd60 <onotify+0x10>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800dd68:	7911      	ldrb	r1, [r2, #4]
 800dd6a:	891a      	ldrh	r2, [r3, #8]
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	408b      	lsls	r3, r1
 800dd70:	401a      	ands	r2, r3
 800dd72:	d1f5      	bne.n	800dd60 <onotify+0x10>
  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800dd74:	e9d4 030f 	ldrd	r0, r3, [r4, #60]	; 0x3c
 800dd78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd7a:	1a1b      	subs	r3, r3, r0
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800dd7c:	1a5b      	subs	r3, r3, r1
 800dd7e:	d0ef      	beq.n	800dd60 <onotify+0x10>
 800dd80:	f382 8811 	msr	BASEPRI, r2
      usbPrepareQueuedTransmit(sdup->config->usbp,
 800dd84:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800dd88:	7911      	ldrb	r1, [r2, #4]
 800dd8a:	6810      	ldr	r0, [r2, #0]
 800dd8c:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800dd90:	f000 fa26 	bl	800e1e0 <usbPrepareQueuedTransmit>
 800dd94:	2320      	movs	r3, #32
 800dd96:	f383 8811 	msr	BASEPRI, r3
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800dd9a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
}
 800dd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800dda2:	7919      	ldrb	r1, [r3, #4]
 800dda4:	6818      	ldr	r0, [r3, #0]
 800dda6:	f000 ba43 	b.w	800e230 <usbStartTransmitI>
 800ddaa:	bf00      	nop
 800ddac:	0000      	movs	r0, r0
	...

0800ddb0 <inotify>:
static void inotify(io_queue_t *qp) {
 800ddb0:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = qGetLink(qp);
 800ddb2:	6a04      	ldr	r4, [r0, #32]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800ddb4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800ddb8:	6813      	ldr	r3, [r2, #0]
 800ddba:	7819      	ldrb	r1, [r3, #0]
 800ddbc:	2904      	cmp	r1, #4
 800ddbe:	d000      	beq.n	800ddc2 <inotify+0x12>
}
 800ddc0:	bd38      	pop	{r3, r4, r5, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800ddc2:	7a21      	ldrb	r1, [r4, #8]
 800ddc4:	2902      	cmp	r1, #2
 800ddc6:	d1fb      	bne.n	800ddc0 <inotify+0x10>
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800ddc8:	7950      	ldrb	r0, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 800ddca:	8959      	ldrh	r1, [r3, #10]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	4082      	lsls	r2, r0
 800ddd0:	400a      	ands	r2, r1
 800ddd2:	d1f5      	bne.n	800ddc0 <inotify+0x10>
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800ddd4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800ddd8:	69a1      	ldr	r1, [r4, #24]
 800ddda:	69e0      	ldr	r0, [r4, #28]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	6965      	ldr	r5, [r4, #20]
 800dde0:	8a5b      	ldrh	r3, [r3, #18]
 800dde2:	1a41      	subs	r1, r0, r1
 800dde4:	1b49      	subs	r1, r1, r5
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800dde6:	428b      	cmp	r3, r1
 800dde8:	d8ea      	bhi.n	800ddc0 <inotify+0x10>
 800ddea:	f382 8811 	msr	BASEPRI, r2
      n = (n / maxsize) * maxsize;
 800ddee:	fbb1 f1f3 	udiv	r1, r1, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 800ddf2:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 800ddf6:	fb03 f301 	mul.w	r3, r3, r1
 800ddfa:	6810      	ldr	r0, [r2, #0]
 800ddfc:	7951      	ldrb	r1, [r2, #5]
 800ddfe:	f104 020c 	add.w	r2, r4, #12
 800de02:	f000 f9dd 	bl	800e1c0 <usbPrepareQueuedReceive>
 800de06:	2320      	movs	r3, #32
 800de08:	f383 8811 	msr	BASEPRI, r3
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800de0c:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800de10:	7959      	ldrb	r1, [r3, #5]
 800de12:	6818      	ldr	r0, [r3, #0]
}
 800de14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800de18:	f000 b9f2 	b.w	800e200 <usbStartReceiveI>
 800de1c:	0000      	movs	r0, r0
	...

0800de20 <readt>:
  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 800de20:	300c      	adds	r0, #12
 800de22:	f7ff bcfd 	b.w	800d820 <chIQReadTimeout>
 800de26:	bf00      	nop
	...

0800de30 <read>:
  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 800de30:	300c      	adds	r0, #12
 800de32:	f04f 33ff 	mov.w	r3, #4294967295
 800de36:	f7ff bcf3 	b.w	800d820 <chIQReadTimeout>
 800de3a:	bf00      	nop
 800de3c:	0000      	movs	r0, r0
	...

0800de40 <writet>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 800de40:	3030      	adds	r0, #48	; 0x30
 800de42:	f7ff bd75 	b.w	800d930 <chOQWriteTimeout>
 800de46:	bf00      	nop
	...

0800de50 <write>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 800de50:	3030      	adds	r0, #48	; 0x30
 800de52:	f04f 33ff 	mov.w	r3, #4294967295
 800de56:	f7ff bd6b 	b.w	800d930 <chOQWriteTimeout>
 800de5a:	bf00      	nop
 800de5c:	0000      	movs	r0, r0
	...

0800de60 <gett>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 800de60:	300c      	adds	r0, #12
 800de62:	f7ff bcb5 	b.w	800d7d0 <chIQGetTimeout>
 800de66:	bf00      	nop
	...

0800de70 <get>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 800de70:	300c      	adds	r0, #12
 800de72:	f04f 31ff 	mov.w	r1, #4294967295
 800de76:	f7ff bcab 	b.w	800d7d0 <chIQGetTimeout>
 800de7a:	bf00      	nop
 800de7c:	0000      	movs	r0, r0
	...

0800de80 <putt>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 800de80:	3030      	adds	r0, #48	; 0x30
 800de82:	f7ff bd2d 	b.w	800d8e0 <chOQPutTimeout>
 800de86:	bf00      	nop
	...

0800de90 <put>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 800de90:	3030      	adds	r0, #48	; 0x30
 800de92:	f04f 32ff 	mov.w	r2, #4294967295
 800de96:	f7ff bd23 	b.w	800d8e0 <chOQPutTimeout>
 800de9a:	bf00      	nop
 800de9c:	0000      	movs	r0, r0
	...

0800dea0 <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
	...

0800deb0 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 800deb0:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 800deb2:	4603      	mov	r3, r0
 800deb4:	4a0e      	ldr	r2, [pc, #56]	; (800def0 <sduObjectInit+0x40>)
 800deb6:	f843 2b04 	str.w	r2, [r3], #4
void sduObjectInit(SerialUSBDriver *sdup) {
 800deba:	b082      	sub	sp, #8
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800debc:	2201      	movs	r2, #1
void sduObjectInit(SerialUSBDriver *sdup) {
 800debe:	4604      	mov	r4, r0
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800dec0:	9000      	str	r0, [sp, #0]
 800dec2:	f100 0154 	add.w	r1, r0, #84	; 0x54
 800dec6:	6043      	str	r3, [r0, #4]
  sdup->state = SDU_STOP;
 800dec8:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdup->iqueue, sdup->ib, SERIAL_USB_BUFFERS_SIZE, inotify, sdup);
 800deca:	4b0a      	ldr	r3, [pc, #40]	; (800def4 <sduObjectInit+0x44>)
 800decc:	300c      	adds	r0, #12
 800dece:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ded2:	f7ff fc5d 	bl	800d790 <chIQObjectInit>
  oqObjectInit(&sdup->oqueue, sdup->ob, SERIAL_USB_BUFFERS_SIZE, onotify, sdup);
 800ded6:	9400      	str	r4, [sp, #0]
 800ded8:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800dedc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800dee0:	4b05      	ldr	r3, [pc, #20]	; (800def8 <sduObjectInit+0x48>)
 800dee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dee6:	f7ff fcdb 	bl	800d8a0 <chOQObjectInit>
}
 800deea:	b002      	add	sp, #8
 800deec:	bd10      	pop	{r4, pc}
 800deee:	bf00      	nop
 800def0:	08017a60 	.word	0x08017a60
 800def4:	0800ddb1 	.word	0x0800ddb1
 800def8:	0800dd51 	.word	0x0800dd51
 800defc:	00000000 	.word	0x00000000

0800df00 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 800df00:	680b      	ldr	r3, [r1, #0]
 800df02:	2220      	movs	r2, #32
 800df04:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800df08:	790a      	ldrb	r2, [r1, #4]
 800df0a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800df0e:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800df10:	794a      	ldrb	r2, [r1, #5]
 800df12:	3209      	adds	r2, #9
 800df14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 800df18:	798a      	ldrb	r2, [r1, #6]
 800df1a:	b112      	cbz	r2, 800df22 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800df1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800df20:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 800df22:	2302      	movs	r3, #2
 800df24:	7203      	strb	r3, [r0, #8]
  sdup->config = config;
 800df26:	f8c0 1254 	str.w	r1, [r0, #596]	; 0x254
 800df2a:	2300      	movs	r3, #0
 800df2c:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
	...

0800df40 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800df40:	b570      	push	{r4, r5, r6, lr}
  USBDriver *usbp = sdup->config->usbp;
 800df42:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254

  iqResetI(&sdup->iqueue);
 800df46:	f100 060c 	add.w	r6, r0, #12
void sduConfigureHookI(SerialUSBDriver *sdup) {
 800df4a:	4604      	mov	r4, r0
  iqResetI(&sdup->iqueue);
 800df4c:	4630      	mov	r0, r6
  USBDriver *usbp = sdup->config->usbp;
 800df4e:	681d      	ldr	r5, [r3, #0]
  iqResetI(&sdup->iqueue);
 800df50:	f7ff fc2e 	bl	800d7b0 <chIQResetI>
  oqResetI(&sdup->oqueue);
 800df54:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800df58:	f7ff fcb2 	bl	800d8c0 <chOQResetI>
  chEvtBroadcastFlagsI(esp, flags);
 800df5c:	1d20      	adds	r0, r4, #4
 800df5e:	2101      	movs	r1, #1
 800df60:	f7ff fba6 	bl	800d6b0 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800df64:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800df68:	7959      	ldrb	r1, [r3, #5]
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800df6a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800df6e:	4628      	mov	r0, r5
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 800df70:	68db      	ldr	r3, [r3, #12]
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 800df72:	4632      	mov	r2, r6
 800df74:	8a5b      	ldrh	r3, [r3, #18]
 800df76:	f000 f923 	bl	800e1c0 <usbPrepareQueuedReceive>
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800df7a:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800df7e:	4628      	mov	r0, r5
 800df80:	7959      	ldrb	r1, [r3, #5]
}
 800df82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 800df86:	f000 b93b 	b.w	800e200 <usbStartReceiveI>
 800df8a:	bf00      	nop
 800df8c:	0000      	movs	r0, r0
	...

0800df90 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800df90:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800df94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df98:	2b20      	cmp	r3, #32
 800df9a:	d001      	beq.n	800dfa0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800df9c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800df9e:	4770      	bx	lr
    switch (usbp->setup[1]) {
 800dfa0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800dfa4:	2b20      	cmp	r3, #32
 800dfa6:	d3f9      	bcc.n	800df9c <sduRequestsHook+0xc>
 800dfa8:	2b21      	cmp	r3, #33	; 0x21
 800dfaa:	d807      	bhi.n	800dfbc <sduRequestsHook+0x2c>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800dfac:	4b07      	ldr	r3, [pc, #28]	; (800dfcc <sduRequestsHook+0x3c>)
 800dfae:	6383      	str	r3, [r0, #56]	; 0x38
 800dfb0:	2207      	movs	r2, #7
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
      return true;
 800dfb8:	2001      	movs	r0, #1
 800dfba:	4770      	bx	lr
    switch (usbp->setup[1]) {
 800dfbc:	2b22      	cmp	r3, #34	; 0x22
 800dfbe:	d1ed      	bne.n	800df9c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 800dfc6:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800dfc8:	2001      	movs	r0, #1
 800dfca:	4770      	bx	lr
 800dfcc:	20000800 	.word	0x20000800

0800dfd0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800dfd2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800dfd6:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800dfd8:	b34c      	cbz	r4, 800e02e <sduDataTransmitted+0x5e>
 800dfda:	460e      	mov	r6, r1
 800dfdc:	4605      	mov	r5, r0
 800dfde:	2720      	movs	r7, #32
 800dfe0:	f387 8811 	msr	BASEPRI, r7
 800dfe4:	2108      	movs	r1, #8
 800dfe6:	1d20      	adds	r0, r4, #4
 800dfe8:	f7ff fb62 	bl	800d6b0 <chEvtBroadcastFlagsI>
  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800dfec:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 800dff0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dff2:	1a5b      	subs	r3, r3, r1

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 800dff4:	1a9b      	subs	r3, r3, r2
 800dff6:	d11b      	bne.n	800e030 <sduDataTransmitted+0x60>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800dff8:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	695a      	ldr	r2, [r3, #20]
 800e000:	6852      	ldr	r2, [r2, #4]
 800e002:	b18a      	cbz	r2, 800e028 <sduDataTransmitted+0x58>
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800e004:	8a1b      	ldrh	r3, [r3, #16]
 800e006:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800e008:	4013      	ands	r3, r2
 800e00a:	d10d      	bne.n	800e028 <sduDataTransmitted+0x58>
 800e00c:	f383 8811 	msr	BASEPRI, r3
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800e010:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800e014:	4631      	mov	r1, r6
 800e016:	4628      	mov	r0, r5
 800e018:	f000 f8e2 	bl	800e1e0 <usbPrepareQueuedTransmit>
 800e01c:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 800e020:	4631      	mov	r1, r6
 800e022:	4628      	mov	r0, r5
 800e024:	f000 f904 	bl	800e230 <usbStartTransmitI>
 800e028:	2300      	movs	r3, #0
 800e02a:	f383 8811 	msr	BASEPRI, r3
  }
  /*lint -restore*/

  osalSysUnlockFromISR();
}
 800e02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e030:	2200      	movs	r2, #0
 800e032:	f382 8811 	msr	BASEPRI, r2
 800e036:	e7eb      	b.n	800e010 <sduDataTransmitted+0x40>
	...

0800e040 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800e040:	f101 0309 	add.w	r3, r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800e048:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800e04c:	b1bc      	cbz	r4, 800e07e <sduDataReceived+0x3e>
 800e04e:	4607      	mov	r7, r0
 800e050:	460e      	mov	r6, r1
 800e052:	f04f 0820 	mov.w	r8, #32
 800e056:	f388 8811 	msr	BASEPRI, r8
 800e05a:	2104      	movs	r1, #4
 800e05c:	1860      	adds	r0, r4, r1
 800e05e:	f7ff fb27 	bl	800d6b0 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 800e062:	eb07 0386 	add.w	r3, r7, r6, lsl #2
  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 800e066:	69e5      	ldr	r5, [r4, #28]
 800e068:	68d9      	ldr	r1, [r3, #12]
 800e06a:	69a2      	ldr	r2, [r4, #24]
 800e06c:	6963      	ldr	r3, [r4, #20]
 800e06e:	8a49      	ldrh	r1, [r1, #18]
 800e070:	1aaa      	subs	r2, r5, r2
 800e072:	1ad2      	subs	r2, r2, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 800e074:	4291      	cmp	r1, r2
 800e076:	d904      	bls.n	800e082 <sduDataReceived+0x42>
 800e078:	2300      	movs	r3, #0
 800e07a:	f383 8811 	msr	BASEPRI, r3

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
  }
  osalSysUnlockFromISR();
}
 800e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e082:	2300      	movs	r3, #0
 800e084:	f383 8811 	msr	BASEPRI, r3
    n = (n / maxsize) * maxsize;
 800e088:	fbb2 f3f1 	udiv	r3, r2, r1
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 800e08c:	4638      	mov	r0, r7
 800e08e:	fb01 f303 	mul.w	r3, r1, r3
 800e092:	f104 020c 	add.w	r2, r4, #12
 800e096:	4631      	mov	r1, r6
 800e098:	f000 f892 	bl	800e1c0 <usbPrepareQueuedReceive>
 800e09c:	f388 8811 	msr	BASEPRI, r8
    (void) usbStartReceiveI(usbp, ep);
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f000 f8ac 	bl	800e200 <usbStartReceiveI>
 800e0a8:	e7e6      	b.n	800e078 <sduDataReceived+0x38>
 800e0aa:	bf00      	nop
 800e0ac:	0000      	movs	r0, r0
	...

0800e0b0 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
	...

0800e0c0 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 800e0c0:	f002 ba5e 	b.w	8010580 <spi_lld_init>
	...

0800e0d0 <spiObjectInit>:
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800e0d0:	2201      	movs	r2, #1
  spip->config = NULL;
 800e0d2:	2300      	movs	r3, #0
  spip->state = SPI_STOP;
 800e0d4:	7002      	strb	r2, [r0, #0]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800e0d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  chMtxObjectInit(mp);
 800e0da:	300c      	adds	r0, #12
 800e0dc:	f7ff b9e0 	b.w	800d4a0 <chMtxObjectInit>

0800e0e0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800e0e0:	f002 bb76 	b.w	80107d0 <st_lld_init>
	...

0800e0f0 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 800e0f0:	f002 bc76 	b.w	80109e0 <uart_lld_init>
	...

0800e100 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 800e100:	2300      	movs	r3, #0
  uartp->state   = UART_STOP;
 800e102:	2201      	movs	r2, #1
 800e104:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 800e106:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 800e108:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800e10a:	6043      	str	r3, [r0, #4]
  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop

0800e110 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 800e110:	b510      	push	{r4, lr}
 800e112:	2320      	movs	r3, #32
 800e114:	4604      	mov	r4, r0
 800e116:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 800e11a:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 800e11c:	f002 fc88 	bl	8010a30 <uart_lld_start>
  uartp->state = UART_READY;
 800e120:	2302      	movs	r3, #2
 800e122:	7023      	strb	r3, [r4, #0]
 800e124:	2300      	movs	r3, #0
 800e126:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800e12a:	bd10      	pop	{r4, pc}
 800e12c:	0000      	movs	r0, r0
	...

0800e130 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800e130:	f001 be56 	b.w	800fde0 <usb_lld_init>
	...

0800e140 <usbObjectInit>:
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800e140:	2300      	movs	r3, #0
  usbp->state        = USB_STOP;
 800e142:	2201      	movs	r2, #1
 800e144:	7002      	strb	r2, [r0, #0]
    usbp->in_params[i]  = NULL;
 800e146:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800e148:	6283      	str	r3, [r0, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 800e14a:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800e14c:	62c3      	str	r3, [r0, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 800e14e:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800e150:	6303      	str	r3, [r0, #48]	; 0x30
  usbp->config       = NULL;
 800e152:	e9c0 3301 	strd	r3, r3, [r0, #4]
  }
  usbp->transmitting = 0;
  usbp->receiving    = 0;
}
 800e156:	4770      	bx	lr
	...

0800e160 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4604      	mov	r4, r0
 800e164:	2320      	movs	r3, #32
 800e166:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800e16a:	2500      	movs	r5, #0
  usbp->config = config;
 800e16c:	6041      	str	r1, [r0, #4]
    usbp->epc[i] = NULL;
 800e16e:	e9c0 5503 	strd	r5, r5, [r0, #12]
 800e172:	e9c0 5505 	strd	r5, r5, [r0, #20]
  }
  usb_lld_start(usbp);
 800e176:	f001 fe4b 	bl	800fe10 <usb_lld_start>
  usbp->state = USB_READY;
 800e17a:	2302      	movs	r3, #2
 800e17c:	7023      	strb	r3, [r4, #0]
 800e17e:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 800e182:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e190 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800e190:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
 800e192:	b410      	push	{r4}
  if (epcp->in_state != NULL) {
 800e194:	b12b      	cbz	r3, 800e1a2 <usbInitEndpointI+0x12>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800e196:	2400      	movs	r4, #0
 800e198:	601c      	str	r4, [r3, #0]
 800e19a:	605c      	str	r4, [r3, #4]
 800e19c:	609c      	str	r4, [r3, #8]
 800e19e:	60dc      	str	r4, [r3, #12]
 800e1a0:	611c      	str	r4, [r3, #16]
  }
  if (epcp->out_state != NULL) {
 800e1a2:	6993      	ldr	r3, [r2, #24]
 800e1a4:	b12b      	cbz	r3, 800e1b2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800e1a6:	2400      	movs	r4, #0
 800e1a8:	601c      	str	r4, [r3, #0]
 800e1aa:	605c      	str	r4, [r3, #4]
 800e1ac:	609c      	str	r4, [r3, #8]
 800e1ae:	60dc      	str	r4, [r3, #12]
 800e1b0:	611c      	str	r4, [r3, #16]
  }

  usbp->epc[ep] = epcp;
 800e1b2:	eb00 0381 	add.w	r3, r0, r1, lsl #2

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 800e1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  usbp->epc[ep] = epcp;
 800e1ba:	60da      	str	r2, [r3, #12]
  usb_lld_init_endpoint(usbp, ep);
 800e1bc:	f001 bf10 	b.w	800ffe0 <usb_lld_init_endpoint>

0800e1c0 <usbPrepareQueuedReceive>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
 800e1c0:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e1c2:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  osp->rxqueued           = true;
 800e1c6:	2501      	movs	r5, #1
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e1c8:	68e4      	ldr	r4, [r4, #12]
 800e1ca:	69a4      	ldr	r4, [r4, #24]
  osp->mode.queue.rxqueue = iqp;
 800e1cc:	60e2      	str	r2, [r4, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800e1ce:	2200      	movs	r2, #0
  osp->rxsize             = n;
 800e1d0:	6063      	str	r3, [r4, #4]
  osp->rxqueued           = true;
 800e1d2:	7025      	strb	r5, [r4, #0]
  osp->rxcnt              = 0;
 800e1d4:	60a2      	str	r2, [r4, #8]

  usb_lld_prepare_receive(usbp, ep);
}
 800e1d6:	bc30      	pop	{r4, r5}
  usb_lld_prepare_receive(usbp, ep);
 800e1d8:	f001 bfea 	b.w	80101b0 <usb_lld_prepare_receive>
 800e1dc:	0000      	movs	r0, r0
	...

0800e1e0 <usbPrepareQueuedTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
 800e1e0:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e1e2:	eb00 0481 	add.w	r4, r0, r1, lsl #2

  isp->txqueued           = true;
 800e1e6:	2501      	movs	r5, #1
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e1e8:	68e4      	ldr	r4, [r4, #12]
 800e1ea:	6964      	ldr	r4, [r4, #20]
  isp->mode.queue.txqueue = oqp;
 800e1ec:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;
 800e1ee:	2200      	movs	r2, #0
  isp->txsize             = n;
 800e1f0:	6063      	str	r3, [r4, #4]
  isp->txqueued           = true;
 800e1f2:	7025      	strb	r5, [r4, #0]
  isp->txcnt              = 0;
 800e1f4:	60a2      	str	r2, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 800e1f6:	bc30      	pop	{r4, r5}
  usb_lld_prepare_transmit(usbp, ep);
 800e1f8:	f002 b84a 	b.w	8010290 <usb_lld_prepare_transmit>
 800e1fc:	0000      	movs	r0, r0
	...

0800e200 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800e200:	2201      	movs	r2, #1
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 800e202:	b570      	push	{r4, r5, r6, lr}
  if (usbGetReceiveStatusI(usbp, ep)) {
 800e204:	fa02 f301 	lsl.w	r3, r2, r1
 800e208:	8944      	ldrh	r4, [r0, #10]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	ea14 0603 	ands.w	r6, r4, r3
 800e210:	d001      	beq.n	800e216 <usbStartReceiveI+0x16>
    return true;
 800e212:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 800e214:	bd70      	pop	{r4, r5, r6, pc}
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e216:	4323      	orrs	r3, r4
 800e218:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
 800e21a:	f002 f949 	bl	80104b0 <usb_lld_start_out>
  return false;
 800e21e:	4630      	mov	r0, r6
}
 800e220:	bd70      	pop	{r4, r5, r6, pc}
 800e222:	bf00      	nop
	...

0800e230 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800e230:	2201      	movs	r2, #1
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 800e232:	b570      	push	{r4, r5, r6, lr}
  if (usbGetTransmitStatusI(usbp, ep)) {
 800e234:	fa02 f301 	lsl.w	r3, r2, r1
 800e238:	8904      	ldrh	r4, [r0, #8]
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	ea14 0603 	ands.w	r6, r4, r3
 800e240:	d001      	beq.n	800e246 <usbStartTransmitI+0x16>
    return true;
 800e242:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 800e244:	bd70      	pop	{r4, r5, r6, pc}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e246:	4323      	orrs	r3, r4
 800e248:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
 800e24a:	f002 f941 	bl	80104d0 <usb_lld_start_in>
  return false;
 800e24e:	4630      	mov	r0, r6
}
 800e250:	bd70      	pop	{r4, r5, r6, pc}
 800e252:	bf00      	nop
	...

0800e260 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800e260:	2200      	movs	r2, #0
  usbp->state         = USB_READY;
 800e262:	2102      	movs	r1, #2
 800e264:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800e266:	64c2      	str	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;
 800e268:	e9c0 2202 	strd	r2, r2, [r0, #8]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800e26c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800e270:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e272:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800e276:	f001 be43 	b.w	800ff00 <usb_lld_reset>
 800e27a:	bf00      	nop
 800e27c:	0000      	movs	r0, r0
	...

0800e280 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800e280:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e282:	2300      	movs	r3, #0
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800e284:	4604      	mov	r4, r0
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e286:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800e28a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800e28e:	f001 ff7f 	bl	8010190 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800e292:	6863      	ldr	r3, [r4, #4]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d033      	beq.n	800e302 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 800e29a:	4620      	mov	r0, r4
 800e29c:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800e29e:	b380      	cbz	r0, 800e302 <_usb_ep0setup+0x82>
 800e2a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e2a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 800e2a6:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 800e2aa:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800e2ae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800e2b2:	428a      	cmp	r2, r1
 800e2b4:	bf2c      	ite	cs
 800e2b6:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 800e2b8:	63e2      	strcc	r2, [r4, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800e2ba:	0618      	lsls	r0, r3, #24
 800e2bc:	68e1      	ldr	r1, [r4, #12]
 800e2be:	f100 8099 	bmi.w	800e3f4 <_usb_ep0setup+0x174>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	d07b      	beq.n	800e3be <_usb_ep0setup+0x13e>
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e2c6:	698b      	ldr	r3, [r1, #24]
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800e2c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  osp->rxqueued           = false;
 800e2ca:	2100      	movs	r1, #0
      usbp->ep0state = USB_EP0_RX;
 800e2cc:	2504      	movs	r5, #4
 800e2ce:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  osp->mode.linear.rxbuf  = buf;
 800e2d2:	60d8      	str	r0, [r3, #12]
  osp->rxsize             = n;
 800e2d4:	605a      	str	r2, [r3, #4]
  osp->rxqueued           = false;
 800e2d6:	7019      	strb	r1, [r3, #0]
  osp->rxcnt              = 0;
 800e2d8:	6099      	str	r1, [r3, #8]
  usb_lld_prepare_receive(usbp, ep);
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f001 ff68 	bl	80101b0 <usb_lld_prepare_receive>
 800e2e0:	2320      	movs	r3, #32
 800e2e2:	f383 8811 	msr	BASEPRI, r3
  if (usbGetReceiveStatusI(usbp, ep)) {
 800e2e6:	8963      	ldrh	r3, [r4, #10]
 800e2e8:	f013 0101 	ands.w	r1, r3, #1
 800e2ec:	d105      	bne.n	800e2fa <_usb_ep0setup+0x7a>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e2ee:	f043 0301 	orr.w	r3, r3, #1
 800e2f2:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f002 f8db 	bl	80104b0 <usb_lld_start_out>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f383 8811 	msr	BASEPRI, r3
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 800e300:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800e302:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e306:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800e30a:	4618      	mov	r0, r3
 800e30c:	d011      	beq.n	800e332 <_usb_ep0setup+0xb2>
      usb_lld_stall_in(usbp, 0);
 800e30e:	2100      	movs	r1, #0
 800e310:	4620      	mov	r0, r4
 800e312:	f002 f905 	bl	8010520 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800e316:	2100      	movs	r1, #0
 800e318:	4620      	mov	r0, r4
 800e31a:	f002 f8f1 	bl	8010500 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e31e:	6863      	ldr	r3, [r4, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	b113      	cbz	r3, 800e32a <_usb_ep0setup+0xaa>
 800e324:	2105      	movs	r1, #5
 800e326:	4620      	mov	r0, r4
 800e328:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800e32a:	2306      	movs	r3, #6
 800e32c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800e330:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 800e332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 800e33a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e33e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e342:	f000 8114 	beq.w	800e56e <_usb_ep0setup+0x2ee>
 800e346:	d917      	bls.n	800e378 <_usb_ep0setup+0xf8>
 800e348:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800e34c:	f000 80f6 	beq.w	800e53c <_usb_ep0setup+0x2bc>
 800e350:	f240 8099 	bls.w	800e486 <_usb_ep0setup+0x206>
 800e354:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 800e358:	d073      	beq.n	800e442 <_usb_ep0setup+0x1c2>
 800e35a:	f640 4102 	movw	r1, #3074	; 0xc02
 800e35e:	428a      	cmp	r2, r1
 800e360:	f000 80d2 	beq.w	800e508 <_usb_ep0setup+0x288>
 800e364:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e368:	d1d1      	bne.n	800e30e <_usb_ep0setup+0x8e>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800e36a:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800e36e:	2101      	movs	r1, #1
 800e370:	6425      	str	r5, [r4, #64]	; 0x40
 800e372:	e9c4 210e 	strd	r2, r1, [r4, #56]	; 0x38
 800e376:	e796      	b.n	800e2a6 <_usb_ep0setup+0x26>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e378:	2a02      	cmp	r2, #2
 800e37a:	f000 80ab 	beq.w	800e4d4 <_usb_ep0setup+0x254>
 800e37e:	f240 80a1 	bls.w	800e4c4 <_usb_ep0setup+0x244>
 800e382:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e386:	d06f      	beq.n	800e468 <_usb_ep0setup+0x1e8>
 800e388:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800e38c:	d1bf      	bne.n	800e30e <_usb_ep0setup+0x8e>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800e38e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1bb      	bne.n	800e30e <_usb_ep0setup+0x8e>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800e396:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e39a:	f013 010f 	ands.w	r1, r3, #15
 800e39e:	d007      	beq.n	800e3b0 <_usb_ep0setup+0x130>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e3a0:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800e3a2:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e3a4:	f100 80fb 	bmi.w	800e59e <_usb_ep0setup+0x31e>
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800e3a8:	f002 f8ca 	bl	8010540 <usb_lld_clear_out>
 800e3ac:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800e3b6:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800e3b8:	0603      	lsls	r3, r0, #24
 800e3ba:	68e1      	ldr	r1, [r4, #12]
 800e3bc:	d436      	bmi.n	800e42c <_usb_ep0setup+0x1ac>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e3be:	694a      	ldr	r2, [r1, #20]
  isp->txqueued           = false;
 800e3c0:	2300      	movs	r3, #0
      usbp->ep0state = USB_EP0_SENDING_STS;
 800e3c2:	2105      	movs	r1, #5
 800e3c4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_transmit(usbp, ep);
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	4619      	mov	r1, r3
  isp->txqueued           = false;
 800e3cc:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 800e3ce:	60d3      	str	r3, [r2, #12]
  isp->txcnt              = 0;
 800e3d0:	e9c2 3301 	strd	r3, r3, [r2, #4]
  usb_lld_prepare_transmit(usbp, ep);
 800e3d4:	f001 ff5c 	bl	8010290 <usb_lld_prepare_transmit>
 800e3d8:	2320      	movs	r3, #32
 800e3da:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800e3de:	8923      	ldrh	r3, [r4, #8]
 800e3e0:	f013 0101 	ands.w	r1, r3, #1
 800e3e4:	d189      	bne.n	800e2fa <_usb_ep0setup+0x7a>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e3e6:	f043 0301 	orr.w	r3, r3, #1
 800e3ea:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f002 f86f 	bl	80104d0 <usb_lld_start_in>
 800e3f2:	e782      	b.n	800e2fa <_usb_ep0setup+0x7a>
    if (usbp->ep0n != 0U) {
 800e3f4:	b1d2      	cbz	r2, 800e42c <_usb_ep0setup+0x1ac>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e3f6:	694b      	ldr	r3, [r1, #20]
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800e3f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  isp->txqueued           = false;
 800e3fa:	2100      	movs	r1, #0
      usbp->ep0state = USB_EP0_TX;
 800e3fc:	2501      	movs	r5, #1
 800e3fe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  isp->mode.linear.txbuf  = buf;
 800e402:	60d8      	str	r0, [r3, #12]
  isp->txsize             = n;
 800e404:	605a      	str	r2, [r3, #4]
  isp->txqueued           = false;
 800e406:	7019      	strb	r1, [r3, #0]
  isp->txcnt              = 0;
 800e408:	6099      	str	r1, [r3, #8]
  usb_lld_prepare_transmit(usbp, ep);
 800e40a:	4620      	mov	r0, r4
 800e40c:	f001 ff40 	bl	8010290 <usb_lld_prepare_transmit>
 800e410:	2320      	movs	r3, #32
 800e412:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800e416:	8923      	ldrh	r3, [r4, #8]
 800e418:	ea13 0105 	ands.w	r1, r3, r5
 800e41c:	f47f af6d 	bne.w	800e2fa <_usb_ep0setup+0x7a>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e420:	432b      	orrs	r3, r5
 800e422:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800e424:	4620      	mov	r0, r4
 800e426:	f002 f853 	bl	80104d0 <usb_lld_start_in>
 800e42a:	e766      	b.n	800e2fa <_usb_ep0setup+0x7a>
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e42c:	698a      	ldr	r2, [r1, #24]
  osp->rxqueued           = false;
 800e42e:	2300      	movs	r3, #0
      usbp->ep0state = USB_EP0_WAITING_STS;
 800e430:	2103      	movs	r1, #3
 800e432:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800e436:	4619      	mov	r1, r3
  osp->rxqueued           = false;
 800e438:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800e43a:	60d3      	str	r3, [r2, #12]
  osp->rxcnt              = 0;
 800e43c:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800e440:	e74b      	b.n	800e2da <_usb_ep0setup+0x5a>
    usbp->configuration = usbp->setup[2];
 800e442:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e446:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f040 809e 	bne.w	800e58c <_usb_ep0setup+0x30c>
      usbp->state = USB_SELECTED;
 800e450:	2303      	movs	r3, #3
 800e452:	7023      	strb	r3, [r4, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800e454:	6863      	ldr	r3, [r4, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d0a9      	beq.n	800e3b0 <_usb_ep0setup+0x130>
 800e45c:	4620      	mov	r0, r4
 800e45e:	2102      	movs	r1, #2
 800e460:	4798      	blx	r3
 800e462:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e466:	e7a3      	b.n	800e3b0 <_usb_ep0setup+0x130>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800e468:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	f47f af4e 	bne.w	800e30e <_usb_ep0setup+0x8e>
      usbp->status &= ~2U;
 800e472:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e476:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 800e478:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e47c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 800e480:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800e484:	e798      	b.n	800e3b8 <_usb_ep0setup+0x138>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e486:	f240 3302 	movw	r3, #770	; 0x302
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d043      	beq.n	800e516 <_usb_ep0setup+0x296>
 800e48e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800e492:	f47f af3c 	bne.w	800e30e <_usb_ep0setup+0x8e>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800e496:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800e49a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e49e:	d187      	bne.n	800e3b0 <_usb_ep0setup+0x130>
  usbp->address = usbp->setup[2];
 800e4a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e4a4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f001 fd89 	bl	800ffc0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800e4ae:	6863      	ldr	r3, [r4, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	b113      	cbz	r3, 800e4ba <_usb_ep0setup+0x23a>
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800e4ba:	2303      	movs	r3, #3
 800e4bc:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e4c0:	7023      	strb	r3, [r4, #0]
 800e4c2:	e775      	b.n	800e3b0 <_usb_ep0setup+0x130>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e4c4:	b9ea      	cbnz	r2, 800e502 <_usb_ep0setup+0x282>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800e4c6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800e4ca:	2102      	movs	r1, #2
 800e4cc:	6422      	str	r2, [r4, #64]	; 0x40
 800e4ce:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800e4d2:	e6e8      	b.n	800e2a6 <_usb_ep0setup+0x26>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800e4d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e4d8:	f003 010f 	and.w	r1, r3, #15
 800e4dc:	061b      	lsls	r3, r3, #24
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800e4de:	4620      	mov	r0, r4
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800e4e0:	d457      	bmi.n	800e592 <_usb_ep0setup+0x312>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800e4e2:	f001 fe35 	bl	8010150 <usb_lld_get_status_out>
 800e4e6:	2801      	cmp	r0, #1
 800e4e8:	d057      	beq.n	800e59a <_usb_ep0setup+0x31a>
 800e4ea:	2802      	cmp	r0, #2
 800e4ec:	f47f af0f 	bne.w	800e30e <_usb_ep0setup+0x8e>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800e4f0:	4b30      	ldr	r3, [pc, #192]	; (800e5b4 <_usb_ep0setup+0x334>)
 800e4f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800e4f4:	2102      	movs	r1, #2
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
 800e4fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e500:	e6d1      	b.n	800e2a6 <_usb_ep0setup+0x26>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800e502:	2a01      	cmp	r2, #1
 800e504:	f47f af03 	bne.w	800e30e <_usb_ep0setup+0x8e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800e508:	4a2b      	ldr	r2, [pc, #172]	; (800e5b8 <_usb_ep0setup+0x338>)
 800e50a:	63a2      	str	r2, [r4, #56]	; 0x38
 800e50c:	2102      	movs	r1, #2
 800e50e:	2200      	movs	r2, #0
 800e510:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 800e514:	e6c7      	b.n	800e2a6 <_usb_ep0setup+0x26>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800e516:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f47f aef7 	bne.w	800e30e <_usb_ep0setup+0x8e>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800e520:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e524:	f013 010f 	ands.w	r1, r3, #15
 800e528:	f43f af42 	beq.w	800e3b0 <_usb_ep0setup+0x130>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e52c:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800e52e:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800e530:	d43a      	bmi.n	800e5a8 <_usb_ep0setup+0x328>
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800e532:	f001 ffe5 	bl	8010500 <usb_lld_stall_out>
 800e536:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e53a:	e739      	b.n	800e3b0 <_usb_ep0setup+0x130>
  hw |= (uint16_t)*p << 8U;
 800e53c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800e540:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 800e542:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800e546:	684e      	ldr	r6, [r1, #4]
 800e548:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e54c:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800e550:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e554:	4620      	mov	r0, r4
 800e556:	47b0      	blx	r6
    if (dp == NULL) {
 800e558:	2800      	cmp	r0, #0
 800e55a:	f43f aed8 	beq.w	800e30e <_usb_ep0setup+0x8e>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800e55e:	e9d0 1300 	ldrd	r1, r3, [r0]
 800e562:	6425      	str	r5, [r4, #64]	; 0x40
 800e564:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
 800e568:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e56c:	e69b      	b.n	800e2a6 <_usb_ep0setup+0x26>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800e56e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e572:	2b01      	cmp	r3, #1
 800e574:	f47f aecb 	bne.w	800e30e <_usb_ep0setup+0x8e>
      usbp->status |= 2U;
 800e578:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e57c:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status |= 2U;
 800e57e:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800e582:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 800e586:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800e58a:	e715      	b.n	800e3b8 <_usb_ep0setup+0x138>
      usbp->state = USB_ACTIVE;
 800e58c:	2304      	movs	r3, #4
 800e58e:	7023      	strb	r3, [r4, #0]
 800e590:	e760      	b.n	800e454 <_usb_ep0setup+0x1d4>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800e592:	f001 fded 	bl	8010170 <usb_lld_get_status_in>
 800e596:	2801      	cmp	r0, #1
 800e598:	d1a7      	bne.n	800e4ea <_usb_ep0setup+0x26a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800e59a:	4b08      	ldr	r3, [pc, #32]	; (800e5bc <_usb_ep0setup+0x33c>)
 800e59c:	e7a9      	b.n	800e4f2 <_usb_ep0setup+0x272>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800e59e:	f001 ffdf 	bl	8010560 <usb_lld_clear_in>
 800e5a2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e5a6:	e703      	b.n	800e3b0 <_usb_ep0setup+0x130>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800e5a8:	f001 ffba 	bl	8010520 <usb_lld_stall_in>
 800e5ac:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e5b0:	e6fe      	b.n	800e3b0 <_usb_ep0setup+0x130>
 800e5b2:	bf00      	nop
 800e5b4:	08017a80 	.word	0x08017a80
 800e5b8:	08017aa0 	.word	0x08017aa0
 800e5bc:	08017a90 	.word	0x08017a90

0800e5c0 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800e5c0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800e5c4:	b510      	push	{r4, lr}
 800e5c6:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 800e5c8:	2b06      	cmp	r3, #6
 800e5ca:	d823      	bhi.n	800e614 <_usb_ep0in+0x54>
 800e5cc:	e8df f003 	tbb	[pc, r3]
 800e5d0:	58042a58 	.word	0x58042a58
 800e5d4:	2358      	.short	0x2358
 800e5d6:	58          	.byte	0x58
 800e5d7:	00          	.byte	0x00
 800e5d8:	68c3      	ldr	r3, [r0, #12]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e5da:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800e5dc:	2103      	movs	r1, #3
  osp->rxqueued           = false;
 800e5de:	2300      	movs	r3, #0
    usbp->ep0state = USB_EP0_WAITING_STS;
 800e5e0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4619      	mov	r1, r3
  osp->rxqueued           = false;
 800e5e8:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800e5ea:	60d3      	str	r3, [r2, #12]
  osp->rxcnt              = 0;
 800e5ec:	e9c2 3301 	strd	r3, r3, [r2, #4]
  usb_lld_prepare_receive(usbp, ep);
 800e5f0:	f001 fdde 	bl	80101b0 <usb_lld_prepare_receive>
 800e5f4:	2320      	movs	r3, #32
 800e5f6:	f383 8811 	msr	BASEPRI, r3
  if (usbGetReceiveStatusI(usbp, ep)) {
 800e5fa:	8963      	ldrh	r3, [r4, #10]
 800e5fc:	f013 0101 	ands.w	r1, r3, #1
 800e600:	d105      	bne.n	800e60e <_usb_ep0in+0x4e>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e602:	f043 0301 	orr.w	r3, r3, #1
 800e606:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800e608:	4620      	mov	r0, r4
 800e60a:	f001 ff51 	bl	80104b0 <usb_lld_start_out>
 800e60e:	2300      	movs	r3, #0
 800e610:	f383 8811 	msr	BASEPRI, r3
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800e614:	bd10      	pop	{r4, pc}
    if (usbp->ep0endcb != NULL) {
 800e616:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e618:	b103      	cbz	r3, 800e61c <_usb_ep0in+0x5c>
      usbp->ep0endcb(usbp);
 800e61a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e61c:	2300      	movs	r3, #0
 800e61e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800e622:	bd10      	pop	{r4, pc}
  hw |= (uint16_t)*p << 8U;
 800e624:	f890 004b 	ldrb.w	r0, [r0, #75]	; 0x4b
 800e628:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 800e62c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e62e:	68e3      	ldr	r3, [r4, #12]
    max = (size_t)get_hword(&usbp->setup[6]);
 800e630:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    if ((usbp->ep0n < max) &&
 800e634:	4291      	cmp	r1, r2
 800e636:	d2d0      	bcs.n	800e5da <_usb_ep0in+0x1a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800e638:	8a18      	ldrh	r0, [r3, #16]
 800e63a:	fbb1 f2f0 	udiv	r2, r1, r0
 800e63e:	fb00 1212 	mls	r2, r0, r2, r1
    if ((usbp->ep0n < max) &&
 800e642:	2a00      	cmp	r2, #0
 800e644:	d1c9      	bne.n	800e5da <_usb_ep0in+0x1a>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e646:	695b      	ldr	r3, [r3, #20]
  usb_lld_prepare_transmit(usbp, ep);
 800e648:	4611      	mov	r1, r2
  isp->txqueued           = false;
 800e64a:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800e64c:	60da      	str	r2, [r3, #12]
  isp->txcnt              = 0;
 800e64e:	e9c3 2201 	strd	r2, r2, [r3, #4]
  usb_lld_prepare_transmit(usbp, ep);
 800e652:	4620      	mov	r0, r4
 800e654:	f001 fe1c 	bl	8010290 <usb_lld_prepare_transmit>
 800e658:	2320      	movs	r3, #32
 800e65a:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800e65e:	8923      	ldrh	r3, [r4, #8]
 800e660:	f013 0101 	ands.w	r1, r3, #1
 800e664:	d105      	bne.n	800e672 <_usb_ep0in+0xb2>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800e66c:	4620      	mov	r0, r4
 800e66e:	f001 ff2f 	bl	80104d0 <usb_lld_start_in>
 800e672:	2300      	movs	r3, #0
 800e674:	f383 8811 	msr	BASEPRI, r3
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800e678:	2302      	movs	r3, #2
 800e67a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800e67e:	bd10      	pop	{r4, pc}
    usb_lld_stall_in(usbp, 0);
 800e680:	2100      	movs	r1, #0
 800e682:	f001 ff4d 	bl	8010520 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800e686:	2100      	movs	r1, #0
 800e688:	4620      	mov	r0, r4
 800e68a:	f001 ff39 	bl	8010500 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e68e:	6863      	ldr	r3, [r4, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	b113      	cbz	r3, 800e69a <_usb_ep0in+0xda>
 800e694:	2105      	movs	r1, #5
 800e696:	4620      	mov	r0, r4
 800e698:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800e69a:	2306      	movs	r3, #6
 800e69c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800e6a0:	bd10      	pop	{r4, pc}
 800e6a2:	bf00      	nop
	...

0800e6b0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800e6b0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800e6b4:	2a06      	cmp	r2, #6
 800e6b6:	d814      	bhi.n	800e6e2 <_usb_ep0out+0x32>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	4093      	lsls	r3, r2
 800e6bc:	f013 0f67 	tst.w	r3, #103	; 0x67
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	d127      	bne.n	800e716 <_usb_ep0out+0x66>
 800e6c6:	f013 0208 	ands.w	r2, r3, #8
 800e6ca:	d00b      	beq.n	800e6e4 <_usb_ep0out+0x34>
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800e6cc:	68c3      	ldr	r3, [r0, #12]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	b92b      	cbnz	r3, 800e6e0 <_usb_ep0out+0x30>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800e6d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e6d6:	b103      	cbz	r3, 800e6da <_usb_ep0out+0x2a>
      usbp->ep0endcb(usbp);
 800e6d8:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	4770      	bx	lr
 800e6e4:	06db      	lsls	r3, r3, #27
 800e6e6:	d5fb      	bpl.n	800e6e0 <_usb_ep0out+0x30>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e6e8:	68c3      	ldr	r3, [r0, #12]
 800e6ea:	695b      	ldr	r3, [r3, #20]
    usbp->ep0state = USB_EP0_SENDING_STS;
 800e6ec:	2105      	movs	r1, #5
 800e6ee:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  isp->txqueued           = false;
 800e6f2:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800e6f4:	60da      	str	r2, [r3, #12]
  isp->txcnt              = 0;
 800e6f6:	e9c3 2201 	strd	r2, r2, [r3, #4]
  usb_lld_prepare_transmit(usbp, ep);
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	f001 fdc8 	bl	8010290 <usb_lld_prepare_transmit>
 800e700:	2320      	movs	r3, #32
 800e702:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800e706:	8923      	ldrh	r3, [r4, #8]
 800e708:	f013 0101 	ands.w	r1, r3, #1
 800e70c:	d014      	beq.n	800e738 <_usb_ep0out+0x88>
 800e70e:	2300      	movs	r3, #0
 800e710:	f383 8811 	msr	BASEPRI, r3
}
 800e714:	bd10      	pop	{r4, pc}
    usb_lld_stall_in(usbp, 0);
 800e716:	2100      	movs	r1, #0
 800e718:	f001 ff02 	bl	8010520 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800e71c:	2100      	movs	r1, #0
 800e71e:	4620      	mov	r0, r4
 800e720:	f001 feee 	bl	8010500 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800e724:	6863      	ldr	r3, [r4, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	b113      	cbz	r3, 800e730 <_usb_ep0out+0x80>
 800e72a:	2105      	movs	r1, #5
 800e72c:	4620      	mov	r0, r4
 800e72e:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800e730:	2306      	movs	r3, #6
 800e732:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800e736:	bd10      	pop	{r4, pc}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800e738:	f043 0301 	orr.w	r3, r3, #1
 800e73c:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800e73e:	4620      	mov	r0, r4
 800e740:	f001 fec6 	bl	80104d0 <usb_lld_start_in>
 800e744:	e7e3      	b.n	800e70e <_usb_ep0out+0x5e>
 800e746:	bf00      	nop
	...

0800e750 <nvicEnableVector>:
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e750:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800e752:	b410      	push	{r4}
 800e754:	009b      	lsls	r3, r3, #2
  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800e756:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800e75a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800e75e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800e762:	0109      	lsls	r1, r1, #4
 800e764:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e768:	f000 001f 	and.w	r0, r0, #31
 800e76c:	2201      	movs	r2, #1
  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800e76e:	b2c9      	uxtb	r1, r1
 800e770:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800e774:	fa02 f000 	lsl.w	r0, r2, r0
 800e778:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
}
 800e77c:	f85d 4b04 	ldr.w	r4, [sp], #4
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800e780:	6018      	str	r0, [r3, #0]
}
 800e782:	4770      	bx	lr
	...

0800e790 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800e790:	4908      	ldr	r1, [pc, #32]	; (800e7b4 <nvicDisableVector+0x24>)
 800e792:	0943      	lsrs	r3, r0, #5
void nvicDisableVector(uint32_t n) {
 800e794:	b410      	push	{r4}
  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800e796:	3320      	adds	r3, #32
 800e798:	f000 041f 	and.w	r4, r0, #31
 800e79c:	2201      	movs	r2, #1
  NVIC->IP[n]        = 0;
 800e79e:	4408      	add	r0, r1
  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800e7a0:	40a2      	lsls	r2, r4
  NVIC->IP[n]        = 0;
 800e7a2:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800e7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n]        = 0;
 800e7a8:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
}
 800e7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	e000e100 	.word	0xe000e100
	...

0800e7c0 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800e7c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800e7c4:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800e7c8:	0109      	lsls	r1, r1, #4
 800e7ca:	b2c9      	uxtb	r1, r1
 800e7cc:	7601      	strb	r1, [r0, #24]
}
 800e7ce:	4770      	bx	lr

0800e7d0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800e7d0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e7d2:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800e7d4:	4a07      	ldr	r2, [pc, #28]	; (800e7f4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e7d6:	6819      	ldr	r1, [r3, #0]
 800e7d8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800e7dc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800e7de:	6813      	ldr	r3, [r2, #0]
 800e7e0:	b10b      	cbz	r3, 800e7e6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800e7e2:	6850      	ldr	r0, [r2, #4]
 800e7e4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800e7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800e7ea:	f7ff b949 	b.w	800da80 <_port_irq_epilogue>
 800e7ee:	bf00      	nop
 800e7f0:	40026000 	.word	0x40026000
 800e7f4:	20000f10 	.word	0x20000f10
	...

0800e800 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e800:	4b08      	ldr	r3, [pc, #32]	; (800e824 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800e802:	4809      	ldr	r0, [pc, #36]	; (800e828 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e804:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 800e806:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e808:	0989      	lsrs	r1, r1, #6
 800e80a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector70) {
 800e80e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6;
 800e810:	018c      	lsls	r4, r1, #6
 800e812:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800e814:	b10a      	cbz	r2, 800e81a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800e816:	68c0      	ldr	r0, [r0, #12]
 800e818:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e81e:	f7ff b92f 	b.w	800da80 <_port_irq_epilogue>
 800e822:	bf00      	nop
 800e824:	40026000 	.word	0x40026000
 800e828:	20000f10 	.word	0x20000f10
 800e82c:	00000000 	.word	0x00000000

0800e830 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e830:	4b08      	ldr	r3, [pc, #32]	; (800e854 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800e832:	4809      	ldr	r0, [pc, #36]	; (800e858 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e834:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 800e836:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e838:	0c09      	lsrs	r1, r1, #16
 800e83a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector74) {
 800e83e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16;
 800e840:	040c      	lsls	r4, r1, #16
 800e842:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800e844:	b10a      	cbz	r2, 800e84a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800e846:	6940      	ldr	r0, [r0, #20]
 800e848:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e84e:	f7ff b917 	b.w	800da80 <_port_irq_epilogue>
 800e852:	bf00      	nop
 800e854:	40026000 	.word	0x40026000
 800e858:	20000f10 	.word	0x20000f10
 800e85c:	00000000 	.word	0x00000000

0800e860 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e860:	4b08      	ldr	r3, [pc, #32]	; (800e884 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e862:	4809      	ldr	r0, [pc, #36]	; (800e888 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e864:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 800e866:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e868:	0d89      	lsrs	r1, r1, #22
 800e86a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector78) {
 800e86e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22;
 800e870:	058c      	lsls	r4, r1, #22
 800e872:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800e874:	b10a      	cbz	r2, 800e87a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800e876:	69c0      	ldr	r0, [r0, #28]
 800e878:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e87e:	f7ff b8ff 	b.w	800da80 <_port_irq_epilogue>
 800e882:	bf00      	nop
 800e884:	40026000 	.word	0x40026000
 800e888:	20000f10 	.word	0x20000f10
 800e88c:	00000000 	.word	0x00000000

0800e890 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800e890:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e892:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e894:	4807      	ldr	r0, [pc, #28]	; (800e8b4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e896:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 800e898:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e89a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800e89e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800e8a0:	b10a      	cbz	r2, 800e8a6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800e8a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e8a4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e8a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800e8aa:	f7ff b8e9 	b.w	800da80 <_port_irq_epilogue>
 800e8ae:	bf00      	nop
 800e8b0:	40026000 	.word	0x40026000
 800e8b4:	20000f10 	.word	0x20000f10
	...

0800e8c0 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e8c0:	4b08      	ldr	r3, [pc, #32]	; (800e8e4 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e8c2:	4809      	ldr	r0, [pc, #36]	; (800e8e8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e8c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 800e8c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e8c8:	0989      	lsrs	r1, r1, #6
 800e8ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector80) {
 800e8ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6;
 800e8d0:	018c      	lsls	r4, r1, #6
 800e8d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800e8d4:	b10a      	cbz	r2, 800e8da <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800e8d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e8d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e8de:	f7ff b8cf 	b.w	800da80 <_port_irq_epilogue>
 800e8e2:	bf00      	nop
 800e8e4:	40026000 	.word	0x40026000
 800e8e8:	20000f10 	.word	0x20000f10
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e8f0:	4b08      	ldr	r3, [pc, #32]	; (800e914 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e8f2:	4809      	ldr	r0, [pc, #36]	; (800e918 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e8f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 800e8f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e8f8:	0c09      	lsrs	r1, r1, #16
 800e8fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector84) {
 800e8fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16;
 800e900:	040c      	lsls	r4, r1, #16
 800e902:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800e904:	b10a      	cbz	r2, 800e90a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800e906:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e908:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e90e:	f7ff b8b7 	b.w	800da80 <_port_irq_epilogue>
 800e912:	bf00      	nop
 800e914:	40026000 	.word	0x40026000
 800e918:	20000f10 	.word	0x20000f10
 800e91c:	00000000 	.word	0x00000000

0800e920 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e920:	4b08      	ldr	r3, [pc, #32]	; (800e944 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e922:	4809      	ldr	r0, [pc, #36]	; (800e948 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e924:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 800e926:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e928:	0d89      	lsrs	r1, r1, #22
 800e92a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(VectorFC) {
 800e92e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22;
 800e930:	058c      	lsls	r4, r1, #22
 800e932:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800e934:	b10a      	cbz	r2, 800e93a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800e936:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e938:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e93e:	f7ff b89f 	b.w	800da80 <_port_irq_epilogue>
 800e942:	bf00      	nop
 800e944:	40026000 	.word	0x40026000
 800e948:	20000f10 	.word	0x20000f10
 800e94c:	00000000 	.word	0x00000000

0800e950 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800e950:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e952:	4b07      	ldr	r3, [pc, #28]	; (800e970 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e954:	4807      	ldr	r0, [pc, #28]	; (800e974 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e956:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 800e958:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e95a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800e95e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800e960:	b10a      	cbz	r2, 800e966 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800e962:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e964:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800e96a:	f7ff b889 	b.w	800da80 <_port_irq_epilogue>
 800e96e:	bf00      	nop
 800e970:	40026400 	.word	0x40026400
 800e974:	20000f10 	.word	0x20000f10
	...

0800e980 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e980:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e982:	4809      	ldr	r0, [pc, #36]	; (800e9a8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e984:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 800e986:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e988:	0989      	lsrs	r1, r1, #6
 800e98a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector124) {
 800e98e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6;
 800e990:	018c      	lsls	r4, r1, #6
 800e992:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800e994:	b10a      	cbz	r2, 800e99a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800e996:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e998:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e99e:	f7ff b86f 	b.w	800da80 <_port_irq_epilogue>
 800e9a2:	bf00      	nop
 800e9a4:	40026400 	.word	0x40026400
 800e9a8:	20000f10 	.word	0x20000f10
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e9b0:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e9b2:	4809      	ldr	r0, [pc, #36]	; (800e9d8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e9b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 800e9b6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e9b8:	0c09      	lsrs	r1, r1, #16
 800e9ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector128) {
 800e9be:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16;
 800e9c0:	040c      	lsls	r4, r1, #16
 800e9c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800e9c4:	b10a      	cbz	r2, 800e9ca <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800e9c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800e9c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e9ce:	f7ff b857 	b.w	800da80 <_port_irq_epilogue>
 800e9d2:	bf00      	nop
 800e9d4:	40026400 	.word	0x40026400
 800e9d8:	20000f10 	.word	0x20000f10
 800e9dc:	00000000 	.word	0x00000000

0800e9e0 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e9e0:	4b08      	ldr	r3, [pc, #32]	; (800ea04 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e9e2:	4809      	ldr	r0, [pc, #36]	; (800ea08 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e9e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 800e9e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e9e8:	0d89      	lsrs	r1, r1, #22
 800e9ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector12C) {
 800e9ee:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22;
 800e9f0:	058c      	lsls	r4, r1, #22
 800e9f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800e9f4:	b10a      	cbz	r2, 800e9fa <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800e9f6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800e9f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e9fe:	f7ff b83f 	b.w	800da80 <_port_irq_epilogue>
 800ea02:	bf00      	nop
 800ea04:	40026400 	.word	0x40026400
 800ea08:	20000f10 	.word	0x20000f10
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800ea10:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800ea12:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800ea14:	4807      	ldr	r0, [pc, #28]	; (800ea34 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800ea16:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 800ea18:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800ea1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800ea1e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800ea20:	b10a      	cbz	r2, 800ea26 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800ea22:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800ea24:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800ea2a:	f7ff b829 	b.w	800da80 <_port_irq_epilogue>
 800ea2e:	bf00      	nop
 800ea30:	40026400 	.word	0x40026400
 800ea34:	20000f10 	.word	0x20000f10
	...

0800ea40 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800ea40:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800ea42:	4809      	ldr	r0, [pc, #36]	; (800ea68 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800ea44:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 800ea46:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800ea48:	0989      	lsrs	r1, r1, #6
 800ea4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector150) {
 800ea4e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6;
 800ea50:	018c      	lsls	r4, r1, #6
 800ea52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800ea54:	b10a      	cbz	r2, 800ea5a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800ea56:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800ea58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800ea5e:	f7ff b80f 	b.w	800da80 <_port_irq_epilogue>
 800ea62:	bf00      	nop
 800ea64:	40026400 	.word	0x40026400
 800ea68:	20000f10 	.word	0x20000f10
 800ea6c:	00000000 	.word	0x00000000

0800ea70 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800ea70:	4b08      	ldr	r3, [pc, #32]	; (800ea94 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800ea72:	4809      	ldr	r0, [pc, #36]	; (800ea98 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800ea74:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 800ea76:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800ea78:	0c09      	lsrs	r1, r1, #16
 800ea7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector154) {
 800ea7e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16;
 800ea80:	040c      	lsls	r4, r1, #16
 800ea82:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800ea84:	b10a      	cbz	r2, 800ea8a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800ea86:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ea88:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800ea8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800ea8e:	f7fe bff7 	b.w	800da80 <_port_irq_epilogue>
 800ea92:	bf00      	nop
 800ea94:	40026400 	.word	0x40026400
 800ea98:	20000f10 	.word	0x20000f10
 800ea9c:	00000000 	.word	0x00000000

0800eaa0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800eaa0:	4b08      	ldr	r3, [pc, #32]	; (800eac4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800eaa2:	4809      	ldr	r0, [pc, #36]	; (800eac8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800eaa4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 800eaa6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800eaa8:	0d89      	lsrs	r1, r1, #22
 800eaaa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector158) {
 800eaae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22;
 800eab0:	058c      	lsls	r4, r1, #22
 800eab2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800eab4:	b10a      	cbz	r2, 800eaba <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800eab6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800eab8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800eaba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800eabe:	f7fe bfdf 	b.w	800da80 <_port_irq_epilogue>
 800eac2:	bf00      	nop
 800eac4:	40026400 	.word	0x40026400
 800eac8:	20000f10 	.word	0x20000f10
 800eacc:	00000000 	.word	0x00000000

0800ead0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800ead0:	490e      	ldr	r1, [pc, #56]	; (800eb0c <dmaInit+0x3c>)
 800ead2:	4a0f      	ldr	r2, [pc, #60]	; (800eb10 <dmaInit+0x40>)
 800ead4:	480f      	ldr	r0, [pc, #60]	; (800eb14 <dmaInit+0x44>)
 800ead6:	2300      	movs	r3, #0
void dmaInit(void) {
 800ead8:	b410      	push	{r4}
  dma_streams_mask = 0;
 800eada:	600b      	str	r3, [r1, #0]
 800eadc:	4c0e      	ldr	r4, [pc, #56]	; (800eb18 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800eade:	4619      	mov	r1, r3
 800eae0:	e001      	b.n	800eae6 <dmaInit+0x16>
 800eae2:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800eae6:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800eae8:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800eaec:	3301      	adds	r3, #1
 800eaee:	2b10      	cmp	r3, #16
 800eaf0:	f102 020c 	add.w	r2, r2, #12
 800eaf4:	d1f5      	bne.n	800eae2 <dmaInit+0x12>
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800eaf6:	4909      	ldr	r1, [pc, #36]	; (800eb1c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800eaf8:	4a09      	ldr	r2, [pc, #36]	; (800eb20 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800eafa:	f85d 4b04 	ldr.w	r4, [sp], #4
  DMA1->LIFCR = 0xFFFFFFFF;
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 800eb04:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800eb06:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800eb08:	60d3      	str	r3, [r2, #12]
}
 800eb0a:	4770      	bx	lr
 800eb0c:	20000f90 	.word	0x20000f90
 800eb10:	08017abc 	.word	0x08017abc
 800eb14:	40026010 	.word	0x40026010
 800eb18:	20000f10 	.word	0x20000f10
 800eb1c:	40026000 	.word	0x40026000
 800eb20:	40026400 	.word	0x40026400
	...

0800eb30 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800eb32:	4f20      	ldr	r7, [pc, #128]	; (800ebb4 <dmaStreamAllocate+0x84>)
 800eb34:	7a46      	ldrb	r6, [r0, #9]
 800eb36:	f8d7 c000 	ldr.w	ip, [r7]
 800eb3a:	2401      	movs	r4, #1
 800eb3c:	fa04 f506 	lsl.w	r5, r4, r6
 800eb40:	ea15 0f0c 	tst.w	r5, ip
 800eb44:	d133      	bne.n	800ebae <dmaStreamAllocate+0x7e>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800eb46:	4c1c      	ldr	r4, [pc, #112]	; (800ebb8 <dmaStreamAllocate+0x88>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800eb48:	ea45 050c 	orr.w	r5, r5, ip
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800eb4c:	eb04 0cc6 	add.w	ip, r4, r6, lsl #3

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800eb50:	f015 0fff 	tst.w	r5, #255	; 0xff
  dma_streams_mask |= (1 << dmastp->selfindex);
 800eb54:	603d      	str	r5, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800eb56:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800eb5a:	f8cc 3004 	str.w	r3, [ip, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800eb5e:	d004      	beq.n	800eb6a <dmaStreamAllocate+0x3a>
    rccEnableDMA1(FALSE);
 800eb60:	4c16      	ldr	r4, [pc, #88]	; (800ebbc <dmaStreamAllocate+0x8c>)
 800eb62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eb68:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800eb6a:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800eb6e:	d116      	bne.n	800eb9e <dmaStreamAllocate+0x6e>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800eb70:	6805      	ldr	r5, [r0, #0]
 800eb72:	682b      	ldr	r3, [r5, #0]
 800eb74:	f023 031f 	bic.w	r3, r3, #31
 800eb78:	602b      	str	r3, [r5, #0]
 800eb7a:	682c      	ldr	r4, [r5, #0]
 800eb7c:	f014 0401 	ands.w	r4, r4, #1
 800eb80:	d1fb      	bne.n	800eb7a <dmaStreamAllocate+0x4a>
 800eb82:	7a07      	ldrb	r7, [r0, #8]
 800eb84:	6846      	ldr	r6, [r0, #4]
 800eb86:	233d      	movs	r3, #61	; 0x3d
 800eb88:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800eb8a:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 800eb8c:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800eb8e:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800eb90:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800eb92:	b152      	cbz	r2, 800ebaa <dmaStreamAllocate+0x7a>
    nvicEnableVector(dmastp->vector, priority);
 800eb94:	7a80      	ldrb	r0, [r0, #10]
 800eb96:	f7ff fddb 	bl	800e750 <nvicEnableVector>

  return FALSE;
 800eb9a:	4620      	mov	r0, r4
}
 800eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rccEnableDMA2(FALSE);
 800eb9e:	4c07      	ldr	r4, [pc, #28]	; (800ebbc <dmaStreamAllocate+0x8c>)
 800eba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800eba6:	6323      	str	r3, [r4, #48]	; 0x30
 800eba8:	e7e2      	b.n	800eb70 <dmaStreamAllocate+0x40>
  return FALSE;
 800ebaa:	4610      	mov	r0, r2
}
 800ebac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return TRUE;
 800ebae:	4620      	mov	r0, r4
}
 800ebb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20000f90 	.word	0x20000f90
 800ebb8:	20000f10 	.word	0x20000f10
 800ebbc:	40023800 	.word	0x40023800

0800ebc0 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	4604      	mov	r4, r0
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1 << dmastp->selfindex)) != 0,
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 800ebc4:	7a80      	ldrb	r0, [r0, #10]
 800ebc6:	f7ff fde3 	bl	800e790 <nvicDisableVector>

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 800ebca:	490c      	ldr	r1, [pc, #48]	; (800ebfc <dmaStreamRelease+0x3c>)
 800ebcc:	7a60      	ldrb	r0, [r4, #9]
 800ebce:	680b      	ldr	r3, [r1, #0]
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	4082      	lsls	r2, r0
 800ebd4:	ea23 0302 	bic.w	r3, r3, r2

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 800ebd8:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 800ebdc:	600b      	str	r3, [r1, #0]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 800ebde:	d104      	bne.n	800ebea <dmaStreamRelease+0x2a>
    rccDisableDMA1(FALSE);
 800ebe0:	4907      	ldr	r1, [pc, #28]	; (800ec00 <dmaStreamRelease+0x40>)
 800ebe2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ebe4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800ebe8:	630a      	str	r2, [r1, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0)
 800ebea:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800ebee:	d104      	bne.n	800ebfa <dmaStreamRelease+0x3a>
    rccDisableDMA2(FALSE);
 800ebf0:	4a03      	ldr	r2, [pc, #12]	; (800ec00 <dmaStreamRelease+0x40>)
 800ebf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ebf4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ebf8:	6313      	str	r3, [r2, #48]	; 0x30
}
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	20000f90 	.word	0x20000f90
 800ec00:	40023800 	.word	0x40023800
	...

0800ec10 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800ec10:	4b17      	ldr	r3, [pc, #92]	; (800ec70 <hal_lld_init+0x60>)
 800ec12:	f04f 31ff 	mov.w	r1, #4294967295
 800ec16:	691a      	ldr	r2, [r3, #16]
 800ec18:	2200      	movs	r2, #0
void hal_lld_init(void) {
 800ec1a:	b410      	push	{r4}
  rccResetAHB1(~0);
 800ec1c:	6119      	str	r1, [r3, #16]
 800ec1e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800ec20:	6958      	ldr	r0, [r3, #20]
 800ec22:	6159      	str	r1, [r3, #20]
 800ec24:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800ec26:	6a18      	ldr	r0, [r3, #32]
  PWR->CR |= PWR_CR_DBP;
 800ec28:	4c12      	ldr	r4, [pc, #72]	; (800ec74 <hal_lld_init+0x64>)
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800ec2a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800ec2e:	6218      	str	r0, [r3, #32]
 800ec30:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800ec32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ec34:	6259      	str	r1, [r3, #36]	; 0x24
 800ec36:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800ec38:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ec3a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800ec3e:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 800ec40:	6821      	ldr	r1, [r4, #0]
 800ec42:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ec46:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800ec48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ec4a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800ec4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ec52:	d003      	beq.n	800ec5c <hal_lld_init+0x4c>
    RCC->BDCR = RCC_BDCR_BDRST;
 800ec54:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ec58:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800ec5a:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800ec5c:	4a05      	ldr	r2, [pc, #20]	; (800ec74 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800ec5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  PWR->CSR &= ~PWR_CSR_BRE;
 800ec62:	6853      	ldr	r3, [r2, #4]
 800ec64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec68:	6053      	str	r3, [r2, #4]
  dmaInit();
 800ec6a:	f7ff bf31 	b.w	800ead0 <dmaInit>
 800ec6e:	bf00      	nop
 800ec70:	40023800 	.word	0x40023800
 800ec74:	40007000 	.word	0x40007000
	...

0800ec80 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800ec80:	4b2a      	ldr	r3, [pc, #168]	; (800ed2c <stm32_clock_init+0xac>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800ec82:	4a2b      	ldr	r2, [pc, #172]	; (800ed30 <stm32_clock_init+0xb0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800ec84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 800ec88:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800ec8c:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800ec8e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	f042 0201 	orr.w	r2, r2, #1
 800ec96:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	0792      	lsls	r2, r2, #30
 800ec9c:	d5fc      	bpl.n	800ec98 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800ec9e:	6899      	ldr	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800eca0:	4a22      	ldr	r2, [pc, #136]	; (800ed2c <stm32_clock_init+0xac>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800eca2:	f021 0103 	bic.w	r1, r1, #3
 800eca6:	6099      	str	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800eca8:	6899      	ldr	r1, [r3, #8]
 800ecaa:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800ecac:	6893      	ldr	r3, [r2, #8]
 800ecae:	f013 030c 	ands.w	r3, r3, #12
 800ecb2:	d1fb      	bne.n	800ecac <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800ecb4:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800ecb6:	491d      	ldr	r1, [pc, #116]	; (800ed2c <stm32_clock_init+0xac>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800ecb8:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800ecbc:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800ecbe:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 800ecc0:	6813      	ldr	r3, [r2, #0]
 800ecc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ecc6:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800ecc8:	680b      	ldr	r3, [r1, #0]
 800ecca:	0398      	lsls	r0, r3, #14
 800eccc:	d5fc      	bpl.n	800ecc8 <stm32_clock_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800ecce:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800ecd0:	4a16      	ldr	r2, [pc, #88]	; (800ed2c <stm32_clock_init+0xac>)
  RCC->CSR |= RCC_CSR_LSION;
 800ecd2:	f043 0301 	orr.w	r3, r3, #1
 800ecd6:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800ecd8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800ecda:	0799      	lsls	r1, r3, #30
 800ecdc:	d5fc      	bpl.n	800ecd8 <stm32_clock_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800ecde:	4b15      	ldr	r3, [pc, #84]	; (800ed34 <stm32_clock_init+0xb4>)
 800ece0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800ece2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800ece4:	4912      	ldr	r1, [pc, #72]	; (800ed30 <stm32_clock_init+0xb0>)
  RCC->CR |= RCC_CR_PLLON;
 800ece6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ecea:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800ecec:	684b      	ldr	r3, [r1, #4]
 800ecee:	045a      	lsls	r2, r3, #17
 800ecf0:	d5fc      	bpl.n	800ecec <stm32_clock_init+0x6c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800ecf2:	490e      	ldr	r1, [pc, #56]	; (800ed2c <stm32_clock_init+0xac>)
 800ecf4:	680b      	ldr	r3, [r1, #0]
 800ecf6:	019b      	lsls	r3, r3, #6
 800ecf8:	d5fc      	bpl.n	800ecf4 <stm32_clock_init+0x74>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800ecfa:	4b0f      	ldr	r3, [pc, #60]	; (800ed38 <stm32_clock_init+0xb8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800ecfc:	4a0f      	ldr	r2, [pc, #60]	; (800ed3c <stm32_clock_init+0xbc>)
 800ecfe:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800ed00:	f240 7205 	movw	r2, #1797	; 0x705
 800ed04:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800ed06:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800ed08:	4a08      	ldr	r2, [pc, #32]	; (800ed2c <stm32_clock_init+0xac>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800ed0a:	f043 0302 	orr.w	r3, r3, #2
 800ed0e:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800ed10:	6893      	ldr	r3, [r2, #8]
 800ed12:	f003 030c 	and.w	r3, r3, #12
 800ed16:	2b08      	cmp	r3, #8
 800ed18:	d1fa      	bne.n	800ed10 <stm32_clock_init+0x90>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800ed1a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800ed1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed20:	6453      	str	r3, [r2, #68]	; 0x44
 800ed22:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ed24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed28:	6653      	str	r3, [r2, #100]	; 0x64
}
 800ed2a:	4770      	bx	lr
 800ed2c:	40023800 	.word	0x40023800
 800ed30:	40007000 	.word	0x40007000
 800ed34:	07405408 	.word	0x07405408
 800ed38:	40023c00 	.word	0x40023c00
 800ed3c:	38089400 	.word	0x38089400

0800ed40 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800ed40:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800ed42:	4d44      	ldr	r5, [pc, #272]	; (800ee54 <can_lld_set_filters+0x114>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800ed44:	4c44      	ldr	r4, [pc, #272]	; (800ee58 <can_lld_set_filters+0x118>)
  rccEnableCAN1(FALSE);
 800ed46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800ed48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ed4c:	642b      	str	r3, [r5, #64]	; 0x40
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800ed4e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800ed52:	0c1b      	lsrs	r3, r3, #16
 800ed54:	041b      	lsls	r3, r3, #16
 800ed56:	f043 0301 	orr.w	r3, r3, #1
 800ed5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ed5e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  if (num > 0) {
 800ed62:	2900      	cmp	r1, #0
 800ed64:	d05b      	beq.n	800ee1e <can_lld_set_filters+0xde>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed6c:	4618      	mov	r0, r3
    CAN1->FM1R = 0;
 800ed6e:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    CAN1->FS1R = 0;
 800ed72:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800ed76:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
      CAN1->sFilterRegister[i].FR1 = 0;
 800ed7a:	461c      	mov	r4, r3
 800ed7c:	00c3      	lsls	r3, r0, #3
 800ed7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed82:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed86:	3001      	adds	r0, #1
 800ed88:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800ed8a:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800ed8e:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800ed92:	d1f3      	bne.n	800ed7c <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800ed94:	4d30      	ldr	r5, [pc, #192]	; (800ee58 <can_lld_set_filters+0x118>)
    for (i = 0; i < num; i++) {
 800ed96:	2600      	movs	r6, #0
      fmask = 1 << cfp->filter;
 800ed98:	2701      	movs	r7, #1
 800ed9a:	6810      	ldr	r0, [r2, #0]
      if (cfp->mode)
 800ed9c:	7914      	ldrb	r4, [r2, #4]
 800ed9e:	00c3      	lsls	r3, r0, #3
 800eda0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eda4:	f014 0f01 	tst.w	r4, #1
 800eda8:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < num; i++) {
 800edac:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800edb0:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 800edb4:	d005      	beq.n	800edc2 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800edb6:	f8d5 c204 	ldr.w	ip, [r5, #516]	; 0x204
 800edba:	ea4c 0c00 	orr.w	ip, ip, r0
 800edbe:	f8c5 c204 	str.w	ip, [r5, #516]	; 0x204
      if (cfp->scale)
 800edc2:	f014 0f02 	tst.w	r4, #2
 800edc6:	d005      	beq.n	800edd4 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800edc8:	f8d5 c20c 	ldr.w	ip, [r5, #524]	; 0x20c
 800edcc:	ea4c 0c00 	orr.w	ip, ip, r0
 800edd0:	f8c5 c20c 	str.w	ip, [r5, #524]	; 0x20c
      if (cfp->assignment)
 800edd4:	0764      	lsls	r4, r4, #29
 800edd6:	d504      	bpl.n	800ede2 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800edd8:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800eddc:	4304      	orrs	r4, r0
 800edde:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800ede2:	6894      	ldr	r4, [r2, #8]
 800ede4:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800ede8:	68d4      	ldr	r4, [r2, #12]
 800edea:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800edee:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 800edf2:	42b1      	cmp	r1, r6
      CAN1->FA1R |= fmask;
 800edf4:	ea40 0003 	orr.w	r0, r0, r3
      cfp++;
 800edf8:	f102 0210 	add.w	r2, r2, #16
      CAN1->FA1R |= fmask;
 800edfc:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 800ee00:	d1cb      	bne.n	800ed9a <can_lld_set_filters+0x5a>
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800ee02:	4915      	ldr	r1, [pc, #84]	; (800ee58 <can_lld_set_filters+0x118>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800ee04:	4a13      	ldr	r2, [pc, #76]	; (800ee54 <can_lld_set_filters+0x114>)
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800ee06:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800ee0a:	f023 0301 	bic.w	r3, r3, #1
 800ee0e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  rccDisableCAN1(FALSE);
 800ee12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ee14:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ee18:	6413      	str	r3, [r2, #64]	; 0x40
}
 800ee1a:	bcf0      	pop	{r4, r5, r6, r7}
 800ee1c:	4770      	bx	lr
 800ee1e:	00c2      	lsls	r2, r0, #3
 800ee20:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->FS1R = 1 | (1 << can2sb);
 800ee24:	2301      	movs	r3, #1
 800ee26:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800ee2a:	4083      	lsls	r3, r0
 800ee2c:	f043 0301 	orr.w	r3, r3, #1
    CAN1->sFilterRegister[0].FR1 = 0;
 800ee30:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800ee34:	f8c4 1244 	str.w	r1, [r4, #580]	; 0x244
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800ee38:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800ee3c:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
    CAN1->FM1R = 0;
 800ee40:	f8c4 1204 	str.w	r1, [r4, #516]	; 0x204
    CAN1->FFA1R = 0;
 800ee44:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    CAN1->FS1R = 1 | (1 << can2sb);
 800ee48:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800ee4c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
 800ee50:	e7d7      	b.n	800ee02 <can_lld_set_filters+0xc2>
 800ee52:	bf00      	nop
 800ee54:	40023800 	.word	0x40023800
 800ee58:	40006400 	.word	0x40006400
 800ee5c:	00000000 	.word	0x00000000

0800ee60 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800ee60:	b510      	push	{r4, lr}
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800ee62:	4c0c      	ldr	r4, [pc, #48]	; (800ee94 <Vector8C+0x34>)
 800ee64:	490c      	ldr	r1, [pc, #48]	; (800ee98 <Vector8C+0x38>)
 800ee66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee68:	2320      	movs	r3, #32
 800ee6a:	6091      	str	r1, [r2, #8]
 800ee6c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800ee70:	2100      	movs	r1, #0
 800ee72:	f104 0008 	add.w	r0, r4, #8
 800ee76:	f7fe faab 	bl	800d3d0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800ee7a:	f104 001c 	add.w	r0, r4, #28
 800ee7e:	2101      	movs	r1, #1
 800ee80:	f7fe fc16 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800ee84:	2300      	movs	r3, #0
 800ee86:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800ee8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800ee8e:	f7fe bdf7 	b.w	800da80 <_port_irq_epilogue>
 800ee92:	bf00      	nop
 800ee94:	20000f94 	.word	0x20000f94
 800ee98:	00010101 	.word	0x00010101
 800ee9c:	00000000 	.word	0x00000000

0800eea0 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800eea0:	b538      	push	{r3, r4, r5, lr}
  rf0r = canp->can->RF0R;
 800eea2:	4c16      	ldr	r4, [pc, #88]	; (800eefc <Vector90+0x5c>)
 800eea4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eea6:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800eea8:	07aa      	lsls	r2, r5, #30
 800eeaa:	d111      	bne.n	800eed0 <Vector90+0x30>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800eeac:	06eb      	lsls	r3, r5, #27
 800eeae:	d50b      	bpl.n	800eec8 <Vector90+0x28>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800eeb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eeb2:	2110      	movs	r1, #16
 800eeb4:	60d9      	str	r1, [r3, #12]
 800eeb6:	2320      	movs	r3, #32
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	4810      	ldr	r0, [pc, #64]	; (800ef00 <Vector90+0x60>)
 800eebe:	f7fe fbf7 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800eec2:	2300      	movs	r3, #0
 800eec4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800eec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800eecc:	f7fe bdd8 	b.w	800da80 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800eed0:	695a      	ldr	r2, [r3, #20]
 800eed2:	f022 0202 	bic.w	r2, r2, #2
 800eed6:	615a      	str	r2, [r3, #20]
 800eed8:	2320      	movs	r3, #32
 800eeda:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800eede:	2100      	movs	r1, #0
 800eee0:	f104 0010 	add.w	r0, r4, #16
 800eee4:	f7fe fa74 	bl	800d3d0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800eee8:	f104 0018 	add.w	r0, r4, #24
 800eeec:	2101      	movs	r1, #1
 800eeee:	f7fe fbdf 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800eef2:	2300      	movs	r3, #0
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	e7d8      	b.n	800eeac <Vector90+0xc>
 800eefa:	bf00      	nop
 800eefc:	20000f94 	.word	0x20000f94
 800ef00:	20000fb4 	.word	0x20000fb4
	...

0800ef10 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800ef10:	b538      	push	{r3, r4, r5, lr}
  rf1r = canp->can->RF1R;
 800ef12:	4c16      	ldr	r4, [pc, #88]	; (800ef6c <Vector94+0x5c>)
 800ef14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef16:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800ef18:	07aa      	lsls	r2, r5, #30
 800ef1a:	d111      	bne.n	800ef40 <Vector94+0x30>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800ef1c:	06eb      	lsls	r3, r5, #27
 800ef1e:	d50b      	bpl.n	800ef38 <Vector94+0x28>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800ef20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef22:	2110      	movs	r1, #16
 800ef24:	6119      	str	r1, [r3, #16]
 800ef26:	2320      	movs	r3, #32
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	4810      	ldr	r0, [pc, #64]	; (800ef70 <Vector94+0x60>)
 800ef2e:	f7fe fbbf 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800ef32:	2300      	movs	r3, #0
 800ef34:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800ef38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800ef3c:	f7fe bda0 	b.w	800da80 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800ef40:	695a      	ldr	r2, [r3, #20]
 800ef42:	f022 0210 	bic.w	r2, r2, #16
 800ef46:	615a      	str	r2, [r3, #20]
 800ef48:	2320      	movs	r3, #32
 800ef4a:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800ef4e:	2100      	movs	r1, #0
 800ef50:	f104 0010 	add.w	r0, r4, #16
 800ef54:	f7fe fa3c 	bl	800d3d0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800ef58:	f104 0018 	add.w	r0, r4, #24
 800ef5c:	2102      	movs	r1, #2
 800ef5e:	f7fe fba7 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800ef62:	2300      	movs	r3, #0
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	e7d8      	b.n	800ef1c <Vector94+0xc>
 800ef6a:	bf00      	nop
 800ef6c:	20000f94 	.word	0x20000f94
 800ef70:	20000fb4 	.word	0x20000fb4
	...

0800ef80 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800ef80:	b538      	push	{r3, r4, r5, lr}
  msr = canp->can->MSR;
 800ef82:	4d1b      	ldr	r5, [pc, #108]	; (800eff0 <Vector98+0x70>)
 800ef84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef86:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800ef88:	221c      	movs	r2, #28
 800ef8a:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 800ef8c:	0722      	lsls	r2, r4, #28
 800ef8e:	d41d      	bmi.n	800efcc <Vector98+0x4c>
  if (msr & CAN_MSR_ERRI) {
 800ef90:	0763      	lsls	r3, r4, #29
 800ef92:	d517      	bpl.n	800efc4 <Vector98+0x44>
    uint32_t esr = canp->can->ESR;
 800ef94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ef96:	6993      	ldr	r3, [r2, #24]
    canp->can->ESR &= ~CAN_ESR_LEC;
 800ef98:	6991      	ldr	r1, [r2, #24]
 800ef9a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800ef9e:	6191      	str	r1, [r2, #24]
    if ((esr & CAN_ESR_LEC) > 0)
 800efa0:	f013 0f70 	tst.w	r3, #112	; 0x70
    flags = (eventflags_t)(esr & 7);
 800efa4:	f003 0107 	and.w	r1, r3, #7
      flags |= CAN_FRAMING_ERROR;
 800efa8:	bf18      	it	ne
 800efaa:	f041 0108 	orrne.w	r1, r1, #8
 800efae:	2220      	movs	r2, #32
 800efb0:	f382 8811 	msr	BASEPRI, r2
 800efb4:	480f      	ldr	r0, [pc, #60]	; (800eff4 <Vector98+0x74>)
 800efb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800efba:	f7fe fb79 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800efbe:	2300      	movs	r3, #0
 800efc0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800efc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800efc8:	f7fe bd5a 	b.w	800da80 <_port_irq_epilogue>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800efcc:	681a      	ldr	r2, [r3, #0]
    canp->state = CAN_READY;
 800efce:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800efd0:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 800efd4:	2103      	movs	r1, #3
 800efd6:	f800 1b28 	strb.w	r1, [r0], #40
 800efda:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	f381 8811 	msr	BASEPRI, r1
 800efe2:	2100      	movs	r1, #0
 800efe4:	f7fe fb64 	bl	800d6b0 <chEvtBroadcastFlagsI>
 800efe8:	2300      	movs	r3, #0
 800efea:	f383 8811 	msr	BASEPRI, r3
 800efee:	e7cf      	b.n	800ef90 <Vector98+0x10>
 800eff0:	20000f94 	.word	0x20000f94
 800eff4:	20000fb4 	.word	0x20000fb4
	...

0800f000 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800f000:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800f002:	4c06      	ldr	r4, [pc, #24]	; (800f01c <can_lld_init+0x1c>)
 800f004:	4620      	mov	r0, r4
 800f006:	f7fe fd93 	bl	800db30 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800f00a:	2200      	movs	r2, #0
  CAND1.can = CAN1;
 800f00c:	4b04      	ldr	r3, [pc, #16]	; (800f020 <can_lld_init+0x20>)
 800f00e:	62e3      	str	r3, [r4, #44]	; 0x2c
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800f010:	4611      	mov	r1, r2
 800f012:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800f014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800f018:	f7ff be92 	b.w	800ed40 <can_lld_set_filters>
 800f01c:	20000f94 	.word	0x20000f94
 800f020:	40006400 	.word	0x40006400
	...

0800f030 <can_lld_start>:
 */
void can_lld_start(CANDriver *canp) {

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
 800f030:	4b18      	ldr	r3, [pc, #96]	; (800f094 <can_lld_start+0x64>)
 800f032:	4298      	cmp	r0, r3
void can_lld_start(CANDriver *canp) {
 800f034:	b510      	push	{r4, lr}
 800f036:	4604      	mov	r4, r0
  if (&CAND1 == canp) {
 800f038:	d015      	beq.n	800f066 <can_lld_start+0x36>
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 800f03a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f03c:	2201      	movs	r2, #1
 800f03e:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 800f040:	685a      	ldr	r2, [r3, #4]
 800f042:	07d1      	lsls	r1, r2, #31
 800f044:	d407      	bmi.n	800f056 <can_lld_start+0x26>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800f046:	2101      	movs	r1, #1
 800f048:	2008      	movs	r0, #8
 800f04a:	f7fd ffe9 	bl	800d020 <chSchGoSleepTimeoutS>
 800f04e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f050:	685a      	ldr	r2, [r3, #4]
 800f052:	07d2      	lsls	r2, r2, #31
 800f054:	d5f7      	bpl.n	800f046 <can_lld_start+0x16>
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 800f056:	6862      	ldr	r2, [r4, #4]
  canp->can->MCR = canp->config->mcr;

  /* Interrupt sources initialization.*/
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800f058:	490f      	ldr	r1, [pc, #60]	; (800f098 <can_lld_start+0x68>)
  canp->can->MCR = canp->config->mcr;
 800f05a:	e9d2 2000 	ldrd	r2, r0, [r2]
  canp->can->BTR = canp->config->btr;
 800f05e:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 800f060:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800f062:	6159      	str	r1, [r3, #20]
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
}
 800f064:	bd10      	pop	{r4, pc}
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800f066:	210b      	movs	r1, #11
 800f068:	2013      	movs	r0, #19
 800f06a:	f7ff fb71 	bl	800e750 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800f06e:	210b      	movs	r1, #11
 800f070:	2014      	movs	r0, #20
 800f072:	f7ff fb6d 	bl	800e750 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800f076:	210b      	movs	r1, #11
 800f078:	2015      	movs	r0, #21
 800f07a:	f7ff fb69 	bl	800e750 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800f07e:	210b      	movs	r1, #11
 800f080:	2016      	movs	r0, #22
 800f082:	f7ff fb65 	bl	800e750 <nvicEnableVector>
    rccEnableCAN1(FALSE);
 800f086:	4a05      	ldr	r2, [pc, #20]	; (800f09c <can_lld_start+0x6c>)
 800f088:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f08a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f08e:	6413      	str	r3, [r2, #64]	; 0x40
 800f090:	e7d3      	b.n	800f03a <can_lld_start+0xa>
 800f092:	bf00      	nop
 800f094:	20000f94 	.word	0x20000f94
 800f098:	00018f5b 	.word	0x00018f5b
 800f09c:	40023800 	.word	0x40023800

0800f0a0 <can_lld_is_rx_nonempty>:
 *
 * @notapi
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 800f0a0:	2901      	cmp	r1, #1
 800f0a2:	d011      	beq.n	800f0c8 <can_lld_is_rx_nonempty+0x28>
 800f0a4:	d30a      	bcc.n	800f0bc <can_lld_is_rx_nonempty+0x1c>
 800f0a6:	2902      	cmp	r1, #2
 800f0a8:	d106      	bne.n	800f0b8 <can_lld_is_rx_nonempty+0x18>
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
  case 1:
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
  case 2:
    return (canp->can->RF1R & CAN_RF1R_FMP1) != 0;
 800f0aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f0ac:	6918      	ldr	r0, [r3, #16]
 800f0ae:	f010 0003 	ands.w	r0, r0, #3
 800f0b2:	bf18      	it	ne
 800f0b4:	2001      	movne	r0, #1
 800f0b6:	4770      	bx	lr
  default:
    return FALSE;
 800f0b8:	2000      	movs	r0, #0
  }
}
 800f0ba:	4770      	bx	lr
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800f0bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f0be:	68da      	ldr	r2, [r3, #12]
 800f0c0:	0792      	lsls	r2, r2, #30
 800f0c2:	d0f3      	beq.n	800f0ac <can_lld_is_rx_nonempty+0xc>
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	4770      	bx	lr
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
 800f0c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f0ca:	68d8      	ldr	r0, [r3, #12]
 800f0cc:	f010 0003 	ands.w	r0, r0, #3
 800f0d0:	bf18      	it	ne
 800f0d2:	2001      	movne	r0, #1
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
	...

0800f0e0 <can_lld_receive>:
 *
 * @notapi
 */
void can_lld_receive(CANDriver *canp,
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
 800f0e0:	b430      	push	{r4, r5}
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
 800f0e2:	2900      	cmp	r1, #0
 800f0e4:	d12f      	bne.n	800f146 <can_lld_receive+0x66>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 800f0e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f0e8:	68d9      	ldr	r1, [r3, #12]
 800f0ea:	0788      	lsls	r0, r1, #30
 800f0ec:	d044      	beq.n	800f178 <can_lld_receive+0x98>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800f0ee:	f8d3 01b0 	ldr.w	r0, [r3, #432]	; 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800f0f2:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800f0f6:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800f0fa:	f8d3 51bc 	ldr.w	r5, [r3, #444]	; 0x1bc
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800f0fe:	60d4      	str	r4, [r2, #12]

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800f100:	2420      	movs	r4, #32
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800f102:	6115      	str	r5, [r2, #16]
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800f104:	60dc      	str	r4, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 800f106:	68dc      	ldr	r4, [r3, #12]
 800f108:	07a5      	lsls	r5, r4, #30
 800f10a:	d103      	bne.n	800f114 <can_lld_receive+0x34>
      canp->can->IER |= CAN_IER_FMPIE0;
 800f10c:	695c      	ldr	r4, [r3, #20]
 800f10e:	f044 0402 	orr.w	r4, r4, #2
 800f112:	615c      	str	r4, [r3, #20]
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 800f114:	7913      	ldrb	r3, [r2, #4]
 800f116:	0844      	lsrs	r4, r0, #1
 800f118:	f364 1304 	bfi	r3, r4, #4, #1
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 800f11c:	0884      	lsrs	r4, r0, #2
 800f11e:	f364 1345 	bfi	r3, r4, #5, #1
 800f122:	7113      	strb	r3, [r2, #4]
  if (crfp->IDE)
 800f124:	069b      	lsls	r3, r3, #26
 800f126:	d52b      	bpl.n	800f180 <can_lld_receive+0xa0>
    crfp->EID = rir >> 3;
 800f128:	6893      	ldr	r3, [r2, #8]
 800f12a:	08c0      	lsrs	r0, r0, #3
 800f12c:	f360 031c 	bfi	r3, r0, #0, #29
 800f130:	6093      	str	r3, [r2, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800f132:	7913      	ldrb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 800f134:	0a08      	lsrs	r0, r1, #8
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800f136:	f361 0303 	bfi	r3, r1, #0, #4
  crfp->TIME = (uint16_t)(rdtr >> 16);
 800f13a:	0c09      	lsrs	r1, r1, #16
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800f13c:	7113      	strb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 800f13e:	7010      	strb	r0, [r2, #0]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 800f140:	8051      	strh	r1, [r2, #2]
}
 800f142:	bc30      	pop	{r4, r5}
 800f144:	4770      	bx	lr
  switch (mailbox) {
 800f146:	2901      	cmp	r1, #1
 800f148:	d020      	beq.n	800f18c <can_lld_receive+0xac>
 800f14a:	2902      	cmp	r1, #2
 800f14c:	d1f9      	bne.n	800f142 <can_lld_receive+0x62>
 800f14e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    rir  = canp->can->sFIFOMailBox[1].RIR;
 800f150:	f8d3 01c0 	ldr.w	r0, [r3, #448]	; 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 800f154:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 800f158:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 800f15c:	f8d3 51cc 	ldr.w	r5, [r3, #460]	; 0x1cc
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 800f160:	60d4      	str	r4, [r2, #12]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 800f162:	2420      	movs	r4, #32
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 800f164:	6115      	str	r5, [r2, #16]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 800f166:	611c      	str	r4, [r3, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 800f168:	691c      	ldr	r4, [r3, #16]
 800f16a:	07a4      	lsls	r4, r4, #30
 800f16c:	d1d2      	bne.n	800f114 <can_lld_receive+0x34>
      canp->can->IER |= CAN_IER_FMPIE1;
 800f16e:	695c      	ldr	r4, [r3, #20]
 800f170:	f044 0410 	orr.w	r4, r4, #16
 800f174:	615c      	str	r4, [r3, #20]
 800f176:	e7cd      	b.n	800f114 <can_lld_receive+0x34>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 800f178:	6919      	ldr	r1, [r3, #16]
 800f17a:	0789      	lsls	r1, r1, #30
 800f17c:	d1e8      	bne.n	800f150 <can_lld_receive+0x70>
 800f17e:	e7e0      	b.n	800f142 <can_lld_receive+0x62>
    crfp->SID = rir >> 21;
 800f180:	8913      	ldrh	r3, [r2, #8]
 800f182:	0d40      	lsrs	r0, r0, #21
 800f184:	f360 030a 	bfi	r3, r0, #0, #11
 800f188:	8113      	strh	r3, [r2, #8]
 800f18a:	e7d2      	b.n	800f132 <can_lld_receive+0x52>
 800f18c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f18e:	e7ae      	b.n	800f0ee <can_lld_receive+0xe>

0800f190 <_pal_lld_init>:
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800f190:	4968      	ldr	r1, [pc, #416]	; (800f334 <_pal_lld_init+0x1a4>)
  gpiop->OTYPER  = config->otyper;
 800f192:	4a69      	ldr	r2, [pc, #420]	; (800f338 <_pal_lld_init+0x1a8>)
 800f194:	4b69      	ldr	r3, [pc, #420]	; (800f33c <_pal_lld_init+0x1ac>)
void _pal_lld_init(const PALConfig *config) {
 800f196:	b470      	push	{r4, r5, r6}
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800f198:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800f19a:	f240 16ff 	movw	r6, #511	; 0x1ff
 800f19e:	4335      	orrs	r5, r6
 800f1a0:	630d      	str	r5, [r1, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800f1a2:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 800f1a4:	4334      	orrs	r4, r6
 800f1a6:	650c      	str	r4, [r1, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800f1a8:	6841      	ldr	r1, [r0, #4]
 800f1aa:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f1ac:	6881      	ldr	r1, [r0, #8]
 800f1ae:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800f1b0:	68c1      	ldr	r1, [r0, #12]
 800f1b2:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800f1b4:	6901      	ldr	r1, [r0, #16]
 800f1b6:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800f1b8:	6941      	ldr	r1, [r0, #20]
 800f1ba:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800f1bc:	6981      	ldr	r1, [r0, #24]
 800f1be:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f1c0:	6801      	ldr	r1, [r0, #0]
 800f1c2:	6011      	str	r1, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800f1c4:	6a02      	ldr	r2, [r0, #32]
 800f1c6:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f1c8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800f1ca:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800f1cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f1ce:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800f1d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f1d2:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800f1d4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800f1d6:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800f1d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f1da:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f1dc:	69c2      	ldr	r2, [r0, #28]
 800f1de:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800f1e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f1e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800f1e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f1e8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800f1ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1ee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800f1f2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800f1f4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800f1f8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800f1fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800f1fe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f200:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800f204:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800f206:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800f20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800f210:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f212:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800f214:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800f216:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800f218:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800f21a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800f21c:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800f21e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f220:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800f222:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f224:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f226:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f228:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800f22a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f22c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800f230:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800f232:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800f236:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800f238:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800f23c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800f240:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800f244:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800f248:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800f24c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800f250:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800f254:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800f256:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800f25a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f25e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800f262:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800f266:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800f26a:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800f26e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800f272:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800f276:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800f27a:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800f27e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800f282:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800f286:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800f28a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f28e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
 800f292:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800f296:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800f29a:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800f29c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800f2a0:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800f2a2:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800f2a6:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800f2a8:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800f2ac:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800f2ae:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800f2b2:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800f2b4:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800f2b8:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800f2ba:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800f2be:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800f2c0:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800f2c4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800f2c8:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800f2cc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800f2d0:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800f2d4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800f2d8:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800f2dc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800f2e0:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800f2e4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800f2e8:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800f2ec:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800f2f0:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800f2f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800f2f8:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800f2fc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800f300:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800f304:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800f308:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800f30c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800f310:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800f314:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800f318:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800f31c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800f320:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800f324:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800f328:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800f32c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 800f330:	bc70      	pop	{r4, r5, r6}
 800f332:	4770      	bx	lr
 800f334:	40023800 	.word	0x40023800
 800f338:	40020000 	.word	0x40020000
 800f33c:	40020400 	.word	0x40020400

0800f340 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800f344:	f002 0c03 	and.w	ip, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800f348:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800f34c:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800f350:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800f354:	2400      	movs	r4, #0
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800f356:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800f35a:	f04f 0e0f 	mov.w	lr, #15
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800f35e:	f04f 0901 	mov.w	r9, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800f362:	f04f 0803 	mov.w	r8, #3
 800f366:	e030      	b.n	800f3ca <_pal_lld_setgroupmode+0x8a>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800f368:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800f36c:	ea0b 0a0a 	and.w	sl, fp, sl
 800f370:	ea4a 0303 	orr.w	r3, sl, r3
 800f374:	6203      	str	r3, [r0, #32]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800f376:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 800f378:	fa09 fa04 	lsl.w	sl, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800f37c:	ea23 030a 	bic.w	r3, r3, sl
 800f380:	433b      	orrs	r3, r7
 800f382:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 800f384:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800f386:	f8d0 a008 	ldr.w	sl, [r0, #8]
      m2 = 3 << (bit * 2);
 800f38a:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800f38e:	43db      	mvns	r3, r3
 800f390:	ea0a 0a03 	and.w	sl, sl, r3
 800f394:	ea4a 0a06 	orr.w	sl, sl, r6
 800f398:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800f39c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f3a0:	ea03 0a0a 	and.w	sl, r3, sl
 800f3a4:	ea4a 0a05 	orr.w	sl, sl, r5
 800f3a8:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800f3ac:	f8d0 a000 	ldr.w	sl, [r0]
 800f3b0:	ea03 030a 	and.w	r3, r3, sl
 800f3b4:	ea43 030c 	orr.w	r3, r3, ip
 800f3b8:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800f3ba:	0849      	lsrs	r1, r1, #1
 800f3bc:	d01b      	beq.n	800f3f6 <_pal_lld_setgroupmode+0xb6>
      return;
    otyper <<= 1;
 800f3be:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800f3c0:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800f3c2:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800f3c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    bit++;
 800f3c8:	3401      	adds	r4, #1
      altrmask = altr << ((bit & 7) * 4);
 800f3ca:	f004 0307 	and.w	r3, r4, #7
 800f3ce:	009b      	lsls	r3, r3, #2
      m4 = 15 << ((bit & 7) * 4);
 800f3d0:	fa0e fa03 	lsl.w	sl, lr, r3
    if ((mask & 1) != 0) {
 800f3d4:	f011 0f01 	tst.w	r1, #1
      altrmask = altr << ((bit & 7) * 4);
 800f3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3dc:	ea6f 0a0a 	mvn.w	sl, sl
    if ((mask & 1) != 0) {
 800f3e0:	d0eb      	beq.n	800f3ba <_pal_lld_setgroupmode+0x7a>
      if (bit < 8)
 800f3e2:	2c07      	cmp	r4, #7
 800f3e4:	d9c0      	bls.n	800f368 <_pal_lld_setgroupmode+0x28>
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800f3e6:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800f3ea:	ea0b 0a0a 	and.w	sl, fp, sl
 800f3ee:	ea4a 0303 	orr.w	r3, sl, r3
 800f3f2:	6243      	str	r3, [r0, #36]	; 0x24
 800f3f4:	e7bf      	b.n	800f376 <_pal_lld_setgroupmode+0x36>
  }
}
 800f3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fa:	bf00      	nop
 800f3fc:	0000      	movs	r0, r0
	...

0800f400 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800f400:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 800f404:	b538      	push	{r3, r4, r5, lr}
 800f406:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 800f408:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800f40a:	d112      	bne.n	800f432 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800f40c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800f40e:	680a      	ldr	r2, [r1, #0]
 800f410:	6813      	ldr	r3, [r2, #0]
 800f412:	f023 031f 	bic.w	r3, r3, #31
 800f416:	6013      	str	r3, [r2, #0]
 800f418:	6813      	ldr	r3, [r2, #0]
 800f41a:	07db      	lsls	r3, r3, #31
 800f41c:	d4fc      	bmi.n	800f418 <i2c_lld_serve_tx_end_irq+0x18>
 800f41e:	7a08      	ldrb	r0, [r1, #8]
 800f420:	684a      	ldr	r2, [r1, #4]
 800f422:	233d      	movs	r3, #61	; 0x3d
 800f424:	4083      	lsls	r3, r0
 800f426:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800f428:	6863      	ldr	r3, [r4, #4]
 800f42a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f42e:	6063      	str	r3, [r4, #4]
}
 800f430:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 800f432:	4802      	ldr	r0, [pc, #8]	; (800f43c <i2c_lld_serve_tx_end_irq+0x3c>)
 800f434:	f7fd fcec 	bl	800ce10 <chSysHalt>
 800f438:	e7e8      	b.n	800f40c <i2c_lld_serve_tx_end_irq+0xc>
 800f43a:	bf00      	nop
 800f43c:	08017b70 	.word	0x08017b70

0800f440 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800f440:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 800f448:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800f44a:	d125      	bne.n	800f498 <i2c_lld_serve_rx_end_irq+0x58>
  dmaStreamDisable(i2cp->dmarx);
 800f44c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f44e:	6813      	ldr	r3, [r2, #0]
 800f450:	6819      	ldr	r1, [r3, #0]
 800f452:	f021 011f 	bic.w	r1, r1, #31
 800f456:	6019      	str	r1, [r3, #0]
 800f458:	681c      	ldr	r4, [r3, #0]
 800f45a:	f014 0401 	ands.w	r4, r4, #1
 800f45e:	d1fb      	bne.n	800f458 <i2c_lld_serve_rx_end_irq+0x18>
 800f460:	7a11      	ldrb	r1, [r2, #8]
 800f462:	6852      	ldr	r2, [r2, #4]
 800f464:	233d      	movs	r3, #61	; 0x3d
 800f466:	408b      	lsls	r3, r1
 800f468:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 800f46a:	686b      	ldr	r3, [r5, #4]
 800f46c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f470:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 800f472:	682b      	ldr	r3, [r5, #0]
 800f474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f478:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800f47a:	682b      	ldr	r3, [r5, #0]
 800f47c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f480:	602b      	str	r3, [r5, #0]
 800f482:	2320      	movs	r3, #32
 800f484:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800f488:	f106 001c 	add.w	r0, r6, #28
 800f48c:	4621      	mov	r1, r4
 800f48e:	f7fd ff77 	bl	800d380 <chThdResumeI>
 800f492:	f384 8811 	msr	BASEPRI, r4
}
 800f496:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 800f498:	4801      	ldr	r0, [pc, #4]	; (800f4a0 <i2c_lld_serve_rx_end_irq+0x60>)
 800f49a:	f7fd fcb9 	bl	800ce10 <chSysHalt>
 800f49e:	e7d5      	b.n	800f44c <i2c_lld_serve_rx_end_irq+0xc>
 800f4a0:	08017b70 	.word	0x08017b70
	...

0800f4b0 <VectorC4>:
  I2C_TypeDef *dp = i2cp->i2c;
 800f4b0:	4839      	ldr	r0, [pc, #228]	; (800f598 <VectorC4+0xe8>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800f4b2:	4a3a      	ldr	r2, [pc, #232]	; (800f59c <VectorC4+0xec>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800f4b4:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 800f4b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800f4b8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800f4ba:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800f4bc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800f4c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d050      	beq.n	800f56a <VectorC4+0xba>
 800f4c8:	d822      	bhi.n	800f510 <VectorC4+0x60>
 800f4ca:	3a07      	subs	r2, #7
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d040      	beq.n	800f552 <VectorC4+0xa2>
 800f4d0:	3201      	adds	r2, #1
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d114      	bne.n	800f500 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f4d6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800f4d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f4da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800f4de:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f4e0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	f042 0201 	orr.w	r2, r2, #1
 800f4e8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800f4ea:	6862      	ldr	r2, [r4, #4]
 800f4ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f4f0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d803      	bhi.n	800f500 <VectorC4+0x50>
      dp->CR1 &= ~I2C_CR1_ACK;
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f4fe:	6023      	str	r3, [r4, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800f500:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800f504:	bf18      	it	ne
 800f506:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800f508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800f50c:	f7fe bab8 	b.w	800da80 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800f510:	4a23      	ldr	r2, [pc, #140]	; (800f5a0 <VectorC4+0xf0>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d012      	beq.n	800f53c <VectorC4+0x8c>
 800f516:	3202      	adds	r2, #2
 800f518:	4293      	cmp	r3, r2
 800f51a:	d1f1      	bne.n	800f500 <VectorC4+0x50>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800f51c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	685e      	ldr	r6, [r3, #4]
 800f522:	b33e      	cbz	r6, 800f574 <VectorC4+0xc4>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f524:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 800f526:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f528:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 800f52c:	f042 0201 	orr.w	r2, r2, #1
 800f530:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f532:	6023      	str	r3, [r4, #0]
}
 800f534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800f538:	f7fe baa2 	b.w	800da80 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f53c:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800f53e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800f544:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f546:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800f548:	6813      	ldr	r3, [r2, #0]
 800f54a:	f043 0301 	orr.w	r3, r3, #1
 800f54e:	6013      	str	r3, [r2, #0]
 800f550:	e7d6      	b.n	800f500 <VectorC4+0x50>
    if ((i2cp->addr >> 8) > 0) { 
 800f552:	8c03      	ldrh	r3, [r0, #32]
 800f554:	0a1a      	lsrs	r2, r3, #8
 800f556:	d00b      	beq.n	800f570 <VectorC4+0xc0>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800f558:	f003 0301 	and.w	r3, r3, #1
 800f55c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800f560:	f002 0206 	and.w	r2, r2, #6
 800f564:	4313      	orrs	r3, r2
 800f566:	6123      	str	r3, [r4, #16]
 800f568:	e7ca      	b.n	800f500 <VectorC4+0x50>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800f56a:	8c03      	ldrh	r3, [r0, #32]
 800f56c:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800f570:	6123      	str	r3, [r4, #16]
 800f572:	e7c5      	b.n	800f500 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800f574:	6863      	ldr	r3, [r4, #4]
 800f576:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f57a:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f582:	6023      	str	r3, [r4, #0]
 800f584:	2320      	movs	r3, #32
 800f586:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800f58a:	301c      	adds	r0, #28
 800f58c:	4631      	mov	r1, r6
 800f58e:	f7fd fef7 	bl	800d380 <chThdResumeI>
 800f592:	f386 8811 	msr	BASEPRI, r6
 800f596:	e7b3      	b.n	800f500 <VectorC4+0x50>
 800f598:	20000fc4 	.word	0x20000fc4
 800f59c:	00030008 	.word	0x00030008
 800f5a0:	00070082 	.word	0x00070082
	...

0800f5b0 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800f5b0:	4834      	ldr	r0, [pc, #208]	; (800f684 <VectorC8+0xd4>)
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800f5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 800f5b4:	e9d0 750c 	ldrd	r7, r5, [r0, #48]	; 0x30
  uint16_t sr = I2CD2.i2c->SR1;
 800f5b8:	696c      	ldr	r4, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800f5ba:	683a      	ldr	r2, [r7, #0]

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800f5bc:	f404 435f 	and.w	r3, r4, #57088	; 0xdf00
 800f5c0:	43db      	mvns	r3, r3
 800f5c2:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800f5c4:	6813      	ldr	r3, [r2, #0]
 800f5c6:	f023 031f 	bic.w	r3, r3, #31
 800f5ca:	6013      	str	r3, [r2, #0]
  uint16_t sr = I2CD2.i2c->SR1;
 800f5cc:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 800f5ce:	6813      	ldr	r3, [r2, #0]
 800f5d0:	07db      	lsls	r3, r3, #31
 800f5d2:	d4fc      	bmi.n	800f5ce <VectorC8+0x1e>
 800f5d4:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800f5d6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 800f5d8:	687f      	ldr	r7, [r7, #4]
 800f5da:	233d      	movs	r3, #61	; 0x3d
 800f5dc:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800f5de:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 800f5e0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800f5e2:	6813      	ldr	r3, [r2, #0]
 800f5e4:	f023 031f 	bic.w	r3, r3, #31
 800f5e8:	6013      	str	r3, [r2, #0]
 800f5ea:	6813      	ldr	r3, [r2, #0]
 800f5ec:	07df      	lsls	r7, r3, #31
 800f5ee:	d4fc      	bmi.n	800f5ea <VectorC8+0x3a>
 800f5f0:	7a37      	ldrb	r7, [r6, #8]
 800f5f2:	6872      	ldr	r2, [r6, #4]
 800f5f4:	233d      	movs	r3, #61	; 0x3d
 800f5f6:	40bb      	lsls	r3, r7
 800f5f8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800f5fa:	f411 7380 	ands.w	r3, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 800f5fe:	bf18      	it	ne
 800f600:	2301      	movne	r3, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800f602:	058a      	lsls	r2, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 800f604:	6083      	str	r3, [r0, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800f606:	bf44      	itt	mi
 800f608:	f043 0302 	orrmi.w	r3, r3, #2
 800f60c:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800f60e:	054f      	lsls	r7, r1, #21
 800f610:	d50a      	bpl.n	800f628 <VectorC8+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800f612:	686a      	ldr	r2, [r5, #4]
 800f614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f618:	606a      	str	r2, [r5, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800f61a:	682a      	ldr	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800f61c:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800f620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f624:	602a      	str	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800f626:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800f628:	050e      	lsls	r6, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800f62a:	bf44      	itt	mi
 800f62c:	f043 0308 	orrmi.w	r3, r3, #8
 800f630:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800f632:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800f634:	bf44      	itt	mi
 800f636:	f043 0320 	orrmi.w	r3, r3, #32
 800f63a:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800f63c:	04ca      	lsls	r2, r1, #19
 800f63e:	b224      	sxth	r4, r4
 800f640:	d513      	bpl.n	800f66a <VectorC8+0xba>
    i2cp->errors |= I2C_PEC_ERROR;
 800f642:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800f646:	2c00      	cmp	r4, #0
    i2cp->errors |= I2C_PEC_ERROR;
 800f648:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800f64a:	db16      	blt.n	800f67a <VectorC8+0xca>
 800f64c:	2320      	movs	r3, #32
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f06f 0101 	mvn.w	r1, #1
 800f656:	480c      	ldr	r0, [pc, #48]	; (800f688 <VectorC8+0xd8>)
 800f658:	f7fd fe92 	bl	800d380 <chThdResumeI>
 800f65c:	2300      	movs	r3, #0
 800f65e:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800f662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800f666:	f7fe ba0b 	b.w	800da80 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800f66a:	2c00      	cmp	r4, #0
 800f66c:	db05      	blt.n	800f67a <VectorC8+0xca>
  if (i2cp->errors != I2C_NO_ERROR)
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1ec      	bne.n	800f64c <VectorC8+0x9c>
}
 800f672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800f676:	f7fe ba03 	b.w	800da80 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 800f67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f67e:	6083      	str	r3, [r0, #8]
 800f680:	e7e4      	b.n	800f64c <VectorC8+0x9c>
 800f682:	bf00      	nop
 800f684:	20000fc4 	.word	0x20000fc4
 800f688:	20000fe0 	.word	0x20000fe0
 800f68c:	00000000 	.word	0x00000000

0800f690 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800f690:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800f692:	4c07      	ldr	r4, [pc, #28]	; (800f6b0 <i2c_lld_init+0x20>)
 800f694:	4620      	mov	r0, r4
 800f696:	f7fe faab 	bl	800dbf0 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800f69a:	4b06      	ldr	r3, [pc, #24]	; (800f6b4 <i2c_lld_init+0x24>)
  I2CD2.i2c    = I2C2;
 800f69c:	4a06      	ldr	r2, [pc, #24]	; (800f6b8 <i2c_lld_init+0x28>)
 800f69e:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD2.thread = NULL;
 800f6a0:	2100      	movs	r1, #0
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800f6a2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD2.thread = NULL;
 800f6a6:	61e1      	str	r1, [r4, #28]
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800f6a8:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C3_RX_DMA_STREAM);
  I2CD3.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C3_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C3 */
}
 800f6ac:	bd10      	pop	{r4, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20000fc4 	.word	0x20000fc4
 800f6b4:	08017ac8 	.word	0x08017ac8
 800f6b8:	40005800 	.word	0x40005800
 800f6bc:	00000000 	.word	0x00000000

0800f6c0 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 800f6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800f6c2:	7803      	ldrb	r3, [r0, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 800f6c4:	6b45      	ldr	r5, [r0, #52]	; 0x34
  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800f6c6:	f240 4256 	movw	r2, #1110	; 0x456
 800f6ca:	6282      	str	r2, [r0, #40]	; 0x28
  if (i2cp->state == I2C_STOP) {
 800f6cc:	2b01      	cmp	r3, #1
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800f6ce:	f240 4216 	movw	r2, #1046	; 0x416
void i2c_lld_start(I2CDriver *i2cp) {
 800f6d2:	4604      	mov	r4, r0
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800f6d4:	6242      	str	r2, [r0, #36]	; 0x24
  if (i2cp->state == I2C_STOP) {
 800f6d6:	d03c      	beq.n	800f752 <i2c_lld_start+0x92>
  I2C_TypeDef *dp = i2cp->i2c;
 800f6d8:	462b      	mov	r3, r5
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800f6da:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 800f6de:	6860      	ldr	r0, [r4, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800f6e0:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800f6e2:	f8d2 c000 	ldr.w	ip, [r2]
  int32_t clock_speed = i2cp->config->clock_speed;
 800f6e6:	6841      	ldr	r1, [r0, #4]
  if (clock_speed <= 100000) {
 800f6e8:	4e46      	ldr	r6, [pc, #280]	; (800f804 <i2c_lld_start+0x144>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800f6ea:	f105 0210 	add.w	r2, r5, #16
 800f6ee:	60ba      	str	r2, [r7, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 800f6f0:	f44f 6410 	mov.w	r4, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800f6f4:	f8cc 2008 	str.w	r2, [ip, #8]
  dp->CR1 = I2C_CR1_SWRST;
 800f6f8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
 800f6fc:	2200      	movs	r2, #0
  dp->CR1 = I2C_CR1_SWRST;
 800f6fe:	602f      	str	r7, [r5, #0]
  dp->CR1 = 0;
 800f700:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 800f702:	606c      	str	r4, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800f704:	685c      	ldr	r4, [r3, #4]
 800f706:	f64f 77c0 	movw	r7, #65472	; 0xffc0
 800f70a:	403c      	ands	r4, r7
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 800f70c:	7a07      	ldrb	r7, [r0, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800f70e:	605c      	str	r4, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800f710:	685c      	ldr	r4, [r3, #4]
  if (clock_speed <= 100000) {
 800f712:	42b1      	cmp	r1, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800f714:	f044 042a 	orr.w	r4, r4, #42	; 0x2a
 800f718:	605c      	str	r4, [r3, #4]
  if (clock_speed <= 100000) {
 800f71a:	dd49      	ble.n	800f7b0 <i2c_lld_start+0xf0>
  else if (clock_speed <= 400000) {
 800f71c:	4c3a      	ldr	r4, [pc, #232]	; (800f808 <i2c_lld_start+0x148>)
 800f71e:	42a1      	cmp	r1, r4
 800f720:	dc07      	bgt.n	800f732 <i2c_lld_start+0x72>
    if (duty == FAST_DUTY_CYCLE_2) {
 800f722:	2f02      	cmp	r7, #2
 800f724:	d056      	beq.n	800f7d4 <i2c_lld_start+0x114>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 800f726:	2f03      	cmp	r7, #3
 800f728:	d05f      	beq.n	800f7ea <i2c_lld_start+0x12a>
 800f72a:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 800f72e:	210d      	movs	r1, #13
 800f730:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 800f732:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 800f734:	7801      	ldrb	r1, [r0, #0]
  regCR1 = dp->CR1;
 800f736:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 800f738:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 800f73a:	b292      	uxth	r2, r2
  switch (opmode) {
 800f73c:	d044      	beq.n	800f7c8 <i2c_lld_start+0x108>
 800f73e:	2903      	cmp	r1, #3
 800f740:	d03f      	beq.n	800f7c2 <i2c_lld_start+0x102>
 800f742:	2901      	cmp	r1, #1
 800f744:	d030      	beq.n	800f7a8 <i2c_lld_start+0xe8>
  dp->CR1 = regCR1;
 800f746:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 800f748:	682b      	ldr	r3, [r5, #0]
 800f74a:	f043 0301 	orr.w	r3, r3, #1
 800f74e:	602b      	str	r3, [r5, #0]
}
 800f750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&I2CD2 == i2cp) {
 800f752:	4b2e      	ldr	r3, [pc, #184]	; (800f80c <i2c_lld_start+0x14c>)
 800f754:	4298      	cmp	r0, r3
 800f756:	d1bf      	bne.n	800f6d8 <i2c_lld_start+0x18>
      rccResetI2C2();
 800f758:	4e2d      	ldr	r6, [pc, #180]	; (800f810 <i2c_lld_start+0x150>)
      b = dmaStreamAllocate(i2cp->dmarx,
 800f75a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      rccResetI2C2();
 800f75c:	6a33      	ldr	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 800f75e:	4a2d      	ldr	r2, [pc, #180]	; (800f814 <i2c_lld_start+0x154>)
      rccResetI2C2();
 800f760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f764:	2100      	movs	r1, #0
 800f766:	6233      	str	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 800f768:	4623      	mov	r3, r4
      rccResetI2C2();
 800f76a:	6231      	str	r1, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 800f76c:	2105      	movs	r1, #5
 800f76e:	f7ff f9df 	bl	800eb30 <dmaStreamAllocate>
      b = dmaStreamAllocate(i2cp->dmatx,
 800f772:	4a29      	ldr	r2, [pc, #164]	; (800f818 <i2c_lld_start+0x158>)
 800f774:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f776:	4623      	mov	r3, r4
 800f778:	2105      	movs	r1, #5
 800f77a:	f7ff f9d9 	bl	800eb30 <dmaStreamAllocate>
      rccEnableI2C2(FALSE);
 800f77e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800f780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f784:	6433      	str	r3, [r6, #64]	; 0x40
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 800f786:	2105      	movs	r1, #5
 800f788:	2021      	movs	r0, #33	; 0x21
 800f78a:	f7fe ffe1 	bl	800e750 <nvicEnableVector>
      nvicEnableVector(I2C2_ER_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 800f78e:	2105      	movs	r1, #5
 800f790:	2022      	movs	r0, #34	; 0x22
 800f792:	f7fe ffdd 	bl	800e750 <nvicEnableVector>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 800f796:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f798:	4820      	ldr	r0, [pc, #128]	; (800f81c <i2c_lld_start+0x15c>)
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 800f79a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f79c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 800f79e:	4301      	orrs	r1, r0
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 800f7a0:	4302      	orrs	r2, r0
 800f7a2:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 800f7a6:	e798      	b.n	800f6da <i2c_lld_start+0x1a>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800f7a8:	f022 020a 	bic.w	r2, r2, #10
 800f7ac:	b292      	uxth	r2, r2
 800f7ae:	e7ca      	b.n	800f746 <i2c_lld_start+0x86>
    dp->TRISE = I2C_CLK_FREQ + 1;
 800f7b0:	242b      	movs	r4, #43	; 0x2b
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 800f7b2:	0049      	lsls	r1, r1, #1
 800f7b4:	4a1a      	ldr	r2, [pc, #104]	; (800f820 <i2c_lld_start+0x160>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 800f7b6:	621c      	str	r4, [r3, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 800f7b8:	fbb2 f2f1 	udiv	r2, r2, r1
 800f7bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800f7c0:	e7b7      	b.n	800f732 <i2c_lld_start+0x72>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800f7c2:	f042 020a 	orr.w	r2, r2, #10
 800f7c6:	e7be      	b.n	800f746 <i2c_lld_start+0x86>
 800f7c8:	f022 0208 	bic.w	r2, r2, #8
 800f7cc:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 800f7ce:	f042 0202 	orr.w	r2, r2, #2
 800f7d2:	e7b8      	b.n	800f746 <i2c_lld_start+0x86>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 800f7d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f7d8:	4a11      	ldr	r2, [pc, #68]	; (800f820 <i2c_lld_start+0x160>)
 800f7da:	fbb2 f2f1 	udiv	r2, r2, r1
 800f7de:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800f7e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800f7e6:	b292      	uxth	r2, r2
 800f7e8:	e7a1      	b.n	800f72e <i2c_lld_start+0x6e>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 800f7ea:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800f7ee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800f7f2:	4a0b      	ldr	r2, [pc, #44]	; (800f820 <i2c_lld_start+0x160>)
 800f7f4:	fbb2 f2f1 	udiv	r2, r2, r1
 800f7f8:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 800f7fc:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 800f800:	b292      	uxth	r2, r2
 800f802:	e794      	b.n	800f72e <i2c_lld_start+0x6e>
 800f804:	000186a0 	.word	0x000186a0
 800f808:	00061a80 	.word	0x00061a80
 800f80c:	20000fc4 	.word	0x20000fc4
 800f810:	40023800 	.word	0x40023800
 800f814:	0800f441 	.word	0x0800f441
 800f818:	0800f401 	.word	0x0800f401
 800f81c:	0e030000 	.word	0x0e030000
 800f820:	0280de80 	.word	0x0280de80
	...

0800f830 <i2c_lld_stop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {
 800f830:	b538      	push	{r3, r4, r5, lr}

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 800f832:	7803      	ldrb	r3, [r0, #0]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d02d      	beq.n	800f894 <i2c_lld_stop+0x64>
  I2C_TypeDef *dp = i2cp->i2c;
 800f838:	e9d0 130c 	ldrd	r1, r3, [r0, #48]	; 0x30
  dp->CR1 = 0;
 800f83c:	2400      	movs	r4, #0
  dmaStreamDisable(i2cp->dmatx);
 800f83e:	680a      	ldr	r2, [r1, #0]
  dp->CR1 = I2C_CR1_SWRST;
 800f840:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800f844:	601d      	str	r5, [r3, #0]
  dp->CR1 = 0;
 800f846:	601c      	str	r4, [r3, #0]
  dp->CR2 = 0;
 800f848:	605c      	str	r4, [r3, #4]
  dp->SR1 = 0;
 800f84a:	615c      	str	r4, [r3, #20]
  dmaStreamDisable(i2cp->dmatx);
 800f84c:	6813      	ldr	r3, [r2, #0]
 800f84e:	f023 031f 	bic.w	r3, r3, #31
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	6813      	ldr	r3, [r2, #0]
 800f856:	07dc      	lsls	r4, r3, #31
 800f858:	d4fc      	bmi.n	800f854 <i2c_lld_stop+0x24>
 800f85a:	7a0a      	ldrb	r2, [r1, #8]
  dmaStreamDisable(i2cp->dmarx);
 800f85c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 800f85e:	684c      	ldr	r4, [r1, #4]
 800f860:	233d      	movs	r3, #61	; 0x3d
 800f862:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800f864:	682a      	ldr	r2, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 800f866:	6023      	str	r3, [r4, #0]
  dmaStreamDisable(i2cp->dmarx);
 800f868:	6813      	ldr	r3, [r2, #0]
 800f86a:	f023 031f 	bic.w	r3, r3, #31
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	6813      	ldr	r3, [r2, #0]
 800f872:	07db      	lsls	r3, r3, #31
 800f874:	d4fc      	bmi.n	800f870 <i2c_lld_stop+0x40>
 800f876:	4604      	mov	r4, r0
 800f878:	7a28      	ldrb	r0, [r5, #8]
 800f87a:	686a      	ldr	r2, [r5, #4]
 800f87c:	233d      	movs	r3, #61	; 0x3d
 800f87e:	4083      	lsls	r3, r0
 800f880:	6013      	str	r3, [r2, #0]

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
    dmaStreamRelease(i2cp->dmatx);
 800f882:	4608      	mov	r0, r1
 800f884:	f7ff f99c 	bl	800ebc0 <dmaStreamRelease>
    dmaStreamRelease(i2cp->dmarx);
 800f888:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f88a:	f7ff f999 	bl	800ebc0 <dmaStreamRelease>
      rccDisableI2C1(FALSE);
    }
#endif

#if STM32_I2C_USE_I2C2
    if (&I2CD2 == i2cp) {
 800f88e:	4b08      	ldr	r3, [pc, #32]	; (800f8b0 <i2c_lld_stop+0x80>)
 800f890:	429c      	cmp	r4, r3
 800f892:	d000      	beq.n	800f896 <i2c_lld_stop+0x66>
      nvicDisableVector(I2C3_ER_IRQn);
      rccDisableI2C3(FALSE);
    }
#endif
  }
}
 800f894:	bd38      	pop	{r3, r4, r5, pc}
      nvicDisableVector(I2C2_EV_IRQn);
 800f896:	2021      	movs	r0, #33	; 0x21
 800f898:	f7fe ff7a 	bl	800e790 <nvicDisableVector>
      nvicDisableVector(I2C2_ER_IRQn);
 800f89c:	2022      	movs	r0, #34	; 0x22
 800f89e:	f7fe ff77 	bl	800e790 <nvicDisableVector>
      rccDisableI2C2(FALSE);
 800f8a2:	4a04      	ldr	r2, [pc, #16]	; (800f8b4 <i2c_lld_stop+0x84>)
 800f8a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f8a6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800f8aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 800f8ac:	bd38      	pop	{r3, r4, r5, pc}
 800f8ae:	bf00      	nop
 800f8b0:	20000fc4 	.word	0x20000fc4
 800f8b4:	40023800 	.word	0x40023800
	...

0800f8c0 <i2c_lld_master_receive_timeout>:

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 1 -> receive.*/
  i2cp->addr = (addr << 1) | 0x01;
 800f8c0:	0049      	lsls	r1, r1, #1
                                     systime_t timeout) {
 800f8c2:	b4f0      	push	{r4, r5, r6, r7}
  i2cp->addr = (addr << 1) | 0x01;
 800f8c4:	f041 0101 	orr.w	r1, r1, #1
  i2cp->errors = I2C_NO_ERROR;
 800f8c8:	2500      	movs	r5, #0
  i2cp->addr = (addr << 1) | 0x01;
 800f8ca:	8401      	strh	r1, [r0, #32]
  I2C_TypeDef *dp = i2cp->i2c;
 800f8cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 800f8ce:	6085      	str	r5, [r0, #8]
                                     systime_t timeout) {
 800f8d0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f8d4:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800f8d8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800f8da:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f8dc:	6837      	ldr	r7, [r6, #0]
  return ch.vtlist.vt_systime;
 800f8de:	4e14      	ldr	r6, [pc, #80]	; (800f930 <i2c_lld_master_receive_timeout+0x70>)
 800f8e0:	6039      	str	r1, [r7, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800f8e2:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800f8e4:	607b      	str	r3, [r7, #4]
 800f8e6:	462a      	mov	r2, r5
 800f8e8:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 800f8ea:	2520      	movs	r5, #32
 800f8ec:	e001      	b.n	800f8f2 <i2c_lld_master_receive_timeout+0x32>
 800f8ee:	f382 8811 	msr	BASEPRI, r2
 800f8f2:	f385 8811 	msr	BASEPRI, r5
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 800f8f6:	69a3      	ldr	r3, [r4, #24]
 800f8f8:	0799      	lsls	r1, r3, #30
 800f8fa:	d402      	bmi.n	800f902 <i2c_lld_master_receive_timeout+0x42>
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	059b      	lsls	r3, r3, #22
 800f900:	d508      	bpl.n	800f914 <i2c_lld_master_receive_timeout+0x54>
 800f902:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return (bool)((time - start) < (end - start));
 800f904:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 800f906:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f90a:	d3f0      	bcc.n	800f8ee <i2c_lld_master_receive_timeout+0x2e>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 800f90c:	f04f 30ff 	mov.w	r0, #4294967295
 800f910:	bcf0      	pop	{r4, r5, r6, r7}
 800f912:	4770      	bx	lr
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800f914:	6863      	ldr	r3, [r4, #4]
 800f916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f91a:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800f922:	6023      	str	r3, [r4, #0]
  return chThdSuspendTimeoutS(trp, timeout);
 800f924:	4661      	mov	r1, ip
 800f926:	301c      	adds	r0, #28
}
 800f928:	bcf0      	pop	{r4, r5, r6, r7}
 800f92a:	f7fd bd19 	b.w	800d360 <chThdSuspendTimeoutS>
 800f92e:	bf00      	nop
 800f930:	20000c90 	.word	0x20000c90
	...

0800f940 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 800f940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 800f944:	0049      	lsls	r1, r1, #1
  i2cp->errors = I2C_NO_ERROR;
 800f946:	2500      	movs	r5, #0
                                      systime_t timeout) {
 800f948:	4616      	mov	r6, r2
  i2cp->addr = (addr << 1);
 800f94a:	8401      	strh	r1, [r0, #32]
                                      systime_t timeout) {
 800f94c:	469e      	mov	lr, r3
  I2C_TypeDef *dp = i2cp->i2c;
 800f94e:	6b44      	ldr	r4, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 800f950:	6085      	str	r5, [r0, #8]
                                      systime_t timeout) {
 800f952:	e9dd 2807 	ldrd	r2, r8, [sp, #28]
 800f956:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800f95a:	f385 8811 	msr	BASEPRI, r5
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800f95e:	e9d0 710b 	ldrd	r7, r1, [r0, #44]	; 0x2c
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800f962:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800f964:	683f      	ldr	r7, [r7, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 800f966:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f968:	600b      	str	r3, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800f96a:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 800f96e:	60ce      	str	r6, [r1, #12]
  return ch.vtlist.vt_systime;
 800f970:	4e16      	ldr	r6, [pc, #88]	; (800f9cc <i2c_lld_master_transmit_timeout+0x8c>)
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 800f972:	f8c1 e004 	str.w	lr, [r1, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800f976:	f8c7 9000 	str.w	r9, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800f97a:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800f97c:	f8c7 8004 	str.w	r8, [r7, #4]
 800f980:	462a      	mov	r2, r5
 800f982:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 800f984:	2520      	movs	r5, #32
 800f986:	e001      	b.n	800f98c <i2c_lld_master_transmit_timeout+0x4c>
 800f988:	f382 8811 	msr	BASEPRI, r2
 800f98c:	f385 8811 	msr	BASEPRI, r5
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 800f990:	69a3      	ldr	r3, [r4, #24]
 800f992:	0799      	lsls	r1, r3, #30
 800f994:	d402      	bmi.n	800f99c <i2c_lld_master_transmit_timeout+0x5c>
 800f996:	6823      	ldr	r3, [r4, #0]
 800f998:	059b      	lsls	r3, r3, #22
 800f99a:	d508      	bpl.n	800f9ae <i2c_lld_master_transmit_timeout+0x6e>
 800f99c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  return (bool)((time - start) < (end - start));
 800f99e:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 800f9a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f9a4:	d3f0      	bcc.n	800f988 <i2c_lld_master_transmit_timeout+0x48>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800f9ae:	6863      	ldr	r3, [r4, #4]
 800f9b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f9b4:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 800f9b6:	6823      	ldr	r3, [r4, #0]
 800f9b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f9bc:	6023      	str	r3, [r4, #0]
 800f9be:	4661      	mov	r1, ip
 800f9c0:	301c      	adds	r0, #28
}
 800f9c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9c6:	f7fd bccb 	b.w	800d360 <chThdSuspendTimeoutS>
 800f9ca:	bf00      	nop
 800f9cc:	20000c90 	.word	0x20000c90

0800f9d0 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 800f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ch.rlist.r_current->p_name = name;
 800f9d4:	4bb8      	ldr	r3, [pc, #736]	; (800fcb8 <usb_lld_pump+0x2e8>)
 800f9d6:	49b9      	ldr	r1, [pc, #740]	; (800fcbc <usb_lld_pump+0x2ec>)
 800f9d8:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 800f9da:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800f9dc:	6191      	str	r1, [r2, #24]
void usb_lld_pump(void *p) {
 800f9de:	b087      	sub	sp, #28
 800f9e0:	2320      	movs	r3, #32
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800f9ec:	46a9      	mov	r9, r5
 800f9ee:	9305      	str	r3, [sp, #20]
 800f9f0:	4605      	mov	r5, r0
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 800f9f2:	782b      	ldrb	r3, [r5, #0]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d005      	beq.n	800fa04 <usb_lld_pump+0x34>
 800f9f8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800f9fa:	b963      	cbnz	r3, 800fa16 <usb_lld_pump+0x46>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 800f9fc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fa00:	06db      	lsls	r3, r3, #27
 800fa02:	d408      	bmi.n	800fa16 <usb_lld_pump+0x46>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 800fa04:	f8d9 3018 	ldr.w	r3, [r9, #24]
  return chThdSuspendS(trp);
 800fa08:	9805      	ldr	r0, [sp, #20]
 800fa0a:	f043 0310 	orr.w	r3, r3, #16
 800fa0e:	f8c9 3018 	str.w	r3, [r9, #24]
 800fa12:	f7fd fc95 	bl	800d340 <chThdSuspendS>
 800fa16:	2300      	movs	r3, #0
 800fa18:	f383 8811 	msr	BASEPRI, r3
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800fa1c:	469a      	mov	sl, r3

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800fa1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fa22:	f013 0310 	ands.w	r3, r3, #16
 800fa26:	d058      	beq.n	800fada <usb_lld_pump+0x10a>
  sts = usbp->otg->GRXSTSP;
 800fa28:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800fa2a:	6a13      	ldr	r3, [r2, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800fa2c:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 800fa30:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800fa34:	d024      	beq.n	800fa80 <usb_lld_pump+0xb0>
 800fa36:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800fa3a:	d1f0      	bne.n	800fa1e <usb_lld_pump+0x4e>
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 800fa3c:	f003 010f 	and.w	r1, r3, #15
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800fa40:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800fa44:	f3c3 130a 	ubfx	r3, r3, #4, #11
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800fa48:	68c9      	ldr	r1, [r1, #12]
  n = (n + 3) / 4;
 800fa4a:	3303      	adds	r3, #3
  while (n) {
 800fa4c:	089b      	lsrs	r3, r3, #2
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 800fa4e:	6a0c      	ldr	r4, [r1, #32]
  while (n) {
 800fa50:	d0e5      	beq.n	800fa1e <usb_lld_pump+0x4e>
 800fa52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  max = (max + 3) / 4;
 800fa56:	2102      	movs	r1, #2
    uint32_t w = *fifop;
 800fa58:	6816      	ldr	r6, [r2, #0]
 800fa5a:	1e58      	subs	r0, r3, #1
    if (max) {
 800fa5c:	b149      	cbz	r1, 800fa72 <usb_lld_pump+0xa2>
      max--;
 800fa5e:	4603      	mov	r3, r0
      *((PACKED_VAR uint32_t *)buf) = w;
 800fa60:	f844 6b04 	str.w	r6, [r4], #4
      max--;
 800fa64:	3901      	subs	r1, #1
  while (n) {
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d0d9      	beq.n	800fa1e <usb_lld_pump+0x4e>
    uint32_t w = *fifop;
 800fa6a:	6816      	ldr	r6, [r2, #0]
 800fa6c:	1e58      	subs	r0, r3, #1
    if (max) {
 800fa6e:	2900      	cmp	r1, #0
 800fa70:	d1f5      	bne.n	800fa5e <usb_lld_pump+0x8e>
  while (n) {
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d0d3      	beq.n	800fa1e <usb_lld_pump+0x4e>
 800fa76:	3b02      	subs	r3, #2
    uint32_t w = *fifop;
 800fa78:	6810      	ldr	r0, [r2, #0]
  while (n) {
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1f5      	bne.n	800fa6a <usb_lld_pump+0x9a>
 800fa7e:	e7ce      	b.n	800fa1e <usb_lld_pump+0x4e>
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 800fa80:	f003 060f 	and.w	r6, r3, #15
 800fa84:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800fa88:	f3c3 140a 	ubfx	r4, r3, #4, #11
    if (usbp->epc[ep]->out_state->rxqueued) {
 800fa8c:	68f3      	ldr	r3, [r6, #12]
 800fa8e:	699f      	ldr	r7, [r3, #24]
 800fa90:	783b      	ldrb	r3, [r7, #0]
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d13b      	bne.n	800fb10 <usb_lld_pump+0x140>
                              usbp->epc[ep]->out_state->rxcnt);
 800fa98:	e9d7 1c01 	ldrd	r1, ip, [r7, #4]
  max = (max + 3) / 4;
 800fa9c:	1cce      	adds	r6, r1, #3
  n = (n + 3) / 4;
 800fa9e:	1ce1      	adds	r1, r4, #3
  max = (max + 3) / 4;
 800faa0:	eba6 060c 	sub.w	r6, r6, ip
  while (n) {
 800faa4:	0889      	lsrs	r1, r1, #2
  max = (max + 3) / 4;
 800faa6:	ea4f 0696 	mov.w	r6, r6, lsr #2
  while (n) {
 800faaa:	d00d      	beq.n	800fac8 <usb_lld_pump+0xf8>
 800faac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fab0:	4686      	mov	lr, r0
 800fab2:	4690      	mov	r8, r2
    uint32_t w = *fifop;
 800fab4:	f8d8 2000 	ldr.w	r2, [r8]
 800fab8:	1e4b      	subs	r3, r1, #1
    if (max) {
 800faba:	b30e      	cbz	r6, 800fb00 <usb_lld_pump+0x130>
      max--;
 800fabc:	4619      	mov	r1, r3
      *((PACKED_VAR uint32_t *)buf) = w;
 800fabe:	f84e 2b04 	str.w	r2, [lr], #4
      max--;
 800fac2:	3e01      	subs	r6, #1
  while (n) {
 800fac4:	2900      	cmp	r1, #0
 800fac6:	d1f5      	bne.n	800fab4 <usb_lld_pump+0xe4>
      usbp->epc[ep]->out_state->mode.linear.rxbuf += cnt;
 800fac8:	4420      	add	r0, r4
 800faca:	60f8      	str	r0, [r7, #12]
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800facc:	f8d9 3014 	ldr.w	r3, [r9, #20]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800fad0:	4464      	add	r4, ip
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800fad2:	f013 0310 	ands.w	r3, r3, #16
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800fad6:	60bc      	str	r4, [r7, #8]
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 800fad8:	d1a6      	bne.n	800fa28 <usb_lld_pump+0x58>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 800fada:	2601      	movs	r6, #1
      if (usbp->txpending & epmask) {
 800fadc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      epmask = (1 << ep);
 800fade:	fa06 f60a 	lsl.w	r6, r6, sl
      if (usbp->txpending & epmask) {
 800fae2:	4216      	tst	r6, r2
 800fae4:	d150      	bne.n	800fb88 <usb_lld_pump+0x1b8>
 800fae6:	f10a 0301 	add.w	r3, sl, #1
 800faea:	9302      	str	r3, [sp, #8]
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800faec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800faee:	f89d a008 	ldrb.w	sl, [sp, #8]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	459a      	cmp	sl, r3
 800faf6:	d992      	bls.n	800fa1e <usb_lld_pump+0x4e>
 800faf8:	9b00      	ldr	r3, [sp, #0]
 800fafa:	f383 8811 	msr	BASEPRI, r3
 800fafe:	e778      	b.n	800f9f2 <usb_lld_pump+0x22>
  while (n) {
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d0e1      	beq.n	800fac8 <usb_lld_pump+0xf8>
 800fb04:	3902      	subs	r1, #2
    uint32_t w = *fifop;
 800fb06:	f8d8 3000 	ldr.w	r3, [r8]
  while (n) {
 800fb0a:	2900      	cmp	r1, #0
 800fb0c:	d1d2      	bne.n	800fab4 <usb_lld_pump+0xe4>
 800fb0e:	e7db      	b.n	800fac8 <usb_lld_pump+0xf8>
  while (ntogo > 0) {
 800fb10:	b33c      	cbz	r4, 800fb62 <usb_lld_pump+0x192>
 800fb12:	6941      	ldr	r1, [r0, #20]
 800fb14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb18:	46a4      	mov	ip, r4
    if (nw > 0) {
 800fb1a:	f1bc 0f03 	cmp.w	ip, #3
 800fb1e:	d907      	bls.n	800fb30 <usb_lld_pump+0x160>
      if (iqp->q_wrptr >= iqp->q_top) {
 800fb20:	6903      	ldr	r3, [r0, #16]
 800fb22:	428b      	cmp	r3, r1
 800fb24:	d804      	bhi.n	800fb30 <usb_lld_pump+0x160>
        iqp->q_wrptr = iqp->q_buffer;
 800fb26:	68c1      	ldr	r1, [r0, #12]
 800fb28:	6141      	str	r1, [r0, #20]
    if (nw > 0) {
 800fb2a:	f1bc 0f03 	cmp.w	ip, #3
 800fb2e:	d8f7      	bhi.n	800fb20 <usb_lld_pump+0x150>
    w = *fifop;
 800fb30:	f8d2 e000 	ldr.w	lr, [r2]
 800fb34:	2300      	movs	r3, #0
      *iqp->q_wrptr++ = (uint8_t)(w >> (i * 8));
 800fb36:	fa2e f703 	lsr.w	r7, lr, r3
 800fb3a:	f101 0801 	add.w	r8, r1, #1
 800fb3e:	f8c0 8014 	str.w	r8, [r0, #20]
 800fb42:	700f      	strb	r7, [r1, #0]
      if (iqp->q_wrptr >= iqp->q_top)
 800fb44:	e9d0 1704 	ldrd	r1, r7, [r0, #16]
 800fb48:	428f      	cmp	r7, r1
        iqp->q_wrptr = iqp->q_buffer;
 800fb4a:	bf24      	itt	cs
 800fb4c:	68c1      	ldrcs	r1, [r0, #12]
 800fb4e:	6141      	strcs	r1, [r0, #20]
    while ((ntogo > 0) && (i < 4)) {
 800fb50:	f1bc 0c01 	subs.w	ip, ip, #1
 800fb54:	f103 0308 	add.w	r3, r3, #8
 800fb58:	d003      	beq.n	800fb62 <usb_lld_pump+0x192>
 800fb5a:	2b20      	cmp	r3, #32
 800fb5c:	6941      	ldr	r1, [r0, #20]
 800fb5e:	d1ea      	bne.n	800fb36 <usb_lld_pump+0x166>
 800fb60:	e7db      	b.n	800fb1a <usb_lld_pump+0x14a>
 800fb62:	9b00      	ldr	r3, [sp, #0]
 800fb64:	f383 8811 	msr	BASEPRI, r3
  iqp->q_counter += n;
 800fb68:	6883      	ldr	r3, [r0, #8]
 800fb6a:	4423      	add	r3, r4
 800fb6c:	6083      	str	r3, [r0, #8]
  chThdDequeueAllI(tqp, msg);
 800fb6e:	2100      	movs	r1, #0
 800fb70:	f7fd fc2e 	bl	800d3d0 <chThdDequeueAllI>
  chSchRescheduleS();
 800fb74:	f7fd fb04 	bl	800d180 <chSchRescheduleS>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	68f3      	ldr	r3, [r6, #12]
 800fb80:	699f      	ldr	r7, [r3, #24]
 800fb82:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800fb86:	e7a1      	b.n	800facc <usb_lld_pump+0xfc>
 800fb88:	9a00      	ldr	r2, [sp, #0]
 800fb8a:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800fb8e:	f8d9 1008 	ldr.w	r1, [r9, #8]
        usbp->txpending &= ~epmask;
 800fb92:	6dea      	ldr	r2, [r5, #92]	; 0x5c
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800fb94:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 800fb98:	ea22 0206 	bic.w	r2, r2, r6
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800fb9c:	f8c9 1008 	str.w	r1, [r9, #8]
        usbp->txpending &= ~epmask;
 800fba0:	65ea      	str	r2, [r5, #92]	; 0x5c
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800fbaa:	461f      	mov	r7, r3
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800fbac:	68d9      	ldr	r1, [r3, #12]
 800fbae:	694a      	ldr	r2, [r1, #20]
 800fbb0:	e9d2 3001 	ldrd	r3, r0, [r2, #4]
 800fbb4:	4298      	cmp	r0, r3
 800fbb6:	f080 80b6 	bcs.w	800fd26 <usb_lld_pump+0x356>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800fbba:	f8d5 e050 	ldr.w	lr, [r5, #80]	; 0x50
    if (n > usbp->epc[ep]->in_maxsize)
 800fbbe:	8a0c      	ldrh	r4, [r1, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800fbc0:	ea4f 184a 	mov.w	r8, sl, lsl #5
 800fbc4:	eb0e 0c08 	add.w	ip, lr, r8
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800fbc8:	1a1b      	subs	r3, r3, r0
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800fbca:	f8dc 0918 	ldr.w	r0, [ip, #2328]	; 0x918
 800fbce:	429c      	cmp	r4, r3
 800fbd0:	bf28      	it	cs
 800fbd2:	461c      	movcs	r4, r3
 800fbd4:	b283      	uxth	r3, r0
 800fbd6:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800fbda:	f200 80b1 	bhi.w	800fd40 <usb_lld_pump+0x370>
 800fbde:	f10a 0301 	add.w	r3, sl, #1
 800fbe2:	9302      	str	r3, [sp, #8]
 800fbe4:	031b      	lsls	r3, r3, #12
 800fbe6:	e9cd 9603 	strd	r9, r6, [sp, #12]
 800fbea:	9301      	str	r3, [sp, #4]
 800fbec:	46b9      	mov	r9, r7
 800fbee:	9e01      	ldr	r6, [sp, #4]
    if (usbp->epc[ep]->in_state->txqueued) {
 800fbf0:	7813      	ldrb	r3, [r2, #0]
 800fbf2:	68d0      	ldr	r0, [r2, #12]
 800fbf4:	44b6      	add	lr, r6
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d07e      	beq.n	800fcf8 <usb_lld_pump+0x328>
  while (ntogo > 0) {
 800fbfa:	b1fc      	cbz	r4, 800fc3c <usb_lld_pump+0x26c>
 800fbfc:	f8d0 b010 	ldr.w	fp, [r0, #16]
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 800fc00:	4622      	mov	r2, r4
    if (nw > 0) {
 800fc02:	0897      	lsrs	r7, r2, #2
 800fc04:	6983      	ldr	r3, [r0, #24]
 800fc06:	d05e      	beq.n	800fcc6 <usb_lld_pump+0x2f6>
      uint32_t nw2end = (oqp->q_top - oqp->q_rdptr) / 4;
 800fc08:	ebbb 0103 	subs.w	r1, fp, r3
 800fc0c:	bf48      	it	mi
 800fc0e:	3103      	addmi	r1, #3
 800fc10:	108e      	asrs	r6, r1, #2
      ntogo -= (streak = nw <= nw2end ? nw : nw2end) * 4;
 800fc12:	42be      	cmp	r6, r7
 800fc14:	bf28      	it	cs
 800fc16:	463e      	movcs	r6, r7
 800fc18:	00b1      	lsls	r1, r6, #2
 800fc1a:	1a52      	subs	r2, r2, r1
  while (n > 0) {
 800fc1c:	2e00      	cmp	r6, #0
 800fc1e:	d07c      	beq.n	800fd1a <usb_lld_pump+0x34a>
 800fc20:	4419      	add	r1, r3
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800fc22:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc26:	f8ce 6000 	str.w	r6, [lr]
  while (n > 0) {
 800fc2a:	428b      	cmp	r3, r1
 800fc2c:	d1f9      	bne.n	800fc22 <usb_lld_pump+0x252>
      if (oqp->q_rdptr >= oqp->q_top) {
 800fc2e:	4559      	cmp	r1, fp
      oqp->q_rdptr = otg_do_push(fifop, oqp->q_rdptr, streak);
 800fc30:	6181      	str	r1, [r0, #24]
      if (oqp->q_rdptr >= oqp->q_top) {
 800fc32:	d345      	bcc.n	800fcc0 <usb_lld_pump+0x2f0>
        oqp->q_rdptr = oqp->q_buffer;
 800fc34:	68c3      	ldr	r3, [r0, #12]
 800fc36:	6183      	str	r3, [r0, #24]
  while (ntogo > 0) {
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	d1e2      	bne.n	800fc02 <usb_lld_pump+0x232>
 800fc3c:	9b00      	ldr	r3, [sp, #0]
 800fc3e:	f383 8811 	msr	BASEPRI, r3
  oqp->q_counter += n;
 800fc42:	6883      	ldr	r3, [r0, #8]
 800fc44:	4423      	add	r3, r4
 800fc46:	6083      	str	r3, [r0, #8]
  chThdDequeueAllI(tqp, msg);
 800fc48:	2100      	movs	r1, #0
 800fc4a:	f7fd fbc1 	bl	800d3d0 <chThdDequeueAllI>
  chSchRescheduleS();
 800fc4e:	f7fd fa97 	bl	800d180 <chSchRescheduleS>
 800fc52:	2300      	movs	r3, #0
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f8d9 100c 	ldr.w	r1, [r9, #12]
    usbp->epc[ep]->in_state->txcnt += n;
 800fc5c:	694a      	ldr	r2, [r1, #20]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800fc5e:	e9d2 0301 	ldrd	r0, r3, [r2, #4]
    usbp->epc[ep]->in_state->txcnt += n;
 800fc62:	441c      	add	r4, r3
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800fc64:	42a0      	cmp	r0, r4
    usbp->epc[ep]->in_state->txcnt += n;
 800fc66:	6094      	str	r4, [r2, #8]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800fc68:	d959      	bls.n	800fd1e <usb_lld_pump+0x34e>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800fc6a:	f8d5 e050 	ldr.w	lr, [r5, #80]	; 0x50
    if (n > usbp->epc[ep]->in_maxsize)
 800fc6e:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800fc72:	eb0e 0a08 	add.w	sl, lr, r8
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800fc76:	1b04      	subs	r4, r0, r4
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800fc78:	f8da 3918 	ldr.w	r3, [sl, #2328]	; 0x918
 800fc7c:	4564      	cmp	r4, ip
 800fc7e:	bf28      	it	cs
 800fc80:	4664      	movcs	r4, ip
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800fc88:	d9b1      	bls.n	800fbee <usb_lld_pump+0x21e>
 800fc8a:	e9dd 9603 	ldrd	r9, r6, [sp, #12]
      return FALSE;
 800fc8e:	2200      	movs	r2, #0
 800fc90:	9b00      	ldr	r3, [sp, #0]
 800fc92:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800fc96:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fc9a:	f043 0301 	orr.w	r3, r3, #1
 800fc9e:	f8c9 3008 	str.w	r3, [r9, #8]
        if (!done)
 800fca2:	b922      	cbnz	r2, 800fcae <usb_lld_pump+0x2de>
          otgp->DIEPEMPMSK |= epmask;
 800fca4:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 800fca8:	431e      	orrs	r6, r3
 800fcaa:	f8c9 6834 	str.w	r6, [r9, #2100]	; 0x834
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f383 8811 	msr	BASEPRI, r3
 800fcb4:	e71a      	b.n	800faec <usb_lld_pump+0x11c>
 800fcb6:	bf00      	nop
 800fcb8:	20000c90 	.word	0x20000c90
 800fcbc:	08017bc0 	.word	0x08017bc0
    if (ntogo <= 0)
 800fcc0:	2a00      	cmp	r2, #0
 800fcc2:	d0bb      	beq.n	800fc3c <usb_lld_pump+0x26c>
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	460e      	mov	r6, r1
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800fcca:	1c5f      	adds	r7, r3, #1
 800fccc:	6187      	str	r7, [r0, #24]
 800fcce:	781b      	ldrb	r3, [r3, #0]
      if (oqp->q_rdptr >= oqp->q_top)
 800fcd0:	455f      	cmp	r7, fp
      w |= (uint32_t)*oqp->q_rdptr++ << (i * 8);
 800fcd2:	fa03 f301 	lsl.w	r3, r3, r1
 800fcd6:	ea46 0603 	orr.w	r6, r6, r3
        oqp->q_rdptr = oqp->q_buffer;
 800fcda:	bf24      	itt	cs
 800fcdc:	68c3      	ldrcs	r3, [r0, #12]
 800fcde:	6183      	strcs	r3, [r0, #24]
    while ((ntogo > 0) && (i < 4)) {
 800fce0:	3a01      	subs	r2, #1
 800fce2:	d004      	beq.n	800fcee <usb_lld_pump+0x31e>
 800fce4:	2918      	cmp	r1, #24
 800fce6:	d002      	beq.n	800fcee <usb_lld_pump+0x31e>
 800fce8:	3108      	adds	r1, #8
 800fcea:	6983      	ldr	r3, [r0, #24]
 800fcec:	e7ed      	b.n	800fcca <usb_lld_pump+0x2fa>
    *fifop = w;
 800fcee:	f8ce 6000 	str.w	r6, [lr]
  while (ntogo > 0) {
 800fcf2:	2a00      	cmp	r2, #0
 800fcf4:	d185      	bne.n	800fc02 <usb_lld_pump+0x232>
 800fcf6:	e7a1      	b.n	800fc3c <usb_lld_pump+0x26c>
  otg_do_push(fifop, (uint8_t *)buf, (n + 3) / 4);
 800fcf8:	1ce3      	adds	r3, r4, #3
  while (n > 0) {
 800fcfa:	089b      	lsrs	r3, r3, #2
 800fcfc:	d00a      	beq.n	800fd14 <usb_lld_pump+0x344>
 800fcfe:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800fd02:	4603      	mov	r3, r0
    *fifop = *((PACKED_VAR uint32_t *)buf);
 800fd04:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd08:	f8ce 6000 	str.w	r6, [lr]
  while (n > 0) {
 800fd0c:	428b      	cmp	r3, r1
 800fd0e:	d1f9      	bne.n	800fd04 <usb_lld_pump+0x334>
 800fd10:	f8d9 100c 	ldr.w	r1, [r9, #12]
      usbp->epc[ep]->in_state->mode.linear.txbuf += n;
 800fd14:	4420      	add	r0, r4
 800fd16:	60d0      	str	r0, [r2, #12]
 800fd18:	e7a0      	b.n	800fc5c <usb_lld_pump+0x28c>
  while (n > 0) {
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	e787      	b.n	800fc2e <usb_lld_pump+0x25e>
 800fd1e:	e9dd 9603 	ldrd	r9, r6, [sp, #12]
      return TRUE;
 800fd22:	2201      	movs	r2, #1
 800fd24:	e7b4      	b.n	800fc90 <usb_lld_pump+0x2c0>
 800fd26:	9b00      	ldr	r3, [sp, #0]
 800fd28:	f383 8811 	msr	BASEPRI, r3
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800fd2c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fd30:	f10a 0201 	add.w	r2, sl, #1
 800fd34:	f043 0301 	orr.w	r3, r3, #1
 800fd38:	9202      	str	r2, [sp, #8]
 800fd3a:	f8c9 3008 	str.w	r3, [r9, #8]
 800fd3e:	e7b6      	b.n	800fcae <usb_lld_pump+0x2de>
 800fd40:	9b00      	ldr	r3, [sp, #0]
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fd4a:	f10a 0201 	add.w	r2, sl, #1
 800fd4e:	f043 0301 	orr.w	r3, r3, #1
 800fd52:	9202      	str	r2, [sp, #8]
 800fd54:	f8c9 3008 	str.w	r3, [r9, #8]
 800fd58:	e7a4      	b.n	800fca4 <usb_lld_pump+0x2d4>
 800fd5a:	bf00      	nop
 800fd5c:	0000      	movs	r0, r0
	...

0800fd60 <otg_disable_ep.isra.0>:
static void otg_disable_ep(USBDriver *usbp) {
 800fd60:	688b      	ldr	r3, [r1, #8]
 800fd62:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800fd64:	2400      	movs	r4, #0
 800fd66:	f103 0c01 	add.w	ip, r3, #1
      otgp->ie[i].DIEPCTL = 0;
 800fd6a:	4625      	mov	r5, r4
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800fd6c:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800fd70:	f04f 36ff 	mov.w	r6, #4294967295
 800fd74:	e014      	b.n	800fda0 <otg_disable_ep.isra.0+0x40>
      otgp->ie[i].DIEPCTL = 0;
 800fd76:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 800fd7a:	18c1      	adds	r1, r0, r3
 800fd7c:	f8c1 5910 	str.w	r5, [r1, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800fd80:	f8c1 6908 	str.w	r6, [r1, #2312]	; 0x908
    if ((otgp->oe[i].DOEPCTL & DOEPCTL_EPENA) != 0) {
 800fd84:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800fd88:	2f00      	cmp	r7, #0
 800fd8a:	db17      	blt.n	800fdbc <otg_disable_ep.isra.0+0x5c>
      otgp->oe[i].DOEPCTL = 0;
 800fd8c:	f8c2 5b00 	str.w	r5, [r2, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800fd90:	4403      	add	r3, r0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800fd92:	3401      	adds	r4, #1
 800fd94:	4564      	cmp	r4, ip
    otgp->oe[i].DOEPTSIZ = 0;
 800fd96:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800fd9a:	f8c3 6b08 	str.w	r6, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800fd9e:	d014      	beq.n	800fdca <otg_disable_ep.isra.0+0x6a>
 800fda0:	0163      	lsls	r3, r4, #5
 800fda2:	18c2      	adds	r2, r0, r3
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0) {
 800fda4:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800fda8:	2900      	cmp	r1, #0
 800fdaa:	dae4      	bge.n	800fd76 <otg_disable_ep.isra.0+0x16>
      otgp->ie[i].DIEPCTL = DIEPCTL_EPDIS;
 800fdac:	f8c2 e900 	str.w	lr, [r2, #2304]	; 0x900
      while (!(otgp->ie[i].DIEPINT & DIEPINT_EPDISD))
 800fdb0:	4617      	mov	r7, r2
 800fdb2:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800fdb6:	0789      	lsls	r1, r1, #30
 800fdb8:	d5fb      	bpl.n	800fdb2 <otg_disable_ep.isra.0+0x52>
 800fdba:	e7de      	b.n	800fd7a <otg_disable_ep.isra.0+0x1a>
      otgp->oe[i].DOEPCTL = DOEPCTL_EPDIS;
 800fdbc:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
      while (!(otgp->oe[i].DOEPINT & DOEPINT_OTEPDIS))
 800fdc0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
 800fdc4:	06d2      	lsls	r2, r2, #27
 800fdc6:	d5fb      	bpl.n	800fdc0 <otg_disable_ep.isra.0+0x60>
 800fdc8:	e7e2      	b.n	800fd90 <otg_disable_ep.isra.0+0x30>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800fdca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800fdce:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800fdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800fde0 <usb_lld_init>:
void usb_lld_init(void) {
 800fde0:	b510      	push	{r4, lr}
  usbObjectInit(&USBD1);
 800fde2:	4c06      	ldr	r4, [pc, #24]	; (800fdfc <usb_lld_init+0x1c>)
 800fde4:	4620      	mov	r0, r4
 800fde6:	f7fe f9ab 	bl	800e140 <usbObjectInit>
  USBD1.otg       = OTG_FS;
 800fdea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800fdee:	4a04      	ldr	r2, [pc, #16]	; (800fe00 <usb_lld_init+0x20>)
  USBD1.otg       = OTG_FS;
 800fdf0:	6523      	str	r3, [r4, #80]	; 0x50
  USBD1.wait      = NULL;
 800fdf2:	2300      	movs	r3, #0
  USBD1.otgparams = &fsparams;
 800fdf4:	6562      	str	r2, [r4, #84]	; 0x54
  USBD1.tr = NULL;
 800fdf6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800fdfa:	bd10      	pop	{r4, pc}
 800fdfc:	20001000 	.word	0x20001000
 800fe00:	08017bb0 	.word	0x08017bb0
	...

0800fe10 <usb_lld_start>:
  if (usbp->state == USB_STOP) {
 800fe10:	7803      	ldrb	r3, [r0, #0]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d000      	beq.n	800fe18 <usb_lld_start+0x8>
 800fe16:	4770      	bx	lr
void usb_lld_start(USBDriver *usbp) {
 800fe18:	b570      	push	{r4, r5, r6, lr}
    if (&USBD1 == usbp) {
 800fe1a:	4b31      	ldr	r3, [pc, #196]	; (800fee0 <usb_lld_start+0xd0>)
  stm32_otg_t *otgp = usbp->otg;
 800fe1c:	6d06      	ldr	r6, [r0, #80]	; 0x50
    if (&USBD1 == usbp) {
 800fe1e:	4298      	cmp	r0, r3
void usb_lld_start(USBDriver *usbp) {
 800fe20:	b082      	sub	sp, #8
 800fe22:	4605      	mov	r5, r0
    if (&USBD1 == usbp) {
 800fe24:	d03b      	beq.n	800fe9e <usb_lld_start+0x8e>
  stm32_otg_t *otgp = usbp->otg;
 800fe26:	4634      	mov	r4, r6
    usbp->txpending = 0;
 800fe28:	2300      	movs	r3, #0
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 800fe2a:	4a2e      	ldr	r2, [pc, #184]	; (800fee4 <usb_lld_start+0xd4>)
    usbp->txpending = 0;
 800fe2c:	65eb      	str	r3, [r5, #92]	; 0x5c
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800fe2e:	492e      	ldr	r1, [pc, #184]	; (800fee8 <usb_lld_start+0xd8>)
    otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE) | GUSBCFG_PHYSEL;
 800fe30:	60f2      	str	r2, [r6, #12]
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 800fe32:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
    otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800fe36:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
  chSysPolledDelayX(cycles);
 800fe3a:	2020      	movs	r0, #32
    otgp->PCGCCTL = 0;
 800fe3c:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
    otgp->GCCFG = GCCFG_NOVBUSSENS | GCCFG_VBUSASEN | GCCFG_VBUSBSEN |
 800fe40:	63b2      	str	r2, [r6, #56]	; 0x38
 800fe42:	f7fd f81d 	bl	800ce80 <chSysPolledDelayX>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 800fe46:	2301      	movs	r3, #1
 800fe48:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 800fe4a:	6923      	ldr	r3, [r4, #16]
 800fe4c:	07db      	lsls	r3, r3, #31
 800fe4e:	d4fc      	bmi.n	800fe4a <usb_lld_start+0x3a>
 800fe50:	200c      	movs	r0, #12
 800fe52:	f7fd f815 	bl	800ce80 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 800fe56:	6923      	ldr	r3, [r4, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	dafc      	bge.n	800fe56 <usb_lld_start+0x46>
    otgp->GAHBCFG = 0;
 800fe5c:	2400      	movs	r4, #0
 800fe5e:	60b4      	str	r4, [r6, #8]
    otg_disable_ep(usbp);
 800fe60:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	; 0x50
 800fe64:	f7ff ff7c 	bl	800fd60 <otg_disable_ep.isra.0>
    if (usbp->config->sof_cb == NULL)
 800fe68:	686b      	ldr	r3, [r5, #4]
    otgp->DIEPMSK  = 0;
 800fe6a:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
    if (usbp->config->sof_cb == NULL)
 800fe6e:	68db      	ldr	r3, [r3, #12]
    otgp->DOEPMSK  = 0;
 800fe70:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 800fe74:	f8c6 481c 	str.w	r4, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800fe78:	b16b      	cbz	r3, 800fe96 <usb_lld_start+0x86>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800fe7a:	f243 0308 	movw	r3, #12296	; 0x3008
 800fe7e:	61b3      	str	r3, [r6, #24]
    if (usbp->tr == NULL) {
 800fe80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    otgp->GINTSTS  = 0xFFFFFFFF;         /* Clears all pending IRQs, if any. */
 800fe82:	f04f 32ff 	mov.w	r2, #4294967295
 800fe86:	6172      	str	r2, [r6, #20]
    if (usbp->tr == NULL) {
 800fe88:	b1d3      	cbz	r3, 800fec0 <usb_lld_start+0xb0>
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800fe8a:	68b3      	ldr	r3, [r6, #8]
 800fe8c:	f043 0301 	orr.w	r3, r3, #1
 800fe90:	60b3      	str	r3, [r6, #8]
}
 800fe92:	b002      	add	sp, #8
 800fe94:	bd70      	pop	{r4, r5, r6, pc}
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM /*| GINTMSK_USBSUSPM |
 800fe96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800fe9a:	61b3      	str	r3, [r6, #24]
 800fe9c:	e7f0      	b.n	800fe80 <usb_lld_start+0x70>
      rccEnableOTG_FS(FALSE);
 800fe9e:	4b13      	ldr	r3, [pc, #76]	; (800feec <usb_lld_start+0xdc>)
 800fea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fea6:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 800fea8:	695a      	ldr	r2, [r3, #20]
 800feaa:	2000      	movs	r0, #0
 800feac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800feb0:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800feb2:	210e      	movs	r1, #14
      rccResetOTG_FS();
 800feb4:	6158      	str	r0, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 800feb6:	2043      	movs	r0, #67	; 0x43
 800feb8:	f7fe fc4a 	bl	800e750 <nvicEnableVector>
 800febc:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800febe:	e7b3      	b.n	800fe28 <usb_lld_start+0x18>
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 800fec0:	4b0b      	ldr	r3, [pc, #44]	; (800fef0 <usb_lld_start+0xe0>)
 800fec2:	9500      	str	r5, [sp, #0]
 800fec4:	2202      	movs	r2, #2
 800fec6:	f44f 7106 	mov.w	r1, #536	; 0x218
 800feca:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800fece:	f7fd f997 	bl	800d200 <chThdCreateI>
 800fed2:	6668      	str	r0, [r5, #100]	; 0x64
  return chSchReadyI(tp);
 800fed4:	f7fd f874 	bl	800cfc0 <chSchReadyI>
      chSchRescheduleS();
 800fed8:	f7fd f952 	bl	800d180 <chSchRescheduleS>
 800fedc:	e7d5      	b.n	800fe8a <usb_lld_start+0x7a>
 800fede:	bf00      	nop
 800fee0:	20001000 	.word	0x20001000
 800fee4:	40001440 	.word	0x40001440
 800fee8:	02200003 	.word	0x02200003
 800feec:	40023800 	.word	0x40023800
 800fef0:	0800f9d1 	.word	0x0800f9d1
	...

0800ff00 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 800ff00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ff02:	6d05      	ldr	r5, [r0, #80]	; 0x50
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800ff04:	2320      	movs	r3, #32
void usb_lld_reset(USBDriver *usbp) {
 800ff06:	4606      	mov	r6, r0
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800ff08:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800ff0a:	692c      	ldr	r4, [r5, #16]
 800ff0c:	f014 0420 	ands.w	r4, r4, #32
 800ff10:	d1fb      	bne.n	800ff0a <usb_lld_reset+0xa>
 800ff12:	200c      	movs	r0, #12
 800ff14:	f7fc ffb4 	bl	800ce80 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ff18:	6d77      	ldr	r7, [r6, #84]	; 0x54
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ff1e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800ff22:	1c54      	adds	r4, r2, #1
    otgp->ie[i].DIEPINT = 0xFF;
 800ff24:	21ff      	movs	r1, #255	; 0xff
 800ff26:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	429c      	cmp	r4, r3
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ff2e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800ff32:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800ff36:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800ff3a:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ff3e:	d1f2      	bne.n	800ff26 <usb_lld_reset+0x26>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ff40:	683b      	ldr	r3, [r7, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ff42:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  otgp->DAINT = 0xFFFFFFFF;
 800ff46:	f04f 31ff 	mov.w	r1, #4294967295
 800ff4a:	f8c5 1818 	str.w	r1, [r5, #2072]	; 0x818
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ff4e:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ff52:	65b3      	str	r3, [r6, #88]	; 0x58
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800ff58:	626b      	str	r3, [r5, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800ff5a:	2310      	movs	r3, #16
 800ff5c:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800ff5e:	6914      	ldr	r4, [r2, #16]
 800ff60:	f014 0410 	ands.w	r4, r4, #16
 800ff64:	d1fb      	bne.n	800ff5e <usb_lld_reset+0x5e>
 800ff66:	200c      	movs	r0, #12
 800ff68:	f7fc ff8a 	bl	800ce80 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ff6c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ff70:	4a10      	ldr	r2, [pc, #64]	; (800ffb4 <usb_lld_reset+0xb4>)
  usbp->epc[0] = &ep0config;
 800ff72:	4911      	ldr	r1, [pc, #68]	; (800ffb8 <usb_lld_reset+0xb8>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ff74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ff78:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800ff7c:	69ab      	ldr	r3, [r5, #24]
 800ff7e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ff82:	f043 0310 	orr.w	r3, r3, #16
 800ff86:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800ff88:	2309      	movs	r3, #9
 800ff8a:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800ff8e:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
  usbp->epc[0] = &ep0config;
 800ff92:	60f1      	str	r1, [r6, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800ff94:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ff98:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 800ff9c:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800ffa0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
  next = usbp->pmnext;
 800ffa4:	6db3      	ldr	r3, [r6, #88]	; 0x58
  usbp->pmnext += size;
 800ffa6:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ffaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  usbp->pmnext += size;
 800ffae:	65b2      	str	r2, [r6, #88]	; 0x58
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ffb0:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800ffb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffb4:	10008040 	.word	0x10008040
 800ffb8:	08017b80 	.word	0x08017b80
 800ffbc:	00000000 	.word	0x00000000

0800ffc0 <usb_lld_set_address>:
  stm32_otg_t *otgp = usbp->otg;
 800ffc0:	6d02      	ldr	r2, [r0, #80]	; 0x50
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800ffc2:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800ffc6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800ffca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ffce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800ffd2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 800ffd6:	4770      	bx	lr
	...

0800ffe0 <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 800ffe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffe4:	fa0f f881 	sxth.w	r8, r1
 800ffe8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 800ffec:	460d      	mov	r5, r1
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	f002 0203 	and.w	r2, r2, #3
 800fff6:	2a02      	cmp	r2, #2
 800fff8:	f000 8097 	beq.w	801012a <usb_lld_init_endpoint+0x14a>
 800fffc:	2a03      	cmp	r2, #3
 800fffe:	f000 8091 	beq.w	8010124 <usb_lld_init_endpoint+0x144>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8010002:	4c4b      	ldr	r4, [pc, #300]	; (8010130 <usb_lld_init_endpoint+0x150>)
 8010004:	494b      	ldr	r1, [pc, #300]	; (8010134 <usb_lld_init_endpoint+0x154>)
 8010006:	2a01      	cmp	r2, #1
 8010008:	bf0c      	ite	eq
 801000a:	46a1      	moveq	r9, r4
 801000c:	4689      	movne	r9, r1
  stm32_otg_t *otgp = usbp->otg;
 801000e:	6d04      	ldr	r4, [r0, #80]	; 0x50
  if (usbp->epc[ep]->out_cb != NULL) {
 8010010:	68de      	ldr	r6, [r3, #12]
  otgp->oe[ep].DOEPTSIZ = 0;
 8010012:	0169      	lsls	r1, r5, #5
 8010014:	1862      	adds	r2, r4, r1
 8010016:	f04f 0c00 	mov.w	ip, #0
 801001a:	f8c2 cb10 	str.w	ip, [r2, #2832]	; 0xb10
 801001e:	f105 0210 	add.w	r2, r5, #16
 8010022:	f04f 0c01 	mov.w	ip, #1
 8010026:	fa0c f202 	lsl.w	r2, ip, r2
  if (usbp->epc[ep]->out_cb != NULL) {
 801002a:	2e00      	cmp	r6, #0
 801002c:	d04b      	beq.n	80100c6 <usb_lld_init_endpoint+0xe6>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 801002e:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8010032:	f105 0658 	add.w	r6, r5, #88	; 0x58
 8010036:	0176      	lsls	r6, r6, #5
 8010038:	ea4c 0c09 	orr.w	ip, ip, r9
 801003c:	f844 c006 	str.w	ip, [r4, r6]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8010040:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 8010044:	4332      	orrs	r2, r6
 8010046:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 801004a:	1866      	adds	r6, r4, r1
  if (usbp->epc[ep]->in_cb != NULL) {
 801004c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  otgp->ie[ep].DIEPTSIZ = 0;
 8010050:	2200      	movs	r2, #0
 8010052:	01a9      	lsls	r1, r5, #6
 8010054:	f8c6 2910 	str.w	r2, [r6, #2320]	; 0x910
 8010058:	f041 0120 	orr.w	r1, r1, #32
 801005c:	1e6a      	subs	r2, r5, #1
  if (usbp->epc[ep]->in_cb != NULL) {
 801005e:	f1bc 0f00 	cmp.w	ip, #0
 8010062:	d03f      	beq.n	80100e4 <usb_lld_init_endpoint+0x104>
    if (usbp->epc[ep]->in_multiplier > 1)
 8010064:	f8b3 c01c 	ldrh.w	ip, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8010068:	8a1e      	ldrh	r6, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 801006a:	f1bc 0f01 	cmp.w	ip, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 801006e:	ea4f 0396 	mov.w	r3, r6, lsr #2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8010072:	f102 0240 	add.w	r2, r2, #64	; 0x40
  next = usbp->pmnext;
 8010076:	6d86      	ldr	r6, [r0, #88]	; 0x58
      fsize *= usbp->epc[ep]->in_multiplier;
 8010078:	bf88      	it	hi
 801007a:	fb0c f303 	mulhi.w	r3, ip, r3
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 801007e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  usbp->pmnext += size;
 8010082:	eb03 0c06 	add.w	ip, r3, r6
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8010086:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
  usbp->pmnext += size;
 801008a:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 801008e:	6053      	str	r3, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8010090:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8010092:	6923      	ldr	r3, [r4, #16]
 8010094:	069a      	lsls	r2, r3, #26
 8010096:	d4fc      	bmi.n	8010092 <usb_lld_init_endpoint+0xb2>
 8010098:	200c      	movs	r0, #12
 801009a:	f7fc fef1 	bl	800ce80 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	8a1a      	ldrh	r2, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 80100a2:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 80100a6:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 80100aa:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 80100ac:	ea42 0209 	orr.w	r2, r2, r9
    otgp->ie[ep].DIEPCTL = ctl |
 80100b0:	50e2      	str	r2, [r4, r3]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 80100b2:	2101      	movs	r1, #1
 80100b4:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 80100b8:	fa01 f505 	lsl.w	r5, r1, r5
 80100bc:	431d      	orrs	r5, r3
 80100be:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 80100c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c6:	eb04 1c48 	add.w	ip, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80100ca:	f8dc 6b00 	ldr.w	r6, [ip, #2816]	; 0xb00
 80100ce:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
 80100d2:	f8cc 6b00 	str.w	r6, [ip, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80100d6:	f8d4 681c 	ldr.w	r6, [r4, #2076]	; 0x81c
 80100da:	ea26 0202 	bic.w	r2, r6, r2
 80100de:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
 80100e2:	e7b2      	b.n	801004a <usb_lld_init_endpoint+0x6a>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80100e4:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 80100e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80100ec:	4a12      	ldr	r2, [pc, #72]	; (8010138 <usb_lld_init_endpoint+0x158>)
 80100ee:	605a      	str	r2, [r3, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80100f0:	6121      	str	r1, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80100f2:	6923      	ldr	r3, [r4, #16]
 80100f4:	069b      	lsls	r3, r3, #26
 80100f6:	d4fc      	bmi.n	80100f2 <usb_lld_init_endpoint+0x112>
 80100f8:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 80100fc:	200c      	movs	r0, #12
 80100fe:	f7fc febf 	bl	800ce80 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8010102:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8010106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801010a:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 801010e:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 8010112:	2101      	movs	r1, #1
 8010114:	fa01 f505 	lsl.w	r5, r1, r5
 8010118:	ea23 0505 	bic.w	r5, r3, r5
 801011c:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
}
 8010120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8010124:	f8df 9014 	ldr.w	r9, [pc, #20]	; 801013c <usb_lld_init_endpoint+0x15c>
    break;
 8010128:	e771      	b.n	801000e <usb_lld_init_endpoint+0x2e>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 801012a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8010140 <usb_lld_init_endpoint+0x160>
    break;
 801012e:	e76e      	b.n	801000e <usb_lld_init_endpoint+0x2e>
 8010130:	10048000 	.word	0x10048000
 8010134:	10008000 	.word	0x10008000
 8010138:	02000400 	.word	0x02000400
 801013c:	100c8000 	.word	0x100c8000
 8010140:	10088000 	.word	0x10088000
	...

08010150 <usb_lld_get_status_out>:
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8010150:	3158      	adds	r1, #88	; 0x58
 8010152:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010154:	0149      	lsls	r1, r1, #5
 8010156:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8010158:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 801015c:	d004      	beq.n	8010168 <usb_lld_get_status_out+0x18>
  if (ctl & DOEPCTL_STALL)
 801015e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8010162:	bf14      	ite	ne
 8010164:	2001      	movne	r0, #1
 8010166:	2002      	moveq	r0, #2
}
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	0000      	movs	r0, r0
	...

08010170 <usb_lld_get_status_in>:
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8010170:	3148      	adds	r1, #72	; 0x48
 8010172:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010174:	0149      	lsls	r1, r1, #5
 8010176:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8010178:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 801017c:	d004      	beq.n	8010188 <usb_lld_get_status_in+0x18>
  if (ctl & DIEPCTL_STALL)
 801017e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  return EP_STATUS_ACTIVE;
 8010182:	bf14      	ite	ne
 8010184:	2001      	movne	r0, #1
 8010186:	2002      	moveq	r0, #2
}
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	0000      	movs	r0, r0
	...

08010190 <usb_lld_read_setup>:
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8010190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010194:	68cb      	ldr	r3, [r1, #12]
 8010196:	6a1b      	ldr	r3, [r3, #32]
 8010198:	6819      	ldr	r1, [r3, #0]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	6053      	str	r3, [r2, #4]
 801019e:	6011      	str	r1, [r2, #0]
}
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
	...

080101b0 <usb_lld_prepare_receive>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80101b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 80101b4:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80101b6:	68de      	ldr	r6, [r3, #12]
 80101b8:	69b5      	ldr	r5, [r6, #24]
  osp->totsize = osp->rxsize;
 80101ba:	686a      	ldr	r2, [r5, #4]
 80101bc:	612a      	str	r2, [r5, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 80101be:	b929      	cbnz	r1, 80101cc <usb_lld_prepare_receive+0x1c>
 80101c0:	2a40      	cmp	r2, #64	; 0x40
 80101c2:	d903      	bls.n	80101cc <usb_lld_prepare_receive+0x1c>
      osp->rxsize = EP0_MAX_OUTSIZE;
 80101c4:	2240      	movs	r2, #64	; 0x40
 80101c6:	4c09      	ldr	r4, [pc, #36]	; (80101ec <usb_lld_prepare_receive+0x3c>)
 80101c8:	606a      	str	r2, [r5, #4]
 80101ca:	e001      	b.n	80101d0 <usb_lld_prepare_receive+0x20>
 80101cc:	f042 44c0 	orr.w	r4, r2, #1610612736	; 0x60000000
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80101d0:	8a75      	ldrh	r5, [r6, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80101d2:	6d00      	ldr	r0, [r0, #80]	; 0x50
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80101d4:	1e6b      	subs	r3, r5, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80101d6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80101da:	4413      	add	r3, r2
 80101dc:	fbb3 f3f5 	udiv	r3, r3, r5
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80101e0:	ea44 43c3 	orr.w	r3, r4, r3, lsl #19
 80101e4:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
}
 80101e8:	bc70      	pop	{r4, r5, r6}
 80101ea:	4770      	bx	lr
 80101ec:	60000040 	.word	0x60000040

080101f0 <otg_epout_handler.constprop.7>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 80101f4:	4e24      	ldr	r6, [pc, #144]	; (8010288 <otg_epout_handler.constprop.7+0x98>)
 80101f6:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80101f8:	eb07 1340 	add.w	r3, r7, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80101fc:	4605      	mov	r5, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80101fe:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8010202:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8010206:	0720      	lsls	r0, r4, #28
 8010208:	d50a      	bpl.n	8010220 <otg_epout_handler.constprop.7+0x30>
 801020a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801020e:	0719      	lsls	r1, r3, #28
 8010210:	d506      	bpl.n	8010220 <otg_epout_handler.constprop.7+0x30>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8010212:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8010216:	4629      	mov	r1, r5
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	4630      	mov	r0, r6
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8010220:	07e2      	lsls	r2, r4, #31
 8010222:	d52e      	bpl.n	8010282 <otg_epout_handler.constprop.7+0x92>
 8010224:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8010228:	07db      	lsls	r3, r3, #31
 801022a:	d52a      	bpl.n	8010282 <otg_epout_handler.constprop.7+0x92>
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 801022c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8010230:	68d9      	ldr	r1, [r3, #12]
 8010232:	698b      	ldr	r3, [r1, #24]
    if (osp->rxsize < osp->totsize) {
 8010234:	6858      	ldr	r0, [r3, #4]
 8010236:	691a      	ldr	r2, [r3, #16]
 8010238:	4290      	cmp	r0, r2
 801023a:	d30c      	bcc.n	8010256 <otg_epout_handler.constprop.7+0x66>
      _usb_isr_invoke_out_cb(usbp, ep);
 801023c:	8973      	ldrh	r3, [r6, #10]
 801023e:	68cc      	ldr	r4, [r1, #12]
 8010240:	4811      	ldr	r0, [pc, #68]	; (8010288 <otg_epout_handler.constprop.7+0x98>)
 8010242:	2201      	movs	r2, #1
 8010244:	40aa      	lsls	r2, r5
 8010246:	ea23 0302 	bic.w	r3, r3, r2
 801024a:	8173      	strh	r3, [r6, #10]
 801024c:	4629      	mov	r1, r5
 801024e:	4623      	mov	r3, r4
}
 8010250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _usb_isr_invoke_out_cb(usbp, ep);
 8010254:	4718      	bx	r3
      osp->rxsize = osp->totsize - osp->rxsize;
 8010256:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 8010258:	2400      	movs	r4, #0
 801025a:	e9c3 2401 	strd	r2, r4, [r3, #4]
      usb_lld_prepare_receive(usbp, ep);
 801025e:	4629      	mov	r1, r5
 8010260:	4809      	ldr	r0, [pc, #36]	; (8010288 <otg_epout_handler.constprop.7+0x98>)
 8010262:	f7ff ffa5 	bl	80101b0 <usb_lld_prepare_receive>
 8010266:	2320      	movs	r3, #32
 8010268:	f383 8811 	msr	BASEPRI, r3
 801026c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801026e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 8010272:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8010276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801027a:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 801027e:	f384 8811 	msr	BASEPRI, r4
}
 8010282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010286:	bf00      	nop
 8010288:	20001000 	.word	0x20001000
 801028c:	00000000 	.word	0x00000000

08010290 <usb_lld_prepare_transmit>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8010290:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8010294:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8010296:	68dc      	ldr	r4, [r3, #12]
 8010298:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801029a:	6960      	ldr	r0, [r4, #20]
  isp->totsize = isp->txsize;
 801029c:	6843      	ldr	r3, [r0, #4]
 801029e:	6103      	str	r3, [r0, #16]
  if (isp->txsize == 0) {
 80102a0:	b19b      	cbz	r3, 80102ca <usb_lld_prepare_transmit+0x3a>
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 80102a2:	b169      	cbz	r1, 80102c0 <usb_lld_prepare_transmit+0x30>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80102a4:	8a20      	ldrh	r0, [r4, #16]
}
 80102a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 80102aa:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80102ae:	1e41      	subs	r1, r0, #1
 80102b0:	4419      	add	r1, r3
 80102b2:	fbb1 f1f0 	udiv	r1, r1, r0
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 80102b6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 80102ba:	f8c2 3910 	str.w	r3, [r2, #2320]	; 0x910
}
 80102be:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 80102c0:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 80102c2:	bf84      	itt	hi
 80102c4:	2340      	movhi	r3, #64	; 0x40
 80102c6:	6043      	strhi	r3, [r0, #4]
 80102c8:	e7ec      	b.n	80102a4 <usb_lld_prepare_transmit+0x14>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80102ca:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80102ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80102d2:	f8c2 3910 	str.w	r3, [r2, #2320]	; 0x910
}
 80102d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	0000      	movs	r0, r0
	...

080102e0 <otg_epin_handler.constprop.8>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 80102e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 80102e4:	4e30      	ldr	r6, [pc, #192]	; (80103a8 <otg_epin_handler.constprop.8+0xc8>)
 80102e6:	6d35      	ldr	r5, [r6, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 80102e8:	eb05 1340 	add.w	r3, r5, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 80102ec:	4607      	mov	r7, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 80102ee:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 80102f2:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 80102f6:	07e1      	lsls	r1, r4, #31
 80102f8:	d516      	bpl.n	8010328 <otg_epin_handler.constprop.8+0x48>
 80102fa:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 80102fe:	07da      	lsls	r2, r3, #31
 8010300:	d512      	bpl.n	8010328 <otg_epin_handler.constprop.8+0x48>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8010302:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 8010306:	68d9      	ldr	r1, [r3, #12]
 8010308:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 801030a:	6858      	ldr	r0, [r3, #4]
 801030c:	691a      	ldr	r2, [r3, #16]
 801030e:	4290      	cmp	r0, r2
 8010310:	d32a      	bcc.n	8010368 <otg_epin_handler.constprop.8+0x88>
      _usb_isr_invoke_in_cb(usbp, ep);
 8010312:	8933      	ldrh	r3, [r6, #8]
 8010314:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8010318:	2201      	movs	r2, #1
 801031a:	40ba      	lsls	r2, r7
 801031c:	ea23 0302 	bic.w	r3, r3, r2
 8010320:	8133      	strh	r3, [r6, #8]
 8010322:	4639      	mov	r1, r7
 8010324:	4630      	mov	r0, r6
 8010326:	47c0      	blx	r8
  if ((epint & DIEPINT_TXFE) &&
 8010328:	0623      	lsls	r3, r4, #24
 801032a:	d506      	bpl.n	801033a <otg_epin_handler.constprop.8+0x5a>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 801032c:	2301      	movs	r3, #1
 801032e:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 8010332:	fa03 f707 	lsl.w	r7, r3, r7
  if ((epint & DIEPINT_TXFE) &&
 8010336:	4217      	tst	r7, r2
 8010338:	d101      	bne.n	801033e <otg_epin_handler.constprop.8+0x5e>
}
 801033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033e:	2320      	movs	r3, #32
 8010340:	f383 8811 	msr	BASEPRI, r3
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8010344:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 8010348:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  chThdResumeI(trp, msg);
 801034a:	4818      	ldr	r0, [pc, #96]	; (80103ac <otg_epin_handler.constprop.8+0xcc>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 801034c:	ea22 0207 	bic.w	r2, r2, r7
 8010350:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 8010354:	431f      	orrs	r7, r3
 8010356:	2100      	movs	r1, #0
 8010358:	65f7      	str	r7, [r6, #92]	; 0x5c
 801035a:	f7fd f811 	bl	800d380 <chThdResumeI>
 801035e:	2300      	movs	r3, #0
 8010360:	f383 8811 	msr	BASEPRI, r3
}
 8010364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isp->txsize = isp->totsize - isp->txsize;
 8010368:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 801036a:	f04f 0800 	mov.w	r8, #0
 801036e:	e9c3 2801 	strd	r2, r8, [r3, #4]
      usb_lld_prepare_transmit(usbp, ep);
 8010372:	4639      	mov	r1, r7
 8010374:	4630      	mov	r0, r6
 8010376:	f7ff ff8b 	bl	8010290 <usb_lld_prepare_transmit>
 801037a:	2320      	movs	r3, #32
 801037c:	f383 8811 	msr	BASEPRI, r3
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8010380:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8010382:	eb02 1047 	add.w	r0, r2, r7, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8010386:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8010388:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 801038c:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8010390:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8010394:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 8010398:	40bb      	lsls	r3, r7
 801039a:	430b      	orrs	r3, r1
 801039c:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
 80103a0:	f388 8811 	msr	BASEPRI, r8
 80103a4:	e7c0      	b.n	8010328 <otg_epin_handler.constprop.8+0x48>
 80103a6:	bf00      	nop
 80103a8:	20001000 	.word	0x20001000
 80103ac:	20001060 	.word	0x20001060

080103b0 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 80103b0:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;
 80103b2:	4d3a      	ldr	r5, [pc, #232]	; (801049c <Vector14C+0xec>)
 80103b4:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  sts  = otgp->GINTSTS;
 80103b6:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 80103b8:	69b3      	ldr	r3, [r6, #24]
 80103ba:	401c      	ands	r4, r3
  if (sts & GINTSTS_USBRST) {
 80103bc:	04e1      	lsls	r1, r4, #19
  otgp->GINTSTS = sts;
 80103be:	6174      	str	r4, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 80103c0:	d426      	bmi.n	8010410 <Vector14C+0x60>
  if (sts & GINTSTS_ENUMDNE) {
 80103c2:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 80103c4:	bf48      	it	mi
 80103c6:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  if (sts & GINTSTS_SOF) {
 80103ca:	0723      	lsls	r3, r4, #28
 80103cc:	d504      	bpl.n	80103d8 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 80103ce:	686b      	ldr	r3, [r5, #4]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	b10b      	cbz	r3, 80103d8 <Vector14C+0x28>
 80103d4:	4831      	ldr	r0, [pc, #196]	; (801049c <Vector14C+0xec>)
 80103d6:	4798      	blx	r3
  if (sts & GINTSTS_RXFLVL) {
 80103d8:	06e5      	lsls	r5, r4, #27
 80103da:	d424      	bmi.n	8010426 <Vector14C+0x76>
  if (sts & GINTSTS_IEPINT) {
 80103dc:	0360      	lsls	r0, r4, #13
  src = otgp->DAINT;
 80103de:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 80103e2:	d507      	bpl.n	80103f4 <Vector14C+0x44>
    if (src & (1 << 0))
 80103e4:	07e9      	lsls	r1, r5, #31
 80103e6:	d44f      	bmi.n	8010488 <Vector14C+0xd8>
    if (src & (1 << 1))
 80103e8:	07aa      	lsls	r2, r5, #30
 80103ea:	d442      	bmi.n	8010472 <Vector14C+0xc2>
    if (src & (1 << 2))
 80103ec:	076b      	lsls	r3, r5, #29
 80103ee:	d445      	bmi.n	801047c <Vector14C+0xcc>
    if (src & (1 << 3))
 80103f0:	072e      	lsls	r6, r5, #28
 80103f2:	d44f      	bmi.n	8010494 <Vector14C+0xe4>
  if (sts & GINTSTS_OEPINT) {
 80103f4:	0324      	lsls	r4, r4, #12
 80103f6:	d507      	bpl.n	8010408 <Vector14C+0x58>
    if (src & (1 << 16))
 80103f8:	03e8      	lsls	r0, r5, #15
 80103fa:	d42a      	bmi.n	8010452 <Vector14C+0xa2>
    if (src & (1 << 17))
 80103fc:	03a9      	lsls	r1, r5, #14
 80103fe:	d42d      	bmi.n	801045c <Vector14C+0xac>
    if (src & (1 << 18))
 8010400:	036a      	lsls	r2, r5, #13
 8010402:	d430      	bmi.n	8010466 <Vector14C+0xb6>
    if (src & (1 << 19))
 8010404:	032b      	lsls	r3, r5, #12
 8010406:	d41d      	bmi.n	8010444 <Vector14C+0x94>
}
 8010408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 801040c:	f7fd bb38 	b.w	800da80 <_port_irq_epilogue>
    _usb_reset(usbp);
 8010410:	4628      	mov	r0, r5
 8010412:	f7fd ff25 	bl	800e260 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8010416:	686b      	ldr	r3, [r5, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0d1      	beq.n	80103c2 <Vector14C+0x12>
 801041e:	2100      	movs	r1, #0
 8010420:	4628      	mov	r0, r5
 8010422:	4798      	blx	r3
 8010424:	e7cd      	b.n	80103c2 <Vector14C+0x12>
 8010426:	2320      	movs	r3, #32
 8010428:	f383 8811 	msr	BASEPRI, r3
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 801042c:	69b3      	ldr	r3, [r6, #24]
 801042e:	481c      	ldr	r0, [pc, #112]	; (80104a0 <Vector14C+0xf0>)
 8010430:	f023 0310 	bic.w	r3, r3, #16
 8010434:	61b3      	str	r3, [r6, #24]
 8010436:	2100      	movs	r1, #0
 8010438:	f7fc ffa2 	bl	800d380 <chThdResumeI>
 801043c:	2300      	movs	r3, #0
 801043e:	f383 8811 	msr	BASEPRI, r3
 8010442:	e7cb      	b.n	80103dc <Vector14C+0x2c>
      otg_epout_handler(usbp, 3);
 8010444:	2003      	movs	r0, #3
 8010446:	f7ff fed3 	bl	80101f0 <otg_epout_handler.constprop.7>
}
 801044a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 801044e:	f7fd bb17 	b.w	800da80 <_port_irq_epilogue>
      otg_epout_handler(usbp, 0);
 8010452:	2000      	movs	r0, #0
 8010454:	f7ff fecc 	bl	80101f0 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 8010458:	03a9      	lsls	r1, r5, #14
 801045a:	d5d1      	bpl.n	8010400 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 801045c:	2001      	movs	r0, #1
 801045e:	f7ff fec7 	bl	80101f0 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 8010462:	036a      	lsls	r2, r5, #13
 8010464:	d5ce      	bpl.n	8010404 <Vector14C+0x54>
      otg_epout_handler(usbp, 2);
 8010466:	2002      	movs	r0, #2
 8010468:	f7ff fec2 	bl	80101f0 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 801046c:	032b      	lsls	r3, r5, #12
 801046e:	d5cb      	bpl.n	8010408 <Vector14C+0x58>
 8010470:	e7e8      	b.n	8010444 <Vector14C+0x94>
      otg_epin_handler(usbp, 1);
 8010472:	2001      	movs	r0, #1
 8010474:	f7ff ff34 	bl	80102e0 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 8010478:	076b      	lsls	r3, r5, #29
 801047a:	d5b9      	bpl.n	80103f0 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 801047c:	2002      	movs	r0, #2
 801047e:	f7ff ff2f 	bl	80102e0 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 8010482:	072e      	lsls	r6, r5, #28
 8010484:	d5b6      	bpl.n	80103f4 <Vector14C+0x44>
 8010486:	e005      	b.n	8010494 <Vector14C+0xe4>
      otg_epin_handler(usbp, 0);
 8010488:	2000      	movs	r0, #0
 801048a:	f7ff ff29 	bl	80102e0 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 801048e:	07aa      	lsls	r2, r5, #30
 8010490:	d5ac      	bpl.n	80103ec <Vector14C+0x3c>
 8010492:	e7ee      	b.n	8010472 <Vector14C+0xc2>
      otg_epin_handler(usbp, 3);
 8010494:	2003      	movs	r0, #3
 8010496:	f7ff ff23 	bl	80102e0 <otg_epin_handler.constprop.8>
 801049a:	e7ab      	b.n	80103f4 <Vector14C+0x44>
 801049c:	20001000 	.word	0x20001000
 80104a0:	20001060 	.word	0x20001060
	...

080104b0 <usb_lld_start_out>:
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 80104b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80104b2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 80104b6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 80104ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80104be:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 80104c2:	4770      	bx	lr
	...

080104d0 <usb_lld_start_in>:
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80104d0:	6d02      	ldr	r2, [r0, #80]	; 0x50
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 80104d2:	b410      	push	{r4}
 80104d4:	eb02 1441 	add.w	r4, r2, r1, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80104d8:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80104da:	f8d4 0900 	ldr.w	r0, [r4, #2304]	; 0x900
 80104de:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 80104e2:	f8c4 0900 	str.w	r0, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80104e6:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
}
 80104ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80104ee:	fa03 f101 	lsl.w	r1, r3, r1
 80104f2:	4301      	orrs	r1, r0
 80104f4:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	0000      	movs	r0, r0
	...

08010500 <usb_lld_stall_out>:
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8010500:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010502:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8010506:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 801050a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801050e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8010512:	4770      	bx	lr
	...

08010520 <usb_lld_stall_in>:
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8010520:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010522:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8010526:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 801052a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801052e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 8010532:	4770      	bx	lr
	...

08010540 <usb_lld_clear_out>:
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8010540:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010542:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8010546:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 801054a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801054e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8010552:	4770      	bx	lr
	...

08010560 <usb_lld_clear_in>:
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8010560:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010562:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8010566:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 801056a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801056e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 8010572:	4770      	bx	lr
	...

08010580 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8010580:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8010582:	4c0a      	ldr	r4, [pc, #40]	; (80105ac <spi_lld_init+0x2c>)
  dummytx = 0xFFFF;
 8010584:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <spi_lld_init+0x30>)
 8010586:	f64f 72ff 	movw	r2, #65535	; 0xffff
  spiObjectInit(&SPID1);
 801058a:	4620      	mov	r0, r4
  dummytx = 0xFFFF;
 801058c:	801a      	strh	r2, [r3, #0]
  spiObjectInit(&SPID1);
 801058e:	f7fd fd9f 	bl	800e0d0 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8010592:	4b08      	ldr	r3, [pc, #32]	; (80105b4 <spi_lld_init+0x34>)
  SPID1.spi       = SPI1;
 8010594:	4808      	ldr	r0, [pc, #32]	; (80105b8 <spi_lld_init+0x38>)
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8010596:	4909      	ldr	r1, [pc, #36]	; (80105bc <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8010598:	4a09      	ldr	r2, [pc, #36]	; (80105c0 <spi_lld_init+0x40>)
  SPID1.spi       = SPI1;
 801059a:	61e0      	str	r0, [r4, #28]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 801059c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80105a0:	e9c4 3008 	strd	r3, r0, [r4, #32]
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80105a4:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 80105a8:	bd10      	pop	{r4, pc}
 80105aa:	bf00      	nop
 80105ac:	2000129c 	.word	0x2000129c
 80105b0:	200012cc 	.word	0x200012cc
 80105b4:	08017b10 	.word	0x08017b10
 80105b8:	40013000 	.word	0x40013000
 80105bc:	06010016 	.word	0x06010016
 80105c0:	06010046 	.word	0x06010046
	...

080105d0 <VectorB4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr  = icup->tim->SR;
 80105d2:	4d26      	ldr	r5, [pc, #152]	; (801066c <VectorB4+0x9c>)
 80105d4:	68eb      	ldr	r3, [r5, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80105d6:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 80105d8:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80105da:	68da      	ldr	r2, [r3, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80105dc:	7d08      	ldrb	r0, [r1, #20]
 80105de:	4014      	ands	r4, r2
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80105e0:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80105e2:	43d2      	mvns	r2, r2
 80105e4:	611a      	str	r2, [r3, #16]
 80105e6:	f004 0602 	and.w	r6, r4, #2
  if (icup->config->channel == ICU_CHANNEL_1) {
 80105ea:	b988      	cbnz	r0, 8010610 <VectorB4+0x40>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80105ec:	0762      	lsls	r2, r4, #29
 80105ee:	d530      	bpl.n	8010652 <VectorB4+0x82>
      _icu_isr_invoke_width_cb(icup);
 80105f0:	782b      	ldrb	r3, [r5, #0]
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d029      	beq.n	801064a <VectorB4+0x7a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80105f6:	b99e      	cbnz	r6, 8010620 <VectorB4+0x50>
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80105f8:	07e3      	lsls	r3, r4, #31
 80105fa:	d505      	bpl.n	8010608 <VectorB4+0x38>
    _icu_isr_invoke_overflow_cb(icup);
 80105fc:	686b      	ldr	r3, [r5, #4]
 80105fe:	481b      	ldr	r0, [pc, #108]	; (801066c <VectorB4+0x9c>)
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	4798      	blx	r3
 8010604:	2303      	movs	r3, #3
 8010606:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 8010608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 801060c:	f7fd ba38 	b.w	800da80 <_port_irq_epilogue>
 8010610:	f004 0704 	and.w	r7, r4, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8010614:	b15e      	cbz	r6, 801062e <VectorB4+0x5e>
      _icu_isr_invoke_width_cb(icup);
 8010616:	782b      	ldrb	r3, [r5, #0]
 8010618:	2b04      	cmp	r3, #4
 801061a:	d004      	beq.n	8010626 <VectorB4+0x56>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 801061c:	2f00      	cmp	r7, #0
 801061e:	d0eb      	beq.n	80105f8 <VectorB4+0x28>
      _icu_isr_invoke_period_cb(icup);
 8010620:	2304      	movs	r3, #4
 8010622:	702b      	strb	r3, [r5, #0]
 8010624:	e7e8      	b.n	80105f8 <VectorB4+0x28>
      _icu_isr_invoke_width_cb(icup);
 8010626:	688b      	ldr	r3, [r1, #8]
 8010628:	b1e3      	cbz	r3, 8010664 <VectorB4+0x94>
 801062a:	4628      	mov	r0, r5
 801062c:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 801062e:	2f00      	cmp	r7, #0
 8010630:	d0e2      	beq.n	80105f8 <VectorB4+0x28>
      _icu_isr_invoke_period_cb(icup);
 8010632:	782b      	ldrb	r3, [r5, #0]
 8010634:	2b04      	cmp	r3, #4
 8010636:	d1f3      	bne.n	8010620 <VectorB4+0x50>
 8010638:	6869      	ldr	r1, [r5, #4]
 801063a:	68cb      	ldr	r3, [r1, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0ef      	beq.n	8010620 <VectorB4+0x50>
 8010640:	480a      	ldr	r0, [pc, #40]	; (801066c <VectorB4+0x9c>)
 8010642:	4798      	blx	r3
 8010644:	2304      	movs	r3, #4
 8010646:	702b      	strb	r3, [r5, #0]
 8010648:	e7d6      	b.n	80105f8 <VectorB4+0x28>
      _icu_isr_invoke_width_cb(icup);
 801064a:	688b      	ldr	r3, [r1, #8]
 801064c:	b13b      	cbz	r3, 801065e <VectorB4+0x8e>
 801064e:	4628      	mov	r0, r5
 8010650:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8010652:	2e00      	cmp	r6, #0
 8010654:	d0d0      	beq.n	80105f8 <VectorB4+0x28>
      _icu_isr_invoke_period_cb(icup);
 8010656:	782b      	ldrb	r3, [r5, #0]
 8010658:	2b04      	cmp	r3, #4
 801065a:	d1e1      	bne.n	8010620 <VectorB4+0x50>
 801065c:	e7ec      	b.n	8010638 <VectorB4+0x68>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 801065e:	2e00      	cmp	r6, #0
 8010660:	d0ca      	beq.n	80105f8 <VectorB4+0x28>
 8010662:	e7ea      	b.n	801063a <VectorB4+0x6a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8010664:	2f00      	cmp	r7, #0
 8010666:	d0c7      	beq.n	80105f8 <VectorB4+0x28>
 8010668:	e7e7      	b.n	801063a <VectorB4+0x6a>
 801066a:	bf00      	nop
 801066c:	200012d0 	.word	0x200012d0

08010670 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 8010670:	b510      	push	{r4, lr}
  ICUD2.tim = STM32_TIM2;
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
 8010672:	4c03      	ldr	r4, [pc, #12]	; (8010680 <icu_lld_init+0x10>)
 8010674:	4620      	mov	r0, r4
 8010676:	f7fd fb33 	bl	800dce0 <icuObjectInit>
  ICUD3.tim = STM32_TIM3;
 801067a:	4b02      	ldr	r3, [pc, #8]	; (8010684 <icu_lld_init+0x14>)
 801067c:	60e3      	str	r3, [r4, #12]
#if STM32_ICU_USE_TIM9
  /* Driver initialization.*/
  icuObjectInit(&ICUD9);
  ICUD9.tim = STM32_TIM9;
#endif
}
 801067e:	bd10      	pop	{r4, pc}
 8010680:	200012d0 	.word	0x200012d0
 8010684:	40000400 	.word	0x40000400
	...

08010690 <icu_lld_start>:

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 8010690:	7803      	ldrb	r3, [r0, #0]
 8010692:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
 8010694:	b570      	push	{r4, r5, r6, lr}
 8010696:	4604      	mov	r4, r0
  if (icup->state == ICU_STOP) {
 8010698:	d03a      	beq.n	8010710 <icu_lld_start+0x80>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 801069a:	68c3      	ldr	r3, [r0, #12]
 801069c:	2200      	movs	r2, #0
 801069e:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80106a0:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80106a2:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 80106a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 80106a6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80106aa:	6988      	ldr	r0, [r1, #24]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 80106ac:	7d0d      	ldrb	r5, [r1, #20]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80106ae:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 80106b2:	2600      	movs	r6, #0
 80106b4:	611e      	str	r6, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80106b6:	60d8      	str	r0, [r3, #12]
  psc = (icup->clock / icup->config->frequency) - 1;
 80106b8:	6848      	ldr	r0, [r1, #4]
 80106ba:	fbb2 f2f0 	udiv	r2, r2, r0
  icup->tim->ARR  = 0xFFFF;
 80106be:	f64f 70ff 	movw	r0, #65535	; 0xffff
  psc = (icup->clock / icup->config->frequency) - 1;
 80106c2:	3a01      	subs	r2, #1
  icup->tim->PSC  = psc;
 80106c4:	629a      	str	r2, [r3, #40]	; 0x28
 80106c6:	780a      	ldrb	r2, [r1, #0]
  icup->tim->ARR  = 0xFFFF;
 80106c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 80106ca:	b96d      	cbnz	r5, 80106e8 <icu_lld_start+0x58>
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80106cc:	f240 2001 	movw	r0, #513	; 0x201

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80106d0:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80106d2:	6198      	str	r0, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80106d4:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80106d6:	b1c2      	cbz	r2, 801070a <icu_lld_start+0x7a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 80106d8:	2213      	movs	r2, #19
 80106da:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 80106dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 80106e0:	3334      	adds	r3, #52	; 0x34
 80106e2:	e9c4 2304 	strd	r2, r3, [r4, #16]
    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
    icup->pccrp = &icup->tim->CCR[1];
  }
}
 80106e6:	bd70      	pop	{r4, r5, r6, pc}
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80106e8:	f44f 7081 	mov.w	r0, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80106ec:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80106ee:	6198      	str	r0, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80106f0:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80106f2:	b13a      	cbz	r2, 8010704 <icu_lld_start+0x74>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80106f4:	2231      	movs	r2, #49	; 0x31
 80106f6:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 80106f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 80106fc:	3338      	adds	r3, #56	; 0x38
 80106fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
 8010702:	bd70      	pop	{r4, r5, r6, pc}
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8010704:	2213      	movs	r2, #19
 8010706:	621a      	str	r2, [r3, #32]
 8010708:	e7f6      	b.n	80106f8 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 801070a:	2231      	movs	r2, #49	; 0x31
 801070c:	621a      	str	r2, [r3, #32]
 801070e:	e7e5      	b.n	80106dc <icu_lld_start+0x4c>
    if (&ICUD3 == icup) {
 8010710:	4b0b      	ldr	r3, [pc, #44]	; (8010740 <icu_lld_start+0xb0>)
 8010712:	4298      	cmp	r0, r3
 8010714:	d001      	beq.n	801071a <icu_lld_start+0x8a>
 8010716:	68e3      	ldr	r3, [r4, #12]
 8010718:	e7c5      	b.n	80106a6 <icu_lld_start+0x16>
      rccEnableTIM3(FALSE);
 801071a:	4b0a      	ldr	r3, [pc, #40]	; (8010744 <icu_lld_start+0xb4>)
 801071c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801071e:	f042 0202 	orr.w	r2, r2, #2
 8010722:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM3();
 8010724:	6a1a      	ldr	r2, [r3, #32]
 8010726:	2000      	movs	r0, #0
 8010728:	f042 0202 	orr.w	r2, r2, #2
 801072c:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
 801072e:	2107      	movs	r1, #7
      rccResetTIM3();
 8010730:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
 8010732:	201d      	movs	r0, #29
 8010734:	f7fe f80c 	bl	800e750 <nvicEnableVector>
      icup->clock = STM32_TIMCLK1;
 8010738:	4b03      	ldr	r3, [pc, #12]	; (8010748 <icu_lld_start+0xb8>)
 801073a:	60a3      	str	r3, [r4, #8]
 801073c:	e7eb      	b.n	8010716 <icu_lld_start+0x86>
 801073e:	bf00      	nop
 8010740:	200012d0 	.word	0x200012d0
 8010744:	40023800 	.word	0x40023800
 8010748:	0501bd00 	.word	0x0501bd00
 801074c:	00000000 	.word	0x00000000

08010750 <icu_lld_start_capture>:
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8010750:	68c3      	ldr	r3, [r0, #12]
 8010752:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 8010754:	2000      	movs	r0, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8010756:	f042 0201 	orr.w	r2, r2, #1

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 801075a:	2105      	movs	r1, #5
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 801075c:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 801075e:	6118      	str	r0, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8010760:	6019      	str	r1, [r3, #0]
}
 8010762:	4770      	bx	lr
	...

08010770 <icu_lld_enable_notifications>:
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 8010770:	68c2      	ldr	r2, [r0, #12]
 8010772:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8010774:	b410      	push	{r4}

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8010776:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 801077a:	d10c      	bne.n	8010796 <icu_lld_enable_notifications+0x26>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 801077c:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 801077e:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8010780:	7d0c      	ldrb	r4, [r1, #20]
 8010782:	6888      	ldr	r0, [r1, #8]
 8010784:	b954      	cbnz	r4, 801079c <icu_lld_enable_notifications+0x2c>
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 8010786:	b170      	cbz	r0, 80107a6 <icu_lld_enable_notifications+0x36>
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC1IE;
 8010788:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 801078c:	6909      	ldr	r1, [r1, #16]
 801078e:	b109      	cbz	r1, 8010794 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8010790:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 8010794:	60d3      	str	r3, [r2, #12]
  }
}
 8010796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801079a:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 801079c:	2800      	cmp	r0, #0
 801079e:	d1f3      	bne.n	8010788 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC2IE;
 80107a0:	f043 0304 	orr.w	r3, r3, #4
 80107a4:	e7f2      	b.n	801078c <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC1IE;
 80107a6:	f043 0302 	orr.w	r3, r3, #2
 80107aa:	e7ef      	b.n	801078c <icu_lld_enable_notifications+0x1c>
 80107ac:	0000      	movs	r0, r0
	...

080107b0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 80107b0:	b508      	push	{r3, lr}
 80107b2:	2320      	movs	r3, #32
 80107b4:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 80107b8:	f7fc fb32 	bl	800ce20 <chSysTimerHandlerI>
 80107bc:	2300      	movs	r3, #0
 80107be:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 80107c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80107c6:	f7fd b95b 	b.w	800da80 <_port_irq_epilogue>
 80107ca:	bf00      	nop
 80107cc:	0000      	movs	r0, r0
	...

080107d0 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 80107d0:	4b05      	ldr	r3, [pc, #20]	; (80107e8 <st_lld_init+0x18>)
 80107d2:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 80107d6:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80107d8:	2207      	movs	r2, #7
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 80107da:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 80107dc:	6098      	str	r0, [r3, #8]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 80107de:	2108      	movs	r1, #8
 80107e0:	200b      	movs	r0, #11
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80107e2:	601a      	str	r2, [r3, #0]
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 80107e4:	f7fd bfec 	b.w	800e7c0 <nvicSetSystemHandlerPriority>
 80107e8:	e000e010 	.word	0xe000e010
 80107ec:	00000000 	.word	0x00000000

080107f0 <usart_stop>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 80107f0:	6901      	ldr	r1, [r0, #16]
 80107f2:	680a      	ldr	r2, [r1, #0]
 80107f4:	6813      	ldr	r3, [r2, #0]
 80107f6:	f023 031f 	bic.w	r3, r3, #31
static void usart_stop(UARTDriver *uartp) {
 80107fa:	b430      	push	{r4, r5}
  dmaStreamDisable(uartp->dmarx);
 80107fc:	6013      	str	r3, [r2, #0]
 80107fe:	6813      	ldr	r3, [r2, #0]
 8010800:	07db      	lsls	r3, r3, #31
 8010802:	d4fc      	bmi.n	80107fe <usart_stop+0xe>
 8010804:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(uartp->dmatx);
 8010806:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(uartp->dmarx);
 8010808:	6849      	ldr	r1, [r1, #4]
  dmaStreamDisable(uartp->dmatx);
 801080a:	6822      	ldr	r2, [r4, #0]
  dmaStreamDisable(uartp->dmarx);
 801080c:	233d      	movs	r3, #61	; 0x3d
 801080e:	40ab      	lsls	r3, r5
 8010810:	600b      	str	r3, [r1, #0]
  dmaStreamDisable(uartp->dmatx);
 8010812:	6813      	ldr	r3, [r2, #0]
 8010814:	f023 031f 	bic.w	r3, r3, #31
 8010818:	6013      	str	r3, [r2, #0]
 801081a:	6813      	ldr	r3, [r2, #0]
 801081c:	f013 0301 	ands.w	r3, r3, #1
 8010820:	d1fb      	bne.n	801081a <usart_stop+0x2a>
 8010822:	7a25      	ldrb	r5, [r4, #8]
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8010824:	6882      	ldr	r2, [r0, #8]
  dmaStreamDisable(uartp->dmatx);
 8010826:	6860      	ldr	r0, [r4, #4]
 8010828:	213d      	movs	r1, #61	; 0x3d
 801082a:	40a9      	lsls	r1, r5
 801082c:	6001      	str	r1, [r0, #0]
  uartp->usart->CR2 = 0;
  uartp->usart->CR3 = 0;
}
 801082e:	bc30      	pop	{r4, r5}
  uartp->usart->CR1 = 0;
 8010830:	60d3      	str	r3, [r2, #12]
  uartp->usart->CR2 = 0;
 8010832:	6113      	str	r3, [r2, #16]
  uartp->usart->CR3 = 0;
 8010834:	6153      	str	r3, [r2, #20]
}
 8010836:	4770      	bx	lr
	...

08010840 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8010840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8010844:	6884      	ldr	r4, [r0, #8]
  uint32_t cr1 = u->CR1;
 8010846:	68e7      	ldr	r7, [r4, #12]

  sr = u->SR;   /* SR reset step 1.*/
 8010848:	6826      	ldr	r6, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 801084a:	6862      	ldr	r2, [r4, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 801084c:	f240 130f 	movw	r3, #271	; 0x10f
 8010850:	421e      	tst	r6, r3
static void serve_usart_irq(UARTDriver *uartp) {
 8010852:	4605      	mov	r5, r0
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8010854:	d01d      	beq.n	8010892 <serve_usart_irq+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
 8010856:	6843      	ldr	r3, [r0, #4]
 8010858:	691a      	ldr	r2, [r3, #16]
    u->SR = ~USART_SR_LBD;
 801085a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801085e:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 8010860:	b1ba      	cbz	r2, 8010892 <serve_usart_irq+0x52>
  sr = u->SR;   /* SR reset step 1.*/
 8010862:	b2b3      	uxth	r3, r6
    sts |= UART_OVERRUN_ERROR;
 8010864:	f013 0f08 	tst.w	r3, #8
 8010868:	bf0c      	ite	eq
 801086a:	2100      	moveq	r1, #0
 801086c:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 801086e:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 8010870:	bf48      	it	mi
 8010872:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8010876:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8010878:	bf48      	it	mi
 801087a:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 801087e:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 8010880:	bf48      	it	mi
 8010882:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8010886:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8010888:	bf48      	it	mi
 801088a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 801088e:	4628      	mov	r0, r5
 8010890:	4790      	blx	r2
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8010892:	0672      	lsls	r2, r6, #25
 8010894:	d50e      	bpl.n	80108b4 <serve_usart_irq+0x74>
 8010896:	067b      	lsls	r3, r7, #25
 8010898:	d50c      	bpl.n	80108b4 <serve_usart_irq+0x74>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 801089a:	686b      	ldr	r3, [r5, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 801089e:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 80108a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80108a6:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80108a8:	60e7      	str	r7, [r4, #12]
    if (uartp->config->txend2_cb != NULL)
 80108aa:	b11b      	cbz	r3, 80108b4 <serve_usart_irq+0x74>
      uartp->config->txend2_cb(uartp);
 80108ac:	4628      	mov	r0, r5
  }
}
 80108ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      uartp->config->txend2_cb(uartp);
 80108b2:	4718      	bx	r3
}
 80108b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080108c0 <uart_lld_serve_tx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80108c0:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 80108c4:	b538      	push	{r3, r4, r5, lr}
 80108c6:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80108c8:	d11b      	bne.n	8010902 <uart_lld_serve_tx_end_irq+0x42>
  dmaStreamDisable(uartp->dmatx);
 80108ca:	6961      	ldr	r1, [r4, #20]
 80108cc:	680a      	ldr	r2, [r1, #0]
 80108ce:	6813      	ldr	r3, [r2, #0]
 80108d0:	f023 031f 	bic.w	r3, r3, #31
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	6813      	ldr	r3, [r2, #0]
 80108d8:	07db      	lsls	r3, r3, #31
 80108da:	d4fc      	bmi.n	80108d6 <uart_lld_serve_tx_end_irq+0x16>
  if (uartp->config->txend1_cb != NULL)
 80108dc:	6863      	ldr	r3, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 80108de:	7a0d      	ldrb	r5, [r1, #8]
 80108e0:	6848      	ldr	r0, [r1, #4]
  if (uartp->config->txend1_cb != NULL)
 80108e2:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 80108e4:	233d      	movs	r3, #61	; 0x3d
 80108e6:	40ab      	lsls	r3, r5
  uartp->txstate = UART_TX_COMPLETE;
 80108e8:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 80108ea:	6003      	str	r3, [r0, #0]
  uartp->txstate = UART_TX_COMPLETE;
 80108ec:	7061      	strb	r1, [r4, #1]
  if (uartp->config->txend1_cb != NULL)
 80108ee:	b12a      	cbz	r2, 80108fc <uart_lld_serve_tx_end_irq+0x3c>
    uartp->config->txend1_cb(uartp);
 80108f0:	4620      	mov	r0, r4
 80108f2:	4790      	blx	r2
  if (uartp->txstate == UART_TX_COMPLETE)
 80108f4:	7863      	ldrb	r3, [r4, #1]
 80108f6:	2b02      	cmp	r3, #2
 80108f8:	d000      	beq.n	80108fc <uart_lld_serve_tx_end_irq+0x3c>
}
 80108fa:	bd38      	pop	{r3, r4, r5, pc}
    uartp->txstate = UART_TX_IDLE;
 80108fc:	2300      	movs	r3, #0
 80108fe:	7063      	strb	r3, [r4, #1]
}
 8010900:	bd38      	pop	{r3, r4, r5, pc}
  chSysHalt(reason);
 8010902:	4802      	ldr	r0, [pc, #8]	; (801090c <uart_lld_serve_tx_end_irq+0x4c>)
 8010904:	f7fc fa84 	bl	800ce10 <chSysHalt>
 8010908:	e7df      	b.n	80108ca <uart_lld_serve_tx_end_irq+0xa>
 801090a:	bf00      	nop
 801090c:	08017b70 	.word	0x08017b70

08010910 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8010910:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8010914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010918:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 801091a:	d13a      	bne.n	8010992 <uart_lld_serve_rx_end_irq+0x82>
  if (uartp->rxstate == UART_RX_IDLE) {
 801091c:	78a3      	ldrb	r3, [r4, #2]
 801091e:	6861      	ldr	r1, [r4, #4]
 8010920:	b93b      	cbnz	r3, 8010932 <uart_lld_serve_rx_end_irq+0x22>
    if (uartp->config->rxchar_cb != NULL)
 8010922:	68cb      	ldr	r3, [r1, #12]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d032      	beq.n	801098e <uart_lld_serve_rx_end_irq+0x7e>
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 8010928:	8b21      	ldrh	r1, [r4, #24]
 801092a:	4620      	mov	r0, r4
}
 801092c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 8010930:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8010932:	6920      	ldr	r0, [r4, #16]
 8010934:	6802      	ldr	r2, [r0, #0]
 8010936:	6813      	ldr	r3, [r2, #0]
 8010938:	f023 031f 	bic.w	r3, r3, #31
 801093c:	6013      	str	r3, [r2, #0]
 801093e:	6813      	ldr	r3, [r2, #0]
 8010940:	07db      	lsls	r3, r3, #31
 8010942:	d4fc      	bmi.n	801093e <uart_lld_serve_rx_end_irq+0x2e>
 8010944:	7a07      	ldrb	r7, [r0, #8]
 8010946:	6846      	ldr	r6, [r0, #4]
    if (uartp->config->rxend_cb != NULL)
 8010948:	688d      	ldr	r5, [r1, #8]
    dmaStreamDisable(uartp->dmarx);
 801094a:	233d      	movs	r3, #61	; 0x3d
 801094c:	40bb      	lsls	r3, r7
    uartp->rxstate = UART_RX_COMPLETE;
 801094e:	2002      	movs	r0, #2
    dmaStreamDisable(uartp->dmarx);
 8010950:	6033      	str	r3, [r6, #0]
    uartp->rxstate = UART_RX_COMPLETE;
 8010952:	70a0      	strb	r0, [r4, #2]
    if (uartp->config->rxend_cb != NULL)
 8010954:	b13d      	cbz	r5, 8010966 <uart_lld_serve_rx_end_irq+0x56>
      uartp->config->rxend_cb(uartp);
 8010956:	4620      	mov	r0, r4
 8010958:	47a8      	blx	r5
    if (uartp->rxstate == UART_RX_COMPLETE) {
 801095a:	78a3      	ldrb	r3, [r4, #2]
 801095c:	2b02      	cmp	r3, #2
 801095e:	d116      	bne.n	801098e <uart_lld_serve_rx_end_irq+0x7e>
 8010960:	6923      	ldr	r3, [r4, #16]
 8010962:	6861      	ldr	r1, [r4, #4]
 8010964:	681a      	ldr	r2, [r3, #0]
  if (uartp->config->rxchar_cb == NULL)
 8010966:	68cb      	ldr	r3, [r1, #12]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8010968:	68e1      	ldr	r1, [r4, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 801096a:	2b00      	cmp	r3, #0
 801096c:	bf14      	ite	ne
 801096e:	f44f 7388 	movne.w	r3, #272	; 0x110
 8010972:	f44f 7380 	moveq.w	r3, #256	; 0x100
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8010976:	430b      	orrs	r3, r1
      uartp->rxstate = UART_RX_IDLE;
 8010978:	2500      	movs	r5, #0
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 801097a:	2101      	movs	r1, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 801097c:	f104 0018 	add.w	r0, r4, #24
      uartp->rxstate = UART_RX_IDLE;
 8010980:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8010982:	60d0      	str	r0, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8010984:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8010986:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8010988:	6813      	ldr	r3, [r2, #0]
 801098a:	430b      	orrs	r3, r1
 801098c:	6013      	str	r3, [r2, #0]
}
 801098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010992:	4802      	ldr	r0, [pc, #8]	; (801099c <uart_lld_serve_rx_end_irq+0x8c>)
 8010994:	f7fc fa3c 	bl	800ce10 <chSysHalt>
 8010998:	e7c0      	b.n	801091c <uart_lld_serve_rx_end_irq+0xc>
 801099a:	bf00      	nop
 801099c:	08017b70 	.word	0x08017b70

080109a0 <VectorDC>:
/**
 * @brief   USART3 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80109a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD3);
 80109a2:	4803      	ldr	r0, [pc, #12]	; (80109b0 <VectorDC+0x10>)
 80109a4:	f7ff ff4c 	bl	8010840 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80109a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80109ac:	f7fd b868 	b.w	800da80 <_port_irq_epilogue>
 80109b0:	200012e8 	.word	0x200012e8
	...

080109c0 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 80109c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);
 80109c2:	4803      	ldr	r0, [pc, #12]	; (80109d0 <Vector15C+0x10>)
 80109c4:	f7ff ff3c 	bl	8010840 <serve_usart_irq>

  OSAL_IRQ_EPILOGUE();
}
 80109c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80109cc:	f7fd b858 	b.w	800da80 <_port_irq_epilogue>
 80109d0:	20001304 	.word	0x20001304
	...

080109e0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 80109e0:	b570      	push	{r4, r5, r6, lr}
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART3
  uartObjectInit(&UARTD3);
 80109e2:	4d0c      	ldr	r5, [pc, #48]	; (8010a14 <uart_lld_init+0x34>)
  UARTD3.usart   = USART3;
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 80109e4:	4c0c      	ldr	r4, [pc, #48]	; (8010a18 <uart_lld_init+0x38>)
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 80109e6:	4e0d      	ldr	r6, [pc, #52]	; (8010a1c <uart_lld_init+0x3c>)
  uartObjectInit(&UARTD3);
 80109e8:	4628      	mov	r0, r5
 80109ea:	f7fd fb89 	bl	800e100 <uartObjectInit>
  UARTD3.usart   = USART3;
 80109ee:	4b0c      	ldr	r3, [pc, #48]	; (8010a20 <uart_lld_init+0x40>)
 80109f0:	60ab      	str	r3, [r5, #8]
  UARTD3.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80109f2:	2206      	movs	r2, #6
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 80109f4:	f104 0318 	add.w	r3, r4, #24
  uartObjectInit(&UARTD6);
 80109f8:	4630      	mov	r0, r6
  UARTD3.dmarx   = STM32_DMA_STREAM(STM32_UART_USART3_RX_DMA_STREAM);
 80109fa:	e9c5 2403 	strd	r2, r4, [r5, #12]
  UARTD3.dmatx   = STM32_DMA_STREAM(STM32_UART_USART3_TX_DMA_STREAM);
 80109fe:	616b      	str	r3, [r5, #20]
  uartObjectInit(&UARTD6);
 8010a00:	f7fd fb7e 	bl	800e100 <uartObjectInit>
  UARTD6.usart   = USART6;
 8010a04:	4b07      	ldr	r3, [pc, #28]	; (8010a24 <uart_lld_init+0x44>)
 8010a06:	60b3      	str	r3, [r6, #8]
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8010a08:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 8010a0c:	34a8      	adds	r4, #168	; 0xa8
 8010a0e:	e9c6 3404 	strd	r3, r4, [r6, #16]
#endif
}
 8010a12:	bd70      	pop	{r4, r5, r6, pc}
 8010a14:	200012e8 	.word	0x200012e8
 8010a18:	08017abc 	.word	0x08017abc
 8010a1c:	20001304 	.word	0x20001304
 8010a20:	40004800 	.word	0x40004800
 8010a24:	40011400 	.word	0x40011400
	...

08010a30 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8010a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8010a32:	7803      	ldrb	r3, [r0, #0]
 8010a34:	2b01      	cmp	r3, #1
void uart_lld_start(UARTDriver *uartp) {
 8010a36:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 8010a38:	d040      	beq.n	8010abc <uart_lld_start+0x8c>
 8010a3a:	6885      	ldr	r5, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	70a3      	strb	r3, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8010a40:	7063      	strb	r3, [r4, #1]
  usart_stop(uartp);
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7ff fed4 	bl	80107f0 <usart_stop>
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8010a48:	4b44      	ldr	r3, [pc, #272]	; (8010b5c <uart_lld_start+0x12c>)
 8010a4a:	68a2      	ldr	r2, [r4, #8]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	6863      	ldr	r3, [r4, #4]
 8010a50:	d008      	beq.n	8010a64 <uart_lld_start+0x34>
 8010a52:	4843      	ldr	r0, [pc, #268]	; (8010b60 <uart_lld_start+0x130>)
 8010a54:	6959      	ldr	r1, [r3, #20]
 8010a56:	4282      	cmp	r2, r0
 8010a58:	d005      	beq.n	8010a66 <uart_lld_start+0x36>
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 8010a5a:	4a42      	ldr	r2, [pc, #264]	; (8010b64 <uart_lld_start+0x134>)
 8010a5c:	fbb2 f2f1 	udiv	r2, r2, r1
 8010a60:	60aa      	str	r2, [r5, #8]
 8010a62:	e004      	b.n	8010a6e <uart_lld_start+0x3e>
 8010a64:	6959      	ldr	r1, [r3, #20]
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 8010a66:	4a40      	ldr	r2, [pc, #256]	; (8010b68 <uart_lld_start+0x138>)
 8010a68:	fbb2 f2f1 	udiv	r2, r2, r1
 8010a6c:	60aa      	str	r2, [r5, #8]
  if (uartp->config->rxchar_cb == NULL)
 8010a6e:	68d9      	ldr	r1, [r3, #12]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8010a70:	8b5e      	ldrh	r6, [r3, #26]
  u->CR1 = uartp->config->cr1 | cr1;
 8010a72:	8b1a      	ldrh	r2, [r3, #24]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8010a74:	8b98      	ldrh	r0, [r3, #28]
  (void)u->SR;  /* SR reset step 1.*/
 8010a76:	682b      	ldr	r3, [r5, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8010a78:	686b      	ldr	r3, [r5, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8010a7a:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
  if (uartp->config->rxchar_cb == NULL)
 8010a7e:	2900      	cmp	r1, #0
  u->SR = 0;
 8010a80:	f04f 0100 	mov.w	r1, #0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8010a84:	681b      	ldr	r3, [r3, #0]
  u->SR = 0;
 8010a86:	6029      	str	r1, [r5, #0]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8010a88:	f040 00c1 	orr.w	r0, r0, #193	; 0xc1
  u->CR1 = uartp->config->cr1 | cr1;
 8010a8c:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8010a90:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8010a94:	bf14      	ite	ne
 8010a96:	f44f 7188 	movne.w	r1, #272	; 0x110
 8010a9a:	f44f 7180 	moveq.w	r1, #256	; 0x100
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8010a9e:	612e      	str	r6, [r5, #16]
  u->CR1 = uartp->config->cr1 | cr1;
 8010aa0:	f042 020c 	orr.w	r2, r2, #12
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8010aa4:	6168      	str	r0, [r5, #20]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8010aa6:	3418      	adds	r4, #24
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8010aa8:	2001      	movs	r0, #1
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8010aaa:	4339      	orrs	r1, r7
  u->CR1 = uartp->config->cr1 | cr1;
 8010aac:	60ea      	str	r2, [r5, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8010aae:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8010ab0:	6058      	str	r0, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8010ab2:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	4302      	orrs	r2, r0
 8010ab8:	601a      	str	r2, [r3, #0]
  usart_start(uartp);
}
 8010aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&UARTD3 == uartp) {
 8010abc:	4b2b      	ldr	r3, [pc, #172]	; (8010b6c <uart_lld_start+0x13c>)
 8010abe:	4298      	cmp	r0, r3
 8010ac0:	d032      	beq.n	8010b28 <uart_lld_start+0xf8>
    if (&UARTD6 == uartp) {
 8010ac2:	4b2b      	ldr	r3, [pc, #172]	; (8010b70 <uart_lld_start+0x140>)
 8010ac4:	4298      	cmp	r0, r3
 8010ac6:	d015      	beq.n	8010af4 <uart_lld_start+0xc4>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8010ac8:	6863      	ldr	r3, [r4, #4]
 8010aca:	8b1b      	ldrh	r3, [r3, #24]
 8010acc:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8010ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ad4:	d103      	bne.n	8010ade <uart_lld_start+0xae>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8010ad6:	68e3      	ldr	r3, [r4, #12]
 8010ad8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8010adc:	60e3      	str	r3, [r4, #12]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8010ade:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8010ae2:	68a5      	ldr	r5, [r4, #8]
 8010ae4:	6810      	ldr	r0, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8010ae6:	6819      	ldr	r1, [r3, #0]
    uartp->rxbuf = 0;
 8010ae8:	2200      	movs	r2, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8010aea:	1d2b      	adds	r3, r5, #4
 8010aec:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8010aee:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 8010af0:	8322      	strh	r2, [r4, #24]
 8010af2:	e7a3      	b.n	8010a3c <uart_lld_start+0xc>
      b = dmaStreamAllocate(uartp->dmarx,
 8010af4:	4603      	mov	r3, r0
 8010af6:	4a1f      	ldr	r2, [pc, #124]	; (8010b74 <uart_lld_start+0x144>)
 8010af8:	6900      	ldr	r0, [r0, #16]
 8010afa:	210c      	movs	r1, #12
 8010afc:	f7fe f818 	bl	800eb30 <dmaStreamAllocate>
      b = dmaStreamAllocate(uartp->dmatx,
 8010b00:	4623      	mov	r3, r4
 8010b02:	4a1d      	ldr	r2, [pc, #116]	; (8010b78 <uart_lld_start+0x148>)
 8010b04:	6960      	ldr	r0, [r4, #20]
 8010b06:	210c      	movs	r1, #12
 8010b08:	f7fe f812 	bl	800eb30 <dmaStreamAllocate>
      rccEnableUSART6(FALSE);
 8010b0c:	4a1b      	ldr	r2, [pc, #108]	; (8010b7c <uart_lld_start+0x14c>)
 8010b0e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010b10:	f043 0320 	orr.w	r3, r3, #32
 8010b14:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8010b16:	210c      	movs	r1, #12
 8010b18:	2047      	movs	r0, #71	; 0x47
 8010b1a:	f7fd fe19 	bl	800e750 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 8010b1e:	68e3      	ldr	r3, [r4, #12]
 8010b20:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8010b24:	60e3      	str	r3, [r4, #12]
 8010b26:	e7cf      	b.n	8010ac8 <uart_lld_start+0x98>
      b = dmaStreamAllocate(uartp->dmarx,
 8010b28:	4603      	mov	r3, r0
 8010b2a:	4a12      	ldr	r2, [pc, #72]	; (8010b74 <uart_lld_start+0x144>)
 8010b2c:	6900      	ldr	r0, [r0, #16]
 8010b2e:	210c      	movs	r1, #12
 8010b30:	f7fd fffe 	bl	800eb30 <dmaStreamAllocate>
      b = dmaStreamAllocate(uartp->dmatx,
 8010b34:	4623      	mov	r3, r4
 8010b36:	4a10      	ldr	r2, [pc, #64]	; (8010b78 <uart_lld_start+0x148>)
 8010b38:	6960      	ldr	r0, [r4, #20]
 8010b3a:	210c      	movs	r1, #12
 8010b3c:	f7fd fff8 	bl	800eb30 <dmaStreamAllocate>
      rccEnableUSART3(FALSE);
 8010b40:	4a0e      	ldr	r2, [pc, #56]	; (8010b7c <uart_lld_start+0x14c>)
 8010b42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010b48:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_UART_USART3_IRQ_PRIORITY);
 8010b4a:	210c      	movs	r1, #12
 8010b4c:	2027      	movs	r0, #39	; 0x27
 8010b4e:	f7fd fdff 	bl	800e750 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART3_RX_DMA_CHANNEL) |
 8010b52:	68e3      	ldr	r3, [r4, #12]
 8010b54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010b58:	60e3      	str	r3, [r4, #12]
 8010b5a:	e7b5      	b.n	8010ac8 <uart_lld_start+0x98>
 8010b5c:	40011000 	.word	0x40011000
 8010b60:	40011400 	.word	0x40011400
 8010b64:	0280de80 	.word	0x0280de80
 8010b68:	0501bd00 	.word	0x0501bd00
 8010b6c:	200012e8 	.word	0x200012e8
 8010b70:	20001304 	.word	0x20001304
 8010b74:	08010911 	.word	0x08010911
 8010b78:	080108c1 	.word	0x080108c1
 8010b7c:	40023800 	.word	0x40023800

08010b80 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8010b80:	f7fe b87e 	b.w	800ec80 <stm32_clock_init>
	...

08010b90 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
	...

08010ba0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8010ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba4:	ed2d 8b02 	vpush	{d8}
 8010ba8:	4606      	mov	r6, r0
 8010baa:	b091      	sub	sp, #68	; 0x44
 8010bac:	4689      	mov	r9, r1
 8010bae:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8010bb0:	f04f 0b00 	mov.w	fp, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8010bb4:	f899 1000 	ldrb.w	r1, [r9]
 8010bb8:	f109 0201 	add.w	r2, r9, #1
    if (c == 0)
 8010bbc:	b171      	cbz	r1, 8010bdc <chvprintf+0x3c>
      return n;
    if (c != '%') {
 8010bbe:	2925      	cmp	r1, #37	; 0x25
 8010bc0:	d012      	beq.n	8010be8 <chvprintf+0x48>
      chSequentialStreamPut(chp, (uint8_t)c);
 8010bc2:	6833      	ldr	r3, [r6, #0]
    c = *fmt++;
 8010bc4:	4691      	mov	r9, r2
      chSequentialStreamPut(chp, (uint8_t)c);
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	4630      	mov	r0, r6
 8010bca:	4798      	blx	r3
    c = *fmt++;
 8010bcc:	f899 1000 	ldrb.w	r1, [r9]
      n++;
 8010bd0:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 8010bd4:	f109 0201 	add.w	r2, r9, #1
    if (c == 0)
 8010bd8:	2900      	cmp	r1, #0
 8010bda:	d1f0      	bne.n	8010bbe <chvprintf+0x1e>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8010bdc:	4658      	mov	r0, fp
 8010bde:	b011      	add	sp, #68	; 0x44
 8010be0:	ecbd 8b02 	vpop	{d8}
 8010be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*fmt == '-') {
 8010be8:	f899 1001 	ldrb.w	r1, [r9, #1]
 8010bec:	292d      	cmp	r1, #45	; 0x2d
 8010bee:	bf03      	ittte	eq
 8010bf0:	f899 1002 	ldrbeq.w	r1, [r9, #2]
      fmt++;
 8010bf4:	f109 0202 	addeq.w	r2, r9, #2
      left_align = TRUE;
 8010bf8:	2301      	moveq	r3, #1
    left_align = FALSE;
 8010bfa:	2300      	movne	r3, #0
    if (*fmt == '0') {
 8010bfc:	2930      	cmp	r1, #48	; 0x30
 8010bfe:	bf08      	it	eq
 8010c00:	7851      	ldrbeq	r1, [r2, #1]
    left_align = FALSE;
 8010c02:	9302      	str	r3, [sp, #8]
      fmt++;
 8010c04:	bf06      	itte	eq
 8010c06:	3201      	addeq	r2, #1
      filler = '0';
 8010c08:	2730      	moveq	r7, #48	; 0x30
    filler = ' ';
 8010c0a:	2720      	movne	r7, #32
 8010c0c:	3201      	adds	r2, #1
    width = 0;
 8010c0e:	2400      	movs	r4, #0
 8010c10:	e007      	b.n	8010c22 <chvprintf+0x82>
        c = va_arg(ap, int);
 8010c12:	f89a 3000 	ldrb.w	r3, [sl]
 8010c16:	f10a 0a04 	add.w	sl, sl, #4
 8010c1a:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 8010c1e:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8010c22:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b09      	cmp	r3, #9
      c = *fmt++;
 8010c2a:	4615      	mov	r5, r2
      width = width * 10 + c;
 8010c2c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8010c30:	d9f3      	bls.n	8010c1a <chvprintf+0x7a>
      else if (c == '*')
 8010c32:	292a      	cmp	r1, #42	; 0x2a
 8010c34:	d0ed      	beq.n	8010c12 <chvprintf+0x72>
    if (c == '.') {
 8010c36:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 8010c38:	f04f 0800 	mov.w	r8, #0
    if (c == '.') {
 8010c3c:	d04a      	beq.n	8010cd4 <chvprintf+0x134>
    if (c == 'l' || c == 'L') {
 8010c3e:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8010c42:	2b4c      	cmp	r3, #76	; 0x4c
 8010c44:	f105 0901 	add.w	r9, r5, #1
 8010c48:	d050      	beq.n	8010cec <chvprintf+0x14c>
      is_long = (c >= 'A') && (c <= 'Z');
 8010c4a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 8010c4e:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 8010c52:	b2db      	uxtb	r3, r3
    switch (c) {
 8010c54:	2a34      	cmp	r2, #52	; 0x34
 8010c56:	f200 81d3 	bhi.w	8011000 <chvprintf+0x460>
 8010c5a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010c5e:	021e      	.short	0x021e
 8010c60:	01d101d1 	.word	0x01d101d1
 8010c64:	01d101d1 	.word	0x01d101d1
 8010c68:	01d1021e 	.word	0x01d1021e
 8010c6c:	01d101d1 	.word	0x01d101d1
 8010c70:	01d101d1 	.word	0x01d101d1
 8010c74:	01d101cd 	.word	0x01d101cd
 8010c78:	01d101d1 	.word	0x01d101d1
 8010c7c:	01d101d1 	.word	0x01d101d1
 8010c80:	01d10197 	.word	0x01d10197
 8010c84:	022701d1 	.word	0x022701d1
 8010c88:	01d101d1 	.word	0x01d101d1
 8010c8c:	01d101d1 	.word	0x01d101d1
 8010c90:	01d101d1 	.word	0x01d101d1
 8010c94:	01d101d1 	.word	0x01d101d1
 8010c98:	01d101d1 	.word	0x01d101d1
 8010c9c:	021e014e 	.word	0x021e014e
 8010ca0:	00aa01d1 	.word	0x00aa01d1
 8010ca4:	01d101d1 	.word	0x01d101d1
 8010ca8:	01d1021e 	.word	0x01d1021e
 8010cac:	01d101d1 	.word	0x01d101d1
 8010cb0:	01d101d1 	.word	0x01d101d1
 8010cb4:	01d101cd 	.word	0x01d101cd
 8010cb8:	01d101d1 	.word	0x01d101d1
 8010cbc:	01d10088 	.word	0x01d10088
 8010cc0:	01d10197 	.word	0x01d10197
 8010cc4:	022701d1 	.word	0x022701d1
          c = va_arg(ap, int);
 8010cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8010ccc:	f10a 0a04 	add.w	sl, sl, #4
        precision += c;
 8010cd0:	eb03 0842 	add.w	r8, r3, r2, lsl #1
        c = *fmt++;
 8010cd4:	f815 1b01 	ldrb.w	r1, [r5], #1
        if (c >= '0' && c <= '9')
 8010cd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	2b09      	cmp	r3, #9
        precision *= 10;
 8010ce0:	eb08 0288 	add.w	r2, r8, r8, lsl #2
        if (c >= '0' && c <= '9')
 8010ce4:	d9f4      	bls.n	8010cd0 <chvprintf+0x130>
        else if (c == '*')
 8010ce6:	292a      	cmp	r1, #42	; 0x2a
 8010ce8:	d0ee      	beq.n	8010cc8 <chvprintf+0x128>
 8010cea:	e7a8      	b.n	8010c3e <chvprintf+0x9e>
      if (*fmt)
 8010cec:	782b      	ldrb	r3, [r5, #0]
 8010cee:	b3db      	cbz	r3, 8010d68 <chvprintf+0x1c8>
    switch (c) {
 8010cf0:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8010cf4:	2a34      	cmp	r2, #52	; 0x34
 8010cf6:	f200 8185 	bhi.w	8011004 <chvprintf+0x464>
 8010cfa:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010cfe:	01a2      	.short	0x01a2
 8010d00:	01830183 	.word	0x01830183
 8010d04:	01830183 	.word	0x01830183
 8010d08:	018301a2 	.word	0x018301a2
 8010d0c:	01830183 	.word	0x01830183
 8010d10:	01830183 	.word	0x01830183
 8010d14:	0183017e 	.word	0x0183017e
 8010d18:	01830183 	.word	0x01830183
 8010d1c:	01830183 	.word	0x01830183
 8010d20:	01830148 	.word	0x01830148
 8010d24:	019f0183 	.word	0x019f0183
 8010d28:	01830183 	.word	0x01830183
 8010d2c:	01830183 	.word	0x01830183
 8010d30:	01830183 	.word	0x01830183
 8010d34:	01830183 	.word	0x01830183
 8010d38:	01830183 	.word	0x01830183
 8010d3c:	01a200ff 	.word	0x01a200ff
 8010d40:	005b0183 	.word	0x005b0183
 8010d44:	01830183 	.word	0x01830183
 8010d48:	018301a2 	.word	0x018301a2
 8010d4c:	01830183 	.word	0x01830183
 8010d50:	01830183 	.word	0x01830183
 8010d54:	0183017e 	.word	0x0183017e
 8010d58:	01830183 	.word	0x01830183
 8010d5c:	01830039 	.word	0x01830039
 8010d60:	01830148 	.word	0x01830148
 8010d64:	019f0183 	.word	0x019f0183
      if (*fmt)
 8010d68:	460b      	mov	r3, r1
 8010d6a:	46a9      	mov	r9, r5
 8010d6c:	e7c0      	b.n	8010cf0 <chvprintf+0x150>
    switch (c) {
 8010d6e:	46a9      	mov	r9, r5
      if ((s = va_arg(ap, char *)) == 0)
 8010d70:	f8da 5000 	ldr.w	r5, [sl]
 8010d74:	f10a 0a04 	add.w	sl, sl, #4
 8010d78:	2d00      	cmp	r5, #0
 8010d7a:	f000 81a6 	beq.w	80110ca <chvprintf+0x52a>
 8010d7e:	782b      	ldrb	r3, [r5, #0]
 8010d80:	4629      	mov	r1, r5
      if (precision == 0)
 8010d82:	f1b8 0f00 	cmp.w	r8, #0
 8010d86:	f040 81bf 	bne.w	8011108 <chvprintf+0x568>
      for (p = s; *p && (--precision >= 0); p++)
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f000 81cc 	beq.w	8011128 <chvprintf+0x588>
 8010d90:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 8010d94:	462b      	mov	r3, r5
 8010d96:	e002      	b.n	8010d9e <chvprintf+0x1fe>
 8010d98:	f1b8 0801 	subs.w	r8, r8, #1
 8010d9c:	d403      	bmi.n	8010da6 <chvprintf+0x206>
 8010d9e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010da2:	2a00      	cmp	r2, #0
 8010da4:	d1f8      	bne.n	8010d98 <chvprintf+0x1f8>
 8010da6:	1a5b      	subs	r3, r3, r1
 8010da8:	1ae4      	subs	r4, r4, r3
 8010daa:	3b01      	subs	r3, #1
 8010dac:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8010dae:	2720      	movs	r7, #32
 8010db0:	e0af      	b.n	8010f12 <chvprintf+0x372>
    switch (c) {
 8010db2:	46a9      	mov	r9, r5
      f = (float) va_arg(ap, double);
 8010db4:	f10a 0a07 	add.w	sl, sl, #7
 8010db8:	f02a 0a07 	bic.w	sl, sl, #7
 8010dbc:	e9da 0100 	ldrd	r0, r1, [sl]
 8010dc0:	f7fb fe46 	bl	800ca50 <__aeabi_d2f>
 8010dc4:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 8010dc8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      f = (float) va_arg(ap, double);
 8010dd0:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 8010dd4:	f100 816e 	bmi.w	80110b4 <chvprintf+0x514>
    p = tmpbuf;
 8010dd8:	ab0a      	add	r3, sp, #40	; 0x28
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	9301      	str	r3, [sp, #4]
      p = ftoa(p, f, precision);
 8010dde:	ee18 0a10 	vmov	r0, s16
 8010de2:	f7fb fb11 	bl	800c408 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8010de6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010dea:	f1b8 0f08 	cmp.w	r8, #8
      p = ftoa(p, f, precision);
 8010dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8010df2:	f200 8173 	bhi.w	80110dc <chvprintf+0x53c>
 8010df6:	4bc0      	ldr	r3, [pc, #768]	; (80110f8 <chvprintf+0x558>)
 8010df8:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f7fb fae1 	bl	800c3c4 <__aeabi_ui2d>
 8010e02:	4bbe      	ldr	r3, [pc, #760]	; (80110fc <chvprintf+0x55c>)
 8010e04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010e08:	fba3 3505 	umull	r3, r5, r3, r5
 8010e0c:	08eb      	lsrs	r3, r5, #3
 8010e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e10:	461d      	mov	r5, r3
  l = (long)num;
 8010e12:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  q = p + MAX_FILLER;
 8010e16:	9b01      	ldr	r3, [sp, #4]
    i = (int)(l % radix);
 8010e18:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 80110fc <chvprintf+0x55c>
  l = (long)num;
 8010e1c:	edcd 7a08 	vstr	s15, [sp, #32]
  q = p + MAX_FILLER;
 8010e20:	f103 080b 	add.w	r8, r3, #11
  l = num;
 8010e24:	ee17 1a90 	vmov	r1, s15
  q = p + MAX_FILLER;
 8010e28:	4642      	mov	r2, r8
    i = (int)(l % radix);
 8010e2a:	fbae 0301 	umull	r0, r3, lr, r1
 8010e2e:	08db      	lsrs	r3, r3, #3
 8010e30:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8010e34:	4618      	mov	r0, r3
 8010e36:	eba1 034c 	sub.w	r3, r1, ip, lsl #1
    i += '0';
 8010e3a:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	f802 3d01 	strb.w	r3, [r2, #-1]!
  } while ((ll /= radix) != 0);
 8010e42:	4601      	mov	r1, r0
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d1f0      	bne.n	8010e2a <chvprintf+0x28a>
 8010e48:	9901      	ldr	r1, [sp, #4]
  i = (int)(p + MAX_FILLER - q);
 8010e4a:	eba8 0802 	sub.w	r8, r8, r2
 8010e4e:	4608      	mov	r0, r1
 8010e50:	4440      	add	r0, r8
 8010e52:	e001      	b.n	8010e58 <chvprintf+0x2b8>
 8010e54:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8010e58:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8010e5c:	4281      	cmp	r1, r0
 8010e5e:	d1f9      	bne.n	8010e54 <chvprintf+0x2b4>
 8010e60:	9a01      	ldr	r2, [sp, #4]
  l = (long)((num - l) * precision);
 8010e62:	9808      	ldr	r0, [sp, #32]
  *p++ = '.';
 8010e64:	232e      	movs	r3, #46	; 0x2e
 8010e66:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e6a:	4442      	add	r2, r8
 8010e6c:	700b      	strb	r3, [r1, #0]
 8010e6e:	9201      	str	r2, [sp, #4]
  l = (long)((num - l) * precision);
 8010e70:	f7fb fab8 	bl	800c3e4 <__aeabi_i2d>
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e7c:	f7fb f964 	bl	800c148 <__aeabi_dsub>
 8010e80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e84:	f7fb fb1c 	bl	800c4c0 <__aeabi_dmul>
 8010e88:	f7fb fdba 	bl	800ca00 <__aeabi_d2iz>
  q = p + MAX_FILLER;
 8010e8c:	9b01      	ldr	r3, [sp, #4]
    ll = num;
 8010e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    i = (int)(l % radix);
 8010e90:	499a      	ldr	r1, [pc, #616]	; (80110fc <chvprintf+0x55c>)
  q = p + MAX_FILLER;
 8010e92:	f103 080d 	add.w	r8, r3, #13
  *p++ = '.';
 8010e96:	3302      	adds	r3, #2
    ll = num;
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	bf08      	it	eq
 8010e9c:	4605      	moveq	r5, r0
  *p++ = '.';
 8010e9e:	9308      	str	r3, [sp, #32]
  q = p + MAX_FILLER;
 8010ea0:	4642      	mov	r2, r8
    i = (int)(l % radix);
 8010ea2:	fba1 c300 	umull	ip, r3, r1, r0
 8010ea6:	08db      	lsrs	r3, r3, #3
 8010ea8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8010eac:	469c      	mov	ip, r3
 8010eae:	eba0 034e 	sub.w	r3, r0, lr, lsl #1
    i += '0';
 8010eb2:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 8010eb4:	fba1 0505 	umull	r0, r5, r1, r5
    *--q = i;
 8010eb8:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8010eba:	08ed      	lsrs	r5, r5, #3
    *--q = i;
 8010ebc:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8010ec0:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 8010ec2:	d1ee      	bne.n	8010ea2 <chvprintf+0x302>
  i = (int)(p + MAX_FILLER - q);
 8010ec4:	eba8 0802 	sub.w	r8, r8, r2
 8010ec8:	9901      	ldr	r1, [sp, #4]
 8010eca:	f108 0002 	add.w	r0, r8, #2
 8010ece:	4401      	add	r1, r0
 8010ed0:	4608      	mov	r0, r1
 8010ed2:	9908      	ldr	r1, [sp, #32]
 8010ed4:	e001      	b.n	8010eda <chvprintf+0x33a>
 8010ed6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8010eda:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8010ede:	4281      	cmp	r1, r0
 8010ee0:	d1f9      	bne.n	8010ed6 <chvprintf+0x336>
 8010ee2:	9b08      	ldr	r3, [sp, #32]
 8010ee4:	9d03      	ldr	r5, [sp, #12]
 8010ee6:	4443      	add	r3, r8
 8010ee8:	4698      	mov	r8, r3
 8010eea:	eba8 0805 	sub.w	r8, r8, r5
 8010eee:	f108 33ff 	add.w	r3, r8, #4294967295
 8010ef2:	eba4 0408 	sub.w	r4, r4, r8
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	e00b      	b.n	8010f12 <chvprintf+0x372>
    switch (c) {
 8010efa:	46a9      	mov	r9, r5
      *p++ = va_arg(ap, int);
 8010efc:	ad10      	add	r5, sp, #64	; 0x40
 8010efe:	f8da 3000 	ldr.w	r3, [sl]
 8010f02:	f805 3d18 	strb.w	r3, [r5, #-24]!
      break;
 8010f06:	2300      	movs	r3, #0
 8010f08:	3c01      	subs	r4, #1
      *p++ = va_arg(ap, int);
 8010f0a:	f10a 0a04 	add.w	sl, sl, #4
      break;
 8010f0e:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8010f10:	2720      	movs	r7, #32
    if ((width -= i) < 0)
 8010f12:	2c00      	cmp	r4, #0
 8010f14:	db6a      	blt.n	8010fec <chvprintf+0x44c>
    if (left_align == FALSE)
 8010f16:	9b02      	ldr	r3, [sp, #8]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d17b      	bne.n	8011014 <chvprintf+0x474>
      width = -width;
 8010f1c:	4263      	negs	r3, r4
    if (width < 0) {
 8010f1e:	2c00      	cmp	r4, #0
 8010f20:	d077      	beq.n	8011012 <chvprintf+0x472>
      if (*s == '-' && filler == '0') {
 8010f22:	7829      	ldrb	r1, [r5, #0]
 8010f24:	6832      	ldr	r2, [r6, #0]
 8010f26:	292d      	cmp	r1, #45	; 0x2d
 8010f28:	6892      	ldr	r2, [r2, #8]
 8010f2a:	d077      	beq.n	801101c <chvprintf+0x47c>
 8010f2c:	4698      	mov	r8, r3
 8010f2e:	e001      	b.n	8010f34 <chvprintf+0x394>
 8010f30:	6833      	ldr	r3, [r6, #0]
 8010f32:	689a      	ldr	r2, [r3, #8]
        chSequentialStreamPut(chp, (uint8_t)filler);
 8010f34:	4639      	mov	r1, r7
 8010f36:	4630      	mov	r0, r6
 8010f38:	4790      	blx	r2
      } while (++width != 0);
 8010f3a:	f118 0801 	adds.w	r8, r8, #1
 8010f3e:	d1f7      	bne.n	8010f30 <chvprintf+0x390>
    while (--i >= 0) {
 8010f40:	9a01      	ldr	r2, [sp, #4]
 8010f42:	2a00      	cmp	r2, #0
 8010f44:	4643      	mov	r3, r8
 8010f46:	44a3      	add	fp, r4
 8010f48:	f6ff ae34 	blt.w	8010bb4 <chvprintf+0x14>
 8010f4c:	461c      	mov	r4, r3
      width = -width;
 8010f4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8010f52:	6833      	ldr	r3, [r6, #0]
 8010f54:	f815 1b01 	ldrb.w	r1, [r5], #1
 8010f58:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 8010f5a:	f108 38ff 	add.w	r8, r8, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8010f5e:	4630      	mov	r0, r6
 8010f60:	4798      	blx	r3
    while (--i >= 0) {
 8010f62:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010f66:	d1f4      	bne.n	8010f52 <chvprintf+0x3b2>
 8010f68:	9b01      	ldr	r3, [sp, #4]
 8010f6a:	f10b 0b01 	add.w	fp, fp, #1
 8010f6e:	445b      	add	r3, fp
 8010f70:	469b      	mov	fp, r3
    while (width) {
 8010f72:	2c00      	cmp	r4, #0
 8010f74:	f43f ae1e 	beq.w	8010bb4 <chvprintf+0x14>
 8010f78:	4625      	mov	r5, r4
      chSequentialStreamPut(chp, (uint8_t)filler);
 8010f7a:	6833      	ldr	r3, [r6, #0]
 8010f7c:	4639      	mov	r1, r7
 8010f7e:	689b      	ldr	r3, [r3, #8]
 8010f80:	4630      	mov	r0, r6
 8010f82:	4798      	blx	r3
    while (width) {
 8010f84:	3d01      	subs	r5, #1
 8010f86:	d1f8      	bne.n	8010f7a <chvprintf+0x3da>
 8010f88:	44a3      	add	fp, r4
 8010f8a:	e613      	b.n	8010bb4 <chvprintf+0x14>
    switch (c) {
 8010f8c:	46a9      	mov	r9, r5
      goto unsigned_common;
 8010f8e:	f04f 0c0a 	mov.w	ip, #10
 8010f92:	f85a 2b04 	ldr.w	r2, [sl], #4
  q = p + MAX_FILLER;
 8010f96:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8010f9a:	e000      	b.n	8010f9e <chvprintf+0x3fe>
  } while ((ll /= radix) != 0);
 8010f9c:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8010f9e:	fbb2 f5fc 	udiv	r5, r2, ip
 8010fa2:	fb0c 2215 	mls	r2, ip, r5, r2
    i += '0';
 8010fa6:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8010faa:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8010fac:	bfc8      	it	gt
 8010fae:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	f801 3c01 	strb.w	r3, [r1, #-1]
 8010fb8:	1e48      	subs	r0, r1, #1
    l /= radix;
 8010fba:	462a      	mov	r2, r5
  } while ((ll /= radix) != 0);
 8010fbc:	2d00      	cmp	r5, #0
 8010fbe:	d1ed      	bne.n	8010f9c <chvprintf+0x3fc>
  i = (int)(p + MAX_FILLER - q);
 8010fc0:	f10d 0533 	add.w	r5, sp, #51	; 0x33
 8010fc4:	aa0a      	add	r2, sp, #40	; 0x28
 8010fc6:	eba5 0800 	sub.w	r8, r5, r0
 8010fca:	9203      	str	r2, [sp, #12]
 8010fcc:	4440      	add	r0, r8
 8010fce:	e001      	b.n	8010fd4 <chvprintf+0x434>
 8010fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 8010fd4:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8010fd8:	4281      	cmp	r1, r0
 8010fda:	d1f9      	bne.n	8010fd0 <chvprintf+0x430>
 8010fdc:	eba4 0408 	sub.w	r4, r4, r8
 8010fe0:	f108 33ff 	add.w	r3, r8, #4294967295
    if ((width -= i) < 0)
 8010fe4:	2c00      	cmp	r4, #0
 8010fe6:	9301      	str	r3, [sp, #4]
    s = tmpbuf;
 8010fe8:	9d03      	ldr	r5, [sp, #12]
    if ((width -= i) < 0)
 8010fea:	da94      	bge.n	8010f16 <chvprintf+0x376>
    while (--i >= 0) {
 8010fec:	9b01      	ldr	r3, [sp, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f6ff ade0 	blt.w	8010bb4 <chvprintf+0x14>
      width = 0;
 8010ff4:	2400      	movs	r4, #0
 8010ff6:	e7aa      	b.n	8010f4e <chvprintf+0x3ae>
    switch (c) {
 8010ff8:	46a9      	mov	r9, r5
    case 'O':
 8010ffa:	f04f 0c08 	mov.w	ip, #8
 8010ffe:	e7c8      	b.n	8010f92 <chvprintf+0x3f2>
    switch (c) {
 8011000:	460b      	mov	r3, r1
 8011002:	46a9      	mov	r9, r5
      *p++ = c;
 8011004:	ad10      	add	r5, sp, #64	; 0x40
 8011006:	3c01      	subs	r4, #1
 8011008:	f805 3d18 	strb.w	r3, [r5, #-24]!
      break;
 801100c:	2300      	movs	r3, #0
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	e77f      	b.n	8010f12 <chvprintf+0x372>
      width = -width;
 8011012:	461c      	mov	r4, r3
    while (--i >= 0) {
 8011014:	9b01      	ldr	r3, [sp, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	da99      	bge.n	8010f4e <chvprintf+0x3ae>
 801101a:	e7aa      	b.n	8010f72 <chvprintf+0x3d2>
      if (*s == '-' && filler == '0') {
 801101c:	2f30      	cmp	r7, #48	; 0x30
 801101e:	d185      	bne.n	8010f2c <chvprintf+0x38c>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8011020:	4630      	mov	r0, r6
 8011022:	9302      	str	r3, [sp, #8]
 8011024:	4790      	blx	r2
 8011026:	9b01      	ldr	r3, [sp, #4]
 8011028:	6832      	ldr	r2, [r6, #0]
 801102a:	3b01      	subs	r3, #1
 801102c:	9301      	str	r3, [sp, #4]
 801102e:	9b02      	ldr	r3, [sp, #8]
 8011030:	6892      	ldr	r2, [r2, #8]
 8011032:	f10b 0b01 	add.w	fp, fp, #1
 8011036:	3501      	adds	r5, #1
 8011038:	4698      	mov	r8, r3
 801103a:	e77b      	b.n	8010f34 <chvprintf+0x394>
    switch (c) {
 801103c:	f04f 0c10 	mov.w	ip, #16
 8011040:	e7a7      	b.n	8010f92 <chvprintf+0x3f2>
 8011042:	f10a 0204 	add.w	r2, sl, #4
        l = va_arg(ap, long);
 8011046:	f8da 1000 	ldr.w	r1, [sl]
 801104a:	4692      	mov	sl, r2
      if (l < 0) {
 801104c:	2900      	cmp	r1, #0
 801104e:	db62      	blt.n	8011116 <chvprintf+0x576>
    p = tmpbuf;
 8011050:	ad0a      	add	r5, sp, #40	; 0x28
 8011052:	9503      	str	r5, [sp, #12]
  q = p + MAX_FILLER;
 8011054:	f105 020b 	add.w	r2, r5, #11
    i = (int)(l % radix);
 8011058:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80110fc <chvprintf+0x55c>
  q = p + MAX_FILLER;
 801105c:	4610      	mov	r0, r2
    i = (int)(l % radix);
 801105e:	fba8 c301 	umull	ip, r3, r8, r1
 8011062:	08db      	lsrs	r3, r3, #3
 8011064:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8011068:	469c      	mov	ip, r3
 801106a:	eba1 034e 	sub.w	r3, r1, lr, lsl #1
    i += '0';
 801106e:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8011070:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8011072:	4661      	mov	r1, ip
    *--q = i;
 8011074:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 8011078:	2900      	cmp	r1, #0
 801107a:	d1f0      	bne.n	801105e <chvprintf+0x4be>
  i = (int)(p + MAX_FILLER - q);
 801107c:	1a12      	subs	r2, r2, r0
 801107e:	442a      	add	r2, r5
 8011080:	e001      	b.n	8011086 <chvprintf+0x4e6>
 8011082:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 8011086:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 801108a:	42aa      	cmp	r2, r5
 801108c:	d1f9      	bne.n	8011082 <chvprintf+0x4e2>
 801108e:	9d03      	ldr	r5, [sp, #12]
 8011090:	1b52      	subs	r2, r2, r5
 8011092:	1e53      	subs	r3, r2, #1
 8011094:	1aa4      	subs	r4, r4, r2
 8011096:	9301      	str	r3, [sp, #4]
 8011098:	e73b      	b.n	8010f12 <chvprintf+0x372>
 801109a:	4652      	mov	r2, sl
      if (is_long)
 801109c:	2b19      	cmp	r3, #25
 801109e:	f852 1b04 	ldr.w	r1, [r2], #4
 80110a2:	46a9      	mov	r9, r5
        l = va_arg(ap, int);
 80110a4:	bf88      	it	hi
 80110a6:	4692      	movhi	sl, r2
      if (is_long)
 80110a8:	d8d0      	bhi.n	801104c <chvprintf+0x4ac>
 80110aa:	e7cc      	b.n	8011046 <chvprintf+0x4a6>
    switch (c) {
 80110ac:	46a9      	mov	r9, r5
 80110ae:	f04f 0c10 	mov.w	ip, #16
 80110b2:	e76e      	b.n	8010f92 <chvprintf+0x3f2>
        *p++ = '-';
 80110b4:	232d      	movs	r3, #45	; 0x2d
 80110b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80110ba:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80110be:	9301      	str	r3, [sp, #4]
 80110c0:	ab0a      	add	r3, sp, #40	; 0x28
        f = -f;
 80110c2:	eeb1 8a48 	vneg.f32	s16, s16
 80110c6:	9303      	str	r3, [sp, #12]
 80110c8:	e689      	b.n	8010dde <chvprintf+0x23e>
 80110ca:	490d      	ldr	r1, [pc, #52]	; (8011100 <chvprintf+0x560>)
      if (precision == 0)
 80110cc:	460d      	mov	r5, r1
 80110ce:	f1b8 0f00 	cmp.w	r8, #0
 80110d2:	f43f ae5d 	beq.w	8010d90 <chvprintf+0x1f0>
      for (p = s; *p && (--precision >= 0); p++)
 80110d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80110da:	e65b      	b.n	8010d94 <chvprintf+0x1f4>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80110dc:	ed9f 7b04 	vldr	d7, [pc, #16]	; 80110f0 <chvprintf+0x550>
 80110e0:	4d08      	ldr	r5, [pc, #32]	; (8011104 <chvprintf+0x564>)
 80110e2:	9509      	str	r5, [sp, #36]	; 0x24
 80110e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110e8:	e693      	b.n	8010e12 <chvprintf+0x272>
 80110ea:	bf00      	nop
 80110ec:	f3af 8000 	nop.w
 80110f0:	00000000 	.word	0x00000000
 80110f4:	41cdcd65 	.word	0x41cdcd65
 80110f8:	08017ce0 	.word	0x08017ce0
 80110fc:	cccccccd 	.word	0xcccccccd
 8011100:	08017cd0 	.word	0x08017cd0
 8011104:	05f5e100 	.word	0x05f5e100
      for (p = s; *p && (--precision >= 0); p++)
 8011108:	2b00      	cmp	r3, #0
 801110a:	d1e4      	bne.n	80110d6 <chvprintf+0x536>
 801110c:	f04f 33ff 	mov.w	r3, #4294967295
 8011110:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8011112:	2720      	movs	r7, #32
 8011114:	e6fd      	b.n	8010f12 <chvprintf+0x372>
        *p++ = '-';
 8011116:	232d      	movs	r3, #45	; 0x2d
 8011118:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801111c:	ab0a      	add	r3, sp, #40	; 0x28
        l = -l;
 801111e:	4249      	negs	r1, r1
        *p++ = '-';
 8011120:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 8011124:	9303      	str	r3, [sp, #12]
 8011126:	e795      	b.n	8011054 <chvprintf+0x4b4>
      for (p = s; *p && (--precision >= 0); p++)
 8011128:	f04f 33ff 	mov.w	r3, #4294967295
 801112c:	9301      	str	r3, [sp, #4]
      filler = ' ';
 801112e:	2720      	movs	r7, #32
 8011130:	e6f1      	b.n	8010f16 <chvprintf+0x376>
 8011132:	bf00      	nop
	...

08011140 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8011140:	2101      	movs	r1, #1
void hw_init_gpio(void) {
 8011142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8011144:	4608      	mov	r0, r1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOC, 4,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8011146:	4d48      	ldr	r5, [pc, #288]	; (8011268 <hw_init_gpio+0x128>)
	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 10, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();

	// GPIOB (DCCAL)
	palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011148:	4e48      	ldr	r6, [pc, #288]	; (801126c <hw_init_gpio+0x12c>)

	// GPIOA Configuration: Channel 1 to 3 as alternate function push-pull
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1)  |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 801114a:	4c49      	ldr	r4, [pc, #292]	; (8011270 <hw_init_gpio+0x130>)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 801114c:	f004 fde0 	bl	8015d10 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8011150:	2101      	movs	r1, #1
 8011152:	2002      	movs	r0, #2
 8011154:	f004 fddc 	bl	8015d10 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8011158:	2101      	movs	r1, #1
 801115a:	2004      	movs	r0, #4
 801115c:	f004 fdd8 	bl	8015d10 <RCC_AHB1PeriphClockCmd>
	palSetPadMode(GPIOC, 4,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8011160:	4628      	mov	r0, r5
 8011162:	2219      	movs	r2, #25
 8011164:	2110      	movs	r1, #16
 8011166:	f7fe f8eb 	bl	800f340 <_pal_lld_setgroupmode>
	DISABLE_GATE();
 801116a:	f44f 6780 	mov.w	r7, #1024	; 0x400
	palSetPadMode(GPIOC, 5,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 801116e:	4628      	mov	r0, r5
 8011170:	2219      	movs	r2, #25
 8011172:	2120      	movs	r1, #32
 8011174:	f7fe f8e4 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 10, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011178:	4628      	mov	r0, r5
 801117a:	4639      	mov	r1, r7
 801117c:	2219      	movs	r2, #25
 801117e:	f7fe f8df 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011182:	4630      	mov	r0, r6
	DISABLE_GATE();
 8011184:	836f      	strh	r7, [r5, #26]
	palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 8011186:	2219      	movs	r2, #25
 8011188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801118c:	f7fe f8d8 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1)  |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 8011190:	4620      	mov	r0, r4
 8011192:	229a      	movs	r2, #154	; 0x9a
 8011194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011198:	f7fe f8d2 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1)  |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 801119c:	4620      	mov	r0, r4
 801119e:	229a      	movs	r2, #154	; 0x9a
 80111a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80111a4:	f7fe f8cc 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 80111a8:	4639      	mov	r1, r7
 80111aa:	4620      	mov	r0, r4
 80111ac:	229a      	movs	r2, #154	; 0x9a
 80111ae:	f7fe f8c7 	bl	800f340 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 80111b2:	4630      	mov	r0, r6
 80111b4:	229a      	movs	r2, #154	; 0x9a
 80111b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80111ba:	f7fe f8c1 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 80111be:	4630      	mov	r0, r6
 80111c0:	229a      	movs	r2, #154	; 0x9a
 80111c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80111c6:	f7fe f8bb 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 80111ca:	4630      	mov	r0, r6
 80111cc:	229a      	movs	r2, #154	; 0x9a
 80111ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80111d2:	f7fe f8b5 	bl	800f340 <_pal_lld_setgroupmode>
	//palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
	//palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
	//palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);

	// Fault pin
	palSetPadMode(GPIOC, 12, PAL_MODE_INPUT_PULLUP);
 80111d6:	4628      	mov	r0, r5
 80111d8:	2220      	movs	r2, #32
 80111da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80111de:	f7fe f8af 	bl	800f340 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 80111e2:	4620      	mov	r0, r4
 80111e4:	2203      	movs	r2, #3
 80111e6:	2101      	movs	r1, #1
 80111e8:	f7fe f8aa 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);
 80111ec:	4620      	mov	r0, r4
 80111ee:	2203      	movs	r2, #3
 80111f0:	2102      	movs	r1, #2
 80111f2:	f7fe f8a5 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);
 80111f6:	4620      	mov	r0, r4
 80111f8:	2203      	movs	r2, #3
 80111fa:	2104      	movs	r1, #4
 80111fc:	f7fe f8a0 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);
 8011200:	4620      	mov	r0, r4
 8011202:	2203      	movs	r2, #3
 8011204:	2108      	movs	r1, #8
 8011206:	f7fe f89b 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 801120a:	4620      	mov	r0, r4
 801120c:	2203      	movs	r2, #3
 801120e:	2110      	movs	r1, #16
 8011210:	f7fe f896 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 8011214:	4620      	mov	r0, r4
 8011216:	2203      	movs	r2, #3
 8011218:	2120      	movs	r1, #32
 801121a:	f7fe f891 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 801121e:	4620      	mov	r0, r4
 8011220:	2203      	movs	r2, #3
 8011222:	2140      	movs	r1, #64	; 0x40
 8011224:	f7fe f88c 	bl	800f340 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);
 8011228:	4630      	mov	r0, r6
 801122a:	2203      	movs	r2, #3
 801122c:	2101      	movs	r1, #1
 801122e:	f7fe f887 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);
 8011232:	4630      	mov	r0, r6
 8011234:	2203      	movs	r2, #3
 8011236:	2102      	movs	r1, #2
 8011238:	f7fe f882 	bl	800f340 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);
 801123c:	4628      	mov	r0, r5
 801123e:	2203      	movs	r2, #3
 8011240:	2101      	movs	r1, #1
 8011242:	f7fe f87d 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 8011246:	4628      	mov	r0, r5
 8011248:	2203      	movs	r2, #3
 801124a:	2102      	movs	r1, #2
 801124c:	f7fe f878 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);
 8011250:	4628      	mov	r0, r5
 8011252:	2203      	movs	r2, #3
 8011254:	2104      	movs	r1, #4
 8011256:	f7fe f873 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 801125a:	4628      	mov	r0, r5
 801125c:	2203      	movs	r2, #3
 801125e:	2108      	movs	r1, #8
}
 8011260:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 8011264:	f7fe b86c 	b.w	800f340 <_pal_lld_setgroupmode>
 8011268:	40020800 	.word	0x40020800
 801126c:	40020400 	.word	0x40020400
 8011270:	40020000 	.word	0x40020000
	...

08011280 <hw_setup_adc_channels>:

void hw_setup_adc_channels(void) {
 8011280:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8011282:	4d32      	ldr	r5, [pc, #200]	; (801134c <hw_setup_adc_channels+0xcc>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 8011284:	4c32      	ldr	r4, [pc, #200]	; (8011350 <hw_setup_adc_channels+0xd0>)
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_6, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);

	// ADC3 regular channels
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 8011286:	4e33      	ldr	r6, [pc, #204]	; (8011354 <hw_setup_adc_channels+0xd4>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8011288:	2301      	movs	r3, #1
 801128a:	4628      	mov	r0, r5
 801128c:	461a      	mov	r2, r3
 801128e:	2100      	movs	r1, #0
 8011290:	f004 faae 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 8011294:	4628      	mov	r0, r5
 8011296:	2301      	movs	r3, #1
 8011298:	2202      	movs	r2, #2
 801129a:	2108      	movs	r1, #8
 801129c:	f004 faa8 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);
 80112a0:	4628      	mov	r0, r5
 80112a2:	2301      	movs	r3, #1
 80112a4:	2203      	movs	r2, #3
 80112a6:	2111      	movs	r1, #17
 80112a8:	f004 faa2 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 80112ac:	2204      	movs	r2, #4
 80112ae:	4628      	mov	r0, r5
 80112b0:	4611      	mov	r1, r2
 80112b2:	2301      	movs	r3, #1
 80112b4:	f004 fa9c 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 80112b8:	2301      	movs	r3, #1
 80112ba:	4620      	mov	r0, r4
 80112bc:	461a      	mov	r2, r3
 80112be:	4619      	mov	r1, r3
 80112c0:	f004 fa96 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 80112c4:	4620      	mov	r0, r4
 80112c6:	2301      	movs	r3, #1
 80112c8:	2202      	movs	r2, #2
 80112ca:	2109      	movs	r1, #9
 80112cc:	f004 fa90 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_6, 3, ADC_SampleTime_15Cycles);
 80112d0:	4620      	mov	r0, r4
 80112d2:	2301      	movs	r3, #1
 80112d4:	2203      	movs	r2, #3
 80112d6:	2106      	movs	r1, #6
 80112d8:	f004 fa8a 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 80112dc:	4620      	mov	r0, r4
 80112de:	2301      	movs	r3, #1
 80112e0:	2204      	movs	r2, #4
 80112e2:	2105      	movs	r1, #5
 80112e4:	f004 fa84 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 80112e8:	2301      	movs	r3, #1
 80112ea:	4630      	mov	r0, r6
 80112ec:	461a      	mov	r2, r3
 80112ee:	2102      	movs	r1, #2
 80112f0:	f004 fa7e 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 80112f4:	4630      	mov	r0, r6
 80112f6:	2301      	movs	r3, #1
 80112f8:	2202      	movs	r2, #2
 80112fa:	2103      	movs	r1, #3
 80112fc:	f004 fa78 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 8011300:	4630      	mov	r0, r6
 8011302:	2301      	movs	r3, #1
 8011304:	2203      	movs	r2, #3
 8011306:	210c      	movs	r1, #12
 8011308:	f004 fa72 	bl	80157f0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 4, ADC_SampleTime_15Cycles);
 801130c:	4630      	mov	r0, r6
 801130e:	2301      	movs	r3, #1
 8011310:	2204      	movs	r2, #4
 8011312:	2103      	movs	r1, #3
 8011314:	f004 fa6c 	bl	80157f0 <ADC_RegularChannelConfig>

	// Injected channels
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
 8011318:	2301      	movs	r3, #1
 801131a:	4628      	mov	r0, r5
 801131c:	461a      	mov	r2, r3
 801131e:	2109      	movs	r1, #9
 8011320:	f004 fabe 	bl	80158a0 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 8011324:	4628      	mov	r0, r5
 8011326:	2301      	movs	r3, #1
 8011328:	2202      	movs	r2, #2
 801132a:	2108      	movs	r1, #8
 801132c:	f004 fab8 	bl	80158a0 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
 8011330:	2301      	movs	r3, #1
 8011332:	4620      	mov	r0, r4
 8011334:	461a      	mov	r2, r3
 8011336:	2108      	movs	r1, #8
 8011338:	f004 fab2 	bl	80158a0 <ADC_InjectedChannelConfig>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 801133c:	4620      	mov	r0, r4
 801133e:	2301      	movs	r3, #1
 8011340:	2202      	movs	r2, #2
 8011342:	2109      	movs	r1, #9
}
 8011344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 8011348:	f004 baaa 	b.w	80158a0 <ADC_InjectedChannelConfig>
 801134c:	40012000 	.word	0x40012000
 8011350:	40012100 	.word	0x40012100
 8011354:	40012200 	.word	0x40012200
	...

08011360 <hw_start_i2c>:
	servos[1].pin = 4;
	servos[1].offset = 0;
	servos[1].pos = 0;
}

void hw_start_i2c(void) {
 8011360:	b510      	push	{r4, lr}
	i2cAcquireBus(&HW_I2C_DEV);

	if (!i2c_running) {
 8011362:	4c0f      	ldr	r4, [pc, #60]	; (80113a0 <hw_start_i2c+0x40>)
	i2cAcquireBus(&HW_I2C_DEV);
 8011364:	480f      	ldr	r0, [pc, #60]	; (80113a4 <hw_start_i2c+0x44>)
 8011366:	f7fc fca3 	bl	800dcb0 <i2cAcquireBus>
	if (!i2c_running) {
 801136a:	7823      	ldrb	r3, [r4, #0]
 801136c:	b99b      	cbnz	r3, 8011396 <hw_start_i2c+0x36>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN,	PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_OSPEED_MID1 | PAL_STM32_PUDR_PULLUP);
 801136e:	f240 222e 	movw	r2, #558	; 0x22e
 8011372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011376:	480c      	ldr	r0, [pc, #48]	; (80113a8 <hw_start_i2c+0x48>)
 8011378:	f7fd ffe2 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN,	PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_OSPEED_MID1 | PAL_STM32_PUDR_PULLUP);
 801137c:	f240 222e 	movw	r2, #558	; 0x22e
 8011380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011384:	4808      	ldr	r0, [pc, #32]	; (80113a8 <hw_start_i2c+0x48>)
 8011386:	f7fd ffdb 	bl	800f340 <_pal_lld_setgroupmode>

		i2cStart(&HW_I2C_DEV, &i2cfg);
 801138a:	4908      	ldr	r1, [pc, #32]	; (80113ac <hw_start_i2c+0x4c>)
 801138c:	4805      	ldr	r0, [pc, #20]	; (80113a4 <hw_start_i2c+0x44>)
 801138e:	f7fc fc37 	bl	800dc00 <i2cStart>
		i2c_running = true;
 8011392:	2301      	movs	r3, #1
 8011394:	7023      	strb	r3, [r4, #0]
	}

	i2cReleaseBus(&HW_I2C_DEV);
 8011396:	4803      	ldr	r0, [pc, #12]	; (80113a4 <hw_start_i2c+0x44>)
}
 8011398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2cReleaseBus(&HW_I2C_DEV);
 801139c:	f7fc bc90 	b.w	800dcc0 <i2cReleaseBus>
 80113a0:	20001338 	.word	0x20001338
 80113a4:	20000fc4 	.word	0x20000fc4
 80113a8:	40020400 	.word	0x40020400
 80113ac:	08017d10 	.word	0x08017d10

080113b0 <hw_stop_i2c>:

void hw_stop_i2c(void) {
 80113b0:	b510      	push	{r4, lr}
	i2cAcquireBus(&HW_I2C_DEV);

	if (i2c_running) {
 80113b2:	4c0e      	ldr	r4, [pc, #56]	; (80113ec <hw_stop_i2c+0x3c>)
	i2cAcquireBus(&HW_I2C_DEV);
 80113b4:	480e      	ldr	r0, [pc, #56]	; (80113f0 <hw_stop_i2c+0x40>)
 80113b6:	f7fc fc7b 	bl	800dcb0 <i2cAcquireBus>
	if (i2c_running) {
 80113ba:	7823      	ldrb	r3, [r4, #0]
 80113bc:	b183      	cbz	r3, 80113e0 <hw_stop_i2c+0x30>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN, PAL_MODE_INPUT);
 80113be:	2200      	movs	r2, #0
 80113c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80113c4:	480b      	ldr	r0, [pc, #44]	; (80113f4 <hw_stop_i2c+0x44>)
 80113c6:	f7fd ffbb 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN, PAL_MODE_INPUT);
 80113ca:	2200      	movs	r2, #0
 80113cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80113d0:	4808      	ldr	r0, [pc, #32]	; (80113f4 <hw_stop_i2c+0x44>)
 80113d2:	f7fd ffb5 	bl	800f340 <_pal_lld_setgroupmode>

		i2cStop(&HW_I2C_DEV);
 80113d6:	4806      	ldr	r0, [pc, #24]	; (80113f0 <hw_stop_i2c+0x40>)
 80113d8:	f7fc fc22 	bl	800dc20 <i2cStop>
		i2c_running = false;
 80113dc:	2300      	movs	r3, #0
 80113de:	7023      	strb	r3, [r4, #0]

	}

	i2cReleaseBus(&HW_I2C_DEV);
 80113e0:	4803      	ldr	r0, [pc, #12]	; (80113f0 <hw_stop_i2c+0x40>)
}
 80113e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	i2cReleaseBus(&HW_I2C_DEV);
 80113e6:	f7fc bc6b 	b.w	800dcc0 <i2cReleaseBus>
 80113ea:	bf00      	nop
 80113ec:	20001338 	.word	0x20001338
 80113f0:	20000fc4 	.word	0x20000fc4
 80113f4:	40020400 	.word	0x40020400
	...

08011400 <hw_try_restore_i2c>:

/**
 * Try to restore the i2c bus
 */
void hw_try_restore_i2c(void) {
 8011400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (i2c_running) {
 8011402:	4b28      	ldr	r3, [pc, #160]	; (80114a4 <hw_try_restore_i2c+0xa4>)
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	b903      	cbnz	r3, 801140a <hw_try_restore_i2c+0xa>
		HW_I2C_DEV.state = I2C_STOP;
		i2cStart(&HW_I2C_DEV, &i2cfg);

		i2cReleaseBus(&HW_I2C_DEV);
	}
}
 8011408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN, PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_OSPEED_MID1 | PAL_STM32_PUDR_PULLUP);
 801140a:	4d27      	ldr	r5, [pc, #156]	; (80114a8 <hw_try_restore_i2c+0xa8>)
		i2cAcquireBus(&HW_I2C_DEV);
 801140c:	4827      	ldr	r0, [pc, #156]	; (80114ac <hw_try_restore_i2c+0xac>)
 801140e:	f7fc fc4f 	bl	800dcb0 <i2cAcquireBus>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN, PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_OSPEED_MID1 | PAL_STM32_PUDR_PULLUP);
 8011412:	4628      	mov	r0, r5
 8011414:	222c      	movs	r2, #44	; 0x2c
 8011416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801141a:	f7fd ff91 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN, PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_OSPEED_MID1 | PAL_STM32_PUDR_PULLUP);
 801141e:	4628      	mov	r0, r5
 8011420:	222c      	movs	r2, #44	; 0x2c
 8011422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011426:	f7fd ff8b 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 801142a:	f44f 6680 	mov.w	r6, #1024	; 0x400
		palSetPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 801142e:	f44f 6300 	mov.w	r3, #2048	; 0x800
		palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8011432:	832e      	strh	r6, [r5, #24]
		chThdSleep(1);
 8011434:	2001      	movs	r0, #1
		palSetPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 8011436:	832b      	strh	r3, [r5, #24]
		chThdSleep(1);
 8011438:	f7fb ff4a 	bl	800d2d0 <chThdSleep>
			palClearPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 801143c:	4637      	mov	r7, r6
		chThdSleep(1);
 801143e:	2410      	movs	r4, #16
			chThdSleep(1);
 8011440:	2001      	movs	r0, #1
			palClearPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8011442:	836f      	strh	r7, [r5, #26]
			chThdSleep(1);
 8011444:	f7fb ff44 	bl	800d2d0 <chThdSleep>
			palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8011448:	832e      	strh	r6, [r5, #24]
			chThdSleep(1);
 801144a:	2001      	movs	r0, #1
 801144c:	f7fb ff40 	bl	800d2d0 <chThdSleep>
		for(int i = 0;i < 16;i++) {
 8011450:	3c01      	subs	r4, #1
 8011452:	d1f5      	bne.n	8011440 <hw_try_restore_i2c+0x40>
		palClearPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 8011454:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8011458:	836f      	strh	r7, [r5, #26]
		chThdSleep(1);
 801145a:	2001      	movs	r0, #1
 801145c:	f7fb ff38 	bl	800d2d0 <chThdSleep>
		palClearPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8011460:	836e      	strh	r6, [r5, #26]
		chThdSleep(1);
 8011462:	2001      	movs	r0, #1
 8011464:	f7fb ff34 	bl	800d2d0 <chThdSleep>
		palSetPad(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN);
 8011468:	832e      	strh	r6, [r5, #24]
		chThdSleep(1);
 801146a:	2001      	movs	r0, #1
 801146c:	f7fb ff30 	bl	800d2d0 <chThdSleep>
		HW_I2C_DEV.state = I2C_STOP;
 8011470:	4c0e      	ldr	r4, [pc, #56]	; (80114ac <hw_try_restore_i2c+0xac>)
		palSetPad(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN);
 8011472:	832f      	strh	r7, [r5, #24]
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN, PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_OSPEED_MID1 |	PAL_STM32_PUDR_PULLUP);
 8011474:	f240 222e 	movw	r2, #558	; 0x22e
 8011478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801147c:	480a      	ldr	r0, [pc, #40]	; (80114a8 <hw_try_restore_i2c+0xa8>)
 801147e:	f7fd ff5f 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN, PAL_MODE_ALTERNATE(HW_I2C_GPIO_AF) |	PAL_STM32_OTYPE_OPENDRAIN |	PAL_STM32_OSPEED_MID1 |	PAL_STM32_PUDR_PULLUP);
 8011482:	4639      	mov	r1, r7
 8011484:	f240 222e 	movw	r2, #558	; 0x22e
 8011488:	4807      	ldr	r0, [pc, #28]	; (80114a8 <hw_try_restore_i2c+0xa8>)
 801148a:	f7fd ff59 	bl	800f340 <_pal_lld_setgroupmode>
		HW_I2C_DEV.state = I2C_STOP;
 801148e:	2301      	movs	r3, #1
		i2cStart(&HW_I2C_DEV, &i2cfg);
 8011490:	4620      	mov	r0, r4
 8011492:	4907      	ldr	r1, [pc, #28]	; (80114b0 <hw_try_restore_i2c+0xb0>)
		HW_I2C_DEV.state = I2C_STOP;
 8011494:	7023      	strb	r3, [r4, #0]
		i2cStart(&HW_I2C_DEV, &i2cfg);
 8011496:	f7fc fbb3 	bl	800dc00 <i2cStart>
		i2cReleaseBus(&HW_I2C_DEV);
 801149a:	4620      	mov	r0, r4
}
 801149c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		i2cReleaseBus(&HW_I2C_DEV);
 80114a0:	f7fc bc0e 	b.w	800dcc0 <i2cReleaseBus>
 80114a4:	20001338 	.word	0x20001338
 80114a8:	40020400 	.word	0x40020400
 80114ac:	20000fc4 	.word	0x20000fc4
 80114b0:	08017d10 	.word	0x08017d10
	...

080114c0 <conf_general_init>:
uint16_t VirtAddVarTab[NB_OF_VAR];

// Private variables
mcConfiguration_t mcconf, mcconf_old;

void conf_general_init(void) {
 80114c0:	b508      	push	{r3, lr}
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));
 80114c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80114c6:	2100      	movs	r1, #0
 80114c8:	4810      	ldr	r0, [pc, #64]	; (801150c <conf_general_init+0x4c>)
 80114ca:	f006 fa61 	bl	8017990 <memset>
 80114ce:	4a10      	ldr	r2, [pc, #64]	; (8011510 <conf_general_init+0x50>)
 80114d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80114d4:	f102 01a0 	add.w	r1, r2, #160	; 0xa0

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++)
	{
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
 80114d8:	f822 3f02 	strh.w	r3, [r2, #2]!
 80114dc:	3301      	adds	r3, #1
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++)
 80114de:	428a      	cmp	r2, r1
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	d1f9      	bne.n	80114d8 <conf_general_init+0x18>
 80114e4:	4a0b      	ldr	r2, [pc, #44]	; (8011514 <conf_general_init+0x54>)
 80114e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80114ea:	f102 01a0 	add.w	r1, r2, #160	; 0xa0
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) 
	{
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
 80114ee:	f822 3f02 	strh.w	r3, [r2, #2]!
 80114f2:	3301      	adds	r3, #1
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) 
 80114f4:	4291      	cmp	r1, r2
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	d1f9      	bne.n	80114ee <conf_general_init+0x2e>
	}

	FLASH_Unlock();
 80114fa:	f004 fb59 	bl	8015bb0 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80114fe:	20f2      	movs	r0, #242	; 0xf2
 8011500:	f004 fb66 	bl	8015bd0 <FLASH_ClearFlag>
	EE_Init();
}
 8011504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	EE_Init();
 8011508:	f002 bd82 	b.w	8014010 <EE_Init>
 801150c:	2000133c 	.word	0x2000133c
 8011510:	2000133a 	.word	0x2000133a
 8011514:	200013da 	.word	0x200013da
	...

08011520 <conf_general_get_default_mc_configuration>:
 * Load the compiled default mcConfiguration_t.
 *
 * @param conf
 * A pointer to store the default configuration to.
 */
void conf_general_get_default_mc_configuration(mcConfiguration_t *conf) {
 8011520:	b570      	push	{r4, r5, r6, lr}
	memset(conf, 0, sizeof(mcConfiguration_t));
 8011522:	22d4      	movs	r2, #212	; 0xd4
 8011524:	2100      	movs	r1, #0
 8011526:	f006 fa33 	bl	8017990 <memset>
 801152a:	4603      	mov	r3, r0

	conf->l_current_max = MCCONF_L_CURRENT_MAX;
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
	conf->l_in_current_max = MCCONF_L_IN_CURRENT_MAX;
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
	conf->l_abs_current_max = MCCONF_L_MAX_ABS_CURRENT;
 801152c:	4c17      	ldr	r4, [pc, #92]	; (801158c <conf_general_get_default_mc_configuration+0x6c>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
 801152e:	4918      	ldr	r1, [pc, #96]	; (8011590 <conf_general_get_default_mc_configuration+0x70>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
 8011530:	4818      	ldr	r0, [pc, #96]	; (8011594 <conf_general_get_default_mc_configuration+0x74>)
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
 8011532:	4a19      	ldr	r2, [pc, #100]	; (8011598 <conf_general_get_default_mc_configuration+0x78>)
	conf->l_abs_current_max = MCCONF_L_MAX_ABS_CURRENT;
 8011534:	621c      	str	r4, [r3, #32]
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
 8011536:	6299      	str	r1, [r3, #40]	; 0x28
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
	conf->l_max_vin = MCCONF_L_MAX_VOLTAGE;
 8011538:	4c18      	ldr	r4, [pc, #96]	; (801159c <conf_general_get_default_mc_configuration+0x7c>)
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
	conf->l_temp_motor_start = MCCONF_L_LIM_TEMP_MOTOR_START;
	conf->l_temp_motor_end = MCCONF_L_LIM_TEMP_MOTOR_END;
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
	conf->l_max_duty = MCCONF_L_MAX_DUTY;
 801153a:	4919      	ldr	r1, [pc, #100]	; (80115a0 <conf_general_get_default_mc_configuration+0x80>)
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
 801153c:	4d19      	ldr	r5, [pc, #100]	; (80115a4 <conf_general_get_default_mc_configuration+0x84>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
 801153e:	6258      	str	r0, [r3, #36]	; 0x24
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
 8011540:	631a      	str	r2, [r3, #48]	; 0x30
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
 8011542:	4819      	ldr	r0, [pc, #100]	; (80115a8 <conf_general_get_default_mc_configuration+0x88>)
	conf->l_current_max = MCCONF_L_CURRENT_MAX;
 8011544:	4a19      	ldr	r2, [pc, #100]	; (80115ac <conf_general_get_default_mc_configuration+0x8c>)
	conf->l_max_vin = MCCONF_L_MAX_VOLTAGE;
 8011546:	63dc      	str	r4, [r3, #60]	; 0x3c
	conf->l_max_duty = MCCONF_L_MAX_DUTY;
 8011548:	6619      	str	r1, [r3, #96]	; 0x60
	conf->l_battery_cut_start = MCCONF_L_BATTERY_CUT_START;
 801154a:	4c19      	ldr	r4, [pc, #100]	; (80115b0 <conf_general_get_default_mc_configuration+0x90>)
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
 801154c:	4e19      	ldr	r6, [pc, #100]	; (80115b4 <conf_general_get_default_mc_configuration+0x94>)
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
 801154e:	635d      	str	r5, [r3, #52]	; 0x34
	conf->pwm_mode = MCCONF_PWM_MODE;
 8011550:	2101      	movs	r1, #1
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
 8011552:	4d19      	ldr	r5, [pc, #100]	; (80115b8 <conf_general_get_default_mc_configuration+0x98>)
	conf->l_battery_cut_start = MCCONF_L_BATTERY_CUT_START;
 8011554:	641c      	str	r4, [r3, #64]	; 0x40
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
 8011556:	65d8      	str	r0, [r3, #92]	; 0x5c
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
 8011558:	4c18      	ldr	r4, [pc, #96]	; (80115bc <conf_general_get_default_mc_configuration+0x9c>)
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
 801155a:	4819      	ldr	r0, [pc, #100]	; (80115c0 <conf_general_get_default_mc_configuration+0xa0>)
	conf->pwm_mode = MCCONF_PWM_MODE;
 801155c:	7299      	strb	r1, [r3, #10]
	conf->l_slow_abs_current = MCCONF_L_SLOW_ABS_OVERCURRENT;
 801155e:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	conf->l_current_max = MCCONF_L_CURRENT_MAX;
 8011562:	611a      	str	r2, [r3, #16]
	conf->comm_mode = MCCONF_COMM_MODE;
 8011564:	2100      	movs	r1, #0
	conf->l_in_current_max = MCCONF_L_IN_CURRENT_MAX;
 8011566:	619a      	str	r2, [r3, #24]

	conf->lo_current_max = conf->l_current_max;
 8011568:	66da      	str	r2, [r3, #108]	; 0x6c
	conf->lo_current_min = conf->l_current_min;
	conf->lo_in_current_max = conf->l_in_current_max;
 801156a:	675a      	str	r2, [r3, #116]	; 0x74
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
 801156c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
	conf->comm_mode = MCCONF_COMM_MODE;
 8011570:	72d9      	strb	r1, [r3, #11]
	conf->motor_type = MCCONF_DEFAULT_MOTOR_TYPE;
 8011572:	7319      	strb	r1, [r3, #12]
	conf->sensor_mode = MCCONF_SENSOR_MODE;
 8011574:	7359      	strb	r1, [r3, #13]
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
 8011576:	615e      	str	r6, [r3, #20]
	conf->lo_current_min = conf->l_current_min;
 8011578:	671e      	str	r6, [r3, #112]	; 0x70
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
 801157a:	61dd      	str	r5, [r3, #28]
	conf->lo_in_current_min = conf->l_in_current_min;
 801157c:	679d      	str	r5, [r3, #120]	; 0x78
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
 801157e:	639a      	str	r2, [r3, #56]	; 0x38
	conf->l_battery_cut_end = MCCONF_L_BATTERY_CUT_END;
 8011580:	645a      	str	r2, [r3, #68]	; 0x44
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
 8011582:	64dc      	str	r4, [r3, #76]	; 0x4c
	conf->l_temp_motor_start = MCCONF_L_LIM_TEMP_MOTOR_START;
 8011584:	655c      	str	r4, [r3, #84]	; 0x54
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
 8011586:	6518      	str	r0, [r3, #80]	; 0x50
	conf->l_temp_motor_end = MCCONF_L_LIM_TEMP_MOTOR_END;
 8011588:	6598      	str	r0, [r3, #88]	; 0x58
	conf->m_duty_ramp_step = MCCONF_M_RAMP_STEP;
	conf->m_duty_ramp_step_rpm_lim = MCCONF_M_RAMP_STEP_RPM_LIM;
	conf->m_current_backoff_gain = MCCONF_M_CURRENT_BACKOFF_GAIN;
	conf->m_encoder_counts = MCCONF_M_ENCODER_COUNTS;
	conf->m_sensor_port_mode = MCCONF_M_SENSOR_PORT_MODE;*/
}
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	43020000 	.word	0x43020000
 8011590:	47c35000 	.word	0x47c35000
 8011594:	c7c35000 	.word	0xc7c35000
 8011598:	43960000 	.word	0x43960000
 801159c:	42640000 	.word	0x42640000
 80115a0:	3f733333 	.word	0x3f733333
 80115a4:	44bb8000 	.word	0x44bb8000
 80115a8:	3ba3d70a 	.word	0x3ba3d70a
 80115ac:	42700000 	.word	0x42700000
 80115b0:	41200000 	.word	0x41200000
 80115b4:	c2700000 	.word	0xc2700000
 80115b8:	c2200000 	.word	0xc2200000
 80115bc:	42a00000 	.word	0x42a00000
 80115c0:	42c80000 	.word	0x42c80000
	...

080115d0 <conf_general_read_app_configuration>:
 * Read app_configuration from EEPROM. If this fails, default values will be used.
 *
 * @param conf
 * A pointer to a app_configuration struct to write the read configuration to.
 */
void conf_general_read_app_configuration(app_configuration *conf) {
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	4606      	mov	r6, r0
 80115d4:	b082      	sub	sp, #8
 80115d6:	1c45      	adds	r5, r0, #1
 80115d8:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80115dc:	e00a      	b.n	80115f4 <conf_general_read_app_configuration+0x24>
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 80115de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 80115e2:	f5b4 6f02 	cmp.w	r4, #2080	; 0x820
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 80115e6:	ea4f 2213 	mov.w	r2, r3, lsr #8
 80115ea:	f805 2c01 	strb.w	r2, [r5, #-1]
			conf_addr[2 * i + 1] = var & 0xFF;
 80115ee:	f805 3b02 	strb.w	r3, [r5], #2
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) {
 80115f2:	d010      	beq.n	8011616 <conf_general_read_app_configuration+0x46>
		if (EE_ReadVariable(EEPROM_BASE_APPCONF + i, &var) == 0) {
 80115f4:	4620      	mov	r0, r4
 80115f6:	f10d 0106 	add.w	r1, sp, #6
 80115fa:	f002 fcd1 	bl	8013fa0 <EE_ReadVariable>
 80115fe:	3401      	adds	r4, #1
 8011600:	b2a4      	uxth	r4, r4
 8011602:	2800      	cmp	r0, #0
 8011604:	d0eb      	beq.n	80115de <conf_general_read_app_configuration+0xe>
	memset(conf, 0, sizeof(app_configuration));
 8011606:	4630      	mov	r0, r6
 8011608:	22a0      	movs	r2, #160	; 0xa0
 801160a:	2100      	movs	r1, #0

	// Set the default configuration
	if (!is_ok) {
		conf_general_get_default_app_configuration(conf);
	}
}
 801160c:	b002      	add	sp, #8
 801160e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(conf, 0, sizeof(app_configuration));
 8011612:	f006 b9bd 	b.w	8017990 <memset>
}
 8011616:	b002      	add	sp, #8
 8011618:	bd70      	pop	{r4, r5, r6, pc}
 801161a:	bf00      	nop
 801161c:	0000      	movs	r0, r0
	...

08011620 <conf_general_read_mc_configuration>:
 *
 * @param conf
 * A pointer to a mcConfiguration_t struct to write the read configuration to.
 */
void conf_general_read_mc_configuration(mcConfiguration_t *conf)
{
 8011620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011622:	4607      	mov	r7, r0
 8011624:	b083      	sub	sp, #12
 8011626:	1c45      	adds	r5, r0, #1
 8011628:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) 
 801162c:	f240 4652 	movw	r6, #1106	; 0x452
 8011630:	e009      	b.n	8011646 <conf_general_read_mc_configuration+0x26>
	{
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) 
		{
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8011632:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) 
 8011636:	42b4      	cmp	r4, r6
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 8011638:	ea4f 2213 	mov.w	r2, r3, lsr #8
 801163c:	f805 2c01 	strb.w	r2, [r5, #-1]
			conf_addr[2 * i + 1] = var & 0xFF;
 8011640:	f805 3b02 	strb.w	r3, [r5], #2
	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) 
 8011644:	d016      	beq.n	8011674 <conf_general_read_mc_configuration+0x54>
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) 
 8011646:	4620      	mov	r0, r4
 8011648:	f10d 0106 	add.w	r1, sp, #6
 801164c:	f002 fca8 	bl	8013fa0 <EE_ReadVariable>
 8011650:	3401      	adds	r4, #1
 8011652:	b2a4      	uxth	r4, r4
 8011654:	2800      	cmp	r0, #0
 8011656:	d0ec      	beq.n	8011632 <conf_general_read_mc_configuration+0x12>
			is_ok = false;
			break;
		}
	}

	chvprintf(&SDU1, (uint8_t *)"to conf_general.c : conf_general_read_mc_configuration\r\n");
 8011658:	4909      	ldr	r1, [pc, #36]	; (8011680 <conf_general_read_mc_configuration+0x60>)
 801165a:	480a      	ldr	r0, [pc, #40]	; (8011684 <conf_general_read_mc_configuration+0x64>)
 801165c:	f7ff faa0 	bl	8010ba0 <chvprintf>


	if (!is_ok) 
	{
		
		conf_general_get_default_mc_configuration(conf);
 8011660:	4638      	mov	r0, r7
 8011662:	f7ff ff5d 	bl	8011520 <conf_general_get_default_mc_configuration>
	}

	chvprintf(&SDU1, (uint8_t *)"%d\r\n", conf->motor_type);
 8011666:	7b3a      	ldrb	r2, [r7, #12]
 8011668:	4907      	ldr	r1, [pc, #28]	; (8011688 <conf_general_read_mc_configuration+0x68>)
 801166a:	4806      	ldr	r0, [pc, #24]	; (8011684 <conf_general_read_mc_configuration+0x64>)
 801166c:	f7ff fa98 	bl	8010ba0 <chvprintf>
}
 8011670:	b003      	add	sp, #12
 8011672:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chvprintf(&SDU1, (uint8_t *)"to conf_general.c : conf_general_read_mc_configuration\r\n");
 8011674:	4902      	ldr	r1, [pc, #8]	; (8011680 <conf_general_read_mc_configuration+0x60>)
 8011676:	4803      	ldr	r0, [pc, #12]	; (8011684 <conf_general_read_mc_configuration+0x64>)
 8011678:	f7ff fa92 	bl	8010ba0 <chvprintf>
 801167c:	e7f3      	b.n	8011666 <conf_general_read_mc_configuration+0x46>
 801167e:	bf00      	nop
 8011680:	08017d28 	.word	0x08017d28
 8011684:	20006ca8 	.word	0x20006ca8
 8011688:	08017d20 	.word	0x08017d20
 801168c:	00000000 	.word	0x00000000

08011690 <conf_general_store_mc_configuration>:
 *
 * @param conf
 * A pointer to the configuration that should be stored.
 */
bool conf_general_store_mc_configuration(mcConfiguration_t *conf) 
{
 8011690:	b570      	push	{r4, r5, r6, lr}

	mavlink_dbgString(0,"conf_general_store_mc_configuration");
 8011692:	4919      	ldr	r1, [pc, #100]	; (80116f8 <conf_general_store_mc_configuration+0x68>)
{
 8011694:	4605      	mov	r5, r0
	mavlink_dbgString(0,"conf_general_store_mc_configuration");
 8011696:	2000      	movs	r0, #0
 8011698:	f001 fcba 	bl	8013010 <mavlink_dbgString>


	mc_interface_unlock();
 801169c:	f000 fd80 	bl	80121a0 <mc_interface_unlock>
	//mc_interface_release_motor();

	utils_sys_lock_cnt();
 80116a0:	f002 fe7e 	bl	80143a0 <utils_sys_lock_cnt>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, DISABLE);
 80116a4:	2100      	movs	r1, #0
 80116a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80116aa:	f004 fb41 	bl	8015d30 <RCC_APB1PeriphClockCmd>

	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 80116ae:	20f2      	movs	r0, #242	; 0xf2
 80116b0:	f004 fa8e 	bl	8015bd0 <FLASH_ClearFlag>
 80116b4:	3501      	adds	r5, #1
 80116b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
			FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) {
 80116ba:	f240 4652 	movw	r6, #1106	; 0x452
 80116be:	e001      	b.n	80116c4 <conf_general_store_mc_configuration+0x34>
 80116c0:	42b4      	cmp	r4, r6
 80116c2:	d017      	beq.n	80116f4 <conf_general_store_mc_configuration+0x64>
		var = (conf_addr[2 * i] << 8) & 0xFF00;
 80116c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
		var |= conf_addr[2 * i + 1] & 0xFF;
 80116c8:	782b      	ldrb	r3, [r5, #0]

		if (EE_WriteVariable(EEPROM_BASE_MCCONF + i, var) != FLASH_COMPLETE) {
 80116ca:	4620      	mov	r0, r4
 80116cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80116d0:	f002 fd3e 	bl	8014150 <EE_WriteVariable>
 80116d4:	3401      	adds	r4, #1
 80116d6:	2809      	cmp	r0, #9
 80116d8:	b2a4      	uxth	r4, r4
 80116da:	f105 0502 	add.w	r5, r5, #2
 80116de:	d0ef      	beq.n	80116c0 <conf_general_store_mc_configuration+0x30>
			is_ok = false;
 80116e0:	2400      	movs	r4, #0
			break;
		}
	}

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 80116e2:	2101      	movs	r1, #1
 80116e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80116e8:	f004 fb22 	bl	8015d30 <RCC_APB1PeriphClockCmd>
	utils_sys_unlock_cnt();
 80116ec:	f002 fe68 	bl	80143c0 <utils_sys_unlock_cnt>
	
	return is_ok;
}
 80116f0:	4620      	mov	r0, r4
 80116f2:	bd70      	pop	{r4, r5, r6, pc}
	bool is_ok = true;
 80116f4:	2401      	movs	r4, #1
 80116f6:	e7f4      	b.n	80116e2 <conf_general_store_mc_configuration+0x52>
 80116f8:	08017d70 	.word	0x08017d70
 80116fc:	00000000 	.word	0x00000000

08011700 <timer_thread>:
	WWDG_SetCounter(100);

}


static THD_FUNCTION(timer_thread, arg) {
 8011700:	b508      	push	{r3, lr}
 8011702:	4b20      	ldr	r3, [pc, #128]	; (8011784 <timer_thread+0x84>)
 8011704:	4a20      	ldr	r2, [pc, #128]	; (8011788 <timer_thread+0x88>)
 8011706:	699b      	ldr	r3, [r3, #24]
 8011708:	4d20      	ldr	r5, [pc, #128]	; (801178c <timer_thread+0x8c>)
 801170a:	4c21      	ldr	r4, [pc, #132]	; (8011790 <timer_thread+0x90>)

		//LED_RED_ON();
		chThdSleepMilliseconds(250);

		//Target DC Bus, without sign.
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 801170c:	eddf aa21 	vldr	s21, [pc, #132]	; 8011794 <timer_thread+0x94>
 8011710:	ed9f aa21 	vldr	s20, [pc, #132]	; 8011798 <timer_thread+0x98>
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 8011714:	eddf 9a21 	vldr	s19, [pc, #132]	; 801179c <timer_thread+0x9c>
 8011718:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80117a0 <timer_thread+0xa0>
 801171c:	ed9f 9a21 	vldr	s18, [pc, #132]	; 80117a4 <timer_thread+0xa4>
 8011720:	eddf 8a21 	vldr	s17, [pc, #132]	; 80117a8 <timer_thread+0xa8>
 8011724:	619a      	str	r2, [r3, #24]
		chThdSleepMilliseconds(250);
 8011726:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801172a:	f7fb fdd1 	bl	800d2d0 <chThdSleep>
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 801172e:	8963      	ldrh	r3, [r4, #10]
 8011730:	ee07 3a10 	vmov	s14, r3
 8011734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 8011738:	8a23      	ldrh	r3, [r4, #16]
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 801173a:	ee89 0a87 	vdiv.f32	s0, s19, s14
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 801173e:	ee07 3a90 	vmov	s15, r3
 8011742:	eef8 7a67 	vcvt.f32.u32	s15, s15
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 8011746:	ee30 0a48 	vsub.f32	s0, s0, s16
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 801174a:	ee67 7aaa 	vmul.f32	s15, s15, s21
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 801174e:	ee80 0a08 	vdiv.f32	s0, s0, s16
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 8011752:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8011756:	edc5 7a00 	vstr	s15, [r5]
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 801175a:	f004 ff11 	bl	8016580 <logf>
 801175e:	ee80 0a09 	vdiv.f32	s0, s0, s18
		//LED_RED_OFF();

		chThdSleepMilliseconds(750);
 8011762:	f641 504c 	movw	r0, #7500	; 0x1d4c
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 8011766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801176a:	ee30 0a28 	vadd.f32	s0, s0, s17
 801176e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80117ac <timer_thread+0xac>
 8011772:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801177a:	edc5 7a01 	vstr	s15, [r5, #4]
		chThdSleepMilliseconds(750);
 801177e:	f7fb fda7 	bl	800d2d0 <chThdSleep>
 8011782:	e7d0      	b.n	8011726 <timer_thread+0x26>
 8011784:	20000c90 	.word	0x20000c90
 8011788:	08017da0 	.word	0x08017da0
 801178c:	200021f4 	.word	0x200021f4
 8011790:	20001320 	.word	0x20001320
 8011794:	3a534067 	.word	0x3a534067
 8011798:	4195d174 	.word	0x4195d174
 801179c:	4c1c363c 	.word	0x4c1c363c
 80117a0:	461c4000 	.word	0x461c4000
 80117a4:	4556a000 	.word	0x4556a000
 80117a8:	3b5bcf0f 	.word	0x3b5bcf0f
 80117ac:	43889333 	.word	0x43889333

080117b0 <mcpwm_adc_dma_int_handler>:
{
 80117b0:	b570      	push	{r4, r5, r6, lr}
	MCCtrlCnt++;
 80117b2:	4c71      	ldr	r4, [pc, #452]	; (8011978 <mcpwm_adc_dma_int_handler+0x1c8>)
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	3301      	adds	r3, #1
	if(MCCtrlCnt % HALL_SENSOR_DIV == 2) //speed ctrl
 80117b8:	f003 020f 	and.w	r2, r3, #15
 80117bc:	2a02      	cmp	r2, #2
{
 80117be:	ed2d 8b04 	vpush	{d8-d9}
	MCCtrlCnt++;
 80117c2:	6023      	str	r3, [r4, #0]
	if(MCCtrlCnt % HALL_SENSOR_DIV == 2) //speed ctrl
 80117c4:	f000 808b 	beq.w	80118de <mcpwm_adc_dma_int_handler+0x12e>
	if(MCCtrlCnt % SPD_CTRL_DIV == 1) //speed ctrl
 80117c8:	2a01      	cmp	r2, #1
 80117ca:	d079      	beq.n	80118c0 <mcpwm_adc_dma_int_handler+0x110>
	if(MCCtrlCnt % CURR_CTRL_DIV == 0)//current ctrl
 80117cc:	f013 0301 	ands.w	r3, r3, #1
 80117d0:	d16f      	bne.n	80118b2 <mcpwm_adc_dma_int_handler+0x102>
		if(!McCtrlBits.DcCalDone)
 80117d2:	4c6a      	ldr	r4, [pc, #424]	; (801197c <mcpwm_adc_dma_int_handler+0x1cc>)
		TIM12->CNT = 0;
 80117d4:	4a6a      	ldr	r2, [pc, #424]	; (8011980 <mcpwm_adc_dma_int_handler+0x1d0>)
		if(!McCtrlBits.DcCalDone)
 80117d6:	7821      	ldrb	r1, [r4, #0]
		TIM12->CNT = 0;
 80117d8:	6253      	str	r3, [r2, #36]	; 0x24
 80117da:	4a6a      	ldr	r2, [pc, #424]	; (8011984 <mcpwm_adc_dma_int_handler+0x1d4>)
		if(!McCtrlBits.DcCalDone)
 80117dc:	f011 0f01 	tst.w	r1, #1
 80117e0:	8913      	ldrh	r3, [r2, #8]
			MeasCurrParm.curr_start_samples++;
 80117e2:	4969      	ldr	r1, [pc, #420]	; (8011988 <mcpwm_adc_dma_int_handler+0x1d8>)
 80117e4:	88d2      	ldrh	r2, [r2, #6]
		if(!McCtrlBits.DcCalDone)
 80117e6:	d108      	bne.n	80117fa <mcpwm_adc_dma_int_handler+0x4a>
			MeasCurrParm.curr_start_samples++;
 80117e8:	8b0e      	ldrh	r6, [r1, #24]
			MeasCurrParm.curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80117ea:	8a8d      	ldrh	r5, [r1, #20]
			MeasCurrParm.curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80117ec:	8ac8      	ldrh	r0, [r1, #22]
			MeasCurrParm.curr_start_samples++;
 80117ee:	3601      	adds	r6, #1
			MeasCurrParm.curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80117f0:	441d      	add	r5, r3
			MeasCurrParm.curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80117f2:	4410      	add	r0, r2
			MeasCurrParm.curr_start_samples++;
 80117f4:	830e      	strh	r6, [r1, #24]
			MeasCurrParm.curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80117f6:	828d      	strh	r5, [r1, #20]
			MeasCurrParm.curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80117f8:	82c8      	strh	r0, [r1, #22]
		MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 80117fa:	8a0d      	ldrh	r5, [r1, #16]
		MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 80117fc:	8a48      	ldrh	r0, [r1, #18]
		MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 80117fe:	1b5b      	subs	r3, r3, r5
		MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8011800:	1a12      	subs	r2, r2, r0
		McCtrlBits.OpenLoop = 1;
 8011802:	7820      	ldrb	r0, [r4, #0]
		MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8011804:	b29b      	uxth	r3, r3
		MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8011806:	b292      	uxth	r2, r2
		MeasCurrParm.CorrADC_c = -(MeasCurrParm.CorrADC_a + MeasCurrParm.CorrADC_b);
 8011808:	189d      	adds	r5, r3, r2
		McCtrlBits.OpenLoop = 1;
 801180a:	f040 0001 	orr.w	r0, r0, #1
		MeasCurrParm.CorrADC_c = -(MeasCurrParm.CorrADC_a + MeasCurrParm.CorrADC_b);
 801180e:	426d      	negs	r5, r5
		MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8011810:	b21b      	sxth	r3, r3
		MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8011812:	b212      	sxth	r2, r2
		McCtrlBits.OpenLoop = 1;
 8011814:	7020      	strb	r0, [r4, #0]
		if(McCtrlBits.OpenLoop)
 8011816:	07c0      	lsls	r0, r0, #31
		MeasCurrParm.CorrADC_c = -(MeasCurrParm.CorrADC_a + MeasCurrParm.CorrADC_b);
 8011818:	808d      	strh	r5, [r1, #4]
		MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 801181a:	800b      	strh	r3, [r1, #0]
		MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 801181c:	804a      	strh	r2, [r1, #2]
		if(McCtrlBits.OpenLoop)
 801181e:	d565      	bpl.n	80118ec <mcpwm_adc_dma_int_handler+0x13c>
			ParkParm.qAngle += 0.002f;
 8011820:	4c5a      	ldr	r4, [pc, #360]	; (801198c <mcpwm_adc_dma_int_handler+0x1dc>)
 8011822:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8011990 <mcpwm_adc_dma_int_handler+0x1e0>
 8011826:	edd4 8a00 	vldr	s17, [r4]
			if(2*PI <=  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
 801182a:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011994 <mcpwm_adc_dma_int_handler+0x1e4>
			ParkParm.qVd = 0.3f;
 801182e:	ed9f 9a5a 	vldr	s18, [pc, #360]	; 8011998 <mcpwm_adc_dma_int_handler+0x1e8>
			ParkParm.qVq = 0.0f;
 8011832:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 801199c <mcpwm_adc_dma_int_handler+0x1ec>
			ParkParm.qVd = 0.3f;
 8011836:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
			ParkParm.qAngle += 0.002f;
 801183a:	ee78 8a87 	vadd.f32	s17, s17, s14
			ParkParm.qVq = 0.0f;
 801183e:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
			if(2*PI <=  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
 8011842:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184a:	bfa8      	it	ge
 801184c:	ee77 8ae8 	vsubge.f32	s17, s15, s17
 8011850:	edc4 8a00 	vstr	s17, [r4]
		ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8011854:	eeb0 0a68 	vmov.f32	s0, s17
 8011858:	f004 fe4a 	bl	80164f0 <cosf>
 801185c:	eef0 9a40 	vmov.f32	s19, s0
 8011860:	eeb0 0a68 	vmov.f32	s0, s17
 8011864:	f005 f92c 	bl	8016ac0 <sinf>
		ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8011868:	ee69 6a88 	vmul.f32	s13, s19, s16
		ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 801186c:	ee68 7a40 	vnmul.f32	s15, s16, s0
		ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8011870:	eee0 6a09 	vfma.f32	s13, s0, s18
		SVGenParm.qVr1 = ParkParm.qVbeta;
 8011874:	4b4a      	ldr	r3, [pc, #296]	; (80119a0 <mcpwm_adc_dma_int_handler+0x1f0>)
		ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8011876:	eee9 7a89 	vfma.f32	s15, s19, s18
		SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 801187a:	eddf 5a4a 	vldr	s11, [pc, #296]	; 80119a4 <mcpwm_adc_dma_int_handler+0x1f4>
		ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 801187e:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8011882:	eeb1 7a66 	vneg.f32	s14, s13
 8011886:	eeb0 6a47 	vmov.f32	s12, s14
 801188a:	eea7 6aa5 	vfma.f32	s12, s15, s11
		SVGenParm.qVr3 = (-ParkParm.qVbeta - SQRT3 * ParkParm.qValpha)/2;
 801188e:	eea7 7ae5 	vfms.f32	s14, s15, s11
		SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8011892:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011896:	ee66 7a25 	vmul.f32	s15, s12, s11
		SVGenParm.qVr3 = (-ParkParm.qVbeta - SQRT3 * ParkParm.qValpha)/2;
 801189a:	ee27 7a25 	vmul.f32	s14, s14, s11
		ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 801189e:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
		SVGenParm.qVr1 = ParkParm.qVbeta;
 80118a2:	edc3 6a01 	vstr	s13, [r3, #4]
		SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 80118a6:	edc3 7a02 	vstr	s15, [r3, #8]
		SVGenParm.qVr3 = (-ParkParm.qVbeta - SQRT3 * ParkParm.qValpha)/2;
 80118aa:	ed83 7a03 	vstr	s14, [r3, #12]
		CalcSVGen();
 80118ae:	f000 fdbf 	bl	8012430 <CalcSVGen>
}
 80118b2:	ecbd 8b04 	vpop	{d8-d9}
	WWDG_SetCounter(100);
 80118b6:	2064      	movs	r0, #100	; 0x64
}
 80118b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	WWDG_SetCounter(100);
 80118bc:	f004 be08 	b.w	80164d0 <WWDG_SetCounter>
		PIParmW.qInMeas = smc1.Omega;
 80118c0:	4d39      	ldr	r5, [pc, #228]	; (80119a8 <mcpwm_adc_dma_int_handler+0x1f8>)
 80118c2:	4b3a      	ldr	r3, [pc, #232]	; (80119ac <mcpwm_adc_dma_int_handler+0x1fc>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80118c4:	4e3a      	ldr	r6, [pc, #232]	; (80119b0 <mcpwm_adc_dma_int_handler+0x200>)
		PIParmW.qInMeas = smc1.Omega;
 80118c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80118ca:	6833      	ldr	r3, [r6, #0]
		PIParmW.qInMeas = smc1.Omega;
 80118cc:	61ea      	str	r2, [r5, #28]
		CalcPI(&PIParmW);
 80118ce:	4628      	mov	r0, r5
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80118d0:	61ab      	str	r3, [r5, #24]
		CalcPI(&PIParmW);
 80118d2:	f000 fc85 	bl	80121e0 <CalcPI>
		CtrlParm.qVqRef = PIParmW.qOut;
 80118d6:	6a2a      	ldr	r2, [r5, #32]
 80118d8:	6823      	ldr	r3, [r4, #0]
 80118da:	60b2      	str	r2, [r6, #8]
 80118dc:	e776      	b.n	80117cc <mcpwm_adc_dma_int_handler+0x1c>
		encoder_AnalogHallEstimation (&smc1);
 80118de:	4833      	ldr	r0, [pc, #204]	; (80119ac <mcpwm_adc_dma_int_handler+0x1fc>)
 80118e0:	f001 f83e 	bl	8012960 <encoder_AnalogHallEstimation>
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	f003 020f 	and.w	r2, r3, #15
 80118ea:	e76d      	b.n	80117c8 <mcpwm_adc_dma_int_handler+0x18>
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 80118ec:	ee07 2a90 	vmov	s15, r2
 80118f0:	ed91 6a03 	vldr	s12, [r1, #12]
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 80118f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80119b4 <mcpwm_adc_dma_int_handler+0x204>
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 80118f8:	edd1 6a02 	vldr	s13, [r1, #8]
			ParkParm.qAngle = smc1.Theta;
 80118fc:	4a2b      	ldr	r2, [pc, #172]	; (80119ac <mcpwm_adc_dma_int_handler+0x1fc>)
 80118fe:	4c23      	ldr	r4, [pc, #140]	; (801198c <mcpwm_adc_dma_int_handler+0x1dc>)
 8011900:	ed92 9a2e 	vldr	s18, [r2, #184]	; 0xb8
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 8011904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8011908:	eeb0 0a49 	vmov.f32	s0, s18
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 801190c:	ee67 7a86 	vmul.f32	s15, s15, s12
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 8011910:	ee06 3a10 	vmov	s12, r3
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8011914:	ee77 8aa7 	vadd.f32	s17, s15, s15
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 8011918:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 801191c:	ee68 8a87 	vmul.f32	s17, s17, s14
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 8011920:	ee28 8a26 	vmul.f32	s16, s16, s13
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 8011924:	edc4 7a04 	vstr	s15, [r4, #16]
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8011928:	eee8 8a07 	vfma.f32	s17, s16, s14
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 801192c:	ed84 8a03 	vstr	s16, [r4, #12]
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8011930:	edc4 8a06 	vstr	s17, [r4, #24]
			ParkParm.qIalpha = ParkParm.qIa;
 8011934:	ed84 8a05 	vstr	s16, [r4, #20]
			ParkParm.qAngle = smc1.Theta;
 8011938:	ed84 9a00 	vstr	s18, [r4]
			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 801193c:	f004 fdd8 	bl	80164f0 <cosf>
 8011940:	eef0 9a40 	vmov.f32	s19, s0
 8011944:	eeb0 0a49 	vmov.f32	s0, s18
 8011948:	f005 f8ba 	bl	8016ac0 <sinf>
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 801194c:	ee68 7aa9 	vmul.f32	s15, s17, s19
			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8011950:	ee68 8a80 	vmul.f32	s17, s17, s0
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8011954:	eee8 7a00 	vfma.f32	s15, s16, s0
			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8011958:	eee8 8a69 	vfms.f32	s17, s16, s19
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 801195c:	edc4 7a08 	vstr	s15, [r4, #32]
			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8011960:	edc4 8a07 	vstr	s17, [r4, #28]
			DoControl();
 8011964:	f000 fc74 	bl	8012250 <DoControl>
 8011968:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 801196c:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8011970:	edd4 8a00 	vldr	s17, [r4]
 8011974:	e76e      	b.n	8011854 <mcpwm_adc_dma_int_handler+0xa4>
 8011976:	bf00      	nop
 8011978:	2000147c 	.word	0x2000147c
 801197c:	200020e0 	.word	0x200020e0
 8011980:	40001800 	.word	0x40001800
 8011984:	20001320 	.word	0x20001320
 8011988:	200021d8 	.word	0x200021d8
 801198c:	20002174 	.word	0x20002174
 8011990:	3b03126f 	.word	0x3b03126f
 8011994:	40c90fdb 	.word	0x40c90fdb
 8011998:	3e99999a 	.word	0x3e99999a
 801199c:	00000000 	.word	0x00000000
 80119a0:	200021b4 	.word	0x200021b4
 80119a4:	3fddb3d7 	.word	0x3fddb3d7
 80119a8:	20002150 	.word	0x20002150
 80119ac:	20002224 	.word	0x20002224
 80119b0:	200020d0 	.word	0x200020d0
 80119b4:	3f13cd3a 	.word	0x3f13cd3a
	...

080119c0 <mcpwm_init>:
{
 80119c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TIM_DeInit(TIM1);
 80119c4:	4dcf      	ldr	r5, [pc, #828]	; (8011d04 <mcpwm_init+0x344>)
	TIM_DeInit(TIM8);
 80119c6:	4fd0      	ldr	r7, [pc, #832]	; (8011d08 <mcpwm_init+0x348>)
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80119c8:	f8df 9374 	ldr.w	r9, [pc, #884]	; 8011d40 <mcpwm_init+0x380>
{
 80119cc:	b0ab      	sub	sp, #172	; 0xac
	utils_sys_lock_cnt();
 80119ce:	f002 fce7 	bl	80143a0 <utils_sys_lock_cnt>
	TIM_DeInit(TIM1);
 80119d2:	4628      	mov	r0, r5
 80119d4:	f004 fa04 	bl	8015de0 <TIM_DeInit>
	TIM_DeInit(TIM8);
 80119d8:	4638      	mov	r0, r7
	TIM1->CNT = 0;
 80119da:	2400      	movs	r4, #0
	TIM_DeInit(TIM8);
 80119dc:	f004 fa00 	bl	8015de0 <TIM_DeInit>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80119e0:	2101      	movs	r1, #1
	TIM1->CNT = 0;
 80119e2:	626c      	str	r4, [r5, #36]	; 0x24
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80119e4:	4608      	mov	r0, r1
	TIM8->CNT = 0;
 80119e6:	627c      	str	r4, [r7, #36]	; 0x24
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80119e8:	2601      	movs	r6, #1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80119ea:	f004 f9b1 	bl	8015d50 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80119ee:	4628      	mov	r0, r5
 80119f0:	a905      	add	r1, sp, #20
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80119f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 80119f6:	f241 4382 	movw	r3, #5250	; 0x1482
 80119fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)PWMFREQ /2;
 80119fe:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8011a02:	f88d 601e 	strb.w	r6, [sp, #30]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8011a06:	f004 facb 	bl	8015fa0 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8011a0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8011a0c:	4abf      	ldr	r2, [pc, #764]	; (8011d0c <mcpwm_init+0x34c>)
 8011a0e:	9210      	str	r2, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8011a10:	40f3      	lsrs	r3, r6
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8011a12:	f04f 0804 	mov.w	r8, #4
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8011a16:	4628      	mov	r0, r5
 8011a18:	a910      	add	r1, sp, #64	; 0x40
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8011a1a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8011a1e:	4bbc      	ldr	r3, [pc, #752]	; (8011d10 <mcpwm_init+0x350>)
 8011a20:	9314      	str	r3, [sp, #80]	; 0x50
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8011a22:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8011a26:	f004 fb33 	bl	8016090 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 8011a2a:	a910      	add	r1, sp, #64	; 0x40
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f004 fb67 	bl	8016100 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 8011a32:	a910      	add	r1, sp, #64	; 0x40
 8011a34:	4628      	mov	r0, r5
 8011a36:	f004 fbab 	bl	8016190 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8011a3a:	a910      	add	r1, sp, #64	; 0x40
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	f004 fbef 	bl	8016220 <TIM_OC4Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8011a42:	4628      	mov	r0, r5
 8011a44:	2108      	movs	r1, #8
 8011a46:	f004 fc23 	bl	8016290 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	2108      	movs	r1, #8
 8011a4e:	f004 fc27 	bl	80162a0 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8011a52:	4628      	mov	r0, r5
 8011a54:	2108      	movs	r1, #8
 8011a56:	f004 fc33 	bl	80162c0 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	2108      	movs	r1, #8
 8011a5e:	f004 fc37 	bl	80162d0 <TIM_OC4PreloadConfig>
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8011a62:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
 8011a66:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8011a6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8011a6e:	4628      	mov	r0, r5
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 8011a70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8011a74:	a908      	add	r1, sp, #32
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 8011a76:	930a      	str	r3, [sp, #40]	; 0x28
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 8011a78:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8011a7c:	f004 fc38 	bl	80162f0 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 8011a80:	4631      	mov	r1, r6
 8011a82:	4628      	mov	r0, r5
 8011a84:	f004 fc5c 	bl	8016340 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8011a88:	4631      	mov	r1, r6
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	f004 fae0 	bl	8016050 <TIM_ARRPreloadConfig>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 8011a90:	4631      	mov	r1, r6
 8011a92:	48a0      	ldr	r0, [pc, #640]	; (8011d14 <mcpwm_init+0x354>)
 8011a94:	f004 f93c 	bl	8015d10 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 8011a98:	4631      	mov	r1, r6
 8011a9a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8011a9e:	f004 f957 	bl	8015d50 <RCC_APB2PeriphClockCmd>
	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_dma_int_handler,(void *)0);
 8011aa2:	4623      	mov	r3, r4
 8011aa4:	4a9c      	ldr	r2, [pc, #624]	; (8011d18 <mcpwm_init+0x358>)
 8011aa6:	489d      	ldr	r0, [pc, #628]	; (8011d1c <mcpwm_init+0x35c>)
 8011aa8:	2103      	movs	r1, #3
 8011aaa:	f7fd f841 	bl	800eb30 <dmaStreamAllocate>
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 8011aae:	4b9c      	ldr	r3, [pc, #624]	; (8011d20 <mcpwm_init+0x360>)
 8011ab0:	931d      	str	r3, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 8011ab2:	230c      	movs	r3, #12
 8011ab4:	931f      	str	r3, [sp, #124]	; 0x7c
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 8011ab6:	4a9b      	ldr	r2, [pc, #620]	; (8011d24 <mcpwm_init+0x364>)
 8011ab8:	921c      	str	r2, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8011aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8011abe:	f44f 7280 	mov.w	r2, #256	; 0x100
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8011ac2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8011ac6:	4648      	mov	r0, r9
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8011ac8:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8011acc:	9323      	str	r3, [sp, #140]	; 0x8c
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8011ace:	a91b      	add	r1, sp, #108	; 0x6c
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8011ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011ad4:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8011ad8:	941b      	str	r4, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8011ada:	941e      	str	r4, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8011adc:	9420      	str	r4, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8011ade:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8011ae2:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8011ae6:	e9cd ab21 	strd	sl, fp, [sp, #132]	; 0x84
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8011aea:	f003 ffa9 	bl	8015a40 <DMA_Init>
	DMA_Cmd(DMA2_Stream4, ENABLE);
 8011aee:	4631      	mov	r1, r6
 8011af0:	4648      	mov	r0, r9
 8011af2:	f003 ffd5 	bl	8015aa0 <DMA_Cmd>
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 8011af6:	4632      	mov	r2, r6
 8011af8:	4648      	mov	r0, r9
 8011afa:	2110      	movs	r1, #16
 8011afc:	f003 ffe0 	bl	8015ac0 <DMA_ITConfig>
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8011b00:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8011b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInit(&ADC_CommonInitStructure);
 8011b06:	a80c      	add	r0, sp, #48	; 0x30
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8011b08:	920c      	str	r2, [sp, #48]	; 0x30
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8011b0a:	930e      	str	r3, [sp, #56]	; 0x38
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8011b0c:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8011b0e:	940f      	str	r4, [sp, #60]	; 0x3c
	ADC_CommonInit(&ADC_CommonInitStructure);
 8011b10:	f003 fe46 	bl	80157a0 <ADC_CommonInit>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8011b14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	ADC_Init(ADC1, &ADC_InitStructure);
 8011b18:	a915      	add	r1, sp, #84	; 0x54
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8011b1a:	9317      	str	r3, [sp, #92]	; 0x5c
	ADC_Init(ADC3, &ADC_InitStructure);
 8011b1c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8011d44 <mcpwm_init+0x384>
	ADC_Init(ADC1, &ADC_InitStructure);
 8011b20:	4881      	ldr	r0, [pc, #516]	; (8011d28 <mcpwm_init+0x368>)
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 8011b22:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 8011b26:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
 8011b2a:	9318      	str	r3, [sp, #96]	; 0x60
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8011b2c:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8011b2e:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8011b32:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8011b36:	9419      	str	r4, [sp, #100]	; 0x64
	ADC_Init(ADC1, &ADC_InitStructure);
 8011b38:	f003 fe0a 	bl	8015750 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 8011b3c:	a915      	add	r1, sp, #84	; 0x54
 8011b3e:	487b      	ldr	r0, [pc, #492]	; (8011d2c <mcpwm_init+0x36c>)
 8011b40:	f003 fe06 	bl	8015750 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 8011b44:	a915      	add	r1, sp, #84	; 0x54
 8011b46:	4648      	mov	r0, r9
 8011b48:	f003 fe02 	bl	8015750 <ADC_Init>
	hw_setup_adc_channels();
 8011b4c:	f7ff fb98 	bl	8011280 <hw_setup_adc_channels>
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 8011b50:	4630      	mov	r0, r6
 8011b52:	f003 fe95 	bl	8015880 <ADC_MultiModeDMARequestAfterLastTransferCmd>
	ADC_Cmd(ADC1, ENABLE);
 8011b56:	4631      	mov	r1, r6
 8011b58:	4873      	ldr	r0, [pc, #460]	; (8011d28 <mcpwm_init+0x368>)
 8011b5a:	f003 fe39 	bl	80157d0 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 8011b5e:	4631      	mov	r1, r6
 8011b60:	4872      	ldr	r0, [pc, #456]	; (8011d2c <mcpwm_init+0x36c>)
 8011b62:	f003 fe35 	bl	80157d0 <ADC_Cmd>
	ADC_Cmd(ADC3, ENABLE);
 8011b66:	4631      	mov	r1, r6
 8011b68:	4648      	mov	r0, r9
 8011b6a:	f003 fe31 	bl	80157d0 <ADC_Cmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8011b6e:	4631      	mov	r1, r6
 8011b70:	2002      	movs	r0, #2
 8011b72:	f004 f8ed 	bl	8015d50 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 8011b76:	a905      	add	r1, sp, #20
 8011b78:	4638      	mov	r0, r7
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8011b7a:	f642 1304 	movw	r3, #10500	; 0x2904
 8011b7e:	9306      	str	r3, [sp, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8011b80:	9405      	str	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)PWMFREQ;
 8011b82:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8011b86:	f88d 401e 	strb.w	r4, [sp, #30]
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 8011b8a:	f004 fa09 	bl	8015fa0 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 8011b8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8011b90:	4a5e      	ldr	r2, [pc, #376]	; (8011d0c <mcpwm_init+0x34c>)
 8011b92:	9210      	str	r2, [sp, #64]	; 0x40
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8011b94:	a910      	add	r1, sp, #64	; 0x40
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8011b96:	4a5e      	ldr	r2, [pc, #376]	; (8011d10 <mcpwm_init+0x350>)
 8011b98:	9214      	str	r2, [sp, #80]	; 0x50
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8011b9a:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8011b9c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8011ba0:	f004 fa76 	bl	8016090 <TIM_OC1Init>
 8011ba4:	4638      	mov	r0, r7
 8011ba6:	2108      	movs	r1, #8
 8011ba8:	f004 fb72 	bl	8016290 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8011bac:	a910      	add	r1, sp, #64	; 0x40
 8011bae:	4638      	mov	r0, r7
 8011bb0:	f004 faa6 	bl	8016100 <TIM_OC2Init>
 8011bb4:	4638      	mov	r0, r7
 8011bb6:	2108      	movs	r1, #8
 8011bb8:	f004 fb72 	bl	80162a0 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8011bbc:	a910      	add	r1, sp, #64	; 0x40
 8011bbe:	4638      	mov	r0, r7
 8011bc0:	f004 fae6 	bl	8016190 <TIM_OC3Init>
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	2108      	movs	r1, #8
 8011bc8:	f004 fb7a 	bl	80162c0 <TIM_OC3PreloadConfig>
	TIM_ARRPreloadConfig(TIM8, ENABLE);
 8011bcc:	4631      	mov	r1, r6
 8011bce:	4638      	mov	r0, r7
 8011bd0:	f004 fa3e 	bl	8016050 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 8011bd4:	4631      	mov	r1, r6
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	f004 fbb2 	bl	8016340 <TIM_CCPreloadControl>
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 8011bdc:	4631      	mov	r1, r6
 8011bde:	4638      	mov	r0, r7
 8011be0:	f004 fb9e 	bl	8016320 <TIM_CtrlPWMOutputs>
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 8011be4:	4628      	mov	r0, r5
 8011be6:	2120      	movs	r1, #32
 8011be8:	f004 fbea 	bl	80163c0 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 8011bec:	4628      	mov	r0, r5
 8011bee:	2180      	movs	r1, #128	; 0x80
 8011bf0:	f004 fc06 	bl	8016400 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	4638      	mov	r0, r7
 8011bf8:	f004 fbda 	bl	80163b0 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 8011bfc:	4641      	mov	r1, r8
 8011bfe:	4638      	mov	r0, r7
 8011c00:	f004 fbee 	bl	80163e0 <TIM_SelectSlaveMode>
	TIM_Cmd(TIM8, ENABLE);
 8011c04:	4631      	mov	r1, r6
 8011c06:	4638      	mov	r0, r7
 8011c08:	f004 fa32 	bl	8016070 <TIM_Cmd>
	TIM_Cmd(TIM1, ENABLE);
 8011c0c:	4631      	mov	r1, r6
 8011c0e:	4628      	mov	r0, r5
 8011c10:	f004 fa2e 	bl	8016070 <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8011c14:	4631      	mov	r1, r6
 8011c16:	4628      	mov	r0, r5
 8011c18:	f004 fb82 	bl	8016320 <TIM_CtrlPWMOutputs>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8011c1c:	4631      	mov	r1, r6
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f004 f886 	bl	8015d30 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8011c24:	f04f 32ff 	mov.w	r2, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8011c28:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8011c2a:	a905      	add	r1, sp, #20
 8011c2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8011c30:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8011c34:	9203      	str	r2, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8011c36:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8011c3a:	f004 f9b1 	bl	8015fa0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8011c3e:	4631      	mov	r1, r6
 8011c40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011c44:	f004 fa14 	bl	8016070 <TIM_Cmd>
	TIM1->CR1 |= TIM_CR1_UDIS;
 8011c48:	682b      	ldr	r3, [r5, #0]
	McCtrlBits.OpenLoop = 0;
 8011c4a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8011d48 <mcpwm_init+0x388>
	TIM1->CR1 |= TIM_CR1_UDIS;
 8011c4e:	f043 0302 	orr.w	r3, r3, #2
 8011c52:	602b      	str	r3, [r5, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	f043 0302 	orr.w	r3, r3, #2
 8011c5a:	603b      	str	r3, [r7, #0]
	TIM8->CCR1 = TIM1->ARR;//for vdc
 8011c5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011c5e:	637b      	str	r3, [r7, #52]	; 0x34
	TIM8->CCR2 = TIM1->ARR;//for Ib
 8011c60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011c62:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM8->CCR3 = TIM1->ARR;//for Ia
 8011c64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011c66:	63fb      	str	r3, [r7, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	f023 0302 	bic.w	r3, r3, #2
 8011c6e:	602b      	str	r3, [r5, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	f023 0302 	bic.w	r3, r3, #2
 8011c76:	603b      	str	r3, [r7, #0]
	utils_sys_unlock_cnt();
 8011c78:	f002 fba2 	bl	80143c0 <utils_sys_unlock_cnt>
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 8011c7c:	f5a9 3985 	sub.w	r9, r9, #68096	; 0x10a00
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 8011c80:	4631      	mov	r1, r6
 8011c82:	2040      	movs	r0, #64	; 0x40
 8011c84:	f004 f854 	bl	8015d30 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8011c88:	9a03      	ldr	r2, [sp, #12]
 8011c8a:	9206      	str	r2, [sp, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8011c8c:	2307      	movs	r3, #7
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 8011c8e:	a905      	add	r1, sp, #20
 8011c90:	4648      	mov	r0, r9
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8011c92:	9305      	str	r3, [sp, #20]
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8011c94:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 8011c98:	f004 f982 	bl	8015fa0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM12, ENABLE);
 8011c9c:	4631      	mov	r1, r6
 8011c9e:	4648      	mov	r0, r9
 8011ca0:	f004 f9e6 	bl	8016070 <TIM_Cmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8011ca4:	4631      	mov	r1, r6
 8011ca6:	4658      	mov	r0, fp
 8011ca8:	f004 f842 	bl	8015d30 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 8011cac:	4620      	mov	r0, r4
 8011cae:	f004 fbe7 	bl	8016480 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 8011cb2:	20ff      	movs	r0, #255	; 0xff
 8011cb4:	f004 fbf4 	bl	80164a0 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 8011cb8:	2064      	movs	r0, #100	; 0x64
 8011cba:	f004 fc11 	bl	80164e0 <WWDG_Enable>
	SetupControlParameters();
 8011cbe:	f000 fb0f 	bl	80122e0 <SetupControlParameters>
	ENABLE_GATE();
 8011cc2:	4a1b      	ldr	r2, [pc, #108]	; (8011d30 <mcpwm_init+0x370>)
	DCCAL_OFF();
 8011cc4:	4b1b      	ldr	r3, [pc, #108]	; (8011d34 <mcpwm_init+0x374>)
	ENABLE_GATE();
 8011cc6:	f8a2 a018 	strh.w	sl, [r2, #24]
	DCCAL_OFF();
 8011cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011cce:	835a      	strh	r2, [r3, #26]
	McCtrlBits.OpenLoop = 0;
 8011cd0:	f898 3000 	ldrb.w	r3, [r8]
 8011cd4:	f364 0300 	bfi	r3, r4, #0, #1
 8011cd8:	f888 3000 	strb.w	r3, [r8]
	McCtrlBits.DcCalDone = do_dc_cal();
 8011cdc:	f000 fc28 	bl	8012530 <do_dc_cal>
 8011ce0:	f898 2000 	ldrb.w	r2, [r8]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8011ce4:	4b14      	ldr	r3, [pc, #80]	; (8011d38 <mcpwm_init+0x378>)
 8011ce6:	9400      	str	r4, [sp, #0]
	McCtrlBits.DcCalDone = do_dc_cal();
 8011ce8:	f360 0200 	bfi	r2, r0, #0, #1
 8011cec:	f888 2000 	strb.w	r2, [r8]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8011cf0:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8011cf4:	2240      	movs	r2, #64	; 0x40
 8011cf6:	4811      	ldr	r0, [pc, #68]	; (8011d3c <mcpwm_init+0x37c>)
 8011cf8:	f7fb fab2 	bl	800d260 <chThdCreateStatic>
}
 8011cfc:	b02b      	add	sp, #172	; 0xac
 8011cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d02:	bf00      	nop
 8011d04:	40010000 	.word	0x40010000
 8011d08:	40010400 	.word	0x40010400
 8011d0c:	00010060 	.word	0x00010060
 8011d10:	02000100 	.word	0x02000100
 8011d14:	00400005 	.word	0x00400005
 8011d18:	080117b1 	.word	0x080117b1
 8011d1c:	08017b40 	.word	0x08017b40
 8011d20:	20001320 	.word	0x20001320
 8011d24:	40012308 	.word	0x40012308
 8011d28:	40012000 	.word	0x40012000
 8011d2c:	40012100 	.word	0x40012100
 8011d30:	40020800 	.word	0x40020800
 8011d34:	40020400 	.word	0x40020400
 8011d38:	08011701 	.word	0x08011701
 8011d3c:	20001480 	.word	0x20001480
 8011d40:	40026470 	.word	0x40026470
 8011d44:	40012200 	.word	0x40012200
 8011d48:	200020e0 	.word	0x200020e0
 8011d4c:	00000000 	.word	0x00000000

08011d50 <mcpwm_deinit>:
{
 8011d50:	b508      	push	{r3, lr}
	WWDG_DeInit();
 8011d52:	f004 fb85 	bl	8016460 <WWDG_DeInit>
	TIM_DeInit(TIM1);
 8011d56:	480d      	ldr	r0, [pc, #52]	; (8011d8c <mcpwm_deinit+0x3c>)
 8011d58:	f004 f842 	bl	8015de0 <TIM_DeInit>
	TIM_DeInit(TIM2);
 8011d5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011d60:	f004 f83e 	bl	8015de0 <TIM_DeInit>
	TIM_DeInit(TIM8);
 8011d64:	480a      	ldr	r0, [pc, #40]	; (8011d90 <mcpwm_deinit+0x40>)
 8011d66:	f004 f83b 	bl	8015de0 <TIM_DeInit>
	TIM_DeInit(TIM12);
 8011d6a:	480a      	ldr	r0, [pc, #40]	; (8011d94 <mcpwm_deinit+0x44>)
 8011d6c:	f004 f838 	bl	8015de0 <TIM_DeInit>
	ADC_DeInit();
 8011d70:	f003 fcde 	bl	8015730 <ADC_DeInit>
	DMA_DeInit(DMA2_Stream4);
 8011d74:	4808      	ldr	r0, [pc, #32]	; (8011d98 <mcpwm_deinit+0x48>)
 8011d76:	f003 fdcb 	bl	8015910 <DMA_DeInit>
	nvicDisableVector(ADC_IRQn);
 8011d7a:	2012      	movs	r0, #18
 8011d7c:	f7fc fd08 	bl	800e790 <nvicDisableVector>
	dmaStreamRelease(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)));
 8011d80:	4806      	ldr	r0, [pc, #24]	; (8011d9c <mcpwm_deinit+0x4c>)
}
 8011d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dmaStreamRelease(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)));
 8011d86:	f7fc bf1b 	b.w	800ebc0 <dmaStreamRelease>
 8011d8a:	bf00      	nop
 8011d8c:	40010000 	.word	0x40010000
 8011d90:	40010400 	.word	0x40010400
 8011d94:	40001800 	.word	0x40001800
 8011d98:	40026470 	.word	0x40026470
 8011d9c:	08017b40 	.word	0x08017b40

08011da0 <update_timer_Duty>:
{
 8011da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da4:	4616      	mov	r6, r2
 8011da6:	4680      	mov	r8, r0
 8011da8:	460f      	mov	r7, r1
	utils_sys_lock_cnt();
 8011daa:	f002 faf9 	bl	80143a0 <utils_sys_lock_cnt>
	TIM1->CR1 |= TIM_CR1_UDIS;
 8011dae:	4b0d      	ldr	r3, [pc, #52]	; (8011de4 <update_timer_Duty+0x44>)
	TIM8->CR1 |= TIM_CR1_UDIS;
 8011db0:	4c0d      	ldr	r4, [pc, #52]	; (8011de8 <update_timer_Duty+0x48>)
	TIM1->CR1 |= TIM_CR1_UDIS;
 8011db2:	681d      	ldr	r5, [r3, #0]
 8011db4:	f045 0502 	orr.w	r5, r5, #2
 8011db8:	601d      	str	r5, [r3, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 8011dba:	6825      	ldr	r5, [r4, #0]
 8011dbc:	f045 0502 	orr.w	r5, r5, #2
 8011dc0:	6025      	str	r5, [r4, #0]
	TIM1->CCR1 = duty_A;
 8011dc2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_B;
 8011dc6:	639f      	str	r7, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_C;
 8011dc8:	63de      	str	r6, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	f022 0202 	bic.w	r2, r2, #2
 8011dd0:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	f023 0302 	bic.w	r3, r3, #2
 8011dd8:	6023      	str	r3, [r4, #0]
}
 8011dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	utils_sys_unlock_cnt();
 8011dde:	f002 baef 	b.w	80143c0 <utils_sys_unlock_cnt>
 8011de2:	bf00      	nop
 8011de4:	40010000 	.word	0x40010000
 8011de8:	40010400 	.word	0x40010400
 8011dec:	00000000 	.word	0x00000000

08011df0 <sample_send_thread>:
	
 	return m_conf;
}


static THD_FUNCTION(sample_send_thread, arg) {
 8011df0:	b508      	push	{r3, lr}
 8011df2:	4b06      	ldr	r3, [pc, #24]	; (8011e0c <sample_send_thread+0x1c>)
 8011df4:	4a06      	ldr	r2, [pc, #24]	; (8011e10 <sample_send_thread+0x20>)
 8011df6:	699b      	ldr	r3, [r3, #24]

	chRegSetThreadName("SampleSender");

	sample_send_tp = chThdGetSelfX();

	chvprintf(&SDU1, (uint8_t *)"to mc_interface -> SampleSender\r\n");
 8011df8:	4906      	ldr	r1, [pc, #24]	; (8011e14 <sample_send_thread+0x24>)
 8011dfa:	619a      	str	r2, [r3, #24]
 8011dfc:	4806      	ldr	r0, [pc, #24]	; (8011e18 <sample_send_thread+0x28>)
 8011dfe:	f7fe fecf 	bl	8010ba0 <chvprintf>


	for(;;) {
		chEvtWaitAny((eventmask_t) 1);
 8011e02:	2001      	movs	r0, #1
 8011e04:	f7fb fc7c 	bl	800d700 <chEvtWaitAny>
 8011e08:	e7fb      	b.n	8011e02 <sample_send_thread+0x12>
 8011e0a:	bf00      	nop
 8011e0c:	20000c90 	.word	0x20000c90
 8011e10:	08017dd0 	.word	0x08017dd0
 8011e14:	08017de0 	.word	0x08017de0
 8011e18:	20006ca8 	.word	0x20006ca8
 8011e1c:	00000000 	.word	0x00000000

08011e20 <mc_interface_init>:
{
 8011e20:	b5f0      	push	{r4, r5, r6, r7, lr}
	m_conf = *configuration;
 8011e22:	4c2d      	ldr	r4, [pc, #180]	; (8011ed8 <mc_interface_init+0xb8>)
	chvprintf(&SDU1, (uint8_t *)"mc_interface_init\r\n");
 8011e24:	492d      	ldr	r1, [pc, #180]	; (8011edc <mc_interface_init+0xbc>)
	m_sample_len = 1000;
 8011e26:	4f2e      	ldr	r7, [pc, #184]	; (8011ee0 <mc_interface_init+0xc0>)
	m_sample_now = 0;
 8011e28:	4e2e      	ldr	r6, [pc, #184]	; (8011ee4 <mc_interface_init+0xc4>)
{
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	4605      	mov	r5, r0
	chvprintf(&SDU1, (uint8_t *)"mc_interface_init\r\n");
 8011e2e:	482e      	ldr	r0, [pc, #184]	; (8011ee8 <mc_interface_init+0xc8>)
 8011e30:	f7fe feb6 	bl	8010ba0 <chvprintf>
	m_conf = *configuration;
 8011e34:	4629      	mov	r1, r5
 8011e36:	22d4      	movs	r2, #212	; 0xd4
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f7fa fe59 	bl	800caf0 <memcpy>
	m_cycles_running = 0;
 8011e3e:	4b2b      	ldr	r3, [pc, #172]	; (8011eec <mc_interface_init+0xcc>)
	m_lock_enabled = false;
 8011e40:	4d2b      	ldr	r5, [pc, #172]	; (8011ef0 <mc_interface_init+0xd0>)
	m_lock_override_once = false;
 8011e42:	492c      	ldr	r1, [pc, #176]	; (8011ef4 <mc_interface_init+0xd4>)
	m_motor_current_sum = 0.0;
 8011e44:	4a2c      	ldr	r2, [pc, #176]	; (8011ef8 <mc_interface_init+0xd8>)
	m_fault_now = FAULT_CODE_NONE;
 8011e46:	2000      	movs	r0, #0
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 8011e48:	9000      	str	r0, [sp, #0]
	m_cycles_running = 0;
 8011e4a:	6018      	str	r0, [r3, #0]
	m_motor_current_sum = 0.0;
 8011e4c:	2300      	movs	r3, #0
	m_lock_enabled = false;
 8011e4e:	7028      	strb	r0, [r5, #0]
	m_lock_override_once = false;
 8011e50:	7008      	strb	r0, [r1, #0]
	m_input_current_sum = 0.0;
 8011e52:	4d2a      	ldr	r5, [pc, #168]	; (8011efc <mc_interface_init+0xdc>)
	m_motor_current_sum = 0.0;
 8011e54:	6013      	str	r3, [r2, #0]
	m_motor_current_iterations = 0.0;
 8011e56:	492a      	ldr	r1, [pc, #168]	; (8011f00 <mc_interface_init+0xe0>)
	m_input_current_iterations = 0.0;
 8011e58:	4a2a      	ldr	r2, [pc, #168]	; (8011f04 <mc_interface_init+0xe4>)
	m_input_current_sum = 0.0;
 8011e5a:	602b      	str	r3, [r5, #0]
	m_motor_current_iterations = 0.0;
 8011e5c:	600b      	str	r3, [r1, #0]
	m_amp_seconds = 0.0;
 8011e5e:	4d2a      	ldr	r5, [pc, #168]	; (8011f08 <mc_interface_init+0xe8>)
	m_input_current_iterations = 0.0;
 8011e60:	6013      	str	r3, [r2, #0]
	m_amp_seconds_charged = 0.0;
 8011e62:	492a      	ldr	r1, [pc, #168]	; (8011f0c <mc_interface_init+0xec>)
	m_watt_seconds = 0.0;
 8011e64:	4a2a      	ldr	r2, [pc, #168]	; (8011f10 <mc_interface_init+0xf0>)
	m_amp_seconds = 0.0;
 8011e66:	602b      	str	r3, [r5, #0]
	m_amp_seconds_charged = 0.0;
 8011e68:	600b      	str	r3, [r1, #0]
	m_watt_seconds_charged = 0.0;
 8011e6a:	4d2a      	ldr	r5, [pc, #168]	; (8011f14 <mc_interface_init+0xf4>)
	m_watt_seconds = 0.0;
 8011e6c:	6013      	str	r3, [r2, #0]
	m_position_set = 0.0;
 8011e6e:	492a      	ldr	r1, [pc, #168]	; (8011f18 <mc_interface_init+0xf8>)
	m_last_adc_duration_sample = 0.0;
 8011e70:	4a2a      	ldr	r2, [pc, #168]	; (8011f1c <mc_interface_init+0xfc>)
	m_watt_seconds_charged = 0.0;
 8011e72:	602b      	str	r3, [r5, #0]
	m_position_set = 0.0;
 8011e74:	600b      	str	r3, [r1, #0]
	m_sample_int = 1;
 8011e76:	4d2a      	ldr	r5, [pc, #168]	; (8011f20 <mc_interface_init+0x100>)
	m_last_adc_duration_sample = 0.0;
 8011e78:	6013      	str	r3, [r2, #0]
	m_sample_ready = 1;
 8011e7a:	492a      	ldr	r1, [pc, #168]	; (8011f24 <mc_interface_init+0x104>)
	m_sample_at_start = 0;
 8011e7c:	4a2a      	ldr	r2, [pc, #168]	; (8011f28 <mc_interface_init+0x108>)
	m_sample_len = 1000;
 8011e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011e82:	603b      	str	r3, [r7, #0]
	m_sample_int = 1;
 8011e84:	2301      	movs	r3, #1
 8011e86:	602b      	str	r3, [r5, #0]
	m_sample_ready = 1;
 8011e88:	600b      	str	r3, [r1, #0]
	m_start_comm = 0;
 8011e8a:	4d28      	ldr	r5, [pc, #160]	; (8011f2c <mc_interface_init+0x10c>)
	m_fault_now = FAULT_CODE_NONE;
 8011e8c:	4928      	ldr	r1, [pc, #160]	; (8011f30 <mc_interface_init+0x110>)
	m_sample_now = 0;
 8011e8e:	6030      	str	r0, [r6, #0]
	m_fault_now = FAULT_CODE_NONE;
 8011e90:	7008      	strb	r0, [r1, #0]
	m_sample_at_start = 0;
 8011e92:	6010      	str	r0, [r2, #0]
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 8011e94:	4b27      	ldr	r3, [pc, #156]	; (8011f34 <mc_interface_init+0x114>)
	m_start_comm = 0;
 8011e96:	6028      	str	r0, [r5, #0]
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 8011e98:	223f      	movs	r2, #63	; 0x3f
 8011e9a:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8011e9e:	4826      	ldr	r0, [pc, #152]	; (8011f38 <mc_interface_init+0x118>)
 8011ea0:	f7fb f9de 	bl	800d260 <chThdCreateStatic>
	switch (m_conf.m_sensor_port_mode) {
 8011ea4:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d009      	beq.n	8011ec2 <mc_interface_init+0xa2>
 8011eae:	2b02      	cmp	r3, #2
 8011eb0:	d101      	bne.n	8011eb6 <mc_interface_init+0x96>
			encoder_init_as5047p_spi();
 8011eb2:	f000 fc1d 	bl	80126f0 <encoder_init_as5047p_spi>
	mcpwm_init(&m_conf);
 8011eb6:	4808      	ldr	r0, [pc, #32]	; (8011ed8 <mc_interface_init+0xb8>)
}
 8011eb8:	b003      	add	sp, #12
 8011eba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	mcpwm_init(&m_conf);
 8011ebe:	f7ff bd7f 	b.w	80119c0 <mcpwm_init>
			encoder_init_abi(m_conf.m_encoder_counts);
 8011ec2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011ec6:	f000 fbb3 	bl	8012630 <encoder_init_abi>
	mcpwm_init(&m_conf);
 8011eca:	4803      	ldr	r0, [pc, #12]	; (8011ed8 <mc_interface_init+0xb8>)
}
 8011ecc:	b003      	add	sp, #12
 8011ece:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	mcpwm_init(&m_conf);
 8011ed2:	f7ff bd75 	b.w	80119c0 <mcpwm_init>
 8011ed6:	bf00      	nop
 8011ed8:	20001a20 	.word	0x20001a20
 8011edc:	08017db0 	.word	0x08017db0
 8011ee0:	20001b20 	.word	0x20001b20
 8011ee4:	20001b24 	.word	0x20001b24
 8011ee8:	20006ca8 	.word	0x20006ca8
 8011eec:	20001af4 	.word	0x20001af4
 8011ef0:	20001b08 	.word	0x20001b08
 8011ef4:	20001b09 	.word	0x20001b09
 8011ef8:	20001b10 	.word	0x20001b10
 8011efc:	20001b00 	.word	0x20001b00
 8011f00:	20001b0c 	.word	0x20001b0c
 8011f04:	20001afc 	.word	0x20001afc
 8011f08:	20001a18 	.word	0x20001a18
 8011f0c:	20001a1c 	.word	0x20001a1c
 8011f10:	20001b30 	.word	0x20001b30
 8011f14:	20001b34 	.word	0x20001b34
 8011f18:	20001b14 	.word	0x20001b14
 8011f1c:	20001b04 	.word	0x20001b04
 8011f20:	20001b1c 	.word	0x20001b1c
 8011f24:	20001b28 	.word	0x20001b28
 8011f28:	20001b18 	.word	0x20001b18
 8011f2c:	20001b2c 	.word	0x20001b2c
 8011f30:	20001af8 	.word	0x20001af8
 8011f34:	08011df1 	.word	0x08011df1
 8011f38:	20001b38 	.word	0x20001b38
 8011f3c:	00000000 	.word	0x00000000

08011f40 <mc_interface_get_configuration>:
}
 8011f40:	4800      	ldr	r0, [pc, #0]	; (8011f44 <mc_interface_get_configuration+0x4>)
 8011f42:	4770      	bx	lr
 8011f44:	20001a20 	.word	0x20001a20
	...

08011f50 <mc_interface_set_configuration>:
void mc_interface_set_configuration(mcConfiguration_t *configuration) {
 8011f50:	b538      	push	{r3, r4, r5, lr}
	if (m_conf.m_sensor_port_mode != configuration->m_sensor_port_mode) {
 8011f52:	4c87      	ldr	r4, [pc, #540]	; (8012170 <mc_interface_set_configuration+0x220>)
 8011f54:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8011f58:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
 8011f5c:	429a      	cmp	r2, r3
void mc_interface_set_configuration(mcConfiguration_t *configuration) {
 8011f5e:	ed2d 8b02 	vpush	{d8}
 8011f62:	4605      	mov	r5, r0
	if (m_conf.m_sensor_port_mode != configuration->m_sensor_port_mode) {
 8011f64:	f040 80bd 	bne.w	80120e2 <mc_interface_set_configuration+0x192>
	if (configuration->m_sensor_port_mode == SENSOR_PORT_MODE_ABI) {
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	f000 80ca 	beq.w	8012102 <mc_interface_set_configuration+0x1b2>
	if (m_conf.motor_type == MOTOR_TYPE_FOC	&& configuration->motor_type != MOTOR_TYPE_FOC)
 8011f6e:	7b23      	ldrb	r3, [r4, #12]
 8011f70:	2b02      	cmp	r3, #2
 8011f72:	f000 80ce 	beq.w	8012112 <mc_interface_set_configuration+0x1c2>
	else if (m_conf.motor_type != MOTOR_TYPE_FOC && configuration->motor_type == MOTOR_TYPE_FOC)
 8011f76:	7b23      	ldrb	r3, [r4, #12]
 8011f78:	2b02      	cmp	r3, #2
 8011f7a:	d003      	beq.n	8011f84 <mc_interface_set_configuration+0x34>
 8011f7c:	7b2b      	ldrb	r3, [r5, #12]
 8011f7e:	2b02      	cmp	r3, #2
 8011f80:	f000 80ce 	beq.w	8012120 <mc_interface_set_configuration+0x1d0>
		m_conf = *configuration;
 8011f84:	4629      	mov	r1, r5
 8011f86:	22d4      	movs	r2, #212	; 0xd4
 8011f88:	4879      	ldr	r0, [pc, #484]	; (8012170 <mc_interface_set_configuration+0x220>)
 8011f8a:	f7fa fdb1 	bl	800caf0 <memcpy>
	const float temp = NTC_TEMP(ADC_IND_TEMP_MOS2);
 8011f8e:	4d79      	ldr	r5, [pc, #484]	; (8012174 <mc_interface_set_configuration+0x224>)
 8011f90:	eddf 6a79 	vldr	s13, [pc, #484]	; 8012178 <mc_interface_set_configuration+0x228>
 8011f94:	896b      	ldrh	r3, [r5, #10]
 8011f96:	ed9f 0a79 	vldr	s0, [pc, #484]	; 801217c <mc_interface_set_configuration+0x22c>
 8011f9a:	ee07 3a10 	vmov	s14, r3
 8011f9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fa6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011faa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011fae:	f004 fae7 	bl	8016580 <logf>
	const float v_in = GET_INPUT_VOLTAGE();
 8011fb2:	8a2b      	ldrh	r3, [r5, #16]
	const float temp = NTC_TEMP(ADC_IND_TEMP_MOS2);
 8011fb4:	ed9f 5a72 	vldr	s10, [pc, #456]	; 8012180 <mc_interface_set_configuration+0x230>
 8011fb8:	eddf 7a72 	vldr	s15, [pc, #456]	; 8012184 <mc_interface_set_configuration+0x234>
 8011fbc:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8012188 <mc_interface_set_configuration+0x238>
	const float v_in = GET_INPUT_VOLTAGE();
 8011fc0:	eddf 5a72 	vldr	s11, [pc, #456]	; 801218c <mc_interface_set_configuration+0x23c>
	if (temp < conf->l_temp_fet_start) 
 8011fc4:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
	const float v_in = GET_INPUT_VOLTAGE();
 8011fc8:	eddf 6a71 	vldr	s13, [pc, #452]	; 8012190 <mc_interface_set_configuration+0x240>
	const float temp = NTC_TEMP(ADC_IND_TEMP_MOS2);
 8011fcc:	ee80 0a05 	vdiv.f32	s0, s0, s10
 8011fd0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011fd4:	ee70 7a27 	vadd.f32	s15, s0, s15
	const float v_in = GET_INPUT_VOLTAGE();
 8011fd8:	ee08 3a10 	vmov	s16, r3
	const float temp = NTC_TEMP(ADC_IND_TEMP_MOS2);
 8011fdc:	ee85 0a27 	vdiv.f32	s0, s10, s15
	const float v_in = GET_INPUT_VOLTAGE();
 8011fe0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
	const float temp = NTC_TEMP(ADC_IND_TEMP_MOS2);
 8011fe4:	ee30 0a46 	vsub.f32	s0, s0, s12
	const float v_in = GET_INPUT_VOLTAGE();
 8011fe8:	ee28 8a25 	vmul.f32	s16, s16, s11
	if (temp < conf->l_temp_fet_start) 
 8011fec:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	const float v_in = GET_INPUT_VOLTAGE();
 8011ff4:	ee28 8a26 	vmul.f32	s16, s16, s13
	if (temp < conf->l_temp_fet_start) 
 8011ff8:	d51a      	bpl.n	8012030 <mc_interface_set_configuration+0xe0>
		conf->lo_current_min = conf->l_current_min;
 8011ffa:	6963      	ldr	r3, [r4, #20]
 8011ffc:	6723      	str	r3, [r4, #112]	; 0x70
		conf->lo_current_max = conf->l_current_max;
 8011ffe:	6923      	ldr	r3, [r4, #16]
 8012000:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (v_in > conf->l_battery_cut_start)
 8012002:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8012006:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200e:	dc20      	bgt.n	8012052 <mc_interface_set_configuration+0x102>
	else if (v_in < conf->l_battery_cut_end) 
 8012010:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8012014:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201c:	f140 8088 	bpl.w	8012130 <mc_interface_set_configuration+0x1e0>
		conf->lo_in_current_max = 0.0;
 8012020:	2300      	movs	r3, #0
 8012022:	6763      	str	r3, [r4, #116]	; 0x74
}
 8012024:	ecbd 8b02 	vpop	{d8}
	conf->lo_in_current_min = conf->l_in_current_min;
 8012028:	69e3      	ldr	r3, [r4, #28]
 801202a:	67a3      	str	r3, [r4, #120]	; 0x78
	switch (m_conf.motor_type) {
 801202c:	7b23      	ldrb	r3, [r4, #12]
}
 801202e:	bd38      	pop	{r3, r4, r5, pc}
	else if (temp > conf->l_temp_fet_end) 
 8012030:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8012034:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203c:	dd0c      	ble.n	8012058 <mc_interface_set_configuration+0x108>
		conf->lo_current_min = 0.0;
 801203e:	2300      	movs	r3, #0
 8012040:	6723      	str	r3, [r4, #112]	; 0x70
		conf->lo_current_max = 0.0;
 8012042:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (v_in > conf->l_battery_cut_start)
 8012044:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8012048:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012050:	ddde      	ble.n	8012010 <mc_interface_set_configuration+0xc0>
		conf->lo_in_current_max = conf->l_in_current_max;	
 8012052:	69a3      	ldr	r3, [r4, #24]
 8012054:	6763      	str	r3, [r4, #116]	; 0x74
 8012056:	e7e5      	b.n	8012024 <mc_interface_set_configuration+0xd4>
		float maxc = fabsf(conf->l_current_max);
 8012058:	edd4 1a04 	vldr	s3, [r4, #16]
		if (fabsf(conf->l_current_min) > maxc)
 801205c:	edd4 7a05 	vldr	s15, [r4, #20]
		maxc = utils_map(temp, conf->l_temp_fet_start, conf->l_temp_fet_end, maxc, 0.0);
 8012060:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8012194 <mc_interface_set_configuration+0x244>
		float maxc = fabsf(conf->l_current_max);
 8012064:	eef0 1ae1 	vabs.f32	s3, s3
		if (fabsf(conf->l_current_min) > maxc)
 8012068:	eef0 7ae7 	vabs.f32	s15, s15
 801206c:	eef4 1ae7 	vcmpe.f32	s3, s15
 8012070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			maxc = fabsf(conf->l_current_min);
 8012074:	bf48      	it	mi
 8012076:	edd4 1a05 	vldrmi	s3, [r4, #20]
		maxc = utils_map(temp, conf->l_temp_fet_start, conf->l_temp_fet_end, maxc, 0.0);
 801207a:	edd4 0a13 	vldr	s1, [r4, #76]	; 0x4c
 801207e:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
			maxc = fabsf(conf->l_current_min);
 8012082:	bf48      	it	mi
 8012084:	eef0 1ae1 	vabsmi.f32	s3, s3
		maxc = utils_map(temp, conf->l_temp_fet_start, conf->l_temp_fet_end, maxc, 0.0);
 8012088:	f002 f922 	bl	80142d0 <utils_map>
		if (fabsf(conf->l_current_max) > maxc)
 801208c:	edd4 7a04 	vldr	s15, [r4, #16]
 8012090:	eef0 7ae7 	vabs.f32	s15, s15
 8012094:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209c:	d50c      	bpl.n	80120b8 <mc_interface_set_configuration+0x168>
			conf->lo_current_max = SIGN(conf->l_current_max) * maxc;
 801209e:	edd4 7a04 	vldr	s15, [r4, #16]
 80120a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80120a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120aa:	bf4c      	ite	mi
 80120ac:	eef1 7a40 	vnegmi.f32	s15, s0
 80120b0:	eef0 7a40 	vmovpl.f32	s15, s0
 80120b4:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
		if (fabsf(conf->l_current_min) > maxc) 
 80120b8:	edd4 7a05 	vldr	s15, [r4, #20]
 80120bc:	eef0 7ae7 	vabs.f32	s15, s15
 80120c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80120c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c8:	d59b      	bpl.n	8012002 <mc_interface_set_configuration+0xb2>
			conf->lo_current_min = SIGN(conf->l_current_min) * maxc;
 80120ca:	edd4 7a05 	vldr	s15, [r4, #20]
 80120ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80120d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d6:	bf48      	it	mi
 80120d8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80120dc:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 80120e0:	e78f      	b.n	8012002 <mc_interface_set_configuration+0xb2>
		encoder_deinit();
 80120e2:	f000 fa65 	bl	80125b0 <encoder_deinit>
		switch (configuration->m_sensor_port_mode) {
 80120e6:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d038      	beq.n	8012160 <mc_interface_set_configuration+0x210>
 80120ee:	2b02      	cmp	r3, #2
 80120f0:	f47f af3d 	bne.w	8011f6e <mc_interface_set_configuration+0x1e>
			encoder_init_as5047p_spi();
 80120f4:	f000 fafc 	bl	80126f0 <encoder_init_as5047p_spi>
 80120f8:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
	if (configuration->m_sensor_port_mode == SENSOR_PORT_MODE_ABI) {
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	f47f af36 	bne.w	8011f6e <mc_interface_set_configuration+0x1e>
		encoder_set_counts(configuration->m_encoder_counts);
 8012102:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 8012106:	f000 fc13 	bl	8012930 <encoder_set_counts>
	if (m_conf.motor_type == MOTOR_TYPE_FOC	&& configuration->motor_type != MOTOR_TYPE_FOC)
 801210a:	7b23      	ldrb	r3, [r4, #12]
 801210c:	2b02      	cmp	r3, #2
 801210e:	f47f af32 	bne.w	8011f76 <mc_interface_set_configuration+0x26>
 8012112:	7b2b      	ldrb	r3, [r5, #12]
 8012114:	2b02      	cmp	r3, #2
 8012116:	d11a      	bne.n	801214e <mc_interface_set_configuration+0x1fe>
	else if (m_conf.motor_type != MOTOR_TYPE_FOC && configuration->motor_type == MOTOR_TYPE_FOC)
 8012118:	7b23      	ldrb	r3, [r4, #12]
 801211a:	2b02      	cmp	r3, #2
 801211c:	f43f af32 	beq.w	8011f84 <mc_interface_set_configuration+0x34>
		mcpwm_deinit();
 8012120:	f7ff fe16 	bl	8011d50 <mcpwm_deinit>
		m_conf = *configuration;
 8012124:	4629      	mov	r1, r5
 8012126:	22d4      	movs	r2, #212	; 0xd4
 8012128:	4811      	ldr	r0, [pc, #68]	; (8012170 <mc_interface_set_configuration+0x220>)
 801212a:	f7fa fce1 	bl	800caf0 <memcpy>
 801212e:	e72e      	b.n	8011f8e <mc_interface_set_configuration+0x3e>
		conf->lo_in_current_max = utils_map(v_in, conf->l_battery_cut_start,
 8012130:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
 8012134:	ed9f 2a17 	vldr	s4, [pc, #92]	; 8012194 <mc_interface_set_configuration+0x244>
 8012138:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
 801213c:	edd4 1a06 	vldr	s3, [r4, #24]
 8012140:	eeb0 0a48 	vmov.f32	s0, s16
 8012144:	f002 f8c4 	bl	80142d0 <utils_map>
 8012148:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 801214c:	e76a      	b.n	8012024 <mc_interface_set_configuration+0xd4>
		m_conf = *configuration;
 801214e:	4629      	mov	r1, r5
 8012150:	22d4      	movs	r2, #212	; 0xd4
 8012152:	4807      	ldr	r0, [pc, #28]	; (8012170 <mc_interface_set_configuration+0x220>)
 8012154:	f7fa fccc 	bl	800caf0 <memcpy>
		mcpwm_init(&m_conf);
 8012158:	4805      	ldr	r0, [pc, #20]	; (8012170 <mc_interface_set_configuration+0x220>)
 801215a:	f7ff fc31 	bl	80119c0 <mcpwm_init>
 801215e:	e716      	b.n	8011f8e <mc_interface_set_configuration+0x3e>
			encoder_init_abi(configuration->m_encoder_counts);
 8012160:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 8012164:	f000 fa64 	bl	8012630 <encoder_init_abi>
 8012168:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
			break;
 801216c:	e6fc      	b.n	8011f68 <mc_interface_set_configuration+0x18>
 801216e:	bf00      	nop
 8012170:	20001a20 	.word	0x20001a20
 8012174:	20001320 	.word	0x20001320
 8012178:	4c1c363c 	.word	0x4c1c363c
 801217c:	461c4000 	.word	0x461c4000
 8012180:	4556a000 	.word	0x4556a000
 8012184:	3b5bcf0f 	.word	0x3b5bcf0f
 8012188:	43889333 	.word	0x43889333
 801218c:	3a534067 	.word	0x3a534067
 8012190:	4195d174 	.word	0x4195d174
	...

080121a0 <mc_interface_unlock>:
	m_lock_enabled = false;
 80121a0:	4b01      	ldr	r3, [pc, #4]	; (80121a8 <mc_interface_unlock+0x8>)
 80121a2:	2200      	movs	r2, #0
 80121a4:	701a      	strb	r2, [r3, #0]
}
 80121a6:	4770      	bx	lr
 80121a8:	20001b08 	.word	0x20001b08
 80121ac:	00000000 	.word	0x00000000

080121b0 <mc_interface_get_fault>:
	return m_fault_now;
 80121b0:	4b01      	ldr	r3, [pc, #4]	; (80121b8 <mc_interface_get_fault+0x8>)
}
 80121b2:	7818      	ldrb	r0, [r3, #0]
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20001af8 	.word	0x20001af8
 80121bc:	00000000 	.word	0x00000000

080121c0 <mc_interface_set_velocity>:
	CtrlParm.qVelRef = (float)vel/1000; 
 80121c0:	ee07 0a90 	vmov	s15, r0
 80121c4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80121d8 <mc_interface_set_velocity+0x18>
 80121c8:	4b04      	ldr	r3, [pc, #16]	; (80121dc <mc_interface_set_velocity+0x1c>)
 80121ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121d2:	edc3 7a00 	vstr	s15, [r3]
}
 80121d6:	4770      	bx	lr
 80121d8:	447a0000 	.word	0x447a0000
 80121dc:	200020d0 	.word	0x200020d0

080121e0 <CalcPI>:

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 80121e0:	edd0 5a07 	vldr	s11, [r0, #28]
 80121e4:	ed90 6a06 	vldr	s12, [r0, #24]
	
	U  = pParm->qdSum + pParm->qKp * Err;
 80121e8:	edd0 7a00 	vldr	s15, [r0]
 80121ec:	ed90 7a01 	vldr	s14, [r0, #4]

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 80121f0:	edd0 6a04 	vldr	s13, [r0, #16]
	Err  = pParm->qInRef - pParm->qInMeas;
 80121f4:	ee36 6a65 	vsub.f32	s12, s12, s11
	U  = pParm->qdSum + pParm->qKp * Err;
 80121f8:	eef0 5a67 	vmov.f32	s11, s15
 80121fc:	eee7 5a06 	vfma.f32	s11, s14, s12
	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 8012200:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	U  = pParm->qdSum + pParm->qKp * Err;
 8012208:	eeb0 7a65 	vmov.f32	s14, s11
	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 801220c:	d40b      	bmi.n	8012226 <CalcPI+0x46>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 801220e:	edd0 6a05 	vldr	s13, [r0, #20]
 8012212:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221a:	dc04      	bgt.n	8012226 <CalcPI+0x46>
	else                  pParm->qOut = U ;
 801221c:	eef0 6a65 	vmov.f32	s13, s11
 8012220:	edc0 5a08 	vstr	s11, [r0, #32]
 8012224:	e001      	b.n	801222a <CalcPI+0x4a>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 8012226:	edc0 6a08 	vstr	s13, [r0, #32]

	Exc = U - pParm->qOut;

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 801222a:	ed90 5a02 	vldr	s10, [r0, #8]
 801222e:	edd0 5a03 	vldr	s11, [r0, #12]
 8012232:	eee5 7a06 	vfma.f32	s15, s10, s12
	Exc = U - pParm->qOut;
 8012236:	ee37 7a66 	vsub.f32	s14, s14, s13
	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 801223a:	eee5 7ac7 	vfms.f32	s15, s11, s14
 801223e:	edc0 7a00 	vstr	s15, [r0]
	
	return;
}
 8012242:	4770      	bx	lr
	...

08012250 <DoControl>:
{
 8012250:	b510      	push	{r4, lr}
	PIParmD.qInMeas = ParkParm.qId;
 8012252:	4b1b      	ldr	r3, [pc, #108]	; (80122c0 <DoControl+0x70>)
 8012254:	4c1b      	ldr	r4, [pc, #108]	; (80122c4 <DoControl+0x74>)
{
 8012256:	ed2d 8b02 	vpush	{d8}
	PIParmD.qInMeas = ParkParm.qId;
 801225a:	69e1      	ldr	r1, [r4, #28]
 801225c:	61d9      	str	r1, [r3, #28]
	PIParmD.qInRef	= 0.0f;
 801225e:	2200      	movs	r2, #0
	CalcPI(&PIParmD);
 8012260:	4618      	mov	r0, r3
	PIParmD.qInRef	= 0.0f;
 8012262:	619a      	str	r2, [r3, #24]
	CalcPI(&PIParmD);
 8012264:	f7ff ffbc 	bl	80121e0 <CalcPI>
		ParkParm.qVd = PIParmD.qOut;
 8012268:	edd3 7a08 	vldr	s15, [r3, #32]
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801226c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80122c8 <DoControl+0x78>
		ParkParm.qVd = PIParmD.qOut;
 8012270:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8012274:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012278:	4b14      	ldr	r3, [pc, #80]	; (80122cc <DoControl+0x7c>)
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801227a:	ee30 0a67 	vsub.f32	s0, s0, s15
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 801227e:	edc3 7a00 	vstr	s15, [r3]
 8012282:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801228a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801228e:	d413      	bmi.n	80122b8 <DoControl+0x68>
 8012290:	4b0f      	ldr	r3, [pc, #60]	; (80122d0 <DoControl+0x80>)
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 8012292:	4a10      	ldr	r2, [pc, #64]	; (80122d4 <DoControl+0x84>)
	CalcPI(&PIParmQ);
 8012294:	4618      	mov	r0, r3
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 8012296:	6891      	ldr	r1, [r2, #8]
	PIParmQ.qInMeas = ParkParm.qIq;
 8012298:	6a22      	ldr	r2, [r4, #32]
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 801229a:	6199      	str	r1, [r3, #24]
	PIParmQ.qInMeas = ParkParm.qIq;
 801229c:	61da      	str	r2, [r3, #28]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 801229e:	eef1 7a48 	vneg.f32	s15, s16
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80122a2:	ed83 8a04 	vstr	s16, [r3, #16]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80122a6:	edc3 7a05 	vstr	s15, [r3, #20]
	CalcPI(&PIParmQ);
 80122aa:	f7ff ff99 	bl	80121e0 <CalcPI>
}
 80122ae:	ecbd 8b02 	vpop	{d8}
		ParkParm.qVq = PIParmQ.qOut;
 80122b2:	6a1b      	ldr	r3, [r3, #32]
 80122b4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80122b6:	bd10      	pop	{r4, pc}
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80122b8:	f004 fc52 	bl	8016b60 <sqrtf>
 80122bc:	e7e8      	b.n	8012290 <DoControl+0x40>
 80122be:	bf00      	nop
 80122c0:	200020e4 	.word	0x200020e4
 80122c4:	20002174 	.word	0x20002174
 80122c8:	3f670a3d 	.word	0x3f670a3d
 80122cc:	200021d4 	.word	0x200021d4
 80122d0:	2000212c 	.word	0x2000212c
 80122d4:	200020d0 	.word	0x200020d0
	...

080122e0 <SetupControlParameters>:

	CtrlParm.qVelRef = 0.0f;
	CtrlParm.qVdRef = 0.0f;
	CtrlParm.qVqRef = 0.0f;

	McCtrlBits.OpenLoop = false;
 80122e0:	4821      	ldr	r0, [pc, #132]	; (8012368 <SetupControlParameters+0x88>)
	SVGenParm.iPWMPeriod = TIM1->ARR;
 80122e2:	4b22      	ldr	r3, [pc, #136]	; (801236c <SetupControlParameters+0x8c>)
	MeasCurrParm.qKa    = DQKA;
 80122e4:	4922      	ldr	r1, [pc, #136]	; (8012370 <SetupControlParameters+0x90>)
	CtrlParm.qVelRef = 0.0f;
 80122e6:	4a23      	ldr	r2, [pc, #140]	; (8012374 <SetupControlParameters+0x94>)

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 80122e8:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80123ac <SetupControlParameters+0xcc>
{
 80122ec:	b4f0      	push	{r4, r5, r6, r7}
	McCtrlBits.OpenLoop = false;
 80122ee:	7805      	ldrb	r5, [r0, #0]
	SVGenParm.iPWMPeriod = TIM1->ARR;
 80122f0:	4c21      	ldr	r4, [pc, #132]	; (8012378 <SetupControlParameters+0x98>)
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 80122f2:	4f22      	ldr	r7, [pc, #136]	; (801237c <SetupControlParameters+0x9c>)
	SVGenParm.iPWMPeriod = TIM1->ARR;
 80122f4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80122f6:	601c      	str	r4, [r3, #0]
	MeasCurrParm.qKb    = DQKB;
 80122f8:	2600      	movs	r6, #0
	McCtrlBits.OpenLoop = false;
 80122fa:	f366 0500 	bfi	r5, r6, #0, #1
 80122fe:	7005      	strb	r5, [r0, #0]
	MeasCurrParm.qKa    = DQKA;
 8012300:	4d1f      	ldr	r5, [pc, #124]	; (8012380 <SetupControlParameters+0xa0>)
	PIParmD.qKp = DKP;
 8012302:	4c20      	ldr	r4, [pc, #128]	; (8012384 <SetupControlParameters+0xa4>)

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8012304:	4820      	ldr	r0, [pc, #128]	; (8012388 <SetupControlParameters+0xa8>)
	MeasCurrParm.qKb    = DQKB;
 8012306:	610e      	str	r6, [r1, #16]
	CtrlParm.qVelRef = 0.0f;
 8012308:	2300      	movs	r3, #0
	MeasCurrParm.qKa    = DQKA;
 801230a:	e9c1 5502 	strd	r5, r5, [r1, #8]
	PIParmD.qKi = DKI;
 801230e:	4e1f      	ldr	r6, [pc, #124]	; (801238c <SetupControlParameters+0xac>)
	PIParmD.qKc = DKC;
 8012310:	4d1f      	ldr	r5, [pc, #124]	; (8012390 <SetupControlParameters+0xb0>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8012312:	4920      	ldr	r1, [pc, #128]	; (8012394 <SetupControlParameters+0xb4>)
	CtrlParm.qVdRef = 0.0f;
 8012314:	6053      	str	r3, [r2, #4]
	PIParmD.qKi = DKI;
 8012316:	60a6      	str	r6, [r4, #8]
	PIParmD.qKc = DKC;
 8012318:	60e5      	str	r5, [r4, #12]
	PIParmD.qOutMax = DOUTMAX;
 801231a:	6125      	str	r5, [r4, #16]
	PIParmD.qOutMin = -PIParmD.qOutMax;
 801231c:	6167      	str	r7, [r4, #20]
	CtrlParm.qVelRef = 0.0f;
 801231e:	6013      	str	r3, [r2, #0]
	CtrlParm.qVqRef = 0.0f;
 8012320:	6093      	str	r3, [r2, #8]
	pParm->qdSum=0;
 8012322:	6023      	str	r3, [r4, #0]
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
 8012324:	4a1c      	ldr	r2, [pc, #112]	; (8012398 <SetupControlParameters+0xb8>)
	pParm->qOut=0;
 8012326:	6223      	str	r3, [r4, #32]
	PIParmD.qKp = DKP;
 8012328:	f8c4 c004 	str.w	ip, [r4, #4]
	PIParmW.qKp = WKP;
 801232c:	4c1b      	ldr	r4, [pc, #108]	; (801239c <SetupControlParameters+0xbc>)
	PIParmQ.qKi = QKI;
 801232e:	6086      	str	r6, [r0, #8]
	PIParmQ.qKc = QKC;
 8012330:	60c5      	str	r5, [r0, #12]
	PIParmW.qOutMax = WOUTMAX;
 8012332:	4e1b      	ldr	r6, [pc, #108]	; (80123a0 <SetupControlParameters+0xc0>)
	PIParmQ.qOutMax = QOUTMAX;
 8012334:	6105      	str	r5, [r0, #16]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 8012336:	6147      	str	r7, [r0, #20]
	PIParmQ.qKp = QKP;
 8012338:	f8c0 c004 	str.w	ip, [r0, #4]
	pParm->qdSum=0;
 801233c:	6003      	str	r3, [r0, #0]
	pParm->qOut=0;
 801233e:	6203      	str	r3, [r0, #32]
	PIParmPLL.qKi = PLLKI;		 
 8012340:	4f18      	ldr	r7, [pc, #96]	; (80123a4 <SetupControlParameters+0xc4>)
	PIParmW.qOutMin = -PIParmW.qOutMax;
 8012342:	4819      	ldr	r0, [pc, #100]	; (80123a8 <SetupControlParameters+0xc8>)
	PIParmW.qKp = WKP;
 8012344:	604c      	str	r4, [r1, #4]
	PIParmW.qKi = WKI;
 8012346:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	PIParmW.qKc = WKC;
 801234a:	60cd      	str	r5, [r1, #12]
	PIParmW.qKi = WKI;
 801234c:	608c      	str	r4, [r1, #8]
	PIParmPLL.qKp = PLLKP;		 
 801234e:	6054      	str	r4, [r2, #4]
	PIParmW.qOutMax = WOUTMAX;
 8012350:	610e      	str	r6, [r1, #16]
	pParm->qdSum=0;
 8012352:	600b      	str	r3, [r1, #0]
	pParm->qOut=0;
 8012354:	620b      	str	r3, [r1, #32]
	PIParmW.qOutMin = -PIParmW.qOutMax;
 8012356:	6148      	str	r0, [r1, #20]
	PIParmPLL.qKi = PLLKI;		 
 8012358:	6097      	str	r7, [r2, #8]
	PIParmPLL.qKc = PLLKC;		 
 801235a:	60d5      	str	r5, [r2, #12]
	PIParmPLL.qOutMax = PLLOUTMAX;	 
 801235c:	6116      	str	r6, [r2, #16]
	PIParmPLL.qOutMin = -PIParmPLL.qOutMax;
 801235e:	6150      	str	r0, [r2, #20]
	pParm->qdSum=0;
 8012360:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 8012362:	6213      	str	r3, [r2, #32]

	InitPI(&PIParmPLL);

}
 8012364:	bcf0      	pop	{r4, r5, r6, r7}
 8012366:	4770      	bx	lr
 8012368:	200020e0 	.word	0x200020e0
 801236c:	200021b4 	.word	0x200021b4
 8012370:	200021d8 	.word	0x200021d8
 8012374:	200020d0 	.word	0x200020d0
 8012378:	40010000 	.word	0x40010000
 801237c:	bf7fff58 	.word	0xbf7fff58
 8012380:	3a534067 	.word	0x3a534067
 8012384:	200020e4 	.word	0x200020e4
 8012388:	2000212c 	.word	0x2000212c
 801238c:	3d4ccccd 	.word	0x3d4ccccd
 8012390:	3f7fff58 	.word	0x3f7fff58
 8012394:	20002150 	.word	0x20002150
 8012398:	20002108 	.word	0x20002108
 801239c:	41400000 	.word	0x41400000
 80123a0:	3f733333 	.word	0x3f733333
 80123a4:	3c23d70a 	.word	0x3c23d70a
 80123a8:	bf733333 	.word	0xbf733333
 80123ac:	3ca3d70a 	.word	0x3ca3d70a

080123b0 <CalcTimes>:



void CalcTimes(void)
{
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 80123b0:	4a1b      	ldr	r2, [pc, #108]	; (8012420 <CalcTimes+0x70>)
 80123b2:	edd2 7a00 	vldr	s15, [r2]
 80123b6:	edd2 6a04 	vldr	s13, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 80123ba:	ed92 7a05 	vldr	s14, [r2, #20]
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 80123be:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 80123c2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 80123c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 80123ca:	ee27 7a87 	vmul.f32	s14, s15, s14
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 80123ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 80123d2:	edc2 6a04 	vstr	s13, [r2, #16]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 80123d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 80123da:	ed82 7a05 	vstr	s14, [r2, #20]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 80123de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80123e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123e6:	ee17 3a90 	vmov	r3, s15
 80123ea:	b29b      	uxth	r3, r3
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 80123ec:	ee07 3a90 	vmov	s15, r3
 80123f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 80123f4:	8393      	strh	r3, [r2, #28]
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 80123f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123fe:	ee17 3a90 	vmov	r3, s15
 8012402:	b29b      	uxth	r3, r3
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 8012404:	ee07 3a90 	vmov	s15, r3
 8012408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 801240c:	8353      	strh	r3, [r2, #26]
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 801240e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012416:	ee17 3a90 	vmov	r3, s15
 801241a:	8313      	strh	r3, [r2, #24]

	return;
}  
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	200021b4 	.word	0x200021b4
	...

08012430 <CalcSVGen>:

void CalcSVGen( void )
{ 
	if( SVGenParm.qVr1 >= 0 )
 8012430:	483d      	ldr	r0, [pc, #244]	; (8012528 <CalcSVGen+0xf8>)
 8012432:	ed90 7a01 	vldr	s14, [r0, #4]
 8012436:	edd0 7a02 	vldr	s15, [r0, #8]
 801243a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{ 
 8012442:	b508      	push	{r3, lr}
	{       
		// (xx1)
		if( SVGenParm.qVr2 >= 0 )
 8012444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	if( SVGenParm.qVr1 >= 0 )
 8012448:	db23      	blt.n	8012492 <CalcSVGen+0x62>
		if( SVGenParm.qVr2 >= 0 )
 801244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244e:	da13      	bge.n	8012478 <CalcSVGen+0x48>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
		}
		else
		{            
			// (x01)
			if( SVGenParm.qVr3 >= 0 )
 8012450:	edd0 6a03 	vldr	s13, [r0, #12]
 8012454:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245c:	db41      	blt.n	80124e2 <CalcSVGen+0xb2>
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
 801245e:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr3;
 8012462:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8012466:	f7ff ffa3 	bl	80123b0 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 801246a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 801246e:	8b42      	ldrh	r2, [r0, #26]
 8012470:	8b01      	ldrh	r1, [r0, #24]
 8012472:	8b80      	ldrh	r0, [r0, #28]
 8012474:	f7ff bc94 	b.w	8011da0 <update_timer_Duty>
			SVGenParm.T2 = SVGenParm.qVr2;
 8012478:	edc0 7a05 	vstr	s15, [r0, #20]
			SVGenParm.T1 = SVGenParm.qVr1;
 801247c:	ed80 7a04 	vstr	s14, [r0, #16]
			CalcTimes();
 8012480:	f7ff ff96 	bl	80123b0 <CalcTimes>
}
 8012484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8012488:	8b82      	ldrh	r2, [r0, #28]
 801248a:	8b41      	ldrh	r1, [r0, #26]
 801248c:	8b00      	ldrh	r0, [r0, #24]
 801248e:	f7ff bc87 	b.w	8011da0 <update_timer_Duty>
		if( SVGenParm.qVr2 >= 0 )
 8012492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012496:	db35      	blt.n	8012504 <CalcSVGen+0xd4>
			if( SVGenParm.qVr3 >= 0 )
 8012498:	edd0 6a03 	vldr	s13, [r0, #12]
 801249c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80124a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a4:	db0c      	blt.n	80124c0 <CalcSVGen+0x90>
				SVGenParm.T2 = SVGenParm.qVr3;
 80124a6:	edc0 6a05 	vstr	s13, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr2;
 80124aa:	edc0 7a04 	vstr	s15, [r0, #16]
				CalcTimes();
 80124ae:	f7ff ff7f 	bl	80123b0 <CalcTimes>
}
 80124b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 80124b6:	8b02      	ldrh	r2, [r0, #24]
 80124b8:	8b81      	ldrh	r1, [r0, #28]
 80124ba:	8b40      	ldrh	r0, [r0, #26]
 80124bc:	f7ff bc70 	b.w	8011da0 <update_timer_Duty>
				SVGenParm.T2 = -SVGenParm.qVr3;
 80124c0:	eef1 6a66 	vneg.f32	s13, s13
				SVGenParm.T1 = -SVGenParm.qVr1;
 80124c4:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T2 = -SVGenParm.qVr3;
 80124c8:	edc0 6a05 	vstr	s13, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr1;
 80124cc:	ed80 7a04 	vstr	s14, [r0, #16]
				CalcTimes();
 80124d0:	f7ff ff6e 	bl	80123b0 <CalcTimes>
}
 80124d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 80124d8:	8b42      	ldrh	r2, [r0, #26]
 80124da:	8b81      	ldrh	r1, [r0, #28]
 80124dc:	8b00      	ldrh	r0, [r0, #24]
 80124de:	f7ff bc5f 	b.w	8011da0 <update_timer_Duty>
				SVGenParm.T2 = -SVGenParm.qVr2;
 80124e2:	eef1 7a67 	vneg.f32	s15, s15
				SVGenParm.T1 = -SVGenParm.qVr3;
 80124e6:	eef1 6a66 	vneg.f32	s13, s13
				SVGenParm.T2 = -SVGenParm.qVr2;
 80124ea:	edc0 7a05 	vstr	s15, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr3;
 80124ee:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 80124f2:	f7ff ff5d 	bl	80123b0 <CalcTimes>
}
 80124f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 80124fa:	8b82      	ldrh	r2, [r0, #28]
 80124fc:	8b01      	ldrh	r1, [r0, #24]
 80124fe:	8b40      	ldrh	r0, [r0, #26]
 8012500:	f7ff bc4e 	b.w	8011da0 <update_timer_Duty>
			SVGenParm.T2 = -SVGenParm.qVr1;
 8012504:	eeb1 7a47 	vneg.f32	s14, s14
			SVGenParm.T1 = -SVGenParm.qVr2;
 8012508:	eef1 7a67 	vneg.f32	s15, s15
			SVGenParm.T2 = -SVGenParm.qVr1;
 801250c:	ed80 7a05 	vstr	s14, [r0, #20]
			SVGenParm.T1 = -SVGenParm.qVr2;
 8012510:	edc0 7a04 	vstr	s15, [r0, #16]
			CalcTimes();
 8012514:	f7ff ff4c 	bl	80123b0 <CalcTimes>
}
 8012518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 801251c:	8b02      	ldrh	r2, [r0, #24]
 801251e:	8b41      	ldrh	r1, [r0, #26]
 8012520:	8b80      	ldrh	r0, [r0, #28]
 8012522:	f7ff bc3d 	b.w	8011da0 <update_timer_Duty>
 8012526:	bf00      	nop
 8012528:	200021b4 	.word	0x200021b4
 801252c:	00000000 	.word	0x00000000

08012530 <do_dc_cal>:

uint16_t curr0_sum;
uint16_t curr1_sum;
uint16_t curr_start_samples;
bool do_dc_cal(void)
{
 8012530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t fault_cnt=0;
	DCCAL_ON();
 8012532:	4b19      	ldr	r3, [pc, #100]	; (8012598 <do_dc_cal+0x68>)
	
	while(IS_DRV_FAULT())
 8012534:	4d19      	ldr	r5, [pc, #100]	; (801259c <do_dc_cal+0x6c>)
	DCCAL_ON();
 8012536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801253a:	831a      	strh	r2, [r3, #24]
	while(IS_DRV_FAULT())
 801253c:	692b      	ldr	r3, [r5, #16]
 801253e:	04db      	lsls	r3, r3, #19
 8012540:	bf58      	it	pl
 8012542:	2405      	movpl	r4, #5
 8012544:	d40d      	bmi.n	8012562 <do_dc_cal+0x32>
		if(5 < fault_cnt)
		{
			return false;
		}
		
		chThdSleepMilliseconds(1000);
 8012546:	f242 7010 	movw	r0, #10000	; 0x2710
 801254a:	f7fa fec1 	bl	800d2d0 <chThdSleep>
	while(IS_DRV_FAULT())
 801254e:	692b      	ldr	r3, [r5, #16]
 8012550:	3c01      	subs	r4, #1
 8012552:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8012556:	b2a4      	uxth	r4, r4
 8012558:	d103      	bne.n	8012562 <do_dc_cal+0x32>
		if(5 < fault_cnt)
 801255a:	2c00      	cmp	r4, #0
 801255c:	d1f3      	bne.n	8012546 <do_dc_cal+0x16>
			return false;
 801255e:	4620      	mov	r0, r4
	
	return true;

	//Uart3_printf(&SD3, (uint8_t *)"curr0_offset : %u\r\n",curr0_offset);//170530  
	//Uart3_printf(&SD3, (uint8_t *)"curr1_offset : %u\r\n",curr1_offset);//170530  
}
 8012560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	curr0_sum = 0;
 8012562:	4d0f      	ldr	r5, [pc, #60]	; (80125a0 <do_dc_cal+0x70>)
	curr1_sum = 0;
 8012564:	4c0f      	ldr	r4, [pc, #60]	; (80125a4 <do_dc_cal+0x74>)
	curr_start_samples = 0;
 8012566:	4e10      	ldr	r6, [pc, #64]	; (80125a8 <do_dc_cal+0x78>)
	DCCAL_OFF();
 8012568:	4f0b      	ldr	r7, [pc, #44]	; (8012598 <do_dc_cal+0x68>)
	curr0_sum = 0;
 801256a:	2300      	movs	r3, #0
	chThdSleepMilliseconds(1000);
 801256c:	f242 7010 	movw	r0, #10000	; 0x2710
	curr0_sum = 0;
 8012570:	802b      	strh	r3, [r5, #0]
	curr1_sum = 0;
 8012572:	8023      	strh	r3, [r4, #0]
	curr_start_samples = 0;
 8012574:	8033      	strh	r3, [r6, #0]
	chThdSleepMilliseconds(1000);
 8012576:	f7fa feab 	bl	800d2d0 <chThdSleep>
	MeasCurrParm.Offseta = curr0_sum / curr_start_samples;
 801257a:	490c      	ldr	r1, [pc, #48]	; (80125ac <do_dc_cal+0x7c>)
	MeasCurrParm.Offsetb = curr1_sum / curr_start_samples;
 801257c:	8823      	ldrh	r3, [r4, #0]
	MeasCurrParm.Offseta = curr0_sum / curr_start_samples;
 801257e:	8830      	ldrh	r0, [r6, #0]
 8012580:	882a      	ldrh	r2, [r5, #0]
	MeasCurrParm.Offsetb = curr1_sum / curr_start_samples;
 8012582:	fbb3 f3f0 	udiv	r3, r3, r0
	DCCAL_OFF();
 8012586:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	MeasCurrParm.Offseta = curr0_sum / curr_start_samples;
 801258a:	fbb2 f2f0 	udiv	r2, r2, r0
	MeasCurrParm.Offsetb = curr1_sum / curr_start_samples;
 801258e:	824b      	strh	r3, [r1, #18]
	MeasCurrParm.Offseta = curr0_sum / curr_start_samples;
 8012590:	820a      	strh	r2, [r1, #16]
	return true;
 8012592:	2001      	movs	r0, #1
	DCCAL_OFF();
 8012594:	837c      	strh	r4, [r7, #26]
}
 8012596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012598:	40020400 	.word	0x40020400
 801259c:	40020800 	.word	0x40020800
 80125a0:	20002200 	.word	0x20002200
 80125a4:	20002202 	.word	0x20002202
 80125a8:	20002204 	.word	0x20002204
 80125ac:	200021d8 	.word	0x200021d8

080125b0 <encoder_deinit>:
static void spi_begin(void);
static void spi_end(void);
static void spi_delay(void);


void encoder_deinit(void) {
 80125b0:	b510      	push	{r4, lr}
	nvicDisableVector(HW_ENC_EXTI_CH);
 80125b2:	2028      	movs	r0, #40	; 0x28
 80125b4:	f7fc f8ec 	bl	800e790 <nvicDisableVector>
	nvicDisableVector(HW_ENC_TIM_ISR_CH);

	TIM_DeInit(HW_ENC_TIM);

	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT_PULLUP);
 80125b8:	4c14      	ldr	r4, [pc, #80]	; (801260c <encoder_deinit+0x5c>)
	nvicDisableVector(HW_ENC_TIM_ISR_CH);
 80125ba:	201e      	movs	r0, #30
 80125bc:	f7fc f8e8 	bl	800e790 <nvicDisableVector>
	TIM_DeInit(HW_ENC_TIM);
 80125c0:	4813      	ldr	r0, [pc, #76]	; (8012610 <encoder_deinit+0x60>)
 80125c2:	f003 fc0d 	bl	8015de0 <TIM_DeInit>
	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT_PULLUP);
 80125c6:	4620      	mov	r0, r4
 80125c8:	2220      	movs	r2, #32
 80125ca:	2180      	movs	r1, #128	; 0x80
 80125cc:	f7fc feb8 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN, PAL_MODE_INPUT_PULLUP);
 80125d0:	4620      	mov	r0, r4
 80125d2:	2220      	movs	r2, #32
 80125d4:	2140      	movs	r1, #64	; 0x40
 80125d6:	f7fc feb3 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_CS_GPIO, SPI_SW_CS_PIN, PAL_MODE_INPUT_PULLUP);
 80125da:	2220      	movs	r2, #32
 80125dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80125e0:	480c      	ldr	r0, [pc, #48]	; (8012614 <encoder_deinit+0x64>)
 80125e2:	f7fc fead 	bl	800f340 <_pal_lld_setgroupmode>

	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 80125e6:	4620      	mov	r0, r4
 80125e8:	2220      	movs	r2, #32
 80125ea:	2140      	movs	r1, #64	; 0x40
 80125ec:	f7fc fea8 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 80125f0:	4620      	mov	r0, r4
 80125f2:	2220      	movs	r2, #32
 80125f4:	2180      	movs	r1, #128	; 0x80
 80125f6:	f7fc fea3 	bl	800f340 <_pal_lld_setgroupmode>

	index_found = false;
 80125fa:	4c07      	ldr	r4, [pc, #28]	; (8012618 <encoder_deinit+0x68>)
	mode = ENCODER_MODE_NONE;
 80125fc:	4807      	ldr	r0, [pc, #28]	; (801261c <encoder_deinit+0x6c>)
	last_enc_angle = 0.0;
 80125fe:	4a08      	ldr	r2, [pc, #32]	; (8012620 <encoder_deinit+0x70>)
	index_found = false;
 8012600:	2300      	movs	r3, #0
	last_enc_angle = 0.0;
 8012602:	2100      	movs	r1, #0
	index_found = false;
 8012604:	7023      	strb	r3, [r4, #0]
	mode = ENCODER_MODE_NONE;
 8012606:	7003      	strb	r3, [r0, #0]
	last_enc_angle = 0.0;
 8012608:	6011      	str	r1, [r2, #0]
}
 801260a:	bd10      	pop	{r4, pc}
 801260c:	40020400 	.word	0x40020400
 8012610:	40000800 	.word	0x40000800
 8012614:	40020800 	.word	0x40020800
 8012618:	20002214 	.word	0x20002214
 801261c:	2000221c 	.word	0x2000221c
 8012620:	20002218 	.word	0x20002218
	...

08012630 <encoder_init_abi>:

void encoder_init_abi(uint32_t counts) {
 8012630:	b570      	push	{r4, r5, r6, lr}
	EXTI_InitTypeDef   EXTI_InitStructure;

	// Initialize variables
	index_found = false;
	enc_counts = counts;
 8012632:	4e28      	ldr	r6, [pc, #160]	; (80126d4 <encoder_init_abi+0xa4>)

	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 8012634:	4c28      	ldr	r4, [pc, #160]	; (80126d8 <encoder_init_abi+0xa8>)
	index_found = false;
 8012636:	4b29      	ldr	r3, [pc, #164]	; (80126dc <encoder_init_abi+0xac>)
	enc_counts = counts;
 8012638:	6030      	str	r0, [r6, #0]
void encoder_init_abi(uint32_t counts) {
 801263a:	b082      	sub	sp, #8
	index_found = false;
 801263c:	2500      	movs	r5, #0
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 801263e:	4620      	mov	r0, r4
 8012640:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012644:	2140      	movs	r1, #64	; 0x40
	index_found = false;
 8012646:	701d      	strb	r5, [r3, #0]
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 8012648:	f7fc fe7a 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 801264c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012650:	4620      	mov	r0, r4
 8012652:	2180      	movs	r1, #128	; 0x80
 8012654:	f7fc fe74 	bl	800f340 <_pal_lld_setgroupmode>
//	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));

	// Enable timer clock
	HW_ENC_TIM_CLK_EN();
 8012658:	2101      	movs	r1, #1
 801265a:	2004      	movs	r0, #4

	// Enable SYSCFG clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	TIM_EncoderInterfaceConfig (HW_ENC_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 801265c:	f5a4 34fe 	sub.w	r4, r4, #130048	; 0x1fc00
	HW_ENC_TIM_CLK_EN();
 8012660:	f003 fb66 	bl	8015d30 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8012664:	2101      	movs	r1, #1
 8012666:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801266a:	f003 fb71 	bl	8015d50 <RCC_APB2PeriphClockCmd>
	TIM_EncoderInterfaceConfig (HW_ENC_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 801266e:	462a      	mov	r2, r5
 8012670:	462b      	mov	r3, r5
 8012672:	4620      	mov	r0, r4
 8012674:	2103      	movs	r1, #3
 8012676:	f003 fed3 	bl	8016420 <TIM_EncoderInterfaceConfig>
	TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 801267a:	6831      	ldr	r1, [r6, #0]
 801267c:	4620      	mov	r0, r4
 801267e:	3901      	subs	r1, #1
 8012680:	f003 fcde 	bl	8016040 <TIM_SetAutoreload>

	// Filter
	HW_ENC_TIM->CCMR1 |= 6 << 12 | 6 << 4;
 8012684:	69a3      	ldr	r3, [r4, #24]
 8012686:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 801268a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801268e:	61a3      	str	r3, [r4, #24]
	HW_ENC_TIM->CCMR2 |= 6 << 4;
 8012690:	69e3      	ldr	r3, [r4, #28]
 8012692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012696:	61e3      	str	r3, [r4, #28]

	TIM_Cmd(HW_ENC_TIM, ENABLE);
 8012698:	4620      	mov	r0, r4
 801269a:	2101      	movs	r1, #1
 801269c:	f003 fce8 	bl	8016070 <TIM_Cmd>

	// Interrupt on index pulse

	// Connect EXTI Line to pin
	SYSCFG_EXTILineConfig(HW_ENC_EXTI_PORTSRC, HW_ENC_EXTI_PINSRC);
 80126a0:	210b      	movs	r1, #11
 80126a2:	2002      	movs	r0, #2
 80126a4:	f003 fb84 	bl	8015db0 <SYSCFG_EXTILineConfig>

	// Configure EXTI Line
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80126a8:	2401      	movs	r4, #1
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
 80126aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80126ae:	2308      	movs	r3, #8
	EXTI_Init(&EXTI_InitStructure);
 80126b0:	4668      	mov	r0, sp
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80126b2:	f88d 3005 	strb.w	r3, [sp, #5]
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
 80126b6:	9200      	str	r2, [sp, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80126b8:	f88d 5004 	strb.w	r5, [sp, #4]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80126bc:	f88d 4006 	strb.w	r4, [sp, #6]
	EXTI_Init(&EXTI_InitStructure);
 80126c0:	f003 fa1e 	bl	8015b00 <EXTI_Init>

	// Enable and set EXTI Line Interrupt to the highest priority
	nvicEnableVector(HW_ENC_EXTI_CH, 0);
 80126c4:	4629      	mov	r1, r5
 80126c6:	2028      	movs	r0, #40	; 0x28
 80126c8:	f7fc f842 	bl	800e750 <nvicEnableVector>

	mode = ENCODER_MODE_ABI;
 80126cc:	4b04      	ldr	r3, [pc, #16]	; (80126e0 <encoder_init_abi+0xb0>)
 80126ce:	701c      	strb	r4, [r3, #0]
}
 80126d0:	b002      	add	sp, #8
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	20000808 	.word	0x20000808
 80126d8:	40020400 	.word	0x40020400
 80126dc:	20002214 	.word	0x20002214
 80126e0:	2000221c 	.word	0x2000221c
	...

080126f0 <encoder_init_as5047p_spi>:

void encoder_init_as5047p_spi(void) {
 80126f0:	b530      	push	{r4, r5, lr}
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT);
 80126f2:	4d1c      	ldr	r5, [pc, #112]	; (8012764 <encoder_init_as5047p_spi+0x74>)
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 80126f4:	4c1c      	ldr	r4, [pc, #112]	; (8012768 <encoder_init_as5047p_spi+0x78>)
void encoder_init_as5047p_spi(void) {
 80126f6:	b085      	sub	sp, #20
	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT);
 80126f8:	4628      	mov	r0, r5
 80126fa:	2200      	movs	r2, #0
 80126fc:	2180      	movs	r1, #128	; 0x80
 80126fe:	f7fc fe1f 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8012702:	4628      	mov	r0, r5
 8012704:	2219      	movs	r2, #25
 8012706:	2140      	movs	r1, #64	; 0x40
 8012708:	f7fc fe1a 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_CS_GPIO, SPI_SW_CS_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 801270c:	2219      	movs	r2, #25
 801270e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012712:	4816      	ldr	r0, [pc, #88]	; (801276c <encoder_init_as5047p_spi+0x7c>)
 8012714:	f7fc fe14 	bl	800f340 <_pal_lld_setgroupmode>
	HW_ENC_TIM_CLK_EN();
 8012718:	2101      	movs	r1, #1
 801271a:	2004      	movs	r0, #4
 801271c:	f003 fb08 	bl	8015d30 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8012720:	2300      	movs	r3, #0
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8012722:	4620      	mov	r0, r4
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8012724:	f241 0267 	movw	r2, #4199	; 0x1067
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8012728:	a901      	add	r1, sp, #4
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801272a:	9301      	str	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
 801272c:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8012730:	f88d 300e 	strb.w	r3, [sp, #14]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8012734:	9202      	str	r2, [sp, #8]
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8012736:	f003 fc33 	bl	8015fa0 <TIM_TimeBaseInit>

	// Enable overflow interrupt
	TIM_ITConfig(HW_ENC_TIM, TIM_IT_Update, ENABLE);
 801273a:	2201      	movs	r2, #1
 801273c:	4611      	mov	r1, r2
 801273e:	4620      	mov	r0, r4
 8012740:	f003 fe0e 	bl	8016360 <TIM_ITConfig>

	// Enable timer
	TIM_Cmd(HW_ENC_TIM, ENABLE);
 8012744:	4620      	mov	r0, r4
 8012746:	2101      	movs	r1, #1
 8012748:	f003 fc92 	bl	8016070 <TIM_Cmd>

	nvicEnableVector(HW_ENC_TIM_ISR_CH, 6);
 801274c:	2106      	movs	r1, #6
 801274e:	201e      	movs	r0, #30
 8012750:	f7fb fffe 	bl	800e750 <nvicEnableVector>

	mode = ENCODER_MODE_AS5047P_SPI;
 8012754:	4906      	ldr	r1, [pc, #24]	; (8012770 <encoder_init_as5047p_spi+0x80>)
	index_found = true;
 8012756:	4b07      	ldr	r3, [pc, #28]	; (8012774 <encoder_init_as5047p_spi+0x84>)
	mode = ENCODER_MODE_AS5047P_SPI;
 8012758:	2002      	movs	r0, #2
	index_found = true;
 801275a:	2201      	movs	r2, #1
	mode = ENCODER_MODE_AS5047P_SPI;
 801275c:	7008      	strb	r0, [r1, #0]
	index_found = true;
 801275e:	701a      	strb	r2, [r3, #0]
}
 8012760:	b005      	add	sp, #20
 8012762:	bd30      	pop	{r4, r5, pc}
 8012764:	40020400 	.word	0x40020400
 8012768:	40000800 	.word	0x40000800
 801276c:	40020800 	.word	0x40020800
 8012770:	2000221c 	.word	0x2000221c
 8012774:	20002214 	.word	0x20002214
	...

08012780 <encoder_reset>:

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8012780:	bf00      	nop
 8012782:	bf00      	nop
 8012784:	bf00      	nop
 8012786:	bf00      	nop
	// most likely are noise.
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	if (palReadPad(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3)) {
 8012788:	4b14      	ldr	r3, [pc, #80]	; (80127dc <encoder_reset+0x5c>)
 801278a:	691b      	ldr	r3, [r3, #16]
 801278c:	051b      	lsls	r3, r3, #20
 801278e:	d51d      	bpl.n	80127cc <encoder_reset+0x4c>
		const unsigned int cnt = HW_ENC_TIM->CNT;
		static int bad_pulses = 0;
		const unsigned int lim = enc_counts / 20;

		if (index_found) {
 8012790:	4a13      	ldr	r2, [pc, #76]	; (80127e0 <encoder_reset+0x60>)
		const unsigned int cnt = HW_ENC_TIM->CNT;
 8012792:	4914      	ldr	r1, [pc, #80]	; (80127e4 <encoder_reset+0x64>)
		if (index_found) {
 8012794:	7813      	ldrb	r3, [r2, #0]
		const unsigned int cnt = HW_ENC_TIM->CNT;
 8012796:	6a48      	ldr	r0, [r1, #36]	; 0x24
		if (index_found) {
 8012798:	b19b      	cbz	r3, 80127c2 <encoder_reset+0x42>
		const unsigned int lim = enc_counts / 20;
 801279a:	4913      	ldr	r1, [pc, #76]	; (80127e8 <encoder_reset+0x68>)
 801279c:	4b13      	ldr	r3, [pc, #76]	; (80127ec <encoder_reset+0x6c>)
 801279e:	6809      	ldr	r1, [r1, #0]
 80127a0:	fba3 c301 	umull	ip, r3, r3, r1
 80127a4:	091b      	lsrs	r3, r3, #4
			// Some plausibility filtering.
			if (cnt > (enc_counts - lim) || cnt < lim) {
 80127a6:	1ac9      	subs	r1, r1, r3
 80127a8:	4281      	cmp	r1, r0
 80127aa:	d310      	bcc.n	80127ce <encoder_reset+0x4e>
 80127ac:	4298      	cmp	r0, r3
 80127ae:	d30e      	bcc.n	80127ce <encoder_reset+0x4e>
				HW_ENC_TIM->CNT = 0;
				bad_pulses = 0;
			} else {
				bad_pulses++;
 80127b0:	490f      	ldr	r1, [pc, #60]	; (80127f0 <encoder_reset+0x70>)
 80127b2:	680b      	ldr	r3, [r1, #0]
 80127b4:	3301      	adds	r3, #1

				if (bad_pulses > 5) {
 80127b6:	2b05      	cmp	r3, #5
				bad_pulses++;
 80127b8:	600b      	str	r3, [r1, #0]
				if (bad_pulses > 5) {
 80127ba:	dd07      	ble.n	80127cc <encoder_reset+0x4c>
					index_found = 0;
 80127bc:	2300      	movs	r3, #0
 80127be:	7013      	strb	r3, [r2, #0]
 80127c0:	4770      	bx	lr
				}
			}
		} else {
			HW_ENC_TIM->CNT = 0;
			index_found = true;
			bad_pulses = 0;
 80127c2:	480b      	ldr	r0, [pc, #44]	; (80127f0 <encoder_reset+0x70>)
			HW_ENC_TIM->CNT = 0;
 80127c4:	624b      	str	r3, [r1, #36]	; 0x24
			index_found = true;
 80127c6:	2101      	movs	r1, #1
			bad_pulses = 0;
 80127c8:	6003      	str	r3, [r0, #0]
			index_found = true;
 80127ca:	7011      	strb	r1, [r2, #0]
		}
	}
}
 80127cc:	4770      	bx	lr
				HW_ENC_TIM->CNT = 0;
 80127ce:	4905      	ldr	r1, [pc, #20]	; (80127e4 <encoder_reset+0x64>)
				bad_pulses = 0;
 80127d0:	4a07      	ldr	r2, [pc, #28]	; (80127f0 <encoder_reset+0x70>)
				HW_ENC_TIM->CNT = 0;
 80127d2:	2300      	movs	r3, #0
 80127d4:	624b      	str	r3, [r1, #36]	; 0x24
				bad_pulses = 0;
 80127d6:	6013      	str	r3, [r2, #0]
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	40020800 	.word	0x40020800
 80127e0:	20002214 	.word	0x20002214
 80127e4:	40000800 	.word	0x40000800
 80127e8:	20000808 	.word	0x20000808
 80127ec:	cccccccd 	.word	0xcccccccd
 80127f0:	20002208 	.word	0x20002208
	...

08012800 <encoder_tim_isr>:
uint16_t cap1_cnt=0, cap1_r_new=0, cap1_r_old=0, cap1_f=0;
uint16_t pul1_width=0,pul1_period=0;
void encoder_tim_isr(void) {
	uint16_t pos;

	if(mode == ENCODER_MODE_AS5047P_SPI)
 8012800:	4b3d      	ldr	r3, [pc, #244]	; (80128f8 <encoder_tim_isr+0xf8>)
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	2b02      	cmp	r3, #2
void encoder_tim_isr(void) {
 8012806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(mode == ENCODER_MODE_AS5047P_SPI)
 801280a:	d023      	beq.n	8012854 <encoder_tim_isr+0x54>
		spi_end();

		pos &= 0x3FFF;
		last_enc_angle = ((float)pos * 360.0) / 16384.0;
	}
	else if(mode == ENCODER_MODE_PWM)
 801280c:	2b04      	cmp	r3, #4
 801280e:	d001      	beq.n	8012814 <encoder_tim_isr+0x14>
				TIM4->CCER |= TIM_CCER_CC1P;	// to rising edge
			}
		}
	}
	
}
 8012810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if((TIM4->SR & TIM_IT_CC1)&&(TIM4->DIER & TIM_IT_CC1))
 8012814:	4b39      	ldr	r3, [pc, #228]	; (80128fc <encoder_tim_isr+0xfc>)
 8012816:	691a      	ldr	r2, [r3, #16]
 8012818:	0790      	lsls	r0, r2, #30
 801281a:	d5f9      	bpl.n	8012810 <encoder_tim_isr+0x10>
 801281c:	68da      	ldr	r2, [r3, #12]
 801281e:	0791      	lsls	r1, r2, #30
 8012820:	d5f6      	bpl.n	8012810 <encoder_tim_isr+0x10>
			cap1_cnt++;
 8012822:	4937      	ldr	r1, [pc, #220]	; (8012900 <encoder_tim_isr+0x100>)
			if((GPIOA->IDR >> HW_HALL_ENC_PIN1) & 1U)
 8012824:	4837      	ldr	r0, [pc, #220]	; (8012904 <encoder_tim_isr+0x104>)
			cap1_cnt++;
 8012826:	880a      	ldrh	r2, [r1, #0]
			TIM4->SR = (uint16_t)~TIM_IT_CC1;	// clear flag
 8012828:	f64f 74fd 	movw	r4, #65533	; 0xfffd
			cap1_cnt++;
 801282c:	3201      	adds	r2, #1
 801282e:	800a      	strh	r2, [r1, #0]
			TIM4->SR = (uint16_t)~TIM_IT_CC1;	// clear flag
 8012830:	611c      	str	r4, [r3, #16]
			if((GPIOA->IDR >> HW_HALL_ENC_PIN1) & 1U)
 8012832:	6902      	ldr	r2, [r0, #16]
 8012834:	0652      	lsls	r2, r2, #25
 8012836:	d450      	bmi.n	80128da <encoder_tim_isr+0xda>
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8012838:	4933      	ldr	r1, [pc, #204]	; (8012908 <encoder_tim_isr+0x108>)
				cap1_f = TIM4->CCR1; // read capture data
 801283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 801283c:	8809      	ldrh	r1, [r1, #0]
				cap1_f = TIM4->CCR1; // read capture data
 801283e:	4833      	ldr	r0, [pc, #204]	; (801290c <encoder_tim_isr+0x10c>)
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8012840:	4c33      	ldr	r4, [pc, #204]	; (8012910 <encoder_tim_isr+0x110>)
				cap1_f = TIM4->CCR1; // read capture data
 8012842:	b292      	uxth	r2, r2
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8012844:	1a51      	subs	r1, r2, r1
				cap1_f = TIM4->CCR1; // read capture data
 8012846:	8002      	strh	r2, [r0, #0]
				TIM4->CCER |= TIM_CCER_CC1P;	// to rising edge
 8012848:	6a1a      	ldr	r2, [r3, #32]
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 801284a:	8021      	strh	r1, [r4, #0]
				TIM4->CCER |= TIM_CCER_CC1P;	// to rising edge
 801284c:	f042 0202 	orr.w	r2, r2, #2
 8012850:	621a      	str	r2, [r3, #32]
}
 8012852:	e7dd      	b.n	8012810 <encoder_tim_isr+0x10>
		}
	}
}

static void spi_begin(void) {
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8012854:	4b2f      	ldr	r3, [pc, #188]	; (8012914 <encoder_tim_isr+0x114>)
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 8012856:	4d30      	ldr	r5, [pc, #192]	; (8012918 <encoder_tim_isr+0x118>)
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8012858:	f44f 6200 	mov.w	r2, #2048	; 0x800
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801285c:	2740      	movs	r7, #64	; 0x40
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 801285e:	835a      	strh	r2, [r3, #26]
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 8012860:	46b8      	mov	r8, r7
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8012862:	2610      	movs	r6, #16
 8012864:	2400      	movs	r4, #0
 8012866:	bf00      	nop
 8012868:	bf00      	nop
 801286a:	bf00      	nop
 801286c:	bf00      	nop
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801286e:	f8a5 8018 	strh.w	r8, [r5, #24]
 8012872:	bf00      	nop
 8012874:	bf00      	nop
 8012876:	bf00      	nop
 8012878:	bf00      	nop
			r1 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 801287a:	6928      	ldr	r0, [r5, #16]
 801287c:	bf00      	nop
			r2 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 801287e:	6929      	ldr	r1, [r5, #16]
 8012880:	bf00      	nop
			r3 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 8012882:	692a      	ldr	r2, [r5, #16]
			recieve <<= 1;
 8012884:	0064      	lsls	r4, r4, #1
			if (utils_middle_of_3_int(r1, r2, r3)) {
 8012886:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 801288a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801288e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			recieve <<= 1;
 8012892:	b2a4      	uxth	r4, r4
			if (utils_middle_of_3_int(r1, r2, r3)) {
 8012894:	f001 fd64 	bl	8014360 <utils_middle_of_3_int>
 8012898:	b108      	cbz	r0, 801289e <encoder_tim_isr+0x9e>
				recieve |= 1;
 801289a:	f044 0401 	orr.w	r4, r4, #1
			palClearPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 801289e:	836f      	strh	r7, [r5, #26]
 80128a0:	bf00      	nop
 80128a2:	bf00      	nop
 80128a4:	bf00      	nop
 80128a6:	bf00      	nop
		for (int bit = 0;bit < 16;bit++) {
 80128a8:	3e01      	subs	r6, #1
 80128aa:	d1dc      	bne.n	8012866 <encoder_tim_isr+0x66>
		last_enc_angle = ((float)pos * 360.0) / 16384.0;
 80128ac:	f3c4 030d 	ubfx	r3, r4, #0, #14
 80128b0:	ee07 3a90 	vmov	s15, r3
 80128b4:	eddf 6a19 	vldr	s13, [pc, #100]	; 801291c <encoder_tim_isr+0x11c>
 80128b8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8012920 <encoder_tim_isr+0x120>
}

static void spi_end(void) {
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 80128bc:	4a15      	ldr	r2, [pc, #84]	; (8012914 <encoder_tim_isr+0x114>)
		last_enc_angle = ((float)pos * 360.0) / 16384.0;
 80128be:	4b19      	ldr	r3, [pc, #100]	; (8012924 <encoder_tim_isr+0x124>)
 80128c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 80128c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
		last_enc_angle = ((float)pos * 360.0) / 16384.0;
 80128c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 80128cc:	8311      	strh	r1, [r2, #24]
		last_enc_angle = ((float)pos * 360.0) / 16384.0;
 80128ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128d2:	edc3 7a00 	vstr	s15, [r3]
}
 80128d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 80128da:	4813      	ldr	r0, [pc, #76]	; (8012928 <encoder_tim_isr+0x128>)
				cap1_r_new = TIM4->CCR1; // read capture data
 80128dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 80128de:	8801      	ldrh	r1, [r0, #0]
				cap1_r_new = TIM4->CCR1; // read capture data
 80128e0:	4c09      	ldr	r4, [pc, #36]	; (8012908 <encoder_tim_isr+0x108>)
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 80128e2:	4d12      	ldr	r5, [pc, #72]	; (801292c <encoder_tim_isr+0x12c>)
				cap1_r_new = TIM4->CCR1; // read capture data
 80128e4:	b292      	uxth	r2, r2
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 80128e6:	1a51      	subs	r1, r2, r1
				cap1_r_old = cap1_r_new;
 80128e8:	8002      	strh	r2, [r0, #0]
				cap1_r_new = TIM4->CCR1; // read capture data
 80128ea:	8022      	strh	r2, [r4, #0]
				TIM4->CCER &= ~TIM_CCER_CC1P;	// to falling edge
 80128ec:	6a1a      	ldr	r2, [r3, #32]
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 80128ee:	8029      	strh	r1, [r5, #0]
				TIM4->CCER &= ~TIM_CCER_CC1P;	// to falling edge
 80128f0:	f022 0202 	bic.w	r2, r2, #2
 80128f4:	621a      	str	r2, [r3, #32]
 80128f6:	e78b      	b.n	8012810 <encoder_tim_isr+0x10>
 80128f8:	2000221c 	.word	0x2000221c
 80128fc:	40000800 	.word	0x40000800
 8012900:	2000220c 	.word	0x2000220c
 8012904:	40020000 	.word	0x40020000
 8012908:	20002210 	.word	0x20002210
 801290c:	2000220e 	.word	0x2000220e
 8012910:	20002220 	.word	0x20002220
 8012914:	40020800 	.word	0x40020800
 8012918:	40020400 	.word	0x40020400
 801291c:	43b40000 	.word	0x43b40000
 8012920:	38800000 	.word	0x38800000
 8012924:	20002218 	.word	0x20002218
 8012928:	20002212 	.word	0x20002212
 801292c:	2000221e 	.word	0x2000221e

08012930 <encoder_set_counts>:
	if (counts != enc_counts) {
 8012930:	4a07      	ldr	r2, [pc, #28]	; (8012950 <encoder_set_counts+0x20>)
void encoder_set_counts(uint32_t counts) {
 8012932:	b508      	push	{r3, lr}
	if (counts != enc_counts) {
 8012934:	6813      	ldr	r3, [r2, #0]
 8012936:	4283      	cmp	r3, r0
 8012938:	d008      	beq.n	801294c <encoder_set_counts+0x1c>
 801293a:	4603      	mov	r3, r0
		TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 801293c:	1e41      	subs	r1, r0, #1
 801293e:	4805      	ldr	r0, [pc, #20]	; (8012954 <encoder_set_counts+0x24>)
		enc_counts = counts;
 8012940:	6013      	str	r3, [r2, #0]
		TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 8012942:	f003 fb7d 	bl	8016040 <TIM_SetAutoreload>
		index_found = false;
 8012946:	4b04      	ldr	r3, [pc, #16]	; (8012958 <encoder_set_counts+0x28>)
 8012948:	2200      	movs	r2, #0
 801294a:	701a      	strb	r2, [r3, #0]
}
 801294c:	bd08      	pop	{r3, pc}
 801294e:	bf00      	nop
 8012950:	20000808 	.word	0x20000808
 8012954:	40000800 	.word	0x40000800
 8012958:	20002214 	.word	0x20002214
 801295c:	00000000 	.word	0x00000000

08012960 <encoder_AnalogHallEstimation>:
}

#else
void encoder_AnalogHallEstimation (tSMC *s)
{
	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8012960:	4b68      	ldr	r3, [pc, #416]	; (8012b04 <encoder_AnalogHallEstimation+0x1a4>)
 8012962:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8012b08 <encoder_AnalogHallEstimation+0x1a8>
 8012966:	889a      	ldrh	r2, [r3, #4]
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8012968:	885b      	ldrh	r3, [r3, #2]
	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801296a:	eddf 6a68 	vldr	s13, [pc, #416]	; 8012b0c <encoder_AnalogHallEstimation+0x1ac>
 801296e:	ee07 2a10 	vmov	s14, r2
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8012972:	ee07 3a90 	vmov	s15, r3
{
 8012976:	b510      	push	{r4, lr}
	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8012978:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801297c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8012980:	ee37 7a46 	vsub.f32	s14, s14, s12
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8012984:	ee77 7ac6 	vsub.f32	s15, s15, s12
{
 8012988:	ed2d 8b04 	vpush	{d8-d9}
	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801298c:	eec7 8a26 	vdiv.f32	s17, s14, s13
{
 8012990:	4604      	mov	r4, r0
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8012992:	ee87 9aa6 	vdiv.f32	s18, s15, s13

	s->costh = cosf(s->Theta);
 8012996:	ed90 8a2e 	vldr	s16, [r0, #184]	; 0xb8
	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801299a:	edc0 8a12 	vstr	s17, [r0, #72]	; 0x48
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801299e:	ed80 9a14 	vstr	s18, [r0, #80]	; 0x50
	s->costh = cosf(s->Theta);
 80129a2:	eeb0 0a48 	vmov.f32	s0, s16
 80129a6:	f003 fda3 	bl	80164f0 <cosf>
 80129aa:	eef0 9a40 	vmov.f32	s19, s0
 80129ae:	edc4 9a24 	vstr	s19, [r4, #144]	; 0x90
	s->sinth = sinf(s->Theta);
 80129b2:	eeb0 0a48 	vmov.f32	s0, s16
 80129b6:	f004 f883 	bl	8016ac0 <sinf>
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
 80129ba:	ee68 8aa9 	vmul.f32	s17, s17, s19
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 80129be:	ee29 9a00 	vmul.f32	s18, s18, s0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * HALL_SENSOR_PEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 80129c2:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 80129c6:	ed9f 6a52 	vldr	s12, [pc, #328]	; 8012b10 <encoder_AnalogHallEstimation+0x1b0>
	s->Hall_SinCos = s->HallPLLA * s->costh;
 80129ca:	edc4 8a21 	vstr	s17, [r4, #132]	; 0x84
	err = s->Hall_SinCos - s->Hall_CosSin; 											
 80129ce:	ee78 8ac9 	vsub.f32	s17, s17, s18
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 80129d2:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 80129d6:	ed84 9a22 	vstr	s18, [r4, #136]	; 0x88
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 80129da:	eed8 7a86 	vfnms.f32	s15, s17, s12
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 80129de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 80129e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
	s->sinth = sinf(s->Theta);
 80129e6:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 80129ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f2:	dc0f      	bgt.n	8012a14 <encoder_AnalogHallEstimation+0xb4>
 80129f4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80129f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a00:	d561      	bpl.n	8012ac6 <encoder_AnalogHallEstimation+0x166>
 8012a02:	eef0 7a47 	vmov.f32	s15, s14
 8012a06:	eddf 5a43 	vldr	s11, [pc, #268]	; 8012b14 <encoder_AnalogHallEstimation+0x1b4>
 8012a0a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8012b18 <encoder_AnalogHallEstimation+0x1b8>
 8012a0e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8012b1c <encoder_AnalogHallEstimation+0x1bc>
 8012a12:	e007      	b.n	8012a24 <encoder_AnalogHallEstimation+0xc4>
 8012a14:	eef0 7a47 	vmov.f32	s15, s14
 8012a18:	eddf 5a41 	vldr	s11, [pc, #260]	; 8012b20 <encoder_AnalogHallEstimation+0x1c0>
 8012a1c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8012b24 <encoder_AnalogHallEstimation+0x1c4>
 8012a20:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8012b28 <encoder_AnalogHallEstimation+0x1c8>
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8012a24:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8012b2c <encoder_AnalogHallEstimation+0x1cc>
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 8012a28:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	s->Theta += s->Hall_PIout ;
 8012a2c:	ee38 0a27 	vadd.f32	s0, s16, s15
	s->Hall_Err0= err;									
 8012a30:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 8012a34:	eeb4 0ac6 	vcmpe.f32	s0, s12
 8012a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3c:	dd2f      	ble.n	8012a9e <encoder_AnalogHallEstimation+0x13e>
 8012a3e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012a42:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->ThetaCal= s->Theta + 0.3f;
 8012a46:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8012b30 <encoder_AnalogHallEstimation+0x1d0>

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
 8012a4a:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8012b2c <encoder_AnalogHallEstimation+0x1cc>
	s->ThetaCal= s->Theta + 0.3f;
 8012a4e:	ee30 0a05 	vadd.f32	s0, s0, s10
	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
 8012a52:	eeb4 0ac6 	vcmpe.f32	s0, s12
 8012a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5a:	dd2a      	ble.n	8012ab2 <encoder_AnalogHallEstimation+0x152>
 8012a5c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012a60:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
 8012a64:	ed94 5a30 	vldr	s10, [r4, #192]	; 0xc0
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8012a68:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8012b2c <encoder_AnalogHallEstimation+0x1cc>
	s->Omega = s->Hall_PIout;
 8012a6c:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8
	s->trueTheta += (s->Hall_PIout /7.0f) ;
 8012a70:	ee77 7a05 	vadd.f32	s15, s14, s10
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8012a74:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a7c:	dc36      	bgt.n	8012aec <encoder_AnalogHallEstimation+0x18c>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 8012a7e:	ecbd 8b04 	vpop	{d8-d9}
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;
 8012a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8a:	bf48      	it	mi
 8012a8c:	ee77 7a86 	vaddmi.f32	s15, s15, s12
	s->Futi   = s->Hall_PIout / (2.0f * PI) * HALL_SENSOR_FREQ;
 8012a90:	edc4 6a31 	vstr	s13, [r4, #196]	; 0xc4
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;
 8012a94:	edc4 7a30 	vstr	s15, [r4, #192]	; 0xc0
	s->rpm = 120.0f * s->Futi / 7.0f;
 8012a98:	edc4 5a33 	vstr	s11, [r4, #204]	; 0xcc
}
 8012a9c:	bd10      	pop	{r4, pc}
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 8012a9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa6:	bf48      	it	mi
 8012aa8:	ee30 0a06 	vaddmi.f32	s0, s0, s12
 8012aac:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8012ab0:	e7c9      	b.n	8012a46 <encoder_AnalogHallEstimation+0xe6>
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;
 8012ab2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aba:	bf48      	it	mi
 8012abc:	ee30 0a06 	vaddmi.f32	s0, s0, s12
 8012ac0:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
 8012ac4:	e7ce      	b.n	8012a64 <encoder_AnalogHallEstimation+0x104>
 8012ac6:	eddf 5a19 	vldr	s11, [pc, #100]	; 8012b2c <encoder_AnalogHallEstimation+0x1cc>
 8012aca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012b34 <encoder_AnalogHallEstimation+0x1d4>
 8012ace:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8012b38 <encoder_AnalogHallEstimation+0x1d8>
 8012ad2:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8012ad6:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
 8012ada:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012ade:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8012ae2:	ee26 6a86 	vmul.f32	s12, s13, s12
 8012ae6:	eec6 5a05 	vdiv.f32	s11, s12, s10
 8012aea:	e79b      	b.n	8012a24 <encoder_AnalogHallEstimation+0xc4>
}
 8012aec:	ecbd 8b04 	vpop	{d8-d9}
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8012af0:	ee77 7ac6 	vsub.f32	s15, s15, s12
	s->Futi   = s->Hall_PIout / (2.0f * PI) * HALL_SENSOR_FREQ;
 8012af4:	edc4 6a31 	vstr	s13, [r4, #196]	; 0xc4
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8012af8:	edc4 7a30 	vstr	s15, [r4, #192]	; 0xc0
	s->rpm = 120.0f * s->Futi / 7.0f;
 8012afc:	edc4 5a33 	vstr	s11, [r4, #204]	; 0xcc
}
 8012b00:	bd10      	pop	{r4, pc}
 8012b02:	bf00      	nop
 8012b04:	20001320 	.word	0x20001320
 8012b08:	449b2000 	.word	0x449b2000
 8012b0c:	457ff000 	.word	0x457ff000
 8012b10:	3f8020c5 	.word	0x3f8020c5
 8012b14:	c6d52769 	.word	0xc6d52769
 8012b18:	c4c6f195 	.word	0xc4c6f195
 8012b1c:	bfb6db6e 	.word	0xbfb6db6e
 8012b20:	46d52769 	.word	0x46d52769
 8012b24:	44c6f195 	.word	0x44c6f195
 8012b28:	3fb6db6e 	.word	0x3fb6db6e
 8012b2c:	40c90fdb 	.word	0x40c90fdb
 8012b30:	3e99999a 	.word	0x3e99999a
 8012b34:	447a0000 	.word	0x447a0000
 8012b38:	42f00000 	.word	0x42f00000
 8012b3c:	00000000 	.word	0x00000000

08012b40 <mavlink_msg_send>:
//------------------------------------------------------------------------------------------
// MAVLink
//------------------------------------------------------------------------------------------

void mavlink_msg_send(uint8_t ch, mavlink_message_t *p_msg)
{
 8012b40:	b5f0      	push	{r4, r5, r6, r7, lr}
/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8012b42:	78ce      	ldrb	r6, [r1, #3]
 8012b44:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8012b48:	1db4      	adds	r4, r6, #6
 8012b4a:	460d      	mov	r5, r1
 8012b4c:	4622      	mov	r2, r4
 8012b4e:	4607      	mov	r7, r0
 8012b50:	3102      	adds	r1, #2
 8012b52:	4668      	mov	r0, sp
 8012b54:	f7f9 ffcc 	bl	800caf0 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012b58:	882b      	ldrh	r3, [r5, #0]
 8012b5a:	f80d 3004 	strb.w	r3, [sp, r4]
	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8012b5e:	446c      	add	r4, sp
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012b60:	0a1b      	lsrs	r3, r3, #8
 8012b62:	7063      	strb	r3, [r4, #1]

	//LED_RED_ON();

	int len = mavlink_msg_to_send_buffer(buf, p_msg);
	
	switch(ch)
 8012b64:	b927      	cbnz	r7, 8012b70 <mavlink_msg_send+0x30>
	{
	  case 0:		usb_serial_send(buf,len);		break;
 8012b66:	f106 0108 	add.w	r1, r6, #8
 8012b6a:	4668      	mov	r0, sp
 8012b6c:	f000 ffc8 	bl	8013b00 <usb_serial_send>
	  case 1:		break;
	}

	//LED_RED_OFF();	
	return;
}
 8012b70:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8012b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b76:	bf00      	nop
	...

08012b80 <resp_ack>:
{
 8012b80:	b5f0      	push	{r4, r5, r6, r7, lr}
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
	if (src == NULL) {
		memset(dest, 0, n);
	} else {
		memcpy(dest, src, n);
 8012b82:	460b      	mov	r3, r1
 8012b84:	4604      	mov	r4, r0
 8012b86:	f853 0f04 	ldr.w	r0, [r3, #4]!
  mavlink_msg_ack_pack_chan(0, 0, ch, &mav_msg, p_ack->msg_id, p_ack->err_code, p_ack->length, p_ack->data);
 8012b8a:	780f      	ldrb	r7, [r1, #0]
 8012b8c:	689a      	ldr	r2, [r3, #8]
{
 8012b8e:	b0cb      	sub	sp, #300	; 0x12c
 8012b90:	460e      	mov	r6, r1
 8012b92:	6859      	ldr	r1, [r3, #4]
 8012b94:	68db      	ldr	r3, [r3, #12]
  mavlink_msg_ack_pack_chan(0, 0, ch, &mav_msg, p_ack->msg_id, p_ack->err_code, p_ack->length, p_ack->data);
 8012b96:	f896 c001 	ldrb.w	ip, [r6, #1]
 8012b9a:	ad02      	add	r5, sp, #8
 8012b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b9e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 8012ba2:	78b2      	ldrb	r2, [r6, #2]
 8012ba4:	78f3      	ldrb	r3, [r6, #3]
    _mav_put_uint8_t(buf, 3, length);
    _mav_put_uint8_t_array(buf, 4, data, 16);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ACK_LEN);
#else
    mavlink_ack_t packet;
    packet.err_code = err_code;
 8012ba6:	f8ad 7004 	strh.w	r7, [sp, #4]
    packet.msg_id = msg_id;
 8012baa:	f88d 2006 	strb.w	r2, [sp, #6]
    packet.length = length;
 8012bae:	f88d 3007 	strb.w	r3, [sp, #7]
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*16);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ACK_LEN);
 8012bb2:	ae01      	add	r6, sp, #4
 8012bb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012bb6:	ad08      	add	r5, sp, #32
 8012bb8:	f8d6 c000 	ldr.w	ip, [r6]
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8012bbc:	4f30      	ldr	r7, [pc, #192]	; (8012c80 <resp_ack+0x100>)
 8012bbe:	462e      	mov	r6, r5
 8012bc0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012bc2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8012bc6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	msg->sysid = system_id;
 8012bca:	2200      	movs	r2, #0
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8012bcc:	7999      	ldrb	r1, [r3, #6]
 8012bce:	f8c6 c000 	str.w	ip, [r6]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8012bd2:	1c4f      	adds	r7, r1, #1
	msg->magic = MAVLINK_STX;
 8012bd4:	f241 40fe 	movw	r0, #5374	; 0x14fe
#endif

    msg->msgid = MAVLINK_MSG_ID_ACK;
 8012bd8:	2601      	movs	r6, #1
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8012bda:	f88d 101c 	strb.w	r1, [sp, #28]
	msg->magic = MAVLINK_STX;
 8012bde:	f8ad 001a 	strh.w	r0, [sp, #26]
	msg->sysid = system_id;
 8012be2:	f88d 201d 	strb.w	r2, [sp, #29]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8012be6:	719f      	strb	r7, [r3, #6]
 8012be8:	f88d 601f 	strb.w	r6, [sp, #31]
 8012bec:	a807      	add	r0, sp, #28
	msg->compid = component_id;
 8012bee:	f88d 201e 	strb.w	r2, [sp, #30]
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8012bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8012bf6:	2214      	movs	r2, #20
 8012bf8:	e001      	b.n	8012bfe <resp_ack+0x7e>
 8012bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012bfe:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8012c00:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8012c04:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012c06:	0913      	lsrs	r3, r2, #4
 8012c08:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012c0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 8012c10:	4285      	cmp	r5, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012c12:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8012c16:	d1f0      	bne.n	8012bfa <resp_ack+0x7a>
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
 8012c18:	4628      	mov	r0, r5
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8012c1a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012c1e:	ad0d      	add	r5, sp, #52	; 0x34
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c24:	ea82 0301 	eor.w	r3, r2, r1
        tmp ^= (tmp<<4);
 8012c28:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8012c2c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012c2e:	0913      	lsrs	r3, r2, #4
 8012c30:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012c34:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8012c38:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8012c3c:	b21b      	sxth	r3, r3
 8012c3e:	b299      	uxth	r1, r3
	while (length--) {
 8012c40:	42a8      	cmp	r0, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012c42:	f8ad 1018 	strh.w	r1, [sp, #24]
	while (length--) {
 8012c46:	d1eb      	bne.n	8012c20 <resp_ack+0xa0>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012c48:	f083 02c0 	eor.w	r2, r3, #192	; 0xc0
        tmp ^= (tmp<<4);
 8012c4c:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8012c50:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012c52:	0a0b      	lsrs	r3, r1, #8
 8012c54:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 8012c58:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8012c5c:	ea83 02c2 	eor.w	r2, r3, r2, lsl #3
 8012c60:	b212      	sxth	r2, r2
 8012c62:	b293      	uxth	r3, r2
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8012c64:	0a1d      	lsrs	r5, r3, #8
  mavlink_msg_send( ch, &mav_msg);
 8012c66:	4620      	mov	r0, r4
 8012c68:	a906      	add	r1, sp, #24
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8012c6a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8012c6e:	f8ad 3018 	strh.w	r3, [sp, #24]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8012c72:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
 8012c76:	f7ff ff63 	bl	8012b40 <mavlink_msg_send>
}
 8012c7a:	b04b      	add	sp, #300	; 0x12c
 8012c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	20002740 	.word	0x20002740
	...

08012c90 <cmd_send_error>:
{
 8012c90:	b500      	push	{lr}
 8012c92:	b087      	sub	sp, #28
  mav_ack.err_code = err_code;
 8012c94:	ab06      	add	r3, sp, #24
  mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012c96:	6842      	ldr	r2, [r0, #4]
  mav_ack.err_code = err_code;
 8012c98:	f823 1d14 	strh.w	r1, [r3, #-20]!
  mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012c9c:	79d2      	ldrb	r2, [r2, #7]
  resp_ack(p_msg->ch, &mav_ack);
 8012c9e:	7800      	ldrb	r0, [r0, #0]
  mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012ca0:	f88d 2006 	strb.w	r2, [sp, #6]
  resp_ack(p_msg->ch, &mav_ack);
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	f7ff ff6b 	bl	8012b80 <resp_ack>
}
 8012caa:	b007      	add	sp, #28
 8012cac:	f85d fb04 	ldr.w	pc, [sp], #4

08012cb0 <cmd_read_version>:
{
 8012cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  mavlink_msg_read_version_decode(p_msg->p_msg, &mav_data);
 8012cb2:	6845      	ldr	r5, [r0, #4]
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    read_version->resp = mavlink_msg_read_version_get_resp(msg);
    mavlink_msg_read_version_get_param(msg, read_version->param);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_READ_VERSION_LEN? msg->len : MAVLINK_MSG_ID_READ_VERSION_LEN;
 8012cb4:	78ea      	ldrb	r2, [r5, #3]
{
 8012cb6:	b089      	sub	sp, #36	; 0x24
        memset(read_version, 0, MAVLINK_MSG_ID_READ_VERSION_LEN);
    memcpy(read_version, _MAV_PAYLOAD(msg), len);
 8012cb8:	2a09      	cmp	r2, #9
 8012cba:	bf28      	it	cs
 8012cbc:	2209      	movcs	r2, #9
        memset(read_version, 0, MAVLINK_MSG_ID_READ_VERSION_LEN);
 8012cbe:	2400      	movs	r4, #0
 8012cc0:	4606      	mov	r6, r0
    memcpy(read_version, _MAV_PAYLOAD(msg), len);
 8012cc2:	f105 0108 	add.w	r1, r5, #8
 8012cc6:	4668      	mov	r0, sp
        memset(read_version, 0, MAVLINK_MSG_ID_READ_VERSION_LEN);
 8012cc8:	e9cd 4400 	strd	r4, r4, [sp]
 8012ccc:	f88d 4008 	strb.w	r4, [sp, #8]
    memcpy(read_version, _MAV_PAYLOAD(msg), len);
 8012cd0:	f7f9 ff0e 	bl	800caf0 <memcpy>
  if( mav_data.resp == 1 )
 8012cd4:	f89d 3000 	ldrb.w	r3, [sp]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d001      	beq.n	8012ce0 <cmd_read_version+0x30>
}
 8012cdc:	b009      	add	sp, #36	; 0x24
 8012cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mav_ack.data[0] = boot_version;
 8012ce0:	4a13      	ldr	r2, [pc, #76]	; (8012d30 <cmd_read_version+0x80>)
    mav_ack.data[4] = boot_revision;
 8012ce2:	4b14      	ldr	r3, [pc, #80]	; (8012d34 <cmd_read_version+0x84>)
    mav_ack.data[0] = boot_version;
 8012ce4:	6812      	ldr	r2, [r2, #0]
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012ce6:	79e9      	ldrb	r1, [r5, #7]
    mav_ack.data[4] = boot_revision;
 8012ce8:	681b      	ldr	r3, [r3, #0]
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012cea:	f88d 100e 	strb.w	r1, [sp, #14]
    mav_ack.data[1] = boot_version>>8;
 8012cee:	0a15      	lsrs	r5, r2, #8
    mav_ack.data[3] = boot_version>>24;
 8012cf0:	0e11      	lsrs	r1, r2, #24
    resp_ack(p_msg->ch, &mav_ack);
 8012cf2:	7830      	ldrb	r0, [r6, #0]
    mav_ack.err_code = err_code;
 8012cf4:	f8ad 400c 	strh.w	r4, [sp, #12]
    mav_ack.data[2] = boot_version>>16;
 8012cf8:	0c17      	lsrs	r7, r2, #16
    mav_ack.data[0] = boot_version;
 8012cfa:	f88d 2010 	strb.w	r2, [sp, #16]
    mav_ack.data[5] = boot_revision>>8;
 8012cfe:	0a1e      	lsrs	r6, r3, #8
    mav_ack.data[1] = boot_version>>8;
 8012d00:	f88d 5011 	strb.w	r5, [sp, #17]
    mav_ack.data[7] = boot_revision>>24;
 8012d04:	0e1c      	lsrs	r4, r3, #24
    mav_ack.data[6] = boot_revision>>16;
 8012d06:	0c1d      	lsrs	r5, r3, #16
    mav_ack.data[3] = boot_version>>24;
 8012d08:	f88d 1013 	strb.w	r1, [sp, #19]
    mav_ack.length  = 8;
 8012d0c:	2208      	movs	r2, #8
    resp_ack(p_msg->ch, &mav_ack);
 8012d0e:	a903      	add	r1, sp, #12
    mav_ack.data[2] = boot_version>>16;
 8012d10:	f88d 7012 	strb.w	r7, [sp, #18]
    mav_ack.data[4] = boot_revision;
 8012d14:	f88d 3014 	strb.w	r3, [sp, #20]
    mav_ack.data[5] = boot_revision>>8;
 8012d18:	f88d 6015 	strb.w	r6, [sp, #21]
    mav_ack.data[6] = boot_revision>>16;
 8012d1c:	f88d 5016 	strb.w	r5, [sp, #22]
    mav_ack.data[7] = boot_revision>>24;
 8012d20:	f88d 4017 	strb.w	r4, [sp, #23]
    mav_ack.length  = 8;
 8012d24:	f88d 200f 	strb.w	r2, [sp, #15]
    resp_ack(p_msg->ch, &mav_ack);
 8012d28:	f7ff ff2a 	bl	8012b80 <resp_ack>
}
 8012d2c:	b009      	add	sp, #36	; 0x24
 8012d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d30:	20000810 	.word	0x20000810
 8012d34:	200022f4 	.word	0x200022f4
	...

08012d40 <cmd_read_board_name>:
{
 8012d40:	b570      	push	{r4, r5, r6, lr}
  mavlink_msg_read_board_name_decode(p_msg->p_msg, &mav_data);
 8012d42:	6845      	ldr	r5, [r0, #4]
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    read_board_name->resp = mavlink_msg_read_board_name_get_resp(msg);
    mavlink_msg_read_board_name_get_param(msg, read_board_name->param);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_READ_BOARD_NAME_LEN? msg->len : MAVLINK_MSG_ID_READ_BOARD_NAME_LEN;
 8012d44:	78ea      	ldrb	r2, [r5, #3]
{
 8012d46:	b088      	sub	sp, #32
        memset(read_board_name, 0, MAVLINK_MSG_ID_READ_BOARD_NAME_LEN);
    memcpy(read_board_name, _MAV_PAYLOAD(msg), len);
 8012d48:	2a09      	cmp	r2, #9
 8012d4a:	bf28      	it	cs
 8012d4c:	2209      	movcs	r2, #9
        memset(read_board_name, 0, MAVLINK_MSG_ID_READ_BOARD_NAME_LEN);
 8012d4e:	2400      	movs	r4, #0
 8012d50:	4606      	mov	r6, r0
    memcpy(read_board_name, _MAV_PAYLOAD(msg), len);
 8012d52:	f105 0108 	add.w	r1, r5, #8
 8012d56:	4668      	mov	r0, sp
        memset(read_board_name, 0, MAVLINK_MSG_ID_READ_BOARD_NAME_LEN);
 8012d58:	e9cd 4400 	strd	r4, r4, [sp]
 8012d5c:	f88d 4008 	strb.w	r4, [sp, #8]
    memcpy(read_board_name, _MAV_PAYLOAD(msg), len);
 8012d60:	f7f9 fec6 	bl	800caf0 <memcpy>
  if( mav_data.resp == 1 )
 8012d64:	f89d 3000 	ldrb.w	r3, [sp]
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d001      	beq.n	8012d70 <cmd_read_board_name+0x30>
}
 8012d6c:	b008      	add	sp, #32
 8012d6e:	bd70      	pop	{r4, r5, r6, pc}
    for( i=0; i<strlen(board_name); i++ )
 8012d70:	4b0f      	ldr	r3, [pc, #60]	; (8012db0 <cmd_read_board_name+0x70>)
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012d72:	79ea      	ldrb	r2, [r5, #7]
 8012d74:	f88d 200e 	strb.w	r2, [sp, #14]
    mav_ack.err_code = err_code;
 8012d78:	f8ad 400c 	strh.w	r4, [sp, #12]
    for( i=0; i<strlen(board_name); i++ )
 8012d7c:	681d      	ldr	r5, [r3, #0]
 8012d7e:	e002      	b.n	8012d86 <cmd_read_board_name+0x46>
      mav_ack.data[i] = board_name[i];
 8012d80:	5ceb      	ldrb	r3, [r5, r3]
 8012d82:	f802 3c10 	strb.w	r3, [r2, #-16]
    for( i=0; i<strlen(board_name); i++ )
 8012d86:	4628      	mov	r0, r5
 8012d88:	f7f9 ff52 	bl	800cc30 <strlen>
 8012d8c:	b2e3      	uxtb	r3, r4
      mav_ack.data[i] = board_name[i];
 8012d8e:	aa08      	add	r2, sp, #32
    for( i=0; i<strlen(board_name); i++ )
 8012d90:	4298      	cmp	r0, r3
 8012d92:	f104 0401 	add.w	r4, r4, #1
      mav_ack.data[i] = board_name[i];
 8012d96:	441a      	add	r2, r3
    for( i=0; i<strlen(board_name); i++ )
 8012d98:	d8f2      	bhi.n	8012d80 <cmd_read_board_name+0x40>
    mav_ack.length  = i;
 8012d9a:	f88d 300f 	strb.w	r3, [sp, #15]
    resp_ack(p_msg->ch, &mav_ack);
 8012d9e:	7830      	ldrb	r0, [r6, #0]
    mav_ack.data[i] = 0;
 8012da0:	2300      	movs	r3, #0
    resp_ack(p_msg->ch, &mav_ack);
 8012da2:	a903      	add	r1, sp, #12
    mav_ack.data[i] = 0;
 8012da4:	f802 3c10 	strb.w	r3, [r2, #-16]
    resp_ack(p_msg->ch, &mav_ack);
 8012da8:	f7ff feea 	bl	8012b80 <resp_ack>
}
 8012dac:	b008      	add	sp, #32
 8012dae:	bd70      	pop	{r4, r5, r6, pc}
 8012db0:	2000080c 	.word	0x2000080c
	...

08012dc0 <cmd_set_velocity>:
{
 8012dc0:	b570      	push	{r4, r5, r6, lr}
	mavlink_msg_set_velocity_decode(p_msg->p_msg,&mav_data);
 8012dc2:	6845      	ldr	r5, [r0, #4]
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    set_velocity->ref_angular_velocity = mavlink_msg_set_velocity_get_ref_angular_velocity(msg);
    set_velocity->resp = mavlink_msg_set_velocity_get_resp(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SET_VELOCITY_LEN? msg->len : MAVLINK_MSG_ID_SET_VELOCITY_LEN;
 8012dc4:	78ea      	ldrb	r2, [r5, #3]
{
 8012dc6:	b086      	sub	sp, #24
        memset(set_velocity, 0, MAVLINK_MSG_ID_SET_VELOCITY_LEN);
    memcpy(set_velocity, _MAV_PAYLOAD(msg), len);
 8012dc8:	2a03      	cmp	r2, #3
 8012dca:	bf28      	it	cs
 8012dcc:	2203      	movcs	r2, #3
        memset(set_velocity, 0, MAVLINK_MSG_ID_SET_VELOCITY_LEN);
 8012dce:	2400      	movs	r4, #0
 8012dd0:	4606      	mov	r6, r0
    memcpy(set_velocity, _MAV_PAYLOAD(msg), len);
 8012dd2:	f105 0108 	add.w	r1, r5, #8
 8012dd6:	4668      	mov	r0, sp
        memset(set_velocity, 0, MAVLINK_MSG_ID_SET_VELOCITY_LEN);
 8012dd8:	f88d 4002 	strb.w	r4, [sp, #2]
 8012ddc:	f8ad 4000 	strh.w	r4, [sp]
    memcpy(set_velocity, _MAV_PAYLOAD(msg), len);
 8012de0:	f7f9 fe86 	bl	800caf0 <memcpy>
	if( mav_data.resp == 1 )
 8012de4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d00a      	beq.n	8012e02 <cmd_set_velocity+0x42>
	mc_interface_set_velocity(mav_data.ref_angular_velocity);
 8012dec:	f8bd 0000 	ldrh.w	r0, [sp]
 8012df0:	f7ff f9e6 	bl	80121c0 <mc_interface_set_velocity>
	chThdSleepMilliseconds(200);
 8012df4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012df8:	f7fa fa6a 	bl	800d2d0 <chThdSleep>
}
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	b006      	add	sp, #24
 8012e00:	bd70      	pop	{r4, r5, r6, pc}
		mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012e02:	79eb      	ldrb	r3, [r5, #7]
		resp_ack(p_msg->ch, &mav_ack);
 8012e04:	7830      	ldrb	r0, [r6, #0]
		mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012e06:	f88d 3006 	strb.w	r3, [sp, #6]
		resp_ack(p_msg->ch, &mav_ack);
 8012e0a:	a901      	add	r1, sp, #4
		mav_ack.err_code = err_code;
 8012e0c:	f8ad 4004 	strh.w	r4, [sp, #4]
		mav_ack.length  = 0;
 8012e10:	f88d 4007 	strb.w	r4, [sp, #7]
		resp_ack(p_msg->ch, &mav_ack);
 8012e14:	f7ff feb4 	bl	8012b80 <resp_ack>
 8012e18:	e7e8      	b.n	8012dec <cmd_set_velocity+0x2c>
 8012e1a:	bf00      	nop
 8012e1c:	0000      	movs	r0, r0
	...

08012e20 <cmd_set_mcconf>:
{
 8012e20:	b570      	push	{r4, r5, r6, lr}
	mavlink_msg_set_mcconf_decode(p_msg->p_msg,&mav_data);
 8012e22:	6845      	ldr	r5, [r0, #4]
    set_mcconf->uPLLKC = mavlink_msg_set_mcconf_get_uPLLKC(msg);
    set_mcconf->uPLLOUTMAX = mavlink_msg_set_mcconf_get_uPLLOUTMAX(msg);
    set_mcconf->resp = mavlink_msg_set_mcconf_get_resp(msg);
    set_mcconf->uVDD = mavlink_msg_set_mcconf_get_uVDD(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SET_MCCONF_LEN? msg->len : MAVLINK_MSG_ID_SET_MCCONF_LEN;
 8012e24:	78ec      	ldrb	r4, [r5, #3]
{
 8012e26:	b0c4      	sub	sp, #272	; 0x110
 8012e28:	2c26      	cmp	r4, #38	; 0x26
 8012e2a:	bf28      	it	cs
 8012e2c:	2426      	movcs	r4, #38	; 0x26
        memset(set_mcconf, 0, MAVLINK_MSG_ID_SET_MCCONF_LEN);
 8012e2e:	2226      	movs	r2, #38	; 0x26
 8012e30:	2100      	movs	r1, #0
 8012e32:	4606      	mov	r6, r0
 8012e34:	a805      	add	r0, sp, #20
 8012e36:	f004 fdab 	bl	8017990 <memset>
    memcpy(set_mcconf, _MAV_PAYLOAD(msg), len);
 8012e3a:	4622      	mov	r2, r4
 8012e3c:	a805      	add	r0, sp, #20
 8012e3e:	f105 0108 	add.w	r1, r5, #8
 8012e42:	f7f9 fe55 	bl	800caf0 <memcpy>
	if( mav_data.resp == 1 )
 8012e46:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	f000 80a4 	beq.w	8012f98 <cmd_set_mcconf+0x178>
	mcconf = *mc_interface_get_configuration();
 8012e50:	f7ff f876 	bl	8011f40 <mc_interface_get_configuration>
 8012e54:	22d4      	movs	r2, #212	; 0xd4
 8012e56:	4601      	mov	r1, r0
 8012e58:	a80f      	add	r0, sp, #60	; 0x3c
 8012e5a:	f7f9 fe49 	bl	800caf0 <memcpy>
	mcconf.vdd 		= mav_data.uVDD; /*< x10^1 */
 8012e5e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8012e62:	ee06 3a90 	vmov	s13, r3
	mcconf.rshunt 	= mav_data.uRSHUNT; /*< x10^3 */
 8012e66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012e6a:	ee07 3a10 	vmov	s14, r3
	mcconf.dkp 		= mav_data.uDKP; /*< x10^3 */
 8012e6e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012e72:	ee07 3a90 	vmov	s15, r3
	mcconf.dki		= mav_data.uDKI; /*< x10^3 */
 8012e76:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8012e7a:	ee02 3a10 	vmov	s4, r3
	mcconf.dkc		= mav_data.uDKC; /*< x10^3 */
 8012e7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012e82:	ee02 3a90 	vmov	s5, r3
	mcconf.dout_max	= mav_data.uDOUTMAX; /*< x10^3 */
 8012e86:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012e8a:	ee03 3a10 	vmov	s6, r3
	mcconf.qkp		= mav_data.uQKP; /*< x10^3 */
 8012e8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012e92:	ee03 3a90 	vmov	s7, r3
	mcconf.qki		= mav_data.uQKI; /*< x10^3 */
 8012e96:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012e9a:	ee04 3a10 	vmov	s8, r3
	mcconf.qkc		= mav_data.uQKC; /*< x10^3 */
 8012e9e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8012ea2:	ee04 3a90 	vmov	s9, r3
	mcconf.qout_max	= mav_data.uQOUTMAX; /*< x10^3 */
 8012ea6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012eaa:	ee05 3a10 	vmov	s10, r3
	mcconf.wkp		= mav_data.uWKP; /*< x10^3 */
 8012eae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8012eb2:	ee05 3a90 	vmov	s11, r3
	mcconf.wki		= mav_data.uWKI; /*< x10^3 */
 8012eb6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
	mcconf.vdd 		= mav_data.uVDD; /*< x10^1 */
 8012eba:	eef8 6a66 	vcvt.f32.u32	s13, s13
	mcconf.wki		= mav_data.uWKI; /*< x10^3 */
 8012ebe:	ee06 3a10 	vmov	s12, r3
	mcconf.wkc		= mav_data.uWKC; /*< x10^3 */
 8012ec2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
	mcconf.vdd 		= mav_data.uVDD; /*< x10^1 */
 8012ec6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
	mcconf.rshunt 	= mav_data.uRSHUNT; /*< x10^3 */
 8012eca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	mcconf.wkc		= mav_data.uWKC; /*< x10^3 */
 8012ece:	ee06 3a90 	vmov	s13, r3
	mcconf.wout_max	= mav_data.uWOUTMAX; /*< x10^3 */
 8012ed2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
	mcconf.rshunt 	= mav_data.uRSHUNT; /*< x10^3 */
 8012ed6:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
	mcconf.dkp 		= mav_data.uDKP; /*< x10^3 */
 8012eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
	mcconf.wout_max	= mav_data.uWOUTMAX; /*< x10^3 */
 8012ede:	ee07 3a10 	vmov	s14, r3
	mcconf.pll_kp	= mav_data.uPLLKP; /*< x10^3 */
 8012ee2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	mcconf.dkp 		= mav_data.uDKP; /*< x10^3 */
 8012ee6:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
	mcconf.pll_kp	= mav_data.uPLLKP; /*< x10^3 */
 8012eea:	ee07 3a90 	vmov	s15, r3
	mcconf.dki		= mav_data.uDKI; /*< x10^3 */
 8012eee:	eeb8 2a42 	vcvt.f32.u32	s4, s4
	mcconf.dkc		= mav_data.uDKC; /*< x10^3 */
 8012ef2:	eef8 2a62 	vcvt.f32.u32	s5, s5
	mcconf.dout_max	= mav_data.uDOUTMAX; /*< x10^3 */
 8012ef6:	eeb8 3a43 	vcvt.f32.u32	s6, s6
	mcconf.qkp		= mav_data.uQKP; /*< x10^3 */
 8012efa:	eef8 3a63 	vcvt.f32.u32	s7, s7
	mcconf.qki		= mav_data.uQKI; /*< x10^3 */
 8012efe:	eeb8 4a44 	vcvt.f32.u32	s8, s8
	mcconf.qkc		= mav_data.uQKC; /*< x10^3 */
 8012f02:	eef8 4a64 	vcvt.f32.u32	s9, s9
	mcconf.qout_max	= mav_data.uQOUTMAX; /*< x10^3 */
 8012f06:	eeb8 5a45 	vcvt.f32.u32	s10, s10
	mcconf.wkp		= mav_data.uWKP; /*< x10^3 */
 8012f0a:	eef8 5a65 	vcvt.f32.u32	s11, s11
	mcconf.wki		= mav_data.uWKI; /*< x10^3 */
 8012f0e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	mcconf.wkc		= mav_data.uWKC; /*< x10^3 */
 8012f12:	eef8 6a66 	vcvt.f32.u32	s13, s13
	mcconf.wout_max	= mav_data.uWOUTMAX; /*< x10^3 */
 8012f16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	mcconf.pll_kp	= mav_data.uPLLKP; /*< x10^3 */
 8012f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	mcconf.pwmFreq	= mav_data.uPWMFREQUENCY; /*< x10^3 */
 8012f1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	mcconf.dki		= mav_data.uDKI; /*< x10^3 */
 8012f22:	ed8d 2a33 	vstr	s4, [sp, #204]	; 0xcc
	mcconf.dkc		= mav_data.uDKC; /*< x10^3 */
 8012f26:	edcd 2a34 	vstr	s5, [sp, #208]	; 0xd0
	mcconf.dout_max	= mav_data.uDOUTMAX; /*< x10^3 */
 8012f2a:	ed8d 3a35 	vstr	s6, [sp, #212]	; 0xd4
	mcconf.qkp		= mav_data.uQKP; /*< x10^3 */
 8012f2e:	edcd 3a36 	vstr	s7, [sp, #216]	; 0xd8
	mcconf.qki		= mav_data.uQKI; /*< x10^3 */
 8012f32:	ed8d 4a37 	vstr	s8, [sp, #220]	; 0xdc
	mcconf.qkc		= mav_data.uQKC; /*< x10^3 */
 8012f36:	edcd 4a38 	vstr	s9, [sp, #224]	; 0xe0
	mcconf.qout_max	= mav_data.uQOUTMAX; /*< x10^3 */
 8012f3a:	ed8d 5a39 	vstr	s10, [sp, #228]	; 0xe4
	mcconf.wkp		= mav_data.uWKP; /*< x10^3 */
 8012f3e:	edcd 5a3a 	vstr	s11, [sp, #232]	; 0xe8
	mcconf.wki		= mav_data.uWKI; /*< x10^3 */
 8012f42:	ed8d 6a3b 	vstr	s12, [sp, #236]	; 0xec
	mcconf.wkc		= mav_data.uWKC; /*< x10^3 */
 8012f46:	edcd 6a3c 	vstr	s13, [sp, #240]	; 0xf0
	mcconf.wout_max	= mav_data.uWOUTMAX; /*< x10^3 */
 8012f4a:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
	mcconf.pll_kp	= mav_data.uPLLKP; /*< x10^3 */
 8012f4e:	edcd 7a3e 	vstr	s15, [sp, #248]	; 0xf8
	mcconf.pwmFreq	= mav_data.uPWMFREQUENCY; /*< x10^3 */
 8012f52:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	mcconf.pll_ki	= mav_data.uPLLKI; /*< x10^3 */
 8012f56:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012f5a:	ee06 3a90 	vmov	s13, r3
	mcconf.pll_kc	= mav_data.uPLLKC; /*< x10^3 */
 8012f5e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8012f62:	ee07 3a10 	vmov	s14, r3
	mcconf.pllout_max= mav_data.uPLLOUTMAX; /*< x10^3 */
 8012f66:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012f6a:	ee07 3a90 	vmov	s15, r3
	mcconf.pll_ki	= mav_data.uPLLKI; /*< x10^3 */
 8012f6e:	eef8 6a66 	vcvt.f32.u32	s13, s13
	mcconf.pll_kc	= mav_data.uPLLKC; /*< x10^3 */
 8012f72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	mcconf.pllout_max= mav_data.uPLLOUTMAX; /*< x10^3 */
 8012f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
mc_interface_set_configuration(&mcconf);
 8012f7a:	a80f      	add	r0, sp, #60	; 0x3c
	mcconf.pll_ki	= mav_data.uPLLKI; /*< x10^3 */
 8012f7c:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
	mcconf.pll_kc	= mav_data.uPLLKC; /*< x10^3 */
 8012f80:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
	mcconf.pllout_max= mav_data.uPLLOUTMAX; /*< x10^3 */
 8012f84:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
mc_interface_set_configuration(&mcconf);
 8012f88:	f7fe ffe2 	bl	8011f50 <mc_interface_set_configuration>
chThdSleepMilliseconds(200);
 8012f8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012f90:	f7fa f99e 	bl	800d2d0 <chThdSleep>
}
 8012f94:	b044      	add	sp, #272	; 0x110
 8012f96:	bd70      	pop	{r4, r5, r6, pc}
		mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012f98:	79eb      	ldrb	r3, [r5, #7]
 8012f9a:	f88d 3002 	strb.w	r3, [sp, #2]
		resp_ack(p_msg->ch, &mav_ack);
 8012f9e:	7830      	ldrb	r0, [r6, #0]
		mav_ack.err_code = err_code;
 8012fa0:	2300      	movs	r3, #0
		resp_ack(p_msg->ch, &mav_ack);
 8012fa2:	4669      	mov	r1, sp
		mav_ack.err_code = err_code;
 8012fa4:	f8ad 3000 	strh.w	r3, [sp]
		mav_ack.length  = 0;
 8012fa8:	f88d 3003 	strb.w	r3, [sp, #3]
		resp_ack(p_msg->ch, &mav_ack);
 8012fac:	f7ff fde8 	bl	8012b80 <resp_ack>
 8012fb0:	e74e      	b.n	8012e50 <cmd_set_mcconf+0x30>
 8012fb2:	bf00      	nop
	...

08012fc0 <cmd_set_appconf>:
{
 8012fc0:	b570      	push	{r4, r5, r6, lr}
  mavlink_msg_read_version_decode(p_msg->p_msg, &mav_data);
 8012fc2:	6845      	ldr	r5, [r0, #4]
        uint8_t len = msg->len < MAVLINK_MSG_ID_READ_VERSION_LEN? msg->len : MAVLINK_MSG_ID_READ_VERSION_LEN;
 8012fc4:	78ea      	ldrb	r2, [r5, #3]
{
 8012fc6:	b088      	sub	sp, #32
    memcpy(read_version, _MAV_PAYLOAD(msg), len);
 8012fc8:	2a09      	cmp	r2, #9
 8012fca:	bf28      	it	cs
 8012fcc:	2209      	movcs	r2, #9
        memset(read_version, 0, MAVLINK_MSG_ID_READ_VERSION_LEN);
 8012fce:	2400      	movs	r4, #0
 8012fd0:	4606      	mov	r6, r0
    memcpy(read_version, _MAV_PAYLOAD(msg), len);
 8012fd2:	f105 0108 	add.w	r1, r5, #8
 8012fd6:	4668      	mov	r0, sp
        memset(read_version, 0, MAVLINK_MSG_ID_READ_VERSION_LEN);
 8012fd8:	e9cd 4400 	strd	r4, r4, [sp]
 8012fdc:	f88d 4008 	strb.w	r4, [sp, #8]
    memcpy(read_version, _MAV_PAYLOAD(msg), len);
 8012fe0:	f7f9 fd86 	bl	800caf0 <memcpy>
  if( mav_data.resp == 1 )
 8012fe4:	f89d 3000 	ldrb.w	r3, [sp]
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d001      	beq.n	8012ff0 <cmd_set_appconf+0x30>
}
 8012fec:	b008      	add	sp, #32
 8012fee:	bd70      	pop	{r4, r5, r6, pc}
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012ff0:	79eb      	ldrb	r3, [r5, #7]
    resp_ack(p_msg->ch, &mav_ack);
 8012ff2:	7830      	ldrb	r0, [r6, #0]
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8012ff4:	f88d 300e 	strb.w	r3, [sp, #14]
    resp_ack(p_msg->ch, &mav_ack);
 8012ff8:	a903      	add	r1, sp, #12
    mav_ack.err_code = err_code;
 8012ffa:	f8ad 400c 	strh.w	r4, [sp, #12]
    mav_ack.length  = 0;
 8012ffe:	f88d 400f 	strb.w	r4, [sp, #15]
    resp_ack(p_msg->ch, &mav_ack);
 8013002:	f7ff fdbd 	bl	8012b80 <resp_ack>
}
 8013006:	b008      	add	sp, #32
 8013008:	bd70      	pop	{r4, r5, r6, pc}
 801300a:	bf00      	nop
 801300c:	0000      	movs	r0, r0
	...

08013010 <mavlink_dbgString>:
{
 8013010:	b530      	push	{r4, r5, lr}
 8013012:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
		memset(dest, 0, n);
 8013016:	ab01      	add	r3, sp, #4
 8013018:	4604      	mov	r4, r0
 801301a:	22fa      	movs	r2, #250	; 0xfa
 801301c:	4618      	mov	r0, r3
	if (src == NULL) {
 801301e:	2900      	cmp	r1, #0
 8013020:	d066      	beq.n	80130f0 <mavlink_dbgString+0xe0>
		memcpy(dest, src, n);
 8013022:	f7f9 fd65 	bl	800caf0 <memcpy>
 8013026:	4603      	mov	r3, r0
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_DEBUG_STRING_LEN);
#else
    mavlink_debug_string_t packet;

    mav_array_memcpy(packet.dbg_str, dbg_str, sizeof(char)*250);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_DEBUG_STRING_LEN);
 8013028:	ad42      	add	r5, sp, #264	; 0x108
 801302a:	4619      	mov	r1, r3
 801302c:	22fa      	movs	r2, #250	; 0xfa
 801302e:	4628      	mov	r0, r5
 8013030:	f7f9 fd5e 	bl	800caf0 <memcpy>
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8013034:	4b30      	ldr	r3, [pc, #192]	; (80130f8 <mavlink_dbgString+0xe8>)
 8013036:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801303a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
#endif

    msg->msgid = MAVLINK_MSG_ID_DEBUG_STRING;
 801303e:	2100      	movs	r1, #0
 8013040:	799a      	ldrb	r2, [r3, #6]
 8013042:	f88d 2104 	strb.w	r2, [sp, #260]	; 0x104
	msg->magic = MAVLINK_STX;
 8013046:	f64f 20fe 	movw	r0, #64254	; 0xfafe
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 801304a:	3201      	adds	r2, #1
 801304c:	719a      	strb	r2, [r3, #6]
	msg->magic = MAVLINK_STX;
 801304e:	f8ad 0102 	strh.w	r0, [sp, #258]	; 0x102
 8013052:	f88d 1107 	strb.w	r1, [sp, #263]	; 0x107
	msg->sysid = system_id;
 8013056:	f88d 1105 	strb.w	r1, [sp, #261]	; 0x105
	msg->compid = component_id;
 801305a:	f88d 1106 	strb.w	r1, [sp, #262]	; 0x106
 801305e:	a841      	add	r0, sp, #260	; 0x104
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8013060:	22fa      	movs	r2, #250	; 0xfa
        *crcAccum = X25_INIT_CRC;
 8013062:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013066:	e001      	b.n	801306c <mavlink_dbgString+0x5c>
 8013068:	f810 2b01 	ldrb.w	r2, [r0], #1
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801306c:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 801306e:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8013072:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013074:	0913      	lsrs	r3, r2, #4
 8013076:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 801307a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	while (length--) {
 801307e:	4285      	cmp	r5, r0
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013080:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8013084:	d1f0      	bne.n	8013068 <mavlink_dbgString+0x58>
	const uint8_t *p = (const uint8_t *)pBuffer;
 8013086:	4628      	mov	r0, r5
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8013088:	f8ad 1100 	strh.w	r1, [sp, #256]	; 0x100
 801308c:	f20d 2502 	addw	r5, sp, #514	; 0x202
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8013090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013094:	ea82 0301 	eor.w	r3, r2, r1
        tmp ^= (tmp<<4);
 8013098:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 801309c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801309e:	0913      	lsrs	r3, r2, #4
 80130a0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80130a4:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80130a8:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80130ac:	b21b      	sxth	r3, r3
 80130ae:	b299      	uxth	r1, r3
	while (length--) {
 80130b0:	42a8      	cmp	r0, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80130b2:	f8ad 1100 	strh.w	r1, [sp, #256]	; 0x100
	while (length--) {
 80130b6:	d1eb      	bne.n	8013090 <mavlink_dbgString+0x80>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80130b8:	f083 0232 	eor.w	r2, r3, #50	; 0x32
        tmp ^= (tmp<<4);
 80130bc:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80130c0:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80130c2:	0a0b      	lsrs	r3, r1, #8
 80130c4:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 80130c8:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80130cc:	ea83 02c2 	eor.w	r2, r3, r2, lsl #3
 80130d0:	b212      	sxth	r2, r2
 80130d2:	b293      	uxth	r3, r2
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 80130d4:	0a1d      	lsrs	r5, r3, #8
    mavlink_msg_send( ch, &mav_msg);
 80130d6:	4620      	mov	r0, r4
 80130d8:	a940      	add	r1, sp, #256	; 0x100
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 80130da:	f88d 2202 	strb.w	r2, [sp, #514]	; 0x202
 80130de:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 80130e2:	f88d 5203 	strb.w	r5, [sp, #515]	; 0x203
 80130e6:	f7ff fd2b 	bl	8012b40 <mavlink_msg_send>
}
 80130ea:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 80130ee:	bd30      	pop	{r4, r5, pc}
		memset(dest, 0, n);
 80130f0:	f004 fc4e 	bl	8017990 <memset>
 80130f4:	4603      	mov	r3, r0
 80130f6:	e797      	b.n	8013028 <mavlink_dbgString+0x18>
 80130f8:	20002740 	.word	0x20002740
 80130fc:	00000000 	.word	0x00000000

08013100 <cmd_read_tag>:
{
 8013100:	b570      	push	{r4, r5, r6, lr}
  mavlink_msg_read_tag_decode(p_msg->p_msg, &mav_data);
 8013102:	6845      	ldr	r5, [r0, #4]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    read_tag->resp = mavlink_msg_read_tag_get_resp(msg);
    read_tag->type = mavlink_msg_read_tag_get_type(msg);
    mavlink_msg_read_tag_get_param(msg, read_tag->param);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_READ_TAG_LEN? msg->len : MAVLINK_MSG_ID_READ_TAG_LEN;
 8013104:	78ea      	ldrb	r2, [r5, #3]
{
 8013106:	b088      	sub	sp, #32
        memset(read_tag, 0, MAVLINK_MSG_ID_READ_TAG_LEN);
    memcpy(read_tag, _MAV_PAYLOAD(msg), len);
 8013108:	2a0a      	cmp	r2, #10
 801310a:	bf28      	it	cs
 801310c:	220a      	movcs	r2, #10
        memset(read_tag, 0, MAVLINK_MSG_ID_READ_TAG_LEN);
 801310e:	2400      	movs	r4, #0
 8013110:	4606      	mov	r6, r0
    memcpy(read_tag, _MAV_PAYLOAD(msg), len);
 8013112:	f105 0108 	add.w	r1, r5, #8
 8013116:	4668      	mov	r0, sp
        memset(read_tag, 0, MAVLINK_MSG_ID_READ_TAG_LEN);
 8013118:	e9cd 4400 	strd	r4, r4, [sp]
 801311c:	f8ad 4008 	strh.w	r4, [sp, #8]
    memcpy(read_tag, _MAV_PAYLOAD(msg), len);
 8013120:	f7f9 fce6 	bl	800caf0 <memcpy>
  if( mav_data.resp == 1 )
 8013124:	f89d 3000 	ldrb.w	r3, [sp]
 8013128:	2b01      	cmp	r3, #1
 801312a:	d011      	beq.n	8013150 <cmd_read_tag+0x50>
	mavlink_dbgString(0, (uint8_t *)"MavLink ready...\r\n");
 801312c:	490e      	ldr	r1, [pc, #56]	; (8013168 <cmd_read_tag+0x68>)
 801312e:	2000      	movs	r0, #0
 8013130:	f7ff ff6e 	bl	8013010 <mavlink_dbgString>
	mavlink_dbgString(0, (uint8_t *)"Project : OROCA BLDC");
 8013134:	490d      	ldr	r1, [pc, #52]	; (801316c <cmd_read_tag+0x6c>)
 8013136:	2000      	movs	r0, #0
 8013138:	f7ff ff6a 	bl	8013010 <mavlink_dbgString>
	mavlink_dbgString(0, (uint8_t *)"by BakChaJang");
 801313c:	490c      	ldr	r1, [pc, #48]	; (8013170 <cmd_read_tag+0x70>)
 801313e:	2000      	movs	r0, #0
 8013140:	f7ff ff66 	bl	8013010 <mavlink_dbgString>
	mavlink_dbgString(0, (uint8_t *)"date : 2018/06/21\r\n\r\n");
 8013144:	490b      	ldr	r1, [pc, #44]	; (8013174 <cmd_read_tag+0x74>)
 8013146:	2000      	movs	r0, #0
 8013148:	f7ff ff62 	bl	8013010 <mavlink_dbgString>
}
 801314c:	b008      	add	sp, #32
 801314e:	bd70      	pop	{r4, r5, r6, pc}
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8013150:	79eb      	ldrb	r3, [r5, #7]
    resp_ack(p_msg->ch, &mav_ack);
 8013152:	7830      	ldrb	r0, [r6, #0]
    mav_ack.msg_id   = p_msg->p_msg->msgid;
 8013154:	f88d 300e 	strb.w	r3, [sp, #14]
    resp_ack(p_msg->ch, &mav_ack);
 8013158:	a903      	add	r1, sp, #12
    mav_ack.err_code = err_code;
 801315a:	f8ad 400c 	strh.w	r4, [sp, #12]
    mav_ack.length  = 0;
 801315e:	f88d 400f 	strb.w	r4, [sp, #15]
    resp_ack(p_msg->ch, &mav_ack);
 8013162:	f7ff fd0d 	bl	8012b80 <resp_ack>
 8013166:	e7e1      	b.n	801312c <cmd_read_tag+0x2c>
 8013168:	08017e10 	.word	0x08017e10
 801316c:	08017e24 	.word	0x08017e24
 8013170:	08017e3c 	.word	0x08017e3c
 8013174:	08017e4c 	.word	0x08017e4c
	...

08013180 <cmd_write_eeprom>:
{
 8013180:	b570      	push	{r4, r5, r6, lr}
 8013182:	b0be      	sub	sp, #248	; 0xf8
 8013184:	4606      	mov	r6, r0
	mcconf = *mc_interface_get_configuration();
 8013186:	f7fe fedb 	bl	8011f40 <mc_interface_get_configuration>
 801318a:	22d4      	movs	r2, #212	; 0xd4
 801318c:	4601      	mov	r1, r0
 801318e:	a809      	add	r0, sp, #36	; 0x24
 8013190:	f7f9 fcae 	bl	800caf0 <memcpy>
	mavlink_msg_write_eeprom_decode(p_msg->p_msg, &mav_data);
 8013194:	6874      	ldr	r4, [r6, #4]
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    write_eeprom->resp = mavlink_msg_write_eeprom_get_resp(msg);
    write_eeprom->param = mavlink_msg_write_eeprom_get_param(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_WRITE_EEPROM_LEN? msg->len : MAVLINK_MSG_ID_WRITE_EEPROM_LEN;
 8013196:	78e2      	ldrb	r2, [r4, #3]
        memset(write_eeprom, 0, MAVLINK_MSG_ID_WRITE_EEPROM_LEN);
    memcpy(write_eeprom, _MAV_PAYLOAD(msg), len);
 8013198:	2a02      	cmp	r2, #2
 801319a:	bf28      	it	cs
 801319c:	2202      	movcs	r2, #2
 801319e:	f104 0108 	add.w	r1, r4, #8
        memset(write_eeprom, 0, MAVLINK_MSG_ID_WRITE_EEPROM_LEN);
 80131a2:	2500      	movs	r5, #0
    memcpy(write_eeprom, _MAV_PAYLOAD(msg), len);
 80131a4:	a801      	add	r0, sp, #4
        memset(write_eeprom, 0, MAVLINK_MSG_ID_WRITE_EEPROM_LEN);
 80131a6:	f8ad 5004 	strh.w	r5, [sp, #4]
    memcpy(write_eeprom, _MAV_PAYLOAD(msg), len);
 80131aa:	f7f9 fca1 	bl	800caf0 <memcpy>
	if( mav_data.resp == 1 )
 80131ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d00c      	beq.n	80131d0 <cmd_write_eeprom+0x50>
	mavlink_dbgString( 0, "cmd_write_eeprom" );
 80131b6:	490c      	ldr	r1, [pc, #48]	; (80131e8 <cmd_write_eeprom+0x68>)
 80131b8:	2000      	movs	r0, #0
 80131ba:	f7ff ff29 	bl	8013010 <mavlink_dbgString>
	conf_general_store_mc_configuration(&mcconf);
 80131be:	a809      	add	r0, sp, #36	; 0x24
 80131c0:	f7fe fa66 	bl	8011690 <conf_general_store_mc_configuration>
	chThdSleepMilliseconds(200);
 80131c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80131c8:	f7fa f882 	bl	800d2d0 <chThdSleep>
}
 80131cc:	b03e      	add	sp, #248	; 0xf8
 80131ce:	bd70      	pop	{r4, r5, r6, pc}
	  mav_ack.msg_id   = p_msg->p_msg->msgid;
 80131d0:	79e3      	ldrb	r3, [r4, #7]
	  resp_ack(p_msg->ch, &mav_ack);
 80131d2:	7830      	ldrb	r0, [r6, #0]
	  mav_ack.msg_id   = p_msg->p_msg->msgid;
 80131d4:	f88d 3012 	strb.w	r3, [sp, #18]
	  resp_ack(p_msg->ch, &mav_ack);
 80131d8:	a904      	add	r1, sp, #16
	  mav_ack.err_code = err_code;
 80131da:	f8ad 5010 	strh.w	r5, [sp, #16]
	  mav_ack.length  = 0;
 80131de:	f88d 5013 	strb.w	r5, [sp, #19]
	  resp_ack(p_msg->ch, &mav_ack);
 80131e2:	f7ff fccd 	bl	8012b80 <resp_ack>
 80131e6:	e7e6      	b.n	80131b6 <cmd_write_eeprom+0x36>
 80131e8:	08017e70 	.word	0x08017e70
 80131ec:	00000000 	.word	0x00000000

080131f0 <mavlink_msg_recv>:


bool mavlink_msg_recv( uint8_t ch, uint8_t data , msg_handle_t *p_msg )
{
 80131f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f4:	4692      	mov	sl, r2
 80131f6:	4606      	mov	r6, r0
	mavlink_status_t status[MSG_CH_MAX];

	//LED_RED_ON();


	p_msg->ch = ch;
 80131f8:	7010      	strb	r0, [r2, #0]
{
 80131fa:	460d      	mov	r5, r1
#endif
#endif

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80131fc:	4cbd      	ldr	r4, [pc, #756]	; (80134f4 <mavlink_msg_recv+0x304>)

	if(ch == 0)
 80131fe:	b988      	cbnz	r0, 8013224 <mavlink_msg_recv+0x34>

	switch (status->parse_state)
 8013200:	78e3      	ldrb	r3, [r4, #3]
	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8013202:	7020      	strb	r0, [r4, #0]
	switch (status->parse_state)
 8013204:	2b0a      	cmp	r3, #10
 8013206:	f200 81da 	bhi.w	80135be <mavlink_msg_recv+0x3ce>
 801320a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801320e:	0044      	.short	0x0044
 8013210:	004a0044 	.word	0x004a0044
 8013214:	00780065 	.word	0x00780065
 8013218:	009e008b 	.word	0x009e008b
 801321c:	00ce00b5 	.word	0x00ce00b5
 8013220:	00ef00ef 	.word	0x00ef00ef
			ret = TRUE;
		}
	}
	else
	{
		if (mavlink_parse_char(MAVLINK_COMM_1, data, &msg[ch], &status[ch]) == MAVLINK_FRAMING_OK)
 8013224:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8013500 <mavlink_msg_recv+0x310>
 8013228:	7be2      	ldrb	r2, [r4, #15]
 801322a:	0107      	lsls	r7, r0, #4
 801322c:	183b      	adds	r3, r7, r0
	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 801322e:	2100      	movs	r1, #0
 8013230:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 8013234:	7321      	strb	r1, [r4, #12]
	switch (status->parse_state)
 8013236:	2a0a      	cmp	r2, #10
 8013238:	f200 81e7 	bhi.w	801360a <mavlink_msg_recv+0x41a>
 801323c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013240:	00ef00ef 	.word	0x00ef00ef
 8013244:	011500f6 	.word	0x011500f6
 8013248:	0143012c 	.word	0x0143012c
 801324c:	017f0164 	.word	0x017f0164
 8013250:	000b019d 	.word	0x000b019d
 8013254:	000b      	.short	0x000b
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		break;

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8013256:	2a0a      	cmp	r2, #10
 8013258:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 80134fc <mavlink_msg_recv+0x30c>
 801325c:	d005      	beq.n	801326a <mavlink_msg_recv+0x7a>
 801325e:	f8b9 2110 	ldrh.w	r2, [r9, #272]	; 0x110
 8013262:	ebb5 2f12 	cmp.w	r5, r2, lsr #8
 8013266:	f000 820e 	beq.w	8013686 <mavlink_msg_recv+0x496>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 801326a:	f894 b010 	ldrb.w	fp, [r4, #16]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 801326e:	49a2      	ldr	r1, [pc, #648]	; (80134f8 <mavlink_msg_recv+0x308>)
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8013270:	eb09 000b 	add.w	r0, r9, fp
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8013274:	f04f 0c01 	mov.w	ip, #1
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8013278:	f44f 7288 	mov.w	r2, #272	; 0x110
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 801327c:	f880 5119 	strb.w	r5, [r0, #281]	; 0x119
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8013280:	4618      	mov	r0, r3
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8013282:	f04f 0302 	mov.w	r3, #2
 8013286:	7323      	strb	r3, [r4, #12]
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8013288:	f884 c00f 	strb.w	ip, [r4, #15]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 801328c:	f7f9 fc30 	bl	800caf0 <memcpy>
 8013290:	2202      	movs	r2, #2
 8013292:	4603      	mov	r3, r0
 8013294:	e1be      	b.n	8013614 <mavlink_msg_recv+0x424>
		if (c == MAVLINK_STX)
 8013296:	29fe      	cmp	r1, #254	; 0xfe
        *crcAccum = X25_INIT_CRC;
 8013298:	4b98      	ldr	r3, [pc, #608]	; (80134fc <mavlink_msg_recv+0x30c>)
 801329a:	f000 81e7 	beq.w	801366c <mavlink_msg_recv+0x47c>
 801329e:	78dd      	ldrb	r5, [r3, #3]
 80132a0:	e013      	b.n	80132ca <mavlink_msg_recv+0xda>
			rxmsg->len = c;
 80132a2:	4996      	ldr	r1, [pc, #600]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80132a4:	8808      	ldrh	r0, [r1, #0]
 80132a6:	70cd      	strb	r5, [r1, #3]
 80132a8:	ea85 0300 	eor.w	r3, r5, r0
        tmp ^= (tmp<<4);
 80132ac:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80132b0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80132b2:	091a      	lsrs	r2, r3, #4
 80132b4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80132b8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80132bc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
			status->packet_idx = 0;
 80132c0:	2000      	movs	r0, #0
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80132c2:	2204      	movs	r2, #4
 80132c4:	800b      	strh	r3, [r1, #0]
			status->packet_idx = 0;
 80132c6:	7120      	strb	r0, [r4, #4]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80132c8:	70e2      	strb	r2, [r4, #3]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
		// Count this packet as received
		status->packet_rx_success_count++;
	}

	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80132ca:	4a8d      	ldr	r2, [pc, #564]	; (8013500 <mavlink_msg_recv+0x310>)
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 80132cc:	2300      	movs	r3, #0
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80132ce:	70d5      	strb	r5, [r2, #3]
	status->parse_error = 0;
 80132d0:	70a3      	strb	r3, [r4, #2]
	bool ret = FALSE;
 80132d2:	2000      	movs	r0, #0
	}

	//LED_RED_OFF();
	return ret;

}
 80132d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rxmsg->sysid = c;
 80132d8:	4a88      	ldr	r2, [pc, #544]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80132da:	8811      	ldrh	r1, [r2, #0]
 80132dc:	7155      	strb	r5, [r2, #5]
 80132de:	404d      	eors	r5, r1
        tmp ^= (tmp<<4);
 80132e0:	ea85 1505 	eor.w	r5, r5, r5, lsl #4
 80132e4:	b2ed      	uxtb	r5, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80132e6:	092b      	lsrs	r3, r5, #4
 80132e8:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80132ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80132f0:	ea83 05c5 	eor.w	r5, r3, r5, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80132f4:	2305      	movs	r3, #5
 80132f6:	8015      	strh	r5, [r2, #0]
 80132f8:	70e3      	strb	r3, [r4, #3]
 80132fa:	78d5      	ldrb	r5, [r2, #3]
 80132fc:	e7e5      	b.n	80132ca <mavlink_msg_recv+0xda>
		rxmsg->seq = c;
 80132fe:	4a7f      	ldr	r2, [pc, #508]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8013300:	8811      	ldrh	r1, [r2, #0]
 8013302:	7115      	strb	r5, [r2, #4]
 8013304:	404d      	eors	r5, r1
        tmp ^= (tmp<<4);
 8013306:	ea85 1505 	eor.w	r5, r5, r5, lsl #4
 801330a:	b2ed      	uxtb	r5, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801330c:	092b      	lsrs	r3, r5, #4
 801330e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8013312:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8013316:	ea83 05c5 	eor.w	r5, r3, r5, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 801331a:	2303      	movs	r3, #3
 801331c:	8015      	strh	r5, [r2, #0]
 801331e:	70e3      	strb	r3, [r4, #3]
 8013320:	78d5      	ldrb	r5, [r2, #3]
 8013322:	e7d2      	b.n	80132ca <mavlink_msg_recv+0xda>
		rxmsg->compid = c;
 8013324:	4a75      	ldr	r2, [pc, #468]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8013326:	8811      	ldrh	r1, [r2, #0]
 8013328:	7195      	strb	r5, [r2, #6]
 801332a:	404d      	eors	r5, r1
        tmp ^= (tmp<<4);
 801332c:	ea85 1505 	eor.w	r5, r5, r5, lsl #4
 8013330:	b2ed      	uxtb	r5, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013332:	092b      	lsrs	r3, r5, #4
 8013334:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8013338:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 801333c:	ea83 05c5 	eor.w	r5, r3, r5, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8013340:	2306      	movs	r3, #6
 8013342:	8015      	strh	r5, [r2, #0]
 8013344:	70e3      	strb	r3, [r4, #3]
 8013346:	78d5      	ldrb	r5, [r2, #3]
 8013348:	e7bf      	b.n	80132ca <mavlink_msg_recv+0xda>
		rxmsg->msgid = c;
 801334a:	496c      	ldr	r1, [pc, #432]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801334c:	8808      	ldrh	r0, [r1, #0]
 801334e:	71cd      	strb	r5, [r1, #7]
 8013350:	ea85 0300 	eor.w	r3, r5, r0
        tmp ^= (tmp<<4);
 8013354:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8013358:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801335a:	091a      	lsrs	r2, r3, #4
 801335c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013360:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		if (rxmsg->len == 0)
 8013364:	78cd      	ldrb	r5, [r1, #3]
 8013366:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 801336a:	800b      	strh	r3, [r1, #0]
 801336c:	2d00      	cmp	r5, #0
 801336e:	f040 8177 	bne.w	8013660 <mavlink_msg_recv+0x470>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8013372:	2308      	movs	r3, #8
 8013374:	70e3      	strb	r3, [r4, #3]
 8013376:	e7a8      	b.n	80132ca <mavlink_msg_recv+0xda>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8013378:	4860      	ldr	r0, [pc, #384]	; (80134fc <mavlink_msg_recv+0x30c>)
 801337a:	7922      	ldrb	r2, [r4, #4]
 801337c:	1883      	adds	r3, r0, r2
 801337e:	3201      	adds	r2, #1
 8013380:	7219      	strb	r1, [r3, #8]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8013382:	8806      	ldrh	r6, [r0, #0]
		if (status->packet_idx == rxmsg->len)
 8013384:	78c5      	ldrb	r5, [r0, #3]
 8013386:	ea81 0306 	eor.w	r3, r1, r6
        tmp ^= (tmp<<4);
 801338a:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 801338e:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013390:	0919      	lsrs	r1, r3, #4
 8013392:	ea81 2116 	eor.w	r1, r1, r6, lsr #8
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8013396:	b2d2      	uxtb	r2, r2
 8013398:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 801339c:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
		if (status->packet_idx == rxmsg->len)
 80133a0:	42aa      	cmp	r2, r5
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80133a2:	7122      	strb	r2, [r4, #4]
 80133a4:	8003      	strh	r3, [r0, #0]
		if (status->packet_idx == rxmsg->len)
 80133a6:	d190      	bne.n	80132ca <mavlink_msg_recv+0xda>
 80133a8:	e7e3      	b.n	8013372 <mavlink_msg_recv+0x182>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80133aa:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80134fc <mavlink_msg_recv+0x30c>
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 80133ae:	4a55      	ldr	r2, [pc, #340]	; (8013504 <mavlink_msg_recv+0x314>)
 80133b0:	f899 3007 	ldrb.w	r3, [r9, #7]
 80133b4:	f8b9 1000 	ldrh.w	r1, [r9]
 80133b8:	5cd3      	ldrb	r3, [r2, r3]
 80133ba:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80133bc:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80133c0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80133c2:	091a      	lsrs	r2, r3, #4
 80133c4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80133c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80133cc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		if (c != (rxmsg->checksum & 0xFF)) {
 80133d0:	b2da      	uxtb	r2, r3
 80133d2:	4295      	cmp	r5, r2
 80133d4:	f8a9 3000 	strh.w	r3, [r9]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80133d8:	bf14      	ite	ne
 80133da:	230a      	movne	r3, #10
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 80133dc:	2309      	moveq	r3, #9
 80133de:	70e3      	strb	r3, [r4, #3]
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 80133e0:	7923      	ldrb	r3, [r4, #4]
 80133e2:	444b      	add	r3, r9
 80133e4:	721d      	strb	r5, [r3, #8]
 80133e6:	f899 5003 	ldrb.w	r5, [r9, #3]
 80133ea:	e76e      	b.n	80132ca <mavlink_msg_recv+0xda>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80133ec:	2b0a      	cmp	r3, #10
 80133ee:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80134fc <mavlink_msg_recv+0x30c>
 80133f2:	d005      	beq.n	8013400 <mavlink_msg_recv+0x210>
 80133f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80133f8:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 80133fc:	f000 816b 	beq.w	80136d6 <mavlink_msg_recv+0x4e6>
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8013400:	7927      	ldrb	r7, [r4, #4]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8013402:	493e      	ldr	r1, [pc, #248]	; (80134fc <mavlink_msg_recv+0x30c>)
 8013404:	483e      	ldr	r0, [pc, #248]	; (8013500 <mavlink_msg_recv+0x310>)
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8013406:	eb09 0207 	add.w	r2, r9, r7
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 801340a:	2602      	movs	r6, #2
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 801340c:	2301      	movs	r3, #1
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 801340e:	7255      	strb	r5, [r2, #9]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8013410:	f44f 7288 	mov.w	r2, #272	; 0x110
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8013414:	7026      	strb	r6, [r4, #0]
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8013416:	70e3      	strb	r3, [r4, #3]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8013418:	f7f9 fb6a 	bl	800caf0 <memcpy>
 801341c:	e0d2      	b.n	80135c4 <mavlink_msg_recv+0x3d4>
		if (c == MAVLINK_STX)
 801341e:	2dfe      	cmp	r5, #254	; 0xfe
        *crcAccum = X25_INIT_CRC;
 8013420:	4b36      	ldr	r3, [pc, #216]	; (80134fc <mavlink_msg_recv+0x30c>)
 8013422:	f000 8129 	beq.w	8013678 <mavlink_msg_recv+0x488>
 8013426:	f893 5113 	ldrb.w	r5, [r3, #275]	; 0x113
 801342a:	e016      	b.n	801345a <mavlink_msg_recv+0x26a>
			rxmsg->len = c;
 801342c:	4933      	ldr	r1, [pc, #204]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801342e:	f8b1 0110 	ldrh.w	r0, [r1, #272]	; 0x110
 8013432:	f881 5113 	strb.w	r5, [r1, #275]	; 0x113
 8013436:	ea85 0300 	eor.w	r3, r5, r0
        tmp ^= (tmp<<4);
 801343a:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 801343e:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013440:	091a      	lsrs	r2, r3, #4
 8013442:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013446:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801344a:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
			status->packet_idx = 0;
 801344e:	2000      	movs	r0, #0
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8013450:	2204      	movs	r2, #4
 8013452:	f8a1 3110 	strh.w	r3, [r1, #272]	; 0x110
			status->packet_idx = 0;
 8013456:	7420      	strb	r0, [r4, #16]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8013458:	73e2      	strb	r2, [r4, #15]
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 801345a:	443e      	add	r6, r7
 801345c:	eb08 1806 	add.w	r8, r8, r6, lsl #4
	status->parse_error = 0;
 8013460:	2300      	movs	r3, #0
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8013462:	f888 5003 	strb.w	r5, [r8, #3]
	status->parse_error = 0;
 8013466:	73a3      	strb	r3, [r4, #14]
 8013468:	e733      	b.n	80132d2 <mavlink_msg_recv+0xe2>
		rxmsg->sysid = c;
 801346a:	4a24      	ldr	r2, [pc, #144]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801346c:	f8b2 1110 	ldrh.w	r1, [r2, #272]	; 0x110
 8013470:	f882 5115 	strb.w	r5, [r2, #277]	; 0x115
 8013474:	404d      	eors	r5, r1
        tmp ^= (tmp<<4);
 8013476:	ea85 1505 	eor.w	r5, r5, r5, lsl #4
 801347a:	b2ed      	uxtb	r5, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801347c:	092b      	lsrs	r3, r5, #4
 801347e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8013482:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8013486:	ea83 05c5 	eor.w	r5, r3, r5, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 801348a:	2305      	movs	r3, #5
 801348c:	f8a2 5110 	strh.w	r5, [r2, #272]	; 0x110
 8013490:	73e3      	strb	r3, [r4, #15]
 8013492:	f892 5113 	ldrb.w	r5, [r2, #275]	; 0x113
 8013496:	e7e0      	b.n	801345a <mavlink_msg_recv+0x26a>
		rxmsg->seq = c;
 8013498:	4a18      	ldr	r2, [pc, #96]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801349a:	f8b2 1110 	ldrh.w	r1, [r2, #272]	; 0x110
 801349e:	f882 5114 	strb.w	r5, [r2, #276]	; 0x114
 80134a2:	404d      	eors	r5, r1
        tmp ^= (tmp<<4);
 80134a4:	ea85 1505 	eor.w	r5, r5, r5, lsl #4
 80134a8:	b2ed      	uxtb	r5, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80134aa:	092b      	lsrs	r3, r5, #4
 80134ac:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80134b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80134b4:	ea83 05c5 	eor.w	r5, r3, r5, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80134b8:	2303      	movs	r3, #3
 80134ba:	f8a2 5110 	strh.w	r5, [r2, #272]	; 0x110
 80134be:	73e3      	strb	r3, [r4, #15]
 80134c0:	f892 5113 	ldrb.w	r5, [r2, #275]	; 0x113
 80134c4:	e7c9      	b.n	801345a <mavlink_msg_recv+0x26a>
		rxmsg->compid = c;
 80134c6:	4a0d      	ldr	r2, [pc, #52]	; (80134fc <mavlink_msg_recv+0x30c>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80134c8:	f8b2 1110 	ldrh.w	r1, [r2, #272]	; 0x110
 80134cc:	f882 5116 	strb.w	r5, [r2, #278]	; 0x116
 80134d0:	404d      	eors	r5, r1
        tmp ^= (tmp<<4);
 80134d2:	ea85 1505 	eor.w	r5, r5, r5, lsl #4
 80134d6:	b2ed      	uxtb	r5, r5
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80134d8:	092b      	lsrs	r3, r5, #4
 80134da:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80134de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80134e2:	ea83 05c5 	eor.w	r5, r3, r5, lsl #3
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80134e6:	2306      	movs	r3, #6
 80134e8:	f8a2 5110 	strh.w	r5, [r2, #272]	; 0x110
 80134ec:	73e3      	strb	r3, [r4, #15]
 80134ee:	f892 5113 	ldrb.w	r5, [r2, #275]	; 0x113
 80134f2:	e7b2      	b.n	801345a <mavlink_msg_recv+0x26a>
 80134f4:	20002740 	.word	0x20002740
 80134f8:	20002410 	.word	0x20002410
 80134fc:	20002300 	.word	0x20002300
 8013500:	20002770 	.word	0x20002770
 8013504:	08017e90 	.word	0x08017e90
		rxmsg->msgid = c;
 8013508:	4987      	ldr	r1, [pc, #540]	; (8013728 <mavlink_msg_recv+0x538>)
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801350a:	f8b1 0110 	ldrh.w	r0, [r1, #272]	; 0x110
 801350e:	f881 5117 	strb.w	r5, [r1, #279]	; 0x117
 8013512:	ea85 0300 	eor.w	r3, r5, r0
        tmp ^= (tmp<<4);
 8013516:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 801351a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801351c:	091a      	lsrs	r2, r3, #4
 801351e:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013522:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		if (rxmsg->len == 0)
 8013526:	f891 5113 	ldrb.w	r5, [r1, #275]	; 0x113
 801352a:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 801352e:	f8a1 3110 	strh.w	r3, [r1, #272]	; 0x110
 8013532:	2d00      	cmp	r5, #0
 8013534:	f040 8097 	bne.w	8013666 <mavlink_msg_recv+0x476>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8013538:	2308      	movs	r3, #8
 801353a:	73e3      	strb	r3, [r4, #15]
 801353c:	e78d      	b.n	801345a <mavlink_msg_recv+0x26a>
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 801353e:	487a      	ldr	r0, [pc, #488]	; (8013728 <mavlink_msg_recv+0x538>)
 8013540:	7c22      	ldrb	r2, [r4, #16]
 8013542:	1883      	adds	r3, r0, r2
 8013544:	3201      	adds	r2, #1
 8013546:	f883 5118 	strb.w	r5, [r3, #280]	; 0x118
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801354a:	f8b0 c110 	ldrh.w	ip, [r0, #272]	; 0x110
 801354e:	ea85 030c 	eor.w	r3, r5, ip
        tmp ^= (tmp<<4);
 8013552:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8013556:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013558:	0919      	lsrs	r1, r3, #4
 801355a:	ea81 211c 	eor.w	r1, r1, ip, lsr #8
		if (status->packet_idx == rxmsg->len)
 801355e:	f890 5113 	ldrb.w	r5, [r0, #275]	; 0x113
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8013562:	b2d2      	uxtb	r2, r2
 8013564:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8013568:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
		if (status->packet_idx == rxmsg->len)
 801356c:	42aa      	cmp	r2, r5
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 801356e:	7422      	strb	r2, [r4, #16]
 8013570:	f8a0 3110 	strh.w	r3, [r0, #272]	; 0x110
		if (status->packet_idx == rxmsg->len)
 8013574:	f47f af71 	bne.w	801345a <mavlink_msg_recv+0x26a>
 8013578:	e7de      	b.n	8013538 <mavlink_msg_recv+0x348>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801357a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8013728 <mavlink_msg_recv+0x538>
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 801357e:	4a6b      	ldr	r2, [pc, #428]	; (801372c <mavlink_msg_recv+0x53c>)
 8013580:	f899 3117 	ldrb.w	r3, [r9, #279]	; 0x117
 8013584:	f8b9 1110 	ldrh.w	r1, [r9, #272]	; 0x110
 8013588:	5cd3      	ldrb	r3, [r2, r3]
 801358a:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 801358c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8013590:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8013592:	091a      	lsrs	r2, r3, #4
 8013594:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8013598:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801359c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
		if (c != (rxmsg->checksum & 0xFF)) {
 80135a0:	b2da      	uxtb	r2, r3
 80135a2:	4295      	cmp	r5, r2
 80135a4:	f8a9 3110 	strh.w	r3, [r9, #272]	; 0x110
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80135a8:	bf14      	ite	ne
 80135aa:	230a      	movne	r3, #10
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 80135ac:	2309      	moveq	r3, #9
 80135ae:	73e3      	strb	r3, [r4, #15]
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 80135b0:	7c23      	ldrb	r3, [r4, #16]
 80135b2:	444b      	add	r3, r9
 80135b4:	f883 5118 	strb.w	r5, [r3, #280]	; 0x118
 80135b8:	f899 5113 	ldrb.w	r5, [r9, #275]	; 0x113
 80135bc:	e74d      	b.n	801345a <mavlink_msg_recv+0x26a>
 80135be:	7927      	ldrb	r7, [r4, #4]
 80135c0:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8013728 <mavlink_msg_recv+0x538>
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80135c4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8013734 <mavlink_msg_recv+0x544>
 80135c8:	f899 3003 	ldrb.w	r3, [r9, #3]
 80135cc:	f888 3003 	strb.w	r3, [r8, #3]
	status->parse_error = 0;
 80135d0:	2000      	movs	r0, #0

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80135d2:	2e02      	cmp	r6, #2
	status->parse_error = 0;
 80135d4:	70a0      	strb	r0, [r4, #2]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80135d6:	f040 80a3 	bne.w	8013720 <mavlink_msg_recv+0x530>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 80135da:	eb09 0307 	add.w	r3, r9, r7
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 80135de:	2dfe      	cmp	r5, #254	; 0xfe
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 80135e0:	7a5a      	ldrb	r2, [r3, #9]
 80135e2:	7a1b      	ldrb	r3, [r3, #8]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80135e4:	7020      	strb	r0, [r4, #0]
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 80135e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	    status->parse_error++;
 80135ea:	f04f 0201 	mov.w	r2, #1
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 80135ee:	f8a8 3000 	strh.w	r3, [r8]
	    status->parse_error++;
 80135f2:	70a2      	strb	r2, [r4, #2]
	    if (c == MAVLINK_STX)
 80135f4:	d001      	beq.n	80135fa <mavlink_msg_recv+0x40a>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80135f6:	70e2      	strb	r2, [r4, #3]
 80135f8:	e66b      	b.n	80132d2 <mavlink_msg_recv+0xe2>
        *crcAccum = X25_INIT_CRC;
 80135fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80135fe:	70e6      	strb	r6, [r4, #3]
		    rxmsg->len = 0;
 8013600:	f889 0003 	strb.w	r0, [r9, #3]
 8013604:	f8a9 3000 	strh.w	r3, [r9]
 8013608:	e664      	b.n	80132d4 <mavlink_msg_recv+0xe4>
 801360a:	f894 b010 	ldrb.w	fp, [r4, #16]
 801360e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8013728 <mavlink_msg_recv+0x538>
	switch (status->parse_state)
 8013612:	2200      	movs	r2, #0
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8013614:	f44f 7188 	mov.w	r1, #272	; 0x110
 8013618:	fb01 8106 	mla	r1, r1, r6, r8
 801361c:	f899 0113 	ldrb.w	r0, [r9, #275]	; 0x113
 8013620:	70c8      	strb	r0, [r1, #3]
	status->parse_error = 0;
 8013622:	2000      	movs	r0, #0
 8013624:	73a0      	strb	r0, [r4, #14]
	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8013626:	2a00      	cmp	r2, #0
 8013628:	d076      	beq.n	8013718 <mavlink_msg_recv+0x528>
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 801362a:	44cb      	add	fp, r9
 801362c:	443e      	add	r6, r7
 801362e:	f89b 1119 	ldrb.w	r1, [fp, #281]	; 0x119
 8013632:	f89b 3118 	ldrb.w	r3, [fp, #280]	; 0x118
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8013636:	7320      	strb	r0, [r4, #12]
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 8013638:	0136      	lsls	r6, r6, #4
 801363a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	    if (c == MAVLINK_STX)
 801363e:	2dfe      	cmp	r5, #254	; 0xfe
	    status->parse_error++;
 8013640:	f04f 0101 	mov.w	r1, #1
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 8013644:	f828 3006 	strh.w	r3, [r8, r6]
	    status->parse_error++;
 8013648:	73a1      	strb	r1, [r4, #14]
	    if (c == MAVLINK_STX)
 801364a:	d001      	beq.n	8013650 <mavlink_msg_recv+0x460>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 801364c:	73e1      	strb	r1, [r4, #15]
 801364e:	e640      	b.n	80132d2 <mavlink_msg_recv+0xe2>
 8013650:	f64f 73ff 	movw	r3, #65535	; 0xffff
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8013654:	73e2      	strb	r2, [r4, #15]
		    rxmsg->len = 0;
 8013656:	f889 0113 	strb.w	r0, [r9, #275]	; 0x113
 801365a:	f8a9 3110 	strh.w	r3, [r9, #272]	; 0x110
 801365e:	e639      	b.n	80132d4 <mavlink_msg_recv+0xe4>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
 8013660:	2307      	movs	r3, #7
 8013662:	70e3      	strb	r3, [r4, #3]
 8013664:	e631      	b.n	80132ca <mavlink_msg_recv+0xda>
 8013666:	2307      	movs	r3, #7
 8013668:	73e3      	strb	r3, [r4, #15]
 801366a:	e6f6      	b.n	801345a <mavlink_msg_recv+0x26a>
 801366c:	4a30      	ldr	r2, [pc, #192]	; (8013730 <mavlink_msg_recv+0x540>)
 801366e:	601a      	str	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8013670:	2302      	movs	r3, #2
 8013672:	70e3      	strb	r3, [r4, #3]
 8013674:	2500      	movs	r5, #0
 8013676:	e628      	b.n	80132ca <mavlink_msg_recv+0xda>
 8013678:	4a2d      	ldr	r2, [pc, #180]	; (8013730 <mavlink_msg_recv+0x540>)
 801367a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 801367e:	2302      	movs	r3, #2
 8013680:	73e3      	strb	r3, [r4, #15]
 8013682:	2500      	movs	r5, #0
 8013684:	e6e9      	b.n	801345a <mavlink_msg_recv+0x26a>
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8013686:	7c21      	ldrb	r1, [r4, #16]
 8013688:	4449      	add	r1, r9
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 801368a:	f44f 7288 	mov.w	r2, #272	; 0x110
			status->msg_received = MAVLINK_FRAMING_OK;
 801368e:	f04f 0c01 	mov.w	ip, #1
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8013692:	f881 5119 	strb.w	r5, [r1, #281]	; 0x119
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8013696:	4618      	mov	r0, r3
 8013698:	eb09 0102 	add.w	r1, r9, r2
			status->msg_received = MAVLINK_FRAMING_OK;
 801369c:	f884 c00c 	strb.w	ip, [r4, #12]
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80136a0:	f884 c00f 	strb.w	ip, [r4, #15]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80136a4:	f7f9 fa24 	bl	800caf0 <memcpy>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80136a8:	8aa2      	ldrh	r2, [r4, #20]
		status->current_rx_seq = rxmsg->seq;
 80136aa:	f899 1114 	ldrb.w	r1, [r9, #276]	; 0x114
 80136ae:	7461      	strb	r1, [r4, #17]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80136b0:	4603      	mov	r3, r0
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80136b2:	b902      	cbnz	r2, 80136b6 <mavlink_msg_recv+0x4c6>
 80136b4:	82e2      	strh	r2, [r4, #22]
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80136b6:	443e      	add	r6, r7
		status->packet_rx_success_count++;
 80136b8:	3201      	adds	r2, #1
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80136ba:	eb08 1806 	add.w	r8, r8, r6, lsl #4
 80136be:	f899 1113 	ldrb.w	r1, [r9, #275]	; 0x113
		status->packet_rx_success_count++;
 80136c2:	82a2      	strh	r2, [r4, #20]
	status->parse_error = 0;
 80136c4:	2200      	movs	r2, #0
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80136c6:	f888 1003 	strb.w	r1, [r8, #3]
	status->parse_error = 0;
 80136ca:	73a2      	strb	r2, [r4, #14]
			p_msg->p_msg = &msg[ch];
 80136cc:	f8ca 3004 	str.w	r3, [sl, #4]
			ret = TRUE;
 80136d0:	2001      	movs	r0, #1
}
 80136d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 80136d6:	7923      	ldrb	r3, [r4, #4]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80136d8:	4816      	ldr	r0, [pc, #88]	; (8013734 <mavlink_msg_recv+0x544>)
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 80136da:	444b      	add	r3, r9
			status->msg_received = MAVLINK_FRAMING_OK;
 80136dc:	2601      	movs	r6, #1
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 80136de:	7259      	strb	r1, [r3, #9]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80136e0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80136e4:	4649      	mov	r1, r9
			status->msg_received = MAVLINK_FRAMING_OK;
 80136e6:	7026      	strb	r6, [r4, #0]
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80136e8:	70e6      	strb	r6, [r4, #3]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80136ea:	f7f9 fa01 	bl	800caf0 <memcpy>
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80136ee:	8923      	ldrh	r3, [r4, #8]
		status->current_rx_seq = rxmsg->seq;
 80136f0:	f899 2004 	ldrb.w	r2, [r9, #4]
 80136f4:	7162      	strb	r2, [r4, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80136f6:	b903      	cbnz	r3, 80136fa <mavlink_msg_recv+0x50a>
 80136f8:	8163      	strh	r3, [r4, #10]
	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80136fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8013734 <mavlink_msg_recv+0x544>
 80136fe:	f899 2003 	ldrb.w	r2, [r9, #3]
 8013702:	f888 2003 	strb.w	r2, [r8, #3]
		status->packet_rx_success_count++;
 8013706:	3301      	adds	r3, #1
	status->parse_error = 0;
 8013708:	2200      	movs	r2, #0
		status->packet_rx_success_count++;
 801370a:	8123      	strh	r3, [r4, #8]
	status->parse_error = 0;
 801370c:	70a2      	strb	r2, [r4, #2]
			p_msg->p_msg = &msg[ch];
 801370e:	f8ca 8004 	str.w	r8, [sl, #4]
			ret = TRUE;
 8013712:	2001      	movs	r0, #1
}
 8013714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mavlink_parse_char(MAVLINK_COMM_1, data, &msg[ch], &status[ch]) == MAVLINK_FRAMING_OK)
 8013718:	2a01      	cmp	r2, #1
 801371a:	f47f adda 	bne.w	80132d2 <mavlink_msg_recv+0xe2>
 801371e:	e7d5      	b.n	80136cc <mavlink_msg_recv+0x4dc>
		if (mavlink_parse_char(MAVLINK_COMM_0, data, &msg[ch], &status[ch]) == MAVLINK_FRAMING_OK)
 8013720:	2e01      	cmp	r6, #1
 8013722:	f47f add6 	bne.w	80132d2 <mavlink_msg_recv+0xe2>
 8013726:	e7f2      	b.n	801370e <mavlink_msg_recv+0x51e>
 8013728:	20002300 	.word	0x20002300
 801372c:	08017e90 	.word	0x08017e90
 8013730:	00feffff 	.word	0x00feffff
 8013734:	20002770 	.word	0x20002770
	...

08013740 <mavlink_msg_process_vcp>:

void  mavlink_msg_process_vcp( msg_handle_t* p_msg)
{
	//LED_RED_ON();

      switch( p_msg->p_msg->msgid )
 8013740:	6843      	ldr	r3, [r0, #4]
 8013742:	79db      	ldrb	r3, [r3, #7]
 8013744:	2b14      	cmp	r3, #20
{
 8013746:	4602      	mov	r2, r0
      switch( p_msg->p_msg->msgid )
 8013748:	d01c      	beq.n	8013784 <mavlink_msg_process_vcp+0x44>
 801374a:	d909      	bls.n	8013760 <mavlink_msg_process_vcp+0x20>
 801374c:	2b7a      	cmp	r3, #122	; 0x7a
 801374e:	d013      	beq.n	8013778 <mavlink_msg_process_vcp+0x38>
 8013750:	2bdc      	cmp	r3, #220	; 0xdc
 8013752:	d00d      	beq.n	8013770 <mavlink_msg_process_vcp+0x30>
 8013754:	2b79      	cmp	r3, #121	; 0x79
 8013756:	d011      	beq.n	801377c <mavlink_msg_process_vcp+0x3c>
		case MAVLINK_MSG_ID_SET_APPCONF : 		cmd_set_appconf(p_msg); 					break;
		case MAVLINK_MSG_ID_SET_VELOCITY:		cmd_set_velocity(p_msg);					break;


		
		default:								cmd_send_error(p_msg, ERR_INVALID_CMD);		break;
 8013758:	4610      	mov	r0, r2
 801375a:	2101      	movs	r1, #1
 801375c:	f7ff ba98 	b.w	8012c90 <cmd_send_error>
      switch( p_msg->p_msg->msgid )
 8013760:	2b0c      	cmp	r3, #12
 8013762:	d00d      	beq.n	8013780 <mavlink_msg_process_vcp+0x40>
 8013764:	2b0d      	cmp	r3, #13
 8013766:	d005      	beq.n	8013774 <mavlink_msg_process_vcp+0x34>
 8013768:	2b0b      	cmp	r3, #11
 801376a:	d1f5      	bne.n	8013758 <mavlink_msg_process_vcp+0x18>
		case MAVLINK_MSG_ID_READ_VERSION:		cmd_read_version(p_msg);					break;
 801376c:	f7ff baa0 	b.w	8012cb0 <cmd_read_version>
		case MAVLINK_MSG_ID_SET_VELOCITY:		cmd_set_velocity(p_msg);					break;
 8013770:	f7ff bb26 	b.w	8012dc0 <cmd_set_velocity>
		case MAVLINK_MSG_ID_READ_TAG:			cmd_read_tag(p_msg);						break;
 8013774:	f7ff bcc4 	b.w	8013100 <cmd_read_tag>
		case MAVLINK_MSG_ID_SET_APPCONF : 		cmd_set_appconf(p_msg); 					break;
 8013778:	f7ff bc22 	b.w	8012fc0 <cmd_set_appconf>
		case MAVLINK_MSG_ID_SET_MCCONF: 		cmd_set_mcconf(p_msg); 						break;
 801377c:	f7ff bb50 	b.w	8012e20 <cmd_set_mcconf>
		case MAVLINK_MSG_ID_READ_BOARD_NAME:	cmd_read_board_name(p_msg);					break;
 8013780:	f7ff bade 	b.w	8012d40 <cmd_read_board_name>
		case MAVLINK_MSG_ID_WRITE_EEPROM:		cmd_write_eeprom(p_msg);					break;
 8013784:	f7ff bcfc 	b.w	8013180 <cmd_write_eeprom>
	...

08013790 <cancom_process_thread>:
 8013790:	4b12      	ldr	r3, [pc, #72]	; (80137dc <cancom_process_thread+0x4c>)

static THD_FUNCTION(cancom_process_thread, arg) {
	(void)arg;

	chRegSetThreadName("Cancom process");
	process_tp = chThdGetSelfX();
 8013792:	4a13      	ldr	r2, [pc, #76]	; (80137e0 <cancom_process_thread+0x50>)
 8013794:	699b      	ldr	r3, [r3, #24]
 8013796:	4913      	ldr	r1, [pc, #76]	; (80137e4 <cancom_process_thread+0x54>)
static THD_FUNCTION(cancom_process_thread, arg) {
 8013798:	b570      	push	{r4, r5, r6, lr}
 801379a:	4d13      	ldr	r5, [pc, #76]	; (80137e8 <cancom_process_thread+0x58>)
 801379c:	4e13      	ldr	r6, [pc, #76]	; (80137ec <cancom_process_thread+0x5c>)
 801379e:	6199      	str	r1, [r3, #24]
	process_tp = chThdGetSelfX();
 80137a0:	6013      	str	r3, [r2, #0]
	uint8_t crc_low;
	uint8_t crc_high;
	bool commands_send;

	for(;;) {
		chEvtWaitAny((eventmask_t) 1);
 80137a2:	2001      	movs	r0, #1
 80137a4:	f7f9 ffac 	bl	800d700 <chEvtWaitAny>
 80137a8:	6829      	ldr	r1, [r5, #0]

		while (rx_frame_read != rx_frame_write) {
 80137aa:	6834      	ldr	r4, [r6, #0]
 80137ac:	2000      	movs	r0, #0
 80137ae:	460b      	mov	r3, r1
 80137b0:	429c      	cmp	r4, r3
 80137b2:	4602      	mov	r2, r0
 80137b4:	f103 0301 	add.w	r3, r3, #1


			}

			if (rx_frame_read == RX_FRAMES_SIZE) {
				rx_frame_read = 0;
 80137b8:	f04f 0100 	mov.w	r1, #0
		while (rx_frame_read != rx_frame_write) {
 80137bc:	d009      	beq.n	80137d2 <cancom_process_thread+0x42>
 80137be:	2201      	movs	r2, #1
			if (rx_frame_read == RX_FRAMES_SIZE) {
 80137c0:	2b64      	cmp	r3, #100	; 0x64
 80137c2:	4610      	mov	r0, r2
 80137c4:	d0f3      	beq.n	80137ae <cancom_process_thread+0x1e>
		while (rx_frame_read != rx_frame_write) {
 80137c6:	429c      	cmp	r4, r3
				rx_frame_read = 0;
 80137c8:	f04f 0100 	mov.w	r1, #0
 80137cc:	f103 0301 	add.w	r3, r3, #1
		while (rx_frame_read != rx_frame_write) {
 80137d0:	d1f5      	bne.n	80137be <cancom_process_thread+0x2e>
 80137d2:	2a00      	cmp	r2, #0
 80137d4:	d0e5      	beq.n	80137a2 <cancom_process_thread+0x12>
 80137d6:	602c      	str	r4, [r5, #0]
 80137d8:	e7e3      	b.n	80137a2 <cancom_process_thread+0x12>
 80137da:	bf00      	nop
 80137dc:	20000c90 	.word	0x20000c90
 80137e0:	20004358 	.word	0x20004358
 80137e4:	08017fb0 	.word	0x08017fb0
 80137e8:	2000435c 	.word	0x2000435c
 80137ec:	20004360 	.word	0x20004360

080137f0 <cancom_status_thread>:
 80137f0:	4b09      	ldr	r3, [pc, #36]	; (8013818 <cancom_status_thread+0x28>)
 80137f2:	4a0a      	ldr	r2, [pc, #40]	; (801381c <cancom_status_thread+0x2c>)
 80137f4:	699b      	ldr	r3, [r3, #24]
			}
		}
	}
}

static THD_FUNCTION(cancom_status_thread, arg) {
 80137f6:	b510      	push	{r4, lr}
		//	buffer_append_int16(buffer, (int16_t)(mc_interface_get_tot_current() * 10.0), &send_index);
		//	buffer_append_int16(buffer, (int16_t)(mc_interface_get_duty_cycle_now() * 1000.0), &send_index);
		//	comm_can_transmit(app_get_configuration()->controller_id | ((uint32_t)CAN_PACKET_STATUS << 8), buffer, send_index);
		}

		systime_t sleep_time = CH_CFG_ST_FREQUENCY / app_get_configuration()->send_can_status_rate_hz;
 80137f8:	f242 7410 	movw	r4, #10000	; 0x2710
 80137fc:	619a      	str	r2, [r3, #24]
		if (app_get_configuration()->send_can_status) {
 80137fe:	f001 fba7 	bl	8014f50 <app_get_configuration>
		systime_t sleep_time = CH_CFG_ST_FREQUENCY / app_get_configuration()->send_can_status_rate_hz;
 8013802:	f001 fba5 	bl	8014f50 <app_get_configuration>
 8013806:	6900      	ldr	r0, [r0, #16]
 8013808:	fbb4 f0f0 	udiv	r0, r4, r0
		if (sleep_time == 0) {
			sleep_time = 1;
 801380c:	2800      	cmp	r0, #0
		}

		chThdSleep(sleep_time);
 801380e:	bf08      	it	eq
 8013810:	2001      	moveq	r0, #1
 8013812:	f7f9 fd5d 	bl	800d2d0 <chThdSleep>
	for(;;) {
 8013816:	e7f2      	b.n	80137fe <cancom_status_thread+0xe>
 8013818:	20000c90 	.word	0x20000c90
 801381c:	08017fd0 	.word	0x08017fd0

08013820 <cancom_read_thread>:
static THD_FUNCTION(cancom_read_thread, arg) {
 8013820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013824:	4f20      	ldr	r7, [pc, #128]	; (80138a8 <cancom_read_thread+0x88>)
 8013826:	4a21      	ldr	r2, [pc, #132]	; (80138ac <cancom_read_thread+0x8c>)
 8013828:	69bb      	ldr	r3, [r7, #24]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 801382a:	4821      	ldr	r0, [pc, #132]	; (80138b0 <cancom_read_thread+0x90>)
 801382c:	619a      	str	r2, [r3, #24]
 801382e:	b08a      	sub	sp, #40	; 0x28
 8013830:	4669      	mov	r1, sp
 8013832:	f04f 33ff 	mov.w	r3, #4294967295
 8013836:	2201      	movs	r2, #1
 8013838:	f7f9 fef2 	bl	800d620 <chEvtRegisterMaskWithFlags>
		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 801383c:	4d1d      	ldr	r5, [pc, #116]	; (80138b4 <cancom_read_thread+0x94>)
 801383e:	4c1e      	ldr	r4, [pc, #120]	; (80138b8 <cancom_read_thread+0x98>)
 8013840:	4e1e      	ldr	r6, [pc, #120]	; (80138bc <cancom_read_thread+0x9c>)
  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8013842:	69bb      	ldr	r3, [r7, #24]
	while(!chThdShouldTerminateX()) {
 8013844:	7f5b      	ldrb	r3, [r3, #29]
 8013846:	f013 0804 	ands.w	r8, r3, #4
 801384a:	d126      	bne.n	801389a <cancom_read_thread+0x7a>
		if (chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(10)) == 0) {
 801384c:	2164      	movs	r1, #100	; 0x64
 801384e:	f04f 30ff 	mov.w	r0, #4294967295
 8013852:	f7f9 ff75 	bl	800d740 <chEvtWaitAnyTimeout>
 8013856:	2800      	cmp	r0, #0
 8013858:	d0f3      	beq.n	8013842 <cancom_read_thread+0x22>
		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 801385a:	aa05      	add	r2, sp, #20
 801385c:	4643      	mov	r3, r8
 801385e:	4641      	mov	r1, r8
 8013860:	4628      	mov	r0, r5
 8013862:	f7fa f995 	bl	800db90 <canReceive>
		while (result == MSG_OK) {
 8013866:	2800      	cmp	r0, #0
 8013868:	d1eb      	bne.n	8013842 <cancom_read_thread+0x22>
				rx_frame_write = 0;
 801386a:	4680      	mov	r8, r0
			rx_frames[rx_frame_write++] = rxmsg;
 801386c:	6823      	ldr	r3, [r4, #0]
			chEvtSignal(process_tp, (eventmask_t) 1);
 801386e:	6830      	ldr	r0, [r6, #0]
			rx_frames[rx_frame_write++] = rxmsg;
 8013870:	3301      	adds	r3, #1
 8013872:	2b64      	cmp	r3, #100	; 0x64
 8013874:	bf08      	it	eq
 8013876:	4643      	moveq	r3, r8
			chEvtSignal(process_tp, (eventmask_t) 1);
 8013878:	2101      	movs	r1, #1
			rx_frames[rx_frame_write++] = rxmsg;
 801387a:	6023      	str	r3, [r4, #0]
			chEvtSignal(process_tp, (eventmask_t) 1);
 801387c:	f7f9 ff30 	bl	800d6e0 <chEvtSignal>
			result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 8013880:	2300      	movs	r3, #0
 8013882:	4619      	mov	r1, r3
 8013884:	aa05      	add	r2, sp, #20
 8013886:	4628      	mov	r0, r5
 8013888:	f7fa f982 	bl	800db90 <canReceive>
		while (result == MSG_OK) {
 801388c:	2800      	cmp	r0, #0
 801388e:	d0ed      	beq.n	801386c <cancom_read_thread+0x4c>
 8013890:	69bb      	ldr	r3, [r7, #24]
	while(!chThdShouldTerminateX()) {
 8013892:	7f5b      	ldrb	r3, [r3, #29]
 8013894:	f013 0804 	ands.w	r8, r3, #4
 8013898:	d0d8      	beq.n	801384c <cancom_read_thread+0x2c>
	chEvtUnregister(&CANDx.rxfull_event, &el);
 801389a:	4669      	mov	r1, sp
 801389c:	4804      	ldr	r0, [pc, #16]	; (80138b0 <cancom_read_thread+0x90>)
 801389e:	f7f9 fed7 	bl	800d650 <chEvtUnregister>
}
 80138a2:	b00a      	add	sp, #40	; 0x28
 80138a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a8:	20000c90 	.word	0x20000c90
 80138ac:	08017fc0 	.word	0x08017fc0
 80138b0:	20000fac 	.word	0x20000fac
 80138b4:	20000f94 	.word	0x20000f94
 80138b8:	20004360 	.word	0x20004360
 80138bc:	20004358 	.word	0x20004358

080138c0 <comm_can_init>:
void comm_can_init(void) {
 80138c0:	b510      	push	{r4, lr}
 80138c2:	491f      	ldr	r1, [pc, #124]	; (8013940 <comm_can_init+0x80>)
 80138c4:	b082      	sub	sp, #8
	for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 80138c6:	2300      	movs	r3, #0
		stat_msgs[i].id = -1;
 80138c8:	f04f 32ff 	mov.w	r2, #4294967295
 80138cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 80138d0:	3301      	adds	r3, #1
 80138d2:	2b0a      	cmp	r3, #10
 80138d4:	d1fa      	bne.n	80138cc <comm_can_init+0xc>
	rx_frame_write = 0;
 80138d6:	4b1b      	ldr	r3, [pc, #108]	; (8013944 <comm_can_init+0x84>)
	rx_frame_read = 0;
 80138d8:	4a1b      	ldr	r2, [pc, #108]	; (8013948 <comm_can_init+0x88>)
	chMtxObjectInit(&can_mtx);
 80138da:	481c      	ldr	r0, [pc, #112]	; (801394c <comm_can_init+0x8c>)
	rx_frame_read = 0;
 80138dc:	2400      	movs	r4, #0
	rx_frame_write = 0;
 80138de:	601c      	str	r4, [r3, #0]
	rx_frame_read = 0;
 80138e0:	6014      	str	r4, [r2, #0]
	chMtxObjectInit(&can_mtx);
 80138e2:	f7f9 fddd 	bl	800d4a0 <chMtxObjectInit>
	palSetPadMode(GPIOB, 8,
 80138e6:	f240 428a 	movw	r2, #1162	; 0x48a
 80138ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80138ee:	4818      	ldr	r0, [pc, #96]	; (8013950 <comm_can_init+0x90>)
 80138f0:	f7fb fd26 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 9,
 80138f4:	f240 428a 	movw	r2, #1162	; 0x48a
 80138f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80138fc:	4814      	ldr	r0, [pc, #80]	; (8013950 <comm_can_init+0x90>)
 80138fe:	f7fb fd1f 	bl	800f340 <_pal_lld_setgroupmode>
	canStart(&CANDx, &cancfg);
 8013902:	4914      	ldr	r1, [pc, #80]	; (8013954 <comm_can_init+0x94>)
 8013904:	4814      	ldr	r0, [pc, #80]	; (8013958 <comm_can_init+0x98>)
 8013906:	f7fa f933 	bl	800db70 <canStart>
	chThdCreateStatic(cancom_read_thread_wa, sizeof(cancom_read_thread_wa), NORMALPRIO + 1,
 801390a:	9400      	str	r4, [sp, #0]
 801390c:	4b13      	ldr	r3, [pc, #76]	; (801395c <comm_can_init+0x9c>)
 801390e:	4814      	ldr	r0, [pc, #80]	; (8013960 <comm_can_init+0xa0>)
 8013910:	2241      	movs	r2, #65	; 0x41
 8013912:	f44f 7166 	mov.w	r1, #920	; 0x398
 8013916:	f7f9 fca3 	bl	800d260 <chThdCreateStatic>
	chThdCreateStatic(cancom_status_thread_wa, sizeof(cancom_status_thread_wa), NORMALPRIO,
 801391a:	9400      	str	r4, [sp, #0]
 801391c:	4b11      	ldr	r3, [pc, #68]	; (8013964 <comm_can_init+0xa4>)
 801391e:	4812      	ldr	r0, [pc, #72]	; (8013968 <comm_can_init+0xa8>)
 8013920:	2240      	movs	r2, #64	; 0x40
 8013922:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8013926:	f7f9 fc9b 	bl	800d260 <chThdCreateStatic>
	chThdCreateStatic(cancom_process_thread_wa, sizeof(cancom_process_thread_wa), NORMALPRIO,
 801392a:	9400      	str	r4, [sp, #0]
 801392c:	4b0f      	ldr	r3, [pc, #60]	; (801396c <comm_can_init+0xac>)
 801392e:	4810      	ldr	r0, [pc, #64]	; (8013970 <comm_can_init+0xb0>)
 8013930:	2240      	movs	r2, #64	; 0x40
 8013932:	f241 1198 	movw	r1, #4504	; 0x1198
 8013936:	f7f9 fc93 	bl	800d260 <chThdCreateStatic>
}
 801393a:	b002      	add	sp, #8
 801393c:	bd10      	pop	{r4, pc}
 801393e:	bf00      	nop
 8013940:	20004364 	.word	0x20004364
 8013944:	20004360 	.word	0x20004360
 8013948:	2000435c 	.word	0x2000435c
 801394c:	20002880 	.word	0x20002880
 8013950:	40020400 	.word	0x40020400
 8013954:	08017fa0 	.word	0x08017fa0
 8013958:	20000f94 	.word	0x20000f94
 801395c:	08013821 	.word	0x08013821
 8013960:	20003a28 	.word	0x20003a28
 8013964:	080137f1 	.word	0x080137f1
 8013968:	20003dc0 	.word	0x20003dc0
 801396c:	08013791 	.word	0x08013791
 8013970:	20002890 	.word	0x20002890
	...

08013980 <serial_read_thread>:


// Private functions
int usb_uart_printf( const char *fmt, ...);

static THD_FUNCTION(serial_read_thread, arg) {
 8013980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013984:	4b15      	ldr	r3, [pc, #84]	; (80139dc <serial_read_thread+0x5c>)
 8013986:	4e16      	ldr	r6, [pc, #88]	; (80139e0 <serial_read_thread+0x60>)
 8013988:	699b      	ldr	r3, [r3, #24]
 801398a:	4a16      	ldr	r2, [pc, #88]	; (80139e4 <serial_read_thread+0x64>)
 801398c:	4d16      	ldr	r5, [pc, #88]	; (80139e8 <serial_read_thread+0x68>)
 801398e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80139ec <serial_read_thread+0x6c>
 8013992:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80139f0 <serial_read_thread+0x70>
 8013996:	619a      	str	r2, [r3, #24]
 8013998:	b0a1      	sub	sp, #132	; 0x84
	int len;
	int had_data = 0;

	for(;;) 
	{
		len = chSequentialStreamRead(&SDU1, (uint8_t*) buffer, 1);
 801399a:	4637      	mov	r7, r6
 801399c:	466c      	mov	r4, sp
 801399e:	6833      	ldr	r3, [r6, #0]
 80139a0:	2201      	movs	r2, #1
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	4621      	mov	r1, r4
 80139a6:	4638      	mov	r0, r7
 80139a8:	4798      	blx	r3

		for (i = 0;i < len;i++) 
 80139aa:	2800      	cmp	r0, #0
 80139ac:	ddf7      	ble.n	801399e <serial_read_thread+0x1e>
 80139ae:	682b      	ldr	r3, [r5, #0]
 80139b0:	4622      	mov	r2, r4
		{
			serial_rx_buffer[serial_rx_write_pos++] = buffer[i];
 80139b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80139b6:	f809 1003 	strb.w	r1, [r9, r3]
 80139ba:	3301      	adds	r3, #1

			if (serial_rx_write_pos == SERIAL_RX_BUFFER_SIZE) 
			{
				serial_rx_write_pos = 0;
 80139bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		for (i = 0;i < len;i++) 
 80139c0:	eba2 0104 	sub.w	r1, r2, r4
				serial_rx_write_pos = 0;
 80139c4:	bf08      	it	eq
 80139c6:	2300      	moveq	r3, #0
		for (i = 0;i < len;i++) 
 80139c8:	4288      	cmp	r0, r1
 80139ca:	dcf2      	bgt.n	80139b2 <serial_read_thread+0x32>
			had_data = 1;
		}

		if (had_data) 
		{
			chEvtSignal(process_rx_tp, (eventmask_t) 1);
 80139cc:	2101      	movs	r1, #1
 80139ce:	f8d8 0000 	ldr.w	r0, [r8]
 80139d2:	602b      	str	r3, [r5, #0]
 80139d4:	f7f9 fe84 	bl	800d6e0 <chEvtSignal>
 80139d8:	e7e1      	b.n	801399e <serial_read_thread+0x1e>
 80139da:	bf00      	nop
 80139dc:	20000c90 	.word	0x20000c90
 80139e0:	20006ca8 	.word	0x20006ca8
 80139e4:	08018000 	.word	0x08018000
 80139e8:	20006104 	.word	0x20006104
 80139ec:	20005900 	.word	0x20005900
 80139f0:	200043b4 	.word	0x200043b4
	...

08013a00 <serial_write_thread>:
		}
	}
}


static THD_FUNCTION(serial_write_thread, arg) {
 8013a00:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8013a04:	4b15      	ldr	r3, [pc, #84]	; (8013a5c <serial_write_thread+0x5c>)
	(void)arg;

	chRegSetThreadName("USB-Serial write");

	process_tx_tp = chThdGetSelfX();
 8013a06:	4a16      	ldr	r2, [pc, #88]	; (8013a60 <serial_write_thread+0x60>)
 8013a08:	699b      	ldr	r3, [r3, #24]
 8013a0a:	4916      	ldr	r1, [pc, #88]	; (8013a64 <serial_write_thread+0x64>)
 8013a0c:	4d16      	ldr	r5, [pc, #88]	; (8013a68 <serial_write_thread+0x68>)
 8013a0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8013a70 <serial_write_thread+0x70>
 8013a12:	4f16      	ldr	r7, [pc, #88]	; (8013a6c <serial_write_thread+0x6c>)
 8013a14:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8013a74 <serial_write_thread+0x74>
 8013a18:	6199      	str	r1, [r3, #24]
 8013a1a:	6013      	str	r3, [r2, #0]
		{
			chSequentialStreamWrite(&SDU1, &serial_tx_buffer[serial_tx_read_pos++],1);

			if (serial_tx_read_pos == SERIAL_TX_BUFFER_SIZE) 
			{
				serial_tx_read_pos = 0;
 8013a1c:	f04f 0900 	mov.w	r9, #0
		chEvtWaitAny((eventmask_t) 1);
 8013a20:	2001      	movs	r0, #1
 8013a22:	f7f9 fe6d 	bl	800d700 <chEvtWaitAny>
			chSequentialStreamWrite(&SDU1, &serial_tx_buffer[serial_tx_read_pos++],1);
 8013a26:	f8df b048 	ldr.w	fp, [pc, #72]	; 8013a70 <serial_write_thread+0x70>
 8013a2a:	682b      	ldr	r3, [r5, #0]
		while (serial_tx_read_pos != serial_tx_write_pos) 
 8013a2c:	f8da 6000 	ldr.w	r6, [sl]
 8013a30:	429e      	cmp	r6, r3
			chSequentialStreamWrite(&SDU1, &serial_tx_buffer[serial_tx_read_pos++],1);
 8013a32:	f103 0401 	add.w	r4, r3, #1
 8013a36:	eb07 0103 	add.w	r1, r7, r3
 8013a3a:	f04f 0201 	mov.w	r2, #1
 8013a3e:	4658      	mov	r0, fp
		while (serial_tx_read_pos != serial_tx_write_pos) 
 8013a40:	d0ee      	beq.n	8013a20 <serial_write_thread+0x20>
			chSequentialStreamWrite(&SDU1, &serial_tx_buffer[serial_tx_read_pos++],1);
 8013a42:	f8d8 3000 	ldr.w	r3, [r8]
 8013a46:	602c      	str	r4, [r5, #0]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	4798      	blx	r3
			if (serial_tx_read_pos == SERIAL_TX_BUFFER_SIZE) 
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
				serial_tx_read_pos = 0;
 8013a52:	bf04      	itt	eq
 8013a54:	f8c5 9000 	streq.w	r9, [r5]
 8013a58:	2300      	moveq	r3, #0
 8013a5a:	e7e7      	b.n	8013a2c <serial_write_thread+0x2c>
 8013a5c:	20000c90 	.word	0x20000c90
 8013a60:	200043b8 	.word	0x200043b8
 8013a64:	08018010 	.word	0x08018010
 8013a68:	20006908 	.word	0x20006908
 8013a6c:	20006108 	.word	0x20006108
 8013a70:	20006ca8 	.word	0x20006ca8
 8013a74:	2000690c 	.word	0x2000690c
	...

08013a80 <serial_process_thread>:
 8013a80:	4b16      	ldr	r3, [pc, #88]	; (8013adc <serial_process_thread+0x5c>)
	process_rx_tp = chThdGetSelfX();
 8013a82:	4a17      	ldr	r2, [pc, #92]	; (8013ae0 <serial_process_thread+0x60>)
 8013a84:	699b      	ldr	r3, [r3, #24]
 8013a86:	4917      	ldr	r1, [pc, #92]	; (8013ae4 <serial_process_thread+0x64>)
 8013a88:	4c17      	ldr	r4, [pc, #92]	; (8013ae8 <serial_process_thread+0x68>)
 8013a8a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8013af4 <serial_process_thread+0x74>
			if( mavlink_msg_recv( 0, serial_rx_buffer[serial_rx_read_pos++] , &gMsg) )
 8013a8e:	4e17      	ldr	r6, [pc, #92]	; (8013aec <serial_process_thread+0x6c>)
static THD_FUNCTION(serial_process_thread, arg) {
 8013a90:	b580      	push	{r7, lr}
 8013a92:	4f17      	ldr	r7, [pc, #92]	; (8013af0 <serial_process_thread+0x70>)
 8013a94:	6199      	str	r1, [r3, #24]
	process_rx_tp = chThdGetSelfX();
 8013a96:	6013      	str	r3, [r2, #0]
			if( mavlink_msg_recv( 0, serial_rx_buffer[serial_rx_read_pos++] , &gMsg) )
 8013a98:	f04f 0900 	mov.w	r9, #0
		chEvtWaitAny((eventmask_t) 1);
 8013a9c:	2001      	movs	r0, #1
 8013a9e:	f7f9 fe2f 	bl	800d700 <chEvtWaitAny>
 8013aa2:	6823      	ldr	r3, [r4, #0]
		while (serial_rx_read_pos != serial_rx_write_pos) 
 8013aa4:	e006      	b.n	8013ab4 <serial_process_thread+0x34>
			if (serial_rx_read_pos == SERIAL_RX_BUFFER_SIZE) 
 8013aa6:	6823      	ldr	r3, [r4, #0]
 8013aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
				serial_rx_read_pos = 0;
 8013aac:	bf04      	itt	eq
 8013aae:	f8c4 9000 	streq.w	r9, [r4]
 8013ab2:	2300      	moveq	r3, #0
		while (serial_rx_read_pos != serial_rx_write_pos) 
 8013ab4:	6839      	ldr	r1, [r7, #0]
 8013ab6:	4299      	cmp	r1, r3
			if( mavlink_msg_recv( 0, serial_rx_buffer[serial_rx_read_pos++] , &gMsg) )
 8013ab8:	f103 0501 	add.w	r5, r3, #1
 8013abc:	4632      	mov	r2, r6
 8013abe:	f04f 0000 	mov.w	r0, #0
		while (serial_rx_read_pos != serial_rx_write_pos) 
 8013ac2:	d0eb      	beq.n	8013a9c <serial_process_thread+0x1c>
			if( mavlink_msg_recv( 0, serial_rx_buffer[serial_rx_read_pos++] , &gMsg) )
 8013ac4:	f818 1003 	ldrb.w	r1, [r8, r3]
 8013ac8:	6025      	str	r5, [r4, #0]
 8013aca:	f7ff fb91 	bl	80131f0 <mavlink_msg_recv>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d0e9      	beq.n	8013aa6 <serial_process_thread+0x26>
				mavlink_msg_process_vcp(&gMsg);
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f7ff fe34 	bl	8013740 <mavlink_msg_process_vcp>
 8013ad8:	e7e5      	b.n	8013aa6 <serial_process_thread+0x26>
 8013ada:	bf00      	nop
 8013adc:	20000c90 	.word	0x20000c90
 8013ae0:	200043b4 	.word	0x200043b4
 8013ae4:	08017fe0 	.word	0x08017fe0
 8013ae8:	20006100 	.word	0x20006100
 8013aec:	200022f8 	.word	0x200022f8
 8013af0:	20006104 	.word	0x20006104
 8013af4:	20005900 	.word	0x20005900
	...

08013b00 <usb_serial_send>:
void usb_serial_send(uint8_t* buffer, uint16_t len)
{
		uint16_t i;
		int had_data = 0;

		for (i = 0;i < len;i++) 
 8013b00:	b1c9      	cbz	r1, 8013b36 <usb_serial_send+0x36>
{
 8013b02:	b470      	push	{r4, r5, r6}
 8013b04:	4e0c      	ldr	r6, [pc, #48]	; (8013b38 <usb_serial_send+0x38>)
 8013b06:	4d0d      	ldr	r5, [pc, #52]	; (8013b3c <usb_serial_send+0x3c>)
 8013b08:	6833      	ldr	r3, [r6, #0]
 8013b0a:	3901      	subs	r1, #1
 8013b0c:	fa10 f481 	uxtah	r4, r0, r1
 8013b10:	3801      	subs	r0, #1
		{
			serial_tx_buffer[serial_tx_write_pos++] = buffer[i];
 8013b12:	1c5a      	adds	r2, r3, #1
 8013b14:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8013b18:	54e9      	strb	r1, [r5, r3]

			if (serial_tx_write_pos == SERIAL_TX_BUFFER_SIZE) 
			{
				serial_tx_write_pos = 0;
 8013b1a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8013b1e:	bf14      	ite	ne
 8013b20:	4613      	movne	r3, r2
 8013b22:	2300      	moveq	r3, #0
		for (i = 0;i < len;i++) 
 8013b24:	42a0      	cmp	r0, r4
 8013b26:	d1f4      	bne.n	8013b12 <usb_serial_send+0x12>
			had_data = 1;
		}

		if (had_data) 
		{
			chEvtSignal(process_tx_tp, (eventmask_t) 1);
 8013b28:	4a05      	ldr	r2, [pc, #20]	; (8013b40 <usb_serial_send+0x40>)
 8013b2a:	6033      	str	r3, [r6, #0]
 8013b2c:	6810      	ldr	r0, [r2, #0]
 8013b2e:	2101      	movs	r1, #1
			had_data = 0;
		}
}
 8013b30:	bc70      	pop	{r4, r5, r6}
			chEvtSignal(process_tx_tp, (eventmask_t) 1);
 8013b32:	f7f9 bdd5 	b.w	800d6e0 <chEvtSignal>
 8013b36:	4770      	bx	lr
 8013b38:	2000690c 	.word	0x2000690c
 8013b3c:	20006108 	.word	0x20006108
 8013b40:	200043b8 	.word	0x200043b8
	...

08013b50 <comm_usb_init>:


void comm_usb_init(void) {
 8013b50:	b510      	push	{r4, lr}
 8013b52:	b082      	sub	sp, #8
	comm_usb_serial_init();
 8013b54:	f000 f864 	bl	8013c20 <comm_usb_serial_init>
	chMtxObjectInit(&send_mutex);

//	oqObjectInit(&oq, obuf, SERIAL_BUFFERS_SIZE, NULL, NULL);

	// Threads
	chThdCreateStatic(serial_read_thread_wa, sizeof(serial_read_thread_wa), NORMALPRIO, serial_read_thread, NULL);
 8013b58:	2400      	movs	r4, #0
	chMtxObjectInit(&send_mutex);
 8013b5a:	480e      	ldr	r0, [pc, #56]	; (8013b94 <comm_usb_init+0x44>)
 8013b5c:	f7f9 fca0 	bl	800d4a0 <chMtxObjectInit>
	chThdCreateStatic(serial_read_thread_wa, sizeof(serial_read_thread_wa), NORMALPRIO, serial_read_thread, NULL);
 8013b60:	9400      	str	r4, [sp, #0]
 8013b62:	4b0d      	ldr	r3, [pc, #52]	; (8013b98 <comm_usb_init+0x48>)
 8013b64:	480d      	ldr	r0, [pc, #52]	; (8013b9c <comm_usb_init+0x4c>)
 8013b66:	2240      	movs	r2, #64	; 0x40
 8013b68:	f44f 7166 	mov.w	r1, #920	; 0x398
 8013b6c:	f7f9 fb78 	bl	800d260 <chThdCreateStatic>
	chThdCreateStatic(serial_process_thread_wa, sizeof(serial_process_thread_wa), NORMALPRIO, serial_process_thread, NULL);
 8013b70:	9400      	str	r4, [sp, #0]
 8013b72:	4b0b      	ldr	r3, [pc, #44]	; (8013ba0 <comm_usb_init+0x50>)
 8013b74:	480b      	ldr	r0, [pc, #44]	; (8013ba4 <comm_usb_init+0x54>)
 8013b76:	2240      	movs	r2, #64	; 0x40
 8013b78:	f241 1198 	movw	r1, #4504	; 0x1198
 8013b7c:	f7f9 fb70 	bl	800d260 <chThdCreateStatic>
	chThdCreateStatic(serial_write_thread_wa, sizeof(serial_write_thread_wa), NORMALPRIO, serial_write_thread, NULL);
 8013b80:	9400      	str	r4, [sp, #0]
 8013b82:	4b09      	ldr	r3, [pc, #36]	; (8013ba8 <comm_usb_init+0x58>)
 8013b84:	4809      	ldr	r0, [pc, #36]	; (8013bac <comm_usb_init+0x5c>)
 8013b86:	2240      	movs	r2, #64	; 0x40
 8013b88:	f44f 7166 	mov.w	r1, #920	; 0x398
 8013b8c:	f7f9 fb68 	bl	800d260 <chThdCreateStatic>
}
 8013b90:	b002      	add	sp, #8
 8013b92:	bd10      	pop	{r4, pc}
 8013b94:	200043bc 	.word	0x200043bc
 8013b98:	08013981 	.word	0x08013981
 8013b9c:	20005568 	.word	0x20005568
 8013ba0:	08013a81 	.word	0x08013a81
 8013ba4:	200043d0 	.word	0x200043d0
 8013ba8:	08013a01 	.word	0x08013a01
 8013bac:	20006910 	.word	0x20006910

08013bb0 <get_descriptor>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 8013bb0:	2902      	cmp	r1, #2
 8013bb2:	d006      	beq.n	8013bc2 <get_descriptor+0x12>
 8013bb4:	2903      	cmp	r1, #3
 8013bb6:	d006      	beq.n	8013bc6 <get_descriptor+0x16>
 8013bb8:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 8013bba:	4806      	ldr	r0, [pc, #24]	; (8013bd4 <get_descriptor+0x24>)
 8013bbc:	bf18      	it	ne
 8013bbe:	2000      	movne	r0, #0
 8013bc0:	4770      	bx	lr
		return &vcom_configuration_descriptor;
 8013bc2:	4805      	ldr	r0, [pc, #20]	; (8013bd8 <get_descriptor+0x28>)
 8013bc4:	4770      	bx	lr
		if (dindex < 4)
 8013bc6:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 8013bc8:	bf9a      	itte	ls
 8013bca:	4804      	ldrls	r0, [pc, #16]	; (8013bdc <get_descriptor+0x2c>)
 8013bcc:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
	return NULL;
 8013bd0:	2000      	movhi	r0, #0
}
 8013bd2:	4770      	bx	lr
 8013bd4:	08018110 	.word	0x08018110
 8013bd8:	080180b0 	.word	0x080180b0
 8013bdc:	080181d0 	.word	0x080181d0

08013be0 <usb_event>:
/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {

	switch (event) {
 8013be0:	2902      	cmp	r1, #2
 8013be2:	d115      	bne.n	8013c10 <usb_event+0x30>
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4605      	mov	r5, r0
 8013be8:	460c      	mov	r4, r1
 8013bea:	2320      	movs	r3, #32
 8013bec:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD2_DATA_REQUEST_EP, &ep1config);
 8013bf0:	4a08      	ldr	r2, [pc, #32]	; (8013c14 <usb_event+0x34>)
 8013bf2:	2101      	movs	r1, #1
 8013bf4:	f7fa facc 	bl	800e190 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD2_INTERRUPT_REQUEST_EP, &ep2config);
 8013bf8:	4621      	mov	r1, r4
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	4a06      	ldr	r2, [pc, #24]	; (8013c18 <usb_event+0x38>)
 8013bfe:	f7fa fac7 	bl	800e190 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 8013c02:	4806      	ldr	r0, [pc, #24]	; (8013c1c <usb_event+0x3c>)
 8013c04:	f7fa f99c 	bl	800df40 <sduConfigureHookI>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	f383 8811 	msr	BASEPRI, r3
		return;
	case USB_EVENT_STALLED:
		return;
	}
	return;
}
 8013c0e:	bd38      	pop	{r3, r4, r5, pc}
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop
 8013c14:	08018030 	.word	0x08018030
 8013c18:	08018060 	.word	0x08018060
 8013c1c:	20006ca8 	.word	0x20006ca8

08013c20 <comm_usb_serial_init>:
		USBD2_DATA_REQUEST_EP,
		USBD2_DATA_AVAILABLE_EP,
		USBD2_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
 8013c20:	b538      	push	{r3, r4, r5, lr}
	sduObjectInit(&SDU1);
 8013c22:	4d0e      	ldr	r5, [pc, #56]	; (8013c5c <comm_usb_serial_init+0x3c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8013c24:	4c0e      	ldr	r4, [pc, #56]	; (8013c60 <comm_usb_serial_init+0x40>)
	sduObjectInit(&SDU1);
 8013c26:	4628      	mov	r0, r5
 8013c28:	f7fa f942 	bl	800deb0 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 8013c2c:	490d      	ldr	r1, [pc, #52]	; (8013c64 <comm_usb_serial_init+0x44>)
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f7fa f966 	bl	800df00 <sduStart>
	usbDisconnectBus(serusbcfg.usbp);
 8013c34:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8013c36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013c38:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013c3c:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 8013c3e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8013c42:	f7f9 fb45 	bl	800d2d0 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 8013c46:	4620      	mov	r0, r4
 8013c48:	4907      	ldr	r1, [pc, #28]	; (8013c68 <comm_usb_serial_init+0x48>)
 8013c4a:	f7fa fa89 	bl	800e160 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 8013c4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8013c50:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c56:	6393      	str	r3, [r2, #56]	; 0x38
}
 8013c58:	bd38      	pop	{r3, r4, r5, pc}
 8013c5a:	bf00      	nop
 8013c5c:	20006ca8 	.word	0x20006ca8
 8013c60:	20001000 	.word	0x20001000
 8013c64:	08018090 	.word	0x08018090
 8013c68:	080180a0 	.word	0x080180a0
 8013c6c:	00000000 	.word	0x00000000

08013c70 <icuperiodcb>:
	}
}

static void icuperiodcb(ICUDriver *icup) {
	(void)icup;
}
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
	...

08013c80 <icuwidthcb>:
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 8013c80:	6903      	ldr	r3, [r0, #16]
 8013c82:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013d84 <icuwidthcb+0x104>
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	493f      	ldr	r1, [pc, #252]	; (8013d88 <icuwidthcb+0x108>)
	float len = last_len_received[0] - pulse_start;
 8013c8a:	4a40      	ldr	r2, [pc, #256]	; (8013d8c <icuwidthcb+0x10c>)
	const float len_set = (pulse_end - pulse_start);
 8013c8c:	4840      	ldr	r0, [pc, #256]	; (8013d90 <icuwidthcb+0x110>)
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 8013c8e:	3301      	adds	r3, #1
 8013c90:	ee07 3a90 	vmov	s15, r3
 8013c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013c9c:	ed81 7a00 	vstr	s14, [r1]
	float len = last_len_received[0] - pulse_start;
 8013ca0:	edd1 7a00 	vldr	s15, [r1]
 8013ca4:	ed92 6a00 	vldr	s12, [r2]
	const float len_set = (pulse_end - pulse_start);
 8013ca8:	ed90 7a00 	vldr	s14, [r0]
 8013cac:	edd2 6a00 	vldr	s13, [r2]
	float len = last_len_received[0] - pulse_start;
 8013cb0:	ee77 7ac6 	vsub.f32	s15, s15, s12
	const float len_set = (pulse_end - pulse_start);
 8013cb4:	ee37 7a66 	vsub.f32	s14, s14, s13
	if (len > len_set) {
 8013cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc0:	dd30      	ble.n	8013d24 <icuwidthcb+0xa4>
		if (len < (len_set * 1.2)) {
 8013cc2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8013d94 <icuwidthcb+0x114>
 8013cc6:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013cca:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd2:	dd3c      	ble.n	8013d4e <icuwidthcb+0xce>
			len = len_set;
 8013cd4:	eef0 7a47 	vmov.f32	s15, s14
	if (len >= 0.0) {
 8013cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce0:	db4e      	blt.n	8013d80 <icuwidthcb+0x100>
 8013ce2:	ee77 7aa7 	vadd.f32	s15, s15, s15
static void icuwidthcb(ICUDriver *icup) {
 8013ce6:	b570      	push	{r4, r5, r6, lr}
		if (use_median_filter) {
 8013ce8:	4b2b      	ldr	r3, [pc, #172]	; (8013d98 <icuwidthcb+0x118>)
 8013cea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cee:	781b      	ldrb	r3, [r3, #0]
static void icuwidthcb(ICUDriver *icup) {
 8013cf0:	ed2d 8b02 	vpush	{d8}
 8013cf4:	ee87 8a87 	vdiv.f32	s16, s15, s14
		if (use_median_filter) {
 8013cf8:	bb53      	cbnz	r3, 8013d50 <icuwidthcb+0xd0>
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
 8013cfa:	4b28      	ldr	r3, [pc, #160]	; (8013d9c <icuwidthcb+0x11c>)
 8013cfc:	ed83 8a00 	vstr	s16, [r3]
 8013d00:	2320      	movs	r3, #32
 8013d02:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.vt_systime;
 8013d06:	4a26      	ldr	r2, [pc, #152]	; (8013da0 <icuwidthcb+0x120>)
 8013d08:	2300      	movs	r3, #0
 8013d0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8013d0c:	f383 8811 	msr	BASEPRI, r3
		if (done_func) {
 8013d10:	4b24      	ldr	r3, [pc, #144]	; (8013da4 <icuwidthcb+0x124>)
		last_update_time = chVTGetSystemTime();
 8013d12:	4a25      	ldr	r2, [pc, #148]	; (8013da8 <icuwidthcb+0x128>)
		if (done_func) {
 8013d14:	681b      	ldr	r3, [r3, #0]
		last_update_time = chVTGetSystemTime();
 8013d16:	6011      	str	r1, [r2, #0]
		if (done_func) {
 8013d18:	b363      	cbz	r3, 8013d74 <icuwidthcb+0xf4>
}
 8013d1a:	ecbd 8b02 	vpop	{d8}
 8013d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			done_func();
 8013d22:	4718      	bx	r3
	} else if (len < 0.0) {
 8013d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d2c:	d5d4      	bpl.n	8013cd8 <icuwidthcb+0x58>
		if ((len + pulse_start) > (pulse_start * 0.8)) {
 8013d2e:	ed92 6a00 	vldr	s12, [r2]
 8013d32:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8013dac <icuwidthcb+0x12c>
 8013d36:	edd2 6a00 	vldr	s13, [r2]
 8013d3a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013d3e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8013d42:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4a:	dc16      	bgt.n	8013d7a <icuwidthcb+0xfa>
 8013d4c:	4770      	bx	lr
 8013d4e:	4770      	bx	lr
			float med = utils_middle_of_3(c, c1, c2);
 8013d50:	4c17      	ldr	r4, [pc, #92]	; (8013db0 <icuwidthcb+0x130>)
 8013d52:	4d18      	ldr	r5, [pc, #96]	; (8013db4 <icuwidthcb+0x134>)
 8013d54:	edd4 0a00 	vldr	s1, [r4]
 8013d58:	ed95 1a00 	vldr	s2, [r5]
 8013d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8013d60:	f000 fac6 	bl	80142f0 <utils_middle_of_3>
			servo_pos[0] = med;
 8013d64:	4b0d      	ldr	r3, [pc, #52]	; (8013d9c <icuwidthcb+0x11c>)
			c2 = c1;
 8013d66:	6822      	ldr	r2, [r4, #0]
 8013d68:	602a      	str	r2, [r5, #0]
			c1 = c;
 8013d6a:	ed84 8a00 	vstr	s16, [r4]
			servo_pos[0] = med;
 8013d6e:	ed83 0a00 	vstr	s0, [r3]
 8013d72:	e7c5      	b.n	8013d00 <icuwidthcb+0x80>
}
 8013d74:	ecbd 8b02 	vpop	{d8}
 8013d78:	bd70      	pop	{r4, r5, r6, pc}
 8013d7a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013db8 <icuwidthcb+0x138>
 8013d7e:	e7b2      	b.n	8013ce6 <icuwidthcb+0x66>
 8013d80:	4770      	bx	lr
 8013d82:	bf00      	nop
 8013d84:	447a0000 	.word	0x447a0000
 8013d88:	20006f40 	.word	0x20006f40
 8013d8c:	2000083c 	.word	0x2000083c
 8013d90:	20000838 	.word	0x20000838
 8013d94:	3f99999a 	.word	0x3f99999a
 8013d98:	20006f4c 	.word	0x20006f4c
 8013d9c:	20006f48 	.word	0x20006f48
 8013da0:	20000c90 	.word	0x20000c90
 8013da4:	20006f3c 	.word	0x20006f3c
 8013da8:	20006f44 	.word	0x20006f44
 8013dac:	3f4ccccd 	.word	0x3f4ccccd
 8013db0:	20000814 	.word	0x20000814
 8013db4:	20000818 	.word	0x20000818
	...

08013dc0 <servodec_init>:
 *
 * @param d_func
 * A function that should be called every time the servo signals have been
 * decoded. Can be NULL.
 */
void servodec_init(void (*d_func)(void)) {
 8013dc0:	b538      	push	{r3, r4, r5, lr}
	icuStart(&HW_ICU_DEV, &icucfg);
 8013dc2:	4c0d      	ldr	r4, [pc, #52]	; (8013df8 <servodec_init+0x38>)
 8013dc4:	490d      	ldr	r1, [pc, #52]	; (8013dfc <servodec_init+0x3c>)
void servodec_init(void (*d_func)(void)) {
 8013dc6:	4605      	mov	r5, r0
	icuStart(&HW_ICU_DEV, &icucfg);
 8013dc8:	4620      	mov	r0, r4
 8013dca:	f7f9 ff91 	bl	800dcf0 <icuStart>
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
 8013dce:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013dd2:	2120      	movs	r1, #32
 8013dd4:	480a      	ldr	r0, [pc, #40]	; (8013e00 <servodec_init+0x40>)
 8013dd6:	f7fb fab3 	bl	800f340 <_pal_lld_setgroupmode>
	icuStartCapture(&HW_ICU_DEV);
 8013dda:	4620      	mov	r0, r4
 8013ddc:	f7f9 ff98 	bl	800dd10 <icuStartCapture>
	icuEnableNotifications(&HW_ICU_DEV);
 8013de0:	4620      	mov	r0, r4
 8013de2:	f7f9 ffa5 	bl	800dd30 <icuEnableNotifications>
		servo_pos[i] = 0.0;
		last_len_received[i] = 0.0;
	}

	// Set our function pointer
	done_func = d_func;
 8013de6:	4807      	ldr	r0, [pc, #28]	; (8013e04 <servodec_init+0x44>)
		servo_pos[i] = 0.0;
 8013de8:	4907      	ldr	r1, [pc, #28]	; (8013e08 <servodec_init+0x48>)
		last_len_received[i] = 0.0;
 8013dea:	4a08      	ldr	r2, [pc, #32]	; (8013e0c <servodec_init+0x4c>)
	done_func = d_func;
 8013dec:	6005      	str	r5, [r0, #0]
		servo_pos[i] = 0.0;
 8013dee:	2300      	movs	r3, #0
 8013df0:	600b      	str	r3, [r1, #0]
		last_len_received[i] = 0.0;
 8013df2:	6013      	str	r3, [r2, #0]
}
 8013df4:	bd38      	pop	{r3, r4, r5, pc}
 8013df6:	bf00      	nop
 8013df8:	200012d0 	.word	0x200012d0
 8013dfc:	2000081c 	.word	0x2000081c
 8013e00:	40020400 	.word	0x40020400
 8013e04:	20006f3c 	.word	0x20006f3c
 8013e08:	20006f48 	.word	0x20006f48
 8013e0c:	20006f40 	.word	0x20006f40

08013e10 <servodec_set_pulse_options>:
 *
 * @param end
 * he amount of milliseconds the pulse ends at (default is 2.0)
 */
void servodec_set_pulse_options(float start, float end, bool median_filter) {
	pulse_start = start;
 8013e10:	4904      	ldr	r1, [pc, #16]	; (8013e24 <servodec_set_pulse_options+0x14>)
	pulse_end = end;
 8013e12:	4a05      	ldr	r2, [pc, #20]	; (8013e28 <servodec_set_pulse_options+0x18>)
	use_median_filter = median_filter;
 8013e14:	4b05      	ldr	r3, [pc, #20]	; (8013e2c <servodec_set_pulse_options+0x1c>)
	pulse_start = start;
 8013e16:	ed81 0a00 	vstr	s0, [r1]
	pulse_end = end;
 8013e1a:	edc2 0a00 	vstr	s1, [r2]
	use_median_filter = median_filter;
 8013e1e:	7018      	strb	r0, [r3, #0]
}
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop
 8013e24:	2000083c 	.word	0x2000083c
 8013e28:	20000838 	.word	0x20000838
 8013e2c:	20006f4c 	.word	0x20006f4c

08013e30 <servodec_get_time_since_update>:
 8013e30:	4b04      	ldr	r3, [pc, #16]	; (8013e44 <servodec_get_time_since_update+0x14>)
 *
 * @return
 * The amount of milliseconds that have passed since an update.
 */
uint32_t servodec_get_time_since_update(void) {
	return chVTTimeElapsedSinceX(last_update_time) / (CH_CFG_ST_FREQUENCY / 1000);
 8013e32:	4a05      	ldr	r2, [pc, #20]	; (8013e48 <servodec_get_time_since_update+0x18>)
 8013e34:	6812      	ldr	r2, [r2, #0]
 8013e36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8013e38:	4b04      	ldr	r3, [pc, #16]	; (8013e4c <servodec_get_time_since_update+0x1c>)
  return chVTGetSystemTimeX() - start;
 8013e3a:	1a80      	subs	r0, r0, r2
 8013e3c:	fba3 3000 	umull	r3, r0, r3, r0
}
 8013e40:	08c0      	lsrs	r0, r0, #3
 8013e42:	4770      	bx	lr
 8013e44:	20000c90 	.word	0x20000c90
 8013e48:	20006f44 	.word	0x20006f44
 8013e4c:	cccccccd 	.word	0xcccccccd

08013e50 <ledpwm_init>:

// Private variables
static volatile int led_values[LEDPWM_LED_NUM];
static uint8_t gamma_table[LEDPWM_CNT_TOP + 1];

void ledpwm_init(void) {
 8013e50:	b570      	push	{r4, r5, r6, lr}
	memset((int*)led_values, 0, sizeof(led_values));
 8013e52:	4b14      	ldr	r3, [pc, #80]	; (8013ea4 <ledpwm_init+0x54>)
 8013e54:	4d14      	ldr	r5, [pc, #80]	; (8013ea8 <ledpwm_init+0x58>)
void ledpwm_init(void) {
 8013e56:	ed2d 8b02 	vpush	{d8}
	memset((int*)led_values, 0, sizeof(led_values));
 8013e5a:	2200      	movs	r2, #0

	// Generate gamma correction table
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 8013e5c:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8013eac <ledpwm_init+0x5c>
 8013e60:	eddf 8a13 	vldr	s17, [pc, #76]	; 8013eb0 <ledpwm_init+0x60>
	memset((int*)led_values, 0, sizeof(led_values));
 8013e64:	601a      	str	r2, [r3, #0]
 8013e66:	f105 06c9 	add.w	r6, r5, #201	; 0xc9
 8013e6a:	605a      	str	r2, [r3, #4]
 8013e6c:	462c      	mov	r4, r5
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 8013e6e:	1b63      	subs	r3, r4, r5
 8013e70:	ee00 3a10 	vmov	s0, r3
 8013e74:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013e78:	eef0 0a68 	vmov.f32	s1, s17
 8013e7c:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8013e80:	f002 fc16 	bl	80166b0 <powf>
 8013e84:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013e88:	f002 fdea 	bl	8016a60 <roundf>
 8013e8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013e90:	ee17 3a90 	vmov	r3, s15
 8013e94:	f804 3b01 	strb.w	r3, [r4], #1
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
 8013e98:	42b4      	cmp	r4, r6
 8013e9a:	d1e8      	bne.n	8013e6e <ledpwm_init+0x1e>
	}
}
 8013e9c:	ecbd 8b02 	vpop	{d8}
 8013ea0:	bd70      	pop	{r4, r5, r6, pc}
 8013ea2:	bf00      	nop
 8013ea4:	2000701c 	.word	0x2000701c
 8013ea8:	20006f50 	.word	0x20006f50
 8013eac:	43480000 	.word	0x43480000
 8013eb0:	400e38e4 	.word	0x400e38e4
	...

08013ec0 <EE_VerifyPageFullWriteVariable>:
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8013ec0:	b538      	push	{r3, r4, r5, lr}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8013ec2:	4a1b      	ldr	r2, [pc, #108]	; (8013f30 <EE_VerifyPageFullWriteVariable+0x70>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8013ec4:	4b1b      	ldr	r3, [pc, #108]	; (8013f34 <EE_VerifyPageFullWriteVariable+0x74>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8013ec6:	8812      	ldrh	r2, [r2, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8013ec8:	881b      	ldrh	r3, [r3, #0]
 8013eca:	b29c      	uxth	r4, r3
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8013ecc:	b292      	uxth	r2, r2
		if (PageStatus1 == VALID_PAGE)
 8013ece:	b9ec      	cbnz	r4, 8013f0c <EE_VerifyPageFullWriteVariable+0x4c>
			if (PageStatus0 == RECEIVE_DATA)
 8013ed0:	f64e 63ee 	movw	r3, #61166	; 0xeeee
				return PAGE0;         /* Page0 valid */
 8013ed4:	1ad3      	subs	r3, r2, r3
 8013ed6:	bf18      	it	ne
 8013ed8:	2301      	movne	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8013eda:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8013ede:	4a16      	ldr	r2, [pc, #88]	; (8013f38 <EE_VerifyPageFullWriteVariable+0x78>)
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8013ee0:	3401      	adds	r4, #1
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8013ee2:	3301      	adds	r3, #1
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8013ee4:	03a4      	lsls	r4, r4, #14
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8013ee6:	eb02 3283 	add.w	r2, r2, r3, lsl #14

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 8013eea:	4294      	cmp	r4, r2
 8013eec:	d303      	bcc.n	8013ef6 <EE_VerifyPageFullWriteVariable+0x36>
 8013eee:	e015      	b.n	8013f1c <EE_VerifyPageFullWriteVariable+0x5c>
			return FlashStatus;
		}
		else
		{
			/* Next address location */
			Address = Address + 4;
 8013ef0:	3404      	adds	r4, #4
	while (Address < PageEndAddress)
 8013ef2:	42a2      	cmp	r2, r4
 8013ef4:	d912      	bls.n	8013f1c <EE_VerifyPageFullWriteVariable+0x5c>
		if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	3301      	adds	r3, #1
 8013efa:	d1f9      	bne.n	8013ef0 <EE_VerifyPageFullWriteVariable+0x30>
 8013efc:	4605      	mov	r5, r0
			FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 8013efe:	4620      	mov	r0, r4
 8013f00:	f001 fee6 	bl	8015cd0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 8013f04:	2809      	cmp	r0, #9
 8013f06:	d00d      	beq.n	8013f24 <EE_VerifyPageFullWriteVariable+0x64>
			return FlashStatus;
 8013f08:	b280      	uxth	r0, r0
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
}
 8013f0a:	bd38      	pop	{r3, r4, r5, pc}
		else if (PageStatus0 == VALID_PAGE)
 8013f0c:	b942      	cbnz	r2, 8013f20 <EE_VerifyPageFullWriteVariable+0x60>
			if (PageStatus1 == RECEIVE_DATA)
 8013f0e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
				return PAGE0;         /* Page0 valid */
 8013f12:	1ae3      	subs	r3, r4, r3
 8013f14:	fab3 f383 	clz	r3, r3
 8013f18:	095b      	lsrs	r3, r3, #5
 8013f1a:	e7de      	b.n	8013eda <EE_VerifyPageFullWriteVariable+0x1a>
	return PAGE_FULL;
 8013f1c:	2080      	movs	r0, #128	; 0x80
}
 8013f1e:	bd38      	pop	{r3, r4, r5, pc}
		return  NO_VALID_PAGE;
 8013f20:	20ab      	movs	r0, #171	; 0xab
}
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8013f24:	4629      	mov	r1, r5
 8013f26:	1ca0      	adds	r0, r4, #2
 8013f28:	f001 fed2 	bl	8015cd0 <FLASH_ProgramHalfWord>
 8013f2c:	e7ec      	b.n	8013f08 <EE_VerifyPageFullWriteVariable+0x48>
 8013f2e:	bf00      	nop
 8013f30:	08004000 	.word	0x08004000
 8013f34:	08008000 	.word	0x08008000
 8013f38:	08003ffe 	.word	0x08003ffe
 8013f3c:	00000000 	.word	0x00000000

08013f40 <EE_EraseSectorIfNotEmpty.constprop.1>:

/*
 * Erase flash page if it is not already erased. This is to save write cycles and
 * prevent the memory from getting erased in case of unstable voltage at boot.
 */
static uint16_t EE_EraseSectorIfNotEmpty(uint32_t FLASH_Sector, uint8_t VoltageRange) {
 8013f40:	b510      	push	{r4, lr}
 8013f42:	4604      	mov	r4, r0
	uint8_t *addr = flash_helper_get_sector_address(FLASH_Sector);
 8013f44:	f000 f964 	bl	8014210 <flash_helper_get_sector_address>
 8013f48:	f500 527f 	add.w	r2, r0, #16320	; 0x3fc0
 8013f4c:	323f      	adds	r2, #63	; 0x3f
 8013f4e:	3801      	subs	r0, #1
 8013f50:	e001      	b.n	8013f56 <EE_EraseSectorIfNotEmpty.constprop.1+0x16>

	for (unsigned int i = 0;i < PAGE_SIZE;i++) {
 8013f52:	4290      	cmp	r0, r2
 8013f54:	d009      	beq.n	8013f6a <EE_EraseSectorIfNotEmpty.constprop.1+0x2a>
		if (addr[i] != 0xFF) {
 8013f56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013f5a:	2bff      	cmp	r3, #255	; 0xff
 8013f5c:	d0f9      	beq.n	8013f52 <EE_EraseSectorIfNotEmpty.constprop.1+0x12>
			return FLASH_EraseSector(FLASH_Sector, VoltageRange);
 8013f5e:	4620      	mov	r0, r4
 8013f60:	2102      	movs	r1, #2
 8013f62:	f001 fe75 	bl	8015c50 <FLASH_EraseSector>
 8013f66:	b280      	uxth	r0, r0
		}
	}

	return FLASH_COMPLETE;
}
 8013f68:	bd10      	pop	{r4, pc}
	return FLASH_COMPLETE;
 8013f6a:	2009      	movs	r0, #9
}
 8013f6c:	bd10      	pop	{r4, pc}
 8013f6e:	bf00      	nop

08013f70 <EE_Format>:
{
 8013f70:	b508      	push	{r3, lr}
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 8013f72:	2008      	movs	r0, #8
 8013f74:	f7ff ffe4 	bl	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
 8013f78:	b2c0      	uxtb	r0, r0
	if (FlashStatus != FLASH_COMPLETE)
 8013f7a:	2809      	cmp	r0, #9
 8013f7c:	d000      	beq.n	8013f80 <EE_Format+0x10>
}
 8013f7e:	bd08      	pop	{r3, pc}
	FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8013f80:	2100      	movs	r1, #0
 8013f82:	4805      	ldr	r0, [pc, #20]	; (8013f98 <EE_Format+0x28>)
 8013f84:	f001 fea4 	bl	8015cd0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 8013f88:	2809      	cmp	r0, #9
 8013f8a:	d1f8      	bne.n	8013f7e <EE_Format+0xe>
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8013f8c:	2010      	movs	r0, #16
 8013f8e:	f7ff ffd7 	bl	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
 8013f92:	b2c0      	uxtb	r0, r0
}
 8013f94:	bd08      	pop	{r3, pc}
 8013f96:	bf00      	nop
 8013f98:	08004000 	.word	0x08004000
 8013f9c:	00000000 	.word	0x00000000

08013fa0 <EE_ReadVariable>:
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8013fa0:	4b14      	ldr	r3, [pc, #80]	; (8013ff4 <EE_ReadVariable+0x54>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8013fa2:	4a15      	ldr	r2, [pc, #84]	; (8013ff8 <EE_ReadVariable+0x58>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8013fa4:	881b      	ldrh	r3, [r3, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8013fa6:	8812      	ldrh	r2, [r2, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8013fa8:	b29b      	uxth	r3, r3
{
 8013faa:	b410      	push	{r4}
		if (PageStatus0 == VALID_PAGE)
 8013fac:	b12b      	cbz	r3, 8013fba <EE_ReadVariable+0x1a>
 8013fae:	b292      	uxth	r2, r2
		else if (PageStatus1 == VALID_PAGE)
 8013fb0:	b9da      	cbnz	r2, 8013fea <EE_ReadVariable+0x4a>
 8013fb2:	4b12      	ldr	r3, [pc, #72]	; (8013ffc <EE_ReadVariable+0x5c>)
 8013fb4:	4c12      	ldr	r4, [pc, #72]	; (8014000 <EE_ReadVariable+0x60>)
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	e002      	b.n	8013fc0 <EE_ReadVariable+0x20>
		if (PageStatus0 == VALID_PAGE)
 8013fba:	4b12      	ldr	r3, [pc, #72]	; (8014004 <EE_ReadVariable+0x64>)
 8013fbc:	4c12      	ldr	r4, [pc, #72]	; (8014008 <EE_ReadVariable+0x68>)
 8013fbe:	461a      	mov	r2, r3
		AddressValue = (*(__IO uint16_t*)Address);
 8013fc0:	8812      	ldrh	r2, [r2, #0]
		if (AddressValue == VirtAddress)
 8013fc2:	4290      	cmp	r0, r2
 8013fc4:	d103      	bne.n	8013fce <EE_ReadVariable+0x2e>
 8013fc6:	e009      	b.n	8013fdc <EE_ReadVariable+0x3c>
		AddressValue = (*(__IO uint16_t*)Address);
 8013fc8:	881a      	ldrh	r2, [r3, #0]
		if (AddressValue == VirtAddress)
 8013fca:	4290      	cmp	r0, r2
 8013fcc:	d006      	beq.n	8013fdc <EE_ReadVariable+0x3c>
			Address = Address - 4;
 8013fce:	3b04      	subs	r3, #4
	while (Address > (PageStartAddress + 2))
 8013fd0:	42a3      	cmp	r3, r4
 8013fd2:	d8f9      	bhi.n	8013fc8 <EE_ReadVariable+0x28>
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8013fd4:	2001      	movs	r0, #1
}
 8013fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fda:	4770      	bx	lr
			*Data = (*(__IO uint16_t*)(Address - 2));
 8013fdc:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8013fe0:	800b      	strh	r3, [r1, #0]
			ReadStatus = 0;
 8013fe2:	2000      	movs	r0, #0
}
 8013fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fe8:	4770      	bx	lr
		return  NO_VALID_PAGE;
 8013fea:	20ab      	movs	r0, #171	; 0xab
}
 8013fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	08004000 	.word	0x08004000
 8013ff8:	08008000 	.word	0x08008000
 8013ffc:	0800bffe 	.word	0x0800bffe
 8014000:	08008002 	.word	0x08008002
 8014004:	08007ffe 	.word	0x08007ffe
 8014008:	08004002 	.word	0x08004002
 801400c:	00000000 	.word	0x00000000

08014010 <EE_Init>:
{
 8014010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8014014:	4d47      	ldr	r5, [pc, #284]	; (8014134 <EE_Init+0x124>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8014016:	4e48      	ldr	r6, [pc, #288]	; (8014138 <EE_Init+0x128>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8014018:	882c      	ldrh	r4, [r5, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801401a:	8833      	ldrh	r3, [r6, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801401c:	b2a4      	uxth	r4, r4
	switch (PageStatus0)
 801401e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8014022:	4294      	cmp	r4, r2
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8014024:	b29b      	uxth	r3, r3
	switch (PageStatus0)
 8014026:	d048      	beq.n	80140ba <EE_Init+0xaa>
 8014028:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801402c:	428c      	cmp	r4, r1
 801402e:	d035      	beq.n	801409c <EE_Init+0x8c>
 8014030:	b124      	cbz	r4, 801403c <EE_Init+0x2c>
		FlashStatus = EE_Format();
 8014032:	f7ff ff9d 	bl	8013f70 <EE_Format>
 8014036:	b280      	uxth	r0, r0
}
 8014038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801403c:	2b00      	cmp	r3, #0
 801403e:	d0f8      	beq.n	8014032 <EE_Init+0x22>
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8014040:	428b      	cmp	r3, r1
 8014042:	d062      	beq.n	801410a <EE_Init+0xfa>
 8014044:	4d3d      	ldr	r5, [pc, #244]	; (801413c <EE_Init+0x12c>)
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8014046:	4f3e      	ldr	r7, [pc, #248]	; (8014140 <EE_Init+0x130>)
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8014048:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8014144 <EE_Init+0x134>
	int16_t x = -1;
 801404c:	f04f 36ff 	mov.w	r6, #4294967295
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8014050:	f835 3b02 	ldrh.w	r3, [r5], #2
 8014054:	883a      	ldrh	r2, [r7, #0]
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8014056:	493b      	ldr	r1, [pc, #236]	; (8014144 <EE_Init+0x134>)
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8014058:	4293      	cmp	r3, r2
					x = VarIdx;
 801405a:	bf08      	it	eq
 801405c:	b226      	sxtheq	r6, r4
				if (VarIdx != x)
 801405e:	42b4      	cmp	r4, r6
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8014060:	4618      	mov	r0, r3
 8014062:	f104 0401 	add.w	r4, r4, #1
				if (VarIdx != x)
 8014066:	d00b      	beq.n	8014080 <EE_Init+0x70>
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8014068:	f7ff ff9a 	bl	8013fa0 <EE_ReadVariable>
					if (ReadStatus != 0x1)
 801406c:	2801      	cmp	r0, #1
 801406e:	d007      	beq.n	8014080 <EE_Init+0x70>
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8014070:	f8b8 1000 	ldrh.w	r1, [r8]
 8014074:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 8014078:	f7ff ff22 	bl	8013ec0 <EE_VerifyPageFullWriteVariable>
						if (EepromStatus != FLASH_COMPLETE)
 801407c:	2809      	cmp	r0, #9
 801407e:	d1db      	bne.n	8014038 <EE_Init+0x28>
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8014080:	2ca0      	cmp	r4, #160	; 0xa0
 8014082:	d1e5      	bne.n	8014050 <EE_Init+0x40>
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8014084:	2100      	movs	r1, #0
 8014086:	482c      	ldr	r0, [pc, #176]	; (8014138 <EE_Init+0x128>)
 8014088:	f001 fe22 	bl	8015cd0 <FLASH_ProgramHalfWord>
 801408c:	b280      	uxth	r0, r0
			if (FlashStatus != FLASH_COMPLETE)
 801408e:	2809      	cmp	r0, #9
 8014090:	d1d2      	bne.n	8014038 <EE_Init+0x28>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 8014092:	2008      	movs	r0, #8
}
 8014094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 8014098:	f7ff bf52 	b.w	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
		if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801409c:	2b00      	cmp	r3, #0
 801409e:	d0f8      	beq.n	8014092 <EE_Init+0x82>
		else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d1c6      	bne.n	8014032 <EE_Init+0x22>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80140a4:	2008      	movs	r0, #8
 80140a6:	f7ff ff4b 	bl	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
 80140aa:	2809      	cmp	r0, #9
 80140ac:	d1c4      	bne.n	8014038 <EE_Init+0x28>
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80140ae:	4630      	mov	r0, r6
 80140b0:	2100      	movs	r1, #0
 80140b2:	f001 fe0d 	bl	8015cd0 <FLASH_ProgramHalfWord>
 80140b6:	b280      	uxth	r0, r0
 80140b8:	e7be      	b.n	8014038 <EE_Init+0x28>
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80140ba:	bb5b      	cbnz	r3, 8014114 <EE_Init+0x104>
 80140bc:	4d1f      	ldr	r5, [pc, #124]	; (801413c <EE_Init+0x12c>)
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80140be:	4e22      	ldr	r6, [pc, #136]	; (8014148 <EE_Init+0x138>)
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80140c0:	4f20      	ldr	r7, [pc, #128]	; (8014144 <EE_Init+0x134>)
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80140c2:	461c      	mov	r4, r3
	int16_t x = -1;
 80140c4:	f04f 38ff 	mov.w	r8, #4294967295
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80140c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80140cc:	8832      	ldrh	r2, [r6, #0]
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80140ce:	491d      	ldr	r1, [pc, #116]	; (8014144 <EE_Init+0x134>)
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80140d0:	4293      	cmp	r3, r2
					x = VarIdx;
 80140d2:	bf08      	it	eq
 80140d4:	fa0f f884 	sxtheq.w	r8, r4
				if (VarIdx != x)
 80140d8:	4544      	cmp	r4, r8
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80140da:	4618      	mov	r0, r3
 80140dc:	f104 0401 	add.w	r4, r4, #1
				if (VarIdx != x)
 80140e0:	d00a      	beq.n	80140f8 <EE_Init+0xe8>
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80140e2:	f7ff ff5d 	bl	8013fa0 <EE_ReadVariable>
					if (ReadStatus != 0x1)
 80140e6:	2801      	cmp	r0, #1
 80140e8:	d006      	beq.n	80140f8 <EE_Init+0xe8>
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80140ea:	8839      	ldrh	r1, [r7, #0]
 80140ec:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 80140f0:	f7ff fee6 	bl	8013ec0 <EE_VerifyPageFullWriteVariable>
						if (EepromStatus != FLASH_COMPLETE)
 80140f4:	2809      	cmp	r0, #9
 80140f6:	d19f      	bne.n	8014038 <EE_Init+0x28>
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80140f8:	2ca0      	cmp	r4, #160	; 0xa0
 80140fa:	d1e5      	bne.n	80140c8 <EE_Init+0xb8>
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80140fc:	2100      	movs	r1, #0
 80140fe:	480d      	ldr	r0, [pc, #52]	; (8014134 <EE_Init+0x124>)
 8014100:	f001 fde6 	bl	8015cd0 <FLASH_ProgramHalfWord>
 8014104:	b280      	uxth	r0, r0
			if (FlashStatus != FLASH_COMPLETE)
 8014106:	2809      	cmp	r0, #9
 8014108:	d196      	bne.n	8014038 <EE_Init+0x28>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 801410a:	2010      	movs	r0, #16
}
 801410c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8014110:	f7ff bf16 	b.w	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
		else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8014114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014118:	4293      	cmp	r3, r2
 801411a:	d18a      	bne.n	8014032 <EE_Init+0x22>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 801411c:	2010      	movs	r0, #16
 801411e:	f7ff ff0f 	bl	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
 8014122:	2809      	cmp	r0, #9
 8014124:	d188      	bne.n	8014038 <EE_Init+0x28>
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8014126:	4628      	mov	r0, r5
 8014128:	2100      	movs	r1, #0
 801412a:	f001 fdd1 	bl	8015cd0 <FLASH_ProgramHalfWord>
 801412e:	b280      	uxth	r0, r0
 8014130:	e782      	b.n	8014038 <EE_Init+0x28>
 8014132:	bf00      	nop
 8014134:	08004000 	.word	0x08004000
 8014138:	08008000 	.word	0x08008000
 801413c:	2000133c 	.word	0x2000133c
 8014140:	08008006 	.word	0x08008006
 8014144:	20007024 	.word	0x20007024
 8014148:	08004006 	.word	0x08004006
 801414c:	00000000 	.word	0x00000000

08014150 <EE_WriteVariable>:
{
 8014150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014154:	4606      	mov	r6, r0
 8014156:	460d      	mov	r5, r1
	Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8014158:	f7ff feb2 	bl	8013ec0 <EE_VerifyPageFullWriteVariable>
	if (Status == PAGE_FULL)
 801415c:	2880      	cmp	r0, #128	; 0x80
	Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801415e:	4604      	mov	r4, r0
	if (Status == PAGE_FULL)
 8014160:	d002      	beq.n	8014168 <EE_WriteVariable+0x18>
}
 8014162:	4620      	mov	r0, r4
 8014164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8014168:	4925      	ldr	r1, [pc, #148]	; (8014200 <EE_WriteVariable+0xb0>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801416a:	4f26      	ldr	r7, [pc, #152]	; (8014204 <EE_WriteVariable+0xb4>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801416c:	880b      	ldrh	r3, [r1, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801416e:	883a      	ldrh	r2, [r7, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8014170:	b29b      	uxth	r3, r3
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8014172:	b292      	uxth	r2, r2
		if (PageStatus0 == VALID_PAGE)
 8014174:	b173      	cbz	r3, 8014194 <EE_WriteVariable+0x44>
		else if (PageStatus1 == VALID_PAGE)
 8014176:	b982      	cbnz	r2, 801419a <EE_WriteVariable+0x4a>
		NewPageAddress = PAGE0_BASE_ADDRESS;
 8014178:	460f      	mov	r7, r1
		OldPageId = PAGE1_ID;
 801417a:	f04f 0810 	mov.w	r8, #16
	FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 801417e:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8014182:	4638      	mov	r0, r7
 8014184:	f001 fda4 	bl	8015cd0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 8014188:	2809      	cmp	r0, #9
 801418a:	d008      	beq.n	801419e <EE_WriteVariable+0x4e>
		return FlashStatus;
 801418c:	b284      	uxth	r4, r0
}
 801418e:	4620      	mov	r0, r4
 8014190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		OldPageId = PAGE0_ID;
 8014194:	f04f 0808 	mov.w	r8, #8
 8014198:	e7f1      	b.n	801417e <EE_WriteVariable+0x2e>
		return NO_VALID_PAGE;       /* No valid Page */
 801419a:	24ab      	movs	r4, #171	; 0xab
 801419c:	e7e1      	b.n	8014162 <EE_WriteVariable+0x12>
	EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801419e:	4629      	mov	r1, r5
 80141a0:	4630      	mov	r0, r6
 80141a2:	f7ff fe8d 	bl	8013ec0 <EE_VerifyPageFullWriteVariable>
	if (EepromStatus != FLASH_COMPLETE)
 80141a6:	2809      	cmp	r0, #9
	EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80141a8:	4604      	mov	r4, r0
	if (EepromStatus != FLASH_COMPLETE)
 80141aa:	d1da      	bne.n	8014162 <EE_WriteVariable+0x12>
 80141ac:	4d16      	ldr	r5, [pc, #88]	; (8014208 <EE_WriteVariable+0xb8>)
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80141ae:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801420c <EE_WriteVariable+0xbc>
 80141b2:	f505 79a0 	add.w	r9, r5, #320	; 0x140
 80141b6:	e001      	b.n	80141bc <EE_WriteVariable+0x6c>
	for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80141b8:	454d      	cmp	r5, r9
 80141ba:	d013      	beq.n	80141e4 <EE_WriteVariable+0x94>
		if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80141bc:	f835 3b02 	ldrh.w	r3, [r5], #2
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80141c0:	4912      	ldr	r1, [pc, #72]	; (801420c <EE_WriteVariable+0xbc>)
		if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80141c2:	429e      	cmp	r6, r3
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80141c4:	4618      	mov	r0, r3
		if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80141c6:	d0f7      	beq.n	80141b8 <EE_WriteVariable+0x68>
			ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80141c8:	f7ff feea 	bl	8013fa0 <EE_ReadVariable>
			if (ReadStatus != 0x1)
 80141cc:	2801      	cmp	r0, #1
 80141ce:	d0f3      	beq.n	80141b8 <EE_WriteVariable+0x68>
				EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80141d0:	f8ba 1000 	ldrh.w	r1, [sl]
 80141d4:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 80141d8:	f7ff fe72 	bl	8013ec0 <EE_VerifyPageFullWriteVariable>
				if (EepromStatus != FLASH_COMPLETE)
 80141dc:	2809      	cmp	r0, #9
 80141de:	d0eb      	beq.n	80141b8 <EE_WriteVariable+0x68>
 80141e0:	4604      	mov	r4, r0
 80141e2:	e7be      	b.n	8014162 <EE_WriteVariable+0x12>
	FlashStatus = EE_EraseSectorIfNotEmpty(OldPageId, VOLTAGE_RANGE);
 80141e4:	4640      	mov	r0, r8
 80141e6:	f7ff feab 	bl	8013f40 <EE_EraseSectorIfNotEmpty.constprop.1>
	if (FlashStatus != FLASH_COMPLETE)
 80141ea:	b2c0      	uxtb	r0, r0
 80141ec:	2809      	cmp	r0, #9
 80141ee:	d1cd      	bne.n	801418c <EE_WriteVariable+0x3c>
	FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 80141f0:	4638      	mov	r0, r7
 80141f2:	2100      	movs	r1, #0
 80141f4:	f001 fd6c 	bl	8015cd0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80141f8:	2809      	cmp	r0, #9
 80141fa:	d1c7      	bne.n	801418c <EE_WriteVariable+0x3c>
 80141fc:	e7b1      	b.n	8014162 <EE_WriteVariable+0x12>
 80141fe:	bf00      	nop
 8014200:	08004000 	.word	0x08004000
 8014204:	08008000 	.word	0x08008000
 8014208:	2000133c 	.word	0x2000133c
 801420c:	20007024 	.word	0x20007024

08014210 <flash_helper_get_sector_address>:

	// Jump to the bootloader
	jump_to_bootloader();
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
 8014210:	2200      	movs	r2, #0
 8014212:	4908      	ldr	r1, [pc, #32]	; (8014234 <flash_helper_get_sector_address+0x24>)
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 8014214:	4613      	mov	r3, r2
 8014216:	e001      	b.n	801421c <flash_helper_get_sector_address+0xc>
 8014218:	f831 2f02 	ldrh.w	r2, [r1, #2]!
		if (flash_sector[i] == fsector) {
 801421c:	4282      	cmp	r2, r0
 801421e:	d004      	beq.n	801422a <flash_helper_get_sector_address+0x1a>
	for (int i = 0;i < FLASH_SECTORS;i++) {
 8014220:	3301      	adds	r3, #1
 8014222:	2b0c      	cmp	r3, #12
 8014224:	d1f8      	bne.n	8014218 <flash_helper_get_sector_address+0x8>
	uint8_t *res = 0;
 8014226:	2000      	movs	r0, #0
			break;
		}
	}

	return res;
}
 8014228:	4770      	bx	lr
			res = (uint8_t *)flash_addr[i];
 801422a:	4a03      	ldr	r2, [pc, #12]	; (8014238 <flash_helper_get_sector_address+0x28>)
 801422c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
			break;
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	08018220 	.word	0x08018220
 8014238:	080181f0 	.word	0x080181f0
 801423c:	00000000 	.word	0x00000000

08014240 <Vector88>:
	servo_irq();
	CH_IRQ_EPILOGUE();
}
#endif

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
 8014240:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8014242:	f240 2105 	movw	r1, #517	; 0x205
 8014246:	4803      	ldr	r0, [pc, #12]	; (8014254 <Vector88+0x14>)
 8014248:	f001 fb5a 	bl	8015900 <ADC_ClearITPendingBit>
	//mc_interface_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
}
 801424c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	CH_IRQ_EPILOGUE();
 8014250:	f7f9 bc16 	b.w	800da80 <_port_irq_epilogue>
 8014254:	40012000 	.word	0x40012000
	...

08014260 <VectorE0>:

CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8014260:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8014262:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014266:	f001 fc93 	bl	8015b90 <EXTI_GetITStatus>
 801426a:	b900      	cbnz	r0, 801426e <VectorE0+0xe>
		encoder_reset();

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
	}
}
 801426c:	bd08      	pop	{r3, pc}
		encoder_reset();
 801426e:	f7fe fa87 	bl	8012780 <encoder_reset>
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8014272:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8014276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 801427a:	f001 bc91 	b.w	8015ba0 <EXTI_ClearITPendingBit>
 801427e:	bf00      	nop

08014280 <VectorB8>:

CH_IRQ_HANDLER(HW_ENC_TIM_ISR_VEC) {
 8014280:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(HW_ENC_TIM, TIM_IT_Update) != RESET) {
 8014282:	2101      	movs	r1, #1
 8014284:	4806      	ldr	r0, [pc, #24]	; (80142a0 <VectorB8+0x20>)
 8014286:	f002 f87b 	bl	8016380 <TIM_GetITStatus>
 801428a:	b900      	cbnz	r0, 801428e <VectorB8+0xe>
		encoder_tim_isr();

		// Clear the IT pending bit
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
	}
}
 801428c:	bd08      	pop	{r3, pc}
		encoder_tim_isr();
 801428e:	f7fe fab7 	bl	8012800 <encoder_tim_isr>
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
 8014292:	2101      	movs	r1, #1
 8014294:	4802      	ldr	r0, [pc, #8]	; (80142a0 <VectorB8+0x20>)
}
 8014296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
 801429a:	f002 b881 	b.w	80163a0 <TIM_ClearITPendingBit>
 801429e:	bf00      	nop
 80142a0:	40000800 	.word	0x40000800
	...

080142b0 <VectorF8>:

CH_IRQ_HANDLER(TIM8_CC_IRQHandler) {
 80142b0:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM8, TIM_IT_CC1) != RESET) {
 80142b2:	2102      	movs	r1, #2
 80142b4:	4805      	ldr	r0, [pc, #20]	; (80142cc <VectorF8+0x1c>)
 80142b6:	f002 f863 	bl	8016380 <TIM_GetITStatus>
 80142ba:	b900      	cbnz	r0, 80142be <VectorF8+0xe>
		//mcpwm_foc_tim_sample_int_handler();

		// Clear the IT pending bit
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
	}
}
 80142bc:	bd08      	pop	{r3, pc}
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
 80142be:	2102      	movs	r1, #2
 80142c0:	4802      	ldr	r0, [pc, #8]	; (80142cc <VectorF8+0x1c>)
}
 80142c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
 80142c6:	f002 b86b 	b.w	80163a0 <TIM_ClearITPendingBit>
 80142ca:	bf00      	nop
 80142cc:	40010400 	.word	0x40010400

080142d0 <utils_map>:

	return did_trunc;
}

float utils_map(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80142d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80142d4:	ee32 2a61 	vsub.f32	s4, s4, s3
 80142d8:	ee31 1a60 	vsub.f32	s2, s2, s1
 80142dc:	ee20 2a02 	vmul.f32	s4, s0, s4
 80142e0:	ee82 0a01 	vdiv.f32	s0, s4, s2
}
 80142e4:	ee30 0a21 	vadd.f32	s0, s0, s3
 80142e8:	4770      	bx	lr
 80142ea:	bf00      	nop
 80142ec:	0000      	movs	r0, r0
	...

080142f0 <utils_middle_of_3>:
 * The middle value
 */
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
 80142f0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	d80e      	bhi.n	8014318 <utils_middle_of_3+0x28>
 80142fa:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80142fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014302:	d81f      	bhi.n	8014344 <utils_middle_of_3+0x54>
		middle = (b <= c) ? b : c;
 8014304:	eef4 0ac1 	vcmpe.f32	s1, s2
 8014308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430c:	bf8c      	ite	hi
 801430e:	eeb0 0a41 	vmovhi.f32	s0, s2
 8014312:	eeb0 0a60 	vmovls.f32	s0, s1
 8014316:	4770      	bx	lr
	} else if ((b <= a) && (b <= c)) {
 8014318:	db0c      	blt.n	8014334 <utils_middle_of_3+0x44>
 801431a:	eef4 0ac1 	vcmpe.f32	s1, s2
 801431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014322:	d807      	bhi.n	8014334 <utils_middle_of_3+0x44>
		middle = (a <= c) ? a : c;
 8014324:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8014328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		middle = (b <= c) ? b : c;
 801432c:	bf88      	it	hi
 801432e:	eeb0 0a41 	vmovhi.f32	s0, s2
 8014332:	4770      	bx	lr
	} else {
		middle = (a <= b) ? a : b;
 8014334:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8014338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433c:	bf88      	it	hi
 801433e:	eeb0 0a60 	vmovhi.f32	s0, s1
 8014342:	4770      	bx	lr
	} else if ((b <= a) && (b <= c)) {
 8014344:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8014348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434c:	db04      	blt.n	8014358 <utils_middle_of_3+0x68>
 801434e:	eef4 0ac1 	vcmpe.f32	s1, s2
 8014352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014356:	d9e5      	bls.n	8014324 <utils_middle_of_3+0x34>
	}
	return middle;
}
 8014358:	4770      	bx	lr
 801435a:	bf00      	nop
 801435c:	0000      	movs	r0, r0
	...

08014360 <utils_middle_of_3_int>:
 * The middle value
 */
int utils_middle_of_3_int(int a, int b, int c) {
	int middle;

	if ((a <= b) && (a <= c)) {
 8014360:	4288      	cmp	r0, r1
 8014362:	dd05      	ble.n	8014370 <utils_middle_of_3_int+0x10>
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8014364:	4291      	cmp	r1, r2
 8014366:	dd0b      	ble.n	8014380 <utils_middle_of_3_int+0x20>
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 8014368:	4288      	cmp	r0, r1
 801436a:	bfa8      	it	ge
 801436c:	4608      	movge	r0, r1
	}
	return middle;
}
 801436e:	4770      	bx	lr
	if ((a <= b) && (a <= c)) {
 8014370:	4290      	cmp	r0, r2
 8014372:	dd09      	ble.n	8014388 <utils_middle_of_3_int+0x28>
	} else if ((b <= a) && (b <= c)) {
 8014374:	4288      	cmp	r0, r1
 8014376:	daf5      	bge.n	8014364 <utils_middle_of_3_int+0x4>
		middle = (a <= b) ? a : b;
 8014378:	4288      	cmp	r0, r1
 801437a:	bfa8      	it	ge
 801437c:	4608      	movge	r0, r1
}
 801437e:	4770      	bx	lr
		middle = (a <= c) ? a : c;
 8014380:	4290      	cmp	r0, r2
 8014382:	bfa8      	it	ge
 8014384:	4610      	movge	r0, r2
 8014386:	4770      	bx	lr
		middle = (b <= c) ? b : c;
 8014388:	4291      	cmp	r1, r2
 801438a:	bfa8      	it	ge
 801438c:	4611      	movge	r1, r2
 801438e:	4608      	mov	r0, r1
 8014390:	4770      	bx	lr
 8014392:	bf00      	nop
	...

080143a0 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 80143a0:	4b04      	ldr	r3, [pc, #16]	; (80143b4 <utils_sys_lock_cnt+0x14>)
 80143a2:	681a      	ldr	r2, [r3, #0]
 80143a4:	b912      	cbnz	r2, 80143ac <utils_sys_lock_cnt+0xc>
 80143a6:	2220      	movs	r2, #32
 80143a8:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	3201      	adds	r2, #1
 80143b0:	601a      	str	r2, [r3, #0]
}
 80143b2:	4770      	bx	lr
 80143b4:	20007028 	.word	0x20007028
	...

080143c0 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 80143c0:	4b05      	ldr	r3, [pc, #20]	; (80143d8 <utils_sys_unlock_cnt+0x18>)
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	b132      	cbz	r2, 80143d4 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 80143c6:	681a      	ldr	r2, [r3, #0]
 80143c8:	3a01      	subs	r2, #1
 80143ca:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	b90b      	cbnz	r3, 80143d4 <utils_sys_unlock_cnt+0x14>
 80143d0:	f383 8811 	msr	BASEPRI, r3
			chSysUnlock();
		}
	}
}
 80143d4:	4770      	bx	lr
 80143d6:	bf00      	nop
 80143d8:	20007028 	.word	0x20007028
 80143dc:	00000000 	.word	0x00000000

080143e0 <timeout_thread>:
systime_t timeout_get_timeout_msec(void) {
	return timeout_msec;
}

static THD_FUNCTION(timeout_thread, arg)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	4f13      	ldr	r7, [pc, #76]	; (8014430 <timeout_thread+0x50>)
 80143e4:	4a13      	ldr	r2, [pc, #76]	; (8014434 <timeout_thread+0x54>)
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	4c13      	ldr	r4, [pc, #76]	; (8014438 <timeout_thread+0x58>)
 80143ea:	f8df a054 	ldr.w	sl, [pc, #84]	; 8014440 <timeout_thread+0x60>
 80143ee:	4d13      	ldr	r5, [pc, #76]	; (801443c <timeout_thread+0x5c>)

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 80143f0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8014444 <timeout_thread+0x64>
 80143f4:	619a      	str	r2, [r3, #24]
		{
			has_timeout = true;
		} 
		else
		{
			has_timeout = false;
 80143f6:	2600      	movs	r6, #0
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 80143f8:	f242 7810 	movw	r8, #10000	; 0x2710
 80143fc:	e013      	b.n	8014426 <timeout_thread+0x46>
 80143fe:	f8da 1000 	ldr.w	r1, [sl]
  return ch.vtlist.vt_systime;
 8014402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014404:	6823      	ldr	r3, [r4, #0]
 8014406:	fb08 f303 	mul.w	r3, r8, r3
 801440a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  return chVTGetSystemTimeX() - start;
 801440e:	1a52      	subs	r2, r2, r1
 8014410:	fba9 1303 	umull	r1, r3, r9, r3
 8014414:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
			has_timeout = true;
 8014418:	f04f 0301 	mov.w	r3, #1
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 801441c:	d906      	bls.n	801442c <timeout_thread+0x4c>
			has_timeout = true;
 801441e:	702b      	strb	r3, [r5, #0]
		}

		chThdSleepMilliseconds(10);
 8014420:	2064      	movs	r0, #100	; 0x64
 8014422:	f7f8 ff55 	bl	800d2d0 <chThdSleep>
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d1e8      	bne.n	80143fe <timeout_thread+0x1e>
			has_timeout = false;
 801442c:	702e      	strb	r6, [r5, #0]
 801442e:	e7f7      	b.n	8014420 <timeout_thread+0x40>
 8014430:	20000c90 	.word	0x20000c90
 8014434:	08018240 	.word	0x08018240
 8014438:	20007034 	.word	0x20007034
 801443c:	2000702c 	.word	0x2000702c
 8014440:	20007030 	.word	0x20007030
 8014444:	10624dd3 	.word	0x10624dd3
	...

08014450 <timeout_configure>:
	timeout_msec = timeout;
 8014450:	4b01      	ldr	r3, [pc, #4]	; (8014458 <timeout_configure+0x8>)
 8014452:	6018      	str	r0, [r3, #0]
}
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop
 8014458:	20007034 	.word	0x20007034
 801445c:	00000000 	.word	0x00000000

08014460 <timeout_reset>:
  return ch.vtlist.vt_systime;
 8014460:	4a02      	ldr	r2, [pc, #8]	; (801446c <timeout_reset+0xc>)
	last_update_time = chVTGetSystemTimeX();
 8014462:	4b03      	ldr	r3, [pc, #12]	; (8014470 <timeout_reset+0x10>)
 8014464:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014466:	601a      	str	r2, [r3, #0]
}
 8014468:	4770      	bx	lr
 801446a:	bf00      	nop
 801446c:	20000c90 	.word	0x20000c90
 8014470:	20007030 	.word	0x20007030
	...

08014480 <timeout_has_timeout>:
	return has_timeout;
 8014480:	4b01      	ldr	r3, [pc, #4]	; (8014488 <timeout_has_timeout+0x8>)
 8014482:	7818      	ldrb	r0, [r3, #0]
}
 8014484:	4770      	bx	lr
 8014486:	bf00      	nop
 8014488:	2000702c 	.word	0x2000702c
 801448c:	00000000 	.word	0x00000000

08014490 <timeout_get_timeout_msec>:
	return timeout_msec;
 8014490:	4b01      	ldr	r3, [pc, #4]	; (8014498 <timeout_get_timeout_msec+0x8>)
 8014492:	6818      	ldr	r0, [r3, #0]
}
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	20007034 	.word	0x20007034
 801449c:	00000000 	.word	0x00000000

080144a0 <timeout_init>:
	}

}

void timeout_init(void) {
 80144a0:	b530      	push	{r4, r5, lr}
	timeout_msec = 1000;
 80144a2:	4a0a      	ldr	r2, [pc, #40]	; (80144cc <timeout_init+0x2c>)
	last_update_time = 0;
 80144a4:	490a      	ldr	r1, [pc, #40]	; (80144d0 <timeout_init+0x30>)
	has_timeout = false;
 80144a6:	4d0b      	ldr	r5, [pc, #44]	; (80144d4 <timeout_init+0x34>)

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 80144a8:	4b0b      	ldr	r3, [pc, #44]	; (80144d8 <timeout_init+0x38>)
 80144aa:	480c      	ldr	r0, [pc, #48]	; (80144dc <timeout_init+0x3c>)
void timeout_init(void) {
 80144ac:	b083      	sub	sp, #12
	timeout_msec = 1000;
 80144ae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80144b2:	6014      	str	r4, [r2, #0]
	last_update_time = 0;
 80144b4:	2400      	movs	r4, #0
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 80144b6:	9400      	str	r4, [sp, #0]
 80144b8:	2240      	movs	r2, #64	; 0x40
	last_update_time = 0;
 80144ba:	600c      	str	r4, [r1, #0]
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 80144bc:	f44f 7166 	mov.w	r1, #920	; 0x398
	has_timeout = false;
 80144c0:	702c      	strb	r4, [r5, #0]
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 80144c2:	f7f8 fecd 	bl	800d260 <chThdCreateStatic>
}
 80144c6:	b003      	add	sp, #12
 80144c8:	bd30      	pop	{r4, r5, pc}
 80144ca:	bf00      	nop
 80144cc:	20007034 	.word	0x20007034
 80144d0:	20007030 	.word	0x20007030
 80144d4:	2000702c 	.word	0x2000702c
 80144d8:	080143e1 	.word	0x080143e1
 80144dc:	20007038 	.word	0x20007038

080144e0 <crc16>:
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 80144e0:	b191      	cbz	r1, 8014508 <crc16+0x28>
unsigned short crc16(unsigned char *buf, unsigned int len) {
 80144e2:	b410      	push	{r4}
 80144e4:	4c09      	ldr	r4, [pc, #36]	; (801450c <crc16+0x2c>)
 80144e6:	1842      	adds	r2, r0, r1
	unsigned short cksum = 0;
 80144e8:	2100      	movs	r1, #0
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80144ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80144ee:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
	for (i = 0; i < len; i++) {
 80144f2:	4290      	cmp	r0, r2
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80144f4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80144f8:	ea83 2101 	eor.w	r1, r3, r1, lsl #8
 80144fc:	b289      	uxth	r1, r1
	for (i = 0; i < len; i++) {
 80144fe:	d1f4      	bne.n	80144ea <crc16+0xa>
	}
	return cksum;
}
 8014500:	4608      	mov	r0, r1
 8014502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	4608      	mov	r0, r1
 801450a:	4770      	bx	lr
 801450c:	08018250 	.word	0x08018250

08014510 <spi_sw_init>:
static bool init_done = false;

// Private functions
static void spi_sw_delay(void);

void spi_sw_init(void) {
 8014510:	b538      	push	{r3, r4, r5, lr}
	if (!init_done) {
 8014512:	4d0f      	ldr	r5, [pc, #60]	; (8014550 <spi_sw_init+0x40>)
 8014514:	782a      	ldrb	r2, [r5, #0]
 8014516:	b102      	cbz	r2, 801451a <spi_sw_init+0xa>

		palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
		palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
		init_done = true;
	}
}
 8014518:	bd38      	pop	{r3, r4, r5, pc}
		palSetPadMode(NRF_PORT_MISO, NRF_PIN_MISO, PAL_MODE_INPUT);
 801451a:	4c0e      	ldr	r4, [pc, #56]	; (8014554 <spi_sw_init+0x44>)
 801451c:	2140      	movs	r1, #64	; 0x40
 801451e:	4620      	mov	r0, r4
 8014520:	f7fa ff0e 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(NRF_PORT_CSN, NRF_PIN_CSN, PAL_MODE_OUTPUT_PUSHPULL);
 8014524:	4620      	mov	r0, r4
 8014526:	2201      	movs	r2, #1
 8014528:	2110      	movs	r1, #16
 801452a:	f7fa ff09 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(NRF_PORT_SCK, NRF_PIN_SCK, PAL_MODE_OUTPUT_PUSHPULL);
 801452e:	4620      	mov	r0, r4
 8014530:	2201      	movs	r2, #1
 8014532:	2120      	movs	r1, #32
 8014534:	f7fa ff04 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPadMode(NRF_PORT_MOSI, NRF_PIN_MOSI, PAL_MODE_OUTPUT_PUSHPULL);
 8014538:	2201      	movs	r2, #1
 801453a:	2180      	movs	r1, #128	; 0x80
 801453c:	4620      	mov	r0, r4
 801453e:	f7fa feff 	bl	800f340 <_pal_lld_setgroupmode>
		palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8014542:	2110      	movs	r1, #16
		palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
 8014544:	2220      	movs	r2, #32
		init_done = true;
 8014546:	2301      	movs	r3, #1
		palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8014548:	8321      	strh	r1, [r4, #24]
		palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
 801454a:	8362      	strh	r2, [r4, #26]
		init_done = true;
 801454c:	702b      	strb	r3, [r5, #0]
}
 801454e:	bd38      	pop	{r3, r4, r5, pc}
 8014550:	200073d0 	.word	0x200073d0
 8014554:	40020000 	.word	0x40020000
	...

08014560 <spi_sw_transfer>:

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8014560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
 8014564:	4c2d      	ldr	r4, [pc, #180]	; (801461c <spi_sw_transfer+0xbc>)
void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8014566:	b085      	sub	sp, #20
	spi_sw_delay();
	palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
}

static void spi_sw_delay(void) {
	for (volatile int i = 0;i < 5;i++) {
 8014568:	2300      	movs	r3, #0
	palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
 801456a:	2520      	movs	r5, #32
 801456c:	8365      	strh	r5, [r4, #26]
	for (volatile int i = 0;i < 5;i++) {
 801456e:	9301      	str	r3, [sp, #4]
 8014570:	9b01      	ldr	r3, [sp, #4]
 8014572:	2b04      	cmp	r3, #4
void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8014574:	4690      	mov	r8, r2
	for (volatile int i = 0;i < 5;i++) {
 8014576:	dc06      	bgt.n	8014586 <spi_sw_transfer+0x26>
 8014578:	bf00      	nop
 801457a:	9b01      	ldr	r3, [sp, #4]
 801457c:	3301      	adds	r3, #1
 801457e:	9301      	str	r3, [sp, #4]
 8014580:	9b01      	ldr	r3, [sp, #4]
 8014582:	2b04      	cmp	r3, #4
 8014584:	ddf8      	ble.n	8014578 <spi_sw_transfer+0x18>
	for (int i = 0;i < length;i++) {
 8014586:	f1b8 0f00 	cmp.w	r8, #0
 801458a:	dd41      	ble.n	8014610 <spi_sw_transfer+0xb0>
 801458c:	f04f 0e00 	mov.w	lr, #0
			palWritePad(NRF_PORT_MOSI, NRF_PIN_MOSI, send >> 7);
 8014590:	4e22      	ldr	r6, [pc, #136]	; (801461c <spi_sw_transfer+0xbc>)
		unsigned char send = out_buf ? out_buf[i] : 0;
 8014592:	4672      	mov	r2, lr
			palSetPad(NRF_PORT_SCK, NRF_PIN_SCK);
 8014594:	f04f 0c20 	mov.w	ip, #32
		unsigned char send = out_buf ? out_buf[i] : 0;
 8014598:	2900      	cmp	r1, #0
 801459a:	d03c      	beq.n	8014616 <spi_sw_transfer+0xb6>
 801459c:	f811 400e 	ldrb.w	r4, [r1, lr]
 80145a0:	2708      	movs	r7, #8
 80145a2:	2500      	movs	r5, #0
			palWritePad(NRF_PORT_MOSI, NRF_PIN_MOSI, send >> 7);
 80145a4:	ea5f 19d4 	movs.w	r9, r4, lsr #7
 80145a8:	bf14      	ite	ne
 80145aa:	2300      	movne	r3, #0
 80145ac:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
 80145b0:	ea43 13c9 	orr.w	r3, r3, r9, lsl #7
 80145b4:	61b3      	str	r3, [r6, #24]
	for (volatile int i = 0;i < 5;i++) {
 80145b6:	9202      	str	r2, [sp, #8]
 80145b8:	9b02      	ldr	r3, [sp, #8]
			send <<= 1;
 80145ba:	0064      	lsls	r4, r4, #1
	for (volatile int i = 0;i < 5;i++) {
 80145bc:	2b04      	cmp	r3, #4
			send <<= 1;
 80145be:	b2e4      	uxtb	r4, r4
	for (volatile int i = 0;i < 5;i++) {
 80145c0:	dc06      	bgt.n	80145d0 <spi_sw_transfer+0x70>
 80145c2:	bf00      	nop
 80145c4:	9b02      	ldr	r3, [sp, #8]
 80145c6:	3301      	adds	r3, #1
 80145c8:	9302      	str	r3, [sp, #8]
 80145ca:	9b02      	ldr	r3, [sp, #8]
 80145cc:	2b04      	cmp	r3, #4
 80145ce:	ddf8      	ble.n	80145c2 <spi_sw_transfer+0x62>
			if (palReadPad(NRF_PORT_MISO, NRF_PIN_MISO)) {
 80145d0:	6933      	ldr	r3, [r6, #16]
			palSetPad(NRF_PORT_SCK, NRF_PIN_SCK);
 80145d2:	f8a6 c018 	strh.w	ip, [r6, #24]
	for (volatile int i = 0;i < 5;i++) {
 80145d6:	9203      	str	r2, [sp, #12]
			if (palReadPad(NRF_PORT_MISO, NRF_PIN_MISO)) {
 80145d8:	065b      	lsls	r3, r3, #25
			recieve <<= 1;
 80145da:	ea4f 0545 	mov.w	r5, r5, lsl #1
	for (volatile int i = 0;i < 5;i++) {
 80145de:	9b03      	ldr	r3, [sp, #12]
			recieve <<= 1;
 80145e0:	b2ed      	uxtb	r5, r5
				recieve |= 0x1;
 80145e2:	bf48      	it	mi
 80145e4:	f045 0501 	orrmi.w	r5, r5, #1
	for (volatile int i = 0;i < 5;i++) {
 80145e8:	2b04      	cmp	r3, #4
 80145ea:	dc06      	bgt.n	80145fa <spi_sw_transfer+0x9a>
 80145ec:	bf00      	nop
 80145ee:	9b03      	ldr	r3, [sp, #12]
 80145f0:	3301      	adds	r3, #1
 80145f2:	9303      	str	r3, [sp, #12]
 80145f4:	9b03      	ldr	r3, [sp, #12]
 80145f6:	2b04      	cmp	r3, #4
 80145f8:	ddf8      	ble.n	80145ec <spi_sw_transfer+0x8c>
		for (int bit=0;bit < 8;bit++) {
 80145fa:	3f01      	subs	r7, #1
			palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
 80145fc:	f8a6 c01a 	strh.w	ip, [r6, #26]
		for (int bit=0;bit < 8;bit++) {
 8014600:	d1d0      	bne.n	80145a4 <spi_sw_transfer+0x44>
		if (in_buf) {
 8014602:	b108      	cbz	r0, 8014608 <spi_sw_transfer+0xa8>
			in_buf[i] = recieve;
 8014604:	f800 500e 	strb.w	r5, [r0, lr]
	for (int i = 0;i < length;i++) {
 8014608:	f10e 0e01 	add.w	lr, lr, #1
 801460c:	45f0      	cmp	r8, lr
 801460e:	d1c3      	bne.n	8014598 <spi_sw_transfer+0x38>
}
 8014610:	b005      	add	sp, #20
 8014612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		unsigned char send = out_buf ? out_buf[i] : 0;
 8014616:	460c      	mov	r4, r1
 8014618:	e7c2      	b.n	80145a0 <spi_sw_transfer+0x40>
 801461a:	bf00      	nop
 801461c:	40020000 	.word	0x40020000

08014620 <spi_sw_begin>:
void spi_sw_begin(void) {
 8014620:	b082      	sub	sp, #8
	palClearPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8014622:	4a08      	ldr	r2, [pc, #32]	; (8014644 <spi_sw_begin+0x24>)
	for (volatile int i = 0;i < 5;i++) {
 8014624:	2300      	movs	r3, #0
	palClearPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8014626:	2110      	movs	r1, #16
 8014628:	8351      	strh	r1, [r2, #26]
	for (volatile int i = 0;i < 5;i++) {
 801462a:	9301      	str	r3, [sp, #4]
 801462c:	9b01      	ldr	r3, [sp, #4]
 801462e:	2b04      	cmp	r3, #4
 8014630:	dc06      	bgt.n	8014640 <spi_sw_begin+0x20>
 8014632:	bf00      	nop
 8014634:	9b01      	ldr	r3, [sp, #4]
 8014636:	3301      	adds	r3, #1
 8014638:	9301      	str	r3, [sp, #4]
 801463a:	9b01      	ldr	r3, [sp, #4]
 801463c:	2b04      	cmp	r3, #4
 801463e:	ddf8      	ble.n	8014632 <spi_sw_begin+0x12>
}
 8014640:	b002      	add	sp, #8
 8014642:	4770      	bx	lr
 8014644:	40020000 	.word	0x40020000
	...

08014650 <spi_sw_end>:
void spi_sw_end(void) {
 8014650:	b082      	sub	sp, #8
	for (volatile int i = 0;i < 5;i++) {
 8014652:	2300      	movs	r3, #0
 8014654:	9301      	str	r3, [sp, #4]
 8014656:	9b01      	ldr	r3, [sp, #4]
 8014658:	2b04      	cmp	r3, #4
 801465a:	dc06      	bgt.n	801466a <spi_sw_end+0x1a>
 801465c:	bf00      	nop
 801465e:	9b01      	ldr	r3, [sp, #4]
 8014660:	3301      	adds	r3, #1
 8014662:	9301      	str	r3, [sp, #4]
 8014664:	9b01      	ldr	r3, [sp, #4]
 8014666:	2b04      	cmp	r3, #4
 8014668:	ddf8      	ble.n	801465c <spi_sw_end+0xc>
	palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
 801466a:	4b02      	ldr	r3, [pc, #8]	; (8014674 <spi_sw_end+0x24>)
 801466c:	2210      	movs	r2, #16
 801466e:	831a      	strh	r2, [r3, #24]
}
 8014670:	b002      	add	sp, #8
 8014672:	4770      	bx	lr
 8014674:	40020000 	.word	0x40020000
	...

08014680 <rf_init>:
#include "rf.h"
#include "spi_sw.h"
#include "ch.h"

void rf_init(void) {
	spi_sw_init();
 8014680:	f7ff bf46 	b.w	8014510 <spi_sw_init>
	...

08014690 <rf_write_tx_payload>:

void rf_set_tx_addr(const char *address, int addr_len) {
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
}

void rf_write_tx_payload(const char *data, int length) {
 8014690:	b570      	push	{r4, r5, r6, lr}
 8014692:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD;
 8014694:	ac02      	add	r4, sp, #8
 8014696:	23a0      	movs	r3, #160	; 0xa0
 8014698:	f804 3d01 	strb.w	r3, [r4, #-1]!
void rf_write_tx_payload(const char *data, int length) {
 801469c:	4605      	mov	r5, r0
 801469e:	460e      	mov	r6, r1
	spi_sw_begin();
 80146a0:	f7ff ffbe 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80146a4:	4621      	mov	r1, r4
 80146a6:	2201      	movs	r2, #1
 80146a8:	2000      	movs	r0, #0
 80146aa:	f7ff ff59 	bl	8014560 <spi_sw_transfer>
	spi_sw_transfer(0, data, length);
 80146ae:	4632      	mov	r2, r6
 80146b0:	4629      	mov	r1, r5
 80146b2:	2000      	movs	r0, #0
 80146b4:	f7ff ff54 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 80146b8:	f7ff ffca 	bl	8014650 <spi_sw_end>

}
 80146bc:	b002      	add	sp, #8
 80146be:	bd70      	pop	{r4, r5, r6, pc}

080146c0 <rf_write_tx_payload_no_ack>:

// Write payload for transmission without requesting acknowledge
void rf_write_tx_payload_no_ack(const char *data, int length) {
 80146c0:	b570      	push	{r4, r5, r6, lr}
 80146c2:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD_NO_ACK;
 80146c4:	ac02      	add	r4, sp, #8
 80146c6:	23b0      	movs	r3, #176	; 0xb0
 80146c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
void rf_write_tx_payload_no_ack(const char *data, int length) {
 80146cc:	4605      	mov	r5, r0
 80146ce:	460e      	mov	r6, r1
	spi_sw_begin();
 80146d0:	f7ff ffa6 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80146d4:	4621      	mov	r1, r4
 80146d6:	2201      	movs	r2, #1
 80146d8:	2000      	movs	r0, #0
 80146da:	f7ff ff41 	bl	8014560 <spi_sw_transfer>
	spi_sw_transfer(0, data, length);
 80146de:	4632      	mov	r2, r6
 80146e0:	4629      	mov	r1, r5
 80146e2:	2000      	movs	r0, #0
 80146e4:	f7ff ff3c 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 80146e8:	f7ff ffb2 	bl	8014650 <spi_sw_end>

}
 80146ec:	b002      	add	sp, #8
 80146ee:	bd70      	pop	{r4, r5, r6, pc}

080146f0 <rf_flush_tx>:
		tmp |= (features);
		rf_write_reg_byte(NRF_REG_FEATURE, tmp);	//Update if we need
	}
}

void rf_flush_tx(void) {
 80146f0:	b510      	push	{r4, lr}
 80146f2:	b082      	sub	sp, #8
	char cmd = NRF_CMD_FLUSH_TX;
 80146f4:	ac02      	add	r4, sp, #8
 80146f6:	23e1      	movs	r3, #225	; 0xe1
 80146f8:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 80146fc:	f7ff ff90 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8014700:	4621      	mov	r1, r4
 8014702:	2201      	movs	r2, #1
 8014704:	2000      	movs	r0, #0
 8014706:	f7ff ff2b 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 801470a:	f7ff ffa1 	bl	8014650 <spi_sw_end>
}
 801470e:	b002      	add	sp, #8
 8014710:	bd10      	pop	{r4, pc}
 8014712:	bf00      	nop
	...

08014720 <rf_flush_rx>:

void rf_flush_rx(void) {
 8014720:	b510      	push	{r4, lr}
 8014722:	b082      	sub	sp, #8
	char cmd = NRF_CMD_FLUSH_RX;
 8014724:	ac02      	add	r4, sp, #8
 8014726:	23e2      	movs	r3, #226	; 0xe2
 8014728:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 801472c:	f7ff ff78 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8014730:	4621      	mov	r1, r4
 8014732:	2201      	movs	r2, #1
 8014734:	2000      	movs	r0, #0
 8014736:	f7ff ff13 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 801473a:	f7ff ff89 	bl	8014650 <spi_sw_end>
}
 801473e:	b002      	add	sp, #8
 8014740:	bd10      	pop	{r4, pc}
 8014742:	bf00      	nop
	...

08014750 <rf_flush_all>:

void rf_flush_all(void) {
 8014750:	b508      	push	{r3, lr}
	rf_flush_rx();
 8014752:	f7ff ffe5 	bl	8014720 <rf_flush_rx>
	rf_flush_tx();
}
 8014756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rf_flush_tx();
 801475a:	f7ff bfc9 	b.w	80146f0 <rf_flush_tx>
 801475e:	bf00      	nop

08014760 <rf_status>:
	spi_sw_transfer(&w, 0, 1);
	spi_sw_end();
	return w;
}

int rf_status(void) {
 8014760:	b510      	push	{r4, lr}
 8014762:	b082      	sub	sp, #8
	char w = NRF_CMD_NOP;
 8014764:	ac02      	add	r4, sp, #8
 8014766:	23ff      	movs	r3, #255	; 0xff
 8014768:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 801476c:	f7ff ff58 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(&w, &w, 1);
 8014770:	4620      	mov	r0, r4
 8014772:	4621      	mov	r1, r4
 8014774:	2201      	movs	r2, #1
 8014776:	f7ff fef3 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 801477a:	f7ff ff69 	bl	8014650 <spi_sw_end>
	return w;
}
 801477e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014782:	b002      	add	sp, #8
 8014784:	bd10      	pop	{r4, pc}
 8014786:	bf00      	nop
	...

08014790 <rf_write_reg>:

int rf_rx_power_detect(void) {
	return rf_read_reg_byte(NRF_REG_RPD) >> 1;
}

void rf_write_reg(int reg, const char *data, int len) {
 8014790:	b570      	push	{r4, r5, r6, lr}
 8014792:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_REGISTER | reg;
 8014794:	ac02      	add	r4, sp, #8
 8014796:	f040 0020 	orr.w	r0, r0, #32
 801479a:	f804 0d01 	strb.w	r0, [r4, #-1]!
void rf_write_reg(int reg, const char *data, int len) {
 801479e:	460d      	mov	r5, r1
 80147a0:	4616      	mov	r6, r2

	spi_sw_begin();
 80147a2:	f7ff ff3d 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80147a6:	4621      	mov	r1, r4
 80147a8:	2201      	movs	r2, #1
 80147aa:	2000      	movs	r0, #0
 80147ac:	f7ff fed8 	bl	8014560 <spi_sw_transfer>
	spi_sw_transfer(0, data, len);
 80147b0:	4632      	mov	r2, r6
 80147b2:	4629      	mov	r1, r5
 80147b4:	2000      	movs	r0, #0
 80147b6:	f7ff fed3 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 80147ba:	f7ff ff49 	bl	8014650 <spi_sw_end>
}
 80147be:	b002      	add	sp, #8
 80147c0:	bd70      	pop	{r4, r5, r6, pc}
 80147c2:	bf00      	nop
	...

080147d0 <rf_set_rx_addr>:
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
 80147d0:	300a      	adds	r0, #10
 80147d2:	f7ff bfdd 	b.w	8014790 <rf_write_reg>
 80147d6:	bf00      	nop
	...

080147e0 <rf_set_tx_addr>:
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
 80147e0:	460a      	mov	r2, r1
 80147e2:	4601      	mov	r1, r0
 80147e4:	2010      	movs	r0, #16
 80147e6:	f7ff bfd3 	b.w	8014790 <rf_write_reg>
 80147ea:	bf00      	nop
 80147ec:	0000      	movs	r0, r0
	...

080147f0 <rf_set_address_width>:
void rf_set_address_width(NRF_AW aw) {
 80147f0:	b500      	push	{lr}
 80147f2:	b083      	sub	sp, #12
 80147f4:	a902      	add	r1, sp, #8
	rf_write_reg_byte(NRF_REG_SETUP_AW, (char)aw + 1);
 80147f6:	3001      	adds	r0, #1
 80147f8:	f801 0d01 	strb.w	r0, [r1, #-1]!

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80147fc:	2201      	movs	r2, #1
 80147fe:	2003      	movs	r0, #3
 8014800:	f7ff ffc6 	bl	8014790 <rf_write_reg>
}
 8014804:	b003      	add	sp, #12
 8014806:	f85d fb04 	ldr.w	pc, [sp], #4
 801480a:	bf00      	nop
 801480c:	0000      	movs	r0, r0
	...

08014810 <rf_set_frequency>:
void rf_set_frequency(int freq) {
 8014810:	b500      	push	{lr}
 8014812:	b083      	sub	sp, #12
 8014814:	a902      	add	r1, sp, #8
	rf_write_reg_byte(NRF_REG_RF_CH, (freq - 2400) & 0x7F);
 8014816:	3860      	subs	r0, #96	; 0x60
 8014818:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801481c:	f801 0d01 	strb.w	r0, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 8014820:	2201      	movs	r2, #1
 8014822:	2005      	movs	r0, #5
 8014824:	f7ff ffb4 	bl	8014790 <rf_write_reg>
}
 8014828:	b003      	add	sp, #12
 801482a:	f85d fb04 	ldr.w	pc, [sp], #4
 801482e:	bf00      	nop

08014830 <rf_clear_irq>:
void rf_clear_irq(void) {
 8014830:	b500      	push	{lr}
 8014832:	b083      	sub	sp, #12
 8014834:	a902      	add	r1, sp, #8
 8014836:	2370      	movs	r3, #112	; 0x70
 8014838:	f801 3d01 	strb.w	r3, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 801483c:	2201      	movs	r2, #1
 801483e:	2007      	movs	r0, #7
 8014840:	f7ff ffa6 	bl	8014790 <rf_write_reg>
}
 8014844:	b003      	add	sp, #12
 8014846:	f85d fb04 	ldr.w	pc, [sp], #4
 801484a:	bf00      	nop
 801484c:	0000      	movs	r0, r0
	...

08014850 <rf_clear_maxrt_irq>:
void rf_clear_maxrt_irq(void) {
 8014850:	b500      	push	{lr}
 8014852:	b083      	sub	sp, #12
 8014854:	a902      	add	r1, sp, #8
 8014856:	2310      	movs	r3, #16
 8014858:	f801 3d01 	strb.w	r3, [r1, #-1]!
	rf_write_reg(reg, &data, 1);
 801485c:	2201      	movs	r2, #1
 801485e:	2007      	movs	r0, #7
 8014860:	f7ff ff96 	bl	8014790 <rf_write_reg>
}
 8014864:	b003      	add	sp, #12
 8014866:	f85d fb04 	ldr.w	pc, [sp], #4
 801486a:	bf00      	nop
 801486c:	0000      	movs	r0, r0
	...

08014870 <rf_write_reg_byte>:
void rf_write_reg_byte(int reg, char data) {
 8014870:	b500      	push	{lr}
 8014872:	b083      	sub	sp, #12
 8014874:	ab02      	add	r3, sp, #8
	rf_write_reg(reg, &data, 1);
 8014876:	2201      	movs	r2, #1
void rf_write_reg_byte(int reg, char data) {
 8014878:	f803 1d01 	strb.w	r1, [r3, #-1]!
	rf_write_reg(reg, &data, 1);
 801487c:	4619      	mov	r1, r3
 801487e:	f7ff ff87 	bl	8014790 <rf_write_reg>
}
 8014882:	b003      	add	sp, #12
 8014884:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014890 <rf_read_reg>:

void rf_read_reg(int reg, char *data, int len) {
 8014890:	b570      	push	{r4, r5, r6, lr}
 8014892:	b082      	sub	sp, #8
	char cmd = NRF_CMD_READ_REGISTER | reg;
 8014894:	ac02      	add	r4, sp, #8
void rf_read_reg(int reg, char *data, int len) {
 8014896:	460d      	mov	r5, r1
	char cmd = NRF_CMD_READ_REGISTER | reg;
 8014898:	f804 0d01 	strb.w	r0, [r4, #-1]!
void rf_read_reg(int reg, char *data, int len) {
 801489c:	4616      	mov	r6, r2

	spi_sw_begin();
 801489e:	f7ff febf 	bl	8014620 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 80148a2:	4621      	mov	r1, r4
 80148a4:	2201      	movs	r2, #1
 80148a6:	2000      	movs	r0, #0
 80148a8:	f7ff fe5a 	bl	8014560 <spi_sw_transfer>
	spi_sw_transfer(data, 0, len);
 80148ac:	4632      	mov	r2, r6
 80148ae:	4628      	mov	r0, r5
 80148b0:	2100      	movs	r1, #0
 80148b2:	f7ff fe55 	bl	8014560 <spi_sw_transfer>
	spi_sw_end();
 80148b6:	f7ff fecb 	bl	8014650 <spi_sw_end>
}
 80148ba:	b002      	add	sp, #8
 80148bc:	bd70      	pop	{r4, r5, r6, pc}
 80148be:	bf00      	nop

080148c0 <rf_set_speed>:
void rf_set_speed(NRF_SPEED speed) {
 80148c0:	b510      	push	{r4, lr}
 80148c2:	b082      	sub	sp, #8

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80148c4:	2201      	movs	r2, #1
void rf_set_speed(NRF_SPEED speed) {
 80148c6:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80148c8:	f10d 0107 	add.w	r1, sp, #7
 80148cc:	2006      	movs	r0, #6
 80148ce:	f7ff ffdf 	bl	8014890 <rf_read_reg>
	return result;
 80148d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new &= ~(NRF_RF_SETUP_RF_DR_LOW | NRF_RF_SETUP_RF_DR_HIGH);
 80148d6:	f002 03d7 	and.w	r3, r2, #215	; 0xd7
	switch (speed) {
 80148da:	b184      	cbz	r4, 80148fe <rf_set_speed+0x3e>
 80148dc:	2c02      	cmp	r4, #2
 80148de:	d00b      	beq.n	80148f8 <rf_set_speed+0x38>
	if (reg_old != reg_new) {
 80148e0:	4293      	cmp	r3, r2
 80148e2:	d007      	beq.n	80148f4 <rf_set_speed+0x34>
	rf_write_reg(reg, &data, 1);
 80148e4:	f10d 0107 	add.w	r1, sp, #7
 80148e8:	2201      	movs	r2, #1
 80148ea:	2006      	movs	r0, #6
 80148ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80148f0:	f7ff ff4e 	bl	8014790 <rf_write_reg>
}
 80148f4:	b002      	add	sp, #8
 80148f6:	bd10      	pop	{r4, pc}
		reg_new |= NRF_RF_SETUP_RF_DR_HIGH;
 80148f8:	f043 0308 	orr.w	r3, r3, #8
		break;
 80148fc:	e7f0      	b.n	80148e0 <rf_set_speed+0x20>
		reg_new |= NRF_RF_SETUP_RF_DR_LOW;
 80148fe:	f043 0320 	orr.w	r3, r3, #32
		break;
 8014902:	e7ed      	b.n	80148e0 <rf_set_speed+0x20>
	...

08014910 <rf_set_power>:
void rf_set_power(NRF_POWER power) {
 8014910:	b510      	push	{r4, lr}
 8014912:	b082      	sub	sp, #8
 8014914:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8014916:	2201      	movs	r2, #1
 8014918:	f10d 0107 	add.w	r1, sp, #7
 801491c:	2006      	movs	r0, #6
 801491e:	f7ff ffb7 	bl	8014890 <rf_read_reg>
	return result;
 8014922:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new &= ~(NRF_RF_SETUP_RF_PWR | 1);
 8014926:	f022 0307 	bic.w	r3, r2, #7
	reg_new |= (char)power << 1;
 801492a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 801492e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	if (power == NRF_POWER_0DBM) {
 8014932:	2c03      	cmp	r4, #3
		reg_new |= 1;
 8014934:	bf08      	it	eq
 8014936:	f043 0301 	orreq.w	r3, r3, #1
	if (reg_old != reg_new) {
 801493a:	4293      	cmp	r3, r2
 801493c:	d007      	beq.n	801494e <rf_set_power+0x3e>
	rf_write_reg(reg, &data, 1);
 801493e:	f10d 0107 	add.w	r1, sp, #7
 8014942:	2201      	movs	r2, #1
 8014944:	2006      	movs	r0, #6
 8014946:	f88d 3007 	strb.w	r3, [sp, #7]
 801494a:	f7ff ff21 	bl	8014790 <rf_write_reg>
}
 801494e:	b002      	add	sp, #8
 8014950:	bd10      	pop	{r4, pc}
 8014952:	bf00      	nop
	...

08014960 <rf_set_crc_type>:
void rf_set_crc_type(NRF_CRC crc_type) {
 8014960:	b510      	push	{r4, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8014966:	2201      	movs	r2, #1
 8014968:	f10d 0107 	add.w	r1, sp, #7
 801496c:	2000      	movs	r0, #0
 801496e:	f7ff ff8f 	bl	8014890 <rf_read_reg>
	return result;
 8014972:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (crc_type) {
 8014976:	2c01      	cmp	r4, #1
	reg_new &= ~(NRF_CONFIG_CRCO | NRF_CONFIG_EN_CRC);
 8014978:	f002 03f3 	and.w	r3, r2, #243	; 0xf3
	switch (crc_type) {
 801497c:	d010      	beq.n	80149a0 <rf_set_crc_type+0x40>
 801497e:	2c02      	cmp	r4, #2
 8014980:	d00b      	beq.n	801499a <rf_set_crc_type+0x3a>
	if (reg_old != reg_new) {
 8014982:	4293      	cmp	r3, r2
 8014984:	d007      	beq.n	8014996 <rf_set_crc_type+0x36>
	rf_write_reg(reg, &data, 1);
 8014986:	f10d 0107 	add.w	r1, sp, #7
 801498a:	2201      	movs	r2, #1
 801498c:	2000      	movs	r0, #0
 801498e:	f88d 3007 	strb.w	r3, [sp, #7]
 8014992:	f7ff fefd 	bl	8014790 <rf_write_reg>
}
 8014996:	b002      	add	sp, #8
 8014998:	bd10      	pop	{r4, pc}
		reg_new |= NRF_CONFIG_EN_CRC | NRF_CONFIG_CRCO;
 801499a:	f043 030c 	orr.w	r3, r3, #12
		break;
 801499e:	e7f0      	b.n	8014982 <rf_set_crc_type+0x22>
		reg_new |= NRF_CONFIG_EN_CRC;
 80149a0:	f043 0308 	orr.w	r3, r3, #8
		break;
 80149a4:	e7ed      	b.n	8014982 <rf_set_crc_type+0x22>
 80149a6:	bf00      	nop
	...

080149b0 <rf_set_retr_retries>:
void rf_set_retr_retries(int retries) {
 80149b0:	b510      	push	{r4, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80149b6:	f10d 0107 	add.w	r1, sp, #7
 80149ba:	2201      	movs	r2, #1
 80149bc:	2004      	movs	r0, #4
 80149be:	f7ff ff67 	bl	8014890 <rf_read_reg>
	return result;
 80149c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new |= (char)retries & 0xF;
 80149c6:	f004 030f 	and.w	r3, r4, #15
	reg_new &= ~NRF_SETUP_RETR_ARC;
 80149ca:	f022 010f 	bic.w	r1, r2, #15
	reg_new |= (char)retries & 0xF;
 80149ce:	430b      	orrs	r3, r1
	if (reg_old != reg_new) {
 80149d0:	4293      	cmp	r3, r2
 80149d2:	d007      	beq.n	80149e4 <rf_set_retr_retries+0x34>
	rf_write_reg(reg, &data, 1);
 80149d4:	f10d 0107 	add.w	r1, sp, #7
 80149d8:	2201      	movs	r2, #1
 80149da:	2004      	movs	r0, #4
 80149dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80149e0:	f7ff fed6 	bl	8014790 <rf_write_reg>
}
 80149e4:	b002      	add	sp, #8
 80149e6:	bd10      	pop	{r4, pc}
	...

080149f0 <rf_set_retr_delay>:
void rf_set_retr_delay(NRF_RETR_DELAY delay) {
 80149f0:	b510      	push	{r4, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 80149f6:	2201      	movs	r2, #1
 80149f8:	f10d 0107 	add.w	r1, sp, #7
 80149fc:	2004      	movs	r0, #4
 80149fe:	f7ff ff47 	bl	8014890 <rf_read_reg>
	return result;
 8014a02:	f89d 2007 	ldrb.w	r2, [sp, #7]
	reg_new &= ~NRF_SETUP_RETR_ARD;
 8014a06:	f002 030f 	and.w	r3, r2, #15
	reg_new |= ((char)delay & 0xF) << 4;
 8014a0a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8014a0e:	b2db      	uxtb	r3, r3
	if (reg_old != reg_new) {
 8014a10:	4293      	cmp	r3, r2
 8014a12:	d007      	beq.n	8014a24 <rf_set_retr_delay+0x34>
	rf_write_reg(reg, &data, 1);
 8014a14:	f10d 0107 	add.w	r1, sp, #7
 8014a18:	2201      	movs	r2, #1
 8014a1a:	2004      	movs	r0, #4
 8014a1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8014a20:	f7ff feb6 	bl	8014790 <rf_write_reg>
}
 8014a24:	b002      	add	sp, #8
 8014a26:	bd10      	pop	{r4, pc}
	...

08014a30 <rf_power_up>:
void rf_power_up(void) {
 8014a30:	b500      	push	{lr}
 8014a32:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 8014a34:	2000      	movs	r0, #0
 8014a36:	f10d 0107 	add.w	r1, sp, #7
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	f7ff ff28 	bl	8014890 <rf_read_reg>
	return result;
 8014a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ((tmp & (NRF_CONFIG_PWR_UP)) != (NRF_CONFIG_PWR_UP)) {
 8014a44:	f013 0002 	ands.w	r0, r3, #2
 8014a48:	d108      	bne.n	8014a5c <rf_power_up+0x2c>
 8014a4a:	f043 0302 	orr.w	r3, r3, #2
	rf_write_reg(reg, &data, 1);
 8014a4e:	f10d 0107 	add.w	r1, sp, #7
 8014a52:	2201      	movs	r2, #1
 8014a54:	f88d 3007 	strb.w	r3, [sp, #7]
 8014a58:	f7ff fe9a 	bl	8014790 <rf_write_reg>
}
 8014a5c:	b003      	add	sp, #12
 8014a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a62:	bf00      	nop
	...

08014a70 <rf_power_down>:
void rf_power_down(void) {
 8014a70:	b500      	push	{lr}
 8014a72:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 8014a74:	2201      	movs	r2, #1
 8014a76:	f10d 0107 	add.w	r1, sp, #7
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	f7ff ff08 	bl	8014890 <rf_read_reg>
	return result;
 8014a80:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (tmp & (NRF_CONFIG_PWR_UP)) {
 8014a84:	079a      	lsls	r2, r3, #30
 8014a86:	d509      	bpl.n	8014a9c <rf_power_down+0x2c>
		tmp &= ~(NRF_CONFIG_PWR_UP);
 8014a88:	f023 0302 	bic.w	r3, r3, #2
	rf_write_reg(reg, &data, 1);
 8014a8c:	f10d 0107 	add.w	r1, sp, #7
 8014a90:	2201      	movs	r2, #1
 8014a92:	2000      	movs	r0, #0
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8014a94:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8014a98:	f7ff fe7a 	bl	8014790 <rf_write_reg>
}
 8014a9c:	b003      	add	sp, #12
 8014a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014aa2:	bf00      	nop
	...

08014ab0 <rf_mode_tx>:
void rf_mode_tx(void) {
 8014ab0:	b500      	push	{lr}
 8014ab2:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	f10d 0107 	add.w	r1, sp, #7
 8014aba:	2000      	movs	r0, #0
 8014abc:	f7ff fee8 	bl	8014890 <rf_read_reg>
	return result;
 8014ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (tmp & (NRF_CONFIG_PRIM_RX)) {
 8014ac4:	07da      	lsls	r2, r3, #31
 8014ac6:	d509      	bpl.n	8014adc <rf_mode_tx+0x2c>
		tmp &= ~(NRF_CONFIG_PRIM_RX);
 8014ac8:	f023 0301 	bic.w	r3, r3, #1
	rf_write_reg(reg, &data, 1);
 8014acc:	f10d 0107 	add.w	r1, sp, #7
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	2000      	movs	r0, #0
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8014ad4:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8014ad8:	f7ff fe5a 	bl	8014790 <rf_write_reg>
}
 8014adc:	b003      	add	sp, #12
 8014ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ae2:	bf00      	nop
	...

08014af0 <rf_mode_rx>:
void rf_mode_rx(void) {
 8014af0:	b500      	push	{lr}
 8014af2:	b083      	sub	sp, #12
	rf_read_reg(reg, &result, 1);
 8014af4:	2000      	movs	r0, #0
 8014af6:	f10d 0107 	add.w	r1, sp, #7
 8014afa:	2201      	movs	r2, #1
 8014afc:	f7ff fec8 	bl	8014890 <rf_read_reg>
	return result;
 8014b00:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if ((tmp & (NRF_CONFIG_PRIM_RX)) != (NRF_CONFIG_PRIM_RX)) {
 8014b04:	f013 0001 	ands.w	r0, r3, #1
 8014b08:	d108      	bne.n	8014b1c <rf_mode_rx+0x2c>
 8014b0a:	f043 0301 	orr.w	r3, r3, #1
	rf_write_reg(reg, &data, 1);
 8014b0e:	f10d 0107 	add.w	r1, sp, #7
 8014b12:	2201      	movs	r2, #1
 8014b14:	f88d 3007 	strb.w	r3, [sp, #7]
 8014b18:	f7ff fe3a 	bl	8014790 <rf_write_reg>
}
 8014b1c:	b003      	add	sp, #12
 8014b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b22:	bf00      	nop
	...

08014b30 <rf_enable_pipe_autoack>:
void rf_enable_pipe_autoack(int pipes) {
 8014b30:	b510      	push	{r4, lr}
	rf_read_reg(reg, &result, 1);
 8014b32:	2201      	movs	r2, #1
void rf_enable_pipe_autoack(int pipes) {
 8014b34:	b082      	sub	sp, #8
 8014b36:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8014b38:	f10d 0107 	add.w	r1, sp, #7
 8014b3c:	4610      	mov	r0, r2
 8014b3e:	f7ff fea7 	bl	8014890 <rf_read_reg>
	return result;
 8014b42:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (pipes)) != (pipes)) {
 8014b46:	ea34 0300 	bics.w	r3, r4, r0
 8014b4a:	d009      	beq.n	8014b60 <rf_enable_pipe_autoack+0x30>
	rf_write_reg(reg, &data, 1);
 8014b4c:	2201      	movs	r2, #1
		tmp |= (pipes);
 8014b4e:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8014b52:	f10d 0107 	add.w	r1, sp, #7
 8014b56:	4610      	mov	r0, r2
		rf_write_reg_byte(NRF_REG_EN_AA, tmp);	//Update if we need
 8014b58:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8014b5c:	f7ff fe18 	bl	8014790 <rf_write_reg>
}
 8014b60:	b002      	add	sp, #8
 8014b62:	bd10      	pop	{r4, pc}
	...

08014b70 <rf_enable_pipe_address>:
void rf_enable_pipe_address(int pipes) {
 8014b70:	b510      	push	{r4, lr}
 8014b72:	b082      	sub	sp, #8
 8014b74:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8014b76:	f10d 0107 	add.w	r1, sp, #7
 8014b7a:	2002      	movs	r0, #2
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	f7ff fe87 	bl	8014890 <rf_read_reg>
	return result;
 8014b82:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (pipes)) != (pipes)) {
 8014b86:	ea34 0300 	bics.w	r3, r4, r0
 8014b8a:	d009      	beq.n	8014ba0 <rf_enable_pipe_address+0x30>
		tmp |= (pipes);
 8014b8c:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8014b90:	f10d 0107 	add.w	r1, sp, #7
 8014b94:	2201      	movs	r2, #1
 8014b96:	2002      	movs	r0, #2
		rf_write_reg_byte(NRF_REG_EN_RXADDR, tmp);	//Update if we need
 8014b98:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8014b9c:	f7ff fdf8 	bl	8014790 <rf_write_reg>
}
 8014ba0:	b002      	add	sp, #8
 8014ba2:	bd10      	pop	{r4, pc}
	...

08014bb0 <rf_enable_pipe_dlp>:
void rf_enable_pipe_dlp(int pipes) {
 8014bb0:	b510      	push	{r4, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8014bb6:	f10d 0107 	add.w	r1, sp, #7
 8014bba:	201c      	movs	r0, #28
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	f7ff fe67 	bl	8014890 <rf_read_reg>
	return result;
 8014bc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (pipes)) != (pipes)) {
 8014bc6:	ea34 0300 	bics.w	r3, r4, r0
 8014bca:	d009      	beq.n	8014be0 <rf_enable_pipe_dlp+0x30>
		tmp |= (pipes);
 8014bcc:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8014bd0:	f10d 0107 	add.w	r1, sp, #7
 8014bd4:	2201      	movs	r2, #1
 8014bd6:	201c      	movs	r0, #28
		rf_write_reg_byte(NRF_REG_DYNPD, tmp);	//Update if we need
 8014bd8:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8014bdc:	f7ff fdd8 	bl	8014790 <rf_write_reg>
}
 8014be0:	b002      	add	sp, #8
 8014be2:	bd10      	pop	{r4, pc}
	...

08014bf0 <rf_enable_features>:
void rf_enable_features(int features) {
 8014bf0:	b510      	push	{r4, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	4604      	mov	r4, r0
	rf_read_reg(reg, &result, 1);
 8014bf6:	f10d 0107 	add.w	r1, sp, #7
 8014bfa:	201d      	movs	r0, #29
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	f7ff fe47 	bl	8014890 <rf_read_reg>
	return result;
 8014c02:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if ((tmp & (features)) != (features)) {
 8014c06:	ea34 0300 	bics.w	r3, r4, r0
 8014c0a:	d009      	beq.n	8014c20 <rf_enable_features+0x30>
		tmp |= (features);
 8014c0c:	ea40 0304 	orr.w	r3, r0, r4
	rf_write_reg(reg, &data, 1);
 8014c10:	f10d 0107 	add.w	r1, sp, #7
 8014c14:	2201      	movs	r2, #1
 8014c16:	201d      	movs	r0, #29
		rf_write_reg_byte(NRF_REG_FEATURE, tmp);	//Update if we need
 8014c18:	f88d 3007 	strb.w	r3, [sp, #7]
	rf_write_reg(reg, &data, 1);
 8014c1c:	f7ff fdb8 	bl	8014790 <rf_write_reg>
}
 8014c20:	b002      	add	sp, #8
 8014c22:	bd10      	pop	{r4, pc}
	...

08014c30 <rfhelp_init>:
static int address_length;
static bool tx_pipe0_addr_eq;
static nrf_config nrf_conf;
static bool init_done = false;

void rfhelp_init(void) {
 8014c30:	b570      	push	{r4, r5, r6, lr}
	chMtxObjectInit(&rf_mutex);
 8014c32:	4812      	ldr	r0, [pc, #72]	; (8014c7c <rfhelp_init+0x4c>)
	rf_init();

//	address_length = rf_get_address_width();
	address_length = 3; // We assume length 3
 8014c34:	4d12      	ldr	r5, [pc, #72]	; (8014c80 <rfhelp_init+0x50>)
 8014c36:	4c13      	ldr	r4, [pc, #76]	; (8014c84 <rfhelp_init+0x54>)
	chMtxObjectInit(&rf_mutex);
 8014c38:	f7f8 fc32 	bl	800d4a0 <chMtxObjectInit>
	rf_init();
 8014c3c:	f7ff fd20 	bl	8014680 <rf_init>
	address_length = 3; // We assume length 3
 8014c40:	2203      	movs	r2, #3
 8014c42:	602a      	str	r2, [r5, #0]
 8014c44:	f104 061e 	add.w	r6, r4, #30
	if (address_length > 5 || address_length < 3) {
		address_length = 3;
	}

	for (int i = 0;i < 6;i++) {
		rf_read_reg(NRF_REG_RX_ADDR_P0, rx_addr[i], address_length);
 8014c48:	4621      	mov	r1, r4
 8014c4a:	200a      	movs	r0, #10
 8014c4c:	3405      	adds	r4, #5
 8014c4e:	f7ff fe1f 	bl	8014890 <rf_read_reg>
	for (int i = 0;i < 6;i++) {
 8014c52:	42a6      	cmp	r6, r4
 8014c54:	682a      	ldr	r2, [r5, #0]
 8014c56:	d1f7      	bne.n	8014c48 <rfhelp_init+0x18>
		rx_addr_set[i] = false;
	}

	rf_read_reg(NRF_REG_TX_ADDR, tx_addr, address_length);
 8014c58:	490b      	ldr	r1, [pc, #44]	; (8014c88 <rfhelp_init+0x58>)
 8014c5a:	2010      	movs	r0, #16
 8014c5c:	f7ff fe18 	bl	8014890 <rf_read_reg>
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 8014c60:	682a      	ldr	r2, [r5, #0]
 8014c62:	4909      	ldr	r1, [pc, #36]	; (8014c88 <rfhelp_init+0x58>)
 8014c64:	4807      	ldr	r0, [pc, #28]	; (8014c84 <rfhelp_init+0x54>)
 8014c66:	f002 fe5b 	bl	8017920 <memcmp>
 8014c6a:	4908      	ldr	r1, [pc, #32]	; (8014c8c <rfhelp_init+0x5c>)

	// TODO: fill nrf_conf with values from the nrf chip. For now we assume
	// that nrf_conf is already set when rfhelp_restart is called.

	init_done = true;
 8014c6c:	4b08      	ldr	r3, [pc, #32]	; (8014c90 <rfhelp_init+0x60>)
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 8014c6e:	fab0 f080 	clz	r0, r0
 8014c72:	0940      	lsrs	r0, r0, #5
	init_done = true;
 8014c74:	2201      	movs	r2, #1
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 8014c76:	7008      	strb	r0, [r1, #0]
	init_done = true;
 8014c78:	701a      	strb	r2, [r3, #0]
}
 8014c7a:	bd70      	pop	{r4, r5, r6, pc}
 8014c7c:	200073e8 	.word	0x200073e8
 8014c80:	200073d4 	.word	0x200073d4
 8014c84:	200073f8 	.word	0x200073f8
 8014c88:	20007418 	.word	0x20007418
 8014c8c:	2000741d 	.word	0x2000741d
 8014c90:	200073d8 	.word	0x200073d8
	...

08014ca0 <rfhelp_restart>:
}

/**
 * Re-init the rf chip
 */
void rfhelp_restart(void) {
 8014ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	chMtxLock(&rf_mutex);
 8014ca2:	4e2b      	ldr	r6, [pc, #172]	; (8014d50 <rfhelp_restart+0xb0>)
	// TODO: make this file consistent with multiple
	// rx_addr and tx_addr, and the rest in general.
	rf_write_reg_byte(NRF_REG_EN_RXADDR, 0);
	rf_write_reg_byte(NRF_REG_DYNPD, 0);

	rf_set_crc_type(nrf_conf.crc_type);
 8014ca4:	4c2b      	ldr	r4, [pc, #172]	; (8014d54 <rfhelp_restart+0xb4>)
	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8014ca6:	4d2c      	ldr	r5, [pc, #176]	; (8014d58 <rfhelp_restart+0xb8>)
	tx_pipe0_addr_eq = true;

	rf_set_tx_addr(tx_addr, address_length);
 8014ca8:	4f2c      	ldr	r7, [pc, #176]	; (8014d5c <rfhelp_restart+0xbc>)
	chMtxLock(&rf_mutex);
 8014caa:	4630      	mov	r0, r6
 8014cac:	f7f8 fc70 	bl	800d590 <chMtxLock>
	rf_power_down();
 8014cb0:	f7ff fede 	bl	8014a70 <rf_power_down>
	rf_write_reg_byte(NRF_REG_EN_RXADDR, 0);
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	2002      	movs	r0, #2
 8014cb8:	f7ff fdda 	bl	8014870 <rf_write_reg_byte>
	rf_write_reg_byte(NRF_REG_DYNPD, 0);
 8014cbc:	2100      	movs	r1, #0
 8014cbe:	201c      	movs	r0, #28
 8014cc0:	f7ff fdd6 	bl	8014870 <rf_write_reg_byte>
	rf_set_crc_type(nrf_conf.crc_type);
 8014cc4:	78a0      	ldrb	r0, [r4, #2]
 8014cc6:	f7ff fe4b 	bl	8014960 <rf_set_crc_type>
	rf_set_retr_retries(nrf_conf.retries);
 8014cca:	7920      	ldrb	r0, [r4, #4]
 8014ccc:	f7ff fe70 	bl	80149b0 <rf_set_retr_retries>
	rf_set_retr_delay(nrf_conf.retry_delay);
 8014cd0:	78e0      	ldrb	r0, [r4, #3]
 8014cd2:	f7ff fe8d 	bl	80149f0 <rf_set_retr_delay>
	rf_set_power(nrf_conf.power);
 8014cd6:	7860      	ldrb	r0, [r4, #1]
 8014cd8:	f7ff fe1a 	bl	8014910 <rf_set_power>
	rf_set_speed(nrf_conf.speed);
 8014cdc:	7820      	ldrb	r0, [r4, #0]
 8014cde:	f7ff fdef 	bl	80148c0 <rf_set_speed>
	rf_set_address_width(NRF_AW_3); // Always use 3 byte address
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	f7ff fd84 	bl	80147f0 <rf_set_address_width>
	rf_set_frequency(2400 + (unsigned int)nrf_conf.channel);
 8014ce8:	7960      	ldrb	r0, [r4, #5]
 8014cea:	f500 6016 	add.w	r0, r0, #2400	; 0x960
 8014cee:	f7ff fd8f 	bl	8014810 <rf_set_frequency>
	rf_enable_features(NRF_FEATURE_DPL | NRF_FEATURE_DYN_ACK);
 8014cf2:	2005      	movs	r0, #5
 8014cf4:	f7ff ff7c 	bl	8014bf0 <rf_enable_features>
	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
 8014cf8:	2001      	movs	r0, #1
 8014cfa:	f7ff ff19 	bl	8014b30 <rf_enable_pipe_autoack>
	rf_enable_pipe_address(NRF_MASK_PIPE0);
 8014cfe:	2001      	movs	r0, #1
 8014d00:	f7ff ff36 	bl	8014b70 <rf_enable_pipe_address>
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);
 8014d04:	2001      	movs	r0, #1
 8014d06:	f7ff ff53 	bl	8014bb0 <rf_enable_pipe_dlp>
	memcpy(tx_addr, nrf_conf.address, 3);
 8014d0a:	f834 3f06 	ldrh.w	r3, [r4, #6]!
 8014d0e:	4814      	ldr	r0, [pc, #80]	; (8014d60 <rfhelp_restart+0xc0>)
	tx_pipe0_addr_eq = true;
 8014d10:	f8df c050 	ldr.w	ip, [pc, #80]	; 8014d64 <rfhelp_restart+0xc4>
	memcpy(tx_addr, nrf_conf.address, 3);
 8014d14:	78a2      	ldrb	r2, [r4, #2]
 8014d16:	8003      	strh	r3, [r0, #0]
	rf_set_tx_addr(tx_addr, address_length);
 8014d18:	6839      	ldr	r1, [r7, #0]
	memcpy(tx_addr, nrf_conf.address, 3);
 8014d1a:	7082      	strb	r2, [r0, #2]
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8014d1c:	70aa      	strb	r2, [r5, #2]
	tx_pipe0_addr_eq = true;
 8014d1e:	2201      	movs	r2, #1
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8014d20:	802b      	strh	r3, [r5, #0]
	tx_pipe0_addr_eq = true;
 8014d22:	f88c 2000 	strb.w	r2, [ip]
	rf_set_tx_addr(tx_addr, address_length);
 8014d26:	f7ff fd5b 	bl	80147e0 <rf_set_tx_addr>
	rf_set_rx_addr(0, rx_addr[0], address_length);
 8014d2a:	683a      	ldr	r2, [r7, #0]
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	2000      	movs	r0, #0
 8014d30:	f7ff fd4e 	bl	80147d0 <rf_set_rx_addr>

	rf_power_up();
 8014d34:	f7ff fe7c 	bl	8014a30 <rf_power_up>
	rf_mode_rx();
 8014d38:	f7ff feda 	bl	8014af0 <rf_mode_rx>
	rf_flush_all();
 8014d3c:	f7ff fd08 	bl	8014750 <rf_flush_all>
	rf_clear_irq();
 8014d40:	f7ff fd76 	bl	8014830 <rf_clear_irq>

	chMtxUnlock(&rf_mutex);
 8014d44:	4630      	mov	r0, r6
}
 8014d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	chMtxUnlock(&rf_mutex);
 8014d4a:	f7f8 bc31 	b.w	800d5b0 <chMtxUnlock>
 8014d4e:	bf00      	nop
 8014d50:	200073e8 	.word	0x200073e8
 8014d54:	200073dc 	.word	0x200073dc
 8014d58:	200073f8 	.word	0x200073f8
 8014d5c:	200073d4 	.word	0x200073d4
 8014d60:	20007418 	.word	0x20007418
 8014d64:	2000741d 	.word	0x2000741d
	...

08014d70 <rfhelp_update_conf>:
void rfhelp_update_conf(nrf_config *conf) {
 8014d70:	4602      	mov	r2, r0
	nrf_conf = *conf;
 8014d72:	4b07      	ldr	r3, [pc, #28]	; (8014d90 <rfhelp_update_conf+0x20>)
 8014d74:	6851      	ldr	r1, [r2, #4]
 8014d76:	6800      	ldr	r0, [r0, #0]
void rfhelp_update_conf(nrf_config *conf) {
 8014d78:	b430      	push	{r4, r5}
	if (init_done) {
 8014d7a:	4d06      	ldr	r5, [pc, #24]	; (8014d94 <rfhelp_update_conf+0x24>)
	nrf_conf = *conf;
 8014d7c:	8914      	ldrh	r4, [r2, #8]
	if (init_done) {
 8014d7e:	782a      	ldrb	r2, [r5, #0]
	nrf_conf = *conf;
 8014d80:	c303      	stmia	r3!, {r0, r1}
 8014d82:	801c      	strh	r4, [r3, #0]
	if (init_done) {
 8014d84:	b90a      	cbnz	r2, 8014d8a <rfhelp_update_conf+0x1a>
}
 8014d86:	bc30      	pop	{r4, r5}
 8014d88:	4770      	bx	lr
 8014d8a:	bc30      	pop	{r4, r5}
		rfhelp_restart();
 8014d8c:	f7ff bf88 	b.w	8014ca0 <rfhelp_restart>
 8014d90:	200073dc 	.word	0x200073dc
 8014d94:	200073d8 	.word	0x200073d8
	...

08014da0 <rfhelp_send_data>:
 * @return
 * 0: Send OK.
 * -1: Max RT.
 * -2: Timeout
 */
int rfhelp_send_data(char *data, int len, bool ack) {
 8014da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rf_mode_tx();
	rf_clear_irq();
	rf_flush_all();

	// Pipe0-address and tx-address must be equal for ack to work.
	if (!tx_pipe0_addr_eq && ack) {
 8014da2:	4e25      	ldr	r6, [pc, #148]	; (8014e38 <rfhelp_send_data+0x98>)
int rfhelp_send_data(char *data, int len, bool ack) {
 8014da4:	4604      	mov	r4, r0
	chMtxLock(&rf_mutex);
 8014da6:	4825      	ldr	r0, [pc, #148]	; (8014e3c <rfhelp_send_data+0x9c>)
int rfhelp_send_data(char *data, int len, bool ack) {
 8014da8:	460d      	mov	r5, r1
 8014daa:	4617      	mov	r7, r2
	chMtxLock(&rf_mutex);
 8014dac:	f7f8 fbf0 	bl	800d590 <chMtxLock>
	rf_mode_tx();
 8014db0:	f7ff fe7e 	bl	8014ab0 <rf_mode_tx>
	rf_clear_irq();
 8014db4:	f7ff fd3c 	bl	8014830 <rf_clear_irq>
	rf_flush_all();
 8014db8:	f7ff fcca 	bl	8014750 <rf_flush_all>
	if (!tx_pipe0_addr_eq && ack) {
 8014dbc:	7830      	ldrb	r0, [r6, #0]
 8014dbe:	bb10      	cbnz	r0, 8014e06 <rfhelp_send_data+0x66>
 8014dc0:	bb6f      	cbnz	r7, 8014e1e <rfhelp_send_data+0x7e>
	}

	if (ack) {
		rf_write_tx_payload(data, len);
	} else {
		rf_write_tx_payload_no_ack(data, len);
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f7ff fc7b 	bl	80146c0 <rf_write_tx_payload_no_ack>
int rfhelp_send_data(char *data, int len, bool ack) {
 8014dca:	253c      	movs	r5, #60	; 0x3c
 8014dcc:	e003      	b.n	8014dd6 <rfhelp_send_data+0x36>
		timeout--;

		if (NRF_STATUS_GET_TX_DS(s)) {
			retval = 0;
			break;
		} else if (NRF_STATUS_GET_MAX_RT(s)) {
 8014dce:	06e3      	lsls	r3, r4, #27
 8014dd0:	d420      	bmi.n	8014e14 <rfhelp_send_data+0x74>
			rf_clear_maxrt_irq();
			retval = -1;
			break;
		} else if (timeout == 0) {
 8014dd2:	3d01      	subs	r5, #1
 8014dd4:	d02d      	beq.n	8014e32 <rfhelp_send_data+0x92>
		int s = rf_status();
 8014dd6:	f7ff fcc3 	bl	8014760 <rf_status>
 8014dda:	4604      	mov	r4, r0
		chThdSleepMilliseconds(1);
 8014ddc:	200a      	movs	r0, #10
 8014dde:	f7f8 fa77 	bl	800d2d0 <chThdSleep>
		if (NRF_STATUS_GET_TX_DS(s)) {
 8014de2:	06a2      	lsls	r2, r4, #26
 8014de4:	d5f3      	bpl.n	8014dce <rfhelp_send_data+0x2e>
			retval = 0;
 8014de6:	2400      	movs	r4, #0
			break;
		}
	}

	// Restore pipe0 address
	if (!tx_pipe0_addr_eq && ack) {
 8014de8:	7830      	ldrb	r0, [r6, #0]
 8014dea:	b928      	cbnz	r0, 8014df8 <rfhelp_send_data+0x58>
 8014dec:	b127      	cbz	r7, 8014df8 <rfhelp_send_data+0x58>
		rf_set_rx_addr(0, rx_addr[0], address_length);
 8014dee:	4b14      	ldr	r3, [pc, #80]	; (8014e40 <rfhelp_send_data+0xa0>)
 8014df0:	4914      	ldr	r1, [pc, #80]	; (8014e44 <rfhelp_send_data+0xa4>)
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	f7ff fcec 	bl	80147d0 <rf_set_rx_addr>
	}

	rf_mode_rx();
 8014df8:	f7ff fe7a 	bl	8014af0 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 8014dfc:	480f      	ldr	r0, [pc, #60]	; (8014e3c <rfhelp_send_data+0x9c>)
 8014dfe:	f7f8 fbd7 	bl	800d5b0 <chMtxUnlock>

	return retval;
}
 8014e02:	4620      	mov	r0, r4
 8014e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ack) {
 8014e06:	2f00      	cmp	r7, #0
 8014e08:	d0db      	beq.n	8014dc2 <rfhelp_send_data+0x22>
		rf_write_tx_payload(data, len);
 8014e0a:	4629      	mov	r1, r5
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	f7ff fc3f 	bl	8014690 <rf_write_tx_payload>
 8014e12:	e7da      	b.n	8014dca <rfhelp_send_data+0x2a>
			rf_clear_maxrt_irq();
 8014e14:	f7ff fd1c 	bl	8014850 <rf_clear_maxrt_irq>
			retval = -1;
 8014e18:	f04f 34ff 	mov.w	r4, #4294967295
			break;
 8014e1c:	e7e4      	b.n	8014de8 <rfhelp_send_data+0x48>
		rf_set_rx_addr(0, tx_addr, address_length);
 8014e1e:	4b08      	ldr	r3, [pc, #32]	; (8014e40 <rfhelp_send_data+0xa0>)
 8014e20:	4909      	ldr	r1, [pc, #36]	; (8014e48 <rfhelp_send_data+0xa8>)
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	f7ff fcd4 	bl	80147d0 <rf_set_rx_addr>
		rf_write_tx_payload(data, len);
 8014e28:	4629      	mov	r1, r5
 8014e2a:	4620      	mov	r0, r4
 8014e2c:	f7ff fc30 	bl	8014690 <rf_write_tx_payload>
 8014e30:	e7cb      	b.n	8014dca <rfhelp_send_data+0x2a>
			retval = -2;
 8014e32:	f06f 0401 	mvn.w	r4, #1
 8014e36:	e7d7      	b.n	8014de8 <rfhelp_send_data+0x48>
 8014e38:	2000741d 	.word	0x2000741d
 8014e3c:	200073e8 	.word	0x200073e8
 8014e40:	200073d4 	.word	0x200073d4
 8014e44:	200073f8 	.word	0x200073f8
 8014e48:	20007418 	.word	0x20007418
 8014e4c:	00000000 	.word	0x00000000

08014e50 <rfhelp_send_data_crc>:
 * @return
 * 0: Send OK.
 * -1: Max RT.
 * -2: Timeout
 */
int rfhelp_send_data_crc(char *data, int len) {
 8014e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char buffer[len + 2];
 8014e52:	f101 0309 	add.w	r3, r1, #9
 8014e56:	f023 0307 	bic.w	r3, r3, #7
int rfhelp_send_data_crc(char *data, int len) {
 8014e5a:	af00      	add	r7, sp, #0
	char buffer[len + 2];
 8014e5c:	ebad 0d03 	sub.w	sp, sp, r3
int rfhelp_send_data_crc(char *data, int len) {
 8014e60:	460c      	mov	r4, r1
 8014e62:	4606      	mov	r6, r0
	unsigned short crc = crc16((unsigned char*)data, len);
 8014e64:	f7ff fb3c 	bl	80144e0 <crc16>

	memcpy(buffer, data, len);
 8014e68:	4622      	mov	r2, r4
	unsigned short crc = crc16((unsigned char*)data, len);
 8014e6a:	4605      	mov	r5, r0
	memcpy(buffer, data, len);
 8014e6c:	4631      	mov	r1, r6
 8014e6e:	4668      	mov	r0, sp
 8014e70:	f7f7 fe3e 	bl	800caf0 <memcpy>
	buffer[len] = (char)(crc >> 8);
	buffer[len + 1] = (char)(crc & 0xFF);
 8014e74:	eb0d 0304 	add.w	r3, sp, r4

	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 8014e78:	4a05      	ldr	r2, [pc, #20]	; (8014e90 <rfhelp_send_data_crc+0x40>)
	buffer[len] = (char)(crc >> 8);
 8014e7a:	0a28      	lsrs	r0, r5, #8
 8014e7c:	f80d 0004 	strb.w	r0, [sp, r4]
	char buffer[len + 2];
 8014e80:	1ca1      	adds	r1, r4, #2
	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 8014e82:	7a52      	ldrb	r2, [r2, #9]
	buffer[len + 1] = (char)(crc & 0xFF);
 8014e84:	705d      	strb	r5, [r3, #1]
	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 8014e86:	4668      	mov	r0, sp
 8014e88:	f7ff ff8a 	bl	8014da0 <rfhelp_send_data>
}
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e90:	200073dc 	.word	0x200073dc
	...

08014ea0 <rx_thread>:
 8014ea0:	4b02      	ldr	r3, [pc, #8]	; (8014eac <rx_thread+0xc>)
 8014ea2:	4a03      	ldr	r2, [pc, #12]	; (8014eb0 <rx_thread+0x10>)
 8014ea4:	699b      	ldr	r3, [r3, #24]
 8014ea6:	619a      	str	r2, [r3, #24]
 8014ea8:	e7fe      	b.n	8014ea8 <rx_thread+0x8>
 8014eaa:	bf00      	nop
 8014eac:	20000c90 	.word	0x20000c90
 8014eb0:	08018450 	.word	0x08018450
	...

08014ec0 <tx_thread>:
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 8014ec0:	b570      	push	{r4, r5, r6, lr}
 8014ec2:	4b0c      	ldr	r3, [pc, #48]	; (8014ef4 <tx_thread+0x34>)
 8014ec4:	4a0c      	ldr	r2, [pc, #48]	; (8014ef8 <tx_thread+0x38>)
 8014ec6:	699b      	ldr	r3, [r3, #24]
 8014ec8:	4c0c      	ldr	r4, [pc, #48]	; (8014efc <tx_thread+0x3c>)
 8014eca:	619a      	str	r2, [r3, #24]
 8014ecc:	b082      	sub	sp, #8
		nosend_cnt++;

		if (nosend_cnt >= ALIVE_INTERVAL) {
			uint8_t pl[2];
			int32_t index = 0;
			pl[index++] = MOTE_PACKET_ALIVE;
 8014ece:	2602      	movs	r6, #2
			rf_tx_wrapper((char*)pl, index);
			nosend_cnt = 0;
 8014ed0:	2500      	movs	r5, #0
 8014ed2:	e002      	b.n	8014eda <tx_thread+0x1a>
		}

		chThdSleepMilliseconds(1);
 8014ed4:	200a      	movs	r0, #10
 8014ed6:	f7f8 f9fb 	bl	800d2d0 <chThdSleep>
		nosend_cnt++;
 8014eda:	6823      	ldr	r3, [r4, #0]
 8014edc:	3301      	adds	r3, #1
		if (nosend_cnt >= ALIVE_INTERVAL) {
 8014ede:	2b31      	cmp	r3, #49	; 0x31
		nosend_cnt++;
 8014ee0:	6023      	str	r3, [r4, #0]
		if (nosend_cnt >= ALIVE_INTERVAL) {
 8014ee2:	ddf7      	ble.n	8014ed4 <tx_thread+0x14>
	int res = rfhelp_send_data_crc(data, len);
 8014ee4:	2101      	movs	r1, #1
 8014ee6:	a801      	add	r0, sp, #4
			pl[index++] = MOTE_PACKET_ALIVE;
 8014ee8:	f88d 6004 	strb.w	r6, [sp, #4]
	int res = rfhelp_send_data_crc(data, len);
 8014eec:	f7ff ffb0 	bl	8014e50 <rfhelp_send_data_crc>
			nosend_cnt = 0;
 8014ef0:	6025      	str	r5, [r4, #0]
 8014ef2:	e7ef      	b.n	8014ed4 <tx_thread+0x14>
 8014ef4:	20000c90 	.word	0x20000c90
 8014ef8:	08018460 	.word	0x08018460
 8014efc:	20007420 	.word	0x20007420

08014f00 <nrf_driver_init>:
void nrf_driver_init(void) {
 8014f00:	b510      	push	{r4, lr}
 8014f02:	b082      	sub	sp, #8
	rfhelp_init();
 8014f04:	f7ff fe94 	bl	8014c30 <rfhelp_init>
	nosend_cnt = 0;
 8014f08:	4a0a      	ldr	r2, [pc, #40]	; (8014f34 <nrf_driver_init+0x34>)
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 8014f0a:	4b0b      	ldr	r3, [pc, #44]	; (8014f38 <nrf_driver_init+0x38>)
 8014f0c:	480b      	ldr	r0, [pc, #44]	; (8014f3c <nrf_driver_init+0x3c>)
	nosend_cnt = 0;
 8014f0e:	2400      	movs	r4, #0
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 8014f10:	9400      	str	r4, [sp, #0]
 8014f12:	f640 1198 	movw	r1, #2456	; 0x998
	nosend_cnt = 0;
 8014f16:	6014      	str	r4, [r2, #0]
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 8014f18:	223f      	movs	r2, #63	; 0x3f
 8014f1a:	f7f8 f9a1 	bl	800d260 <chThdCreateStatic>
	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
 8014f1e:	9400      	str	r4, [sp, #0]
 8014f20:	4b07      	ldr	r3, [pc, #28]	; (8014f40 <nrf_driver_init+0x40>)
 8014f22:	4808      	ldr	r0, [pc, #32]	; (8014f44 <nrf_driver_init+0x44>)
 8014f24:	223f      	movs	r2, #63	; 0x3f
 8014f26:	f44f 7166 	mov.w	r1, #920	; 0x398
 8014f2a:	f7f8 f999 	bl	800d260 <chThdCreateStatic>
}
 8014f2e:	b002      	add	sp, #8
 8014f30:	bd10      	pop	{r4, pc}
 8014f32:	bf00      	nop
 8014f34:	20007420 	.word	0x20007420
 8014f38:	08014ea1 	.word	0x08014ea1
 8014f3c:	20007428 	.word	0x20007428
 8014f40:	08014ec1 	.word	0x08014ec1
 8014f44:	20007dc0 	.word	0x20007dc0
	...

08014f50 <app_get_configuration>:
	}
}

const app_configuration* app_get_configuration(void) {
	return &appconf;
}
 8014f50:	4800      	ldr	r0, [pc, #0]	; (8014f54 <app_get_configuration+0x4>)
 8014f52:	4770      	bx	lr
 8014f54:	20008158 	.word	0x20008158
	...

08014f60 <app_set_configuration>:
 * should be done at boot. Some apps don't have any configuration options.
 *
 * @param conf
 * The new configuration to use.
 */
void app_set_configuration(app_configuration *conf) {
 8014f60:	b510      	push	{r4, lr}
	appconf = *conf;
 8014f62:	4c0d      	ldr	r4, [pc, #52]	; (8014f98 <app_set_configuration+0x38>)
 8014f64:	4601      	mov	r1, r0
 8014f66:	22a0      	movs	r2, #160	; 0xa0
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f7f7 fdc1 	bl	800caf0 <memcpy>
	app_ppm_configure(&appconf.app_ppm_conf);
 8014f6e:	f104 0018 	add.w	r0, r4, #24
 8014f72:	f000 f8cd 	bl	8015110 <app_ppm_configure>
	app_adc_configure(&appconf.app_adc_conf);
 8014f76:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8014f7a:	f000 f929 	bl	80151d0 <app_adc_configure>
	app_uartcomm_configure(appconf.app_uart_baudrate);
 8014f7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8014f80:	f000 f9de 	bl	8015340 <app_uartcomm_configure>
	app_nunchuk_configure(&appconf.app_chuk_conf);
 8014f84:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8014f88:	f000 fa12 	bl	80153b0 <app_nunchuk_configure>
	rfhelp_update_conf(&appconf.app_nrf_conf);
 8014f8c:	f104 0094 	add.w	r0, r4, #148	; 0x94
}
 8014f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rfhelp_update_conf(&appconf.app_nrf_conf);
 8014f94:	f7ff beec 	b.w	8014d70 <rfhelp_update_conf>
 8014f98:	20008158 	.word	0x20008158
 8014f9c:	00000000 	.word	0x00000000

08014fa0 <app_init>:
void app_init(app_configuration *conf) {
 8014fa0:	b508      	push	{r3, lr}
	app_set_configuration(conf);
 8014fa2:	f7ff ffdd 	bl	8014f60 <app_set_configuration>
	switch (appconf.app_to_use) {
 8014fa6:	4b1b      	ldr	r3, [pc, #108]	; (8015014 <app_init+0x74>)
 8014fa8:	7d1b      	ldrb	r3, [r3, #20]
 8014faa:	3b01      	subs	r3, #1
 8014fac:	2b06      	cmp	r3, #6
 8014fae:	d82f      	bhi.n	8015010 <app_init+0x70>
 8014fb0:	e8df f003 	tbb	[pc, r3]
 8014fb4:	19130e0a 	.word	0x19130e0a
 8014fb8:	2a21      	.short	0x2a21
 8014fba:	04          	.byte	0x04
 8014fbb:	00          	.byte	0x00
		nrf_driver_init();
 8014fbc:	f7ff ffa0 	bl	8014f00 <nrf_driver_init>
}
 8014fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rfhelp_restart();
 8014fc4:	f7ff be6c 	b.w	8014ca0 <rfhelp_restart>
}
 8014fc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_ppm_start();
 8014fcc:	f000 b8c8 	b.w	8015160 <app_ppm_start>
		app_adc_start(true);
 8014fd0:	2001      	movs	r0, #1
}
 8014fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_adc_start(true);
 8014fd6:	f000 b913 	b.w	8015200 <app_adc_start>
		hw_stop_i2c();
 8014fda:	f7fc f9e9 	bl	80113b0 <hw_stop_i2c>
}
 8014fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_uartcomm_start();
 8014fe2:	f000 b97d 	b.w	80152e0 <app_uartcomm_start>
		hw_stop_i2c();
 8014fe6:	f7fc f9e3 	bl	80113b0 <hw_stop_i2c>
		app_ppm_start();
 8014fea:	f000 f8b9 	bl	8015160 <app_ppm_start>
}
 8014fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_uartcomm_start();
 8014ff2:	f000 b975 	b.w	80152e0 <app_uartcomm_start>
		hw_stop_i2c();
 8014ff6:	f7fc f9db 	bl	80113b0 <hw_stop_i2c>
		app_adc_start(false);
 8014ffa:	2000      	movs	r0, #0
 8014ffc:	f000 f900 	bl	8015200 <app_adc_start>
}
 8015000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_uartcomm_start();
 8015004:	f000 b96c 	b.w	80152e0 <app_uartcomm_start>
}
 8015008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_nunchuk_start();
 801500c:	f000 b9e0 	b.w	80153d0 <app_nunchuk_start>
}
 8015010:	bd08      	pop	{r3, pc}
 8015012:	bf00      	nop
 8015014:	20008158 	.word	0x20008158
	...

08015020 <ppm_thread>:
 8015020:	4a15      	ldr	r2, [pc, #84]	; (8015078 <ppm_thread+0x58>)
 8015022:	4916      	ldr	r1, [pc, #88]	; (801507c <ppm_thread+0x5c>)
 8015024:	6992      	ldr	r2, [r2, #24]
 8015026:	4d16      	ldr	r5, [pc, #88]	; (8015080 <ppm_thread+0x60>)
	chVTSetI(&vt, MS2ST(2), update, p);
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
	chSysUnlockFromISR();
}

static THD_FUNCTION(ppm_thread, arg) {
 8015028:	b508      	push	{r3, lr}
	(void)arg;

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();

	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 801502a:	4b16      	ldr	r3, [pc, #88]	; (8015084 <ppm_thread+0x64>)
 801502c:	6191      	str	r1, [r2, #24]
 801502e:	ed93 0a03 	vldr	s0, [r3, #12]
 8015032:	edd3 0a04 	vldr	s1, [r3, #16]
 8015036:	7d18      	ldrb	r0, [r3, #20]
	ppm_tp = chThdGetSelfX();
 8015038:	4b13      	ldr	r3, [pc, #76]	; (8015088 <ppm_thread+0x68>)
 801503a:	601a      	str	r2, [r3, #0]
	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 801503c:	f7fe fee8 	bl	8013e10 <servodec_set_pulse_options>
	servodec_init(servodec_func);
 8015040:	4812      	ldr	r0, [pc, #72]	; (801508c <ppm_thread+0x6c>)
 8015042:	f7fe febd 	bl	8013dc0 <servodec_init>
	is_running = true;
 8015046:	4b12      	ldr	r3, [pc, #72]	; (8015090 <ppm_thread+0x70>)
 8015048:	2201      	movs	r2, #1
 801504a:	701a      	strb	r2, [r3, #0]
	for(;;) {
		chEvtWaitAny((eventmask_t) 1);

		if (timeout_has_timeout() || servodec_get_time_since_update() > timeout_get_timeout_msec() ||
				mc_interface_get_fault() != FAULT_CODE_NONE) {
			pulses_without_power = 0;
 801504c:	2400      	movs	r4, #0
 801504e:	e000      	b.n	8015052 <ppm_thread+0x32>
 8015050:	602c      	str	r4, [r5, #0]
		chEvtWaitAny((eventmask_t) 1);
 8015052:	2001      	movs	r0, #1
 8015054:	f7f8 fb54 	bl	800d700 <chEvtWaitAny>
		if (timeout_has_timeout() || servodec_get_time_since_update() > timeout_get_timeout_msec() ||
 8015058:	f7ff fa12 	bl	8014480 <timeout_has_timeout>
 801505c:	2800      	cmp	r0, #0
 801505e:	d1f7      	bne.n	8015050 <ppm_thread+0x30>
 8015060:	f7fe fee6 	bl	8013e30 <servodec_get_time_since_update>
 8015064:	4606      	mov	r6, r0
 8015066:	f7ff fa13 	bl	8014490 <timeout_get_timeout_msec>
 801506a:	4286      	cmp	r6, r0
 801506c:	d8f0      	bhi.n	8015050 <ppm_thread+0x30>
				mc_interface_get_fault() != FAULT_CODE_NONE) {
 801506e:	f7fd f89f 	bl	80121b0 <mc_interface_get_fault>
		if (timeout_has_timeout() || servodec_get_time_since_update() > timeout_get_timeout_msec() ||
 8015072:	2800      	cmp	r0, #0
 8015074:	d1ec      	bne.n	8015050 <ppm_thread+0x30>
 8015076:	e7ec      	b.n	8015052 <ppm_thread+0x32>
 8015078:	20000c90 	.word	0x20000c90
 801507c:	08018470 	.word	0x08018470
 8015080:	200087c4 	.word	0x200087c4
 8015084:	200081f8 	.word	0x200081f8
 8015088:	200087c0 	.word	0x200087c0
 801508c:	080150a1 	.word	0x080150a1
 8015090:	20008220 	.word	0x20008220
	...

080150a0 <servodec_func>:
static void servodec_func(void) {
 80150a0:	b508      	push	{r3, lr}
 80150a2:	2320      	movs	r3, #32
 80150a4:	f383 8811 	msr	BASEPRI, r3
	timeout_reset();
 80150a8:	f7ff f9da 	bl	8014460 <timeout_reset>
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 80150ac:	4b04      	ldr	r3, [pc, #16]	; (80150c0 <servodec_func+0x20>)
 80150ae:	2101      	movs	r1, #1
 80150b0:	6818      	ldr	r0, [r3, #0]
 80150b2:	f7f8 fae5 	bl	800d680 <chEvtSignalI>
 80150b6:	2300      	movs	r3, #0
 80150b8:	f383 8811 	msr	BASEPRI, r3
}
 80150bc:	bd08      	pop	{r3, pc}
 80150be:	bf00      	nop
 80150c0:	200087c0 	.word	0x200087c0
	...

080150d0 <update>:
static void update(void *p) {
 80150d0:	b510      	push	{r4, lr}
 80150d2:	2320      	movs	r3, #32
 80150d4:	4604      	mov	r4, r0
 80150d6:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 80150da:	480a      	ldr	r0, [pc, #40]	; (8015104 <update+0x34>)
 80150dc:	68c3      	ldr	r3, [r0, #12]
 80150de:	b10b      	cbz	r3, 80150e4 <update+0x14>
    chVTDoResetI(vtp);
 80150e0:	f7f7 ff0e 	bl	800cf00 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 80150e4:	4623      	mov	r3, r4
 80150e6:	4a08      	ldr	r2, [pc, #32]	; (8015108 <update+0x38>)
 80150e8:	4806      	ldr	r0, [pc, #24]	; (8015104 <update+0x34>)
 80150ea:	2114      	movs	r1, #20
 80150ec:	f7f7 fee8 	bl	800cec0 <chVTDoSetI>
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 80150f0:	4b06      	ldr	r3, [pc, #24]	; (801510c <update+0x3c>)
 80150f2:	2101      	movs	r1, #1
 80150f4:	6818      	ldr	r0, [r3, #0]
 80150f6:	f7f8 fac3 	bl	800d680 <chEvtSignalI>
 80150fa:	2300      	movs	r3, #0
 80150fc:	f383 8811 	msr	BASEPRI, r3
}
 8015100:	bd10      	pop	{r4, pc}
 8015102:	bf00      	nop
 8015104:	200087c8 	.word	0x200087c8
 8015108:	080150d1 	.word	0x080150d1
 801510c:	200087c0 	.word	0x200087c0

08015110 <app_ppm_configure>:
void app_ppm_configure(ppm_config *conf) {
 8015110:	b4f0      	push	{r4, r5, r6, r7}
	config = *conf;
 8015112:	4605      	mov	r5, r0
 8015114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015116:	4e0c      	ldr	r6, [pc, #48]	; (8015148 <app_ppm_configure+0x38>)
	pulses_without_power = 0;
 8015118:	4f0c      	ldr	r7, [pc, #48]	; (801514c <app_ppm_configure+0x3c>)
	config = *conf;
 801511a:	4634      	mov	r4, r6
 801511c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801511e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015122:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015126:	e884 0003 	stmia.w	r4, {r0, r1}
	pulses_without_power = 0;
 801512a:	2200      	movs	r2, #0
	if (is_running) {
 801512c:	4b08      	ldr	r3, [pc, #32]	; (8015150 <app_ppm_configure+0x40>)
	pulses_without_power = 0;
 801512e:	603a      	str	r2, [r7, #0]
	if (is_running) {
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	b90b      	cbnz	r3, 8015138 <app_ppm_configure+0x28>
}
 8015134:	bcf0      	pop	{r4, r5, r6, r7}
 8015136:	4770      	bx	lr
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8015138:	ed96 0a03 	vldr	s0, [r6, #12]
 801513c:	edd6 0a04 	vldr	s1, [r6, #16]
 8015140:	7d30      	ldrb	r0, [r6, #20]
}
 8015142:	bcf0      	pop	{r4, r5, r6, r7}
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8015144:	f7fe be64 	b.w	8013e10 <servodec_set_pulse_options>
 8015148:	200081f8 	.word	0x200081f8
 801514c:	200087c4 	.word	0x200087c4
 8015150:	20008220 	.word	0x20008220
	...

08015160 <app_ppm_start>:
void app_ppm_start(void) {
 8015160:	b500      	push	{lr}
 8015162:	b083      	sub	sp, #12
	chThdCreateStatic(ppm_thread_wa, sizeof(ppm_thread_wa), NORMALPRIO, ppm_thread, NULL);
 8015164:	2300      	movs	r3, #0
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	2240      	movs	r2, #64	; 0x40
 801516a:	4b0d      	ldr	r3, [pc, #52]	; (80151a0 <app_ppm_start+0x40>)
 801516c:	480d      	ldr	r0, [pc, #52]	; (80151a4 <app_ppm_start+0x44>)
 801516e:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8015172:	f7f8 f875 	bl	800d260 <chThdCreateStatic>
 8015176:	2320      	movs	r3, #32
 8015178:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 801517c:	480a      	ldr	r0, [pc, #40]	; (80151a8 <app_ppm_start+0x48>)
 801517e:	68c3      	ldr	r3, [r0, #12]
 8015180:	b10b      	cbz	r3, 8015186 <app_ppm_start+0x26>
    chVTDoResetI(vtp);
 8015182:	f7f7 febd 	bl	800cf00 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8015186:	2300      	movs	r3, #0
 8015188:	4a08      	ldr	r2, [pc, #32]	; (80151ac <app_ppm_start+0x4c>)
 801518a:	4807      	ldr	r0, [pc, #28]	; (80151a8 <app_ppm_start+0x48>)
 801518c:	210a      	movs	r1, #10
 801518e:	f7f7 fe97 	bl	800cec0 <chVTDoSetI>
 8015192:	2300      	movs	r3, #0
 8015194:	f383 8811 	msr	BASEPRI, r3
}
 8015198:	b003      	add	sp, #12
 801519a:	f85d fb04 	ldr.w	pc, [sp], #4
 801519e:	bf00      	nop
 80151a0:	08015021 	.word	0x08015021
 80151a4:	20008228 	.word	0x20008228
 80151a8:	200087c8 	.word	0x200087c8
 80151ac:	080150d1 	.word	0x080150d1

080151b0 <adc_thread>:
 80151b0:	4b02      	ldr	r3, [pc, #8]	; (80151bc <adc_thread+0xc>)
 80151b2:	4a03      	ldr	r2, [pc, #12]	; (80151c0 <adc_thread+0x10>)
 80151b4:	699b      	ldr	r3, [r3, #24]
 80151b6:	619a      	str	r2, [r3, #24]
					mc_interface_set_current(current_out);
				}
			}
		}
	}*/
}
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	20000c90 	.word	0x20000c90
 80151c0:	08018480 	.word	0x08018480
	...

080151d0 <app_adc_configure>:
void app_adc_configure(adc_config *conf) {
 80151d0:	b470      	push	{r4, r5, r6}
	config = *conf;
 80151d2:	4605      	mov	r5, r0
 80151d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151d6:	4c06      	ldr	r4, [pc, #24]	; (80151f0 <app_adc_configure+0x20>)
	ms_without_power = 0.0;
 80151d8:	4e06      	ldr	r6, [pc, #24]	; (80151f4 <app_adc_configure+0x24>)
	config = *conf;
 80151da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	ms_without_power = 0.0;
 80151e4:	2300      	movs	r3, #0
	config = *conf;
 80151e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ms_without_power = 0.0;
 80151ea:	6033      	str	r3, [r6, #0]
}
 80151ec:	bc70      	pop	{r4, r5, r6}
 80151ee:	4770      	bx	lr
 80151f0:	20008d78 	.word	0x20008d78
 80151f4:	20008da4 	.word	0x20008da4
	...

08015200 <app_adc_start>:
void app_adc_start(bool use_rx_tx) {
 8015200:	b530      	push	{r4, r5, lr}
 8015202:	b083      	sub	sp, #12
	use_rx_tx_as_buttons = use_rx_tx;
 8015204:	4c06      	ldr	r4, [pc, #24]	; (8015220 <app_adc_start+0x20>)
	chThdCreateStatic(adc_thread_wa, sizeof(adc_thread_wa), NORMALPRIO, adc_thread, NULL);
 8015206:	4b07      	ldr	r3, [pc, #28]	; (8015224 <app_adc_start+0x24>)
 8015208:	2200      	movs	r2, #0
void app_adc_start(bool use_rx_tx) {
 801520a:	4605      	mov	r5, r0
	chThdCreateStatic(adc_thread_wa, sizeof(adc_thread_wa), NORMALPRIO, adc_thread, NULL);
 801520c:	9200      	str	r2, [sp, #0]
 801520e:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8015212:	2240      	movs	r2, #64	; 0x40
 8015214:	4804      	ldr	r0, [pc, #16]	; (8015228 <app_adc_start+0x28>)
	use_rx_tx_as_buttons = use_rx_tx;
 8015216:	7025      	strb	r5, [r4, #0]
	chThdCreateStatic(adc_thread_wa, sizeof(adc_thread_wa), NORMALPRIO, adc_thread, NULL);
 8015218:	f7f8 f822 	bl	800d260 <chThdCreateStatic>
}
 801521c:	b003      	add	sp, #12
 801521e:	bd30      	pop	{r4, r5, pc}
 8015220:	20008da8 	.word	0x20008da8
 8015224:	080151b1 	.word	0x080151b1
 8015228:	200087e0 	.word	0x200087e0
 801522c:	00000000 	.word	0x00000000

08015230 <txend1>:
 * This callback is invoked when a transmission buffer has been completely
 * read by the driver.
 */
static void txend1(UARTDriver *uartp) {
	(void)uartp;
}
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
	...

08015240 <rxerr>:
 * as parameter.
 */
static void rxerr(UARTDriver *uartp, uartflags_t e) {
	(void)uartp;
	(void)e;
}
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
	...

08015250 <packet_process_thread>:
	if (is_running) {
		uartStart(&HW_UART_DEV, &uart_cfg);
	}
}

static THD_FUNCTION(packet_process_thread, arg) {
 8015250:	b508      	push	{r3, lr}
 8015252:	4b05      	ldr	r3, [pc, #20]	; (8015268 <packet_process_thread+0x18>)
	(void)arg;

	chRegSetThreadName("uartcomm process");

	process_tp = chThdGetSelfX();
 8015254:	4a05      	ldr	r2, [pc, #20]	; (801526c <packet_process_thread+0x1c>)
 8015256:	699b      	ldr	r3, [r3, #24]
 8015258:	4905      	ldr	r1, [pc, #20]	; (8015270 <packet_process_thread+0x20>)
 801525a:	6199      	str	r1, [r3, #24]
 801525c:	6013      	str	r3, [r2, #0]

	for(;;) {
		chEvtWaitAny((eventmask_t) 1);
 801525e:	2001      	movs	r0, #1
 8015260:	f7f8 fa4e 	bl	800d700 <chEvtWaitAny>
 8015264:	e7fb      	b.n	801525e <packet_process_thread+0xe>
 8015266:	bf00      	nop
 8015268:	20000c90 	.word	0x20000c90
 801526c:	20009f48 	.word	0x20009f48
 8015270:	08018490 	.word	0x08018490
	...

08015280 <rxchar>:
	serial_rx_buffer[serial_rx_write_pos++] = c;
 8015280:	4a0a      	ldr	r2, [pc, #40]	; (80152ac <rxchar+0x2c>)
static void rxchar(UARTDriver *uartp, uint16_t c) {
 8015282:	b508      	push	{r3, lr}
	serial_rx_buffer[serial_rx_write_pos++] = c;
 8015284:	6813      	ldr	r3, [r2, #0]
 8015286:	3301      	adds	r3, #1
	if (serial_rx_write_pos == SERIAL_RX_BUFFER_SIZE) {
 8015288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		serial_rx_write_pos = 0;
 801528c:	bf08      	it	eq
 801528e:	2300      	moveq	r3, #0
 8015290:	6013      	str	r3, [r2, #0]
 8015292:	2320      	movs	r3, #32
 8015294:	f383 8811 	msr	BASEPRI, r3
	chEvtSignalI(process_tp, (eventmask_t) 1);
 8015298:	4b05      	ldr	r3, [pc, #20]	; (80152b0 <rxchar+0x30>)
 801529a:	2101      	movs	r1, #1
 801529c:	6818      	ldr	r0, [r3, #0]
 801529e:	f7f8 f9ef 	bl	800d680 <chEvtSignalI>
 80152a2:	2300      	movs	r3, #0
 80152a4:	f383 8811 	msr	BASEPRI, r3
}
 80152a8:	bd08      	pop	{r3, pc}
 80152aa:	bf00      	nop
 80152ac:	20009f4c 	.word	0x20009f4c
 80152b0:	20009f48 	.word	0x20009f48
	...

080152c0 <rxend>:
 80152c0:	4770      	bx	lr
 80152c2:	bf00      	nop
	...

080152d0 <txend2>:
 80152d0:	4770      	bx	lr
 80152d2:	bf00      	nop
	...

080152e0 <app_uartcomm_start>:
void app_uartcomm_start(void) {
 80152e0:	b530      	push	{r4, r5, lr}
	palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) | PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_PULLUP);
 80152e2:	4c10      	ldr	r4, [pc, #64]	; (8015324 <app_uartcomm_start+0x44>)
	uartStart(&HW_UART_DEV, &uart_cfg);
 80152e4:	4910      	ldr	r1, [pc, #64]	; (8015328 <app_uartcomm_start+0x48>)
 80152e6:	4811      	ldr	r0, [pc, #68]	; (801532c <app_uartcomm_start+0x4c>)
void app_uartcomm_start(void) {
 80152e8:	b083      	sub	sp, #12
	uartStart(&HW_UART_DEV, &uart_cfg);
 80152ea:	f7f8 ff11 	bl	800e110 <uartStart>
	palSetPadMode(HW_UART_TX_PORT, HW_UART_TX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) | PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_PULLUP);
 80152ee:	4620      	mov	r0, r4
 80152f0:	f240 423a 	movw	r2, #1082	; 0x43a
 80152f4:	2140      	movs	r1, #64	; 0x40
 80152f6:	f7fa f823 	bl	800f340 <_pal_lld_setgroupmode>
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) | PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_PULLUP);
 80152fa:	4620      	mov	r0, r4
 80152fc:	f240 423a 	movw	r2, #1082	; 0x43a
 8015300:	2180      	movs	r1, #128	; 0x80
	is_running = 1;
 8015302:	4c0b      	ldr	r4, [pc, #44]	; (8015330 <app_uartcomm_start+0x50>)
	palSetPadMode(HW_UART_RX_PORT, HW_UART_RX_PIN, PAL_MODE_ALTERNATE(HW_UART_GPIO_AF) | PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_PULLUP);
 8015304:	f7fa f81c 	bl	800f340 <_pal_lld_setgroupmode>
	is_running = 1;
 8015308:	2501      	movs	r5, #1
	chThdCreateStatic(packet_process_thread_wa, sizeof(packet_process_thread_wa), NORMALPRIO, packet_process_thread, NULL);
 801530a:	2200      	movs	r2, #0
 801530c:	9200      	str	r2, [sp, #0]
 801530e:	4b09      	ldr	r3, [pc, #36]	; (8015334 <app_uartcomm_start+0x54>)
	is_running = 1;
 8015310:	6025      	str	r5, [r4, #0]
	chThdCreateStatic(packet_process_thread_wa, sizeof(packet_process_thread_wa), NORMALPRIO, packet_process_thread, NULL);
 8015312:	2240      	movs	r2, #64	; 0x40
 8015314:	f241 1198 	movw	r1, #4504	; 0x1198
 8015318:	4807      	ldr	r0, [pc, #28]	; (8015338 <app_uartcomm_start+0x58>)
 801531a:	f7f7 ffa1 	bl	800d260 <chThdCreateStatic>
}
 801531e:	b003      	add	sp, #12
 8015320:	bd30      	pop	{r4, r5, pc}
 8015322:	bf00      	nop
 8015324:	40020800 	.word	0x40020800
 8015328:	20000840 	.word	0x20000840
 801532c:	20001304 	.word	0x20001304
 8015330:	20008dac 	.word	0x20008dac
 8015334:	08015251 	.word	0x08015251
 8015338:	20008db0 	.word	0x20008db0
 801533c:	00000000 	.word	0x00000000

08015340 <app_uartcomm_configure>:
	if (is_running) {
 8015340:	4b04      	ldr	r3, [pc, #16]	; (8015354 <app_uartcomm_configure+0x14>)
	uart_cfg.speed = baudrate;
 8015342:	4905      	ldr	r1, [pc, #20]	; (8015358 <app_uartcomm_configure+0x18>)
	if (is_running) {
 8015344:	681b      	ldr	r3, [r3, #0]
	uart_cfg.speed = baudrate;
 8015346:	6148      	str	r0, [r1, #20]
	if (is_running) {
 8015348:	b903      	cbnz	r3, 801534c <app_uartcomm_configure+0xc>
}
 801534a:	4770      	bx	lr
		uartStart(&HW_UART_DEV, &uart_cfg);
 801534c:	4803      	ldr	r0, [pc, #12]	; (801535c <app_uartcomm_configure+0x1c>)
 801534e:	f7f8 bedf 	b.w	800e110 <uartStart>
 8015352:	bf00      	nop
 8015354:	20008dac 	.word	0x20008dac
 8015358:	20000840 	.word	0x20000840
 801535c:	20001304 	.word	0x20001304

08015360 <output_thread>:

		chThdSleepMilliseconds(10);
	}
}

static THD_FUNCTION(output_thread, arg) {
 8015360:	b508      	push	{r3, lr}
 8015362:	4b0c      	ldr	r3, [pc, #48]	; (8015394 <output_thread+0x34>)
 8015364:	4a0c      	ldr	r2, [pc, #48]	; (8015398 <output_thread+0x38>)
 8015366:	699b      	ldr	r3, [r3, #24]
 8015368:	4c0c      	ldr	r4, [pc, #48]	; (801539c <output_thread+0x3c>)
 801536a:	4d0d      	ldr	r5, [pc, #52]	; (80153a0 <output_thread+0x40>)
 801536c:	619a      	str	r2, [r3, #24]
	(void)arg;

	chRegSetThreadName("Nunchuk output");

	for(;;) {
		chThdSleepMilliseconds(OUTPUT_ITERATION_TIME_MS);
 801536e:	200a      	movs	r0, #10
 8015370:	f7f7 ffae 	bl	800d2d0 <chThdSleep>

		if (timeout_has_timeout() || chuck_error != 0 || config.ctrl_type == CHUK_CTRL_TYPE_NONE) {
 8015374:	f7ff f884 	bl	8014480 <timeout_has_timeout>
 8015378:	2800      	cmp	r0, #0
 801537a:	d1f8      	bne.n	801536e <output_thread+0xe>
 801537c:	6823      	ldr	r3, [r4, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d1f5      	bne.n	801536e <output_thread+0xe>
		chThdSleepMilliseconds(OUTPUT_ITERATION_TIME_MS);
 8015382:	200a      	movs	r0, #10
		if (timeout_has_timeout() || chuck_error != 0 || config.ctrl_type == CHUK_CTRL_TYPE_NONE) {
 8015384:	782b      	ldrb	r3, [r5, #0]
		chThdSleepMilliseconds(OUTPUT_ITERATION_TIME_MS);
 8015386:	f7f7 ffa3 	bl	800d2d0 <chThdSleep>
		if (timeout_has_timeout() || chuck_error != 0 || config.ctrl_type == CHUK_CTRL_TYPE_NONE) {
 801538a:	f7ff f879 	bl	8014480 <timeout_has_timeout>
 801538e:	2800      	cmp	r0, #0
 8015390:	d1ed      	bne.n	801536e <output_thread+0xe>
 8015392:	e7f3      	b.n	801537c <output_thread+0x1c>
 8015394:	20000c90 	.word	0x20000c90
 8015398:	080184c0 	.word	0x080184c0
 801539c:	20009f68 	.word	0x20009f68
 80153a0:	2000a508 	.word	0x2000a508
	...

080153b0 <app_nunchuk_configure>:
void app_nunchuk_configure(chuk_config *conf) {
 80153b0:	b430      	push	{r4, r5}
	config = *conf;
 80153b2:	4605      	mov	r5, r0
 80153b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153b6:	4c04      	ldr	r4, [pc, #16]	; (80153c8 <app_nunchuk_configure+0x18>)
 80153b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153be:	682b      	ldr	r3, [r5, #0]
 80153c0:	6023      	str	r3, [r4, #0]
}
 80153c2:	bc30      	pop	{r4, r5}
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	2000a508 	.word	0x2000a508
 80153cc:	00000000 	.word	0x00000000

080153d0 <app_nunchuk_start>:
void app_nunchuk_start(void) {
 80153d0:	b530      	push	{r4, r5, lr}
 80153d2:	b083      	sub	sp, #12
	chuck_d.js_y = 128;
 80153d4:	4c06      	ldr	r4, [pc, #24]	; (80153f0 <app_nunchuk_start+0x20>)
	chThdCreateStatic(chuk_thread_wa, sizeof(chuk_thread_wa), NORMALPRIO, chuk_thread, NULL);
 80153d6:	4b07      	ldr	r3, [pc, #28]	; (80153f4 <app_nunchuk_start+0x24>)
 80153d8:	4807      	ldr	r0, [pc, #28]	; (80153f8 <app_nunchuk_start+0x28>)
 80153da:	2200      	movs	r2, #0
 80153dc:	9200      	str	r2, [sp, #0]
	chuck_d.js_y = 128;
 80153de:	2580      	movs	r5, #128	; 0x80
	chThdCreateStatic(chuk_thread_wa, sizeof(chuk_thread_wa), NORMALPRIO, chuk_thread, NULL);
 80153e0:	2240      	movs	r2, #64	; 0x40
 80153e2:	f44f 61b3 	mov.w	r1, #1432	; 0x598
	chuck_d.js_y = 128;
 80153e6:	6065      	str	r5, [r4, #4]
	chThdCreateStatic(chuk_thread_wa, sizeof(chuk_thread_wa), NORMALPRIO, chuk_thread, NULL);
 80153e8:	f7f7 ff3a 	bl	800d260 <chThdCreateStatic>
}
 80153ec:	b003      	add	sp, #12
 80153ee:	bd30      	pop	{r4, r5, pc}
 80153f0:	20009f50 	.word	0x20009f50
 80153f4:	08015461 	.word	0x08015461
 80153f8:	20009f70 	.word	0x20009f70
 80153fc:	00000000 	.word	0x00000000

08015400 <app_nunchuk_update_output>:
void app_nunchuk_update_output(chuck_data *data) {
 8015400:	b530      	push	{r4, r5, lr}
	if (!output_running) {
 8015402:	4a10      	ldr	r2, [pc, #64]	; (8015444 <app_nunchuk_update_output+0x44>)
 8015404:	7813      	ldrb	r3, [r2, #0]
void app_nunchuk_update_output(chuck_data *data) {
 8015406:	b083      	sub	sp, #12
 8015408:	4604      	mov	r4, r0
	if (!output_running) {
 801540a:	b973      	cbnz	r3, 801542a <app_nunchuk_update_output+0x2a>
 801540c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
		chuck_d.js_y = 128;
 8015410:	480d      	ldr	r0, [pc, #52]	; (8015448 <app_nunchuk_update_output+0x48>)
		chThdCreateStatic(output_thread_wa, sizeof(output_thread_wa), NORMALPRIO, output_thread, NULL);
 8015412:	9100      	str	r1, [sp, #0]
		chuck_d.js_y = 128;
 8015414:	2580      	movs	r5, #128	; 0x80
		output_running = true;
 8015416:	2101      	movs	r1, #1
 8015418:	7011      	strb	r1, [r2, #0]
		chThdCreateStatic(output_thread_wa, sizeof(output_thread_wa), NORMALPRIO, output_thread, NULL);
 801541a:	4b0c      	ldr	r3, [pc, #48]	; (801544c <app_nunchuk_update_output+0x4c>)
		chuck_d.js_y = 128;
 801541c:	6045      	str	r5, [r0, #4]
		chThdCreateStatic(output_thread_wa, sizeof(output_thread_wa), NORMALPRIO, output_thread, NULL);
 801541e:	2240      	movs	r2, #64	; 0x40
 8015420:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8015424:	480a      	ldr	r0, [pc, #40]	; (8015450 <app_nunchuk_update_output+0x50>)
 8015426:	f7f7 ff1b 	bl	800d260 <chThdCreateStatic>
	chuck_d = *data;
 801542a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801542c:	4d06      	ldr	r5, [pc, #24]	; (8015448 <app_nunchuk_update_output+0x48>)
 801542e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015434:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8015438:	b003      	add	sp, #12
 801543a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	timeout_reset();
 801543e:	f7ff b80f 	b.w	8014460 <timeout_reset>
 8015442:	bf00      	nop
 8015444:	2000a536 	.word	0x2000a536
 8015448:	20009f50 	.word	0x20009f50
 801544c:	08015361 	.word	0x08015361
 8015450:	2000a538 	.word	0x2000a538
	...

08015460 <chuk_thread>:
static THD_FUNCTION(chuk_thread, arg) {
 8015460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015464:	4b60      	ldr	r3, [pc, #384]	; (80155e8 <chuk_thread+0x188>)
 8015466:	4961      	ldr	r1, [pc, #388]	; (80155ec <chuk_thread+0x18c>)
 8015468:	699a      	ldr	r2, [r3, #24]
	is_running = true;
 801546a:	4b61      	ldr	r3, [pc, #388]	; (80155f0 <chuk_thread+0x190>)
 801546c:	6191      	str	r1, [r2, #24]
static THD_FUNCTION(chuk_thread, arg) {
 801546e:	b091      	sub	sp, #68	; 0x44
	is_running = true;
 8015470:	2201      	movs	r2, #1
 8015472:	f8df b184 	ldr.w	fp, [pc, #388]	; 80155f8 <chuk_thread+0x198>
 8015476:	701a      	strb	r2, [r3, #0]
	hw_start_i2c();
 8015478:	f7fb ff72 	bl	8011360 <hw_start_i2c>
	chThdSleepMilliseconds(10);
 801547c:	2064      	movs	r0, #100	; 0x64
 801547e:	f7f7 ff27 	bl	800d2d0 <chThdSleep>
 8015482:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8015600 <chuk_thread+0x1a0>
		i2cAcquireBus(&HW_I2C_DEV);
 8015486:	4c5b      	ldr	r4, [pc, #364]	; (80155f4 <chuk_thread+0x194>)
 8015488:	f10b 0606 	add.w	r6, fp, #6
 801548c:	ad04      	add	r5, sp, #16
		txbuf[0] = 0xF0;
 801548e:	f245 5af0 	movw	sl, #22000	; 0x55f0
		status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 2, rxbuf, 0, tmo);
 8015492:	f04f 0832 	mov.w	r8, #50	; 0x32
 8015496:	e00b      	b.n	80154b0 <chuk_thread+0x50>
			chuck_error = 2;
 8015498:	2302      	movs	r3, #2
 801549a:	f8c9 3000 	str.w	r3, [r9]
			hw_try_restore_i2c();
 801549e:	f7fb ffaf 	bl	8011400 <hw_try_restore_i2c>
			chThdSleepMilliseconds(100);
 80154a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80154a6:	f7f7 ff13 	bl	800d2d0 <chThdSleep>
		chThdSleepMilliseconds(10);
 80154aa:	2064      	movs	r0, #100	; 0x64
 80154ac:	f7f7 ff10 	bl	800d2d0 <chThdSleep>
		i2cAcquireBus(&HW_I2C_DEV);
 80154b0:	4620      	mov	r0, r4
		txbuf[0] = 0xF0;
 80154b2:	f8ad a01c 	strh.w	sl, [sp, #28]
		i2cAcquireBus(&HW_I2C_DEV);
 80154b6:	f7f8 fbfb 	bl	800dcb0 <i2cAcquireBus>
		status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 2, rxbuf, 0, tmo);
 80154ba:	2300      	movs	r3, #0
 80154bc:	e9cd 5300 	strd	r5, r3, [sp]
 80154c0:	f8cd 8008 	str.w	r8, [sp, #8]
 80154c4:	2302      	movs	r3, #2
 80154c6:	aa07      	add	r2, sp, #28
 80154c8:	2152      	movs	r1, #82	; 0x52
 80154ca:	4620      	mov	r0, r4
 80154cc:	f7f8 fbb8 	bl	800dc40 <i2cMasterTransmitTimeout>
 80154d0:	4607      	mov	r7, r0
		i2cReleaseBus(&HW_I2C_DEV);
 80154d2:	4620      	mov	r0, r4
 80154d4:	f7f8 fbf4 	bl	800dcc0 <i2cReleaseBus>
		if (is_ok) {
 80154d8:	2f00      	cmp	r7, #0
 80154da:	d1dd      	bne.n	8015498 <chuk_thread+0x38>
			txbuf[0] = 0xFB;
 80154dc:	23fb      	movs	r3, #251	; 0xfb
			i2cAcquireBus(&HW_I2C_DEV);
 80154de:	4620      	mov	r0, r4
			txbuf[0] = 0xFB;
 80154e0:	f8ad 301c 	strh.w	r3, [sp, #28]
			i2cAcquireBus(&HW_I2C_DEV);
 80154e4:	f7f8 fbe4 	bl	800dcb0 <i2cAcquireBus>
			status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 2, rxbuf, 0, tmo);
 80154e8:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80154ec:	9500      	str	r5, [sp, #0]
 80154ee:	2302      	movs	r3, #2
 80154f0:	aa07      	add	r2, sp, #28
 80154f2:	2152      	movs	r1, #82	; 0x52
 80154f4:	4620      	mov	r0, r4
 80154f6:	f7f8 fba3 	bl	800dc40 <i2cMasterTransmitTimeout>
 80154fa:	4607      	mov	r7, r0
			i2cReleaseBus(&HW_I2C_DEV);
 80154fc:	4620      	mov	r0, r4
 80154fe:	f7f8 fbdf 	bl	800dcc0 <i2cReleaseBus>
		if (is_ok) {
 8015502:	2f00      	cmp	r7, #0
 8015504:	d1c8      	bne.n	8015498 <chuk_thread+0x38>
			i2cAcquireBus(&HW_I2C_DEV);
 8015506:	4620      	mov	r0, r4
			txbuf[0] = 0x00;
 8015508:	f88d 701c 	strb.w	r7, [sp, #28]
			i2cAcquireBus(&HW_I2C_DEV);
 801550c:	f7f8 fbd0 	bl	800dcb0 <i2cAcquireBus>
			status = i2cMasterTransmitTimeout(&HW_I2C_DEV, chuck_addr, txbuf, 1, rxbuf, 0, tmo);
 8015510:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8015514:	9500      	str	r5, [sp, #0]
 8015516:	2301      	movs	r3, #1
 8015518:	aa07      	add	r2, sp, #28
 801551a:	2152      	movs	r1, #82	; 0x52
 801551c:	4620      	mov	r0, r4
 801551e:	f7f8 fb8f 	bl	800dc40 <i2cMasterTransmitTimeout>
 8015522:	4607      	mov	r7, r0
			i2cReleaseBus(&HW_I2C_DEV);
 8015524:	4620      	mov	r0, r4
 8015526:	f7f8 fbcb 	bl	800dcc0 <i2cReleaseBus>
		if (is_ok) {
 801552a:	2f00      	cmp	r7, #0
 801552c:	d1b4      	bne.n	8015498 <chuk_thread+0x38>
			chThdSleepMilliseconds(3);
 801552e:	201e      	movs	r0, #30
 8015530:	f7f7 fece 	bl	800d2d0 <chThdSleep>
			i2cAcquireBus(&HW_I2C_DEV);
 8015534:	4620      	mov	r0, r4
 8015536:	f7f8 fbbb 	bl	800dcb0 <i2cAcquireBus>
			status = i2cMasterReceiveTimeout(&HW_I2C_DEV, chuck_addr, rxbuf, 6, tmo);
 801553a:	f8cd 8000 	str.w	r8, [sp]
 801553e:	2306      	movs	r3, #6
 8015540:	462a      	mov	r2, r5
 8015542:	2152      	movs	r1, #82	; 0x52
 8015544:	4620      	mov	r0, r4
 8015546:	f7f8 fb9b 	bl	800dc80 <i2cMasterReceiveTimeout>
 801554a:	4607      	mov	r7, r0
			i2cReleaseBus(&HW_I2C_DEV);
 801554c:	4620      	mov	r0, r4
 801554e:	f7f8 fbb7 	bl	800dcc0 <i2cReleaseBus>
		if (is_ok) {
 8015552:	2f00      	cmp	r7, #0
 8015554:	d1a0      	bne.n	8015498 <chuk_thread+0x38>
 8015556:	4b28      	ldr	r3, [pc, #160]	; (80155f8 <chuk_thread+0x198>)
 8015558:	4629      	mov	r1, r5
			int same = 1;
 801555a:	2201      	movs	r2, #1
				if (last_buffer[i] != rxbuf[i]) {
 801555c:	f813 7b01 	ldrb.w	r7, [r3], #1
 8015560:	f811 0b01 	ldrb.w	r0, [r1], #1
					same = 0;
 8015564:	4287      	cmp	r7, r0
 8015566:	bf18      	it	ne
 8015568:	2200      	movne	r2, #0
			for (int i = 0;i < 6;i++) {
 801556a:	429e      	cmp	r6, r3
 801556c:	d1f6      	bne.n	801555c <chuk_thread+0xfc>
			memcpy(last_buffer, rxbuf, 6);
 801556e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015572:	4b22      	ldr	r3, [pc, #136]	; (80155fc <chuk_thread+0x19c>)
 8015574:	f8cb 0000 	str.w	r0, [fp]
 8015578:	8019      	strh	r1, [r3, #0]
			if (!same) {
 801557a:	b13a      	cbz	r2, 801558c <chuk_thread+0x12c>
			if (timeout_has_timeout()) {
 801557c:	f7fe ff80 	bl	8014480 <timeout_has_timeout>
 8015580:	2800      	cmp	r0, #0
 8015582:	d092      	beq.n	80154aa <chuk_thread+0x4a>
				chuck_error = 1;
 8015584:	2301      	movs	r3, #1
 8015586:	f8c9 3000 	str.w	r3, [r9]
 801558a:	e78e      	b.n	80154aa <chuk_thread+0x4a>
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 801558c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8015590:	f89d 7012 	ldrb.w	r7, [sp, #18]
				chuck_error = 0;
 8015594:	f8c9 2000 	str.w	r2, [r9]
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 8015598:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801559c:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
				chuck_d_tmp.acc_y = (rxbuf[3] << 2) | ((rxbuf[5] >> 4) & 3);
 80155a0:	f89d 0013 	ldrb.w	r0, [sp, #19]
				chuck_d_tmp.acc_z = (rxbuf[4] << 2) | ((rxbuf[5] >> 6) & 3);
 80155a4:	f89d 1014 	ldrb.w	r1, [sp, #20]
				chuck_d_tmp.acc_x = (rxbuf[2] << 2) | ((rxbuf[5] >> 2) & 3);
 80155a8:	920c      	str	r2, [sp, #48]	; 0x30
				chuck_d_tmp.acc_y = (rxbuf[3] << 2) | ((rxbuf[5] >> 4) & 3);
 80155aa:	f3c3 1201 	ubfx	r2, r3, #4, #2
 80155ae:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
				chuck_d_tmp.acc_z = (rxbuf[4] << 2) | ((rxbuf[5] >> 6) & 3);
 80155b2:	099a      	lsrs	r2, r3, #6
 80155b4:	ea42 0181 	orr.w	r1, r2, r1, lsl #2
				chuck_d_tmp.js_x = rxbuf[0];
 80155b8:	f89d 7010 	ldrb.w	r7, [sp, #16]
				chuck_d_tmp.acc_z = (rxbuf[4] << 2) | ((rxbuf[5] >> 6) & 3);
 80155bc:	910e      	str	r1, [sp, #56]	; 0x38
				chuck_d_tmp.bt_z = !((rxbuf[5] >> 0) & 1);
 80155be:	43da      	mvns	r2, r3
				chuck_d_tmp.js_y = rxbuf[1];
 80155c0:	f89d 1011 	ldrb.w	r1, [sp, #17]
				chuck_d_tmp.acc_y = (rxbuf[3] << 2) | ((rxbuf[5] >> 4) & 3);
 80155c4:	900d      	str	r0, [sp, #52]	; 0x34
				chuck_d_tmp.bt_c = !((rxbuf[5] >> 1) & 1);
 80155c6:	ea6f 0353 	mvn.w	r3, r3, lsr #1
				chuck_d_tmp.bt_z = !((rxbuf[5] >> 0) & 1);
 80155ca:	f002 0201 	and.w	r2, r2, #1
				chuck_d_tmp.bt_c = !((rxbuf[5] >> 1) & 1);
 80155ce:	f003 0301 	and.w	r3, r3, #1
				app_nunchuk_update_output(&chuck_d_tmp);
 80155d2:	a80a      	add	r0, sp, #40	; 0x28
				chuck_d_tmp.bt_z = !((rxbuf[5] >> 0) & 1);
 80155d4:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
				chuck_d_tmp.bt_c = !((rxbuf[5] >> 1) & 1);
 80155d8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				chuck_d_tmp.js_y = rxbuf[1];
 80155dc:	e9cd 710a 	strd	r7, r1, [sp, #40]	; 0x28
				app_nunchuk_update_output(&chuck_d_tmp);
 80155e0:	f7ff ff0e 	bl	8015400 <app_nunchuk_update_output>
 80155e4:	e7ca      	b.n	801557c <chuk_thread+0x11c>
 80155e6:	bf00      	nop
 80155e8:	20000c90 	.word	0x20000c90
 80155ec:	080184b0 	.word	0x080184b0
 80155f0:	2000a52c 	.word	0x2000a52c
 80155f4:	20000fc4 	.word	0x20000fc4
 80155f8:	2000a530 	.word	0x2000a530
 80155fc:	2000a534 	.word	0x2000a534
 8015600:	20009f68 	.word	0x20009f68
	...

08015610 <periodic_thread>:

static THD_WORKING_AREA(periodic_thread_wa, 128);
static THD_WORKING_AREA(timer_thread_wa, 128);

static THD_FUNCTION(periodic_thread, arg)
{
 8015610:	b508      	push	{r3, lr}
 8015612:	4b0e      	ldr	r3, [pc, #56]	; (801564c <periodic_thread+0x3c>)
 8015614:	4a0e      	ldr	r2, [pc, #56]	; (8015650 <periodic_thread+0x40>)
 8015616:	699b      	ldr	r3, [r3, #24]

	chRegSetThreadName("BLDC periodic");

	for(;;)
	{
		LED_GREEN_ON();		chThdSleepMilliseconds(50);
 8015618:	4c0e      	ldr	r4, [pc, #56]	; (8015654 <periodic_thread+0x44>)
 801561a:	619a      	str	r2, [r3, #24]
 801561c:	2510      	movs	r5, #16
 801561e:	462e      	mov	r6, r5
 8015620:	8326      	strh	r6, [r4, #24]
 8015622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015626:	f7f7 fe53 	bl	800d2d0 <chThdSleep>
		LED_GREEN_OFF();		chThdSleepMilliseconds(50);
 801562a:	8365      	strh	r5, [r4, #26]
 801562c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015630:	f7f7 fe4e 	bl	800d2d0 <chThdSleep>
		LED_GREEN_ON();		chThdSleepMilliseconds(50);
 8015634:	8325      	strh	r5, [r4, #24]
 8015636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801563a:	f7f7 fe49 	bl	800d2d0 <chThdSleep>
		LED_GREEN_OFF();		chThdSleepMilliseconds(850);
 801563e:	8365      	strh	r5, [r4, #26]
 8015640:	f242 1034 	movw	r0, #8500	; 0x2134
 8015644:	f7f7 fe44 	bl	800d2d0 <chThdSleep>
 8015648:	e7ea      	b.n	8015620 <periodic_thread+0x10>
 801564a:	bf00      	nop
 801564c:	20000c90 	.word	0x20000c90
 8015650:	080184d0 	.word	0x080184d0
 8015654:	40020800 	.word	0x40020800
	...

08015660 <timer_thread>:

		//mavlink_dbgString( 0, "test" );
	}
}

static THD_FUNCTION(timer_thread, arg) {
 8015660:	b508      	push	{r3, lr}
 8015662:	4b06      	ldr	r3, [pc, #24]	; (801567c <timer_thread+0x1c>)
 8015664:	4a06      	ldr	r2, [pc, #24]	; (8015680 <timer_thread+0x20>)
 8015666:	699b      	ldr	r3, [r3, #24]
	(void)arg;

	chRegSetThreadName("msec_timer");

	chvprintf(&SDU1, (uint8_t *)"to main -> timer_thread\r\n");
 8015668:	4906      	ldr	r1, [pc, #24]	; (8015684 <timer_thread+0x24>)
 801566a:	619a      	str	r2, [r3, #24]
 801566c:	4806      	ldr	r0, [pc, #24]	; (8015688 <timer_thread+0x28>)
 801566e:	f7fb fa97 	bl	8010ba0 <chvprintf>

	for(;;) {
		//packet_timerfunc();
		chThdSleepMilliseconds(1);
 8015672:	200a      	movs	r0, #10
 8015674:	f7f7 fe2c 	bl	800d2d0 <chThdSleep>
 8015678:	e7fb      	b.n	8015672 <timer_thread+0x12>
 801567a:	bf00      	nop
 801567c:	20000c90 	.word	0x20000c90
 8015680:	080184e0 	.word	0x080184e0
 8015684:	080184ec 	.word	0x080184ec
 8015688:	20006ca8 	.word	0x20006ca8
 801568c:	00000000 	.word	0x00000000

08015690 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 8015690:	b500      	push	{lr}
 8015692:	b0e1      	sub	sp, #388	; 0x184
	halInit();
 8015694:	f7f8 fa24 	bl	800dae0 <halInit>
	chSysInit();
 8015698:	f7f7 fb62 	bl	800cd60 <chSysInit>

	chThdSleepMilliseconds(1000);
 801569c:	f242 7010 	movw	r0, #10000	; 0x2710
 80156a0:	f7f7 fe16 	bl	800d2d0 <chThdSleep>

	hw_init_gpio();
 80156a4:	f7fb fd4c 	bl	8011140 <hw_init_gpio>
	LED_RED_OFF();
 80156a8:	4b1b      	ldr	r3, [pc, #108]	; (8015718 <main+0x88>)
 80156aa:	2120      	movs	r1, #32
	LED_GREEN_OFF();
 80156ac:	2210      	movs	r2, #16
	LED_RED_OFF();
 80156ae:	8359      	strh	r1, [r3, #26]
	LED_GREEN_OFF();
 80156b0:	835a      	strh	r2, [r3, #26]

	conf_general_init();
 80156b2:	f7fb ff05 	bl	80114c0 <conf_general_init>
	ledpwm_init();
 80156b6:	f7fe fbcb 	bl	8013e50 <ledpwm_init>

	comm_usb_init();
 80156ba:	f7fe fa49 	bl	8013b50 <comm_usb_init>
	chThdSleepMilliseconds(1000);
 80156be:	f242 7010 	movw	r0, #10000	; 0x2710
 80156c2:	f7f7 fe05 	bl	800d2d0 <chThdSleep>
	//chvprintf(&SDU1, (uint8_t *)"Project : OROCA BLDC\r\n");
	//chvprintf(&SDU1, (uint8_t *)"by BakChaJang\r\n");
	//chvprintf(&SDU1, (uint8_t *)"date : 2017/11/15\r\n\r\n");

	mcConfiguration_t mcconf;
	conf_general_read_mc_configuration(&mcconf);
 80156c6:	a82b      	add	r0, sp, #172	; 0xac
 80156c8:	f7fb ffaa 	bl	8011620 <conf_general_read_mc_configuration>
	mc_interface_init(&mcconf);
 80156cc:	a82b      	add	r0, sp, #172	; 0xac
 80156ce:	f7fc fba7 	bl	8011e20 <mc_interface_init>

	app_configuration appconf;
	conf_general_read_app_configuration(&appconf);
 80156d2:	a803      	add	r0, sp, #12
 80156d4:	f7fb ff7c 	bl	80115d0 <conf_general_read_app_configuration>
	app_init(&appconf);
 80156d8:	a803      	add	r0, sp, #12
 80156da:	f7ff fc61 	bl	8014fa0 <app_init>
#if CAN_ENABLE
	comm_can_init();
#endif

	// Threads
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 80156de:	2400      	movs	r4, #0
	timeout_init();
 80156e0:	f7fe fede 	bl	80144a0 <timeout_init>
	timeout_configure(1000);
 80156e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80156e8:	f7fe feb2 	bl	8014450 <timeout_configure>
	comm_can_init();
 80156ec:	f7fe f8e8 	bl	80138c0 <comm_can_init>
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 80156f0:	4b0a      	ldr	r3, [pc, #40]	; (801571c <main+0x8c>)
 80156f2:	9400      	str	r4, [sp, #0]
 80156f4:	2240      	movs	r2, #64	; 0x40
 80156f6:	f44f 7106 	mov.w	r1, #536	; 0x218
 80156fa:	4809      	ldr	r0, [pc, #36]	; (8015720 <main+0x90>)
 80156fc:	f7f7 fdb0 	bl	800d260 <chThdCreateStatic>
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8015700:	9400      	str	r4, [sp, #0]
 8015702:	4b08      	ldr	r3, [pc, #32]	; (8015724 <main+0x94>)
 8015704:	4808      	ldr	r0, [pc, #32]	; (8015728 <main+0x98>)
 8015706:	2240      	movs	r2, #64	; 0x40
 8015708:	f44f 7106 	mov.w	r1, #536	; 0x218
 801570c:	f7f7 fda8 	bl	800d260 <chThdCreateStatic>

//=================================
	for(;;)
	{
		chThdSleepMilliseconds(10);
 8015710:	2064      	movs	r0, #100	; 0x64
 8015712:	f7f7 fddd 	bl	800d2d0 <chThdSleep>
 8015716:	e7fb      	b.n	8015710 <main+0x80>
 8015718:	40020800 	.word	0x40020800
 801571c:	08015611 	.word	0x08015611
 8015720:	2000aad0 	.word	0x2000aad0
 8015724:	08015661 	.word	0x08015661
 8015728:	2000ace8 	.word	0x2000ace8
 801572c:	00000000 	.word	0x00000000

08015730 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8015730:	b508      	push	{r3, lr}
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8015732:	2101      	movs	r1, #1
 8015734:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015738:	f000 fb2a 	bl	8015d90 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 801573c:	2100      	movs	r1, #0
 801573e:	f44f 7080 	mov.w	r0, #256	; 0x100
}
 8015742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8015746:	f000 bb23 	b.w	8015d90 <RCC_APB2PeriphResetCmd>
 801574a:	bf00      	nop
 801574c:	0000      	movs	r0, r0
	...

08015750 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8015750:	6842      	ldr	r2, [r0, #4]
 8015752:	690b      	ldr	r3, [r1, #16]
{
 8015754:	b470      	push	{r4, r5, r6}
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8015756:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 801575a:	790e      	ldrb	r6, [r1, #4]
 801575c:	680d      	ldr	r5, [r1, #0]
 801575e:	688c      	ldr	r4, [r1, #8]
  tmpreg1 &= CR1_CLEAR_MASK;
 8015760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015764:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8015768:	432a      	orrs	r2, r5
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 801576a:	6042      	str	r2, [r0, #4]
 801576c:	68ce      	ldr	r6, [r1, #12]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 801576e:	6885      	ldr	r5, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8015770:	4a09      	ldr	r2, [pc, #36]	; (8015798 <ADC_Init+0x48>)
 8015772:	4333      	orrs	r3, r6
 8015774:	402a      	ands	r2, r5
 8015776:	4323      	orrs	r3, r4
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8015778:	794c      	ldrb	r4, [r1, #5]
 801577a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 801577c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8015780:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8015782:	7d0a      	ldrb	r2, [r1, #20]
  tmpreg1 = ADCx->SQR1;
 8015784:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8015786:	3a01      	subs	r2, #1
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8015788:	b2d2      	uxtb	r2, r2
  tmpreg1 &= SQR1_L_RESET;
 801578a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 801578e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8015792:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8015794:	bc70      	pop	{r4, r5, r6}
 8015796:	4770      	bx	lr
 8015798:	c0fff7fd 	.word	0xc0fff7fd
 801579c:	00000000 	.word	0x00000000

080157a0 <ADC_CommonInit>:
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80157a0:	4907      	ldr	r1, [pc, #28]	; (80157c0 <ADC_CommonInit+0x20>)
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80157a2:	4a08      	ldr	r2, [pc, #32]	; (80157c4 <ADC_CommonInit+0x24>)
{
 80157a4:	b430      	push	{r4, r5}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80157a6:	e9d0 3500 	ldrd	r3, r5, [r0]
  tmpreg1 = ADC->CCR;
 80157aa:	684c      	ldr	r4, [r1, #4]
  tmpreg1 &= CR_CLEAR_MASK;
 80157ac:	4022      	ands	r2, r4
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80157ae:	e9d0 4002 	ldrd	r4, r0, [r0, #8]
 80157b2:	432b      	orrs	r3, r5
 80157b4:	4313      	orrs	r3, r2
 80157b6:	4323      	orrs	r3, r4
 80157b8:	4303      	orrs	r3, r0
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80157ba:	604b      	str	r3, [r1, #4]
}
 80157bc:	bc30      	pop	{r4, r5}
 80157be:	4770      	bx	lr
 80157c0:	40012300 	.word	0x40012300
 80157c4:	fffc30e0 	.word	0xfffc30e0
	...

080157d0 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80157d0:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80157d2:	b919      	cbnz	r1, 80157dc <ADC_Cmd+0xc>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80157d4:	f023 0301 	bic.w	r3, r3, #1
 80157d8:	6083      	str	r3, [r0, #8]
  }
}
 80157da:	4770      	bx	lr
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80157dc:	f043 0301 	orr.w	r3, r3, #1
 80157e0:	6083      	str	r3, [r0, #8]
 80157e2:	4770      	bx	lr
	...

080157f0 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80157f0:	2909      	cmp	r1, #9
{
 80157f2:	b470      	push	{r4, r5, r6}
  if (ADC_Channel > ADC_Channel_9)
 80157f4:	d91c      	bls.n	8015830 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80157f6:	f1a1 040a 	sub.w	r4, r1, #10
 80157fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    tmpreg1 = ADCx->SMPR1;
 80157fe:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8015800:	2607      	movs	r6, #7
 8015802:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8015804:	40a3      	lsls	r3, r4
    tmpreg1 &= ~tmpreg2;
 8015806:	ea25 0406 	bic.w	r4, r5, r6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 801580a:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 801580c:	2a06      	cmp	r2, #6
    ADCx->SMPR1 = tmpreg1;
 801580e:	60c3      	str	r3, [r0, #12]
  if (Rank < 7)
 8015810:	d91a      	bls.n	8015848 <ADC_RegularChannelConfig+0x58>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8015812:	2a0c      	cmp	r2, #12
 8015814:	d925      	bls.n	8015862 <ADC_RegularChannelConfig+0x72>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8015816:	3a0d      	subs	r2, #13
 8015818:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR1;
 801581c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 801581e:	241f      	movs	r4, #31
 8015820:	4094      	lsls	r4, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8015822:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8015824:	ea23 0204 	bic.w	r2, r3, r4
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8015828:	4311      	orrs	r1, r2
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 801582a:	62c1      	str	r1, [r0, #44]	; 0x2c
  }
}
 801582c:	bc70      	pop	{r4, r5, r6}
 801582e:	4770      	bx	lr
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8015830:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    tmpreg1 = ADCx->SMPR2;
 8015834:	6904      	ldr	r4, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8015836:	2507      	movs	r5, #7
 8015838:	40b5      	lsls	r5, r6
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 801583a:	40b3      	lsls	r3, r6
    tmpreg1 &= ~tmpreg2;
 801583c:	ea24 0405 	bic.w	r4, r4, r5
    tmpreg1 |= tmpreg2;
 8015840:	4323      	orrs	r3, r4
  if (Rank < 7)
 8015842:	2a06      	cmp	r2, #6
    ADCx->SMPR2 = tmpreg1;
 8015844:	6103      	str	r3, [r0, #16]
  if (Rank < 7)
 8015846:	d8e4      	bhi.n	8015812 <ADC_RegularChannelConfig+0x22>
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8015848:	3a01      	subs	r2, #1
 801584a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR3;
 801584e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8015850:	241f      	movs	r4, #31
 8015852:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8015854:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8015856:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 801585a:	4311      	orrs	r1, r2
    ADCx->SQR3 = tmpreg1;
 801585c:	6341      	str	r1, [r0, #52]	; 0x34
}
 801585e:	bc70      	pop	{r4, r5, r6}
 8015860:	4770      	bx	lr
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8015862:	3a07      	subs	r2, #7
 8015864:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR2;
 8015868:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 801586a:	241f      	movs	r4, #31
 801586c:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 801586e:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8015870:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 8015874:	4311      	orrs	r1, r2
    ADCx->SQR2 = tmpreg1;
 8015876:	6301      	str	r1, [r0, #48]	; 0x30
}
 8015878:	bc70      	pop	{r4, r5, r6}
 801587a:	4770      	bx	lr
 801587c:	0000      	movs	r0, r0
	...

08015880 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8015880:	4a05      	ldr	r2, [pc, #20]	; (8015898 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 8015882:	6853      	ldr	r3, [r2, #4]
  if (NewState != DISABLE)
 8015884:	b918      	cbnz	r0, 801588e <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8015886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801588a:	6053      	str	r3, [r2, #4]
  }
}
 801588c:	4770      	bx	lr
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 801588e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015892:	6053      	str	r3, [r2, #4]
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop
 8015898:	40012300 	.word	0x40012300
 801589c:	00000000 	.word	0x00000000

080158a0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80158a0:	2909      	cmp	r1, #9
{
 80158a2:	b470      	push	{r4, r5, r6}
  if (ADC_Channel > ADC_Channel_9)
 80158a4:	d81a      	bhi.n	80158dc <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80158a6:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    tmpreg1 = ADCx->SMPR2;
 80158aa:	6904      	ldr	r4, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80158ac:	2507      	movs	r5, #7
 80158ae:	40b5      	lsls	r5, r6
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80158b0:	40b3      	lsls	r3, r6
    tmpreg1 &= ~tmpreg2;
 80158b2:	ea24 0405 	bic.w	r4, r4, r5
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80158b6:	4323      	orrs	r3, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80158b8:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80158ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80158bc:	3202      	adds	r2, #2
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80158be:	f3c3 5401 	ubfx	r4, r3, #20, #2
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80158c2:	1b12      	subs	r2, r2, r4
 80158c4:	b2d2      	uxtb	r2, r2
 80158c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80158ca:	241f      	movs	r4, #31
 80158cc:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80158ce:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80158d2:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80158d4:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80158d6:	6381      	str	r1, [r0, #56]	; 0x38
}
 80158d8:	bc70      	pop	{r4, r5, r6}
 80158da:	4770      	bx	lr
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80158dc:	f1a1 040a 	sub.w	r4, r1, #10
 80158e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    tmpreg1 = ADCx->SMPR1;
 80158e4:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80158e6:	2607      	movs	r6, #7
 80158e8:	40a6      	lsls	r6, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80158ea:	40a3      	lsls	r3, r4
    tmpreg1 &= ~tmpreg2;
 80158ec:	ea25 0406 	bic.w	r4, r5, r6
    tmpreg1 |= tmpreg2;
 80158f0:	4323      	orrs	r3, r4
    ADCx->SMPR1 = tmpreg1;
 80158f2:	60c3      	str	r3, [r0, #12]
 80158f4:	e7e1      	b.n	80158ba <ADC_InjectedChannelConfig+0x1a>
 80158f6:	bf00      	nop
	...

08015900 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8015900:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8015904:	6001      	str	r1, [r0, #0]
}                    
 8015906:	4770      	bx	lr
	...

08015910 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8015910:	6802      	ldr	r2, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8015912:	4936      	ldr	r1, [pc, #216]	; (80159ec <DMA_DeInit+0xdc>)
  DMAy_Streamx->CR  = 0;
 8015914:	2300      	movs	r3, #0
{
 8015916:	b410      	push	{r4}
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8015918:	f022 0201 	bic.w	r2, r2, #1
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 801591c:	2421      	movs	r4, #33	; 0x21
  if (DMAy_Streamx == DMA1_Stream0)
 801591e:	4288      	cmp	r0, r1
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8015920:	6002      	str	r2, [r0, #0]
  DMAy_Streamx->CR  = 0;
 8015922:	6003      	str	r3, [r0, #0]
  DMAy_Streamx->NDTR = 0;
 8015924:	6043      	str	r3, [r0, #4]
  DMAy_Streamx->PAR  = 0;
 8015926:	6083      	str	r3, [r0, #8]
  DMAy_Streamx->M0AR = 0;
 8015928:	60c3      	str	r3, [r0, #12]
  DMAy_Streamx->M1AR = 0;
 801592a:	6103      	str	r3, [r0, #16]
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 801592c:	6144      	str	r4, [r0, #20]
  if (DMAy_Streamx == DMA1_Stream0)
 801592e:	d031      	beq.n	8015994 <DMA_DeInit+0x84>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8015930:	4b2f      	ldr	r3, [pc, #188]	; (80159f0 <DMA_DeInit+0xe0>)
 8015932:	4298      	cmp	r0, r3
 8015934:	d034      	beq.n	80159a0 <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8015936:	4b2f      	ldr	r3, [pc, #188]	; (80159f4 <DMA_DeInit+0xe4>)
 8015938:	4298      	cmp	r0, r3
 801593a:	d038      	beq.n	80159ae <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 801593c:	4b2e      	ldr	r3, [pc, #184]	; (80159f8 <DMA_DeInit+0xe8>)
 801593e:	4298      	cmp	r0, r3
 8015940:	d040      	beq.n	80159c4 <DMA_DeInit+0xb4>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8015942:	4b2e      	ldr	r3, [pc, #184]	; (80159fc <DMA_DeInit+0xec>)
 8015944:	4298      	cmp	r0, r3
 8015946:	d044      	beq.n	80159d2 <DMA_DeInit+0xc2>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8015948:	4b2d      	ldr	r3, [pc, #180]	; (8015a00 <DMA_DeInit+0xf0>)
 801594a:	4298      	cmp	r0, r3
 801594c:	d036      	beq.n	80159bc <DMA_DeInit+0xac>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 801594e:	4b2d      	ldr	r3, [pc, #180]	; (8015a04 <DMA_DeInit+0xf4>)
 8015950:	4298      	cmp	r0, r3
 8015952:	d042      	beq.n	80159da <DMA_DeInit+0xca>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8015954:	4b2c      	ldr	r3, [pc, #176]	; (8015a08 <DMA_DeInit+0xf8>)
 8015956:	4298      	cmp	r0, r3
 8015958:	d017      	beq.n	801598a <DMA_DeInit+0x7a>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 801595a:	4b2c      	ldr	r3, [pc, #176]	; (8015a0c <DMA_DeInit+0xfc>)
 801595c:	4298      	cmp	r0, r3
 801595e:	d040      	beq.n	80159e2 <DMA_DeInit+0xd2>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8015960:	4b2b      	ldr	r3, [pc, #172]	; (8015a10 <DMA_DeInit+0x100>)
 8015962:	4298      	cmp	r0, r3
 8015964:	d01c      	beq.n	80159a0 <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8015966:	4b2b      	ldr	r3, [pc, #172]	; (8015a14 <DMA_DeInit+0x104>)
 8015968:	4298      	cmp	r0, r3
 801596a:	d020      	beq.n	80159ae <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 801596c:	4b2a      	ldr	r3, [pc, #168]	; (8015a18 <DMA_DeInit+0x108>)
 801596e:	4298      	cmp	r0, r3
 8015970:	d028      	beq.n	80159c4 <DMA_DeInit+0xb4>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8015972:	4b2a      	ldr	r3, [pc, #168]	; (8015a1c <DMA_DeInit+0x10c>)
 8015974:	4298      	cmp	r0, r3
 8015976:	d02c      	beq.n	80159d2 <DMA_DeInit+0xc2>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8015978:	4b29      	ldr	r3, [pc, #164]	; (8015a20 <DMA_DeInit+0x110>)
 801597a:	4298      	cmp	r0, r3
 801597c:	d01e      	beq.n	80159bc <DMA_DeInit+0xac>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 801597e:	4b29      	ldr	r3, [pc, #164]	; (8015a24 <DMA_DeInit+0x114>)
 8015980:	4298      	cmp	r0, r3
 8015982:	d02a      	beq.n	80159da <DMA_DeInit+0xca>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8015984:	4b28      	ldr	r3, [pc, #160]	; (8015a28 <DMA_DeInit+0x118>)
 8015986:	4298      	cmp	r0, r3
 8015988:	d107      	bne.n	801599a <DMA_DeInit+0x8a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 801598a:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 801598e:	f843 2cac 	str.w	r2, [r3, #-172]
    }
  }
}
 8015992:	e002      	b.n	801599a <DMA_DeInit+0x8a>
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8015994:	4b25      	ldr	r3, [pc, #148]	; (8015a2c <DMA_DeInit+0x11c>)
 8015996:	223d      	movs	r2, #61	; 0x3d
 8015998:	609a      	str	r2, [r3, #8]
}
 801599a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801599e:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80159a0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80159a4:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80159a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159ac:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80159ae:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80159b2:	f843 2c38 	str.w	r2, [r3, #-56]
}
 80159b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159ba:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80159bc:	4a1c      	ldr	r2, [pc, #112]	; (8015a30 <DMA_DeInit+0x120>)
 80159be:	f843 2c7c 	str.w	r2, [r3, #-124]
 80159c2:	e7ea      	b.n	801599a <DMA_DeInit+0x8a>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80159c4:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80159c8:	f843 2c50 	str.w	r2, [r3, #-80]
}
 80159cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159d0:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80159d2:	4a18      	ldr	r2, [pc, #96]	; (8015a34 <DMA_DeInit+0x124>)
 80159d4:	f843 2c64 	str.w	r2, [r3, #-100]
 80159d8:	e7df      	b.n	801599a <DMA_DeInit+0x8a>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80159da:	4a17      	ldr	r2, [pc, #92]	; (8015a38 <DMA_DeInit+0x128>)
 80159dc:	f843 2c94 	str.w	r2, [r3, #-148]
 80159e0:	e7db      	b.n	801599a <DMA_DeInit+0x8a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80159e2:	223d      	movs	r2, #61	; 0x3d
 80159e4:	f843 2c08 	str.w	r2, [r3, #-8]
 80159e8:	e7d7      	b.n	801599a <DMA_DeInit+0x8a>
 80159ea:	bf00      	nop
 80159ec:	40026010 	.word	0x40026010
 80159f0:	40026028 	.word	0x40026028
 80159f4:	40026040 	.word	0x40026040
 80159f8:	40026058 	.word	0x40026058
 80159fc:	40026070 	.word	0x40026070
 8015a00:	40026088 	.word	0x40026088
 8015a04:	400260a0 	.word	0x400260a0
 8015a08:	400260b8 	.word	0x400260b8
 8015a0c:	40026410 	.word	0x40026410
 8015a10:	40026428 	.word	0x40026428
 8015a14:	40026440 	.word	0x40026440
 8015a18:	40026458 	.word	0x40026458
 8015a1c:	40026470 	.word	0x40026470
 8015a20:	40026488 	.word	0x40026488
 8015a24:	400264a0 	.word	0x400264a0
 8015a28:	400264b8 	.word	0x400264b8
 8015a2c:	40026000 	.word	0x40026000
 8015a30:	20000f40 	.word	0x20000f40
 8015a34:	2000003d 	.word	0x2000003d
 8015a38:	203d0000 	.word	0x203d0000
 8015a3c:	00000000 	.word	0x00000000

08015a40 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8015a40:	680b      	ldr	r3, [r1, #0]
{
 8015a42:	b470      	push	{r4, r5, r6}
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8015a44:	e9d1 2405 	ldrd	r2, r4, [r1, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8015a48:	68cd      	ldr	r5, [r1, #12]
 8015a4a:	432b      	orrs	r3, r5
 8015a4c:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8015a4e:	e9d1 2507 	ldrd	r2, r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8015a52:	4323      	orrs	r3, r4
 8015a54:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8015a56:	e9d1 4209 	ldrd	r4, r2, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8015a5a:	432b      	orrs	r3, r5
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8015a5c:	e9d1 650d 	ldrd	r6, r5, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8015a60:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8015a62:	4313      	orrs	r3, r2
  tmpreg = DMAy_Streamx->CR;
 8015a64:	6804      	ldr	r4, [r0, #0]
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015a66:	4a0b      	ldr	r2, [pc, #44]	; (8015a94 <DMA_Init+0x54>)
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8015a68:	4333      	orrs	r3, r6
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015a6a:	4022      	ands	r2, r4
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8015a6c:	432b      	orrs	r3, r5
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8015a6e:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8015a70:	6003      	str	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8015a72:	e9d1 340b 	ldrd	r3, r4, [r1, #44]	; 0x2c
  tmpreg = DMAy_Streamx->FCR;
 8015a76:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8015a78:	690d      	ldr	r5, [r1, #16]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8015a7a:	f022 0207 	bic.w	r2, r2, #7
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8015a7e:	4323      	orrs	r3, r4
 8015a80:	4313      	orrs	r3, r2
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8015a82:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
  DMAy_Streamx->FCR = tmpreg;
 8015a86:	6143      	str	r3, [r0, #20]
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8015a88:	6045      	str	r5, [r0, #4]
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8015a8a:	6084      	str	r4, [r0, #8]
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8015a8c:	60c2      	str	r2, [r0, #12]
}
 8015a8e:	bc70      	pop	{r4, r5, r6}
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop
 8015a94:	f01c803f 	.word	0xf01c803f
	...

08015aa0 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8015aa0:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8015aa2:	b919      	cbnz	r1, 8015aac <DMA_Cmd+0xc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8015aa4:	f023 0301 	bic.w	r3, r3, #1
 8015aa8:	6003      	str	r3, [r0, #0]
  }
}
 8015aaa:	4770      	bx	lr
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8015aac:	f043 0301 	orr.w	r3, r3, #1
 8015ab0:	6003      	str	r3, [r0, #0]
 8015ab2:	4770      	bx	lr
	...

08015ac0 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8015ac0:	060b      	lsls	r3, r1, #24
 8015ac2:	d50c      	bpl.n	8015ade <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8015ac4:	6943      	ldr	r3, [r0, #20]
    if (NewState != DISABLE)
 8015ac6:	b1aa      	cbz	r2, 8015af4 <DMA_ITConfig+0x34>
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8015ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8015acc:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8015ace:	6143      	str	r3, [r0, #20]
  if (DMA_IT != DMA_IT_FE)
 8015ad0:	d00f      	beq.n	8015af2 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8015ad2:	6803      	ldr	r3, [r0, #0]
 8015ad4:	f001 011e 	and.w	r1, r1, #30
 8015ad8:	4319      	orrs	r1, r3
 8015ada:	6001      	str	r1, [r0, #0]
 8015adc:	4770      	bx	lr
  if (DMA_IT != DMA_IT_FE)
 8015ade:	2980      	cmp	r1, #128	; 0x80
 8015ae0:	d007      	beq.n	8015af2 <DMA_ITConfig+0x32>
    if (NewState != DISABLE)
 8015ae2:	2a00      	cmp	r2, #0
 8015ae4:	d1f5      	bne.n	8015ad2 <DMA_ITConfig+0x12>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8015ae6:	6803      	ldr	r3, [r0, #0]
 8015ae8:	f001 011e 	and.w	r1, r1, #30
 8015aec:	ea23 0101 	bic.w	r1, r3, r1
 8015af0:	6001      	str	r1, [r0, #0]
    }    
  }
}
 8015af2:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8015af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  if (DMA_IT != DMA_IT_FE)
 8015af8:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8015afa:	6143      	str	r3, [r0, #20]
  if (DMA_IT != DMA_IT_FE)
 8015afc:	d1f3      	bne.n	8015ae6 <DMA_ITConfig+0x26>
 8015afe:	4770      	bx	lr

08015b00 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8015b00:	7903      	ldrb	r3, [r0, #4]
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8015b02:	7982      	ldrb	r2, [r0, #6]
{
 8015b04:	b470      	push	{r4, r5, r6}
 8015b06:	6805      	ldr	r5, [r0, #0]
 8015b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015b0c:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8015b10:	43ec      	mvns	r4, r5
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8015b12:	b1f2      	cbz	r2, 8015b52 <EXTI_Init+0x52>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8015b14:	4a15      	ldr	r2, [pc, #84]	; (8015b6c <EXTI_Init+0x6c>)
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8015b16:	7941      	ldrb	r1, [r0, #5]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8015b18:	6816      	ldr	r6, [r2, #0]
 8015b1a:	4026      	ands	r6, r4
 8015b1c:	6016      	str	r6, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8015b1e:	6856      	ldr	r6, [r2, #4]
 8015b20:	4034      	ands	r4, r6
 8015b22:	6054      	str	r4, [r2, #4]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8015b24:	681c      	ldr	r4, [r3, #0]
 8015b26:	4325      	orrs	r5, r4
 8015b28:	601d      	str	r5, [r3, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8015b2a:	6800      	ldr	r0, [r0, #0]
 8015b2c:	6894      	ldr	r4, [r2, #8]
 8015b2e:	43c3      	mvns	r3, r0
 8015b30:	401c      	ands	r4, r3
 8015b32:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8015b34:	68d4      	ldr	r4, [r2, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8015b36:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8015b38:	ea03 0304 	and.w	r3, r3, r4
 8015b3c:	60d3      	str	r3, [r2, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8015b3e:	d00d      	beq.n	8015b5c <EXTI_Init+0x5c>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8015b40:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8015b44:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8015b48:	bc70      	pop	{r4, r5, r6}
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	4310      	orrs	r0, r2
 8015b4e:	6018      	str	r0, [r3, #0]
}
 8015b50:	4770      	bx	lr
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	4014      	ands	r4, r2
 8015b56:	601c      	str	r4, [r3, #0]
}
 8015b58:	bc70      	pop	{r4, r5, r6}
 8015b5a:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8015b5c:	6893      	ldr	r3, [r2, #8]
 8015b5e:	4303      	orrs	r3, r0
 8015b60:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8015b62:	68d3      	ldr	r3, [r2, #12]
 8015b64:	4318      	orrs	r0, r3
 8015b66:	60d0      	str	r0, [r2, #12]
}
 8015b68:	bc70      	pop	{r4, r5, r6}
 8015b6a:	4770      	bx	lr
 8015b6c:	40013c00 	.word	0x40013c00

08015b70 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8015b70:	4b03      	ldr	r3, [pc, #12]	; (8015b80 <EXTI_GetFlagStatus+0x10>)
 8015b72:	695b      	ldr	r3, [r3, #20]
 8015b74:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8015b76:	bf14      	ite	ne
 8015b78:	2001      	movne	r0, #1
 8015b7a:	2000      	moveq	r0, #0
 8015b7c:	4770      	bx	lr
 8015b7e:	bf00      	nop
 8015b80:	40013c00 	.word	0x40013c00
	...

08015b90 <EXTI_GetITStatus>:
 8015b90:	f7ff bfee 	b.w	8015b70 <EXTI_GetFlagStatus>
	...

08015ba0 <EXTI_ClearITPendingBit>:
 8015ba0:	4b01      	ldr	r3, [pc, #4]	; (8015ba8 <EXTI_ClearITPendingBit+0x8>)
 8015ba2:	6158      	str	r0, [r3, #20]
 8015ba4:	4770      	bx	lr
 8015ba6:	bf00      	nop
 8015ba8:	40013c00 	.word	0x40013c00
 8015bac:	00000000 	.word	0x00000000

08015bb0 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8015bb0:	4b04      	ldr	r3, [pc, #16]	; (8015bc4 <FLASH_Unlock+0x14>)
 8015bb2:	691a      	ldr	r2, [r3, #16]
 8015bb4:	2a00      	cmp	r2, #0
 8015bb6:	da03      	bge.n	8015bc0 <FLASH_Unlock+0x10>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8015bb8:	4903      	ldr	r1, [pc, #12]	; (8015bc8 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_KEY2;
 8015bba:	4a04      	ldr	r2, [pc, #16]	; (8015bcc <FLASH_Unlock+0x1c>)
    FLASH->KEYR = FLASH_KEY1;
 8015bbc:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8015bbe:	605a      	str	r2, [r3, #4]
  }  
}
 8015bc0:	4770      	bx	lr
 8015bc2:	bf00      	nop
 8015bc4:	40023c00 	.word	0x40023c00
 8015bc8:	45670123 	.word	0x45670123
 8015bcc:	cdef89ab 	.word	0xcdef89ab

08015bd0 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8015bd0:	4b01      	ldr	r3, [pc, #4]	; (8015bd8 <FLASH_ClearFlag+0x8>)
 8015bd2:	60d8      	str	r0, [r3, #12]
}
 8015bd4:	4770      	bx	lr
 8015bd6:	bf00      	nop
 8015bd8:	40023c00 	.word	0x40023c00
 8015bdc:	00000000 	.word	0x00000000

08015be0 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8015be0:	4b0e      	ldr	r3, [pc, #56]	; (8015c1c <FLASH_GetStatus+0x3c>)
 8015be2:	68da      	ldr	r2, [r3, #12]
 8015be4:	03d2      	lsls	r2, r2, #15
 8015be6:	d410      	bmi.n	8015c0a <FLASH_GetStatus+0x2a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8015be8:	68da      	ldr	r2, [r3, #12]
 8015bea:	06d1      	lsls	r1, r2, #27
 8015bec:	d40f      	bmi.n	8015c0e <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8015bee:	68da      	ldr	r2, [r3, #12]
 8015bf0:	05d2      	lsls	r2, r2, #23
 8015bf2:	d410      	bmi.n	8015c16 <FLASH_GetStatus+0x36>
      { 
        flashstatus = FLASH_ERROR_RD;
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8015bf4:	68da      	ldr	r2, [r3, #12]
 8015bf6:	f012 0fe0 	tst.w	r2, #224	; 0xe0
 8015bfa:	d10a      	bne.n	8015c12 <FLASH_GetStatus+0x32>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8015bfc:	68db      	ldr	r3, [r3, #12]
 8015bfe:	f013 0f02 	tst.w	r3, #2
          {
            flashstatus = FLASH_ERROR_OPERATION;
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8015c02:	bf14      	ite	ne
 8015c04:	2008      	movne	r0, #8
 8015c06:	2009      	moveq	r0, #9
 8015c08:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	4770      	bx	lr
      flashstatus = FLASH_ERROR_WRP;
 8015c0e:	2006      	movs	r0, #6
 8015c10:	4770      	bx	lr
          flashstatus = FLASH_ERROR_PROGRAM; 
 8015c12:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8015c14:	4770      	bx	lr
        flashstatus = FLASH_ERROR_RD;
 8015c16:	2002      	movs	r0, #2
 8015c18:	4770      	bx	lr
 8015c1a:	bf00      	nop
 8015c1c:	40023c00 	.word	0x40023c00

08015c20 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8015c20:	b500      	push	{lr}
 8015c22:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 8015c24:	2309      	movs	r3, #9
 8015c26:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8015c2a:	f7ff ffd9 	bl	8015be0 <FLASH_GetStatus>
 8015c2e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8015c32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015c36:	2b01      	cmp	r3, #1
 8015c38:	d0f7      	beq.n	8015c2a <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8015c3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8015c3e:	b003      	add	sp, #12
 8015c40:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015c50 <FLASH_EraseSector>:
{
 8015c50:	b570      	push	{r4, r5, r6, lr}
 8015c52:	4606      	mov	r6, r0
  if(VoltageRange == VoltageRange_1)
 8015c54:	b161      	cbz	r1, 8015c70 <FLASH_EraseSector+0x20>
  else if(VoltageRange == VoltageRange_2)
 8015c56:	2901      	cmp	r1, #1
 8015c58:	d02f      	beq.n	8015cba <FLASH_EraseSector+0x6a>
  else if(VoltageRange == VoltageRange_3)
 8015c5a:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8015c5c:	bf0c      	ite	eq
 8015c5e:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8015c62:	f44f 7440 	movne.w	r4, #768	; 0x300
  status = FLASH_WaitForLastOperation();
 8015c66:	f7ff ffdb 	bl	8015c20 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8015c6a:	2809      	cmp	r0, #9
 8015c6c:	d005      	beq.n	8015c7a <FLASH_EraseSector+0x2a>
}
 8015c6e:	bd70      	pop	{r4, r5, r6, pc}
     tmp_psize = FLASH_PSIZE_BYTE;
 8015c70:	460c      	mov	r4, r1
  status = FLASH_WaitForLastOperation();
 8015c72:	f7ff ffd5 	bl	8015c20 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8015c76:	2809      	cmp	r0, #9
 8015c78:	d1f9      	bne.n	8015c6e <FLASH_EraseSector+0x1e>
    FLASH->CR &= CR_PSIZE_MASK;
 8015c7a:	4d11      	ldr	r5, [pc, #68]	; (8015cc0 <FLASH_EraseSector+0x70>)
 8015c7c:	692b      	ldr	r3, [r5, #16]
 8015c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015c82:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 8015c84:	6929      	ldr	r1, [r5, #16]
 8015c86:	4321      	orrs	r1, r4
 8015c88:	6129      	str	r1, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 8015c8a:	692b      	ldr	r3, [r5, #16]
 8015c8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8015c90:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8015c92:	6928      	ldr	r0, [r5, #16]
 8015c94:	f040 0002 	orr.w	r0, r0, #2
 8015c98:	4330      	orrs	r0, r6
 8015c9a:	6128      	str	r0, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8015c9c:	692b      	ldr	r3, [r5, #16]
 8015c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015ca2:	612b      	str	r3, [r5, #16]
    status = FLASH_WaitForLastOperation();
 8015ca4:	f7ff ffbc 	bl	8015c20 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_SER);
 8015ca8:	692b      	ldr	r3, [r5, #16]
 8015caa:	f023 0302 	bic.w	r3, r3, #2
 8015cae:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 8015cb0:	692b      	ldr	r3, [r5, #16]
 8015cb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8015cb6:	612b      	str	r3, [r5, #16]
}
 8015cb8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8015cba:	f44f 7480 	mov.w	r4, #256	; 0x100
 8015cbe:	e7d8      	b.n	8015c72 <FLASH_EraseSector+0x22>
 8015cc0:	40023c00 	.word	0x40023c00
	...

08015cd0 <FLASH_ProgramHalfWord>:
{
 8015cd0:	b570      	push	{r4, r5, r6, lr}
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation();
 8015cd6:	f7ff ffa3 	bl	8015c20 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8015cda:	2809      	cmp	r0, #9
 8015cdc:	d000      	beq.n	8015ce0 <FLASH_ProgramHalfWord+0x10>
}
 8015cde:	bd70      	pop	{r4, r5, r6, pc}
    FLASH->CR &= CR_PSIZE_MASK;
 8015ce0:	4c0a      	ldr	r4, [pc, #40]	; (8015d0c <FLASH_ProgramHalfWord+0x3c>)
 8015ce2:	6923      	ldr	r3, [r4, #16]
 8015ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015ce8:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8015cea:	6923      	ldr	r3, [r4, #16]
 8015cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015cf0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8015cf2:	6923      	ldr	r3, [r4, #16]
 8015cf4:	f043 0301 	orr.w	r3, r3, #1
 8015cf8:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8015cfa:	802e      	strh	r6, [r5, #0]
    status = FLASH_WaitForLastOperation();
 8015cfc:	f7ff ff90 	bl	8015c20 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8015d00:	6923      	ldr	r3, [r4, #16]
 8015d02:	f023 0301 	bic.w	r3, r3, #1
 8015d06:	6123      	str	r3, [r4, #16]
}
 8015d08:	bd70      	pop	{r4, r5, r6, pc}
 8015d0a:	bf00      	nop
 8015d0c:	40023c00 	.word	0x40023c00

08015d10 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8015d10:	4a04      	ldr	r2, [pc, #16]	; (8015d24 <RCC_AHB1PeriphClockCmd+0x14>)
 8015d12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  if (NewState != DISABLE)
 8015d14:	b919      	cbnz	r1, 8015d1e <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8015d16:	ea23 0000 	bic.w	r0, r3, r0
 8015d1a:	6310      	str	r0, [r2, #48]	; 0x30
  }
}
 8015d1c:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8015d1e:	4318      	orrs	r0, r3
 8015d20:	6310      	str	r0, [r2, #48]	; 0x30
 8015d22:	4770      	bx	lr
 8015d24:	40023800 	.word	0x40023800
	...

08015d30 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8015d30:	4a04      	ldr	r2, [pc, #16]	; (8015d44 <RCC_APB1PeriphClockCmd+0x14>)
 8015d32:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if (NewState != DISABLE)
 8015d34:	b919      	cbnz	r1, 8015d3e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8015d36:	ea23 0000 	bic.w	r0, r3, r0
 8015d3a:	6410      	str	r0, [r2, #64]	; 0x40
  }
}
 8015d3c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 8015d3e:	4318      	orrs	r0, r3
 8015d40:	6410      	str	r0, [r2, #64]	; 0x40
 8015d42:	4770      	bx	lr
 8015d44:	40023800 	.word	0x40023800
	...

08015d50 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8015d50:	4a04      	ldr	r2, [pc, #16]	; (8015d64 <RCC_APB2PeriphClockCmd+0x14>)
 8015d52:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (NewState != DISABLE)
 8015d54:	b919      	cbnz	r1, 8015d5e <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8015d56:	ea23 0000 	bic.w	r0, r3, r0
 8015d5a:	6450      	str	r0, [r2, #68]	; 0x44
  }
}
 8015d5c:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8015d5e:	4318      	orrs	r0, r3
 8015d60:	6450      	str	r0, [r2, #68]	; 0x44
 8015d62:	4770      	bx	lr
 8015d64:	40023800 	.word	0x40023800
	...

08015d70 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8015d70:	4a04      	ldr	r2, [pc, #16]	; (8015d84 <RCC_APB1PeriphResetCmd+0x14>)
 8015d72:	6a13      	ldr	r3, [r2, #32]
  if (NewState != DISABLE)
 8015d74:	b919      	cbnz	r1, 8015d7e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8015d76:	ea23 0000 	bic.w	r0, r3, r0
 8015d7a:	6210      	str	r0, [r2, #32]
  }
}
 8015d7c:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8015d7e:	4318      	orrs	r0, r3
 8015d80:	6210      	str	r0, [r2, #32]
 8015d82:	4770      	bx	lr
 8015d84:	40023800 	.word	0x40023800
	...

08015d90 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8015d90:	4a04      	ldr	r2, [pc, #16]	; (8015da4 <RCC_APB2PeriphResetCmd+0x14>)
 8015d92:	6a53      	ldr	r3, [r2, #36]	; 0x24
  if (NewState != DISABLE)
 8015d94:	b919      	cbnz	r1, 8015d9e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8015d96:	ea23 0000 	bic.w	r0, r3, r0
 8015d9a:	6250      	str	r0, [r2, #36]	; 0x24
  }
}
 8015d9c:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 8015d9e:	4318      	orrs	r0, r3
 8015da0:	6250      	str	r0, [r2, #36]	; 0x24
 8015da2:	4770      	bx	lr
 8015da4:	40023800 	.word	0x40023800
	...

08015db0 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8015db0:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8015db4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015db8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8015dbc:	f001 0103 	and.w	r1, r1, #3
{
 8015dc0:	b410      	push	{r4}
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8015dc2:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8015dc4:	0089      	lsls	r1, r1, #2
 8015dc6:	240f      	movs	r4, #15
 8015dc8:	408c      	lsls	r4, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8015dca:	ea22 0204 	bic.w	r2, r2, r4
 8015dce:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8015dd0:	689a      	ldr	r2, [r3, #8]
}
 8015dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8015dd6:	fa00 f101 	lsl.w	r1, r0, r1
 8015dda:	4311      	orrs	r1, r2
 8015ddc:	6099      	str	r1, [r3, #8]
}
 8015dde:	4770      	bx	lr

08015de0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8015de0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8015de2:	4b60      	ldr	r3, [pc, #384]	; (8015f64 <TIM_DeInit+0x184>)
 8015de4:	4298      	cmp	r0, r3
 8015de6:	d032      	beq.n	8015e4e <TIM_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8015de8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015dec:	d039      	beq.n	8015e62 <TIM_DeInit+0x82>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8015dee:	4b5e      	ldr	r3, [pc, #376]	; (8015f68 <TIM_DeInit+0x188>)
 8015df0:	4298      	cmp	r0, r3
 8015df2:	d040      	beq.n	8015e76 <TIM_DeInit+0x96>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8015df4:	4b5d      	ldr	r3, [pc, #372]	; (8015f6c <TIM_DeInit+0x18c>)
 8015df6:	4298      	cmp	r0, r3
 8015df8:	d047      	beq.n	8015e8a <TIM_DeInit+0xaa>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8015dfa:	4b5d      	ldr	r3, [pc, #372]	; (8015f70 <TIM_DeInit+0x190>)
 8015dfc:	4298      	cmp	r0, r3
 8015dfe:	d01c      	beq.n	8015e3a <TIM_DeInit+0x5a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8015e00:	4b5c      	ldr	r3, [pc, #368]	; (8015f74 <TIM_DeInit+0x194>)
 8015e02:	4298      	cmp	r0, r3
 8015e04:	d04b      	beq.n	8015e9e <TIM_DeInit+0xbe>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8015e06:	4b5c      	ldr	r3, [pc, #368]	; (8015f78 <TIM_DeInit+0x198>)
 8015e08:	4298      	cmp	r0, r3
 8015e0a:	d052      	beq.n	8015eb2 <TIM_DeInit+0xd2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8015e0c:	4b5b      	ldr	r3, [pc, #364]	; (8015f7c <TIM_DeInit+0x19c>)
 8015e0e:	4298      	cmp	r0, r3
 8015e10:	d065      	beq.n	8015ede <TIM_DeInit+0xfe>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8015e12:	4b5b      	ldr	r3, [pc, #364]	; (8015f80 <TIM_DeInit+0x1a0>)
 8015e14:	4298      	cmp	r0, r3
 8015e16:	d06c      	beq.n	8015ef2 <TIM_DeInit+0x112>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8015e18:	4b5a      	ldr	r3, [pc, #360]	; (8015f84 <TIM_DeInit+0x1a4>)
 8015e1a:	4298      	cmp	r0, r3
 8015e1c:	d053      	beq.n	8015ec6 <TIM_DeInit+0xe6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8015e1e:	4b5a      	ldr	r3, [pc, #360]	; (8015f88 <TIM_DeInit+0x1a8>)
 8015e20:	4298      	cmp	r0, r3
 8015e22:	d072      	beq.n	8015f0a <TIM_DeInit+0x12a>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8015e24:	4b59      	ldr	r3, [pc, #356]	; (8015f8c <TIM_DeInit+0x1ac>)
 8015e26:	4298      	cmp	r0, r3
 8015e28:	d07b      	beq.n	8015f22 <TIM_DeInit+0x142>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8015e2a:	4b59      	ldr	r3, [pc, #356]	; (8015f90 <TIM_DeInit+0x1b0>)
 8015e2c:	4298      	cmp	r0, r3
 8015e2e:	f000 808e 	beq.w	8015f4e <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8015e32:	4b58      	ldr	r3, [pc, #352]	; (8015f94 <TIM_DeInit+0x1b4>)
 8015e34:	4298      	cmp	r0, r3
 8015e36:	d07e      	beq.n	8015f36 <TIM_DeInit+0x156>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8015e38:	bd08      	pop	{r3, pc}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8015e3a:	2101      	movs	r1, #1
 8015e3c:	2008      	movs	r0, #8
 8015e3e:	f7ff ff97 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8015e42:	2100      	movs	r1, #0
 8015e44:	2008      	movs	r0, #8
}
 8015e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8015e4a:	f7ff bf91 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8015e4e:	2101      	movs	r1, #1
 8015e50:	4608      	mov	r0, r1
 8015e52:	f7ff ff9d 	bl	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8015e56:	2100      	movs	r1, #0
 8015e58:	2001      	movs	r0, #1
}
 8015e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8015e5e:	f7ff bf97 	b.w	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8015e62:	2101      	movs	r1, #1
 8015e64:	4608      	mov	r0, r1
 8015e66:	f7ff ff83 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	2001      	movs	r0, #1
}
 8015e6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8015e72:	f7ff bf7d 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8015e76:	2101      	movs	r1, #1
 8015e78:	2002      	movs	r0, #2
 8015e7a:	f7ff ff79 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8015e7e:	2100      	movs	r1, #0
 8015e80:	2002      	movs	r0, #2
}
 8015e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8015e86:	f7ff bf73 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8015e8a:	2101      	movs	r1, #1
 8015e8c:	2004      	movs	r0, #4
 8015e8e:	f7ff ff6f 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8015e92:	2100      	movs	r1, #0
 8015e94:	2004      	movs	r0, #4
}
 8015e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8015e9a:	f7ff bf69 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8015e9e:	2101      	movs	r1, #1
 8015ea0:	2010      	movs	r0, #16
 8015ea2:	f7ff ff65 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	2010      	movs	r0, #16
}
 8015eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8015eae:	f7ff bf5f 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	2020      	movs	r0, #32
 8015eb6:	f7ff ff5b 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8015eba:	2100      	movs	r1, #0
 8015ebc:	2020      	movs	r0, #32
}
 8015ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8015ec2:	f7ff bf55 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8015ec6:	2101      	movs	r1, #1
 8015ec8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8015ecc:	f7ff ff60 	bl	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
}
 8015ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8015eda:	f7ff bf59 	b.w	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8015ede:	2101      	movs	r1, #1
 8015ee0:	2002      	movs	r0, #2
 8015ee2:	f7ff ff55 	bl	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8015ee6:	2100      	movs	r1, #0
 8015ee8:	2002      	movs	r0, #2
}
 8015eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8015eee:	f7ff bf4f 	b.w	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8015ef2:	2101      	movs	r1, #1
 8015ef4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8015ef8:	f7ff ff4a 	bl	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8015efc:	2100      	movs	r1, #0
 8015efe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8015f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8015f06:	f7ff bf43 	b.w	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8015f10:	f7ff ff3e 	bl	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8015f14:	2100      	movs	r1, #0
 8015f16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
}
 8015f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8015f1e:	f7ff bf37 	b.w	8015d90 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8015f22:	2101      	movs	r1, #1
 8015f24:	2040      	movs	r0, #64	; 0x40
 8015f26:	f7ff ff23 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8015f2a:	2100      	movs	r1, #0
 8015f2c:	2040      	movs	r0, #64	; 0x40
}
 8015f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8015f32:	f7ff bf1d 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8015f36:	2101      	movs	r1, #1
 8015f38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015f3c:	f7ff ff18 	bl	8015d70 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8015f40:	2100      	movs	r1, #0
 8015f42:	f44f 7080 	mov.w	r0, #256	; 0x100
}
 8015f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8015f4a:	f7ff bf11 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8015f4e:	2101      	movs	r1, #1
 8015f50:	2080      	movs	r0, #128	; 0x80
 8015f52:	f7ff ff0d 	bl	8015d70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8015f56:	2100      	movs	r1, #0
 8015f58:	2080      	movs	r0, #128	; 0x80
}
 8015f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8015f5e:	f7ff bf07 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
 8015f62:	bf00      	nop
 8015f64:	40010000 	.word	0x40010000
 8015f68:	40000400 	.word	0x40000400
 8015f6c:	40000800 	.word	0x40000800
 8015f70:	40000c00 	.word	0x40000c00
 8015f74:	40001000 	.word	0x40001000
 8015f78:	40001400 	.word	0x40001400
 8015f7c:	40010400 	.word	0x40010400
 8015f80:	40014000 	.word	0x40014000
 8015f84:	40014400 	.word	0x40014400
 8015f88:	40014800 	.word	0x40014800
 8015f8c:	40001800 	.word	0x40001800
 8015f90:	40001c00 	.word	0x40001c00
 8015f94:	40002000 	.word	0x40002000
	...

08015fa0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015fa0:	4a21      	ldr	r2, [pc, #132]	; (8016028 <TIM_TimeBaseInit+0x88>)
  tmpcr1 = TIMx->CR1;  
 8015fa2:	6803      	ldr	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015fa4:	4290      	cmp	r0, r2
{
 8015fa6:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;  
 8015fa8:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015faa:	d012      	beq.n	8015fd2 <TIM_TimeBaseInit+0x32>
 8015fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015fb0:	4290      	cmp	r0, r2
 8015fb2:	d00e      	beq.n	8015fd2 <TIM_TimeBaseInit+0x32>
 8015fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015fb8:	d00b      	beq.n	8015fd2 <TIM_TimeBaseInit+0x32>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8015fba:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8015fbe:	4290      	cmp	r0, r2
 8015fc0:	d007      	beq.n	8015fd2 <TIM_TimeBaseInit+0x32>
 8015fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015fc6:	4290      	cmp	r0, r2
 8015fc8:	d003      	beq.n	8015fd2 <TIM_TimeBaseInit+0x32>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8015fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015fce:	4290      	cmp	r0, r2
 8015fd0:	d103      	bne.n	8015fda <TIM_TimeBaseInit+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8015fd2:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8015fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8015fd8:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8015fda:	4d14      	ldr	r5, [pc, #80]	; (801602c <TIM_TimeBaseInit+0x8c>)
 8015fdc:	684c      	ldr	r4, [r1, #4]
 8015fde:	880a      	ldrh	r2, [r1, #0]
 8015fe0:	42a8      	cmp	r0, r5
 8015fe2:	d015      	beq.n	8016010 <TIM_TimeBaseInit+0x70>
 8015fe4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8015fe8:	42a8      	cmp	r0, r5
 8015fea:	d011      	beq.n	8016010 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8015fec:	890e      	ldrh	r6, [r1, #8]
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8015fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8015ff2:	f505 456c 	add.w	r5, r5, #60416	; 0xec00
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8015ff6:	b29b      	uxth	r3, r3
  TIMx->CR1 = tmpcr1;
 8015ff8:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8015ffa:	42a8      	cmp	r0, r5
  TIMx->CR1 = tmpcr1;
 8015ffc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8015ffe:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8016000:	6282      	str	r2, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8016002:	d10c      	bne.n	801601e <TIM_TimeBaseInit+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8016004:	7a8b      	ldrb	r3, [r1, #10]
 8016006:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8016008:	2301      	movs	r3, #1
 801600a:	6143      	str	r3, [r0, #20]
}
 801600c:	bc70      	pop	{r4, r5, r6}
 801600e:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 8016010:	6003      	str	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8016012:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8016014:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8016016:	2301      	movs	r3, #1
 8016018:	6143      	str	r3, [r0, #20]
}
 801601a:	bc70      	pop	{r4, r5, r6}
 801601c:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 801601e:	4b04      	ldr	r3, [pc, #16]	; (8016030 <TIM_TimeBaseInit+0x90>)
 8016020:	4298      	cmp	r0, r3
 8016022:	d0ef      	beq.n	8016004 <TIM_TimeBaseInit+0x64>
 8016024:	e7f7      	b.n	8016016 <TIM_TimeBaseInit+0x76>
 8016026:	bf00      	nop
 8016028:	40010000 	.word	0x40010000
 801602c:	40001000 	.word	0x40001000
 8016030:	40010400 	.word	0x40010400
	...

08016040 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8016040:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8016042:	4770      	bx	lr
	...

08016050 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8016050:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8016052:	b921      	cbnz	r1, 801605e <TIM_ARRPreloadConfig+0xe>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8016054:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8016058:	4013      	ands	r3, r2
 801605a:	6003      	str	r3, [r0, #0]
  }
}
 801605c:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_ARPE;
 801605e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016062:	6003      	str	r3, [r0, #0]
 8016064:	4770      	bx	lr
 8016066:	bf00      	nop
	...

08016070 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8016070:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8016072:	b921      	cbnz	r1, 801607e <TIM_Cmd+0xe>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8016074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016078:	4013      	ands	r3, r2
 801607a:	6003      	str	r3, [r0, #0]
  }
}
 801607c:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 801607e:	f043 0301 	orr.w	r3, r3, #1
 8016082:	6003      	str	r3, [r0, #0]
 8016084:	4770      	bx	lr
 8016086:	bf00      	nop
	...

08016090 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8016090:	6a03      	ldr	r3, [r0, #32]
 8016092:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016096:	4013      	ands	r3, r2
 8016098:	6203      	str	r3, [r0, #32]
{
 801609a:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801609c:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80160a0:	898a      	ldrh	r2, [r1, #12]
 80160a2:	884f      	ldrh	r7, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 80160a4:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80160a6:	6985      	ldr	r5, [r0, #24]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80160a8:	4e14      	ldr	r6, [pc, #80]	; (80160fc <TIM_OC1Init+0x6c>)
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80160aa:	f64f 74fd 	movw	r4, #65533	; 0xfffd
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80160ae:	433a      	orrs	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80160b0:	ea0c 0404 	and.w	r4, ip, r4
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80160b4:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80160b6:	f64f 728c 	movw	r2, #65420	; 0xff8c
 80160ba:	402a      	ands	r2, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80160bc:	880d      	ldrh	r5, [r1, #0]
  if((TIMx == TIM1) || (TIMx == TIM8))
 80160be:	42b0      	cmp	r0, r6
  tmpcr2 =  TIMx->CR2;
 80160c0:	b29b      	uxth	r3, r3
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80160c2:	ea42 0205 	orr.w	r2, r2, r5
  if((TIMx == TIM1) || (TIMx == TIM8))
 80160c6:	d00a      	beq.n	80160de <TIM_OC1Init+0x4e>
 80160c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80160cc:	42b0      	cmp	r0, r6
 80160ce:	d006      	beq.n	80160de <TIM_OC1Init+0x4e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80160d0:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80160d2:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80160d4:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80160d6:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80160d8:	6204      	str	r4, [r0, #32]
}
 80160da:	bcf0      	pop	{r4, r5, r6, r7}
 80160dc:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80160de:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80160e0:	8a0d      	ldrh	r5, [r1, #16]
 80160e2:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80160e4:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80160e8:	4334      	orrs	r4, r6
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80160ea:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80160ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80160f0:	f024 0404 	bic.w	r4, r4, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80160f4:	433d      	orrs	r5, r7
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80160f6:	4334      	orrs	r4, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80160f8:	432b      	orrs	r3, r5
 80160fa:	e7e9      	b.n	80160d0 <TIM_OC1Init+0x40>
 80160fc:	40010000 	.word	0x40010000

08016100 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8016100:	6a03      	ldr	r3, [r0, #32]
 8016102:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8016106:	4013      	ands	r3, r2
 8016108:	6203      	str	r3, [r0, #32]
{
 801610a:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 801610c:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8016110:	898a      	ldrh	r2, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8016112:	884f      	ldrh	r7, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8016114:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8016116:	6986      	ldr	r6, [r0, #24]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8016118:	4d19      	ldr	r5, [pc, #100]	; (8016180 <TIM_OC2Init+0x80>)
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 801611a:	f64f 73df 	movw	r3, #65503	; 0xffdf
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801611e:	433a      	orrs	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8016120:	ea0c 0303 	and.w	r3, ip, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8016124:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8016128:	f648 42ff 	movw	r2, #36095	; 0x8cff
 801612c:	4032      	ands	r2, r6
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801612e:	880e      	ldrh	r6, [r1, #0]
  if((TIMx == TIM1) || (TIMx == TIM8))
 8016130:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8016132:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8016136:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8016138:	b2a4      	uxth	r4, r4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801613a:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 801613c:	d00a      	beq.n	8016154 <TIM_OC2Init+0x54>
 801613e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8016142:	42a8      	cmp	r0, r5
 8016144:	d006      	beq.n	8016154 <TIM_OC2Init+0x54>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8016146:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8016148:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 801614a:	6182      	str	r2, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 801614c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801614e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8016150:	6203      	str	r3, [r0, #32]
}
 8016152:	4770      	bx	lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8016154:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8016156:	8a0e      	ldrh	r6, [r1, #16]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8016158:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801615a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801615e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8016162:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8016166:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8016168:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 801616a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801616e:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8016170:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8016174:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8016178:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801617a:	b2a4      	uxth	r4, r4
 801617c:	e7e3      	b.n	8016146 <TIM_OC2Init+0x46>
 801617e:	bf00      	nop
 8016180:	40010000 	.word	0x40010000
	...

08016190 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8016190:	6a03      	ldr	r3, [r0, #32]
 8016192:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016196:	4013      	ands	r3, r2
 8016198:	6203      	str	r3, [r0, #32]
{
 801619a:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 801619c:	884a      	ldrh	r2, [r1, #2]
  tmpccer = TIMx->CCER;
 801619e:	6a07      	ldr	r7, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80161a0:	898c      	ldrh	r4, [r1, #12]
  tmpcr2 =  TIMx->CR2;
 80161a2:	6845      	ldr	r5, [r0, #4]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80161a4:	4e19      	ldr	r6, [pc, #100]	; (801620c <TIM_OC3Init+0x7c>)
  tmpccmrx = TIMx->CCMR2;
 80161a6:	f8d0 c01c 	ldr.w	ip, [r0, #28]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80161aa:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80161ae:	403b      	ands	r3, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80161b0:	4314      	orrs	r4, r2
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80161b2:	880f      	ldrh	r7, [r1, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80161b4:	f64f 728c 	movw	r2, #65420	; 0xff8c
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80161b8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80161bc:	ea0c 0202 	and.w	r2, ip, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 80161c0:	42b0      	cmp	r0, r6
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80161c2:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 80161c4:	b2ad      	uxth	r5, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80161c6:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8))
 80161ca:	d009      	beq.n	80161e0 <TIM_OC3Init+0x50>
 80161cc:	4c10      	ldr	r4, [pc, #64]	; (8016210 <TIM_OC3Init+0x80>)
 80161ce:	42a0      	cmp	r0, r4
 80161d0:	d006      	beq.n	80161e0 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80161d2:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80161d4:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80161d6:	61c2      	str	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80161d8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80161da:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80161dc:	6203      	str	r3, [r0, #32]
}
 80161de:	4770      	bx	lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80161e0:	89cc      	ldrh	r4, [r1, #14]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80161e2:	8a0e      	ldrh	r6, [r1, #16]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80161e4:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80161e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80161ea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80161ee:	f64f 34ff 	movw	r4, #64511	; 0xfbff
 80161f2:	401c      	ands	r4, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80161f4:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80161f6:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80161fa:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80161fc:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8016200:	ea45 1406 	orr.w	r4, r5, r6, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8016204:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8016206:	b2a5      	uxth	r5, r4
 8016208:	e7e3      	b.n	80161d2 <TIM_OC3Init+0x42>
 801620a:	bf00      	nop
 801620c:	40010000 	.word	0x40010000
 8016210:	40010400 	.word	0x40010400
	...

08016220 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8016220:	6a03      	ldr	r3, [r0, #32]
 8016222:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8016226:	4013      	ands	r3, r2
 8016228:	6203      	str	r3, [r0, #32]
{
 801622a:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801622c:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8016230:	898a      	ldrh	r2, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8016232:	884f      	ldrh	r7, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8016234:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8016236:	69c6      	ldr	r6, [r0, #28]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8016238:	4d12      	ldr	r5, [pc, #72]	; (8016284 <TIM_OC4Init+0x64>)
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 801623a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801623e:	433a      	orrs	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8016240:	ea0c 0303 	and.w	r3, ip, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8016244:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8016248:	f648 42ff 	movw	r2, #36095	; 0x8cff
 801624c:	4032      	ands	r2, r6
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801624e:	880e      	ldrh	r6, [r1, #0]
  if((TIMx == TIM1) || (TIMx == TIM8))
 8016250:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8016252:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8016256:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8016258:	b2a4      	uxth	r4, r4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801625a:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 801625c:	d00a      	beq.n	8016274 <TIM_OC4Init+0x54>
 801625e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8016262:	42a8      	cmp	r0, r5
 8016264:	d006      	beq.n	8016274 <TIM_OC4Init+0x54>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8016266:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8016268:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 801626a:	61c2      	str	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 801626c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801626e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8016270:	6203      	str	r3, [r0, #32]
}
 8016272:	4770      	bx	lr
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8016274:	8a0d      	ldrh	r5, [r1, #16]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8016276:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 801627a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 801627e:	b2a4      	uxth	r4, r4
 8016280:	e7f1      	b.n	8016266 <TIM_OC4Init+0x46>
 8016282:	bf00      	nop
 8016284:	40010000 	.word	0x40010000
	...

08016290 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8016290:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8016292:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8016296:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8016298:	4319      	orrs	r1, r3
 801629a:	6181      	str	r1, [r0, #24]
}
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop

080162a0 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80162a0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80162a2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80162a6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80162a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80162ac:	b289      	uxth	r1, r1
 80162ae:	6181      	str	r1, [r0, #24]
}
 80162b0:	4770      	bx	lr
 80162b2:	bf00      	nop
	...

080162c0 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80162c0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80162c2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80162c6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80162c8:	4319      	orrs	r1, r3
 80162ca:	61c1      	str	r1, [r0, #28]
}
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop

080162d0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80162d0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80162d2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80162d6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80162d8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80162dc:	b289      	uxth	r1, r1
 80162de:	61c1      	str	r1, [r0, #28]
}
 80162e0:	4770      	bx	lr
 80162e2:	bf00      	nop
	...

080162f0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80162f0:	b470      	push	{r4, r5, r6}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80162f2:	880b      	ldrh	r3, [r1, #0]
 80162f4:	884c      	ldrh	r4, [r1, #2]
 80162f6:	888a      	ldrh	r2, [r1, #4]
 80162f8:	88ce      	ldrh	r6, [r1, #6]
 80162fa:	890d      	ldrh	r5, [r1, #8]
 80162fc:	4323      	orrs	r3, r4
 80162fe:	4313      	orrs	r3, r2
 8016300:	894c      	ldrh	r4, [r1, #10]
 8016302:	898a      	ldrh	r2, [r1, #12]
 8016304:	4333      	orrs	r3, r6
 8016306:	432b      	orrs	r3, r5
 8016308:	4323      	orrs	r3, r4
 801630a:	4313      	orrs	r3, r2
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801630c:	6443      	str	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 801630e:	bc70      	pop	{r4, r5, r6}
 8016310:	4770      	bx	lr
 8016312:	bf00      	nop
	...

08016320 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8016320:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8016322:	b919      	cbnz	r1, 801632c <TIM_CtrlPWMOutputs+0xc>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8016324:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016328:	6443      	str	r3, [r0, #68]	; 0x44
  }  
}
 801632a:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 801632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016330:	6443      	str	r3, [r0, #68]	; 0x44
 8016332:	4770      	bx	lr
	...

08016340 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8016340:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 8016342:	b921      	cbnz	r1, 801634e <TIM_CCPreloadControl+0xe>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8016344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016348:	4013      	ands	r3, r2
 801634a:	6043      	str	r3, [r0, #4]
  }
}
 801634c:	4770      	bx	lr
    TIMx->CR2 |= TIM_CR2_CCPC;
 801634e:	f043 0301 	orr.w	r3, r3, #1
 8016352:	6043      	str	r3, [r0, #4]
 8016354:	4770      	bx	lr
 8016356:	bf00      	nop
	...

08016360 <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8016360:	b92a      	cbnz	r2, 801636e <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8016362:	68c3      	ldr	r3, [r0, #12]
 8016364:	43c9      	mvns	r1, r1
 8016366:	b289      	uxth	r1, r1
 8016368:	4019      	ands	r1, r3
 801636a:	60c1      	str	r1, [r0, #12]
  }
}
 801636c:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 801636e:	68c3      	ldr	r3, [r0, #12]
 8016370:	4319      	orrs	r1, r3
 8016372:	60c1      	str	r1, [r0, #12]
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop
	...

08016380 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8016380:	6903      	ldr	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8016382:	68c2      	ldr	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8016384:	ea11 0003 	ands.w	r0, r1, r3
 8016388:	d003      	beq.n	8016392 <TIM_GetITStatus+0x12>
 801638a:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 801638c:	bf14      	ite	ne
 801638e:	2001      	movne	r0, #1
 8016390:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8016392:	4770      	bx	lr
	...

080163a0 <TIM_ClearITPendingBit>:
 80163a0:	43c9      	mvns	r1, r1
 80163a2:	b289      	uxth	r1, r1
 80163a4:	6101      	str	r1, [r0, #16]
 80163a6:	4770      	bx	lr
	...

080163b0 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80163b0:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80163b2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80163b6:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80163b8:	4319      	orrs	r1, r3
 80163ba:	6081      	str	r1, [r0, #8]
}
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop

080163c0 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80163c0:	6843      	ldr	r3, [r0, #4]
 80163c2:	f64f 728f 	movw	r2, #65423	; 0xff8f
 80163c6:	4013      	ands	r3, r2
 80163c8:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80163ca:	6843      	ldr	r3, [r0, #4]
 80163cc:	4319      	orrs	r1, r3
 80163ce:	6041      	str	r1, [r0, #4]
}
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop
	...

080163e0 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80163e0:	6883      	ldr	r3, [r0, #8]
 80163e2:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80163e6:	4013      	ands	r3, r2
 80163e8:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80163ea:	6883      	ldr	r3, [r0, #8]
 80163ec:	4319      	orrs	r1, r3
 80163ee:	6081      	str	r1, [r0, #8]
}
 80163f0:	4770      	bx	lr
 80163f2:	bf00      	nop
	...

08016400 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8016400:	6883      	ldr	r3, [r0, #8]
 8016402:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8016406:	4013      	ands	r3, r2
 8016408:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 801640a:	6883      	ldr	r3, [r0, #8]
 801640c:	4319      	orrs	r1, r3
 801640e:	6081      	str	r1, [r0, #8]
}
 8016410:	4770      	bx	lr
 8016412:	bf00      	nop
	...

08016420 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8016420:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016422:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8016424:	6986      	ldr	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016426:	f8d0 c020 	ldr.w	ip, [r0, #32]
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 801642a:	f64f 74dd 	movw	r4, #65501	; 0xffdd
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 801642e:	f64f 45fc 	movw	r5, #64764	; 0xfcfc
 8016432:	4035      	ands	r5, r6
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8016434:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8016438:	ea0c 0404 	and.w	r4, ip, r4
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801643c:	f64f 76f8 	movw	r6, #65528	; 0xfff8
 8016440:	403e      	ands	r6, r7
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8016442:	431c      	orrs	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8016444:	f445 7580 	orr.w	r5, r5, #256	; 0x100

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016448:	b2a4      	uxth	r4, r4
  TIMx->CCMR1 = tmpccmr1;
 801644a:	f045 0501 	orr.w	r5, r5, #1
  TIMx->SMCR = tmpsmcr;
 801644e:	4331      	orrs	r1, r6
 8016450:	6081      	str	r1, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8016452:	6185      	str	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8016454:	6204      	str	r4, [r0, #32]
}
 8016456:	bcf0      	pop	{r4, r5, r6, r7}
 8016458:	4770      	bx	lr
 801645a:	bf00      	nop
 801645c:	0000      	movs	r0, r0
	...

08016460 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8016460:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8016462:	2101      	movs	r1, #1
 8016464:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016468:	f7ff fc82 	bl	8015d70 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 801646c:	2100      	movs	r1, #0
 801646e:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8016472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8016476:	f7ff bc7b 	b.w	8015d70 <RCC_APB1PeriphResetCmd>
 801647a:	bf00      	nop
 801647c:	0000      	movs	r0, r0
	...

08016480 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8016480:	4a03      	ldr	r2, [pc, #12]	; (8016490 <WWDG_SetPrescaler+0x10>)
 8016482:	6853      	ldr	r3, [r2, #4]
 8016484:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8016488:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 801648a:	6050      	str	r0, [r2, #4]
}
 801648c:	4770      	bx	lr
 801648e:	bf00      	nop
 8016490:	40002c00 	.word	0x40002c00
	...

080164a0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80164a0:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80164a2:	4a08      	ldr	r2, [pc, #32]	; (80164c4 <WWDG_SetWindowValue+0x24>)
  __IO uint32_t tmpreg = 0;
 80164a4:	2300      	movs	r3, #0
 80164a6:	9301      	str	r3, [sp, #4]
  tmpreg = WWDG->CFR & CFR_W_MASK;
 80164a8:	6853      	ldr	r3, [r2, #4]
 80164aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80164ae:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80164b0:	9b01      	ldr	r3, [sp, #4]
 80164b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80164b6:	4318      	orrs	r0, r3
 80164b8:	9001      	str	r0, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80164ba:	9b01      	ldr	r3, [sp, #4]
 80164bc:	6053      	str	r3, [r2, #4]
}
 80164be:	b002      	add	sp, #8
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop
 80164c4:	40002c00 	.word	0x40002c00
	...

080164d0 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 80164d0:	4b02      	ldr	r3, [pc, #8]	; (80164dc <WWDG_SetCounter+0xc>)
 80164d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80164d6:	6018      	str	r0, [r3, #0]
}
 80164d8:	4770      	bx	lr
 80164da:	bf00      	nop
 80164dc:	40002c00 	.word	0x40002c00

080164e0 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 80164e0:	4b02      	ldr	r3, [pc, #8]	; (80164ec <WWDG_Enable+0xc>)
 80164e2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80164e6:	6018      	str	r0, [r3, #0]
}
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	40002c00 	.word	0x40002c00

080164f0 <cosf>:
 80164f0:	b500      	push	{lr}
 80164f2:	ee10 3a10 	vmov	r3, s0
 80164f6:	4a20      	ldr	r2, [pc, #128]	; (8016578 <cosf+0x88>)
 80164f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164fc:	4293      	cmp	r3, r2
 80164fe:	b083      	sub	sp, #12
 8016500:	dd19      	ble.n	8016536 <cosf+0x46>
 8016502:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016506:	db04      	blt.n	8016512 <cosf+0x22>
 8016508:	ee30 0a40 	vsub.f32	s0, s0, s0
 801650c:	b003      	add	sp, #12
 801650e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016512:	4668      	mov	r0, sp
 8016514:	f000 fb7c 	bl	8016c10 <__ieee754_rem_pio2f>
 8016518:	f000 0003 	and.w	r0, r0, #3
 801651c:	2801      	cmp	r0, #1
 801651e:	d011      	beq.n	8016544 <cosf+0x54>
 8016520:	2802      	cmp	r0, #2
 8016522:	d01f      	beq.n	8016564 <cosf+0x74>
 8016524:	b1b8      	cbz	r0, 8016556 <cosf+0x66>
 8016526:	2001      	movs	r0, #1
 8016528:	eddd 0a01 	vldr	s1, [sp, #4]
 801652c:	ed9d 0a00 	vldr	s0, [sp]
 8016530:	f001 f876 	bl	8017620 <__kernel_sinf>
 8016534:	e7ea      	b.n	801650c <cosf+0x1c>
 8016536:	eddf 0a11 	vldr	s1, [pc, #68]	; 801657c <cosf+0x8c>
 801653a:	f000 fcc1 	bl	8016ec0 <__kernel_cosf>
 801653e:	b003      	add	sp, #12
 8016540:	f85d fb04 	ldr.w	pc, [sp], #4
 8016544:	eddd 0a01 	vldr	s1, [sp, #4]
 8016548:	ed9d 0a00 	vldr	s0, [sp]
 801654c:	f001 f868 	bl	8017620 <__kernel_sinf>
 8016550:	eeb1 0a40 	vneg.f32	s0, s0
 8016554:	e7da      	b.n	801650c <cosf+0x1c>
 8016556:	eddd 0a01 	vldr	s1, [sp, #4]
 801655a:	ed9d 0a00 	vldr	s0, [sp]
 801655e:	f000 fcaf 	bl	8016ec0 <__kernel_cosf>
 8016562:	e7d3      	b.n	801650c <cosf+0x1c>
 8016564:	eddd 0a01 	vldr	s1, [sp, #4]
 8016568:	ed9d 0a00 	vldr	s0, [sp]
 801656c:	f000 fca8 	bl	8016ec0 <__kernel_cosf>
 8016570:	eeb1 0a40 	vneg.f32	s0, s0
 8016574:	e7ca      	b.n	801650c <cosf+0x1c>
 8016576:	bf00      	nop
 8016578:	3f490fd8 	.word	0x3f490fd8
 801657c:	00000000 	.word	0x00000000

08016580 <logf>:
 8016580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016584:	b082      	sub	sp, #8
 8016586:	ed8d 0a00 	vstr	s0, [sp]
 801658a:	9b00      	ldr	r3, [sp, #0]
 801658c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016590:	d058      	beq.n	8016644 <logf+0xc4>
 8016592:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8016596:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801659a:	d258      	bcs.n	801664e <logf+0xce>
 801659c:	f103 4540 	add.w	r5, r3, #3221225472	; 0xc0000000
 80165a0:	f505 054d 	add.w	r5, r5, #13434880	; 0xcd0000
 80165a4:	4c3c      	ldr	r4, [pc, #240]	; (8016698 <logf+0x118>)
 80165a6:	0de8      	lsrs	r0, r5, #23
 80165a8:	05c0      	lsls	r0, r0, #23
 80165aa:	f3c5 4ac3 	ubfx	sl, r5, #19, #4
 80165ae:	1a18      	subs	r0, r3, r0
 80165b0:	eb04 1a0a 	add.w	sl, r4, sl, lsl #4
 80165b4:	f7f5 ff28 	bl	800c408 <__aeabi_f2d>
 80165b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80165bc:	f7f5 ff80 	bl	800c4c0 <__aeabi_dmul>
 80165c0:	2200      	movs	r2, #0
 80165c2:	4b36      	ldr	r3, [pc, #216]	; (801669c <logf+0x11c>)
 80165c4:	f7f5 fdc0 	bl	800c148 <__aeabi_dsub>
 80165c8:	4602      	mov	r2, r0
 80165ca:	460b      	mov	r3, r1
 80165cc:	4606      	mov	r6, r0
 80165ce:	460f      	mov	r7, r1
 80165d0:	f7f5 ff76 	bl	800c4c0 <__aeabi_dmul>
 80165d4:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 80165d8:	4680      	mov	r8, r0
 80165da:	4689      	mov	r9, r1
 80165dc:	4630      	mov	r0, r6
 80165de:	4639      	mov	r1, r7
 80165e0:	f7f5 ff6e 	bl	800c4c0 <__aeabi_dmul>
 80165e4:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 80165e8:	f7f5 fdb0 	bl	800c14c <__adddf3>
 80165ec:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 80165f0:	e9cd 0100 	strd	r0, r1, [sp]
 80165f4:	4640      	mov	r0, r8
 80165f6:	4649      	mov	r1, r9
 80165f8:	f7f5 ff62 	bl	800c4c0 <__aeabi_dmul>
 80165fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016600:	f7f5 fda4 	bl	800c14c <__adddf3>
 8016604:	4642      	mov	r2, r8
 8016606:	464b      	mov	r3, r9
 8016608:	f7f5 ff5a 	bl	800c4c0 <__aeabi_dmul>
 801660c:	4680      	mov	r8, r0
 801660e:	15e8      	asrs	r0, r5, #23
 8016610:	4689      	mov	r9, r1
 8016612:	f7f5 fee7 	bl	800c3e4 <__aeabi_i2d>
 8016616:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 801661a:	f7f5 ff51 	bl	800c4c0 <__aeabi_dmul>
 801661e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8016622:	f7f5 fd93 	bl	800c14c <__adddf3>
 8016626:	4632      	mov	r2, r6
 8016628:	463b      	mov	r3, r7
 801662a:	f7f5 fd8f 	bl	800c14c <__adddf3>
 801662e:	4642      	mov	r2, r8
 8016630:	464b      	mov	r3, r9
 8016632:	f7f5 fd8b 	bl	800c14c <__adddf3>
 8016636:	f7f6 fa0b 	bl	800ca50 <__aeabi_d2f>
 801663a:	ee00 0a10 	vmov	s0, r0
 801663e:	b002      	add	sp, #8
 8016640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016644:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80166a0 <logf+0x120>
 8016648:	b002      	add	sp, #8
 801664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801664e:	005a      	lsls	r2, r3, #1
 8016650:	d015      	beq.n	801667e <logf+0xfe>
 8016652:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016656:	d00f      	beq.n	8016678 <logf+0xf8>
 8016658:	2b00      	cmp	r3, #0
 801665a:	db16      	blt.n	801668a <logf+0x10a>
 801665c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8016660:	d213      	bcs.n	801668a <logf+0x10a>
 8016662:	eddf 7a10 	vldr	s15, [pc, #64]	; 80166a4 <logf+0x124>
 8016666:	ed9d 7a00 	vldr	s14, [sp]
 801666a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801666e:	ee17 3a90 	vmov	r3, s15
 8016672:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8016676:	e791      	b.n	801659c <logf+0x1c>
 8016678:	ed9d 0a00 	vldr	s0, [sp]
 801667c:	e7df      	b.n	801663e <logf+0xbe>
 801667e:	2001      	movs	r0, #1
 8016680:	b002      	add	sp, #8
 8016682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016686:	f001 b84b 	b.w	8017720 <__math_divzerof>
 801668a:	ed9d 0a00 	vldr	s0, [sp]
 801668e:	b002      	add	sp, #8
 8016690:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016694:	f001 b85c 	b.w	8017750 <__math_invalidf>
 8016698:	08018510 	.word	0x08018510
 801669c:	3ff00000 	.word	0x3ff00000
 80166a0:	00000000 	.word	0x00000000
 80166a4:	4b000000 	.word	0x4b000000
	...

080166b0 <powf>:
 80166b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b4:	b087      	sub	sp, #28
 80166b6:	ed8d 0a00 	vstr	s0, [sp]
 80166ba:	9800      	ldr	r0, [sp, #0]
 80166bc:	ee10 5a90 	vmov	r5, s1
 80166c0:	f5a0 0100 	sub.w	r1, r0, #8388608	; 0x800000
 80166c4:	006b      	lsls	r3, r5, #1
 80166c6:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80166ca:	ee10 ba90 	vmov	fp, s1
 80166ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80166d2:	49c9      	ldr	r1, [pc, #804]	; (80169f8 <powf+0x348>)
 80166d4:	f080 80dc 	bcs.w	8016890 <powf+0x1e0>
 80166d8:	428a      	cmp	r2, r1
 80166da:	f200 813e 	bhi.w	801695a <powf+0x2aa>
 80166de:	2300      	movs	r3, #0
 80166e0:	9303      	str	r3, [sp, #12]
 80166e2:	f100 4640 	add.w	r6, r0, #3221225472	; 0xc0000000
 80166e6:	f506 064d 	add.w	r6, r6, #13434880	; 0xcd0000
 80166ea:	4cc4      	ldr	r4, [pc, #784]	; (80169fc <powf+0x34c>)
 80166ec:	0df7      	lsrs	r7, r6, #23
 80166ee:	05ff      	lsls	r7, r7, #23
 80166f0:	f3c6 46c3 	ubfx	r6, r6, #19, #4
 80166f4:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 80166f8:	1bc0      	subs	r0, r0, r7
 80166fa:	f7f5 fe85 	bl	800c408 <__aeabi_f2d>
 80166fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016702:	f7f5 fedd 	bl	800c4c0 <__aeabi_dmul>
 8016706:	2200      	movs	r2, #0
 8016708:	4bbd      	ldr	r3, [pc, #756]	; (8016a00 <powf+0x350>)
 801670a:	f7f5 fd1d 	bl	800c148 <__aeabi_dsub>
 801670e:	4602      	mov	r2, r0
 8016710:	460b      	mov	r3, r1
 8016712:	4680      	mov	r8, r0
 8016714:	4689      	mov	r9, r1
 8016716:	f7f5 fed3 	bl	800c4c0 <__aeabi_dmul>
 801671a:	4682      	mov	sl, r0
 801671c:	15f8      	asrs	r0, r7, #23
 801671e:	468b      	mov	fp, r1
 8016720:	f7f5 fe60 	bl	800c3e4 <__aeabi_i2d>
 8016724:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8016728:	f7f5 fd10 	bl	800c14c <__adddf3>
 801672c:	e9d4 2348 	ldrd	r2, r3, [r4, #288]	; 0x120
 8016730:	4606      	mov	r6, r0
 8016732:	460f      	mov	r7, r1
 8016734:	4640      	mov	r0, r8
 8016736:	4649      	mov	r1, r9
 8016738:	f7f5 fec2 	bl	800c4c0 <__aeabi_dmul>
 801673c:	4602      	mov	r2, r0
 801673e:	460b      	mov	r3, r1
 8016740:	4630      	mov	r0, r6
 8016742:	4639      	mov	r1, r7
 8016744:	f7f5 fd02 	bl	800c14c <__adddf3>
 8016748:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 801674c:	e9cd 0100 	strd	r0, r1, [sp]
 8016750:	4640      	mov	r0, r8
 8016752:	4649      	mov	r1, r9
 8016754:	f7f5 feb4 	bl	800c4c0 <__aeabi_dmul>
 8016758:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 801675c:	f7f5 fcf6 	bl	800c14c <__adddf3>
 8016760:	4652      	mov	r2, sl
 8016762:	4606      	mov	r6, r0
 8016764:	460f      	mov	r7, r1
 8016766:	465b      	mov	r3, fp
 8016768:	4650      	mov	r0, sl
 801676a:	4659      	mov	r1, fp
 801676c:	f7f5 fea8 	bl	800c4c0 <__aeabi_dmul>
 8016770:	4602      	mov	r2, r0
 8016772:	460b      	mov	r3, r1
 8016774:	4630      	mov	r0, r6
 8016776:	4639      	mov	r1, r7
 8016778:	f7f5 fea2 	bl	800c4c0 <__aeabi_dmul>
 801677c:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8016780:	4606      	mov	r6, r0
 8016782:	460f      	mov	r7, r1
 8016784:	4640      	mov	r0, r8
 8016786:	4649      	mov	r1, r9
 8016788:	f7f5 fe9a 	bl	800c4c0 <__aeabi_dmul>
 801678c:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 8016790:	f7f5 fcdc 	bl	800c14c <__adddf3>
 8016794:	4652      	mov	r2, sl
 8016796:	465b      	mov	r3, fp
 8016798:	f7f5 fe92 	bl	800c4c0 <__aeabi_dmul>
 801679c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167a0:	f7f5 fcd4 	bl	800c14c <__adddf3>
 80167a4:	4632      	mov	r2, r6
 80167a6:	463b      	mov	r3, r7
 80167a8:	f7f5 fcd0 	bl	800c14c <__adddf3>
 80167ac:	4606      	mov	r6, r0
 80167ae:	4628      	mov	r0, r5
 80167b0:	460f      	mov	r7, r1
 80167b2:	f7f5 fe29 	bl	800c408 <__aeabi_f2d>
 80167b6:	4602      	mov	r2, r0
 80167b8:	460b      	mov	r3, r1
 80167ba:	4630      	mov	r0, r6
 80167bc:	4639      	mov	r1, r7
 80167be:	f7f5 fe7f 	bl	800c4c0 <__aeabi_dmul>
 80167c2:	2500      	movs	r5, #0
 80167c4:	0bca      	lsrs	r2, r1, #15
 80167c6:	2300      	movs	r3, #0
 80167c8:	b292      	uxth	r2, r2
 80167ca:	f248 04be 	movw	r4, #32958	; 0x80be
 80167ce:	429d      	cmp	r5, r3
 80167d0:	bf08      	it	eq
 80167d2:	4294      	cmpeq	r4, r2
 80167d4:	4606      	mov	r6, r0
 80167d6:	460f      	mov	r7, r1
 80167d8:	d375      	bcc.n	80168c6 <powf+0x216>
 80167da:	f8df a234 	ldr.w	sl, [pc, #564]	; 8016a10 <powf+0x360>
 80167de:	e9da 8940 	ldrd	r8, r9, [sl, #256]	; 0x100
 80167e2:	4630      	mov	r0, r6
 80167e4:	4642      	mov	r2, r8
 80167e6:	464b      	mov	r3, r9
 80167e8:	4639      	mov	r1, r7
 80167ea:	f7f5 fcaf 	bl	800c14c <__adddf3>
 80167ee:	4642      	mov	r2, r8
 80167f0:	464b      	mov	r3, r9
 80167f2:	4604      	mov	r4, r0
 80167f4:	f7f5 fca8 	bl	800c148 <__aeabi_dsub>
 80167f8:	4602      	mov	r2, r0
 80167fa:	460b      	mov	r3, r1
 80167fc:	4630      	mov	r0, r6
 80167fe:	4639      	mov	r1, r7
 8016800:	f7f5 fca2 	bl	800c148 <__aeabi_dsub>
 8016804:	f004 021f 	and.w	r2, r4, #31
 8016808:	eb0a 0cc2 	add.w	ip, sl, r2, lsl #3
 801680c:	e9dc 8900 	ldrd	r8, r9, [ip]
 8016810:	e9da 2346 	ldrd	r2, r3, [sl, #280]	; 0x118
 8016814:	4606      	mov	r6, r0
 8016816:	460f      	mov	r7, r1
 8016818:	e9cd 8900 	strd	r8, r9, [sp]
 801681c:	f7f5 fe50 	bl	800c4c0 <__aeabi_dmul>
 8016820:	2200      	movs	r2, #0
 8016822:	4b77      	ldr	r3, [pc, #476]	; (8016a00 <powf+0x350>)
 8016824:	f7f5 fc92 	bl	800c14c <__adddf3>
 8016828:	e9da 2342 	ldrd	r2, r3, [sl, #264]	; 0x108
 801682c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016830:	4630      	mov	r0, r6
 8016832:	4639      	mov	r1, r7
 8016834:	f7f5 fe44 	bl	800c4c0 <__aeabi_dmul>
 8016838:	e9da 2344 	ldrd	r2, r3, [sl, #272]	; 0x110
 801683c:	f7f5 fc86 	bl	800c14c <__adddf3>
 8016840:	4632      	mov	r2, r6
 8016842:	4680      	mov	r8, r0
 8016844:	4689      	mov	r9, r1
 8016846:	463b      	mov	r3, r7
 8016848:	4630      	mov	r0, r6
 801684a:	4639      	mov	r1, r7
 801684c:	f7f5 fe38 	bl	800c4c0 <__aeabi_dmul>
 8016850:	4602      	mov	r2, r0
 8016852:	460b      	mov	r3, r1
 8016854:	4640      	mov	r0, r8
 8016856:	4649      	mov	r1, r9
 8016858:	f7f5 fe32 	bl	800c4c0 <__aeabi_dmul>
 801685c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016860:	f7f5 fc74 	bl	800c14c <__adddf3>
 8016864:	9b03      	ldr	r3, [sp, #12]
 8016866:	e9dd 8900 	ldrd	r8, r9, [sp]
 801686a:	18e4      	adds	r4, r4, r3
 801686c:	2200      	movs	r2, #0
 801686e:	eb18 0802 	adds.w	r8, r8, r2
 8016872:	ea4f 33c4 	mov.w	r3, r4, lsl #15
 8016876:	eb49 0903 	adc.w	r9, r9, r3
 801687a:	4642      	mov	r2, r8
 801687c:	464b      	mov	r3, r9
 801687e:	f7f5 fe1f 	bl	800c4c0 <__aeabi_dmul>
 8016882:	f7f6 f8e5 	bl	800ca50 <__aeabi_d2f>
 8016886:	ee00 0a10 	vmov	s0, r0
 801688a:	b007      	add	sp, #28
 801688c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016890:	428a      	cmp	r2, r1
 8016892:	d862      	bhi.n	801695a <powf+0x2aa>
 8016894:	0043      	lsls	r3, r0, #1
 8016896:	1e5a      	subs	r2, r3, #1
 8016898:	428a      	cmp	r2, r1
 801689a:	d868      	bhi.n	801696e <powf+0x2be>
 801689c:	2800      	cmp	r0, #0
 801689e:	db30      	blt.n	8016902 <powf+0x252>
 80168a0:	2300      	movs	r3, #0
 80168a2:	9303      	str	r3, [sp, #12]
 80168a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80168a8:	f4bf af1b 	bcs.w	80166e2 <powf+0x32>
 80168ac:	eddf 7a55 	vldr	s15, [pc, #340]	; 8016a04 <powf+0x354>
 80168b0:	ed9d 7a00 	vldr	s14, [sp]
 80168b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168b8:	ee17 0a90 	vmov	r0, s15
 80168bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80168c0:	f1a0 6038 	sub.w	r0, r0, #192937984	; 0xb800000
 80168c4:	e70d      	b.n	80166e2 <powf+0x32>
 80168c6:	a348      	add	r3, pc, #288	; (adr r3, 80169e8 <powf+0x338>)
 80168c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168cc:	f7f6 f88e 	bl	800c9ec <__aeabi_dcmpgt>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	d139      	bne.n	8016948 <powf+0x298>
 80168d4:	2200      	movs	r2, #0
 80168d6:	4b4c      	ldr	r3, [pc, #304]	; (8016a08 <powf+0x358>)
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	f7f6 f872 	bl	800c9c4 <__aeabi_dcmple>
 80168e0:	bb28      	cbnz	r0, 801692e <powf+0x27e>
 80168e2:	a343      	add	r3, pc, #268	; (adr r3, 80169f0 <powf+0x340>)
 80168e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e8:	4630      	mov	r0, r6
 80168ea:	4639      	mov	r1, r7
 80168ec:	f7f6 f860 	bl	800c9b0 <__aeabi_dcmplt>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	f43f af72 	beq.w	80167da <powf+0x12a>
 80168f6:	9803      	ldr	r0, [sp, #12]
 80168f8:	b007      	add	sp, #28
 80168fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168fe:	f000 beff 	b.w	8017700 <__math_may_uflowf>
 8016902:	f3c5 53c7 	ubfx	r3, r5, #23, #8
 8016906:	2b7e      	cmp	r3, #126	; 0x7e
 8016908:	dd17      	ble.n	801693a <powf+0x28a>
 801690a:	2b96      	cmp	r3, #150	; 0x96
 801690c:	dc22      	bgt.n	8016954 <powf+0x2a4>
 801690e:	2201      	movs	r2, #1
 8016910:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016914:	fa02 f303 	lsl.w	r3, r2, r3
 8016918:	1e5a      	subs	r2, r3, #1
 801691a:	422a      	tst	r2, r5
 801691c:	d10d      	bne.n	801693a <powf+0x28a>
 801691e:	402b      	ands	r3, r5
 8016920:	bf18      	it	ne
 8016922:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8016926:	9303      	str	r3, [sp, #12]
 8016928:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801692c:	e7ba      	b.n	80168a4 <powf+0x1f4>
 801692e:	9803      	ldr	r0, [sp, #12]
 8016930:	b007      	add	sp, #28
 8016932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016936:	f000 bedb 	b.w	80176f0 <__math_uflowf>
 801693a:	ed9d 0a00 	vldr	s0, [sp]
 801693e:	b007      	add	sp, #28
 8016940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016944:	f000 bf04 	b.w	8017750 <__math_invalidf>
 8016948:	9803      	ldr	r0, [sp, #12]
 801694a:	b007      	add	sp, #28
 801694c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016950:	f000 bede 	b.w	8017710 <__math_oflowf>
 8016954:	2300      	movs	r3, #0
 8016956:	9303      	str	r3, [sp, #12]
 8016958:	e7e6      	b.n	8016928 <powf+0x278>
 801695a:	bb3b      	cbnz	r3, 80169ac <powf+0x2fc>
 801695c:	f480 0380 	eor.w	r3, r0, #4194304	; 0x400000
 8016960:	005b      	lsls	r3, r3, #1
 8016962:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8016966:	d81a      	bhi.n	801699e <powf+0x2ee>
 8016968:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801696c:	e78d      	b.n	801688a <powf+0x1da>
 801696e:	eddd 7a00 	vldr	s15, [sp]
 8016972:	2800      	cmp	r0, #0
 8016974:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8016978:	db55      	blt.n	8016a26 <powf+0x376>
 801697a:	2000      	movs	r0, #0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d149      	bne.n	8016a14 <powf+0x364>
 8016980:	f1bb 0f00 	cmp.w	fp, #0
 8016984:	da81      	bge.n	801688a <powf+0x1da>
 8016986:	b007      	add	sp, #28
 8016988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801698c:	f000 bec8 	b.w	8017720 <__math_divzerof>
 8016990:	f48b 0b80 	eor.w	fp, fp, #4194304	; 0x400000
 8016994:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8016998:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801699c:	d9e4      	bls.n	8016968 <powf+0x2b8>
 801699e:	eddd 7a00 	vldr	s15, [sp]
 80169a2:	ee07 5a10 	vmov	s14, r5
 80169a6:	ee37 0a87 	vadd.f32	s0, s15, s14
 80169aa:	e76e      	b.n	801688a <powf+0x1da>
 80169ac:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 80169b0:	d0ee      	beq.n	8016990 <powf+0x2e0>
 80169b2:	0040      	lsls	r0, r0, #1
 80169b4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80169b8:	d8f1      	bhi.n	801699e <powf+0x2ee>
 80169ba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80169be:	d1ee      	bne.n	801699e <powf+0x2ee>
 80169c0:	f1b0 4ffe 	cmp.w	r0, #2130706432	; 0x7f000000
 80169c4:	d0d0      	beq.n	8016968 <powf+0x2b8>
 80169c6:	f1b0 4ffe 	cmp.w	r0, #2130706432	; 0x7f000000
 80169ca:	ea6f 0b0b 	mvn.w	fp, fp
 80169ce:	bf34      	ite	cc
 80169d0:	2000      	movcc	r0, #0
 80169d2:	2001      	movcs	r0, #1
 80169d4:	ea4f 7bdb 	mov.w	fp, fp, lsr #31
 80169d8:	4558      	cmp	r0, fp
 80169da:	d038      	beq.n	8016a4e <powf+0x39e>
 80169dc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8016a0c <powf+0x35c>
 80169e0:	e753      	b.n	801688a <powf+0x1da>
 80169e2:	bf00      	nop
 80169e4:	f3af 8000 	nop.w
 80169e8:	ffd1d571 	.word	0xffd1d571
 80169ec:	405fffff 	.word	0x405fffff
 80169f0:	00000000 	.word	0x00000000
 80169f4:	c062a000 	.word	0xc062a000
 80169f8:	fefffffe 	.word	0xfefffffe
 80169fc:	08018630 	.word	0x08018630
 8016a00:	3ff00000 	.word	0x3ff00000
 8016a04:	4b000000 	.word	0x4b000000
 8016a08:	c062c000 	.word	0xc062c000
 8016a0c:	00000000 	.word	0x00000000
 8016a10:	08018b50 	.word	0x08018b50
 8016a14:	f1bb 0f00 	cmp.w	fp, #0
 8016a18:	f6bf af37 	bge.w	801688a <powf+0x1da>
 8016a1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a20:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016a24:	e731      	b.n	801688a <powf+0x1da>
 8016a26:	f3c5 52c7 	ubfx	r2, r5, #23, #8
 8016a2a:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8016a2e:	2917      	cmp	r1, #23
 8016a30:	d8a3      	bhi.n	801697a <powf+0x2ca>
 8016a32:	f1c2 0096 	rsb	r0, r2, #150	; 0x96
 8016a36:	2201      	movs	r2, #1
 8016a38:	fa02 f000 	lsl.w	r0, r2, r0
 8016a3c:	1e41      	subs	r1, r0, #1
 8016a3e:	4229      	tst	r1, r5
 8016a40:	d19b      	bne.n	801697a <powf+0x2ca>
 8016a42:	4028      	ands	r0, r5
 8016a44:	d09a      	beq.n	801697c <powf+0x2cc>
 8016a46:	eeb1 0a40 	vneg.f32	s0, s0
 8016a4a:	4610      	mov	r0, r2
 8016a4c:	e796      	b.n	801697c <powf+0x2cc>
 8016a4e:	ee07 5a90 	vmov	s15, r5
 8016a52:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8016a56:	e718      	b.n	801688a <powf+0x1da>
	...

08016a60 <roundf>:
 8016a60:	b082      	sub	sp, #8
 8016a62:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016a66:	9901      	ldr	r1, [sp, #4]
 8016a68:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8016a6c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8016a70:	2a16      	cmp	r2, #22
 8016a72:	dc0c      	bgt.n	8016a8e <roundf+0x2e>
 8016a74:	2a00      	cmp	r2, #0
 8016a76:	db10      	blt.n	8016a9a <roundf+0x3a>
 8016a78:	4810      	ldr	r0, [pc, #64]	; (8016abc <roundf+0x5c>)
 8016a7a:	4110      	asrs	r0, r2
 8016a7c:	4201      	tst	r1, r0
 8016a7e:	d008      	beq.n	8016a92 <roundf+0x32>
 8016a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016a84:	4113      	asrs	r3, r2
 8016a86:	440b      	add	r3, r1
 8016a88:	ea23 0300 	bic.w	r3, r3, r0
 8016a8c:	e00b      	b.n	8016aa6 <roundf+0x46>
 8016a8e:	2a80      	cmp	r2, #128	; 0x80
 8016a90:	d00d      	beq.n	8016aae <roundf+0x4e>
 8016a92:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016a96:	b002      	add	sp, #8
 8016a98:	4770      	bx	lr
 8016a9a:	3201      	adds	r2, #1
 8016a9c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8016aa0:	d101      	bne.n	8016aa6 <roundf+0x46>
 8016aa2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8016aa6:	ee00 3a10 	vmov	s0, r3
 8016aaa:	b002      	add	sp, #8
 8016aac:	4770      	bx	lr
 8016aae:	eddd 7a01 	vldr	s15, [sp, #4]
 8016ab2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8016ab6:	b002      	add	sp, #8
 8016ab8:	4770      	bx	lr
 8016aba:	bf00      	nop
 8016abc:	007fffff 	.word	0x007fffff

08016ac0 <sinf>:
 8016ac0:	b500      	push	{lr}
 8016ac2:	ee10 3a10 	vmov	r3, s0
 8016ac6:	4a21      	ldr	r2, [pc, #132]	; (8016b4c <sinf+0x8c>)
 8016ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016acc:	4293      	cmp	r3, r2
 8016ace:	b083      	sub	sp, #12
 8016ad0:	dd1a      	ble.n	8016b08 <sinf+0x48>
 8016ad2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016ad6:	db04      	blt.n	8016ae2 <sinf+0x22>
 8016ad8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016adc:	b003      	add	sp, #12
 8016ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ae2:	4668      	mov	r0, sp
 8016ae4:	f000 f894 	bl	8016c10 <__ieee754_rem_pio2f>
 8016ae8:	f000 0003 	and.w	r0, r0, #3
 8016aec:	2801      	cmp	r0, #1
 8016aee:	d013      	beq.n	8016b18 <sinf+0x58>
 8016af0:	2802      	cmp	r0, #2
 8016af2:	d020      	beq.n	8016b36 <sinf+0x76>
 8016af4:	b1b8      	cbz	r0, 8016b26 <sinf+0x66>
 8016af6:	eddd 0a01 	vldr	s1, [sp, #4]
 8016afa:	ed9d 0a00 	vldr	s0, [sp]
 8016afe:	f000 f9df 	bl	8016ec0 <__kernel_cosf>
 8016b02:	eeb1 0a40 	vneg.f32	s0, s0
 8016b06:	e7e9      	b.n	8016adc <sinf+0x1c>
 8016b08:	2000      	movs	r0, #0
 8016b0a:	eddf 0a11 	vldr	s1, [pc, #68]	; 8016b50 <sinf+0x90>
 8016b0e:	f000 fd87 	bl	8017620 <__kernel_sinf>
 8016b12:	b003      	add	sp, #12
 8016b14:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b18:	eddd 0a01 	vldr	s1, [sp, #4]
 8016b1c:	ed9d 0a00 	vldr	s0, [sp]
 8016b20:	f000 f9ce 	bl	8016ec0 <__kernel_cosf>
 8016b24:	e7da      	b.n	8016adc <sinf+0x1c>
 8016b26:	2001      	movs	r0, #1
 8016b28:	eddd 0a01 	vldr	s1, [sp, #4]
 8016b2c:	ed9d 0a00 	vldr	s0, [sp]
 8016b30:	f000 fd76 	bl	8017620 <__kernel_sinf>
 8016b34:	e7d2      	b.n	8016adc <sinf+0x1c>
 8016b36:	2001      	movs	r0, #1
 8016b38:	eddd 0a01 	vldr	s1, [sp, #4]
 8016b3c:	ed9d 0a00 	vldr	s0, [sp]
 8016b40:	f000 fd6e 	bl	8017620 <__kernel_sinf>
 8016b44:	eeb1 0a40 	vneg.f32	s0, s0
 8016b48:	e7c8      	b.n	8016adc <sinf+0x1c>
 8016b4a:	bf00      	nop
 8016b4c:	3f490fd8 	.word	0x3f490fd8
	...

08016b60 <sqrtf>:
 8016b60:	b510      	push	{r4, lr}
 8016b62:	ed2d 8b02 	vpush	{d8}
 8016b66:	b08a      	sub	sp, #40	; 0x28
 8016b68:	eeb0 8a40 	vmov.f32	s16, s0
 8016b6c:	f000 f9a0 	bl	8016eb0 <__ieee754_sqrtf>
 8016b70:	4b24      	ldr	r3, [pc, #144]	; (8016c04 <sqrtf+0xa4>)
 8016b72:	f993 4000 	ldrsb.w	r4, [r3]
 8016b76:	1c63      	adds	r3, r4, #1
 8016b78:	d009      	beq.n	8016b8e <sqrtf+0x2e>
 8016b7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8016b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b82:	d604      	bvs.n	8016b8e <sqrtf+0x2e>
 8016b84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b8c:	d403      	bmi.n	8016b96 <sqrtf+0x36>
 8016b8e:	b00a      	add	sp, #40	; 0x28
 8016b90:	ecbd 8b02 	vpop	{d8}
 8016b94:	bd10      	pop	{r4, pc}
 8016b96:	2301      	movs	r3, #1
 8016b98:	4a1b      	ldr	r2, [pc, #108]	; (8016c08 <sqrtf+0xa8>)
 8016b9a:	9300      	str	r3, [sp, #0]
 8016b9c:	ee18 0a10 	vmov	r0, s16
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	9201      	str	r2, [sp, #4]
 8016ba4:	9308      	str	r3, [sp, #32]
 8016ba6:	f7f5 fc2f 	bl	800c408 <__aeabi_f2d>
 8016baa:	2200      	movs	r2, #0
 8016bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	b1bc      	cbz	r4, 8016be8 <sqrtf+0x88>
 8016bb8:	4610      	mov	r0, r2
 8016bba:	4619      	mov	r1, r3
 8016bbc:	f7f5 fdaa 	bl	800c714 <__aeabi_ddiv>
 8016bc0:	2c02      	cmp	r4, #2
 8016bc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016bc6:	d111      	bne.n	8016bec <sqrtf+0x8c>
 8016bc8:	f000 fea2 	bl	8017910 <__errno>
 8016bcc:	2321      	movs	r3, #33	; 0x21
 8016bce:	6003      	str	r3, [r0, #0]
 8016bd0:	9b08      	ldr	r3, [sp, #32]
 8016bd2:	b98b      	cbnz	r3, 8016bf8 <sqrtf+0x98>
 8016bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016bd8:	f7f5 ff3a 	bl	800ca50 <__aeabi_d2f>
 8016bdc:	ee00 0a10 	vmov	s0, r0
 8016be0:	b00a      	add	sp, #40	; 0x28
 8016be2:	ecbd 8b02 	vpop	{d8}
 8016be6:	bd10      	pop	{r4, pc}
 8016be8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016bec:	4668      	mov	r0, sp
 8016bee:	f000 fdbf 	bl	8017770 <matherr>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d1ec      	bne.n	8016bd0 <sqrtf+0x70>
 8016bf6:	e7e7      	b.n	8016bc8 <sqrtf+0x68>
 8016bf8:	f000 fe8a 	bl	8017910 <__errno>
 8016bfc:	9b08      	ldr	r3, [sp, #32]
 8016bfe:	6003      	str	r3, [r0, #0]
 8016c00:	e7e8      	b.n	8016bd4 <sqrtf+0x74>
 8016c02:	bf00      	nop
 8016c04:	20000860 	.word	0x20000860
 8016c08:	08018760 	.word	0x08018760
 8016c0c:	00000000 	.word	0x00000000

08016c10 <__ieee754_rem_pio2f>:
 8016c10:	b570      	push	{r4, r5, r6, lr}
 8016c12:	ee10 3a10 	vmov	r3, s0
 8016c16:	4a96      	ldr	r2, [pc, #600]	; (8016e70 <__ieee754_rem_pio2f+0x260>)
 8016c18:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8016c1c:	4294      	cmp	r4, r2
 8016c1e:	b086      	sub	sp, #24
 8016c20:	4605      	mov	r5, r0
 8016c22:	dd69      	ble.n	8016cf8 <__ieee754_rem_pio2f+0xe8>
 8016c24:	4a93      	ldr	r2, [pc, #588]	; (8016e74 <__ieee754_rem_pio2f+0x264>)
 8016c26:	4294      	cmp	r4, r2
 8016c28:	ee10 6a10 	vmov	r6, s0
 8016c2c:	dc1a      	bgt.n	8016c64 <__ieee754_rem_pio2f+0x54>
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	f024 040f 	bic.w	r4, r4, #15
 8016c34:	eddf 7a90 	vldr	s15, [pc, #576]	; 8016e78 <__ieee754_rem_pio2f+0x268>
 8016c38:	4a90      	ldr	r2, [pc, #576]	; (8016e7c <__ieee754_rem_pio2f+0x26c>)
 8016c3a:	dd64      	ble.n	8016d06 <__ieee754_rem_pio2f+0xf6>
 8016c3c:	4294      	cmp	r4, r2
 8016c3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016c42:	f000 80cf 	beq.w	8016de4 <__ieee754_rem_pio2f+0x1d4>
 8016c46:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8016e80 <__ieee754_rem_pio2f+0x270>
 8016c4a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016c4e:	2001      	movs	r0, #1
 8016c50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016c54:	edc5 6a00 	vstr	s13, [r5]
 8016c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c5c:	edc5 7a01 	vstr	s15, [r5, #4]
 8016c60:	b006      	add	sp, #24
 8016c62:	bd70      	pop	{r4, r5, r6, pc}
 8016c64:	4a87      	ldr	r2, [pc, #540]	; (8016e84 <__ieee754_rem_pio2f+0x274>)
 8016c66:	4294      	cmp	r4, r2
 8016c68:	dd61      	ble.n	8016d2e <__ieee754_rem_pio2f+0x11e>
 8016c6a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016c6e:	f280 80b1 	bge.w	8016dd4 <__ieee754_rem_pio2f+0x1c4>
 8016c72:	15e2      	asrs	r2, r4, #23
 8016c74:	3a86      	subs	r2, #134	; 0x86
 8016c76:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8016c7a:	ee07 3a90 	vmov	s15, r3
 8016c7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016c82:	eddf 6a81 	vldr	s13, [pc, #516]	; 8016e88 <__ieee754_rem_pio2f+0x278>
 8016c86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c8e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016c92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016c96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016c9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ca2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016ca6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016caa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb2:	edcd 7a05 	vstr	s15, [sp, #20]
 8016cb6:	f040 80c7 	bne.w	8016e48 <__ieee754_rem_pio2f+0x238>
 8016cba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc2:	bf0c      	ite	eq
 8016cc4:	2301      	moveq	r3, #1
 8016cc6:	2302      	movne	r3, #2
 8016cc8:	4970      	ldr	r1, [pc, #448]	; (8016e8c <__ieee754_rem_pio2f+0x27c>)
 8016cca:	9101      	str	r1, [sp, #4]
 8016ccc:	2102      	movs	r1, #2
 8016cce:	9100      	str	r1, [sp, #0]
 8016cd0:	a803      	add	r0, sp, #12
 8016cd2:	4629      	mov	r1, r5
 8016cd4:	f000 f97c 	bl	8016fd0 <__kernel_rem_pio2f>
 8016cd8:	2e00      	cmp	r6, #0
 8016cda:	da12      	bge.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016cdc:	ed95 7a00 	vldr	s14, [r5]
 8016ce0:	edd5 7a01 	vldr	s15, [r5, #4]
 8016ce4:	eeb1 7a47 	vneg.f32	s14, s14
 8016ce8:	eef1 7a67 	vneg.f32	s15, s15
 8016cec:	4240      	negs	r0, r0
 8016cee:	ed85 7a00 	vstr	s14, [r5]
 8016cf2:	edc5 7a01 	vstr	s15, [r5, #4]
 8016cf6:	e004      	b.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	ed85 0a00 	vstr	s0, [r5]
 8016cfe:	6042      	str	r2, [r0, #4]
 8016d00:	2000      	movs	r0, #0
 8016d02:	b006      	add	sp, #24
 8016d04:	bd70      	pop	{r4, r5, r6, pc}
 8016d06:	4294      	cmp	r4, r2
 8016d08:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016d0c:	f000 8089 	beq.w	8016e22 <__ieee754_rem_pio2f+0x212>
 8016d10:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8016e80 <__ieee754_rem_pio2f+0x270>
 8016d14:	ee77 6a87 	vadd.f32	s13, s15, s14
 8016d18:	f04f 30ff 	mov.w	r0, #4294967295
 8016d1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016d20:	edc5 6a00 	vstr	s13, [r5]
 8016d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d28:	edc5 7a01 	vstr	s15, [r5, #4]
 8016d2c:	e7e9      	b.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016d2e:	f000 fd27 	bl	8017780 <fabsf>
 8016d32:	eddf 6a57 	vldr	s13, [pc, #348]	; 8016e90 <__ieee754_rem_pio2f+0x280>
 8016d36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8016e78 <__ieee754_rem_pio2f+0x268>
 8016d3a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8016e80 <__ieee754_rem_pio2f+0x270>
 8016d3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016d42:	eee0 7a26 	vfma.f32	s15, s0, s13
 8016d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d4a:	ee17 0a90 	vmov	r0, s15
 8016d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016d52:	281f      	cmp	r0, #31
 8016d54:	eeb1 6a66 	vneg.f32	s12, s13
 8016d58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016d5c:	ee66 7a87 	vmul.f32	s15, s13, s14
 8016d60:	dd52      	ble.n	8016e08 <__ieee754_rem_pio2f+0x1f8>
 8016d62:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016d66:	ee17 3a10 	vmov	r3, s14
 8016d6a:	15e4      	asrs	r4, r4, #23
 8016d6c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8016d70:	1ae3      	subs	r3, r4, r3
 8016d72:	2b08      	cmp	r3, #8
 8016d74:	dd52      	ble.n	8016e1c <__ieee754_rem_pio2f+0x20c>
 8016d76:	eddf 7a47 	vldr	s15, [pc, #284]	; 8016e94 <__ieee754_rem_pio2f+0x284>
 8016d7a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8016e98 <__ieee754_rem_pio2f+0x288>
 8016d7e:	eef0 5a40 	vmov.f32	s11, s0
 8016d82:	eee6 5a27 	vfma.f32	s11, s12, s15
 8016d86:	ee30 0a65 	vsub.f32	s0, s0, s11
 8016d8a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8016d8e:	eef0 7a40 	vmov.f32	s15, s0
 8016d92:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8016d96:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8016d9a:	ee17 3a10 	vmov	r3, s14
 8016d9e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8016da2:	1ae4      	subs	r4, r4, r3
 8016da4:	2c19      	cmp	r4, #25
 8016da6:	dc51      	bgt.n	8016e4c <__ieee754_rem_pio2f+0x23c>
 8016da8:	ed85 7a00 	vstr	s14, [r5]
 8016dac:	eeb0 0a65 	vmov.f32	s0, s11
 8016db0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016db4:	2e00      	cmp	r6, #0
 8016db6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016dba:	ed85 0a01 	vstr	s0, [r5, #4]
 8016dbe:	daa0      	bge.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016dc0:	eeb1 7a47 	vneg.f32	s14, s14
 8016dc4:	eeb1 0a40 	vneg.f32	s0, s0
 8016dc8:	ed85 7a00 	vstr	s14, [r5]
 8016dcc:	ed85 0a01 	vstr	s0, [r5, #4]
 8016dd0:	4240      	negs	r0, r0
 8016dd2:	e796      	b.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016dd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016dd8:	2000      	movs	r0, #0
 8016dda:	edc5 7a01 	vstr	s15, [r5, #4]
 8016dde:	edc5 7a00 	vstr	s15, [r5]
 8016de2:	e78e      	b.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016de4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8016e94 <__ieee754_rem_pio2f+0x284>
 8016de8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8016e98 <__ieee754_rem_pio2f+0x288>
 8016dec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016df0:	2001      	movs	r0, #1
 8016df2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016df6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016dfa:	edc5 6a00 	vstr	s13, [r5]
 8016dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e02:	edc5 7a01 	vstr	s15, [r5, #4]
 8016e06:	e77c      	b.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016e08:	1e42      	subs	r2, r0, #1
 8016e0a:	4b24      	ldr	r3, [pc, #144]	; (8016e9c <__ieee754_rem_pio2f+0x28c>)
 8016e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e10:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8016e14:	429a      	cmp	r2, r3
 8016e16:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016e1a:	d0a4      	beq.n	8016d66 <__ieee754_rem_pio2f+0x156>
 8016e1c:	ed85 7a00 	vstr	s14, [r5]
 8016e20:	e7c6      	b.n	8016db0 <__ieee754_rem_pio2f+0x1a0>
 8016e22:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8016e94 <__ieee754_rem_pio2f+0x284>
 8016e26:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8016e98 <__ieee754_rem_pio2f+0x288>
 8016e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8016e32:	ee77 6a87 	vadd.f32	s13, s15, s14
 8016e36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016e3a:	edc5 6a00 	vstr	s13, [r5]
 8016e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e42:	edc5 7a01 	vstr	s15, [r5, #4]
 8016e46:	e75c      	b.n	8016d02 <__ieee754_rem_pio2f+0xf2>
 8016e48:	2303      	movs	r3, #3
 8016e4a:	e73d      	b.n	8016cc8 <__ieee754_rem_pio2f+0xb8>
 8016e4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8016ea0 <__ieee754_rem_pio2f+0x290>
 8016e50:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8016ea4 <__ieee754_rem_pio2f+0x294>
 8016e54:	eeb0 0a65 	vmov.f32	s0, s11
 8016e58:	eea6 0a07 	vfma.f32	s0, s12, s14
 8016e5c:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8016e60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016e64:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8016e68:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016e6c:	e7d6      	b.n	8016e1c <__ieee754_rem_pio2f+0x20c>
 8016e6e:	bf00      	nop
 8016e70:	3f490fd8 	.word	0x3f490fd8
 8016e74:	4016cbe3 	.word	0x4016cbe3
 8016e78:	3fc90f80 	.word	0x3fc90f80
 8016e7c:	3fc90fd0 	.word	0x3fc90fd0
 8016e80:	37354443 	.word	0x37354443
 8016e84:	43490f80 	.word	0x43490f80
 8016e88:	43800000 	.word	0x43800000
 8016e8c:	080187f0 	.word	0x080187f0
 8016e90:	3f22f984 	.word	0x3f22f984
 8016e94:	37354400 	.word	0x37354400
 8016e98:	2e85a308 	.word	0x2e85a308
 8016e9c:	08018770 	.word	0x08018770
 8016ea0:	2e85a300 	.word	0x2e85a300
 8016ea4:	248d3132 	.word	0x248d3132
	...

08016eb0 <__ieee754_sqrtf>:
 8016eb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016eb4:	4770      	bx	lr
 8016eb6:	bf00      	nop
	...

08016ec0 <__kernel_cosf>:
 8016ec0:	ee10 3a10 	vmov	r3, s0
 8016ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016ec8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016ecc:	da2c      	bge.n	8016f28 <__kernel_cosf+0x68>
 8016ece:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016ed2:	ee17 3a90 	vmov	r3, s15
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d05b      	beq.n	8016f92 <__kernel_cosf+0xd2>
 8016eda:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016ede:	eddf 4a31 	vldr	s9, [pc, #196]	; 8016fa4 <__kernel_cosf+0xe4>
 8016ee2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8016fa8 <__kernel_cosf+0xe8>
 8016ee6:	eddf 5a31 	vldr	s11, [pc, #196]	; 8016fac <__kernel_cosf+0xec>
 8016eea:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8016fb0 <__kernel_cosf+0xf0>
 8016eee:	eddf 7a31 	vldr	s15, [pc, #196]	; 8016fb4 <__kernel_cosf+0xf4>
 8016ef2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8016fb8 <__kernel_cosf+0xf8>
 8016ef6:	eea7 5a24 	vfma.f32	s10, s14, s9
 8016efa:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016efe:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016f02:	eee7 7a06 	vfma.f32	s15, s14, s12
 8016f06:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016f0a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016f0e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8016f12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016f16:	eee7 0a26 	vfma.f32	s1, s14, s13
 8016f1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016f1e:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8016f22:	ee37 0ae0 	vsub.f32	s0, s15, s1
 8016f26:	4770      	bx	lr
 8016f28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016f2c:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8016fa4 <__kernel_cosf+0xe4>
 8016f30:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8016fa8 <__kernel_cosf+0xe8>
 8016f34:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8016fac <__kernel_cosf+0xec>
 8016f38:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8016fb0 <__kernel_cosf+0xf0>
 8016f3c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8016fb4 <__kernel_cosf+0xf4>
 8016f40:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8016fb8 <__kernel_cosf+0xf8>
 8016f44:	4a1d      	ldr	r2, [pc, #116]	; (8016fbc <__kernel_cosf+0xfc>)
 8016f46:	eea7 5a24 	vfma.f32	s10, s14, s9
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016f50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016f54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f58:	eee7 6a87 	vfma.f32	s13, s15, s14
 8016f5c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016f60:	ddd5      	ble.n	8016f0e <__kernel_cosf+0x4e>
 8016f62:	4a17      	ldr	r2, [pc, #92]	; (8016fc0 <__kernel_cosf+0x100>)
 8016f64:	4293      	cmp	r3, r2
 8016f66:	dc17      	bgt.n	8016f98 <__kernel_cosf+0xd8>
 8016f68:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8016f6c:	ee07 3a90 	vmov	s15, r3
 8016f70:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016f74:	ee36 6a67 	vsub.f32	s12, s12, s15
 8016f78:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8016f7c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016f80:	eee7 0a26 	vfma.f32	s1, s14, s13
 8016f84:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8016f88:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016f8c:	ee36 0a67 	vsub.f32	s0, s12, s15
 8016f90:	4770      	bx	lr
 8016f92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016f96:	4770      	bx	lr
 8016f98:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8016f9c:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 8016fa0:	e7ea      	b.n	8016f78 <__kernel_cosf+0xb8>
 8016fa2:	bf00      	nop
 8016fa4:	ad47d74e 	.word	0xad47d74e
 8016fa8:	310f74f6 	.word	0x310f74f6
 8016fac:	b493f27c 	.word	0xb493f27c
 8016fb0:	37d00d01 	.word	0x37d00d01
 8016fb4:	bab60b61 	.word	0xbab60b61
 8016fb8:	3d2aaaab 	.word	0x3d2aaaab
 8016fbc:	3e999999 	.word	0x3e999999
 8016fc0:	3f480000 	.word	0x3f480000
	...

08016fd0 <__kernel_rem_pio2f>:
 8016fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd4:	ed2d 8b04 	vpush	{d8-d9}
 8016fd8:	b0d7      	sub	sp, #348	; 0x15c
 8016fda:	f103 39ff 	add.w	r9, r3, #4294967295
 8016fde:	9302      	str	r3, [sp, #8]
 8016fe0:	1ed3      	subs	r3, r2, #3
 8016fe2:	bf48      	it	mi
 8016fe4:	1d13      	addmi	r3, r2, #4
 8016fe6:	4cb2      	ldr	r4, [pc, #712]	; (80172b0 <__kernel_rem_pio2f+0x2e0>)
 8016fe8:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8016fea:	9105      	str	r1, [sp, #20]
 8016fec:	10db      	asrs	r3, r3, #3
 8016fee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ff2:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8016ff6:	9303      	str	r3, [sp, #12]
 8016ff8:	f103 0801 	add.w	r8, r3, #1
 8016ffc:	eba2 08c8 	sub.w	r8, r2, r8, lsl #3
 8017000:	eb16 0209 	adds.w	r2, r6, r9
 8017004:	4686      	mov	lr, r0
 8017006:	eba3 0309 	sub.w	r3, r3, r9
 801700a:	d416      	bmi.n	801703a <__kernel_rem_pio2f+0x6a>
 801700c:	441a      	add	r2, r3
 801700e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80172b4 <__kernel_rem_pio2f+0x2e4>
 8017012:	9865      	ldr	r0, [sp, #404]	; 0x194
 8017014:	1c51      	adds	r1, r2, #1
 8017016:	aa1a      	add	r2, sp, #104	; 0x68
 8017018:	2b00      	cmp	r3, #0
 801701a:	bfa4      	itt	ge
 801701c:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8017020:	ee07 4a90 	vmovge	s15, r4
 8017024:	f103 0301 	add.w	r3, r3, #1
 8017028:	bfac      	ite	ge
 801702a:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 801702e:	eef0 7a47 	vmovlt.f32	s15, s14
 8017032:	428b      	cmp	r3, r1
 8017034:	ece2 7a01 	vstmia	r2!, {s15}
 8017038:	d1ee      	bne.n	8017018 <__kernel_rem_pio2f+0x48>
 801703a:	9b02      	ldr	r3, [sp, #8]
 801703c:	2e00      	cmp	r6, #0
 801703e:	ea4f 0483 	mov.w	r4, r3, lsl #2
 8017042:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8017046:	db1d      	blt.n	8017084 <__kernel_rem_pio2f+0xb4>
 8017048:	ab1a      	add	r3, sp, #104	; 0x68
 801704a:	1918      	adds	r0, r3, r4
 801704c:	aa43      	add	r2, sp, #268	; 0x10c
 801704e:	4673      	mov	r3, lr
 8017050:	1919      	adds	r1, r3, r4
 8017052:	eb02 070a 	add.w	r7, r2, sl
 8017056:	ad42      	add	r5, sp, #264	; 0x108
 8017058:	46f4      	mov	ip, lr
 801705a:	f1b9 0f00 	cmp.w	r9, #0
 801705e:	eddf 7a95 	vldr	s15, [pc, #596]	; 80172b4 <__kernel_rem_pio2f+0x2e4>
 8017062:	db09      	blt.n	8017078 <__kernel_rem_pio2f+0xa8>
 8017064:	4602      	mov	r2, r0
 8017066:	4663      	mov	r3, ip
 8017068:	ecf3 6a01 	vldmia	r3!, {s13}
 801706c:	ed32 7a01 	vldmdb	r2!, {s14}
 8017070:	428b      	cmp	r3, r1
 8017072:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017076:	d1f7      	bne.n	8017068 <__kernel_rem_pio2f+0x98>
 8017078:	ece5 7a01 	vstmia	r5!, {s15}
 801707c:	42bd      	cmp	r5, r7
 801707e:	f100 0004 	add.w	r0, r0, #4
 8017082:	d1ea      	bne.n	801705a <__kernel_rem_pio2f+0x8a>
 8017084:	f1aa 0308 	sub.w	r3, sl, #8
 8017088:	ad06      	add	r5, sp, #24
 801708a:	18eb      	adds	r3, r5, r3
 801708c:	9304      	str	r3, [sp, #16]
 801708e:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 80172bc <__kernel_rem_pio2f+0x2ec>
 8017092:	eddf 8a89 	vldr	s17, [pc, #548]	; 80172b8 <__kernel_rem_pio2f+0x2e8>
 8017096:	9600      	str	r6, [sp, #0]
 8017098:	ab05      	add	r3, sp, #20
 801709a:	46b3      	mov	fp, r6
 801709c:	4474      	add	r4, lr
 801709e:	449a      	add	sl, r3
 80170a0:	af42      	add	r7, sp, #264	; 0x108
 80170a2:	4676      	mov	r6, lr
 80170a4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80170a8:	ab56      	add	r3, sp, #344	; 0x158
 80170aa:	440b      	add	r3, r1
 80170ac:	f1bb 0f00 	cmp.w	fp, #0
 80170b0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80170b4:	dd16      	ble.n	80170e4 <__kernel_rem_pio2f+0x114>
 80170b6:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80170ba:	462a      	mov	r2, r5
 80170bc:	ee60 7a09 	vmul.f32	s15, s0, s18
 80170c0:	eeb0 7a40 	vmov.f32	s14, s0
 80170c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80170c8:	ed73 6a01 	vldmdb	r3!, {s13}
 80170cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170d0:	42bb      	cmp	r3, r7
 80170d2:	eea7 7ae8 	vfms.f32	s14, s15, s17
 80170d6:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80170da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80170de:	eca2 7a01 	vstmia	r2!, {s14}
 80170e2:	d1eb      	bne.n	80170bc <__kernel_rem_pio2f+0xec>
 80170e4:	4640      	mov	r0, r8
 80170e6:	9101      	str	r1, [sp, #4]
 80170e8:	f000 fb9a 	bl	8017820 <scalbnf>
 80170ec:	eeb0 8a40 	vmov.f32	s16, s0
 80170f0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80170f4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80170f8:	f000 fb4a 	bl	8017790 <floorf>
 80170fc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8017100:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017104:	f1b8 0f00 	cmp.w	r8, #0
 8017108:	9901      	ldr	r1, [sp, #4]
 801710a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 801710e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8017112:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017116:	f340 80c4 	ble.w	80172a2 <__kernel_rem_pio2f+0x2d2>
 801711a:	f10b 3cff 	add.w	ip, fp, #4294967295
 801711e:	f1c8 0308 	rsb	r3, r8, #8
 8017122:	f855 202c 	ldr.w	r2, [r5, ip, lsl #2]
 8017126:	fa42 f003 	asr.w	r0, r2, r3
 801712a:	fa00 f303 	lsl.w	r3, r0, r3
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
 8017134:	ee19 ca90 	vmov	ip, s19
 8017138:	4484      	add	ip, r0
 801713a:	f1c8 0207 	rsb	r2, r8, #7
 801713e:	ee09 ca90 	vmov	s19, ip
 8017142:	fa43 f202 	asr.w	r2, r3, r2
 8017146:	2a00      	cmp	r2, #0
 8017148:	dd31      	ble.n	80171ae <__kernel_rem_pio2f+0x1de>
 801714a:	ee19 3a90 	vmov	r3, s19
 801714e:	f1bb 0f00 	cmp.w	fp, #0
 8017152:	f103 0301 	add.w	r3, r3, #1
 8017156:	ee09 3a90 	vmov	s19, r3
 801715a:	f340 8229 	ble.w	80175b0 <__kernel_rem_pio2f+0x5e0>
 801715e:	6828      	ldr	r0, [r5, #0]
 8017160:	2800      	cmp	r0, #0
 8017162:	f040 8086 	bne.w	8017272 <__kernel_rem_pio2f+0x2a2>
 8017166:	f1bb 0f01 	cmp.w	fp, #1
 801716a:	d00b      	beq.n	8017184 <__kernel_rem_pio2f+0x1b4>
 801716c:	46ae      	mov	lr, r5
 801716e:	f04f 0c01 	mov.w	ip, #1
 8017172:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8017176:	f10c 0301 	add.w	r3, ip, #1
 801717a:	2800      	cmp	r0, #0
 801717c:	d17c      	bne.n	8017278 <__kernel_rem_pio2f+0x2a8>
 801717e:	459b      	cmp	fp, r3
 8017180:	469c      	mov	ip, r3
 8017182:	d1f6      	bne.n	8017172 <__kernel_rem_pio2f+0x1a2>
 8017184:	f1b8 0f00 	cmp.w	r8, #0
 8017188:	dd0e      	ble.n	80171a8 <__kernel_rem_pio2f+0x1d8>
 801718a:	f1b8 0f01 	cmp.w	r8, #1
 801718e:	f000 8132 	beq.w	80173f6 <__kernel_rem_pio2f+0x426>
 8017192:	f1b8 0f02 	cmp.w	r8, #2
 8017196:	d107      	bne.n	80171a8 <__kernel_rem_pio2f+0x1d8>
 8017198:	f10b 31ff 	add.w	r1, fp, #4294967295
 801719c:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 80171a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171a4:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 80171a8:	2a02      	cmp	r2, #2
 80171aa:	f000 8112 	beq.w	80173d2 <__kernel_rem_pio2f+0x402>
 80171ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80171b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171b6:	f040 8095 	bne.w	80172e4 <__kernel_rem_pio2f+0x314>
 80171ba:	9b00      	ldr	r3, [sp, #0]
 80171bc:	f10b 3cff 	add.w	ip, fp, #4294967295
 80171c0:	4563      	cmp	r3, ip
 80171c2:	dc0e      	bgt.n	80171e2 <__kernel_rem_pio2f+0x212>
 80171c4:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 80171c8:	3901      	subs	r1, #1
 80171ca:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80171ce:	2000      	movs	r0, #0
 80171d0:	f851 3904 	ldr.w	r3, [r1], #-4
 80171d4:	4551      	cmp	r1, sl
 80171d6:	ea40 0003 	orr.w	r0, r0, r3
 80171da:	d1f9      	bne.n	80171d0 <__kernel_rem_pio2f+0x200>
 80171dc:	2800      	cmp	r0, #0
 80171de:	f040 8113 	bne.w	8017408 <__kernel_rem_pio2f+0x438>
 80171e2:	9b00      	ldr	r3, [sp, #0]
 80171e4:	3b01      	subs	r3, #1
 80171e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	f040 8100 	bne.w	80173f0 <__kernel_rem_pio2f+0x420>
 80171f0:	9b04      	ldr	r3, [sp, #16]
 80171f2:	f04f 0c01 	mov.w	ip, #1
 80171f6:	f853 2904 	ldr.w	r2, [r3], #-4
 80171fa:	f10c 0c01 	add.w	ip, ip, #1
 80171fe:	2a00      	cmp	r2, #0
 8017200:	d0f9      	beq.n	80171f6 <__kernel_rem_pio2f+0x226>
 8017202:	44dc      	add	ip, fp
 8017204:	f10b 0e01 	add.w	lr, fp, #1
 8017208:	45e6      	cmp	lr, ip
 801720a:	dc30      	bgt.n	801726e <__kernel_rem_pio2f+0x29e>
 801720c:	9b03      	ldr	r3, [sp, #12]
 801720e:	9a02      	ldr	r2, [sp, #8]
 8017210:	eb0e 0103 	add.w	r1, lr, r3
 8017214:	445a      	add	r2, fp
 8017216:	eb03 0b0c 	add.w	fp, r3, ip
 801721a:	ab1a      	add	r3, sp, #104	; 0x68
 801721c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8017220:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8017224:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8017226:	3901      	subs	r1, #1
 8017228:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801722c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
 8017230:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8017234:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8017238:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80172b4 <__kernel_rem_pio2f+0x2e4>
 801723c:	ee07 3a90 	vmov	s15, r3
 8017240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017244:	4610      	mov	r0, r2
 8017246:	f1b9 0f00 	cmp.w	r9, #0
 801724a:	ece0 7a01 	vstmia	r0!, {s15}
 801724e:	db09      	blt.n	8017264 <__kernel_rem_pio2f+0x294>
 8017250:	4633      	mov	r3, r6
 8017252:	e001      	b.n	8017258 <__kernel_rem_pio2f+0x288>
 8017254:	ed72 7a01 	vldmdb	r2!, {s15}
 8017258:	ecf3 6a01 	vldmia	r3!, {s13}
 801725c:	42a3      	cmp	r3, r4
 801725e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017262:	d1f7      	bne.n	8017254 <__kernel_rem_pio2f+0x284>
 8017264:	4559      	cmp	r1, fp
 8017266:	ecae 7a01 	vstmia	lr!, {s14}
 801726a:	4602      	mov	r2, r0
 801726c:	d1e2      	bne.n	8017234 <__kernel_rem_pio2f+0x264>
 801726e:	46e3      	mov	fp, ip
 8017270:	e718      	b.n	80170a4 <__kernel_rem_pio2f+0xd4>
 8017272:	2301      	movs	r3, #1
 8017274:	f04f 0c00 	mov.w	ip, #0
 8017278:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801727c:	459b      	cmp	fp, r3
 801727e:	f845 002c 	str.w	r0, [r5, ip, lsl #2]
 8017282:	dd0c      	ble.n	801729e <__kernel_rem_pio2f+0x2ce>
 8017284:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8017288:	4429      	add	r1, r5
 801728a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801728e:	e000      	b.n	8017292 <__kernel_rem_pio2f+0x2c2>
 8017290:	6818      	ldr	r0, [r3, #0]
 8017292:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017296:	f843 0b04 	str.w	r0, [r3], #4
 801729a:	428b      	cmp	r3, r1
 801729c:	d1f8      	bne.n	8017290 <__kernel_rem_pio2f+0x2c0>
 801729e:	2001      	movs	r0, #1
 80172a0:	e770      	b.n	8017184 <__kernel_rem_pio2f+0x1b4>
 80172a2:	d10f      	bne.n	80172c4 <__kernel_rem_pio2f+0x2f4>
 80172a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80172a8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80172ac:	1212      	asrs	r2, r2, #8
 80172ae:	e74a      	b.n	8017146 <__kernel_rem_pio2f+0x176>
 80172b0:	08018b40 	.word	0x08018b40
 80172b4:	00000000 	.word	0x00000000
 80172b8:	43800000 	.word	0x43800000
 80172bc:	3b800000 	.word	0x3b800000
 80172c0:	3fc90000 	.word	0x3fc90000
 80172c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80172c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80172cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d0:	f280 8158 	bge.w	8017584 <__kernel_rem_pio2f+0x5b4>
 80172d4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80172d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172dc:	f04f 0200 	mov.w	r2, #0
 80172e0:	f43f af6b 	beq.w	80171ba <__kernel_rem_pio2f+0x1ea>
 80172e4:	eeb0 0a48 	vmov.f32	s0, s16
 80172e8:	f1c8 0000 	rsb	r0, r8, #0
 80172ec:	4691      	mov	r9, r2
 80172ee:	9e00      	ldr	r6, [sp, #0]
 80172f0:	f000 fa96 	bl	8017820 <scalbnf>
 80172f4:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80172b8 <__kernel_rem_pio2f+0x2e8>
 80172f8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80172fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017300:	f2c0 8158 	blt.w	80175b4 <__kernel_rem_pio2f+0x5e4>
 8017304:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80172bc <__kernel_rem_pio2f+0x2ec>
 8017308:	ee60 7a27 	vmul.f32	s15, s0, s15
 801730c:	f10b 0301 	add.w	r3, fp, #1
 8017310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017314:	f108 0808 	add.w	r8, r8, #8
 8017318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801731c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017324:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017328:	ee10 2a10 	vmov	r2, s0
 801732c:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 8017330:	ee17 2a90 	vmov	r2, s15
 8017334:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8017338:	4640      	mov	r0, r8
 801733a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801733e:	9300      	str	r3, [sp, #0]
 8017340:	f000 fa6e 	bl	8017820 <scalbnf>
 8017344:	9b00      	ldr	r3, [sp, #0]
 8017346:	2b00      	cmp	r3, #0
 8017348:	f2c0 814b 	blt.w	80175e2 <__kernel_rem_pio2f+0x612>
 801734c:	0098      	lsls	r0, r3, #2
 801734e:	aa42      	add	r2, sp, #264	; 0x108
 8017350:	f100 0c04 	add.w	ip, r0, #4
 8017354:	ed1f 7a27 	vldr	s14, [pc, #-156]	; 80172bc <__kernel_rem_pio2f+0x2ec>
 8017358:	4410      	add	r0, r2
 801735a:	1d01      	adds	r1, r0, #4
 801735c:	eb05 020c 	add.w	r2, r5, ip
 8017360:	ed72 7a01 	vldmdb	r2!, {s15}
 8017364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017368:	42aa      	cmp	r2, r5
 801736a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801736e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017372:	ed61 7a01 	vstmdb	r1!, {s15}
 8017376:	d1f3      	bne.n	8017360 <__kernel_rem_pio2f+0x390>
 8017378:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 801737c:	ed1f 6a30 	vldr	s12, [pc, #-192]	; 80172c0 <__kernel_rem_pio2f+0x2f0>
 8017380:	4605      	mov	r5, r0
 8017382:	4677      	mov	r7, lr
 8017384:	f103 0801 	add.w	r8, r3, #1
 8017388:	2400      	movs	r4, #0
 801738a:	2e00      	cmp	r6, #0
 801738c:	f2c0 8105 	blt.w	801759a <__kernel_rem_pio2f+0x5ca>
 8017390:	48a1      	ldr	r0, [pc, #644]	; (8017618 <__kernel_rem_pio2f+0x648>)
 8017392:	eddf 7aa2 	vldr	s15, [pc, #648]	; 801761c <__kernel_rem_pio2f+0x64c>
 8017396:	4629      	mov	r1, r5
 8017398:	eeb0 7a46 	vmov.f32	s14, s12
 801739c:	2200      	movs	r2, #0
 801739e:	e003      	b.n	80173a8 <__kernel_rem_pio2f+0x3d8>
 80173a0:	42a2      	cmp	r2, r4
 80173a2:	dc08      	bgt.n	80173b6 <__kernel_rem_pio2f+0x3e6>
 80173a4:	ecb0 7a01 	vldmia	r0!, {s14}
 80173a8:	ecf1 6a01 	vldmia	r1!, {s13}
 80173ac:	3201      	adds	r2, #1
 80173ae:	4296      	cmp	r6, r2
 80173b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80173b4:	daf4      	bge.n	80173a0 <__kernel_rem_pio2f+0x3d0>
 80173b6:	3401      	adds	r4, #1
 80173b8:	4544      	cmp	r4, r8
 80173ba:	ece7 7a01 	vstmia	r7!, {s15}
 80173be:	f1a5 0504 	sub.w	r5, r5, #4
 80173c2:	d1e2      	bne.n	801738a <__kernel_rem_pio2f+0x3ba>
 80173c4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80173c6:	2a03      	cmp	r2, #3
 80173c8:	d853      	bhi.n	8017472 <__kernel_rem_pio2f+0x4a2>
 80173ca:	e8df f002 	tbb	[pc, r2]
 80173ce:	b6ca      	.short	0xb6ca
 80173d0:	5bb6      	.short	0x5bb6
 80173d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80173d6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80173da:	2800      	cmp	r0, #0
 80173dc:	f43f aee7 	beq.w	80171ae <__kernel_rem_pio2f+0x1de>
 80173e0:	4640      	mov	r0, r8
 80173e2:	9201      	str	r2, [sp, #4]
 80173e4:	f000 fa1c 	bl	8017820 <scalbnf>
 80173e8:	9a01      	ldr	r2, [sp, #4]
 80173ea:	ee38 8a40 	vsub.f32	s16, s16, s0
 80173ee:	e6de      	b.n	80171ae <__kernel_rem_pio2f+0x1de>
 80173f0:	f04f 0c01 	mov.w	ip, #1
 80173f4:	e705      	b.n	8017202 <__kernel_rem_pio2f+0x232>
 80173f6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80173fa:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 80173fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017402:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 8017406:	e6cf      	b.n	80171a8 <__kernel_rem_pio2f+0x1d8>
 8017408:	4691      	mov	r9, r2
 801740a:	f855 202c 	ldr.w	r2, [r5, ip, lsl #2]
 801740e:	9e00      	ldr	r6, [sp, #0]
 8017410:	4663      	mov	r3, ip
 8017412:	f1a8 0808 	sub.w	r8, r8, #8
 8017416:	2a00      	cmp	r2, #0
 8017418:	d18e      	bne.n	8017338 <__kernel_rem_pio2f+0x368>
 801741a:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
 801741e:	3a01      	subs	r2, #1
 8017420:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8017424:	f852 1904 	ldr.w	r1, [r2], #-4
 8017428:	3b01      	subs	r3, #1
 801742a:	f1a8 0808 	sub.w	r8, r8, #8
 801742e:	2900      	cmp	r1, #0
 8017430:	d0f8      	beq.n	8017424 <__kernel_rem_pio2f+0x454>
 8017432:	e781      	b.n	8017338 <__kernel_rem_pio2f+0x368>
 8017434:	464a      	mov	r2, r9
 8017436:	eddf 7a79 	vldr	s15, [pc, #484]	; 801761c <__kernel_rem_pio2f+0x64c>
 801743a:	2a00      	cmp	r2, #0
 801743c:	f040 80c2 	bne.w	80175c4 <__kernel_rem_pio2f+0x5f4>
 8017440:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8017444:	9a05      	ldr	r2, [sp, #20]
 8017446:	2b00      	cmp	r3, #0
 8017448:	edc2 7a00 	vstr	s15, [r2]
 801744c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017450:	dd0c      	ble.n	801746c <__kernel_rem_pio2f+0x49c>
 8017452:	a92f      	add	r1, sp, #188	; 0xbc
 8017454:	2201      	movs	r2, #1
 8017456:	ecb1 7a01 	vldmia	r1!, {s14}
 801745a:	3201      	adds	r2, #1
 801745c:	4293      	cmp	r3, r2
 801745e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017462:	daf8      	bge.n	8017456 <__kernel_rem_pio2f+0x486>
 8017464:	464b      	mov	r3, r9
 8017466:	2b00      	cmp	r3, #0
 8017468:	f040 80b8 	bne.w	80175dc <__kernel_rem_pio2f+0x60c>
 801746c:	9b05      	ldr	r3, [sp, #20]
 801746e:	edc3 7a01 	vstr	s15, [r3, #4]
 8017472:	ee19 3a90 	vmov	r3, s19
 8017476:	f003 0007 	and.w	r0, r3, #7
 801747a:	b057      	add	sp, #348	; 0x15c
 801747c:	ecbd 8b04 	vpop	{d8-d9}
 8017480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017484:	2b00      	cmp	r3, #0
 8017486:	f340 80c4 	ble.w	8017612 <__kernel_rem_pio2f+0x642>
 801748a:	0098      	lsls	r0, r3, #2
 801748c:	aa56      	add	r2, sp, #344	; 0x158
 801748e:	4402      	add	r2, r0
 8017490:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8017494:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8017498:	ed52 6a28 	vldr	s13, [r2, #-160]	; 0xffffff60
 801749c:	3901      	subs	r1, #1
 801749e:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 80174a2:	ed72 7a01 	vldmdb	r2!, {s15}
 80174a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80174aa:	4596      	cmp	lr, r2
 80174ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174b0:	ed82 7a00 	vstr	s14, [r2]
 80174b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80174b8:	eef0 6a47 	vmov.f32	s13, s14
 80174bc:	edc2 7a01 	vstr	s15, [r2, #4]
 80174c0:	d1ef      	bne.n	80174a2 <__kernel_rem_pio2f+0x4d2>
 80174c2:	2b01      	cmp	r3, #1
 80174c4:	f340 80a5 	ble.w	8017612 <__kernel_rem_pio2f+0x642>
 80174c8:	ab56      	add	r3, sp, #344	; 0x158
 80174ca:	4418      	add	r0, r3
 80174cc:	0089      	lsls	r1, r1, #2
 80174ce:	1d0b      	adds	r3, r1, #4
 80174d0:	ed50 6a28 	vldr	s13, [r0, #-160]	; 0xffffff60
 80174d4:	4473      	add	r3, lr
 80174d6:	aa2f      	add	r2, sp, #188	; 0xbc
 80174d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80174dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80174e0:	429a      	cmp	r2, r3
 80174e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174e6:	ed83 7a00 	vstr	s14, [r3]
 80174ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80174ee:	eef0 6a47 	vmov.f32	s13, s14
 80174f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80174f6:	d1ef      	bne.n	80174d8 <__kernel_rem_pio2f+0x508>
 80174f8:	3108      	adds	r1, #8
 80174fa:	eddf 7a48 	vldr	s15, [pc, #288]	; 801761c <__kernel_rem_pio2f+0x64c>
 80174fe:	eb0e 0301 	add.w	r3, lr, r1
 8017502:	f10e 0e08 	add.w	lr, lr, #8
 8017506:	ed33 7a01 	vldmdb	r3!, {s14}
 801750a:	459e      	cmp	lr, r3
 801750c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017510:	d1f9      	bne.n	8017506 <__kernel_rem_pio2f+0x536>
 8017512:	464b      	mov	r3, r9
 8017514:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8017518:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801751c:	b12b      	cbz	r3, 801752a <__kernel_rem_pio2f+0x55a>
 801751e:	eef1 6a66 	vneg.f32	s13, s13
 8017522:	eeb1 7a47 	vneg.f32	s14, s14
 8017526:	eef1 7a67 	vneg.f32	s15, s15
 801752a:	9b05      	ldr	r3, [sp, #20]
 801752c:	edc3 6a00 	vstr	s13, [r3]
 8017530:	ed83 7a01 	vstr	s14, [r3, #4]
 8017534:	edc3 7a02 	vstr	s15, [r3, #8]
 8017538:	e79b      	b.n	8017472 <__kernel_rem_pio2f+0x4a2>
 801753a:	2b00      	cmp	r3, #0
 801753c:	f6ff af7a 	blt.w	8017434 <__kernel_rem_pio2f+0x464>
 8017540:	a92e      	add	r1, sp, #184	; 0xb8
 8017542:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8017546:	eddf 7a35 	vldr	s15, [pc, #212]	; 801761c <__kernel_rem_pio2f+0x64c>
 801754a:	3204      	adds	r2, #4
 801754c:	ed32 7a01 	vldmdb	r2!, {s14}
 8017550:	4291      	cmp	r1, r2
 8017552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017556:	d1f9      	bne.n	801754c <__kernel_rem_pio2f+0x57c>
 8017558:	464a      	mov	r2, r9
 801755a:	2a00      	cmp	r2, #0
 801755c:	f43f af70 	beq.w	8017440 <__kernel_rem_pio2f+0x470>
 8017560:	e030      	b.n	80175c4 <__kernel_rem_pio2f+0x5f4>
 8017562:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801761c <__kernel_rem_pio2f+0x64c>
 8017566:	44f4      	add	ip, lr
 8017568:	ed3c 7a01 	vldmdb	ip!, {s14}
 801756c:	45e6      	cmp	lr, ip
 801756e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017572:	d1f9      	bne.n	8017568 <__kernel_rem_pio2f+0x598>
 8017574:	464b      	mov	r3, r9
 8017576:	b10b      	cbz	r3, 801757c <__kernel_rem_pio2f+0x5ac>
 8017578:	eef1 7a67 	vneg.f32	s15, s15
 801757c:	9b05      	ldr	r3, [sp, #20]
 801757e:	edc3 7a00 	vstr	s15, [r3]
 8017582:	e776      	b.n	8017472 <__kernel_rem_pio2f+0x4a2>
 8017584:	ee19 3a90 	vmov	r3, s19
 8017588:	f1bb 0f00 	cmp.w	fp, #0
 801758c:	f103 0301 	add.w	r3, r3, #1
 8017590:	ee09 3a90 	vmov	s19, r3
 8017594:	dd37      	ble.n	8017606 <__kernel_rem_pio2f+0x636>
 8017596:	2202      	movs	r2, #2
 8017598:	e5e1      	b.n	801715e <__kernel_rem_pio2f+0x18e>
 801759a:	eddf 7a20 	vldr	s15, [pc, #128]	; 801761c <__kernel_rem_pio2f+0x64c>
 801759e:	3401      	adds	r4, #1
 80175a0:	4544      	cmp	r4, r8
 80175a2:	ece7 7a01 	vstmia	r7!, {s15}
 80175a6:	f1a5 0504 	sub.w	r5, r5, #4
 80175aa:	f47f aeee 	bne.w	801738a <__kernel_rem_pio2f+0x3ba>
 80175ae:	e709      	b.n	80173c4 <__kernel_rem_pio2f+0x3f4>
 80175b0:	2000      	movs	r0, #0
 80175b2:	e5e7      	b.n	8017184 <__kernel_rem_pio2f+0x1b4>
 80175b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80175b8:	465b      	mov	r3, fp
 80175ba:	ee10 2a10 	vmov	r2, s0
 80175be:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 80175c2:	e6b9      	b.n	8017338 <__kernel_rem_pio2f+0x368>
 80175c4:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80175c8:	9a05      	ldr	r2, [sp, #20]
 80175ca:	eeb1 7a67 	vneg.f32	s14, s15
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80175d4:	ed82 7a00 	vstr	s14, [r2]
 80175d8:	f73f af3b 	bgt.w	8017452 <__kernel_rem_pio2f+0x482>
 80175dc:	eef1 7a67 	vneg.f32	s15, s15
 80175e0:	e744      	b.n	801746c <__kernel_rem_pio2f+0x49c>
 80175e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80175e4:	2a03      	cmp	r2, #3
 80175e6:	f63f af44 	bhi.w	8017472 <__kernel_rem_pio2f+0x4a2>
 80175ea:	a101      	add	r1, pc, #4	; (adr r1, 80175f0 <__kernel_rem_pio2f+0x620>)
 80175ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80175f0:	08017601 	.word	0x08017601
 80175f4:	0801753b 	.word	0x0801753b
 80175f8:	0801753b 	.word	0x0801753b
 80175fc:	08017485 	.word	0x08017485
 8017600:	eddf 7a06 	vldr	s15, [pc, #24]	; 801761c <__kernel_rem_pio2f+0x64c>
 8017604:	e7b6      	b.n	8017574 <__kernel_rem_pio2f+0x5a4>
 8017606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801760a:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801760e:	2202      	movs	r2, #2
 8017610:	e5cd      	b.n	80171ae <__kernel_rem_pio2f+0x1de>
 8017612:	eddf 7a02 	vldr	s15, [pc, #8]	; 801761c <__kernel_rem_pio2f+0x64c>
 8017616:	e77c      	b.n	8017512 <__kernel_rem_pio2f+0x542>
 8017618:	08018b14 	.word	0x08018b14
 801761c:	00000000 	.word	0x00000000

08017620 <__kernel_sinf>:
 8017620:	ee10 3a10 	vmov	r3, s0
 8017624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017628:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801762c:	da04      	bge.n	8017638 <__kernel_sinf+0x18>
 801762e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017632:	ee17 3a90 	vmov	r3, s15
 8017636:	b323      	cbz	r3, 8017682 <__kernel_sinf+0x62>
 8017638:	ee60 7a00 	vmul.f32	s15, s0, s0
 801763c:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8017694 <__kernel_sinf+0x74>
 8017640:	eddf 5a15 	vldr	s11, [pc, #84]	; 8017698 <__kernel_sinf+0x78>
 8017644:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801769c <__kernel_sinf+0x7c>
 8017648:	eddf 6a15 	vldr	s13, [pc, #84]	; 80176a0 <__kernel_sinf+0x80>
 801764c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80176a4 <__kernel_sinf+0x84>
 8017650:	eee7 5a85 	vfma.f32	s11, s15, s10
 8017654:	ee20 5a27 	vmul.f32	s10, s0, s15
 8017658:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801765c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017660:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017664:	b170      	cbz	r0, 8017684 <__kernel_sinf+0x64>
 8017666:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801766a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801766e:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8017672:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80176a8 <__kernel_sinf+0x88>
 8017676:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801767a:	eee5 0a26 	vfma.f32	s1, s10, s13
 801767e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017682:	4770      	bx	lr
 8017684:	eddf 6a09 	vldr	s13, [pc, #36]	; 80176ac <__kernel_sinf+0x8c>
 8017688:	eee7 6a87 	vfma.f32	s13, s15, s14
 801768c:	eea6 0a85 	vfma.f32	s0, s13, s10
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop
 8017694:	2f2ec9d3 	.word	0x2f2ec9d3
 8017698:	b2d72f34 	.word	0xb2d72f34
 801769c:	3638ef1b 	.word	0x3638ef1b
 80176a0:	b9500d01 	.word	0xb9500d01
 80176a4:	3c088889 	.word	0x3c088889
 80176a8:	3e2aaaab 	.word	0x3e2aaaab
 80176ac:	be2aaaab 	.word	0xbe2aaaab

080176b0 <with_errnof>:
 80176b0:	b510      	push	{r4, lr}
 80176b2:	ed2d 8b02 	vpush	{d8}
 80176b6:	eeb0 8a40 	vmov.f32	s16, s0
 80176ba:	4604      	mov	r4, r0
 80176bc:	f000 f928 	bl	8017910 <__errno>
 80176c0:	eeb0 0a48 	vmov.f32	s0, s16
 80176c4:	ecbd 8b02 	vpop	{d8}
 80176c8:	6004      	str	r4, [r0, #0]
 80176ca:	bd10      	pop	{r4, pc}
 80176cc:	0000      	movs	r0, r0
	...

080176d0 <xflowf>:
 80176d0:	b130      	cbz	r0, 80176e0 <xflowf+0x10>
 80176d2:	eef1 7a40 	vneg.f32	s15, s0
 80176d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80176da:	2022      	movs	r0, #34	; 0x22
 80176dc:	f7ff bfe8 	b.w	80176b0 <with_errnof>
 80176e0:	eef0 7a40 	vmov.f32	s15, s0
 80176e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80176e8:	2022      	movs	r0, #34	; 0x22
 80176ea:	f7ff bfe1 	b.w	80176b0 <with_errnof>
 80176ee:	bf00      	nop

080176f0 <__math_uflowf>:
 80176f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80176f8 <__math_uflowf+0x8>
 80176f4:	f7ff bfec 	b.w	80176d0 <xflowf>
 80176f8:	10000000 	.word	0x10000000
 80176fc:	00000000 	.word	0x00000000

08017700 <__math_may_uflowf>:
 8017700:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017708 <__math_may_uflowf+0x8>
 8017704:	f7ff bfe4 	b.w	80176d0 <xflowf>
 8017708:	1a200000 	.word	0x1a200000
 801770c:	00000000 	.word	0x00000000

08017710 <__math_oflowf>:
 8017710:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017718 <__math_oflowf+0x8>
 8017714:	f7ff bfdc 	b.w	80176d0 <xflowf>
 8017718:	70000000 	.word	0x70000000
 801771c:	00000000 	.word	0x00000000

08017720 <__math_divzerof>:
 8017720:	2800      	cmp	r0, #0
 8017722:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801772a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8017740 <__math_divzerof+0x20>
 801772e:	bf08      	it	eq
 8017730:	eef0 7a47 	vmoveq.f32	s15, s14
 8017734:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017738:	2022      	movs	r0, #34	; 0x22
 801773a:	f7ff bfb9 	b.w	80176b0 <with_errnof>
 801773e:	bf00      	nop
	...

08017750 <__math_invalidf>:
 8017750:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017754:	eeb4 0a40 	vcmp.f32	s0, s0
 8017758:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 801775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017760:	eeb0 0a47 	vmov.f32	s0, s14
 8017764:	d602      	bvs.n	801776c <__math_invalidf+0x1c>
 8017766:	2021      	movs	r0, #33	; 0x21
 8017768:	f7ff bfa2 	b.w	80176b0 <with_errnof>
 801776c:	4770      	bx	lr
 801776e:	bf00      	nop

08017770 <matherr>:
 8017770:	2000      	movs	r0, #0
 8017772:	4770      	bx	lr
	...

08017780 <fabsf>:
 8017780:	ee10 3a10 	vmov	r3, s0
 8017784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017788:	ee00 3a10 	vmov	s0, r3
 801778c:	4770      	bx	lr
 801778e:	bf00      	nop

08017790 <floorf>:
 8017790:	ee10 2a10 	vmov	r2, s0
 8017794:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8017798:	0dcb      	lsrs	r3, r1, #23
 801779a:	3b7f      	subs	r3, #127	; 0x7f
 801779c:	2b16      	cmp	r3, #22
 801779e:	dc1c      	bgt.n	80177da <floorf+0x4a>
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	ee10 0a10 	vmov	r0, s0
 80177a6:	db1e      	blt.n	80177e6 <floorf+0x56>
 80177a8:	4919      	ldr	r1, [pc, #100]	; (8017810 <floorf+0x80>)
 80177aa:	4119      	asrs	r1, r3
 80177ac:	420a      	tst	r2, r1
 80177ae:	d027      	beq.n	8017800 <floorf+0x70>
 80177b0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017814 <floorf+0x84>
 80177b4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80177b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80177bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c0:	dd1e      	ble.n	8017800 <floorf+0x70>
 80177c2:	2a00      	cmp	r2, #0
 80177c4:	da04      	bge.n	80177d0 <floorf+0x40>
 80177c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80177ca:	fa42 f303 	asr.w	r3, r2, r3
 80177ce:	4418      	add	r0, r3
 80177d0:	ea20 0301 	bic.w	r3, r0, r1
 80177d4:	ee00 3a10 	vmov	s0, r3
 80177d8:	4770      	bx	lr
 80177da:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80177de:	d30f      	bcc.n	8017800 <floorf+0x70>
 80177e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80177e4:	4770      	bx	lr
 80177e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8017814 <floorf+0x84>
 80177ea:	ee70 7a27 	vadd.f32	s15, s0, s15
 80177ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80177f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177f6:	dd03      	ble.n	8017800 <floorf+0x70>
 80177f8:	2a00      	cmp	r2, #0
 80177fa:	db02      	blt.n	8017802 <floorf+0x72>
 80177fc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8017818 <floorf+0x88>
 8017800:	4770      	bx	lr
 8017802:	2900      	cmp	r1, #0
 8017804:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017808:	bf18      	it	ne
 801780a:	eeb0 0a67 	vmovne.f32	s0, s15
 801780e:	4770      	bx	lr
 8017810:	007fffff 	.word	0x007fffff
 8017814:	7149f2ca 	.word	0x7149f2ca
	...

08017820 <scalbnf>:
 8017820:	b508      	push	{r3, lr}
 8017822:	ee10 3a10 	vmov	r3, s0
 8017826:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801782a:	ed2d 8b02 	vpush	{d8}
 801782e:	d011      	beq.n	8017854 <scalbnf+0x34>
 8017830:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017834:	d211      	bcs.n	801785a <scalbnf+0x3a>
 8017836:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801783a:	d313      	bcc.n	8017864 <scalbnf+0x44>
 801783c:	0dd2      	lsrs	r2, r2, #23
 801783e:	4402      	add	r2, r0
 8017840:	2afe      	cmp	r2, #254	; 0xfe
 8017842:	dc1c      	bgt.n	801787e <scalbnf+0x5e>
 8017844:	2a00      	cmp	r2, #0
 8017846:	dd2a      	ble.n	801789e <scalbnf+0x7e>
 8017848:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801784c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017850:	ee00 3a10 	vmov	s0, r3
 8017854:	ecbd 8b02 	vpop	{d8}
 8017858:	bd08      	pop	{r3, pc}
 801785a:	ecbd 8b02 	vpop	{d8}
 801785e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017862:	bd08      	pop	{r3, pc}
 8017864:	4b1d      	ldr	r3, [pc, #116]	; (80178dc <scalbnf+0xbc>)
 8017866:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80178e0 <scalbnf+0xc0>
 801786a:	4298      	cmp	r0, r3
 801786c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017870:	db10      	blt.n	8017894 <scalbnf+0x74>
 8017872:	ee10 3a10 	vmov	r3, s0
 8017876:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801787a:	3a19      	subs	r2, #25
 801787c:	e7df      	b.n	801783e <scalbnf+0x1e>
 801787e:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80178e4 <scalbnf+0xc4>
 8017882:	eef0 0a40 	vmov.f32	s1, s0
 8017886:	eeb0 0a48 	vmov.f32	s0, s16
 801788a:	f000 f831 	bl	80178f0 <copysignf>
 801788e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8017892:	e7df      	b.n	8017854 <scalbnf+0x34>
 8017894:	eddf 0a14 	vldr	s1, [pc, #80]	; 80178e8 <scalbnf+0xc8>
 8017898:	ee20 0a20 	vmul.f32	s0, s0, s1
 801789c:	e7da      	b.n	8017854 <scalbnf+0x34>
 801789e:	f112 0f16 	cmn.w	r2, #22
 80178a2:	da0e      	bge.n	80178c2 <scalbnf+0xa2>
 80178a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80178a8:	4298      	cmp	r0, r3
 80178aa:	dce8      	bgt.n	801787e <scalbnf+0x5e>
 80178ac:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 80178e8 <scalbnf+0xc8>
 80178b0:	eef0 0a40 	vmov.f32	s1, s0
 80178b4:	eeb0 0a48 	vmov.f32	s0, s16
 80178b8:	f000 f81a 	bl	80178f0 <copysignf>
 80178bc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80178c0:	e7c8      	b.n	8017854 <scalbnf+0x34>
 80178c2:	3219      	adds	r2, #25
 80178c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80178c8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80178cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80178ec <scalbnf+0xcc>
 80178d0:	ee00 3a10 	vmov	s0, r3
 80178d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80178d8:	e7bc      	b.n	8017854 <scalbnf+0x34>
 80178da:	bf00      	nop
 80178dc:	ffff3cb0 	.word	0xffff3cb0
 80178e0:	4c000000 	.word	0x4c000000
 80178e4:	7149f2ca 	.word	0x7149f2ca
 80178e8:	0da24260 	.word	0x0da24260
 80178ec:	33000000 	.word	0x33000000

080178f0 <copysignf>:
 80178f0:	ee10 3a10 	vmov	r3, s0
 80178f4:	ee10 2a90 	vmov	r2, s1
 80178f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017900:	4313      	orrs	r3, r2
 8017902:	ee00 3a10 	vmov	s0, r3
 8017906:	4770      	bx	lr
	...

08017910 <__errno>:
 8017910:	4b01      	ldr	r3, [pc, #4]	; (8017918 <__errno+0x8>)
 8017912:	6818      	ldr	r0, [r3, #0]
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	20000864 	.word	0x20000864
 801791c:	00000000 	.word	0x00000000

08017920 <memcmp>:
 8017920:	2a03      	cmp	r2, #3
 8017922:	b470      	push	{r4, r5, r6}
 8017924:	d914      	bls.n	8017950 <memcmp+0x30>
 8017926:	ea40 0501 	orr.w	r5, r0, r1
 801792a:	07ad      	lsls	r5, r5, #30
 801792c:	4604      	mov	r4, r0
 801792e:	460b      	mov	r3, r1
 8017930:	d122      	bne.n	8017978 <memcmp+0x58>
 8017932:	681d      	ldr	r5, [r3, #0]
 8017934:	6826      	ldr	r6, [r4, #0]
 8017936:	42ae      	cmp	r6, r5
 8017938:	4619      	mov	r1, r3
 801793a:	4620      	mov	r0, r4
 801793c:	f103 0304 	add.w	r3, r3, #4
 8017940:	f104 0404 	add.w	r4, r4, #4
 8017944:	d118      	bne.n	8017978 <memcmp+0x58>
 8017946:	3a04      	subs	r2, #4
 8017948:	2a03      	cmp	r2, #3
 801794a:	4620      	mov	r0, r4
 801794c:	4619      	mov	r1, r3
 801794e:	d8f0      	bhi.n	8017932 <memcmp+0x12>
 8017950:	1e54      	subs	r4, r2, #1
 8017952:	b172      	cbz	r2, 8017972 <memcmp+0x52>
 8017954:	7802      	ldrb	r2, [r0, #0]
 8017956:	780b      	ldrb	r3, [r1, #0]
 8017958:	429a      	cmp	r2, r3
 801795a:	bf08      	it	eq
 801795c:	1864      	addeq	r4, r4, r1
 801795e:	d006      	beq.n	801796e <memcmp+0x4e>
 8017960:	e00c      	b.n	801797c <memcmp+0x5c>
 8017962:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8017966:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801796a:	429a      	cmp	r2, r3
 801796c:	d106      	bne.n	801797c <memcmp+0x5c>
 801796e:	42a1      	cmp	r1, r4
 8017970:	d1f7      	bne.n	8017962 <memcmp+0x42>
 8017972:	2000      	movs	r0, #0
 8017974:	bc70      	pop	{r4, r5, r6}
 8017976:	4770      	bx	lr
 8017978:	1e54      	subs	r4, r2, #1
 801797a:	e7eb      	b.n	8017954 <memcmp+0x34>
 801797c:	1ad0      	subs	r0, r2, r3
 801797e:	bc70      	pop	{r4, r5, r6}
 8017980:	4770      	bx	lr
 8017982:	bf00      	nop
	...

08017990 <memset>:
 8017990:	b4f0      	push	{r4, r5, r6, r7}
 8017992:	0786      	lsls	r6, r0, #30
 8017994:	d043      	beq.n	8017a1e <memset+0x8e>
 8017996:	1e54      	subs	r4, r2, #1
 8017998:	2a00      	cmp	r2, #0
 801799a:	d03e      	beq.n	8017a1a <memset+0x8a>
 801799c:	b2ca      	uxtb	r2, r1
 801799e:	4603      	mov	r3, r0
 80179a0:	e002      	b.n	80179a8 <memset+0x18>
 80179a2:	f114 34ff 	adds.w	r4, r4, #4294967295
 80179a6:	d338      	bcc.n	8017a1a <memset+0x8a>
 80179a8:	f803 2b01 	strb.w	r2, [r3], #1
 80179ac:	079d      	lsls	r5, r3, #30
 80179ae:	d1f8      	bne.n	80179a2 <memset+0x12>
 80179b0:	2c03      	cmp	r4, #3
 80179b2:	d92b      	bls.n	8017a0c <memset+0x7c>
 80179b4:	b2cd      	uxtb	r5, r1
 80179b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80179ba:	2c0f      	cmp	r4, #15
 80179bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80179c0:	d916      	bls.n	80179f0 <memset+0x60>
 80179c2:	f1a4 0710 	sub.w	r7, r4, #16
 80179c6:	093f      	lsrs	r7, r7, #4
 80179c8:	f103 0620 	add.w	r6, r3, #32
 80179cc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80179d0:	f103 0210 	add.w	r2, r3, #16
 80179d4:	e942 5504 	strd	r5, r5, [r2, #-16]
 80179d8:	e942 5502 	strd	r5, r5, [r2, #-8]
 80179dc:	3210      	adds	r2, #16
 80179de:	42b2      	cmp	r2, r6
 80179e0:	d1f8      	bne.n	80179d4 <memset+0x44>
 80179e2:	f004 040f 	and.w	r4, r4, #15
 80179e6:	3701      	adds	r7, #1
 80179e8:	2c03      	cmp	r4, #3
 80179ea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80179ee:	d90d      	bls.n	8017a0c <memset+0x7c>
 80179f0:	461e      	mov	r6, r3
 80179f2:	4622      	mov	r2, r4
 80179f4:	3a04      	subs	r2, #4
 80179f6:	2a03      	cmp	r2, #3
 80179f8:	f846 5b04 	str.w	r5, [r6], #4
 80179fc:	d8fa      	bhi.n	80179f4 <memset+0x64>
 80179fe:	1f22      	subs	r2, r4, #4
 8017a00:	f022 0203 	bic.w	r2, r2, #3
 8017a04:	3204      	adds	r2, #4
 8017a06:	4413      	add	r3, r2
 8017a08:	f004 0403 	and.w	r4, r4, #3
 8017a0c:	b12c      	cbz	r4, 8017a1a <memset+0x8a>
 8017a0e:	b2c9      	uxtb	r1, r1
 8017a10:	441c      	add	r4, r3
 8017a12:	f803 1b01 	strb.w	r1, [r3], #1
 8017a16:	429c      	cmp	r4, r3
 8017a18:	d1fb      	bne.n	8017a12 <memset+0x82>
 8017a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8017a1c:	4770      	bx	lr
 8017a1e:	4614      	mov	r4, r2
 8017a20:	4603      	mov	r3, r0
 8017a22:	e7c5      	b.n	80179b0 <memset+0x20>
	...
 8017a30:	656c6469 	.word	0x656c6469
	...

08017a40 <ch_debug>:
 8017a40:	6e69616d 18011600 08480404 1814100c     main......H.....
 8017a50:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08017a60 <vmt>:
 8017a60:	0800de51 0800de31 0800de91 0800de71     Q...1.......q...
 8017a70:	0800de81 0800de61 0800de41 0800de21     ....a...A...!...

08017a80 <active_status>:
	...

08017a90 <halted_status>:
 8017a90:	00000001 00000000 00000000 00000000     ................

08017aa0 <zero_status>:
	...

08017ab0 <_stm32_dma_streams>:
 8017ab0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8017ac0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8017ad0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8017ae0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8017af0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8017b00:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8017b10:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8017b20:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8017b30:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8017b40:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8017b50:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8017b60:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.
 8017b70:	20414d44 6c696166 00657275 00000000     DMA failure.....

08017b80 <ep0config>:
 8017b80:	00000000 0800e281 0800e5c1 0800e6b1     ................
 8017b90:	00400040 20001280 20001280 00000001     @.@.... ... ....
 8017ba0:	20001294 00000000 00000000 00000000     ... ............

08017bb0 <fsparams>:
 8017bb0:	00000080 00000140 00000003 00000000     ....@...........
 8017bc0:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

08017bd0 <pal_default_config>:
 8017bd0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8017be0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8017bf0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8017c00:	04000000 00000040 02208001 00000000     ....@..... .....
 8017c10:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8017c20:	00060600 55000100 00000000 ffffffff     .......U........
 8017c30:	00555055 00000fff 00000000 00000000     UPU.............
 8017c40:	00000040 00000000 ffffffff 00000000     @...............
 8017c50:	0000ffff 00000000 00000000 00000000     ................
 8017c60:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8017c80:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8017c9c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8017cb8:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8017cd0:	6c756e28 0000296c 00000000 00000000     (null)..........

08017ce0 <pow10>:
 8017ce0:	0000000a 00000064 000003e8 00002710     ....d........'..
 8017cf0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8017d00:	3b9aca00 00000000 00000000 00000000     ...;............

08017d10 <i2cfg>:
 8017d10:	00000001 000186a0 00000001 00000000     ................
 8017d20:	0a0d6425 00000000 63206f74 5f666e6f     %d......to conf_
 8017d30:	656e6567 2e6c6172 203a2063 666e6f63     general.c : conf
 8017d40:	6e65675f 6c617265 6165725f 636d5f64     _general_read_mc
 8017d50:	6e6f635f 75676966 69746172 0a0d6e6f     _configuration..
	...
 8017d70:	666e6f63 6e65675f 6c617265 6f74735f     conf_general_sto
 8017d80:	6d5f6572 6f635f63 6769666e 74617275     re_mc_configurat
 8017d90:	006e6f69 00000000 00000000 00000000     ion.............
 8017da0:	745f636d 72656d69 00000000 00000000     mc_timer........
 8017db0:	695f636d 7265746e 65636166 696e695f     mc_interface_ini
 8017dc0:	000a0d74 00000000 00000000 00000000     t...............
 8017dd0:	706d6153 6553656c 7265646e 00000000     SampleSender....
 8017de0:	6d206f74 6e695f63 66726574 20656361     to mc_interface 
 8017df0:	53203e2d 6c706d61 6e655365 0d726564     -> SampleSender.
 8017e00:	0000000a 00000000 00000000 00000000     ................
 8017e10:	4c76614d 206b6e69 64616572 2e2e2e79     MavLink ready...
 8017e20:	00000a0d 6a6f7250 20746365 524f203a     ....Project : OR
 8017e30:	2041434f 43444c42 00000000 42207962     OCA BLDC....by B
 8017e40:	68436b61 6e614a61 00000067 65746164     akChaJang...date
 8017e50:	32203a20 2f383130 322f3630 0d0a0d31      : 2018/06/21...
 8017e60:	0000000a 00000000 00000000 00000000     ................
 8017e70:	5f646d63 74697277 65655f65 6d6f7270     cmd_write_eeprom
	...

08017e90 <mavlink_message_crcs.11747>:
 8017e90:	0000c032 00000000 a6000000 00007e8c     2............~..
 8017ea0:	00000000 000000eb 00000000 00000000     ................
	...
 8017f08:	00216b00 00000000 00000000 00000000     .k!.............
	...
 8017f6c:	001554f9 00000000 00000000 00000000     .T..............
	...
 8017f90:	43444c42 30315220 00000000 00000000     BLDC R10........

08017fa0 <cancfg>:
 8017fa0:	00000064 00180006 00000000 00000000     d...............
 8017fb0:	636e6143 70206d6f 65636f72 00007373     Cancom process..
 8017fc0:	004e4143 00000000 00000000 00000000     CAN.............
 8017fd0:	204e4143 74617473 00007375 00000000     CAN status......
 8017fe0:	2d425355 69726553 70206c61 65636f72     USB-Serial proce
 8017ff0:	00007373 00000000 00000000 00000000     ss..............
 8018000:	2d425355 69726553 72206c61 00646165     USB-Serial read.
 8018010:	2d425355 69726553 77206c61 65746972     USB-Serial write
	...

08018030 <ep1config>:
 8018030:	00000002 00000000 0800dfd1 0800e041     ............A...
 8018040:	00400040 20006f00 20006f14 00000002     @.@..o. .o. ....
	...

08018060 <ep2config>:
 8018060:	00000003 00000000 0800e0b1 00000000     ................
 8018070:	00000010 20006f28 00000000 00000001     ....(o. ........
	...

08018090 <serusbcfg>:
 8018090:	20001000 00020101 00000000 00000000     ... ............

080180a0 <usbcfg>:
 80180a0:	08013be1 08013bb1 0800df91 00000000     .;...;..........

080180b0 <vcom_configuration_descriptor>:
 80180b0:	00000043 080180c0 00000000 00000000     C...............

080180c0 <vcom_configuration_descriptor_data>:
 80180c0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80180d0:	24050001 05011000 01000124 02022404     ...$....$....$..
 80180e0:	00062405 82050701 ff000803 00010409     .$..............
 80180f0:	00000a02 01050700 00004002 02810507     .........@......
 8018100:	00000040 00000000 00000000 00000000     @...............

08018110 <vcom_device_descriptor>:
 8018110:	00000012 08018120 00000000 00000000     .... ...........

08018120 <vcom_device_descriptor_data>:
 8018120:	01100112 40000002 57400483 02010200     .......@..@W....
 8018130:	00000103 00000000 00000000 00000000     ................

08018140 <vcom_string0>:
 8018140:	04090304 00000000 00000000 00000000     ................

08018150 <vcom_string1>:
 8018150:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8018160:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8018170:	00630069 00000073 00000000 00000000     i.c.s...........

08018180 <vcom_string2>:
 8018180:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8018190:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 80181a0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 80181b0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

080181c0 <vcom_string3>:
 80181c0:	00330308 00310030 00000000 00000000     ..3.0.1.........

080181d0 <vcom_strings>:
 80181d0:	00000004 08018140 00000026 08018150     ....@...&...P...
 80181e0:	00000038 08018180 00000008 080181c0     8...............

080181f0 <flash_addr>:
 80181f0:	08000000 08004000 08008000 0800c000     .....@..........
 8018200:	08010000 08020000 08040000 08060000     ................
 8018210:	08080000 080a0000 080c0000 080e0000     ................

08018220 <flash_sector>:
 8018220:	00080000 00180010 00280020 00380030     ........ .(.0.8.
 8018230:	00480040 00580050 00000000 00000000     @.H.P.X.........
 8018240:	656d6954 0074756f 00000000 00000000     Timeout.........

08018250 <crc16_tab>:
 8018250:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
 8018260:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
 8018270:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
 8018280:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
 8018290:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
 80182a0:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
 80182b0:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
 80182c0:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
 80182d0:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
 80182e0:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
 80182f0:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
 8018300:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
 8018310:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
 8018320:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
 8018330:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
 8018340:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
 8018350:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
 8018360:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
 8018370:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
 8018380:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
 8018390:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
 80183a0:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
 80183b0:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
 80183c0:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
 80183d0:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
 80183e0:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
 80183f0:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
 8018400:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
 8018410:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
 8018420:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
 8018430:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
 8018440:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
 8018450:	2066724e 00005852 00000000 00000000     Nrf RX..........
 8018460:	2066724e 00005854 00000000 00000000     Nrf TX..........
 8018470:	5f505041 004d5050 00000000 00000000     APP_PPM.........
 8018480:	5f505041 00434441 00000000 00000000     APP_ADC.........
 8018490:	74726175 6d6d6f63 6f727020 73736563     uartcomm process
	...
 80184b0:	636e754e 206b7568 00633269 00000000     Nunchuk i2c.....
 80184c0:	636e754e 206b7568 7074756f 00007475     Nunchuk output..
 80184d0:	43444c42 72657020 69646f69 00000063     BLDC periodic...
 80184e0:	6365736d 6d69745f 00007265 6d206f74     msec_timer..to m
 80184f0:	206e6961 74203e2d 72656d69 7268745f     ain -> timer_thr
 8018500:	0d646165 0000000a 00000000 00000000     ead.............

08018510 <__logf_data>:
 8018510:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 8018520:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 8018530:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 8018540:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 8018550:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 8018560:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 8018570:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 8018580:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 8018590:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 80185a0:	00000000 3ff00000 00000000 00000000     .......?........
 80185b0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 80185c0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 80185d0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 80185e0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 80185f0:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 8018600:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 8018610:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 8018620:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

08018630 <__powf_log2_data>:
 8018630:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
 8018640:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
 8018650:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
 8018660:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
 8018670:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
 8018680:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
 8018690:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
 80186a0:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
 80186b0:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
 80186c0:	00000000 3ff00000 00000000 00000000     .......?........
 80186d0:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
 80186e0:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
 80186f0:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
 8018700:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
 8018710:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
 8018720:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
 8018730:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
 8018740:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
 8018750:	652ab82b 3ff71547 00000000 00000000     +.*eG..?........
 8018760:	74727173 00000066 00000000 00000000     sqrtf...........

08018770 <npio2_hw>:
 8018770:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8018780:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8018790:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 80187a0:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80187b0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80187c0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80187d0:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80187e0:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080187f0 <two_over_pi>:
 80187f0:	000000a2 000000f9 00000083 0000006e     ............n...
 8018800:	0000004e 00000044 00000015 00000029     N...D.......)...
 8018810:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8018820:	000000f5 00000034 000000dd 000000c0     ....4...........
 8018830:	000000db 00000062 00000095 00000099     ....b...........
 8018840:	0000003c 00000043 00000090 00000041     <...C.......A...
 8018850:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8018860:	000000de 000000bb 000000c5 00000061     ............a...
 8018870:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8018880:	00000042 0000004d 000000d2 000000e0     B...M...........
 8018890:	00000006 00000049 0000002e 000000ea     ....I...........
 80188a0:	00000009 000000d1 00000092 0000001c     ................
 80188b0:	000000fe 0000001d 000000eb 0000001c     ................
 80188c0:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80188d0:	000000e8 00000082 00000035 000000f5     ........5.......
 80188e0:	0000002e 000000bb 00000044 00000084     ........D.......
 80188f0:	000000e9 0000009c 00000070 00000026     ........p...&...
 8018900:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8018910:	00000039 00000091 000000d6 00000039     9...........9...
 8018920:	00000083 00000053 00000039 000000f4     ....S...9.......
 8018930:	0000009c 00000084 0000005f 0000008b     ........_.......
 8018940:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8018950:	0000001f 000000f8 00000097 000000ff     ................
 8018960:	000000de 00000005 00000098 0000000f     ................
 8018970:	000000ef 0000002f 00000011 0000008b     ..../...........
 8018980:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8018990:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80189a0:	00000027 000000cb 00000009 000000b7     '...............
 80189b0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80189c0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80189d0:	00000075 00000027 000000ba 000000c7     u...'...........
 80189e0:	000000eb 000000e5 000000f1 0000007b     ............{...
 80189f0:	0000003d 00000007 00000039 000000f7     =.......9.......
 8018a00:	0000008a 00000052 00000092 000000ea     ....R...........
 8018a10:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8018a20:	0000001f 0000008d 0000005d 00000008     ........].......
 8018a30:	00000056 00000003 00000030 00000046     V.......0...F...
 8018a40:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8018a50:	000000f0 000000cf 000000bc 00000020     ............ ...
 8018a60:	0000009a 000000f4 00000036 0000001d     ........6.......
 8018a70:	000000a9 000000e3 00000091 00000061     ............a...
 8018a80:	0000005e 000000e6 0000001b 00000008     ^...............
 8018a90:	00000065 00000099 00000085 0000005f     e..........._...
 8018aa0:	00000014 000000a0 00000068 00000040     ........h...@...
 8018ab0:	0000008d 000000ff 000000d8 00000080     ................
 8018ac0:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8018ad0:	00000006 00000006 00000015 00000056     ............V...
 8018ae0:	000000ca 00000073 000000a8 000000c9     ....s...........
 8018af0:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8018b00:	0000008c 0000006b 00000000 00000000     ....k...........

08018b10 <PIo2>:
 8018b10:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8018b20:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8018b30:	1fc40000 1bc60000 17440000 00000000     ..........D.....

08018b40 <init_jk>:
 8018b40:	00000004 00000007 00000009 00000000     ................

08018b50 <__exp2f_data>:
 8018b50:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 8018b60:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 8018b70:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 8018b80:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 8018b90:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 8018ba0:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 8018bb0:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 8018bc0:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 8018bd0:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 8018be0:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 8018bf0:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 8018c00:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 8018c10:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 8018c20:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 8018c30:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 8018c40:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 8018c50:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 8018c60:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 8018c70:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 8018c80:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 8018c90:	ff0c52d6 3f962e42                       .R..B..?
