
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x4>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f000 fd32 	bl	800cac0 <__core_init>
 800c05c:	f003 fb90 	bl	800f780 <__early_init>
 800c060:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800c064:	491b      	ldr	r1, [pc, #108]	; (800c0d4 <endfiniloop+0x8>)
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <endfiniloop+0xc>)

0800c068 <msloop>:
 800c068:	4291      	cmp	r1, r2
 800c06a:	bf3c      	itt	cc
 800c06c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c070:	e7fa      	bcc.n	800c068 <msloop>
 800c072:	491a      	ldr	r1, [pc, #104]	; (800c0dc <endfiniloop+0x10>)
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <endfiniloop+0x4>)

0800c076 <psloop>:
 800c076:	4291      	cmp	r1, r2
 800c078:	bf3c      	itt	cc
 800c07a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07e:	e7fa      	bcc.n	800c076 <psloop>
 800c080:	4917      	ldr	r1, [pc, #92]	; (800c0e0 <endfiniloop+0x14>)
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <endfiniloop+0x18>)
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <endfiniloop+0x1c>)

0800c086 <dloop>:
 800c086:	429a      	cmp	r2, r3
 800c088:	bf3e      	ittt	cc
 800c08a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08e:	f842 0b04 	strcc.w	r0, [r2], #4
 800c092:	e7f8      	bcc.n	800c086 <dloop>
 800c094:	2000      	movs	r0, #0
 800c096:	4915      	ldr	r1, [pc, #84]	; (800c0ec <endfiniloop+0x20>)
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <endfiniloop+0x24>)

0800c09a <bloop>:
 800c09a:	4291      	cmp	r1, r2
 800c09c:	bf3c      	itt	cc
 800c09e:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a2:	e7fa      	bcc.n	800c09a <bloop>
 800c0a4:	f000 fd14 	bl	800cad0 <__late_init>
 800c0a8:	4c12      	ldr	r4, [pc, #72]	; (800c0f4 <endfiniloop+0x28>)
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <endfiniloop+0x2c>)

0800c0ac <initloop>:
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	da03      	bge.n	800c0b8 <endinitloop>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	4788      	blx	r1
 800c0b6:	e7f9      	b.n	800c0ac <initloop>

0800c0b8 <endinitloop>:
 800c0b8:	f005 fcda 	bl	8011a70 <main>
 800c0bc:	4c0f      	ldr	r4, [pc, #60]	; (800c0fc <endfiniloop+0x30>)
 800c0be:	4d10      	ldr	r5, [pc, #64]	; (800c100 <endfiniloop+0x34>)

0800c0c0 <finiloop>:
 800c0c0:	42ac      	cmp	r4, r5
 800c0c2:	da03      	bge.n	800c0cc <endfiniloop>
 800c0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c8:	4788      	blx	r1
 800c0ca:	e7f9      	b.n	800c0c0 <finiloop>

0800c0cc <endfiniloop>:
 800c0cc:	f000 bd08 	b.w	800cae0 <__default_exit>
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	20000000 	.word	0x20000000
 800c0d8:	20000400 	.word	0x20000400
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	08013158 	.word	0x08013158
 800c0e4:	20000800 	.word	0x20000800
 800c0e8:	20000c6c 	.word	0x20000c6c
 800c0ec:	20000c70 	.word	0x20000c70
 800c0f0:	200049f8 	.word	0x200049f8
 800c0f4:	0800c000 	.word	0x0800c000
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f000 ffa4 	bl	800d080 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f000 ff02 	bl	800cf40 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f092 0f00 	teq	r2, #0
 800c42a:	bf14      	ite	ne
 800c42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c430:	4770      	bxeq	lr
 800c432:	b530      	push	{r4, r5, lr}
 800c434:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c440:	e720      	b.n	800c284 <__adddf3+0x138>
 800c442:	bf00      	nop

0800c444 <__aeabi_ul2d>:
 800c444:	ea50 0201 	orrs.w	r2, r0, r1
 800c448:	bf08      	it	eq
 800c44a:	4770      	bxeq	lr
 800c44c:	b530      	push	{r4, r5, lr}
 800c44e:	f04f 0500 	mov.w	r5, #0
 800c452:	e00a      	b.n	800c46a <__aeabi_l2d+0x16>

0800c454 <__aeabi_l2d>:
 800c454:	ea50 0201 	orrs.w	r2, r0, r1
 800c458:	bf08      	it	eq
 800c45a:	4770      	bxeq	lr
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c462:	d502      	bpl.n	800c46a <__aeabi_l2d+0x16>
 800c464:	4240      	negs	r0, r0
 800c466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c46a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c46e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c476:	f43f aedc 	beq.w	800c232 <__adddf3+0xe6>
 800c47a:	f04f 0203 	mov.w	r2, #3
 800c47e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c482:	bf18      	it	ne
 800c484:	3203      	addne	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c492:	f1c2 0320 	rsb	r3, r2, #32
 800c496:	fa00 fc03 	lsl.w	ip, r0, r3
 800c49a:	fa20 f002 	lsr.w	r0, r0, r2
 800c49e:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4a2:	ea40 000e 	orr.w	r0, r0, lr
 800c4a6:	fa21 f102 	lsr.w	r1, r1, r2
 800c4aa:	4414      	add	r4, r2
 800c4ac:	e6c1      	b.n	800c232 <__adddf3+0xe6>
 800c4ae:	bf00      	nop

0800c4b0 <__aeabi_dmul>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4be:	bf1d      	ittte	ne
 800c4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4c4:	ea94 0f0c 	teqne	r4, ip
 800c4c8:	ea95 0f0c 	teqne	r5, ip
 800c4cc:	f000 f8de 	bleq	800c68c <__aeabi_dmul+0x1dc>
 800c4d0:	442c      	add	r4, r5
 800c4d2:	ea81 0603 	eor.w	r6, r1, r3
 800c4d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4e2:	bf18      	it	ne
 800c4e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f0:	d038      	beq.n	800c564 <__aeabi_dmul+0xb4>
 800c4f2:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4f6:	f04f 0500 	mov.w	r5, #0
 800c4fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c502:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c506:	f04f 0600 	mov.w	r6, #0
 800c50a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c50e:	f09c 0f00 	teq	ip, #0
 800c512:	bf18      	it	ne
 800c514:	f04e 0e01 	orrne.w	lr, lr, #1
 800c518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c51c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c524:	d204      	bcs.n	800c530 <__aeabi_dmul+0x80>
 800c526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c52a:	416d      	adcs	r5, r5
 800c52c:	eb46 0606 	adc.w	r6, r6, r6
 800c530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c53c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c548:	bf88      	it	hi
 800c54a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c54e:	d81e      	bhi.n	800c58e <__aeabi_dmul+0xde>
 800c550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c554:	bf08      	it	eq
 800c556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c55a:	f150 0000 	adcs.w	r0, r0, #0
 800c55e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c568:	ea46 0101 	orr.w	r1, r6, r1
 800c56c:	ea40 0002 	orr.w	r0, r0, r2
 800c570:	ea81 0103 	eor.w	r1, r1, r3
 800c574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c578:	bfc2      	ittt	gt
 800c57a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c57e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c582:	bd70      	popgt	{r4, r5, r6, pc}
 800c584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c588:	f04f 0e00 	mov.w	lr, #0
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f300 80ab 	bgt.w	800c6e8 <__aeabi_dmul+0x238>
 800c592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c596:	bfde      	ittt	le
 800c598:	2000      	movle	r0, #0
 800c59a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c59e:	bd70      	pople	{r4, r5, r6, pc}
 800c5a0:	f1c4 0400 	rsb	r4, r4, #0
 800c5a4:	3c20      	subs	r4, #32
 800c5a6:	da35      	bge.n	800c614 <__aeabi_dmul+0x164>
 800c5a8:	340c      	adds	r4, #12
 800c5aa:	dc1b      	bgt.n	800c5e4 <__aeabi_dmul+0x134>
 800c5ac:	f104 0414 	add.w	r4, r4, #20
 800c5b0:	f1c4 0520 	rsb	r5, r4, #32
 800c5b4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5b8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5bc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5c0:	ea40 0002 	orr.w	r0, r0, r2
 800c5c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5d0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5d4:	eb42 0106 	adc.w	r1, r2, r6
 800c5d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5dc:	bf08      	it	eq
 800c5de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f1c4 040c 	rsb	r4, r4, #12
 800c5e8:	f1c4 0520 	rsb	r5, r4, #32
 800c5ec:	fa00 f304 	lsl.w	r3, r0, r4
 800c5f0:	fa20 f005 	lsr.w	r0, r0, r5
 800c5f4:	fa01 f204 	lsl.w	r2, r1, r4
 800c5f8:	ea40 0002 	orr.w	r0, r0, r2
 800c5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c604:	f141 0100 	adc.w	r1, r1, #0
 800c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c60c:	bf08      	it	eq
 800c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f1c4 0520 	rsb	r5, r4, #32
 800c618:	fa00 f205 	lsl.w	r2, r0, r5
 800c61c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c620:	fa20 f304 	lsr.w	r3, r0, r4
 800c624:	fa01 f205 	lsl.w	r2, r1, r5
 800c628:	ea43 0302 	orr.w	r3, r3, r2
 800c62c:	fa21 f004 	lsr.w	r0, r1, r4
 800c630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c634:	fa21 f204 	lsr.w	r2, r1, r4
 800c638:	ea20 0002 	bic.w	r0, r0, r2
 800c63c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c644:	bf08      	it	eq
 800c646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f094 0f00 	teq	r4, #0
 800c650:	d10f      	bne.n	800c672 <__aeabi_dmul+0x1c2>
 800c652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c656:	0040      	lsls	r0, r0, #1
 800c658:	eb41 0101 	adc.w	r1, r1, r1
 800c65c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c660:	bf08      	it	eq
 800c662:	3c01      	subeq	r4, #1
 800c664:	d0f7      	beq.n	800c656 <__aeabi_dmul+0x1a6>
 800c666:	ea41 0106 	orr.w	r1, r1, r6
 800c66a:	f095 0f00 	teq	r5, #0
 800c66e:	bf18      	it	ne
 800c670:	4770      	bxne	lr
 800c672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c676:	0052      	lsls	r2, r2, #1
 800c678:	eb43 0303 	adc.w	r3, r3, r3
 800c67c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c680:	bf08      	it	eq
 800c682:	3d01      	subeq	r5, #1
 800c684:	d0f7      	beq.n	800c676 <__aeabi_dmul+0x1c6>
 800c686:	ea43 0306 	orr.w	r3, r3, r6
 800c68a:	4770      	bx	lr
 800c68c:	ea94 0f0c 	teq	r4, ip
 800c690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c694:	bf18      	it	ne
 800c696:	ea95 0f0c 	teqne	r5, ip
 800c69a:	d00c      	beq.n	800c6b6 <__aeabi_dmul+0x206>
 800c69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6a0:	bf18      	it	ne
 800c6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6a6:	d1d1      	bne.n	800c64c <__aeabi_dmul+0x19c>
 800c6a8:	ea81 0103 	eor.w	r1, r1, r3
 800c6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6b0:	f04f 0000 	mov.w	r0, #0
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ba:	bf06      	itte	eq
 800c6bc:	4610      	moveq	r0, r2
 800c6be:	4619      	moveq	r1, r3
 800c6c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6c4:	d019      	beq.n	800c6fa <__aeabi_dmul+0x24a>
 800c6c6:	ea94 0f0c 	teq	r4, ip
 800c6ca:	d102      	bne.n	800c6d2 <__aeabi_dmul+0x222>
 800c6cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6d0:	d113      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6d2:	ea95 0f0c 	teq	r5, ip
 800c6d6:	d105      	bne.n	800c6e4 <__aeabi_dmul+0x234>
 800c6d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6dc:	bf1c      	itt	ne
 800c6de:	4610      	movne	r0, r2
 800c6e0:	4619      	movne	r1, r3
 800c6e2:	d10a      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6e4:	ea81 0103 	eor.w	r1, r1, r3
 800c6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c702:	bd70      	pop	{r4, r5, r6, pc}

0800c704 <__aeabi_ddiv>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c712:	bf1d      	ittte	ne
 800c714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c718:	ea94 0f0c 	teqne	r4, ip
 800c71c:	ea95 0f0c 	teqne	r5, ip
 800c720:	f000 f8a7 	bleq	800c872 <__aeabi_ddiv+0x16e>
 800c724:	eba4 0405 	sub.w	r4, r4, r5
 800c728:	ea81 0e03 	eor.w	lr, r1, r3
 800c72c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c734:	f000 8088 	beq.w	800c848 <__aeabi_ddiv+0x144>
 800c738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c73c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c74c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c75c:	429d      	cmp	r5, r3
 800c75e:	bf08      	it	eq
 800c760:	4296      	cmpeq	r6, r2
 800c762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c76a:	d202      	bcs.n	800c772 <__aeabi_ddiv+0x6e>
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c772:	1ab6      	subs	r6, r6, r2
 800c774:	eb65 0503 	sbc.w	r5, r5, r3
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c77e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c786:	ebb6 0e02 	subs.w	lr, r6, r2
 800c78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c78e:	bf22      	ittt	cs
 800c790:	1ab6      	subcs	r6, r6, r2
 800c792:	4675      	movcs	r5, lr
 800c794:	ea40 000c 	orrcs.w	r0, r0, ip
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c79e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7a6:	bf22      	ittt	cs
 800c7a8:	1ab6      	subcs	r6, r6, r2
 800c7aa:	4675      	movcs	r5, lr
 800c7ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7be:	bf22      	ittt	cs
 800c7c0:	1ab6      	subcs	r6, r6, r2
 800c7c2:	4675      	movcs	r5, lr
 800c7c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7c8:	085b      	lsrs	r3, r3, #1
 800c7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7d6:	bf22      	ittt	cs
 800c7d8:	1ab6      	subcs	r6, r6, r2
 800c7da:	4675      	movcs	r5, lr
 800c7dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7e0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7e4:	d018      	beq.n	800c818 <__aeabi_ddiv+0x114>
 800c7e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c7f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c7fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c7fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c802:	d1c0      	bne.n	800c786 <__aeabi_ddiv+0x82>
 800c804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c808:	d10b      	bne.n	800c822 <__aeabi_ddiv+0x11e>
 800c80a:	ea41 0100 	orr.w	r1, r1, r0
 800c80e:	f04f 0000 	mov.w	r0, #0
 800c812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c816:	e7b6      	b.n	800c786 <__aeabi_ddiv+0x82>
 800c818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c81c:	bf04      	itt	eq
 800c81e:	4301      	orreq	r1, r0
 800c820:	2000      	moveq	r0, #0
 800c822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c826:	bf88      	it	hi
 800c828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c82c:	f63f aeaf 	bhi.w	800c58e <__aeabi_dmul+0xde>
 800c830:	ebb5 0c03 	subs.w	ip, r5, r3
 800c834:	bf04      	itt	eq
 800c836:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c83e:	f150 0000 	adcs.w	r0, r0, #0
 800c842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c84c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c854:	bfc2      	ittt	gt
 800c856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c85a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c85e:	bd70      	popgt	{r4, r5, r6, pc}
 800c860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c864:	f04f 0e00 	mov.w	lr, #0
 800c868:	3c01      	subs	r4, #1
 800c86a:	e690      	b.n	800c58e <__aeabi_dmul+0xde>
 800c86c:	ea45 0e06 	orr.w	lr, r5, r6
 800c870:	e68d      	b.n	800c58e <__aeabi_dmul+0xde>
 800c872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c876:	ea94 0f0c 	teq	r4, ip
 800c87a:	bf08      	it	eq
 800c87c:	ea95 0f0c 	teqeq	r5, ip
 800c880:	f43f af3b 	beq.w	800c6fa <__aeabi_dmul+0x24a>
 800c884:	ea94 0f0c 	teq	r4, ip
 800c888:	d10a      	bne.n	800c8a0 <__aeabi_ddiv+0x19c>
 800c88a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c88e:	f47f af34 	bne.w	800c6fa <__aeabi_dmul+0x24a>
 800c892:	ea95 0f0c 	teq	r5, ip
 800c896:	f47f af25 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c89a:	4610      	mov	r0, r2
 800c89c:	4619      	mov	r1, r3
 800c89e:	e72c      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8a0:	ea95 0f0c 	teq	r5, ip
 800c8a4:	d106      	bne.n	800c8b4 <__aeabi_ddiv+0x1b0>
 800c8a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8aa:	f43f aefd 	beq.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	e722      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8b8:	bf18      	it	ne
 800c8ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8be:	f47f aec5 	bne.w	800c64c <__aeabi_dmul+0x19c>
 800c8c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8c6:	f47f af0d 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c8ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8ce:	f47f aeeb 	bne.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8d2:	e712      	b.n	800c6fa <__aeabi_dmul+0x24a>
	...

0800c8e0 <__aeabi_d2f>:
 800c8e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c8e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800c8e8:	bf24      	itt	cs
 800c8ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800c8ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800c8f2:	d90d      	bls.n	800c910 <__aeabi_d2f+0x30>
 800c8f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800c8f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800c8fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800c900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800c904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800c908:	bf08      	it	eq
 800c90a:	f020 0001 	biceq.w	r0, r0, #1
 800c90e:	4770      	bx	lr
 800c910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800c914:	d121      	bne.n	800c95a <__aeabi_d2f+0x7a>
 800c916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800c91a:	bfbc      	itt	lt
 800c91c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800c920:	4770      	bxlt	lr
 800c922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c926:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800c92a:	f1c2 0218 	rsb	r2, r2, #24
 800c92e:	f1c2 0c20 	rsb	ip, r2, #32
 800c932:	fa10 f30c 	lsls.w	r3, r0, ip
 800c936:	fa20 f002 	lsr.w	r0, r0, r2
 800c93a:	bf18      	it	ne
 800c93c:	f040 0001 	orrne.w	r0, r0, #1
 800c940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800c948:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c94c:	ea40 000c 	orr.w	r0, r0, ip
 800c950:	fa23 f302 	lsr.w	r3, r3, r2
 800c954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c958:	e7cc      	b.n	800c8f4 <__aeabi_d2f+0x14>
 800c95a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800c95e:	d107      	bne.n	800c970 <__aeabi_d2f+0x90>
 800c960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800c964:	bf1e      	ittt	ne
 800c966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800c96a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800c96e:	4770      	bxne	lr
 800c970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800c974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800c978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop

0800c980 <memcpy>:
 800c980:	4684      	mov	ip, r0
 800c982:	ea41 0300 	orr.w	r3, r1, r0
 800c986:	f013 0303 	ands.w	r3, r3, #3
 800c98a:	d16d      	bne.n	800ca68 <memcpy+0xe8>
 800c98c:	3a40      	subs	r2, #64	; 0x40
 800c98e:	d341      	bcc.n	800ca14 <memcpy+0x94>
 800c990:	f851 3b04 	ldr.w	r3, [r1], #4
 800c994:	f840 3b04 	str.w	r3, [r0], #4
 800c998:	f851 3b04 	ldr.w	r3, [r1], #4
 800c99c:	f840 3b04 	str.w	r3, [r0], #4
 800c9a0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9a4:	f840 3b04 	str.w	r3, [r0], #4
 800c9a8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9ac:	f840 3b04 	str.w	r3, [r0], #4
 800c9b0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9b4:	f840 3b04 	str.w	r3, [r0], #4
 800c9b8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9bc:	f840 3b04 	str.w	r3, [r0], #4
 800c9c0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9c4:	f840 3b04 	str.w	r3, [r0], #4
 800c9c8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9cc:	f840 3b04 	str.w	r3, [r0], #4
 800c9d0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9d4:	f840 3b04 	str.w	r3, [r0], #4
 800c9d8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9dc:	f840 3b04 	str.w	r3, [r0], #4
 800c9e0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9e4:	f840 3b04 	str.w	r3, [r0], #4
 800c9e8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9ec:	f840 3b04 	str.w	r3, [r0], #4
 800c9f0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9f4:	f840 3b04 	str.w	r3, [r0], #4
 800c9f8:	f851 3b04 	ldr.w	r3, [r1], #4
 800c9fc:	f840 3b04 	str.w	r3, [r0], #4
 800ca00:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca04:	f840 3b04 	str.w	r3, [r0], #4
 800ca08:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca0c:	f840 3b04 	str.w	r3, [r0], #4
 800ca10:	3a40      	subs	r2, #64	; 0x40
 800ca12:	d2bd      	bcs.n	800c990 <memcpy+0x10>
 800ca14:	3230      	adds	r2, #48	; 0x30
 800ca16:	d311      	bcc.n	800ca3c <memcpy+0xbc>
 800ca18:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca1c:	f840 3b04 	str.w	r3, [r0], #4
 800ca20:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca24:	f840 3b04 	str.w	r3, [r0], #4
 800ca28:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca2c:	f840 3b04 	str.w	r3, [r0], #4
 800ca30:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca34:	f840 3b04 	str.w	r3, [r0], #4
 800ca38:	3a10      	subs	r2, #16
 800ca3a:	d2ed      	bcs.n	800ca18 <memcpy+0x98>
 800ca3c:	320c      	adds	r2, #12
 800ca3e:	d305      	bcc.n	800ca4c <memcpy+0xcc>
 800ca40:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca44:	f840 3b04 	str.w	r3, [r0], #4
 800ca48:	3a04      	subs	r2, #4
 800ca4a:	d2f9      	bcs.n	800ca40 <memcpy+0xc0>
 800ca4c:	3204      	adds	r2, #4
 800ca4e:	d008      	beq.n	800ca62 <memcpy+0xe2>
 800ca50:	07d2      	lsls	r2, r2, #31
 800ca52:	bf1c      	itt	ne
 800ca54:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800ca58:	f800 3b01 	strbne.w	r3, [r0], #1
 800ca5c:	d301      	bcc.n	800ca62 <memcpy+0xe2>
 800ca5e:	880b      	ldrh	r3, [r1, #0]
 800ca60:	8003      	strh	r3, [r0, #0]
 800ca62:	4660      	mov	r0, ip
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	2a08      	cmp	r2, #8
 800ca6a:	d313      	bcc.n	800ca94 <memcpy+0x114>
 800ca6c:	078b      	lsls	r3, r1, #30
 800ca6e:	d08d      	beq.n	800c98c <memcpy+0xc>
 800ca70:	f010 0303 	ands.w	r3, r0, #3
 800ca74:	d08a      	beq.n	800c98c <memcpy+0xc>
 800ca76:	f1c3 0304 	rsb	r3, r3, #4
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	07db      	lsls	r3, r3, #31
 800ca7e:	bf1c      	itt	ne
 800ca80:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800ca84:	f800 3b01 	strbne.w	r3, [r0], #1
 800ca88:	d380      	bcc.n	800c98c <memcpy+0xc>
 800ca8a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ca8e:	f820 3b02 	strh.w	r3, [r0], #2
 800ca92:	e77b      	b.n	800c98c <memcpy+0xc>
 800ca94:	3a04      	subs	r2, #4
 800ca96:	d3d9      	bcc.n	800ca4c <memcpy+0xcc>
 800ca98:	3a01      	subs	r2, #1
 800ca9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca9e:	f800 3b01 	strb.w	r3, [r0], #1
 800caa2:	d2f9      	bcs.n	800ca98 <memcpy+0x118>
 800caa4:	780b      	ldrb	r3, [r1, #0]
 800caa6:	7003      	strb	r3, [r0, #0]
 800caa8:	784b      	ldrb	r3, [r1, #1]
 800caaa:	7043      	strb	r3, [r0, #1]
 800caac:	788b      	ldrb	r3, [r1, #2]
 800caae:	7083      	strb	r3, [r0, #2]
 800cab0:	4660      	mov	r0, ip
 800cab2:	4770      	bx	lr
	...

0800cac0 <__core_init>:
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
	...

0800cad0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
	...

0800cae0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800cae0:	e7fe      	b.n	800cae0 <__default_exit>
 800cae2:	bf00      	nop
	...

0800caf0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800caf0:	e7fe      	b.n	800caf0 <_unhandled_exception>
 800caf2:	bf00      	nop
	...

0800cb00 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800cb00:	e7fe      	b.n	800cb00 <_idle_thread>
 800cb02:	bf00      	nop
	...

0800cb10 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cb10:	4b20      	ldr	r3, [pc, #128]	; (800cb94 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800cb12:	4a21      	ldr	r2, [pc, #132]	; (800cb98 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cb14:	4821      	ldr	r0, [pc, #132]	; (800cb9c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800cb16:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cb18:	2400      	movs	r4, #0
 800cb1a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cb1c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cb1e:	4e20      	ldr	r6, [pc, #128]	; (800cba0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cb20:	4d20      	ldr	r5, [pc, #128]	; (800cba4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800cb22:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800cb26:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 800cb28:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800cb2a:	60da      	str	r2, [r3, #12]
 800cb2c:	68f2      	ldr	r2, [r6, #12]
 800cb2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cb32:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cb34:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800cb36:	2120      	movs	r1, #32
 800cb38:	f042 0201 	orr.w	r2, r2, #1
 800cb3c:	2610      	movs	r6, #16
 800cb3e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800cb40:	b083      	sub	sp, #12
 800cb42:	77de      	strb	r6, [r3, #31]
 800cb44:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 800cb48:	f000 f8fa 	bl	800cd40 <_scheduler_init>
  _vt_init();
 800cb4c:	f000 f878 	bl	800cc40 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800cb50:	f000 fb1e 	bl	800d190 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800cb54:	f000 fd3c 	bl	800d5d0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800cb58:	f000 fd72 	bl	800d640 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	2140      	movs	r1, #64	; 0x40
 800cb60:	f000 f9fe 	bl	800cf60 <_thread_init>
 800cb64:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800cb68:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cb6a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800cb6c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cb6e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800cb72:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	490c      	ldr	r1, [pc, #48]	; (800cba8 <chSysInit+0x98>)
 800cb78:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800cb7a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800cb7e:	9400      	str	r4, [sp, #0]
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <chSysInit+0x9c>)
 800cb82:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800cb86:	f000 fa13 	bl	800cfb0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800cb8a:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <chSysInit+0xa0>)
 800cb8c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800cb8e:	b003      	add	sp, #12
 800cb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb92:	bf00      	nop
 800cb94:	e000ed00 	.word	0xe000ed00
 800cb98:	05fa0300 	.word	0x05fa0300
 800cb9c:	e0001000 	.word	0xe0001000
 800cba0:	e000edf0 	.word	0xe000edf0
 800cba4:	20000ca0 	.word	0x20000ca0
 800cba8:	08012960 	.word	0x08012960
 800cbac:	0800cb01 	.word	0x0800cb01
 800cbb0:	08012950 	.word	0x08012950
	...

0800cbc0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800cbc2:	4d13      	ldr	r5, [pc, #76]	; (800cc10 <chSysTimerHandlerI+0x50>)
 800cbc4:	69aa      	ldr	r2, [r5, #24]
 800cbc6:	7fd3      	ldrb	r3, [r2, #31]
 800cbc8:	b10b      	cbz	r3, 800cbce <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800cbce:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cbd0:	69eb      	ldr	r3, [r5, #28]
 800cbd2:	4e10      	ldr	r6, [pc, #64]	; (800cc14 <chSysTimerHandlerI+0x54>)
 800cbd4:	3101      	adds	r1, #1
 800cbd6:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800cbd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cbda:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800cbdc:	f102 0201 	add.w	r2, r2, #1
 800cbe0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cbe2:	d013      	beq.n	800cc0c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800cbe4:	689c      	ldr	r4, [r3, #8]
 800cbe6:	3c01      	subs	r4, #1
 800cbe8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cbea:	b97c      	cbnz	r4, 800cc0c <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cbec:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cbee:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800cbf0:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800cbf2:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cbf4:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800cbf6:	61ea      	str	r2, [r5, #28]
 800cbf8:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800cbfc:	6918      	ldr	r0, [r3, #16]
 800cbfe:	4788      	blx	r1
 800cc00:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cc04:	69eb      	ldr	r3, [r5, #28]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	d0f0      	beq.n	800cbee <chSysTimerHandlerI+0x2e>
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000c70 	.word	0x20000c70
 800cc14:	20000c8c 	.word	0x20000c8c
	...

0800cc20 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800cc20:	4a03      	ldr	r2, [pc, #12]	; (800cc30 <chSysPolledDelayX+0x10>)
 800cc22:	6851      	ldr	r1, [r2, #4]
 800cc24:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800cc26:	1a5b      	subs	r3, r3, r1
 800cc28:	4283      	cmp	r3, r0
 800cc2a:	d3fb      	bcc.n	800cc24 <chSysPolledDelayX+0x4>
  }
}
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	e0001000 	.word	0xe0001000
	...

0800cc40 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cc40:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc42:	f04f 30ff 	mov.w	r0, #4294967295
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cc46:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cc4a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc4c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cc4e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cc50:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cc52:	621a      	str	r2, [r3, #32]
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	20000c70 	.word	0x20000c70
 800cc5c:	00000000 	.word	0x00000000

0800cc60 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800cc60:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800cc62:	4e0d      	ldr	r6, [pc, #52]	; (800cc98 <chVTDoSetI+0x38>)
 800cc64:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800cc66:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800cc68:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cc6a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800cc6c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cc6e:	d904      	bls.n	800cc7a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800cc70:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800cc72:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cc74:	68a5      	ldr	r5, [r4, #8]
 800cc76:	428d      	cmp	r5, r1
 800cc78:	d3fa      	bcc.n	800cc70 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800cc7e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800cc80:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800cc82:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800cc84:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cc86:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc88:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cc8c:	1a59      	subs	r1, r3, r1
 800cc8e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cc90:	6272      	str	r2, [r6, #36]	; 0x24
}
 800cc92:	bc70      	pop	{r4, r5, r6}
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	20000c70 	.word	0x20000c70
 800cc9c:	00000000 	.word	0x00000000

0800cca0 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cca0:	6803      	ldr	r3, [r0, #0]
 800cca2:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800cca4:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800cca6:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cca8:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ccaa:	4c06      	ldr	r4, [pc, #24]	; (800ccc4 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800ccac:	442a      	add	r2, r5
 800ccae:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800ccb0:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800ccb2:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800ccb4:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800ccba:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800ccbc:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ccbe:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800ccc0:	bc30      	pop	{r4, r5}
 800ccc2:	4770      	bx	lr
 800ccc4:	20000c70 	.word	0x20000c70
	...

0800ccd0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800ccd0:	b410      	push	{r4}
 800ccd2:	2320      	movs	r3, #32
 800ccd4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800ccd8:	7f03      	ldrb	r3, [r0, #28]
 800ccda:	2b07      	cmp	r3, #7
 800ccdc:	d80e      	bhi.n	800ccfc <wakeup+0x2c>
 800ccde:	e8df f003 	tbb	[pc, r3]
 800cce2:	0d27      	.short	0x0d27
 800cce4:	0408230d 	.word	0x0408230d
 800cce8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800ccea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800ccec:	6893      	ldr	r3, [r2, #8]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800ccf2:	e890 000c 	ldmia.w	r0, {r2, r3}
 800ccf6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800ccf8:	6802      	ldr	r2, [r0, #0]
 800ccfa:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800ccfc:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd00:	2200      	movs	r2, #0
 800cd02:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cd04:	4b0d      	ldr	r3, [pc, #52]	; (800cd3c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800cd06:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd08:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cd0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cd0c:	689a      	ldr	r2, [r3, #8]
 800cd0e:	428a      	cmp	r2, r1
 800cd10:	d2fb      	bcs.n	800cd0a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cd16:	6003      	str	r3, [r0, #0]
 800cd18:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cd1a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800cd1c:	6058      	str	r0, [r3, #4]
 800cd1e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cd22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd26:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800cd28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
    break;
 800cd2e:	e7e5      	b.n	800ccfc <wakeup+0x2c>
 800cd30:	2300      	movs	r3, #0
 800cd32:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	20000c70 	.word	0x20000c70

0800cd40 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cd40:	4b03      	ldr	r3, [pc, #12]	; (800cd50 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800cd42:	2200      	movs	r2, #0
 800cd44:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800cd46:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800cd48:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800cd4a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800cd4c:	609a      	str	r2, [r3, #8]
 800cd4e:	4770      	bx	lr
 800cd50:	20000c70 	.word	0x20000c70
	...

0800cd60 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd60:	2200      	movs	r2, #0
 800cd62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800cd66:	b410      	push	{r4}
 800cd68:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd6a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cd6c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	428a      	cmp	r2, r1
 800cd72:	d2fb      	bcs.n	800cd6c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cd74:	685a      	ldr	r2, [r3, #4]
 800cd76:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cd78:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800cd7a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cd7c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800cd7e:	605c      	str	r4, [r3, #4]

  return tp;
}
 800cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	20000c70 	.word	0x20000c70
 800cd8c:	00000000 	.word	0x00000000

0800cd90 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800cd90:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <chSchGoSleepS+0x24>)
 800cd92:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cd94:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800cd96:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800cd98:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cd9a:	2004      	movs	r0, #4
 800cd9c:	77c8      	strb	r0, [r1, #31]

  tqp->p_next = tp->p_next;
 800cd9e:	6810      	ldr	r0, [r2, #0]
 800cda0:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cda2:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cda4:	6043      	str	r3, [r0, #4]
 800cda6:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800cda8:	4610      	mov	r0, r2
}
 800cdaa:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800cdae:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800cdb0:	f7ff b9ae 	b.w	800c110 <_port_switch>
 800cdb4:	20000c70 	.word	0x20000c70
	...

0800cdc0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800cdc0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800cdc2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800cdc4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800cdc6:	d012      	beq.n	800cdee <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800cdc8:	4c0c      	ldr	r4, [pc, #48]	; (800cdfc <chSchGoSleepTimeoutS+0x3c>)
 800cdca:	4a0d      	ldr	r2, [pc, #52]	; (800ce00 <chSchGoSleepTimeoutS+0x40>)
 800cdcc:	69a3      	ldr	r3, [r4, #24]
 800cdce:	4605      	mov	r5, r0
 800cdd0:	a801      	add	r0, sp, #4
 800cdd2:	f7ff ff45 	bl	800cc60 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f7ff ffda 	bl	800cd90 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800cddc:	9b04      	ldr	r3, [sp, #16]
 800cdde:	b113      	cbz	r3, 800cde6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800cde0:	a801      	add	r0, sp, #4
 800cde2:	f7ff ff5d 	bl	800cca0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800cde6:	69a3      	ldr	r3, [r4, #24]
}
 800cde8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cdea:	b007      	add	sp, #28
 800cdec:	bd30      	pop	{r4, r5, pc}
 800cdee:	4c03      	ldr	r4, [pc, #12]	; (800cdfc <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800cdf0:	f7ff ffce 	bl	800cd90 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800cdf4:	69a3      	ldr	r3, [r4, #24]
}
 800cdf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cdf8:	b007      	add	sp, #28
 800cdfa:	bd30      	pop	{r4, r5, pc}
 800cdfc:	20000c70 	.word	0x20000c70
 800ce00:	0800ccd1 	.word	0x0800ccd1
	...

0800ce10 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce10:	4b14      	ldr	r3, [pc, #80]	; (800ce64 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800ce12:	b470      	push	{r4, r5, r6}
 800ce14:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce16:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800ce18:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce1a:	68a8      	ldr	r0, [r5, #8]
 800ce1c:	68a1      	ldr	r1, [r4, #8]
 800ce1e:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ce20:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800ce24:	d80b      	bhi.n	800ce3e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ce26:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800ce28:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	4291      	cmp	r1, r2
 800ce2e:	d9fb      	bls.n	800ce28 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800ce34:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ce36:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800ce38:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800ce3a:	bc70      	pop	{r4, r5, r6}
 800ce3c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ce3e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800ce40:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 800ce42:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ce44:	6891      	ldr	r1, [r2, #8]
 800ce46:	4288      	cmp	r0, r1
 800ce48:	d9fb      	bls.n	800ce42 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800ce4a:	6850      	ldr	r0, [r2, #4]
 800ce4c:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800ce4e:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800ce50:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ce52:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 800ce54:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800ce56:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 800ce58:	4629      	mov	r1, r5
 800ce5a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800ce5c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800ce5e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800ce60:	f7ff b956 	b.w	800c110 <_port_switch>
 800ce64:	20000c70 	.word	0x20000c70
	...

0800ce70 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ce70:	4b08      	ldr	r3, [pc, #32]	; (800ce94 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800ce72:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ce74:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ce76:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800ce78:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800ce7a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ce7c:	b921      	cbnz	r1, 800ce88 <chSchIsPreemptionRequired+0x18>
 800ce7e:	4283      	cmp	r3, r0
 800ce80:	bf34      	ite	cc
 800ce82:	2000      	movcc	r0, #0
 800ce84:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800ce86:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800ce88:	4283      	cmp	r3, r0
 800ce8a:	bf94      	ite	ls
 800ce8c:	2000      	movls	r0, #0
 800ce8e:	2001      	movhi	r0, #1
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	20000c70 	.word	0x20000c70
	...

0800cea0 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800cea0:	4a0e      	ldr	r2, [pc, #56]	; (800cedc <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cea2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800cea4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 800cea6:	b470      	push	{r4, r5, r6}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cea8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800ceaa:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ceac:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ceae:	2604      	movs	r6, #4
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ceb0:	7701      	strb	r1, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800ceb2:	2500      	movs	r5, #0
 800ceb4:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800ceb6:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800ceb8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ceba:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cebc:	7725      	strb	r5, [r4, #28]
 800cebe:	e000      	b.n	800cec2 <chSchDoRescheduleBehind+0x22>
 800cec0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	428a      	cmp	r2, r1
 800cec6:	d2fb      	bcs.n	800cec0 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cecc:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800cece:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800ced0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800ced2:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800ced4:	bc70      	pop	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800ced6:	f7ff b91b 	b.w	800c110 <_port_switch>
 800ceda:	bf00      	nop
 800cedc:	20000c70 	.word	0x20000c70

0800cee0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800cee0:	4a0d      	ldr	r2, [pc, #52]	; (800cf18 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cee2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800cee4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 800cee6:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cee8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800ceea:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ceec:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800ceee:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cef0:	7701      	strb	r1, [r0, #28]
 800cef2:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800cef4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800cef6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800cef8:	7725      	strb	r5, [r4, #28]
 800cefa:	e000      	b.n	800cefe <chSchDoRescheduleAhead+0x1e>
 800cefc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	428a      	cmp	r2, r1
 800cf02:	d8fb      	bhi.n	800cefc <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800cf08:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800cf0a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800cf0c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800cf0e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 800cf10:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800cf12:	f7ff b8fd 	b.w	800c110 <_port_switch>
 800cf16:	bf00      	nop
 800cf18:	20000c70 	.word	0x20000c70
 800cf1c:	00000000 	.word	0x00000000

0800cf20 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800cf20:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <chSchRescheduleS+0x14>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 800cf26:	6892      	ldr	r2, [r2, #8]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d800      	bhi.n	800cf30 <chSchRescheduleS+0x10>
 800cf2e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800cf30:	f7ff bfd6 	b.w	800cee0 <chSchDoRescheduleAhead>
 800cf34:	20000c70 	.word	0x20000c70
	...

0800cf40 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800cf40:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <chSchDoReschedule+0x10>)
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	7fdb      	ldrb	r3, [r3, #31]
 800cf46:	b10b      	cbz	r3, 800cf4c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800cf48:	f7ff bfca 	b.w	800cee0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800cf4c:	f7ff bfa8 	b.w	800cea0 <chSchDoRescheduleBehind>
 800cf50:	20000c70 	.word	0x20000c70
	...

0800cf60 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf62:	4c0f      	ldr	r4, [pc, #60]	; (800cfa0 <_thread_init+0x40>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800cf64:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf66:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800cf68:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800cf6a:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cf6c:	2200      	movs	r2, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cf6e:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800cf70:	f100 012c 	add.w	r1, r0, #44	; 0x2c

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cf74:	f04f 0e04 	mov.w	lr, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cf78:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800cf7a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf7e:	6145      	str	r5, [r0, #20]
 800cf80:	6104      	str	r4, [r0, #16]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cf82:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cf86:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cf88:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800cf8a:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800cf8c:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800cf8e:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800cf90:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800cf92:	6128      	str	r0, [r5, #16]
 800cf94:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800cf96:	6286      	str	r6, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cf98:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800cf9a:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800cf9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20000c70 	.word	0x20000c70
	...

0800cfb0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	461d      	mov	r5, r3
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	2320      	movs	r3, #32
 800cfb8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfbc:	3964      	subs	r1, #100	; 0x64
 800cfbe:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cfc0:	4e13      	ldr	r6, [pc, #76]	; (800d010 <chThdCreateStatic+0x60>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfc2:	4b14      	ldr	r3, [pc, #80]	; (800d014 <chThdCreateStatic+0x64>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cfc4:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cfc6:	60c1      	str	r1, [r0, #12]
 800cfc8:	640d      	str	r5, [r1, #64]	; 0x40
 800cfca:	9d06      	ldr	r5, [sp, #24]
 800cfcc:	644d      	str	r5, [r1, #68]	; 0x44
 800cfce:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cfd0:	2502      	movs	r5, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cfd2:	2304      	movs	r3, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800cfd4:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800cfd6:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cfd8:	7705      	strb	r5, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cfda:	77c3      	strb	r3, [r0, #31]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cfdc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800cfde:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800cfe2:	f100 0228 	add.w	r2, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cfea:	6106      	str	r6, [r0, #16]
 800cfec:	6147      	str	r7, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cfee:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800cff0:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800cff2:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800cff4:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800cff6:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800cff8:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cffa:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800cffc:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cffe:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800d000:	6303      	str	r3, [r0, #48]	; 0x30
 800d002:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d004:	f7ff ff04 	bl	800ce10 <chSchWakeupS>
 800d008:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800d00c:	4620      	mov	r0, r4
 800d00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d010:	20000c70 	.word	0x20000c70
 800d014:	0800c129 	.word	0x0800c129
	...

0800d020 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800d020:	b508      	push	{r3, lr}
 800d022:	4601      	mov	r1, r0
 800d024:	2320      	movs	r3, #32
 800d026:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800d02a:	2008      	movs	r0, #8
 800d02c:	f7ff fec8 	bl	800cdc0 <chSchGoSleepTimeoutS>
 800d030:	2300      	movs	r3, #0
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	bd08      	pop	{r3, pc}
	...

0800d040 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800d040:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800d042:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <chThdExitS+0x3c>)
 800d044:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d046:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800d048:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d04a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800d04e:	429d      	cmp	r5, r3
 800d050:	d007      	beq.n	800d062 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff fe82 	bl	800cd60 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d05c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d05e:	42ab      	cmp	r3, r5
 800d060:	d1f7      	bne.n	800d052 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800d062:	7f63      	ldrb	r3, [r4, #29]
 800d064:	079b      	lsls	r3, r3, #30
 800d066:	d104      	bne.n	800d072 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800d068:	6963      	ldr	r3, [r4, #20]
 800d06a:	6922      	ldr	r2, [r4, #16]
 800d06c:	611a      	str	r2, [r3, #16]
 800d06e:	6922      	ldr	r2, [r4, #16]
 800d070:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d072:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800d074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d078:	f7ff be8a 	b.w	800cd90 <chSchGoSleepS>
 800d07c:	20000c70 	.word	0x20000c70

0800d080 <chThdExit>:
 800d080:	2320      	movs	r3, #32
 800d082:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800d086:	f7ff bfdb 	b.w	800d040 <chThdExitS>
 800d08a:	bf00      	nop
 800d08c:	0000      	movs	r0, r0
	...

0800d090 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800d090:	6803      	ldr	r3, [r0, #0]
 800d092:	b12b      	cbz	r3, 800d0a0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800d094:	2200      	movs	r2, #0
 800d096:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800d098:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800d09a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d09c:	f7ff be60 	b.w	800cd60 <chSchReadyI>
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
	...

0800d0b0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800d0b0:	b169      	cbz	r1, 800d0ce <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d0b2:	4b08      	ldr	r3, [pc, #32]	; (800d0d4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800d0b4:	b410      	push	{r4}
 800d0b6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800d0b8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d0ba:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d0bc:	2004      	movs	r0, #4
 800d0be:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800d0c2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800d0c4:	6053      	str	r3, [r2, #4]
}
 800d0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d0ca:	f7ff be79 	b.w	800cdc0 <chSchGoSleepTimeoutS>
}
 800d0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d2:	4770      	bx	lr
 800d0d4:	20000c70 	.word	0x20000c70
	...

0800d0e0 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d0e0:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800d0e2:	4290      	cmp	r0, r2
 800d0e4:	d00a      	beq.n	800d0fc <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800d0e6:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d0e8:	6814      	ldr	r4, [r2, #0]
 800d0ea:	6004      	str	r4, [r0, #0]
 800d0ec:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d0ee:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800d0f0:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d0f2:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800d0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0f8:	f7ff be32 	b.w	800cd60 <chSchReadyI>
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop

0800d100 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d100:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d102:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800d104:	4298      	cmp	r0, r3
 800d106:	d00b      	beq.n	800d120 <chThdDequeueAllI+0x20>
 800d108:	4604      	mov	r4, r0
 800d10a:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	6022      	str	r2, [r4, #0]
 800d110:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d112:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800d114:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d116:	f7ff fe23 	bl	800cd60 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	429c      	cmp	r4, r3
 800d11e:	d1f5      	bne.n	800d10c <chThdDequeueAllI+0xc>
 800d120:	bd38      	pop	{r3, r4, r5, pc}
 800d122:	bf00      	nop
	...

0800d130 <chTMStartMeasurementX>:
 800d130:	4b01      	ldr	r3, [pc, #4]	; (800d138 <chTMStartMeasurementX+0x8>)
 800d132:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800d134:	6083      	str	r3, [r0, #8]
 800d136:	4770      	bx	lr
 800d138:	e0001000 	.word	0xe0001000
 800d13c:	00000000 	.word	0x00000000

0800d140 <chTMStopMeasurementX>:
 800d140:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d142:	4910      	ldr	r1, [pc, #64]	; (800d184 <chTMStopMeasurementX+0x44>)
 800d144:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d146:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800d148:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d14a:	6f8f      	ldr	r7, [r1, #120]	; 0x78

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d14c:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d14e:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800d150:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800d158:	18e4      	adds	r4, r4, r3
 800d15a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d15e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d160:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d162:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800d164:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800d166:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d16a:	d805      	bhi.n	800d178 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800d16c:	6802      	ldr	r2, [r0, #0]
 800d16e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800d170:	bf38      	it	cc
 800d172:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d174:	bcf0      	pop	{r4, r5, r6, r7}
 800d176:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800d178:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d17a:	bcf0      	pop	{r4, r5, r6, r7}
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	e0001000 	.word	0xe0001000
 800d184:	20000c70 	.word	0x20000c70
	...

0800d190 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d190:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d192:	4c0c      	ldr	r4, [pc, #48]	; (800d1c4 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d194:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d196:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d198:	f04f 32ff 	mov.w	r2, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d19c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d19e:	2600      	movs	r6, #0
 800d1a0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d1a2:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800d1a4:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800d1a6:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800d1a8:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d1aa:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d1ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d1b0:	f7ff ffbe 	bl	800d130 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800d1b4:	4668      	mov	r0, sp
 800d1b6:	f7ff ffc3 	bl	800d140 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800d1ba:	9b02      	ldr	r3, [sp, #8]
 800d1bc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d1be:	b006      	add	sp, #24
 800d1c0:	bdd0      	pop	{r4, r6, r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20000c70 	.word	0x20000c70
	...

0800d1d0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800d1d0:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d1d2:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d1d4:	6040      	str	r0, [r0, #4]
 800d1d6:	6083      	str	r3, [r0, #8]
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	0000      	movs	r0, r0
	...

0800d1e0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 800d1e0:	b430      	push	{r4, r5}
 800d1e2:	2420      	movs	r4, #32
 800d1e4:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 800d1e8:	4d06      	ldr	r5, [pc, #24]	; (800d204 <chEvtRegisterMaskWithFlags+0x24>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800d1ea:	6804      	ldr	r4, [r0, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 800d1ec:	69ad      	ldr	r5, [r5, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800d1ee:	600c      	str	r4, [r1, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800d1f0:	2400      	movs	r4, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800d1f2:	6001      	str	r1, [r0, #0]
  elp->el_listener = currp;
 800d1f4:	604d      	str	r5, [r1, #4]
  elp->el_events   = events;
 800d1f6:	608a      	str	r2, [r1, #8]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 800d1f8:	610b      	str	r3, [r1, #16]
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800d1fa:	60cc      	str	r4, [r1, #12]
 800d1fc:	f384 8811 	msr	BASEPRI, r4
  elp->el_wflags   = wflags;
  chSysUnlock();
}
 800d200:	bc30      	pop	{r4, r5}
 800d202:	4770      	bx	lr
 800d204:	20000c70 	.word	0x20000c70
	...

0800d210 <chEvtUnregister>:
 800d210:	2320      	movs	r3, #32
 800d212:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 800d216:	4602      	mov	r2, r0
 800d218:	e002      	b.n	800d220 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 800d21a:	428b      	cmp	r3, r1
 800d21c:	d007      	beq.n	800d22e <chEvtUnregister+0x1e>
 800d21e:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 800d220:	6813      	ldr	r3, [r2, #0]
 800d222:	4298      	cmp	r0, r3
 800d224:	d1f9      	bne.n	800d21a <chEvtUnregister+0xa>
 800d226:	2300      	movs	r3, #0
 800d228:	f383 8811 	msr	BASEPRI, r3
 800d22c:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 800d22e:	680b      	ldr	r3, [r1, #0]
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	2300      	movs	r3, #0
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	0000      	movs	r0, r0
	...

0800d240 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d240:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d242:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d244:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d246:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d248:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d24a:	d009      	beq.n	800d260 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d24c:	2a0b      	cmp	r2, #11
 800d24e:	d000      	beq.n	800d252 <chEvtSignalI+0x12>
 800d250:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800d252:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800d254:	438b      	bics	r3, r1
 800d256:	d1fb      	bne.n	800d250 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800d258:	2300      	movs	r3, #0
 800d25a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d25c:	f7ff bd80 	b.w	800cd60 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d260:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d262:	4219      	tst	r1, r3
 800d264:	d1f8      	bne.n	800d258 <chEvtSignalI+0x18>
 800d266:	4770      	bx	lr
	...

0800d270 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d270:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800d272:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d274:	42a0      	cmp	r0, r4
 800d276:	d00f      	beq.n	800d298 <chEvtBroadcastFlagsI+0x28>
 800d278:	4606      	mov	r6, r0
 800d27a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800d27c:	68e3      	ldr	r3, [r4, #12]
 800d27e:	432b      	orrs	r3, r5
 800d280:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800d282:	b115      	cbz	r5, 800d28a <chEvtBroadcastFlagsI+0x1a>
 800d284:	6922      	ldr	r2, [r4, #16]
 800d286:	4213      	tst	r3, r2
 800d288:	d003      	beq.n	800d292 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800d28a:	68a1      	ldr	r1, [r4, #8]
 800d28c:	6860      	ldr	r0, [r4, #4]
 800d28e:	f7ff ffd7 	bl	800d240 <chEvtSignalI>
    }
    elp = elp->el_next;
 800d292:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d294:	42a6      	cmp	r6, r4
 800d296:	d1f1      	bne.n	800d27c <chEvtBroadcastFlagsI+0xc>
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	bf00      	nop
 800d29c:	0000      	movs	r0, r0
	...

0800d2a0 <chEvtSignal>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @api
 */
void chEvtSignal(thread_t *tp, eventmask_t events) {
 800d2a0:	b508      	push	{r3, lr}
 800d2a2:	2320      	movs	r3, #32
 800d2a4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 800d2a8:	f7ff ffca 	bl	800d240 <chEvtSignalI>
  chSchRescheduleS();
 800d2ac:	f7ff fe38 	bl	800cf20 <chSchRescheduleS>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	bd08      	pop	{r3, pc}
	...

0800d2c0 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800d2c0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800d2c2:	4b0c      	ldr	r3, [pc, #48]	; (800d2f4 <chEvtWaitAny+0x34>)
 800d2c4:	699d      	ldr	r5, [r3, #24]
 800d2c6:	2320      	movs	r3, #32
 800d2c8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800d2cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800d2ce:	ea13 0400 	ands.w	r4, r3, r0
 800d2d2:	d106      	bne.n	800d2e2 <chEvtWaitAny+0x22>
 800d2d4:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 800d2d6:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800d2d8:	200a      	movs	r0, #10
 800d2da:	f7ff fd59 	bl	800cd90 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800d2de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d2e0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 800d2e2:	ea23 0304 	bic.w	r3, r3, r4
 800d2e6:	63ab      	str	r3, [r5, #56]	; 0x38
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	bd38      	pop	{r3, r4, r5, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20000c70 	.word	0x20000c70
	...

0800d300 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800d300:	4b12      	ldr	r3, [pc, #72]	; (800d34c <chEvtWaitAnyTimeout+0x4c>)
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
 800d302:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800d304:	699e      	ldr	r6, [r3, #24]
 800d306:	2320      	movs	r3, #32
 800d308:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800d30c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800d30e:	ea13 0400 	ands.w	r4, r3, r0
 800d312:	d10e      	bne.n	800d332 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 800d314:	b919      	cbnz	r1, 800d31e <chEvtWaitAnyTimeout+0x1e>
 800d316:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 800d31a:	4608      	mov	r0, r1
 800d31c:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 800d31e:	6270      	str	r0, [r6, #36]	; 0x24
 800d320:	4605      	mov	r5, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 800d322:	200a      	movs	r0, #10
 800d324:	f7ff fd4c 	bl	800cdc0 <chSchGoSleepTimeoutS>
 800d328:	2800      	cmp	r0, #0
 800d32a:	db0a      	blt.n	800d342 <chEvtWaitAnyTimeout+0x42>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800d32c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800d32e:	ea05 0403 	and.w	r4, r5, r3
  }
  ctp->p_epending &= ~m;
 800d332:	ea23 0304 	bic.w	r3, r3, r4
 800d336:	63b3      	str	r3, [r6, #56]	; 0x38
 800d338:	2300      	movs	r3, #0
 800d33a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
 800d33e:	4620      	mov	r0, r4
}
 800d340:	bd70      	pop	{r4, r5, r6, pc}
 800d342:	f384 8811 	msr	BASEPRI, r4
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 800d346:	4620      	mov	r0, r4
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	bf00      	nop
 800d34c:	20000c70 	.word	0x20000c70

0800d350 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800d350:	b430      	push	{r4, r5}
 800d352:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800d354:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d356:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d358:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d35a:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d35c:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d35e:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d360:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800d362:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 800d364:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 800d366:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800d368:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800d36a:	bc30      	pop	{r4, r5}
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop

0800d370 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800d370:	6943      	ldr	r3, [r0, #20]
 800d372:	6982      	ldr	r2, [r0, #24]
 800d374:	4293      	cmp	r3, r2
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 800d376:	b510      	push	{r4, lr}
 800d378:	d010      	beq.n	800d39c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800d37a:	6882      	ldr	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800d37c:	1c5c      	adds	r4, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800d37e:	3201      	adds	r2, #1
 800d380:	6082      	str	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800d382:	6144      	str	r4, [r0, #20]
 800d384:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800d386:	6942      	ldr	r2, [r0, #20]
 800d388:	6903      	ldr	r3, [r0, #16]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d301      	bcc.n	800d392 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 800d38e:	68c3      	ldr	r3, [r0, #12]
 800d390:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 800d392:	2100      	movs	r1, #0
 800d394:	f7ff fea4 	bl	800d0e0 <chThdDequeueNextI>

  return Q_OK;
 800d398:	2000      	movs	r0, #0
 800d39a:	bd10      	pop	{r4, pc}
 800d39c:	6882      	ldr	r2, [r0, #8]
 800d39e:	2a00      	cmp	r2, #0
 800d3a0:	d0eb      	beq.n	800d37a <chIQPutI+0xa>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 800d3a2:	f06f 0003 	mvn.w	r0, #3
 800d3a6:	bd10      	pop	{r4, pc}
	...

0800d3b0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	2320      	movs	r3, #32
 800d3b4:	460e      	mov	r6, r1
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800d3bc:	69c3      	ldr	r3, [r0, #28]
 800d3be:	b12b      	cbz	r3, 800d3cc <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800d3c0:	4798      	blx	r3
 800d3c2:	e003      	b.n	800d3cc <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d3c4:	f7ff fe74 	bl	800d0b0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	db15      	blt.n	800d3f8 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800d3cc:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 800d3d2:	2d00      	cmp	r5, #0
 800d3d4:	d0f6      	beq.n	800d3c4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d3d6:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d3d8:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800d3da:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d3dc:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d3de:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800d3e0:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d3e2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800d3e4:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800d3e6:	bf28      	it	cs
 800d3e8:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d3ea:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800d3ec:	bf28      	it	cs
 800d3ee:	61a3      	strcs	r3, [r4, #24]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800d3fc:	bd70      	pop	{r4, r5, r6, pc}
 800d3fe:	bf00      	nop

0800d400 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	4604      	mov	r4, r0
 800d406:	b083      	sub	sp, #12
 800d408:	4689      	mov	r9, r1
 800d40a:	4693      	mov	fp, r2
 800d40c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800d40e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d412:	2720      	movs	r7, #32
 800d414:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800d418:	2600      	movs	r6, #0
 800d41a:	9701      	str	r7, [sp, #4]
 800d41c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800d41e:	f1b8 0f00 	cmp.w	r8, #0
 800d422:	d005      	beq.n	800d430 <chIQReadTimeout+0x30>
      nfy(iqp);
 800d424:	4620      	mov	r0, r4
 800d426:	47c0      	blx	r8
 800d428:	e002      	b.n	800d430 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800d42a:	f7ff fe41 	bl	800d0b0 <chThdEnqueueTimeoutS>
 800d42e:	b9e0      	cbnz	r0, 800d46a <chIQReadTimeout+0x6a>
 800d430:	68a7      	ldr	r7, [r4, #8]
 800d432:	4629      	mov	r1, r5
 800d434:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800d436:	2f00      	cmp	r7, #0
 800d438:	d0f7      	beq.n	800d42a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800d43a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d43c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d43e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d440:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800d442:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d444:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d446:	7813      	ldrb	r3, [r2, #0]
 800d448:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	69a2      	ldr	r2, [r4, #24]
 800d450:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800d452:	bf24      	itt	cs
 800d454:	68e3      	ldrcs	r3, [r4, #12]
 800d456:	61a3      	strcs	r3, [r4, #24]
 800d458:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800d45c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800d45e:	45b3      	cmp	fp, r6
 800d460:	d005      	beq.n	800d46e <chIQReadTimeout+0x6e>
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	e7d9      	b.n	800d41e <chIQReadTimeout+0x1e>
 800d46a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800d46e:	4630      	mov	r0, r6
 800d470:	b003      	add	sp, #12
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	bf00      	nop
	...

0800d480 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800d480:	b430      	push	{r4, r5}
 800d482:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800d484:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800d486:	188d      	adds	r5, r1, r2
 800d488:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d48a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d48c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800d48e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 800d490:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 800d492:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800d494:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800d496:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 800d498:	bc30      	pop	{r4, r5}
 800d49a:	4770      	bx	lr
 800d49c:	0000      	movs	r0, r0
	...

0800d4a0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	4616      	mov	r6, r2
 800d4a8:	2320      	movs	r3, #32
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	e003      	b.n	800d4b8 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d4b0:	f7ff fdfe 	bl	800d0b0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	db19      	blt.n	800d4ec <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d4b8:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800d4be:	2d00      	cmp	r5, #0
 800d4c0:	d0f6      	beq.n	800d4b0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800d4c2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d4c4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d4c6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d4c8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800d4ca:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d4cc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d4ce:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800d4d0:	6923      	ldr	r3, [r4, #16]
 800d4d2:	6962      	ldr	r2, [r4, #20]
 800d4d4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800d4d6:	bf24      	itt	cs
 800d4d8:	68e3      	ldrcs	r3, [r4, #12]
 800d4da:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800d4dc:	69e3      	ldr	r3, [r4, #28]
 800d4de:	b10b      	cbz	r3, 800d4e4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4798      	blx	r3
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800d4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f2:	bf00      	nop
	...

0800d500 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 800d500:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800d502:	6942      	ldr	r2, [r0, #20]
 800d504:	6983      	ldr	r3, [r0, #24]
 800d506:	429a      	cmp	r2, r3
 800d508:	d00f      	beq.n	800d52a <chOQGetI+0x2a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800d50a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800d50c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800d50e:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800d510:	3201      	adds	r2, #1
 800d512:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 800d514:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 800d516:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800d518:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800d51a:	d301      	bcc.n	800d520 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 800d51c:	68c3      	ldr	r3, [r0, #12]
 800d51e:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 800d520:	2100      	movs	r1, #0
 800d522:	f7ff fddd 	bl	800d0e0 <chThdDequeueNextI>

  return (msg_t)b;
 800d526:	4620      	mov	r0, r4
 800d528:	bd38      	pop	{r3, r4, r5, pc}
 800d52a:	6882      	ldr	r2, [r0, #8]
 800d52c:	2a00      	cmp	r2, #0
 800d52e:	d0ec      	beq.n	800d50a <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 800d530:	f06f 0002 	mvn.w	r0, #2
 800d534:	bd38      	pop	{r3, r4, r5, pc}
 800d536:	bf00      	nop
	...

0800d540 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	b083      	sub	sp, #12
 800d546:	4604      	mov	r4, r0
 800d548:	460d      	mov	r5, r1
 800d54a:	4616      	mov	r6, r2
 800d54c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800d54e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d552:	f04f 0920 	mov.w	r9, #32
 800d556:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800d55a:	2700      	movs	r7, #0
 800d55c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d55e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d560:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d564:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800d566:	b303      	cbz	r3, 800d5aa <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d568:	6961      	ldr	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d56a:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d56c:	1c4a      	adds	r2, r1, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d56e:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800d570:	6162      	str	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d572:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d574:	782b      	ldrb	r3, [r5, #0]
 800d576:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800d578:	6923      	ldr	r3, [r4, #16]
 800d57a:	6961      	ldr	r1, [r4, #20]
 800d57c:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800d57e:	bf24      	itt	cs
 800d580:	68e3      	ldrcs	r3, [r4, #12]
 800d582:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 800d584:	f1b8 0f00 	cmp.w	r8, #0
 800d588:	d000      	beq.n	800d58c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800d58a:	47c0      	blx	r8
 800d58c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800d590:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800d592:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800d596:	d012      	beq.n	800d5be <chOQWriteTimeout+0x7e>
 800d598:	f389 8811 	msr	BASEPRI, r9
 800d59c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d59e:	465d      	mov	r5, fp
 800d5a0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d5a4:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1de      	bne.n	800d568 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800d5aa:	9901      	ldr	r1, [sp, #4]
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f7ff fd7e 	bl	800d0b0 <chThdEnqueueTimeoutS>
 800d5b4:	9b00      	ldr	r3, [sp, #0]
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d0d1      	beq.n	800d55e <chOQWriteTimeout+0x1e>
 800d5ba:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800d5be:	4638      	mov	r0, r7
 800d5c0:	b003      	add	sp, #12
 800d5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c6:	bf00      	nop
	...

0800d5d0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d5d0:	4a05      	ldr	r2, [pc, #20]	; (800d5e8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d5d2:	4b06      	ldr	r3, [pc, #24]	; (800d5ec <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d5d4:	4806      	ldr	r0, [pc, #24]	; (800d5f0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d5d6:	4907      	ldr	r1, [pc, #28]	; (800d5f4 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d5d8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d5dc:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d5e0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d5e2:	600b      	str	r3, [r1, #0]
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	200049ff 	.word	0x200049ff
 800d5ec:	20020000 	.word	0x20020000
 800d5f0:	20000ecc 	.word	0x20000ecc
 800d5f4:	20000ec8 	.word	0x20000ec8
	...

0800d600 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800d600:	b410      	push	{r4}
 800d602:	2320      	movs	r3, #32
 800d604:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d608:	4c09      	ldr	r4, [pc, #36]	; (800d630 <chCoreAlloc+0x30>)
 800d60a:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <chCoreAlloc+0x34>)
 800d60c:	6822      	ldr	r2, [r4, #0]
 800d60e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800d610:	1dc3      	adds	r3, r0, #7
 800d612:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d616:	1a89      	subs	r1, r1, r2
 800d618:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800d61a:	bf9d      	ittte	ls
 800d61c:	189b      	addls	r3, r3, r2
 800d61e:	6023      	strls	r3, [r4, #0]

  return p;
 800d620:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 800d622:	2000      	movhi	r0, #0
 800d624:	2300      	movs	r3, #0
 800d626:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800d62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	20000ecc 	.word	0x20000ecc
 800d634:	20000ec8 	.word	0x20000ec8
	...

0800d640 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800d640:	4b04      	ldr	r3, [pc, #16]	; (800d654 <_heap_init+0x14>)
 800d642:	4a05      	ldr	r2, [pc, #20]	; (800d658 <_heap_init+0x18>)
 800d644:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d646:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800d64a:	2200      	movs	r2, #0
 800d64c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800d64e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d650:	f7ff bdbe 	b.w	800d1d0 <chMtxObjectInit>
 800d654:	20000ed0 	.word	0x20000ed0
 800d658:	0800d601 	.word	0x0800d601
 800d65c:	00000000 	.word	0x00000000

0800d660 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800d660:	4a06      	ldr	r2, [pc, #24]	; (800d67c <SVC_Handler+0x1c>)
 800d662:	6853      	ldr	r3, [r2, #4]
 800d664:	f023 0301 	bic.w	r3, r3, #1
 800d668:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d66a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d66e:	3368      	adds	r3, #104	; 0x68
 800d670:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d674:	2300      	movs	r3, #0
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	4770      	bx	lr
 800d67c:	e000ef30 	.word	0xe000ef30

0800d680 <_port_irq_epilogue>:
 800d680:	2320      	movs	r3, #32
 800d682:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800d686:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <_port_irq_epilogue+0x50>)
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800d68e:	d102      	bne.n	800d696 <_port_irq_epilogue+0x16>
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800d696:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800d698:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d69c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d6a0:	4b0c      	ldr	r3, [pc, #48]	; (800d6d4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800d6a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800d6ac:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d6b0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 800d6b4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800d6b8:	f7ff fbda 	bl	800ce70 <chSchIsPreemptionRequired>
 800d6bc:	b118      	cbz	r0, 800d6c6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800d6be:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <_port_irq_epilogue+0x58>)
 800d6c0:	f844 3c50 	str.w	r3, [r4, #-80]
 800d6c4:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800d6c6:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <_port_irq_epilogue+0x5c>)
 800d6c8:	f844 3c50 	str.w	r3, [r4, #-80]
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	bf00      	nop
 800d6d0:	e000ed00 	.word	0xe000ed00
 800d6d4:	e000ef30 	.word	0xe000ef30
 800d6d8:	0800c139 	.word	0x0800c139
 800d6dc:	0800c13c 	.word	0x0800c13c

0800d6e0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800d6e0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800d6e2:	f000 fe3d 	bl	800e360 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800d6e6:	480a      	ldr	r0, [pc, #40]	; (800d710 <halInit+0x30>)
 800d6e8:	f001 f90a 	bl	800e900 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800d6ec:	f000 f818 	bl	800d720 <canInit>
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
 800d6f0:	f000 f876 	bl	800d7e0 <gptInit>
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800d6f4:	f000 f884 	bl	800d800 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800d6f8:	f000 f892 	bl	800d820 <icuInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800d6fc:	f000 f910 	bl	800d920 <sdInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800d700:	f000 f976 	bl	800d9f0 <usbInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800d704:	f002 f844 	bl	800f790 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800d708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800d70c:	f000 b968 	b.w	800d9e0 <stInit>
 800d710:	08012ae0 	.word	0x08012ae0
	...

0800d720 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800d720:	f001 b81e 	b.w	800e760 <can_lld_init>
	...

0800d730 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800d730:	b4f0      	push	{r4, r5, r6, r7}

  canp->state    = CAN_STOP;
 800d732:	2201      	movs	r2, #1
  canp->config   = NULL;
 800d734:	2300      	movs	r3, #0
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800d736:	f100 0718 	add.w	r7, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800d73a:	f100 061c 	add.w	r6, r0, #28
  osalEventObjectInit(&canp->error_event);
 800d73e:	f100 0520 	add.w	r5, r0, #32
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800d742:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800d746:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800d74a:	7002      	strb	r2, [r0, #0]
  canp->config   = NULL;
 800d74c:	6043      	str	r3, [r0, #4]
  osalThreadQueueObjectInit(&canp->txqueue);
 800d74e:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800d752:	f100 0310 	add.w	r3, r0, #16
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800d756:	6187      	str	r7, [r0, #24]
 800d758:	61c6      	str	r6, [r0, #28]
 800d75a:	6205      	str	r5, [r0, #32]
 800d75c:	6244      	str	r4, [r0, #36]	; 0x24
 800d75e:	6281      	str	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d760:	6082      	str	r2, [r0, #8]
  tqp->p_prev = (thread_t *)tqp;
 800d762:	60c2      	str	r2, [r0, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d764:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800d766:	6143      	str	r3, [r0, #20]
  osalEventObjectInit(&canp->error_event);
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
}
 800d768:	bcf0      	pop	{r4, r5, r6, r7}
 800d76a:	4770      	bx	lr
 800d76c:	0000      	movs	r0, r0
	...

0800d770 <canStart>:
 * @param[in] config    pointer to the @p CANConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void canStart(CANDriver *canp, const CANConfig *config) {
 800d770:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d772:	2320      	movs	r3, #32
 800d774:	4604      	mov	r4, r0
 800d776:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 800d77a:	2302      	movs	r3, #2
 800d77c:	7003      	strb	r3, [r0, #0]
  canp->config = config;
 800d77e:	6041      	str	r1, [r0, #4]

  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);
 800d780:	f001 f806 	bl	800e790 <can_lld_start>

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 800d784:	2303      	movs	r3, #3
 800d786:	7023      	strb	r3, [r4, #0]
 800d788:	2300      	movs	r3, #0
 800d78a:	f383 8811 	msr	BASEPRI, r3
 800d78e:	bd10      	pop	{r4, pc}

0800d790 <canReceive>:
 * @api
 */
msg_t canReceive(CANDriver *canp,
                 canmbx_t mailbox,
                 CANRxFrame *crfp,
                 systime_t timeout) {
 800d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d794:	461f      	mov	r7, r3
 800d796:	4604      	mov	r4, r0
 800d798:	460d      	mov	r5, r1
 800d79a:	4690      	mov	r8, r2
 800d79c:	2320      	movs	r3, #32
 800d79e:	f383 8811 	msr	BASEPRI, r3
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");
  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
 800d7a2:	f100 0610 	add.w	r6, r0, #16

  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");
  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 800d7a6:	7823      	ldrb	r3, [r4, #0]
 800d7a8:	2b04      	cmp	r3, #4
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	d002      	beq.n	800d7b6 <canReceive+0x26>
 800d7b0:	f001 f826 	bl	800e800 <can_lld_is_rx_nonempty>
 800d7b4:	b950      	cbnz	r0, 800d7cc <canReceive+0x3c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f7ff fc79 	bl	800d0b0 <chThdEnqueueTimeoutS>
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
    if (msg != MSG_OK) {
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d0f1      	beq.n	800d7a6 <canReceive+0x16>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	f383 8811 	msr	BASEPRI, r3
      osalSysUnlock();
      return msg;
 800d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  can_lld_receive(canp, mailbox, crfp);
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	4642      	mov	r2, r8
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	f001 f835 	bl	800e840 <can_lld_receive>
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	f380 8811 	msr	BASEPRI, r0
  osalSysUnlock();
  return MSG_OK;
}
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7e0 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
 800d7e0:	f001 bdae 	b.w	800f340 <gpt_lld_init>
	...

0800d7f0 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800d7f0:	2201      	movs	r2, #1
  gptp->config = NULL;
 800d7f2:	2300      	movs	r3, #0
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800d7f4:	7002      	strb	r2, [r0, #0]
  gptp->config = NULL;
 800d7f6:	6043      	str	r3, [r0, #4]
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	0000      	movs	r0, r0
	...

0800d800 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800d800:	f001 baa6 	b.w	800ed50 <i2c_lld_init>
	...

0800d810 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d810:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800d812:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d814:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800d816:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800d818:	300c      	adds	r0, #12
 800d81a:	f7ff bcd9 	b.w	800d1d0 <chMtxObjectInit>
 800d81e:	bf00      	nop

0800d820 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800d820:	f001 bdee 	b.w	800f400 <icu_lld_init>
	...

0800d830 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d830:	2201      	movs	r2, #1
  icup->config = NULL;
 800d832:	2300      	movs	r3, #0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d834:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800d836:	6043      	str	r3, [r0, #4]
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	0000      	movs	r0, r0
	...

0800d840 <icuStart>:
 * @param[in] icup      pointer to the @p ICUDriver object
 * @param[in] config    pointer to the @p ICUConfig object
 *
 * @api
 */
void icuStart(ICUDriver *icup, const ICUConfig *config) {
 800d840:	b510      	push	{r4, lr}
 800d842:	2320      	movs	r3, #32
 800d844:	4604      	mov	r4, r0
 800d846:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 800d84a:	6041      	str	r1, [r0, #4]
  icu_lld_start(icup);
 800d84c:	f001 fde8 	bl	800f420 <icu_lld_start>
  icup->state = ICU_READY;
 800d850:	2302      	movs	r3, #2
 800d852:	7023      	strb	r3, [r4, #0]
 800d854:	2300      	movs	r3, #0
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	bd10      	pop	{r4, pc}
 800d85c:	0000      	movs	r0, r0
	...

0800d860 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 800d860:	b510      	push	{r4, lr}
 800d862:	2320      	movs	r3, #32
 800d864:	4604      	mov	r4, r0
 800d866:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 800d86a:	f001 fe39 	bl	800f4e0 <icu_lld_start_capture>
 800d86e:	2303      	movs	r3, #3
 800d870:	7023      	strb	r3, [r4, #0]
 800d872:	2300      	movs	r3, #0
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	bf00      	nop
 800d87c:	0000      	movs	r0, r0
	...

0800d880 <icuEnableNotifications>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuEnableNotifications(ICUDriver *icup) {
 800d880:	b508      	push	{r3, lr}
 800d882:	2320      	movs	r3, #32
 800d884:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800d888:	f001 fe3a 	bl	800f500 <icu_lld_enable_notifications>
 800d88c:	2300      	movs	r3, #0
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	bd08      	pop	{r3, pc}
	...

0800d8a0 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800d8a0:	300c      	adds	r0, #12
 800d8a2:	f7ff bdad 	b.w	800d400 <chIQReadTimeout>
 800d8a6:	bf00      	nop
	...

0800d8b0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800d8b0:	300c      	adds	r0, #12
 800d8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b6:	f7ff bda3 	b.w	800d400 <chIQReadTimeout>
 800d8ba:	bf00      	nop
 800d8bc:	0000      	movs	r0, r0
	...

0800d8c0 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800d8c0:	3030      	adds	r0, #48	; 0x30
 800d8c2:	f7ff be3d 	b.w	800d540 <chOQWriteTimeout>
 800d8c6:	bf00      	nop
	...

0800d8d0 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800d8d0:	3030      	adds	r0, #48	; 0x30
 800d8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d6:	f7ff be33 	b.w	800d540 <chOQWriteTimeout>
 800d8da:	bf00      	nop
 800d8dc:	0000      	movs	r0, r0
	...

0800d8e0 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800d8e0:	300c      	adds	r0, #12
 800d8e2:	f7ff bd65 	b.w	800d3b0 <chIQGetTimeout>
 800d8e6:	bf00      	nop
	...

0800d8f0 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800d8f0:	300c      	adds	r0, #12
 800d8f2:	f04f 31ff 	mov.w	r1, #4294967295
 800d8f6:	f7ff bd5b 	b.w	800d3b0 <chIQGetTimeout>
 800d8fa:	bf00      	nop
 800d8fc:	0000      	movs	r0, r0
	...

0800d900 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800d900:	3030      	adds	r0, #48	; 0x30
 800d902:	f7ff bdcd 	b.w	800d4a0 <chOQPutTimeout>
 800d906:	bf00      	nop
	...

0800d910 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800d910:	3030      	adds	r0, #48	; 0x30
 800d912:	f04f 32ff 	mov.w	r2, #4294967295
 800d916:	f7ff bdc3 	b.w	800d4a0 <chOQPutTimeout>
 800d91a:	bf00      	nop
 800d91c:	0000      	movs	r0, r0
	...

0800d920 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 800d920:	f001 bec6 	b.w	800f6b0 <sd_lld_init>
	...

0800d930 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d930:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 800d932:	4b0f      	ldr	r3, [pc, #60]	; (800d970 <sdObjectInit+0x40>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d934:	4604      	mov	r4, r0
 800d936:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 800d938:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800d93c:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d93e:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d940:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d942:	460b      	mov	r3, r1
 800d944:	6060      	str	r0, [r4, #4]
 800d946:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800d94a:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800d94e:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d950:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d954:	f7ff fcfc 	bl	800d350 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800d958:	9400      	str	r4, [sp, #0]
 800d95a:	462b      	mov	r3, r5
 800d95c:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800d960:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d964:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d968:	f7ff fd8a 	bl	800d480 <chOQObjectInit>
}
 800d96c:	b002      	add	sp, #8
 800d96e:	bd70      	pop	{r4, r5, r6, pc}
 800d970:	08012980 	.word	0x08012980
	...

0800d980 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 800d980:	b510      	push	{r4, lr}
 800d982:	2320      	movs	r3, #32
 800d984:	4604      	mov	r4, r0
 800d986:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 800d98a:	f001 fea9 	bl	800f6e0 <sd_lld_start>
  sdp->state = SD_READY;
 800d98e:	2302      	movs	r3, #2
 800d990:	7223      	strb	r3, [r4, #8]
 800d992:	2300      	movs	r3, #0
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	bd10      	pop	{r4, pc}
 800d99a:	bf00      	nop
 800d99c:	0000      	movs	r0, r0
	...

0800d9a0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800d9a2:	6943      	ldr	r3, [r0, #20]
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800d9a8:	b13b      	cbz	r3, 800d9ba <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f104 000c 	add.w	r0, r4, #12
 800d9b0:	f7ff fcde 	bl	800d370 <chIQPutI>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	db0b      	blt.n	800d9d0 <sdIncomingDataI+0x30>
 800d9b8:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800d9ba:	2104      	movs	r1, #4
 800d9bc:	4408      	add	r0, r1
 800d9be:	f7ff fc57 	bl	800d270 <chEvtBroadcastFlagsI>
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	f104 000c 	add.w	r0, r4, #12
 800d9c8:	f7ff fcd2 	bl	800d370 <chIQPutI>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	daf3      	bge.n	800d9b8 <sdIncomingDataI+0x18>
 800d9d0:	1d20      	adds	r0, r4, #4
 800d9d2:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 800d9d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d8:	f7ff bc4a 	b.w	800d270 <chEvtBroadcastFlagsI>
 800d9dc:	0000      	movs	r0, r0
	...

0800d9e0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800d9e0:	f001 bdbe 	b.w	800f560 <st_lld_init>
	...

0800d9f0 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800d9f0:	f001 b9c6 	b.w	800ed80 <usb_lld_init>
	...

0800da00 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800da00:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800da02:	2201      	movs	r2, #1
 800da04:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800da06:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800da08:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800da0a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800da0c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800da0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800da10:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800da12:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800da14:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800da16:	8143      	strh	r3, [r0, #10]
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	0000      	movs	r0, r0
	...

0800da20 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800da20:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800da22:	2102      	movs	r1, #2
 800da24:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800da26:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800da2a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800da2e:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800da32:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 800da34:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800da36:	60c2      	str	r2, [r0, #12]
 800da38:	6102      	str	r2, [r0, #16]
 800da3a:	6142      	str	r2, [r0, #20]
 800da3c:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800da3e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800da42:	f001 b9b5 	b.w	800edb0 <usb_lld_reset>
 800da46:	bf00      	nop
	...

0800da50 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800da52:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800da54:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800da56:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800da5a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800da5e:	f001 fa3f 	bl	800eee0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800da62:	6863      	ldr	r3, [r4, #4]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d036      	beq.n	800dad8 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 800da6a:	4620      	mov	r0, r4
 800da6c:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800da6e:	2800      	cmp	r0, #0
 800da70:	d032      	beq.n	800dad8 <_usb_ep0setup+0x88>
 800da72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800da74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800da78:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800da7c:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800da80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800da84:	4282      	cmp	r2, r0
    usbp->ep0n = max;
 800da86:	bf3c      	itt	cc
 800da88:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800da8a:	4610      	movcc	r0, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800da8c:	061a      	lsls	r2, r3, #24
 800da8e:	f100 80ab 	bmi.w	800dbe8 <_usb_ep0setup+0x198>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800da92:	2800      	cmp	r0, #0
 800da94:	f000 808b 	beq.w	800dbae <_usb_ep0setup+0x15e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800da98:	68e3      	ldr	r3, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800da9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800da9c:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800da9e:	2200      	movs	r2, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800daa0:	2104      	movs	r1, #4
 800daa2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800daa6:	4611      	mov	r1, r2
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800daa8:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800daaa:	6058      	str	r0, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800daac:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800daae:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800dab0:	4620      	mov	r0, r4
 800dab2:	f001 fa25 	bl	800ef00 <usb_lld_prepare_receive>
 800dab6:	2320      	movs	r3, #32
 800dab8:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800dabc:	8963      	ldrh	r3, [r4, #10]
 800dabe:	f013 0101 	ands.w	r1, r3, #1
 800dac2:	d105      	bne.n	800dad0 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dac4:	f043 0301 	orr.w	r3, r3, #1
 800dac8:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800daca:	4620      	mov	r0, r4
 800dacc:	f001 fbb0 	bl	800f230 <usb_lld_start_out>
 800dad0:	2300      	movs	r3, #0
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800dad8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dadc:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 800dae0:	461e      	mov	r6, r3
 800dae2:	d011      	beq.n	800db08 <_usb_ep0setup+0xb8>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800dae4:	2100      	movs	r1, #0
 800dae6:	4620      	mov	r0, r4
 800dae8:	f001 fbda 	bl	800f2a0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800daec:	2100      	movs	r1, #0
 800daee:	4620      	mov	r0, r4
 800daf0:	f001 fbc6 	bl	800f280 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800daf4:	6863      	ldr	r3, [r4, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	b113      	cbz	r3, 800db00 <_usb_ep0setup+0xb0>
 800dafa:	2105      	movs	r1, #5
 800dafc:	4620      	mov	r0, r4
 800dafe:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800db00:	2306      	movs	r3, #6
 800db02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800db06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800db08:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800db0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db10:	ea42 2500 	orr.w	r5, r2, r0, lsl #8
 800db14:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800db18:	f000 80eb 	beq.w	800dcf2 <_usb_ep0setup+0x2a2>
 800db1c:	d916      	bls.n	800db4c <_usb_ep0setup+0xfc>
 800db1e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800db22:	f000 80ce 	beq.w	800dcc2 <_usb_ep0setup+0x272>
 800db26:	d92f      	bls.n	800db88 <_usb_ep0setup+0x138>
 800db28:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800db2c:	d076      	beq.n	800dc1c <_usb_ep0setup+0x1cc>
 800db2e:	f640 4202 	movw	r2, #3074	; 0xc02
 800db32:	4295      	cmp	r5, r2
 800db34:	f000 80ef 	beq.w	800dd16 <_usb_ep0setup+0x2c6>
 800db38:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800db3c:	d1d2      	bne.n	800dae4 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800db3e:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800db42:	2001      	movs	r0, #1
 800db44:	6427      	str	r7, [r4, #64]	; 0x40
 800db46:	63a2      	str	r2, [r4, #56]	; 0x38
 800db48:	63e0      	str	r0, [r4, #60]	; 0x3c
 800db4a:	e795      	b.n	800da78 <_usb_ep0setup+0x28>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800db4c:	2d02      	cmp	r5, #2
 800db4e:	f000 80a2 	beq.w	800dc96 <_usb_ep0setup+0x246>
 800db52:	f240 8097 	bls.w	800dc84 <_usb_ep0setup+0x234>
 800db56:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800db5a:	f000 8084 	beq.w	800dc66 <_usb_ep0setup+0x216>
 800db5e:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800db62:	d1bf      	bne.n	800dae4 <_usb_ep0setup+0x94>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800db64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1bb      	bne.n	800dae4 <_usb_ep0setup+0x94>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800db6c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800db70:	f013 010f 	ands.w	r1, r3, #15
 800db74:	d015      	beq.n	800dba2 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800db76:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800db78:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800db7a:	f100 80f4 	bmi.w	800dd66 <_usb_ep0setup+0x316>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800db7e:	f001 fb9f 	bl	800f2c0 <usb_lld_clear_out>
 800db82:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800db86:	e00c      	b.n	800dba2 <_usb_ep0setup+0x152>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800db88:	f240 3302 	movw	r3, #770	; 0x302
 800db8c:	429d      	cmp	r5, r3
 800db8e:	d057      	beq.n	800dc40 <_usb_ep0setup+0x1f0>
 800db90:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800db94:	d1a6      	bne.n	800dae4 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800db96:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800db9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800db9e:	f000 80d0 	beq.w	800dd42 <_usb_ep0setup+0x2f2>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800dba2:	2300      	movs	r3, #0
 800dba4:	63a3      	str	r3, [r4, #56]	; 0x38
 800dba6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800dba8:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800dbaa:	0633      	lsls	r3, r6, #24
 800dbac:	d42a      	bmi.n	800dc04 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dbae:	68e3      	ldr	r3, [r4, #12]
 800dbb0:	695a      	ldr	r2, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800dbb2:	2105      	movs	r1, #5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dbb4:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800dbb6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800dbba:	4619      	mov	r1, r3
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dbbc:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 800dbbe:	60d3      	str	r3, [r2, #12]
  isp->txsize             = n;
 800dbc0:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 800dbc2:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f001 fa1b 	bl	800f000 <usb_lld_prepare_transmit>
 800dbca:	2320      	movs	r3, #32
 800dbcc:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800dbd0:	8923      	ldrh	r3, [r4, #8]
 800dbd2:	f013 0101 	ands.w	r1, r3, #1
 800dbd6:	f47f af7b 	bne.w	800dad0 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dbda:	f043 0301 	orr.w	r3, r3, #1
 800dbde:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f001 fb35 	bl	800f250 <usb_lld_start_in>
 800dbe6:	e773      	b.n	800dad0 <_usb_ep0setup+0x80>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800dbe8:	b160      	cbz	r0, 800dc04 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dbea:	68e3      	ldr	r3, [r4, #12]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800dbec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dbee:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = false;
 800dbf0:	2200      	movs	r2, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 800dbf2:	2101      	movs	r1, #1
 800dbf4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800dbf8:	4611      	mov	r1, r2
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800dbfa:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800dbfc:	6058      	str	r0, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dbfe:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800dc00:	609a      	str	r2, [r3, #8]
 800dc02:	e7df      	b.n	800dbc4 <_usb_ep0setup+0x174>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800dc04:	68e3      	ldr	r3, [r4, #12]
 800dc06:	699a      	ldr	r2, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800dc08:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dc0a:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800dc0c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800dc10:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dc12:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800dc14:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800dc16:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800dc18:	6093      	str	r3, [r2, #8]
 800dc1a:	e749      	b.n	800dab0 <_usb_ep0setup+0x60>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800dc1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc20:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d17d      	bne.n	800dd24 <_usb_ep0setup+0x2d4>
      usbp->state = USB_SELECTED;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0b6      	beq.n	800dba2 <_usb_ep0setup+0x152>
 800dc34:	2102      	movs	r1, #2
 800dc36:	4620      	mov	r0, r4
 800dc38:	4798      	blx	r3
 800dc3a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dc3e:	e7b0      	b.n	800dba2 <_usb_ep0setup+0x152>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800dc40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f47f af4d 	bne.w	800dae4 <_usb_ep0setup+0x94>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800dc4a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dc4e:	f013 010f 	ands.w	r1, r3, #15
 800dc52:	d0a6      	beq.n	800dba2 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc54:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800dc56:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc58:	f100 808a 	bmi.w	800dd70 <_usb_ep0setup+0x320>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800dc5c:	f001 fb10 	bl	800f280 <usb_lld_stall_out>
 800dc60:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dc64:	e79d      	b.n	800dba2 <_usb_ep0setup+0x152>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800dc66:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	f47f af3a 	bne.w	800dae4 <_usb_ep0setup+0x94>
      usbp->status &= ~2U;
 800dc70:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dc74:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800dc76:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dc7a:	63e7      	str	r7, [r4, #60]	; 0x3c
 800dc7c:	6427      	str	r7, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800dc7e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800dc82:	e792      	b.n	800dbaa <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dc84:	2d00      	cmp	r5, #0
 800dc86:	d143      	bne.n	800dd10 <_usb_ep0setup+0x2c0>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800dc88:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800dc8c:	2002      	movs	r0, #2
 800dc8e:	6425      	str	r5, [r4, #64]	; 0x40
 800dc90:	63a2      	str	r2, [r4, #56]	; 0x38
 800dc92:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dc94:	e6f0      	b.n	800da78 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc96:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800dc9a:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800dca4:	d141      	bne.n	800dd2a <_usb_ep0setup+0x2da>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800dca6:	f001 f8fb 	bl	800eea0 <usb_lld_get_status_out>
 800dcaa:	2801      	cmp	r0, #1
 800dcac:	d041      	beq.n	800dd32 <_usb_ep0setup+0x2e2>
 800dcae:	2802      	cmp	r0, #2
 800dcb0:	f47f af18 	bne.w	800dae4 <_usb_ep0setup+0x94>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800dcb4:	4b31      	ldr	r3, [pc, #196]	; (800dd7c <_usb_ep0setup+0x32c>)
 800dcb6:	63a3      	str	r3, [r4, #56]	; 0x38
 800dcb8:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dcba:	6427      	str	r7, [r4, #64]	; 0x40
 800dcbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcc0:	e6da      	b.n	800da78 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800dcc2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800dcc6:	6861      	ldr	r1, [r4, #4]
 800dcc8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dccc:	684d      	ldr	r5, [r1, #4]
 800dcce:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800dcd2:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800dcd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800dcda:	4620      	mov	r0, r4
 800dcdc:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800dcde:	2800      	cmp	r0, #0
 800dce0:	f43f af00 	beq.w	800dae4 <_usb_ep0setup+0x94>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800dce4:	c809      	ldmia	r0, {r0, r3}
 800dce6:	6427      	str	r7, [r4, #64]	; 0x40
 800dce8:	63a3      	str	r3, [r4, #56]	; 0x38
 800dcea:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dcec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcf0:	e6c2      	b.n	800da78 <_usb_ep0setup+0x28>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800dcf2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	f47f aef4 	bne.w	800dae4 <_usb_ep0setup+0x94>
      usbp->status |= 2U;
 800dcfc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dd00:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800dd02:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dd06:	63e7      	str	r7, [r4, #60]	; 0x3c
 800dd08:	6427      	str	r7, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800dd0a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800dd0e:	e74c      	b.n	800dbaa <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dd10:	2d01      	cmp	r5, #1
 800dd12:	f47f aee7 	bne.w	800dae4 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800dd16:	4a1a      	ldr	r2, [pc, #104]	; (800dd80 <_usb_ep0setup+0x330>)
 800dd18:	63a2      	str	r2, [r4, #56]	; 0x38
 800dd1a:	2002      	movs	r0, #2
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dd20:	6422      	str	r2, [r4, #64]	; 0x40
 800dd22:	e6a9      	b.n	800da78 <_usb_ep0setup+0x28>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800dd24:	2304      	movs	r3, #4
 800dd26:	7023      	strb	r3, [r4, #0]
 800dd28:	e780      	b.n	800dc2c <_usb_ep0setup+0x1dc>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800dd2a:	f001 f8c9 	bl	800eec0 <usb_lld_get_status_in>
 800dd2e:	2801      	cmp	r0, #1
 800dd30:	d1bd      	bne.n	800dcae <_usb_ep0setup+0x25e>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800dd32:	4b14      	ldr	r3, [pc, #80]	; (800dd84 <_usb_ep0setup+0x334>)
 800dd34:	63a3      	str	r3, [r4, #56]	; 0x38
 800dd36:	63e5      	str	r5, [r4, #60]	; 0x3c
 800dd38:	6427      	str	r7, [r4, #64]	; 0x40
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dd40:	e69a      	b.n	800da78 <_usb_ep0setup+0x28>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 800dd42:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dd46:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f001 f898 	bl	800ee80 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800dd50:	6863      	ldr	r3, [r4, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	b113      	cbz	r3, 800dd5c <_usb_ep0setup+0x30c>
 800dd56:	2101      	movs	r1, #1
 800dd58:	4620      	mov	r0, r4
 800dd5a:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dd62:	7023      	strb	r3, [r4, #0]
 800dd64:	e71d      	b.n	800dba2 <_usb_ep0setup+0x152>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800dd66:	f001 fabb 	bl	800f2e0 <usb_lld_clear_in>
 800dd6a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dd6e:	e718      	b.n	800dba2 <_usb_ep0setup+0x152>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800dd70:	f001 fa96 	bl	800f2a0 <usb_lld_stall_in>
 800dd74:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dd78:	e713      	b.n	800dba2 <_usb_ep0setup+0x152>
 800dd7a:	bf00      	nop
 800dd7c:	080129b0 	.word	0x080129b0
 800dd80:	080129a0 	.word	0x080129a0
 800dd84:	080129c0 	.word	0x080129c0
	...

0800dd90 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800dd90:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800dd94:	b510      	push	{r4, lr}
 800dd96:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800dd98:	2b06      	cmp	r3, #6
 800dd9a:	d815      	bhi.n	800ddc8 <_usb_ep0in+0x38>
 800dd9c:	e8df f003 	tbb	[pc, r3]
 800dda0:	041c3b04 	.word	0x041c3b04
 800dda4:	1504      	.short	0x1504
 800dda6:	04          	.byte	0x04
 800dda7:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800dda8:	2100      	movs	r1, #0
 800ddaa:	f001 fa79 	bl	800f2a0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800ddae:	2100      	movs	r1, #0
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f001 fa65 	bl	800f280 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800ddb6:	6863      	ldr	r3, [r4, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	b113      	cbz	r3, 800ddc2 <_usb_ep0in+0x32>
 800ddbc:	2105      	movs	r1, #5
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800ddc2:	2306      	movs	r3, #6
 800ddc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ddc8:	bd10      	pop	{r4, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800ddca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddcc:	b103      	cbz	r3, 800ddd0 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 800ddce:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800ddd6:	bd10      	pop	{r4, pc}
 800ddd8:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ddda:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800dddc:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800ddde:	2300      	movs	r3, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800dde0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800dde4:	4620      	mov	r0, r4
 800dde6:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dde8:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800ddea:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800ddec:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800ddee:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_receive(usbp, ep);
 800ddf0:	f001 f886 	bl	800ef00 <usb_lld_prepare_receive>
 800ddf4:	2320      	movs	r3, #32
 800ddf6:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800ddfa:	8963      	ldrh	r3, [r4, #10]
 800ddfc:	f013 0101 	ands.w	r1, r3, #1
 800de00:	d105      	bne.n	800de0e <_usb_ep0in+0x7e>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800de02:	f043 0301 	orr.w	r3, r3, #1
 800de06:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800de08:	4620      	mov	r0, r4
 800de0a:	f001 fa11 	bl	800f230 <usb_lld_start_out>
 800de0e:	2300      	movs	r3, #0
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	bd10      	pop	{r4, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800de16:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800de1a:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800de1e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800de20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800de24:	4293      	cmp	r3, r2
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800de26:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800de28:	d9d7      	bls.n	800ddda <_usb_ep0in+0x4a>
 800de2a:	8a18      	ldrh	r0, [r3, #16]
 800de2c:	fbb2 f1f0 	udiv	r1, r2, r0
 800de30:	fb00 2211 	mls	r2, r0, r1, r2
 800de34:	2a00      	cmp	r2, #0
 800de36:	d1d0      	bne.n	800ddda <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800de38:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800de3a:	4611      	mov	r1, r2
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800de3c:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800de3e:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800de40:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800de42:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800de44:	4620      	mov	r0, r4
 800de46:	f001 f8db 	bl	800f000 <usb_lld_prepare_transmit>
 800de4a:	2320      	movs	r3, #32
 800de4c:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800de50:	8923      	ldrh	r3, [r4, #8]
 800de52:	f013 0101 	ands.w	r1, r3, #1
 800de56:	d105      	bne.n	800de64 <_usb_ep0in+0xd4>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800de58:	f043 0301 	orr.w	r3, r3, #1
 800de5c:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800de5e:	4620      	mov	r0, r4
 800de60:	f001 f9f6 	bl	800f250 <usb_lld_start_in>
 800de64:	2300      	movs	r3, #0
 800de66:	f383 8811 	msr	BASEPRI, r3
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800de6a:	2302      	movs	r3, #2
 800de6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800de70:	bd10      	pop	{r4, pc}
 800de72:	bf00      	nop
	...

0800de80 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800de80:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800de84:	2a06      	cmp	r2, #6
 800de86:	d80c      	bhi.n	800dea2 <_usb_ep0out+0x22>
 800de88:	2301      	movs	r3, #1
 800de8a:	4093      	lsls	r3, r2
 800de8c:	f013 0f67 	tst.w	r3, #103	; 0x67
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800de90:	b510      	push	{r4, lr}
 800de92:	4604      	mov	r4, r0
 800de94:	d112      	bne.n	800debc <_usb_ep0out+0x3c>
 800de96:	f013 0208 	ands.w	r2, r3, #8
 800de9a:	d103      	bne.n	800dea4 <_usb_ep0out+0x24>
 800de9c:	06db      	lsls	r3, r3, #27
 800de9e:	d41e      	bmi.n	800dede <_usb_ep0out+0x5e>
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800dea4:	68c3      	ldr	r3, [r0, #12]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1f8      	bne.n	800dea0 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800deae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800deb0:	b103      	cbz	r3, 800deb4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 800deb2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800deb4:	2300      	movs	r3, #0
 800deb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800deba:	bd10      	pop	{r4, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800debc:	2100      	movs	r1, #0
 800debe:	f001 f9ef 	bl	800f2a0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800dec2:	2100      	movs	r1, #0
 800dec4:	4620      	mov	r0, r4
 800dec6:	f001 f9db 	bl	800f280 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800deca:	6863      	ldr	r3, [r4, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	b113      	cbz	r3, 800ded6 <_usb_ep0out+0x56>
 800ded0:	2105      	movs	r1, #5
 800ded2:	4620      	mov	r0, r4
 800ded4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800ded6:	2306      	movs	r3, #6
 800ded8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800dedc:	bd10      	pop	{r4, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dede:	68c3      	ldr	r3, [r0, #12]
 800dee0:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800dee2:	2105      	movs	r1, #5
 800dee4:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800dee8:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800deea:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800deec:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800deee:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800def0:	4611      	mov	r1, r2
 800def2:	f001 f885 	bl	800f000 <usb_lld_prepare_transmit>
 800def6:	2320      	movs	r3, #32
 800def8:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800defc:	8923      	ldrh	r3, [r4, #8]
 800defe:	f013 0101 	ands.w	r1, r3, #1
 800df02:	d003      	beq.n	800df0c <_usb_ep0out+0x8c>
 800df04:	2300      	movs	r3, #0
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	bd10      	pop	{r4, pc}
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800df0c:	f043 0301 	orr.w	r3, r3, #1
 800df10:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800df12:	4620      	mov	r0, r4
 800df14:	f001 f99c 	bl	800f250 <usb_lld_start_in>
 800df18:	e7f4      	b.n	800df04 <_usb_ep0out+0x84>
 800df1a:	bf00      	nop
 800df1c:	0000      	movs	r0, r0
	...

0800df20 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800df20:	0943      	lsrs	r3, r0, #5
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	b410      	push	{r4}
 800df26:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800df2a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800df2e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800df32:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800df36:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800df38:	f000 001f 	and.w	r0, r0, #31
 800df3c:	2201      	movs	r2, #1
 800df3e:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800df42:	b2c9      	uxtb	r1, r1
 800df44:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800df48:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800df4c:	6018      	str	r0, [r3, #0]
}
 800df4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df52:	4770      	bx	lr
	...

0800df60 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800df60:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800df64:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800df68:	0109      	lsls	r1, r1, #4
 800df6a:	b2c9      	uxtb	r1, r1
 800df6c:	7601      	strb	r1, [r0, #24]
 800df6e:	4770      	bx	lr

0800df70 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800df70:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800df72:	4b07      	ldr	r3, [pc, #28]	; (800df90 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800df74:	4a07      	ldr	r2, [pc, #28]	; (800df94 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800df76:	6819      	ldr	r1, [r3, #0]
 800df78:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800df7c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800df7e:	6813      	ldr	r3, [r2, #0]
 800df80:	b10b      	cbz	r3, 800df86 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800df82:	6850      	ldr	r0, [r2, #4]
 800df84:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800df86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800df8a:	f7ff bb79 	b.w	800d680 <_port_irq_epilogue>
 800df8e:	bf00      	nop
 800df90:	40026000 	.word	0x40026000
 800df94:	20000ef0 	.word	0x20000ef0
	...

0800dfa0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800dfa0:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800dfa2:	4809      	ldr	r0, [pc, #36]	; (800dfc8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800dfa4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800dfa6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800dfa8:	0989      	lsrs	r1, r1, #6
 800dfaa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800dfae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 800dfb0:	018c      	lsls	r4, r1, #6
 800dfb2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800dfb4:	b10a      	cbz	r2, 800dfba <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800dfb6:	68c0      	ldr	r0, [r0, #12]
 800dfb8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800dfba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800dfbe:	f7ff bb5f 	b.w	800d680 <_port_irq_epilogue>
 800dfc2:	bf00      	nop
 800dfc4:	40026000 	.word	0x40026000
 800dfc8:	20000ef0 	.word	0x20000ef0
 800dfcc:	00000000 	.word	0x00000000

0800dfd0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800dfd0:	4b08      	ldr	r3, [pc, #32]	; (800dff4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800dfd2:	4809      	ldr	r0, [pc, #36]	; (800dff8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800dfd4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800dfd6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800dfd8:	0c09      	lsrs	r1, r1, #16
 800dfda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800dfde:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 800dfe0:	040c      	lsls	r4, r1, #16
 800dfe2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800dfe4:	b10a      	cbz	r2, 800dfea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800dfe6:	6940      	ldr	r0, [r0, #20]
 800dfe8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800dfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800dfee:	f7ff bb47 	b.w	800d680 <_port_irq_epilogue>
 800dff2:	bf00      	nop
 800dff4:	40026000 	.word	0x40026000
 800dff8:	20000ef0 	.word	0x20000ef0
 800dffc:	00000000 	.word	0x00000000

0800e000 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e000:	4b08      	ldr	r3, [pc, #32]	; (800e024 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e002:	4809      	ldr	r0, [pc, #36]	; (800e028 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e004:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800e006:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e008:	0d89      	lsrs	r1, r1, #22
 800e00a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800e00e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 800e010:	058c      	lsls	r4, r1, #22
 800e012:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800e014:	b10a      	cbz	r2, 800e01a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800e016:	69c0      	ldr	r0, [r0, #28]
 800e018:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e01e:	f7ff bb2f 	b.w	800d680 <_port_irq_epilogue>
 800e022:	bf00      	nop
 800e024:	40026000 	.word	0x40026000
 800e028:	20000ef0 	.word	0x20000ef0
 800e02c:	00000000 	.word	0x00000000

0800e030 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800e030:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e032:	4b07      	ldr	r3, [pc, #28]	; (800e050 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e034:	4807      	ldr	r0, [pc, #28]	; (800e054 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e036:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800e038:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e03a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800e03e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800e040:	b10a      	cbz	r2, 800e046 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800e042:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e044:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e04a:	f7ff bb19 	b.w	800d680 <_port_irq_epilogue>
 800e04e:	bf00      	nop
 800e050:	40026000 	.word	0x40026000
 800e054:	20000ef0 	.word	0x20000ef0
	...

0800e060 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e060:	4b08      	ldr	r3, [pc, #32]	; (800e084 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e062:	4809      	ldr	r0, [pc, #36]	; (800e088 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e064:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e066:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e068:	0989      	lsrs	r1, r1, #6
 800e06a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800e06e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 800e070:	018c      	lsls	r4, r1, #6
 800e072:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800e074:	b10a      	cbz	r2, 800e07a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800e076:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e078:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e07e:	f7ff baff 	b.w	800d680 <_port_irq_epilogue>
 800e082:	bf00      	nop
 800e084:	40026000 	.word	0x40026000
 800e088:	20000ef0 	.word	0x20000ef0
 800e08c:	00000000 	.word	0x00000000

0800e090 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e090:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e092:	4809      	ldr	r0, [pc, #36]	; (800e0b8 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e094:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e096:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e098:	0c09      	lsrs	r1, r1, #16
 800e09a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800e09e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 800e0a0:	040c      	lsls	r4, r1, #16
 800e0a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800e0a4:	b10a      	cbz	r2, 800e0aa <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800e0a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e0a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e0ae:	f7ff bae7 	b.w	800d680 <_port_irq_epilogue>
 800e0b2:	bf00      	nop
 800e0b4:	40026000 	.word	0x40026000
 800e0b8:	20000ef0 	.word	0x20000ef0
 800e0bc:	00000000 	.word	0x00000000

0800e0c0 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e0c0:	4b08      	ldr	r3, [pc, #32]	; (800e0e4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e0c2:	4809      	ldr	r0, [pc, #36]	; (800e0e8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e0c4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e0c6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e0c8:	0d89      	lsrs	r1, r1, #22
 800e0ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 800e0ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 800e0d0:	058c      	lsls	r4, r1, #22
 800e0d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800e0d4:	b10a      	cbz	r2, 800e0da <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800e0d6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e0d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e0de:	f7ff bacf 	b.w	800d680 <_port_irq_epilogue>
 800e0e2:	bf00      	nop
 800e0e4:	40026000 	.word	0x40026000
 800e0e8:	20000ef0 	.word	0x20000ef0
 800e0ec:	00000000 	.word	0x00000000

0800e0f0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800e0f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e0f2:	4b07      	ldr	r3, [pc, #28]	; (800e110 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e0f4:	4807      	ldr	r0, [pc, #28]	; (800e114 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e0f6:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e0f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e0fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800e0fe:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800e100:	b10a      	cbz	r2, 800e106 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800e102:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e104:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e10a:	f7ff bab9 	b.w	800d680 <_port_irq_epilogue>
 800e10e:	bf00      	nop
 800e110:	40026400 	.word	0x40026400
 800e114:	20000ef0 	.word	0x20000ef0
	...

0800e120 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e120:	4b08      	ldr	r3, [pc, #32]	; (800e144 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e122:	4809      	ldr	r0, [pc, #36]	; (800e148 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e124:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e126:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e128:	0989      	lsrs	r1, r1, #6
 800e12a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800e12e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 800e130:	018c      	lsls	r4, r1, #6
 800e132:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800e134:	b10a      	cbz	r2, 800e13a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800e136:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e138:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e13e:	f7ff ba9f 	b.w	800d680 <_port_irq_epilogue>
 800e142:	bf00      	nop
 800e144:	40026400 	.word	0x40026400
 800e148:	20000ef0 	.word	0x20000ef0
 800e14c:	00000000 	.word	0x00000000

0800e150 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e150:	4b08      	ldr	r3, [pc, #32]	; (800e174 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e152:	4809      	ldr	r0, [pc, #36]	; (800e178 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e154:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e156:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e158:	0c09      	lsrs	r1, r1, #16
 800e15a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800e15e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 800e160:	040c      	lsls	r4, r1, #16
 800e162:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800e164:	b10a      	cbz	r2, 800e16a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800e166:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800e168:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e16e:	f7ff ba87 	b.w	800d680 <_port_irq_epilogue>
 800e172:	bf00      	nop
 800e174:	40026400 	.word	0x40026400
 800e178:	20000ef0 	.word	0x20000ef0
 800e17c:	00000000 	.word	0x00000000

0800e180 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e180:	4b08      	ldr	r3, [pc, #32]	; (800e1a4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e182:	4809      	ldr	r0, [pc, #36]	; (800e1a8 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e184:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e186:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e188:	0d89      	lsrs	r1, r1, #22
 800e18a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800e18e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 800e190:	058c      	lsls	r4, r1, #22
 800e192:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800e194:	b10a      	cbz	r2, 800e19a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800e196:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800e198:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e19e:	f7ff ba6f 	b.w	800d680 <_port_irq_epilogue>
 800e1a2:	bf00      	nop
 800e1a4:	40026400 	.word	0x40026400
 800e1a8:	20000ef0 	.word	0x20000ef0
 800e1ac:	00000000 	.word	0x00000000

0800e1b0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800e1b0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e1b2:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e1b4:	4807      	ldr	r0, [pc, #28]	; (800e1d4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e1b6:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e1b8:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e1ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800e1be:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800e1c0:	b10a      	cbz	r2, 800e1c6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800e1c2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e1c4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e1ca:	f7ff ba59 	b.w	800d680 <_port_irq_epilogue>
 800e1ce:	bf00      	nop
 800e1d0:	40026400 	.word	0x40026400
 800e1d4:	20000ef0 	.word	0x20000ef0
	...

0800e1e0 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e1e0:	4b08      	ldr	r3, [pc, #32]	; (800e204 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e1e2:	4809      	ldr	r0, [pc, #36]	; (800e208 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e1e4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e1e6:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e1e8:	0989      	lsrs	r1, r1, #6
 800e1ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800e1ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 800e1f0:	018c      	lsls	r4, r1, #6
 800e1f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800e1f4:	b10a      	cbz	r2, 800e1fa <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800e1f6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800e1f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e1fe:	f7ff ba3f 	b.w	800d680 <_port_irq_epilogue>
 800e202:	bf00      	nop
 800e204:	40026400 	.word	0x40026400
 800e208:	20000ef0 	.word	0x20000ef0
 800e20c:	00000000 	.word	0x00000000

0800e210 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e210:	4b08      	ldr	r3, [pc, #32]	; (800e234 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e212:	4809      	ldr	r0, [pc, #36]	; (800e238 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e214:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e216:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e218:	0c09      	lsrs	r1, r1, #16
 800e21a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 800e21e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 800e220:	040c      	lsls	r4, r1, #16
 800e222:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800e224:	b10a      	cbz	r2, 800e22a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800e226:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800e228:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e22e:	f7ff ba27 	b.w	800d680 <_port_irq_epilogue>
 800e232:	bf00      	nop
 800e234:	40026400 	.word	0x40026400
 800e238:	20000ef0 	.word	0x20000ef0
 800e23c:	00000000 	.word	0x00000000

0800e240 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e240:	4b08      	ldr	r3, [pc, #32]	; (800e264 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e242:	4809      	ldr	r0, [pc, #36]	; (800e268 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e244:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e246:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e248:	0d89      	lsrs	r1, r1, #22
 800e24a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 800e24e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 800e250:	058c      	lsls	r4, r1, #22
 800e252:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800e254:	b10a      	cbz	r2, 800e25a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800e256:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800e258:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e25e:	f7ff ba0f 	b.w	800d680 <_port_irq_epilogue>
 800e262:	bf00      	nop
 800e264:	40026400 	.word	0x40026400
 800e268:	20000ef0 	.word	0x20000ef0
 800e26c:	00000000 	.word	0x00000000

0800e270 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800e270:	490e      	ldr	r1, [pc, #56]	; (800e2ac <dmaInit+0x3c>)
 800e272:	4a0f      	ldr	r2, [pc, #60]	; (800e2b0 <dmaInit+0x40>)
 800e274:	480f      	ldr	r0, [pc, #60]	; (800e2b4 <dmaInit+0x44>)
 800e276:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800e278:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 800e27a:	600b      	str	r3, [r1, #0]
 800e27c:	4c0e      	ldr	r4, [pc, #56]	; (800e2b8 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800e27e:	4619      	mov	r1, r3
 800e280:	e001      	b.n	800e286 <dmaInit+0x16>
 800e282:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800e286:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800e288:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e28c:	3301      	adds	r3, #1
 800e28e:	2b10      	cmp	r3, #16
 800e290:	f102 020c 	add.w	r2, r2, #12
 800e294:	d1f5      	bne.n	800e282 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e296:	4909      	ldr	r1, [pc, #36]	; (800e2bc <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800e298:	4a09      	ldr	r2, [pc, #36]	; (800e2c0 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800e29a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e29e:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a2:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 800e2a4:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800e2a6:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800e2a8:	60d3      	str	r3, [r2, #12]
}
 800e2aa:	4770      	bx	lr
 800e2ac:	20000f70 	.word	0x20000f70
 800e2b0:	080129dc 	.word	0x080129dc
 800e2b4:	40026010 	.word	0x40026010
 800e2b8:	20000ef0 	.word	0x20000ef0
 800e2bc:	40026000 	.word	0x40026000
 800e2c0:	40026400 	.word	0x40026400
	...

0800e2d0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800e2d2:	4f1f      	ldr	r7, [pc, #124]	; (800e350 <dmaStreamAllocate+0x80>)
 800e2d4:	7a46      	ldrb	r6, [r0, #9]
 800e2d6:	683d      	ldr	r5, [r7, #0]
 800e2d8:	2401      	movs	r4, #1
 800e2da:	fa04 fe06 	lsl.w	lr, r4, r6
 800e2de:	ea1e 0f05 	tst.w	lr, r5
 800e2e2:	d131      	bne.n	800e348 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e2e4:	4c1b      	ldr	r4, [pc, #108]	; (800e354 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e2e6:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e2ea:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e2ee:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e2f2:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e2f4:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e2f8:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e2fc:	d004      	beq.n	800e308 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 800e2fe:	4c16      	ldr	r4, [pc, #88]	; (800e358 <dmaStreamAllocate+0x88>)
 800e300:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e306:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800e308:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800e30c:	d116      	bne.n	800e33c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e30e:	6805      	ldr	r5, [r0, #0]
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	f023 031f 	bic.w	r3, r3, #31
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	682b      	ldr	r3, [r5, #0]
 800e31a:	f013 0401 	ands.w	r4, r3, #1
 800e31e:	d1fb      	bne.n	800e318 <dmaStreamAllocate+0x48>
 800e320:	7a07      	ldrb	r7, [r0, #8]
 800e322:	6846      	ldr	r6, [r0, #4]
 800e324:	233d      	movs	r3, #61	; 0x3d
 800e326:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e328:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e32a:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800e32c:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e32e:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800e330:	b162      	cbz	r2, 800e34c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 800e332:	7a80      	ldrb	r0, [r0, #10]
 800e334:	f7ff fdf4 	bl	800df20 <nvicEnableVector>

  return FALSE;
 800e338:	4620      	mov	r0, r4
 800e33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 800e33c:	4c06      	ldr	r4, [pc, #24]	; (800e358 <dmaStreamAllocate+0x88>)
 800e33e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e344:	6323      	str	r3, [r4, #48]	; 0x30
 800e346:	e7e2      	b.n	800e30e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 800e348:	4620      	mov	r0, r4
 800e34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 800e34c:	4610      	mov	r0, r2
}
 800e34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e350:	20000f70 	.word	0x20000f70
 800e354:	20000ef0 	.word	0x20000ef0
 800e358:	40023800 	.word	0x40023800
 800e35c:	00000000 	.word	0x00000000

0800e360 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e360:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <hal_lld_init+0x60>)
 800e362:	f04f 31ff 	mov.w	r1, #4294967295
 800e366:	691a      	ldr	r2, [r3, #16]
 800e368:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800e36a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e36c:	6119      	str	r1, [r3, #16]
 800e36e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800e370:	6958      	ldr	r0, [r3, #20]
 800e372:	6159      	str	r1, [r3, #20]
 800e374:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e376:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800e378:	4c12      	ldr	r4, [pc, #72]	; (800e3c4 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e37a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800e37e:	6218      	str	r0, [r3, #32]
 800e380:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800e382:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e384:	6259      	str	r1, [r3, #36]	; 0x24
 800e386:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800e388:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e38a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800e38e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800e390:	6821      	ldr	r1, [r4, #0]
 800e392:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e396:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800e398:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e39a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800e39e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e3a2:	d003      	beq.n	800e3ac <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800e3a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e3a8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800e3aa:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800e3ac:	4a05      	ldr	r2, [pc, #20]	; (800e3c4 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800e3ae:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800e3b2:	6853      	ldr	r3, [r2, #4]
 800e3b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3b8:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800e3ba:	f7ff bf59 	b.w	800e270 <dmaInit>
 800e3be:	bf00      	nop
 800e3c0:	40023800 	.word	0x40023800
 800e3c4:	40007000 	.word	0x40007000
	...

0800e3d0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e3d0:	492c      	ldr	r1, [pc, #176]	; (800e484 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e3d2:	4b2d      	ldr	r3, [pc, #180]	; (800e488 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e3d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e3d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e3dc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e3de:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800e3e0:	680b      	ldr	r3, [r1, #0]
 800e3e2:	f043 0301 	orr.w	r3, r3, #1
 800e3e6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800e3e8:	680a      	ldr	r2, [r1, #0]
 800e3ea:	4b26      	ldr	r3, [pc, #152]	; (800e484 <stm32_clock_init+0xb4>)
 800e3ec:	0790      	lsls	r0, r2, #30
 800e3ee:	d5fb      	bpl.n	800e3e8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800e3f0:	689a      	ldr	r2, [r3, #8]
 800e3f2:	f022 0203 	bic.w	r2, r2, #3
 800e3f6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800e3f8:	689a      	ldr	r2, [r3, #8]
 800e3fa:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	688b      	ldr	r3, [r1, #8]
 800e400:	4a20      	ldr	r2, [pc, #128]	; (800e484 <stm32_clock_init+0xb4>)
 800e402:	f013 030c 	ands.w	r3, r3, #12
 800e406:	d1fa      	bne.n	800e3fe <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800e408:	6811      	ldr	r1, [r2, #0]
 800e40a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800e40e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800e410:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 800e412:	6813      	ldr	r3, [r2, #0]
 800e414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e418:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800e41a:	6811      	ldr	r1, [r2, #0]
 800e41c:	4b19      	ldr	r3, [pc, #100]	; (800e484 <stm32_clock_init+0xb4>)
 800e41e:	0389      	lsls	r1, r1, #14
 800e420:	d5fb      	bpl.n	800e41a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800e422:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e424:	f042 0201 	orr.w	r2, r2, #1
 800e428:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800e42a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e42c:	4915      	ldr	r1, [pc, #84]	; (800e484 <stm32_clock_init+0xb4>)
 800e42e:	0790      	lsls	r0, r2, #30
 800e430:	d5fb      	bpl.n	800e42a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800e432:	4b16      	ldr	r3, [pc, #88]	; (800e48c <stm32_clock_init+0xbc>)
 800e434:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e436:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e438:	4a13      	ldr	r2, [pc, #76]	; (800e488 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e43a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e43e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e440:	6853      	ldr	r3, [r2, #4]
 800e442:	0459      	lsls	r1, r3, #17
 800e444:	d5fc      	bpl.n	800e440 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800e446:	490f      	ldr	r1, [pc, #60]	; (800e484 <stm32_clock_init+0xb4>)
 800e448:	680a      	ldr	r2, [r1, #0]
 800e44a:	4b0e      	ldr	r3, [pc, #56]	; (800e484 <stm32_clock_init+0xb4>)
 800e44c:	0192      	lsls	r2, r2, #6
 800e44e:	d5fb      	bpl.n	800e448 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e450:	4a0f      	ldr	r2, [pc, #60]	; (800e490 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800e452:	4910      	ldr	r1, [pc, #64]	; (800e494 <stm32_clock_init+0xc4>)
 800e454:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e456:	f240 7105 	movw	r1, #1797	; 0x705
 800e45a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800e45c:	689a      	ldr	r2, [r3, #8]
 800e45e:	f042 0202 	orr.w	r2, r2, #2
 800e462:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800e464:	461a      	mov	r2, r3
 800e466:	6893      	ldr	r3, [r2, #8]
 800e468:	4906      	ldr	r1, [pc, #24]	; (800e484 <stm32_clock_init+0xb4>)
 800e46a:	f003 030c 	and.w	r3, r3, #12
 800e46e:	2b08      	cmp	r3, #8
 800e470:	d1f9      	bne.n	800e466 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800e472:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800e474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e478:	644b      	str	r3, [r1, #68]	; 0x44
 800e47a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e47c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e480:	664b      	str	r3, [r1, #100]	; 0x64
 800e482:	4770      	bx	lr
 800e484:	40023800 	.word	0x40023800
 800e488:	40007000 	.word	0x40007000
 800e48c:	07405408 	.word	0x07405408
 800e490:	40023c00 	.word	0x40023c00
 800e494:	38089400 	.word	0x38089400
	...

0800e4a0 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800e4a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e4a2:	4c43      	ldr	r4, [pc, #268]	; (800e5b0 <can_lld_set_filters+0x110>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e4a4:	4d43      	ldr	r5, [pc, #268]	; (800e5b4 <can_lld_set_filters+0x114>)
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e4ac:	6423      	str	r3, [r4, #64]	; 0x40

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e4ae:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800e4b2:	0c1b      	lsrs	r3, r3, #16
 800e4b4:	041b      	lsls	r3, r3, #16
 800e4b6:	f043 0301 	orr.w	r3, r3, #1
 800e4ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e4be:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  if (num > 0) {
 800e4c2:	2900      	cmp	r1, #0
 800e4c4:	d05a      	beq.n	800e57c <can_lld_set_filters+0xdc>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e4cc:	4618      	mov	r0, r3
  if (num > 0) {
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
 800e4ce:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
      CAN1->sFilterRegister[i].FR1 = 0;
 800e4d2:	461c      	mov	r4, r3
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
 800e4d4:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800e4d8:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800e4dc:	00c3      	lsls	r3, r0, #3
 800e4de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4e2:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800e4ea:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800e4ee:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e4f2:	d1f3      	bne.n	800e4dc <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800e4f4:	4d2f      	ldr	r5, [pc, #188]	; (800e5b4 <can_lld_set_filters+0x114>)
 800e4f6:	2600      	movs	r6, #0
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 800e4f8:	2701      	movs	r7, #1
 800e4fa:	6810      	ldr	r0, [r2, #0]
      if (cfp->mode)
 800e4fc:	7914      	ldrb	r4, [r2, #4]
 800e4fe:	00c3      	lsls	r3, r0, #3
 800e500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e504:	f014 0f01 	tst.w	r4, #1
 800e508:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e50c:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800e510:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 800e514:	d005      	beq.n	800e522 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800e516:	f8d5 e204 	ldr.w	lr, [r5, #516]	; 0x204
 800e51a:	ea40 0e0e 	orr.w	lr, r0, lr
 800e51e:	f8c5 e204 	str.w	lr, [r5, #516]	; 0x204
      if (cfp->scale)
 800e522:	f014 0f02 	tst.w	r4, #2
 800e526:	d005      	beq.n	800e534 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800e528:	f8d5 e20c 	ldr.w	lr, [r5, #524]	; 0x20c
 800e52c:	ea40 0e0e 	orr.w	lr, r0, lr
 800e530:	f8c5 e20c 	str.w	lr, [r5, #524]	; 0x20c
      if (cfp->assignment)
 800e534:	0764      	lsls	r4, r4, #29
 800e536:	d504      	bpl.n	800e542 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800e538:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800e53c:	4304      	orrs	r4, r0
 800e53e:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800e542:	6894      	ldr	r4, [r2, #8]
 800e544:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800e548:	68d4      	ldr	r4, [r2, #12]
 800e54a:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800e54e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e552:	42b1      	cmp	r1, r6
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800e554:	ea40 0003 	orr.w	r0, r0, r3
      cfp++;
 800e558:	f102 0210 	add.w	r2, r2, #16
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800e55c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e560:	d1cb      	bne.n	800e4fa <can_lld_set_filters+0x5a>
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e562:	4914      	ldr	r1, [pc, #80]	; (800e5b4 <can_lld_set_filters+0x114>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e564:	4a12      	ldr	r2, [pc, #72]	; (800e5b0 <can_lld_set_filters+0x110>)
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e566:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800e56a:	f023 0301 	bic.w	r3, r3, #1
 800e56e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e572:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e574:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e578:	6413      	str	r3, [r2, #64]	; 0x40
 800e57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e57c:	00c2      	lsls	r2, r0, #3
 800e57e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
    CAN1->FFA1R = 0;
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800e582:	2301      	movs	r3, #1
 800e584:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800e588:	4083      	lsls	r3, r0
 800e58a:	f043 0301 	orr.w	r3, r3, #1
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 800e58e:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800e592:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800e596:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800e59a:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
#endif
    CAN1->FM1R = 0;
 800e59e:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    CAN1->FFA1R = 0;
 800e5a2:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800e5a6:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800e5aa:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 800e5ae:	e7d8      	b.n	800e562 <can_lld_set_filters+0xc2>
 800e5b0:	40023800 	.word	0x40023800
 800e5b4:	40006400 	.word	0x40006400
	...

0800e5c0 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800e5c0:	b510      	push	{r4, lr}
 * @notapi
 */
static void can_lld_tx_handler(CANDriver *canp) {

  /* No more events until a message is transmitted.*/
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800e5c2:	4c0c      	ldr	r4, [pc, #48]	; (800e5f4 <Vector8C+0x34>)
 800e5c4:	490c      	ldr	r1, [pc, #48]	; (800e5f8 <Vector8C+0x38>)
 800e5c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5c8:	2320      	movs	r3, #32
 800e5ca:	6091      	str	r1, [r2, #8]
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	f104 0008 	add.w	r0, r4, #8
 800e5d6:	f7fe fd93 	bl	800d100 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e5da:	f104 001c 	add.w	r0, r4, #28
 800e5de:	2101      	movs	r1, #1
 800e5e0:	f7fe fe46 	bl	800d270 <chEvtBroadcastFlagsI>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e5ee:	f7ff b847 	b.w	800d680 <_port_irq_epilogue>
 800e5f2:	bf00      	nop
 800e5f4:	20000f74 	.word	0x20000f74
 800e5f8:	00010101 	.word	0x00010101
 800e5fc:	00000000 	.word	0x00000000

0800e600 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800e600:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 800e602:	4d16      	ldr	r5, [pc, #88]	; (800e65c <Vector90+0x5c>)
 800e604:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e606:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800e608:	07a2      	lsls	r2, r4, #30
 800e60a:	d111      	bne.n	800e630 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800e60c:	06e3      	lsls	r3, r4, #27
 800e60e:	d50b      	bpl.n	800e628 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800e610:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e612:	2110      	movs	r1, #16
 800e614:	60d9      	str	r1, [r3, #12]
 800e616:	2320      	movs	r3, #32
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	4810      	ldr	r0, [pc, #64]	; (800e660 <Vector90+0x60>)
 800e61e:	f7fe fe27 	bl	800d270 <chEvtBroadcastFlagsI>
 800e622:	2300      	movs	r3, #0
 800e624:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e62c:	f7ff b828 	b.w	800d680 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800e630:	695a      	ldr	r2, [r3, #20]
 800e632:	f022 0202 	bic.w	r2, r2, #2
 800e636:	615a      	str	r2, [r3, #20]
 800e638:	2320      	movs	r3, #32
 800e63a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e63e:	2100      	movs	r1, #0
 800e640:	f105 0010 	add.w	r0, r5, #16
 800e644:	f7fe fd5c 	bl	800d100 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e648:	f105 0018 	add.w	r0, r5, #24
 800e64c:	2101      	movs	r1, #1
 800e64e:	f7fe fe0f 	bl	800d270 <chEvtBroadcastFlagsI>
 800e652:	2300      	movs	r3, #0
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	e7d8      	b.n	800e60c <Vector90+0xc>
 800e65a:	bf00      	nop
 800e65c:	20000f74 	.word	0x20000f74
 800e660:	20000f94 	.word	0x20000f94
	...

0800e670 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800e670:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 800e672:	4d16      	ldr	r5, [pc, #88]	; (800e6cc <Vector94+0x5c>)
 800e674:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e676:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800e678:	07a2      	lsls	r2, r4, #30
 800e67a:	d111      	bne.n	800e6a0 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800e67c:	06e3      	lsls	r3, r4, #27
 800e67e:	d50b      	bpl.n	800e698 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800e680:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e682:	2110      	movs	r1, #16
 800e684:	6119      	str	r1, [r3, #16]
 800e686:	2320      	movs	r3, #32
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	4810      	ldr	r0, [pc, #64]	; (800e6d0 <Vector94+0x60>)
 800e68e:	f7fe fdef 	bl	800d270 <chEvtBroadcastFlagsI>
 800e692:	2300      	movs	r3, #0
 800e694:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e69c:	f7fe bff0 	b.w	800d680 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800e6a0:	695a      	ldr	r2, [r3, #20]
 800e6a2:	f022 0210 	bic.w	r2, r2, #16
 800e6a6:	615a      	str	r2, [r3, #20]
 800e6a8:	2320      	movs	r3, #32
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	f105 0010 	add.w	r0, r5, #16
 800e6b4:	f7fe fd24 	bl	800d100 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e6b8:	f105 0018 	add.w	r0, r5, #24
 800e6bc:	2102      	movs	r1, #2
 800e6be:	f7fe fdd7 	bl	800d270 <chEvtBroadcastFlagsI>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f383 8811 	msr	BASEPRI, r3
 800e6c8:	e7d8      	b.n	800e67c <Vector94+0xc>
 800e6ca:	bf00      	nop
 800e6cc:	20000f74 	.word	0x20000f74
 800e6d0:	20000f94 	.word	0x20000f94
	...

0800e6e0 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  msr = canp->can->MSR;
 800e6e2:	4d1b      	ldr	r5, [pc, #108]	; (800e750 <Vector98+0x70>)
 800e6e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e6e6:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800e6e8:	221c      	movs	r2, #28
 800e6ea:	605a      	str	r2, [r3, #4]
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800e6ec:	0722      	lsls	r2, r4, #28
 800e6ee:	d41d      	bmi.n	800e72c <Vector98+0x4c>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800e6f0:	0763      	lsls	r3, r4, #29
 800e6f2:	d517      	bpl.n	800e724 <Vector98+0x44>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 800e6f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e6f6:	6993      	ldr	r3, [r2, #24]

    canp->can->ESR &= ~CAN_ESR_LEC;
 800e6f8:	6991      	ldr	r1, [r2, #24]
 800e6fa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800e6fe:	6191      	str	r1, [r2, #24]
    flags = (eventflags_t)(esr & 7);
    if ((esr & CAN_ESR_LEC) > 0)
 800e700:	f013 0f70 	tst.w	r3, #112	; 0x70
  if (msr & CAN_MSR_ERRI) {
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;

    canp->can->ESR &= ~CAN_ESR_LEC;
    flags = (eventflags_t)(esr & 7);
 800e704:	f003 0107 	and.w	r1, r3, #7
    if ((esr & CAN_ESR_LEC) > 0)
      flags |= CAN_FRAMING_ERROR;
 800e708:	bf18      	it	ne
 800e70a:	f041 0108 	orrne.w	r1, r1, #8
 800e70e:	2220      	movs	r2, #32
 800e710:	f382 8811 	msr	BASEPRI, r2
 800e714:	480f      	ldr	r0, [pc, #60]	; (800e754 <Vector98+0x74>)
 800e716:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e71a:	f7fe fda9 	bl	800d270 <chEvtBroadcastFlagsI>
 800e71e:	2300      	movs	r3, #0
 800e720:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e728:	f7fe bfaa 	b.w	800d680 <_port_irq_epilogue>
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e72c:	681a      	ldr	r2, [r3, #0]
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800e72e:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e730:	f022 0202 	bic.w	r2, r2, #2
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800e734:	2103      	movs	r1, #3
 800e736:	f800 1b28 	strb.w	r1, [r0], #40
 800e73a:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	f381 8811 	msr	BASEPRI, r1
 800e742:	2100      	movs	r1, #0
 800e744:	f7fe fd94 	bl	800d270 <chEvtBroadcastFlagsI>
 800e748:	2300      	movs	r3, #0
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	e7cf      	b.n	800e6f0 <Vector98+0x10>
 800e750:	20000f74 	.word	0x20000f74
 800e754:	20000f94 	.word	0x20000f94
	...

0800e760 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800e760:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800e762:	4c06      	ldr	r4, [pc, #24]	; (800e77c <can_lld_init+0x1c>)
 800e764:	4620      	mov	r0, r4
 800e766:	f7fe ffe3 	bl	800d730 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e76a:	2200      	movs	r2, #0
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800e76c:	4b04      	ldr	r3, [pc, #16]	; (800e780 <can_lld_init+0x20>)
 800e76e:	62e3      	str	r3, [r4, #44]	; 0x2c
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e770:	4611      	mov	r1, r2
 800e772:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800e774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e778:	f7ff be92 	b.w	800e4a0 <can_lld_set_filters>
 800e77c:	20000f74 	.word	0x20000f74
 800e780:	40006400 	.word	0x40006400
	...

0800e790 <can_lld_start>:
 */
void can_lld_start(CANDriver *canp) {

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
 800e790:	4b18      	ldr	r3, [pc, #96]	; (800e7f4 <can_lld_start+0x64>)
 800e792:	4298      	cmp	r0, r3
 *
 * @param[in] canp      pointer to the @p CANDriver object
 *
 * @notapi
 */
void can_lld_start(CANDriver *canp) {
 800e794:	b510      	push	{r4, lr}
 800e796:	4604      	mov	r4, r0

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
 800e798:	d015      	beq.n	800e7c6 <can_lld_start+0x36>
    rccEnableCAN2(FALSE);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 800e79a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e79c:	2201      	movs	r2, #1
 800e79e:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	07d1      	lsls	r1, r2, #31
 800e7a4:	d407      	bmi.n	800e7b6 <can_lld_start+0x26>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	2008      	movs	r0, #8
 800e7aa:	f7fe fb09 	bl	800cdc0 <chSchGoSleepTimeoutS>
 800e7ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	07d2      	lsls	r2, r2, #31
 800e7b4:	d5f7      	bpl.n	800e7a6 <can_lld_start+0x16>
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 800e7b6:	6862      	ldr	r2, [r4, #4]
  canp->can->MCR = canp->config->mcr;

  /* Interrupt sources initialization.*/
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800e7b8:	490f      	ldr	r1, [pc, #60]	; (800e7f8 <can_lld_start+0x68>)

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 800e7ba:	6850      	ldr	r0, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 800e7bc:	6812      	ldr	r2, [r2, #0]

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 800e7be:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 800e7c0:	601a      	str	r2, [r3, #0]

  /* Interrupt sources initialization.*/
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800e7c2:	6159      	str	r1, [r3, #20]
 800e7c4:	bd10      	pop	{r4, pc}
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
#if defined(STM32_CAN1_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN1_UNIFIED_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800e7c6:	210b      	movs	r1, #11
 800e7c8:	2013      	movs	r0, #19
 800e7ca:	f7ff fba9 	bl	800df20 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800e7ce:	210b      	movs	r1, #11
 800e7d0:	2014      	movs	r0, #20
 800e7d2:	f7ff fba5 	bl	800df20 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800e7d6:	210b      	movs	r1, #11
 800e7d8:	2015      	movs	r0, #21
 800e7da:	f7ff fba1 	bl	800df20 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800e7de:	210b      	movs	r1, #11
 800e7e0:	2016      	movs	r0, #22
 800e7e2:	f7ff fb9d 	bl	800df20 <nvicEnableVector>
#endif
    rccEnableCAN1(FALSE);
 800e7e6:	4a05      	ldr	r2, [pc, #20]	; (800e7fc <can_lld_start+0x6c>)
 800e7e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e7ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e7ee:	6413      	str	r3, [r2, #64]	; 0x40
 800e7f0:	e7d3      	b.n	800e79a <can_lld_start+0xa>
 800e7f2:	bf00      	nop
 800e7f4:	20000f74 	.word	0x20000f74
 800e7f8:	00018f5b 	.word	0x00018f5b
 800e7fc:	40023800 	.word	0x40023800

0800e800 <can_lld_is_rx_nonempty>:
 *
 * @notapi
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 800e800:	2901      	cmp	r1, #1
 800e802:	d011      	beq.n	800e828 <can_lld_is_rx_nonempty+0x28>
 800e804:	d30a      	bcc.n	800e81c <can_lld_is_rx_nonempty+0x1c>
 800e806:	2902      	cmp	r1, #2
 800e808:	d106      	bne.n	800e818 <can_lld_is_rx_nonempty+0x18>
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
  case 1:
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
  case 2:
    return (canp->can->RF1R & CAN_RF1R_FMP1) != 0;
 800e80a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e80c:	6918      	ldr	r0, [r3, #16]
 800e80e:	f010 0003 	ands.w	r0, r0, #3
 800e812:	bf18      	it	ne
 800e814:	2001      	movne	r0, #1
 800e816:	4770      	bx	lr
  default:
    return FALSE;
 800e818:	2000      	movs	r0, #0
  }
}
 800e81a:	4770      	bx	lr
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800e81c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e81e:	68da      	ldr	r2, [r3, #12]
 800e820:	0792      	lsls	r2, r2, #30
 800e822:	d0f3      	beq.n	800e80c <can_lld_is_rx_nonempty+0xc>
 800e824:	2001      	movs	r0, #1
 800e826:	4770      	bx	lr
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
  case 1:
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
 800e828:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e82a:	68d8      	ldr	r0, [r3, #12]
 800e82c:	f010 0003 	ands.w	r0, r0, #3
 800e830:	bf18      	it	ne
 800e832:	2001      	movne	r0, #1
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
	...

0800e840 <can_lld_receive>:
 *
 * @notapi
 */
void can_lld_receive(CANDriver *canp,
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
 800e840:	b410      	push	{r4}
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
 800e842:	bb71      	cbnz	r1, 800e8a2 <can_lld_receive+0x62>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 800e844:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e846:	68d9      	ldr	r1, [r3, #12]
 800e848:	0789      	lsls	r1, r1, #30
 800e84a:	d031      	beq.n	800e8b0 <can_lld_receive+0x70>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800e84c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800e850:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800e854:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e858:	60d3      	str	r3, [r2, #12]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800e85a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e85c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800e860:	6113      	str	r3, [r2, #16]

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800e862:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e864:	2020      	movs	r0, #32
 800e866:	60d8      	str	r0, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 800e868:	68d8      	ldr	r0, [r3, #12]
 800e86a:	0780      	lsls	r0, r0, #30
 800e86c:	d03f      	beq.n	800e8ee <can_lld_receive+0xae>
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 800e86e:	7913      	ldrb	r3, [r2, #4]
 800e870:	0860      	lsrs	r0, r4, #1
 800e872:	f360 1304 	bfi	r3, r0, #4, #1
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 800e876:	08a0      	lsrs	r0, r4, #2
 800e878:	f360 1345 	bfi	r3, r0, #5, #1
 800e87c:	7113      	strb	r3, [r2, #4]
  if (crfp->IDE)
 800e87e:	069b      	lsls	r3, r3, #26
 800e880:	d52f      	bpl.n	800e8e2 <can_lld_receive+0xa2>
    crfp->EID = rir >> 3;
 800e882:	6893      	ldr	r3, [r2, #8]
 800e884:	08e4      	lsrs	r4, r4, #3
 800e886:	f364 031c 	bfi	r3, r4, #0, #29
 800e88a:	6093      	str	r3, [r2, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800e88c:	7913      	ldrb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
  crfp->TIME = (uint16_t)(rdtr >> 16);
}
 800e88e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (crfp->IDE)
    crfp->EID = rir >> 3;
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
  crfp->FMI = (uint8_t)(rdtr >> 8);
 800e892:	0a08      	lsrs	r0, r1, #8
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
    crfp->EID = rir >> 3;
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800e894:	f361 0303 	bfi	r3, r1, #0, #4
  crfp->FMI = (uint8_t)(rdtr >> 8);
  crfp->TIME = (uint16_t)(rdtr >> 16);
 800e898:	0c09      	lsrs	r1, r1, #16
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
    crfp->EID = rir >> 3;
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800e89a:	7113      	strb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 800e89c:	7010      	strb	r0, [r2, #0]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 800e89e:	8051      	strh	r1, [r2, #2]
}
 800e8a0:	4770      	bx	lr
    else {
      /* Should not happen, do nothing.*/
      return;
    }
  }
  switch (mailbox) {
 800e8a2:	2901      	cmp	r1, #1
 800e8a4:	d028      	beq.n	800e8f8 <can_lld_receive+0xb8>
 800e8a6:	2902      	cmp	r1, #2
 800e8a8:	d028      	beq.n	800e8fc <can_lld_receive+0xbc>
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
  crfp->FMI = (uint8_t)(rdtr >> 8);
  crfp->TIME = (uint16_t)(rdtr >> 16);
}
 800e8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ae:	4770      	bx	lr
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
      mailbox = 1;
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 800e8b0:	6919      	ldr	r1, [r3, #16]
 800e8b2:	078c      	lsls	r4, r1, #30
 800e8b4:	d0f9      	beq.n	800e8aa <can_lld_receive+0x6a>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
      canp->can->IER |= CAN_IER_FMPIE0;
    break;
  case 2:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[1].RIR;
 800e8b6:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 800e8ba:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 800e8be:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800e8c2:	60d3      	str	r3, [r2, #12]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 800e8c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e8c6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800e8ca:	6113      	str	r3, [r2, #16]

    /* Releases the mailbox.*/
    canp->can->RF1R = CAN_RF1R_RFOM1;
 800e8cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e8ce:	2020      	movs	r0, #32
 800e8d0:	6118      	str	r0, [r3, #16]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 800e8d2:	6918      	ldr	r0, [r3, #16]
 800e8d4:	0780      	lsls	r0, r0, #30
 800e8d6:	d1ca      	bne.n	800e86e <can_lld_receive+0x2e>
      canp->can->IER |= CAN_IER_FMPIE1;
 800e8d8:	6958      	ldr	r0, [r3, #20]
 800e8da:	f040 0010 	orr.w	r0, r0, #16
 800e8de:	6158      	str	r0, [r3, #20]
 800e8e0:	e7c5      	b.n	800e86e <can_lld_receive+0x2e>
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
    crfp->EID = rir >> 3;
  else
    crfp->SID = rir >> 21;
 800e8e2:	8913      	ldrh	r3, [r2, #8]
 800e8e4:	0d64      	lsrs	r4, r4, #21
 800e8e6:	f364 030a 	bfi	r3, r4, #0, #11
 800e8ea:	8113      	strh	r3, [r2, #8]
 800e8ec:	e7ce      	b.n	800e88c <can_lld_receive+0x4c>
    canp->can->RF0R = CAN_RF0R_RFOM0;

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
      canp->can->IER |= CAN_IER_FMPIE0;
 800e8ee:	6958      	ldr	r0, [r3, #20]
 800e8f0:	f040 0002 	orr.w	r0, r0, #2
 800e8f4:	6158      	str	r0, [r3, #20]
 800e8f6:	e7ba      	b.n	800e86e <can_lld_receive+0x2e>
 800e8f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e8fa:	e7a7      	b.n	800e84c <can_lld_receive+0xc>
 800e8fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e8fe:	e7da      	b.n	800e8b6 <can_lld_receive+0x76>

0800e900 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800e900:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e902:	4d65      	ldr	r5, [pc, #404]	; (800ea98 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e904:	4c65      	ldr	r4, [pc, #404]	; (800ea9c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e906:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e908:	4965      	ldr	r1, [pc, #404]	; (800eaa0 <_pal_lld_init+0x1a0>)
 800e90a:	4a66      	ldr	r2, [pc, #408]	; (800eaa4 <_pal_lld_init+0x1a4>)
 800e90c:	4b66      	ldr	r3, [pc, #408]	; (800eaa8 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e90e:	f240 16ff 	movw	r6, #511	; 0x1ff
 800e912:	4337      	orrs	r7, r6
 800e914:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800e916:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800e918:	433e      	orrs	r6, r7
 800e91a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e91c:	6845      	ldr	r5, [r0, #4]
 800e91e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e920:	6885      	ldr	r5, [r0, #8]
 800e922:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800e924:	68c5      	ldr	r5, [r0, #12]
 800e926:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800e928:	6905      	ldr	r5, [r0, #16]
 800e92a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800e92c:	6945      	ldr	r5, [r0, #20]
 800e92e:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800e930:	6985      	ldr	r5, [r0, #24]
 800e932:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e934:	6805      	ldr	r5, [r0, #0]
 800e936:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e938:	6a04      	ldr	r4, [r0, #32]
 800e93a:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e93c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e93e:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800e940:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e942:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800e944:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e946:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800e948:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e94a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800e94c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e94e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e950:	69c4      	ldr	r4, [r0, #28]
 800e952:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e954:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800e956:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e958:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800e95a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800e95c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800e95e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800e960:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800e962:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800e964:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e966:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800e968:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800e96a:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e96c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800e96e:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e970:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800e972:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e974:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e976:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800e978:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e97a:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800e97c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800e97e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800e980:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800e982:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800e984:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800e986:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e988:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800e98a:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e98c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e98e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800e992:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800e994:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800e998:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800e99a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800e99e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800e9a2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800e9a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e9aa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800e9ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e9b2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800e9b6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800e9b8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e9bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e9c0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800e9c4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800e9c8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800e9cc:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800e9d0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800e9d4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800e9d8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800e9dc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800e9e0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800e9e4:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800e9e8:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800e9ec:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800e9f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e9f4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800e9f8:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800e9fc:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e9fe:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800ea02:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800ea04:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800ea08:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800ea0a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800ea0e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800ea10:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800ea14:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800ea16:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800ea1a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800ea1c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800ea20:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800ea22:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800ea26:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800ea2a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800ea2e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800ea32:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800ea36:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800ea3a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800ea3e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800ea42:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800ea46:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800ea4a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800ea4e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800ea52:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800ea56:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800ea5a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800ea5e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800ea62:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800ea66:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800ea6a:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800ea6e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800ea72:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800ea76:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800ea7a:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800ea7e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800ea82:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800ea86:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800ea8a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800ea8e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 800ea92:	bcf0      	pop	{r4, r5, r6, r7}
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	40023800 	.word	0x40023800
 800ea9c:	40020000 	.word	0x40020000
 800eaa0:	40020400 	.word	0x40020400
 800eaa4:	40020800 	.word	0x40020800
 800eaa8:	40020c00 	.word	0x40020c00
 800eaac:	00000000 	.word	0x00000000

0800eab0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800eab4:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800eab8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800eabc:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800eac0:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800eac4:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800eac8:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800eaca:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800eace:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800ead2:	f04f 0803 	mov.w	r8, #3
 800ead6:	e030      	b.n	800eb3a <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800ead8:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800eadc:	ea2b 0303 	bic.w	r3, fp, r3
 800eae0:	ea43 030a 	orr.w	r3, r3, sl
 800eae4:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800eae6:	6843      	ldr	r3, [r0, #4]
 800eae8:	fa09 fa04 	lsl.w	sl, r9, r4
 800eaec:	ea23 030a 	bic.w	r3, r3, sl
 800eaf0:	433b      	orrs	r3, r7
 800eaf2:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800eaf4:	0063      	lsls	r3, r4, #1
 800eaf6:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800eafa:	fa08 f303 	lsl.w	r3, r8, r3
 800eafe:	43db      	mvns	r3, r3
 800eb00:	ea0a 0a03 	and.w	sl, sl, r3
 800eb04:	ea4a 0a06 	orr.w	sl, sl, r6
 800eb08:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800eb0c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800eb10:	ea03 0a0a 	and.w	sl, r3, sl
 800eb14:	ea4a 0a05 	orr.w	sl, sl, r5
 800eb18:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800eb1c:	f8d0 a000 	ldr.w	sl, [r0]
 800eb20:	ea03 030a 	and.w	r3, r3, sl
 800eb24:	ea43 030e 	orr.w	r3, r3, lr
 800eb28:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800eb2a:	0849      	lsrs	r1, r1, #1
 800eb2c:	d019      	beq.n	800eb62 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800eb2e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800eb30:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800eb32:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800eb34:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800eb38:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800eb3a:	f004 0307 	and.w	r3, r4, #7
 800eb3e:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800eb40:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800eb44:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 800eb48:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800eb4c:	d0ed      	beq.n	800eb2a <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800eb4e:	2c07      	cmp	r4, #7
 800eb50:	d9c2      	bls.n	800ead8 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800eb52:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800eb56:	ea2b 0303 	bic.w	r3, fp, r3
 800eb5a:	ea43 030a 	orr.w	r3, r3, sl
 800eb5e:	6243      	str	r3, [r0, #36]	; 0x24
 800eb60:	e7c1      	b.n	800eae6 <_pal_lld_setgroupmode+0x36>
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb66:	bf00      	nop
	...

0800eb70 <VectorC4>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800eb70:	483a      	ldr	r0, [pc, #232]	; (800ec5c <VectorC4+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800eb72:	4a3b      	ldr	r2, [pc, #236]	; (800ec60 <VectorC4+0xf0>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800eb74:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800eb76:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800eb78:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800eb7a:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800eb7c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800eb80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d04c      	beq.n	800ec22 <VectorC4+0xb2>
 800eb88:	d81e      	bhi.n	800ebc8 <VectorC4+0x58>
 800eb8a:	3a07      	subs	r2, #7
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d03c      	beq.n	800ec0a <VectorC4+0x9a>
 800eb90:	3201      	adds	r2, #1
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d110      	bne.n	800ebb8 <VectorC4+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800eb96:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800eb98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800eb9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800eb9e:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800eba0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	f042 0201 	orr.w	r2, r2, #1
 800eba8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800ebaa:	6862      	ldr	r2, [r4, #4]
 800ebac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ebb0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d94b      	bls.n	800ec50 <VectorC4+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800ebb8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800ebbc:	bf18      	it	ne
 800ebbe:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ebc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800ebc4:	f7fe bd5c 	b.w	800d680 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ebc8:	4a26      	ldr	r2, [pc, #152]	; (800ec64 <VectorC4+0xf4>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d012      	beq.n	800ebf4 <VectorC4+0x84>
 800ebce:	3202      	adds	r2, #2
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d1f1      	bne.n	800ebb8 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800ebd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	685e      	ldr	r6, [r3, #4]
 800ebda:	b33e      	cbz	r6, 800ec2c <VectorC4+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ebdc:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800ebde:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ebe0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800ebe4:	f042 0201 	orr.w	r2, r2, #1
 800ebe8:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ebea:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ebec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800ebf0:	f7fe bd46 	b.w	800d680 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ebf4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ebf6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ebf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800ebfc:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ebfe:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ec00:	6813      	ldr	r3, [r2, #0]
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	e7d6      	b.n	800ebb8 <VectorC4+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800ec0a:	8c03      	ldrh	r3, [r0, #32]
 800ec0c:	0a1a      	lsrs	r2, r3, #8
 800ec0e:	d00b      	beq.n	800ec28 <VectorC4+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800ec10:	f003 0301 	and.w	r3, r3, #1
 800ec14:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800ec18:	f002 0206 	and.w	r2, r2, #6
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	e7ca      	b.n	800ebb8 <VectorC4+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800ec22:	8c03      	ldrh	r3, [r0, #32]
 800ec24:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800ec28:	6123      	str	r3, [r4, #16]
 800ec2a:	e7c5      	b.n	800ebb8 <VectorC4+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ec2c:	6863      	ldr	r3, [r4, #4]
 800ec2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec32:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec3a:	6023      	str	r3, [r4, #0]
 800ec3c:	2320      	movs	r3, #32
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800ec42:	301c      	adds	r0, #28
 800ec44:	4631      	mov	r1, r6
 800ec46:	f7fe fa23 	bl	800d090 <chThdResumeI>
 800ec4a:	f386 8811 	msr	BASEPRI, r6
 800ec4e:	e7b3      	b.n	800ebb8 <VectorC4+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec56:	6023      	str	r3, [r4, #0]
 800ec58:	e7ae      	b.n	800ebb8 <VectorC4+0x48>
 800ec5a:	bf00      	nop
 800ec5c:	20000fa4 	.word	0x20000fa4
 800ec60:	00030008 	.word	0x00030008
 800ec64:	00070082 	.word	0x00070082
	...

0800ec70 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800ec70:	4833      	ldr	r0, [pc, #204]	; (800ed40 <VectorC8+0xd0>)
/**
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800ec72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 800ec74:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec76:	6b07      	ldr	r7, [r0, #48]	; 0x30
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800ec78:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec7a:	683a      	ldr	r2, [r7, #0]
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800ec7c:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800ec7e:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 800ec82:	43db      	mvns	r3, r3
 800ec84:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec86:	6813      	ldr	r3, [r2, #0]
 800ec88:	f023 031f 	bic.w	r3, r3, #31
 800ec8c:	6013      	str	r3, [r2, #0]
 800ec8e:	6813      	ldr	r3, [r2, #0]
 800ec90:	07db      	lsls	r3, r3, #31
 800ec92:	d4fc      	bmi.n	800ec8e <VectorC8+0x1e>
 800ec94:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800ec96:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec98:	687f      	ldr	r7, [r7, #4]
 800ec9a:	233d      	movs	r3, #61	; 0x3d
 800ec9c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800ec9e:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eca0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800eca2:	6813      	ldr	r3, [r2, #0]
 800eca4:	f023 031f 	bic.w	r3, r3, #31
 800eca8:	6013      	str	r3, [r2, #0]
 800ecaa:	6813      	ldr	r3, [r2, #0]
 800ecac:	f013 0301 	ands.w	r3, r3, #1
 800ecb0:	d1fb      	bne.n	800ecaa <VectorC8+0x3a>
 800ecb2:	7a2f      	ldrb	r7, [r5, #8]
 800ecb4:	686d      	ldr	r5, [r5, #4]
 800ecb6:	223d      	movs	r2, #61	; 0x3d
 800ecb8:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800ecba:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800ecbc:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800ecbe:	bf48      	it	mi
 800ecc0:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800ecc2:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800ecc4:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800ecc6:	bf44      	itt	mi
 800ecc8:	f043 0302 	orrmi.w	r3, r3, #2
 800eccc:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800ecce:	054a      	lsls	r2, r1, #21
 800ecd0:	d50a      	bpl.n	800ece8 <VectorC8+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800ecd2:	6862      	ldr	r2, [r4, #4]
 800ecd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ecd8:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800ecda:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800ecdc:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800ece0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ece4:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800ece6:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800ece8:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800ecea:	bf44      	itt	mi
 800ecec:	f043 0308 	orrmi.w	r3, r3, #8
 800ecf0:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800ecf2:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800ecf4:	bf44      	itt	mi
 800ecf6:	f043 0320 	orrmi.w	r3, r3, #32
 800ecfa:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800ecfc:	04cc      	lsls	r4, r1, #19
 800ecfe:	d513      	bpl.n	800ed28 <VectorC8+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 800ed00:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800ed04:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800ed06:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800ed08:	d416      	bmi.n	800ed38 <VectorC8+0xc8>
 800ed0a:	2320      	movs	r3, #32
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f06f 0101 	mvn.w	r1, #1
 800ed14:	480b      	ldr	r0, [pc, #44]	; (800ed44 <VectorC8+0xd4>)
 800ed16:	f7fe f9bb 	bl	800d090 <chThdResumeI>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f383 8811 	msr	BASEPRI, r3

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800ed20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800ed24:	f7fe bcac 	b.w	800d680 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800ed28:	0432      	lsls	r2, r6, #16
 800ed2a:	d405      	bmi.n	800ed38 <VectorC8+0xc8>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1ec      	bne.n	800ed0a <VectorC8+0x9a>

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800ed30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800ed34:	f7fe bca4 	b.w	800d680 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800ed38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed3c:	6083      	str	r3, [r0, #8]
 800ed3e:	e7e4      	b.n	800ed0a <VectorC8+0x9a>
 800ed40:	20000fa4 	.word	0x20000fa4
 800ed44:	20000fc0 	.word	0x20000fc0
	...

0800ed50 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800ed50:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800ed52:	4c07      	ldr	r4, [pc, #28]	; (800ed70 <i2c_lld_init+0x20>)
 800ed54:	4620      	mov	r0, r4
 800ed56:	f7fe fd5b 	bl	800d810 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800ed5a:	4b06      	ldr	r3, [pc, #24]	; (800ed74 <i2c_lld_init+0x24>)
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 800ed5c:	4a06      	ldr	r2, [pc, #24]	; (800ed78 <i2c_lld_init+0x28>)
 800ed5e:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800ed60:	2100      	movs	r1, #0
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800ed62:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800ed66:	61e1      	str	r1, [r4, #28]
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800ed68:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800ed6a:	6322      	str	r2, [r4, #48]	; 0x30
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	bf00      	nop
 800ed70:	20000fa4 	.word	0x20000fa4
 800ed74:	080129e8 	.word	0x080129e8
 800ed78:	40005800 	.word	0x40005800
 800ed7c:	00000000 	.word	0x00000000

0800ed80 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800ed80:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800ed82:	4c06      	ldr	r4, [pc, #24]	; (800ed9c <usb_lld_init+0x1c>)
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7fe fe3b 	bl	800da00 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800ed8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800ed8e:	4a04      	ldr	r2, [pc, #16]	; (800eda0 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800ed90:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800ed92:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 800ed94:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800ed96:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800ed98:	6663      	str	r3, [r4, #100]	; 0x64
 800ed9a:	bd10      	pop	{r4, pc}
 800ed9c:	20000fe0 	.word	0x20000fe0
 800eda0:	08012a90 	.word	0x08012a90
	...

0800edb0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800edb2:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800edb4:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800edb6:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800edb8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800edba:	692b      	ldr	r3, [r5, #16]
 800edbc:	f013 0420 	ands.w	r4, r3, #32
 800edc0:	d1fb      	bne.n	800edba <usb_lld_reset+0xa>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800edc2:	200c      	movs	r0, #12
 800edc4:	f7fd ff2c 	bl	800cc20 <chSysPolledDelayX>

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800edc8:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 800edcc:	f8de 6008 	ldr.w	r6, [lr, #8]
 800edd0:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800edd2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 800edd6:	21ff      	movs	r1, #255	; 0xff
 800edd8:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800eddc:	3301      	adds	r3, #1
 800edde:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ede0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800ede4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800ede8:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800edec:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800edf0:	d9f2      	bls.n	800edd8 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800edf2:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800edf6:	f04f 32ff 	mov.w	r2, #4294967295
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800edfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800edfe:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 800ee02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ee04:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ee08:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800ee0a:	f8de 3000 	ldr.w	r3, [lr]
 800ee0e:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800ee10:	2310      	movs	r3, #16
 800ee12:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800ee14:	6913      	ldr	r3, [r2, #16]
 800ee16:	f013 0410 	ands.w	r4, r3, #16
 800ee1a:	d1fb      	bne.n	800ee14 <usb_lld_reset+0x64>
 800ee1c:	200c      	movs	r0, #12
 800ee1e:	f7fd feff 	bl	800cc20 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ee22:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ee26:	4a11      	ldr	r2, [pc, #68]	; (800ee6c <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800ee28:	4811      	ldr	r0, [pc, #68]	; (800ee70 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ee2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ee2e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800ee32:	69ab      	ldr	r3, [r5, #24]
 800ee34:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ee38:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800ee3c:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800ee3e:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800ee40:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800ee44:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800ee48:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800ee4a:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ee4e:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800ee52:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800ee56:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800ee5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800ee5c:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ee60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800ee64:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ee66:	62ab      	str	r3, [r5, #40]	; 0x28
 800ee68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	10008040 	.word	0x10008040
 800ee70:	08012aa0 	.word	0x08012aa0
	...

0800ee80 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800ee80:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800ee82:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800ee86:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800ee8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ee8e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800ee92:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800ee96:	4770      	bx	lr
	...

0800eea0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800eea0:	3158      	adds	r1, #88	; 0x58
 800eea2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eea4:	0149      	lsls	r1, r1, #5
 800eea6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800eea8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800eeac:	d004      	beq.n	800eeb8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800eeae:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800eeb2:	bf14      	ite	ne
 800eeb4:	2001      	movne	r0, #1
 800eeb6:	2002      	moveq	r0, #2
}
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	0000      	movs	r0, r0
	...

0800eec0 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800eec0:	3148      	adds	r1, #72	; 0x48
 800eec2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eec4:	0149      	lsls	r1, r1, #5
 800eec6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800eec8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800eecc:	d004      	beq.n	800eed8 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800eece:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800eed2:	bf14      	ite	ne
 800eed4:	2001      	movne	r0, #1
 800eed6:	2002      	moveq	r0, #2
}
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	0000      	movs	r0, r0
	...

0800eee0 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800eee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eee4:	68cb      	ldr	r3, [r1, #12]
 800eee6:	6a1b      	ldr	r3, [r3, #32]
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	6053      	str	r3, [r2, #4]
 800eeee:	6011      	str	r1, [r2, #0]
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
	...

0800ef00 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ef00:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 800ef04:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ef06:	68dd      	ldr	r5, [r3, #12]
 800ef08:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800ef0a:	6863      	ldr	r3, [r4, #4]
 800ef0c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 800ef0e:	b931      	cbnz	r1, 800ef1e <usb_lld_prepare_receive+0x1e>
 800ef10:	2b40      	cmp	r3, #64	; 0x40
 800ef12:	d904      	bls.n	800ef1e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 800ef14:	2340      	movs	r3, #64	; 0x40
 800ef16:	6063      	str	r3, [r4, #4]
 800ef18:	4a09      	ldr	r2, [pc, #36]	; (800ef40 <usb_lld_prepare_receive+0x40>)
 800ef1a:	243f      	movs	r4, #63	; 0x3f
 800ef1c:	e002      	b.n	800ef24 <usb_lld_prepare_receive+0x24>
 800ef1e:	1e5c      	subs	r4, r3, #1
 800ef20:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ef24:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800ef26:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ef28:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800ef2c:	192b      	adds	r3, r5, r4
 800ef2e:	fbb3 f3f5 	udiv	r3, r3, r5
 800ef32:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 800ef36:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 800ef3a:	bc30      	pop	{r4, r5}
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	60000040 	.word	0x60000040
	...

0800ef50 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ef54:	4e26      	ldr	r6, [pc, #152]	; (800eff0 <otg_epout_handler.constprop.7+0xa0>)
 800ef56:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800ef58:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800ef5c:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800ef5e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 800ef62:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800ef66:	0720      	lsls	r0, r4, #28
 800ef68:	d503      	bpl.n	800ef72 <otg_epout_handler.constprop.7+0x22>
 800ef6a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800ef6e:	0719      	lsls	r1, r3, #28
 800ef70:	d41d      	bmi.n	800efae <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800ef72:	07e2      	lsls	r2, r4, #31
 800ef74:	d519      	bpl.n	800efaa <otg_epout_handler.constprop.7+0x5a>
 800ef76:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800ef7a:	07db      	lsls	r3, r3, #31
 800ef7c:	d515      	bpl.n	800efaa <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ef7e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800ef82:	4c1b      	ldr	r4, [pc, #108]	; (800eff0 <otg_epout_handler.constprop.7+0xa0>)
 800ef84:	68f1      	ldr	r1, [r6, #12]
 800ef86:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 800ef88:	6858      	ldr	r0, [r3, #4]
 800ef8a:	691a      	ldr	r2, [r3, #16]
 800ef8c:	4290      	cmp	r0, r2
 800ef8e:	d316      	bcc.n	800efbe <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800ef90:	8962      	ldrh	r2, [r4, #10]
 800ef92:	68ce      	ldr	r6, [r1, #12]
 800ef94:	2301      	movs	r3, #1
 800ef96:	40ab      	lsls	r3, r5
 800ef98:	ea22 0303 	bic.w	r3, r2, r3
 800ef9c:	8163      	strh	r3, [r4, #10]
 800ef9e:	4629      	mov	r1, r5
 800efa0:	4620      	mov	r0, r4
 800efa2:	4633      	mov	r3, r6
    }
  }
}
 800efa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800efa8:	4718      	bx	r3
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800efae:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800efb2:	4629      	mov	r1, r5
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	4630      	mov	r0, r6
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	4798      	blx	r3
 800efbc:	e7d9      	b.n	800ef72 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800efbe:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 800efc0:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800efc2:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 800efc4:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 800efc6:	4629      	mov	r1, r5
 800efc8:	4620      	mov	r0, r4
 800efca:	f7ff ff99 	bl	800ef00 <usb_lld_prepare_receive>
 800efce:	2320      	movs	r3, #32
 800efd0:	f383 8811 	msr	BASEPRI, r3
 800efd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800efd6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800efda:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800efde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800efe2:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800efe6:	f386 8811 	msr	BASEPRI, r6
 800efea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efee:	bf00      	nop
 800eff0:	20000fe0 	.word	0x20000fe0
	...

0800f000 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f000:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800f004:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f006:	68dc      	ldr	r4, [r3, #12]
 800f008:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800f00a:	6853      	ldr	r3, [r2, #4]
 800f00c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 800f00e:	b1ab      	cbz	r3, 800f03c <usb_lld_prepare_transmit+0x3c>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800f010:	b171      	cbz	r1, 800f030 <usb_lld_prepare_transmit+0x30>
 800f012:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800f014:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800f016:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800f018:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800f01c:	4422      	add	r2, r4
 800f01e:	fbb2 f2f4 	udiv	r2, r2, r4
 800f022:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800f026:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800f02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f02e:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800f030:	2b40      	cmp	r3, #64	; 0x40
 800f032:	d9ee      	bls.n	800f012 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 800f034:	2340      	movs	r3, #64	; 0x40
 800f036:	6053      	str	r3, [r2, #4]
 800f038:	223f      	movs	r2, #63	; 0x3f
 800f03a:	e7eb      	b.n	800f014 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800f03c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800f03e:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800f042:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800f046:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f04a:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800f04e:	4770      	bx	lr

0800f050 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800f054:	4f31      	ldr	r7, [pc, #196]	; (800f11c <otg_epin_handler.constprop.8+0xcc>)
 800f056:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800f058:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800f05c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800f05e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 800f062:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800f066:	07e1      	lsls	r1, r4, #31
 800f068:	d503      	bpl.n	800f072 <otg_epin_handler.constprop.8+0x22>
 800f06a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800f06e:	07da      	lsls	r2, r3, #31
 800f070:	d40a      	bmi.n	800f088 <otg_epin_handler.constprop.8+0x38>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800f072:	0623      	lsls	r3, r4, #24
 800f074:	d506      	bpl.n	800f084 <otg_epin_handler.constprop.8+0x34>
 800f076:	2301      	movs	r3, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800f078:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800f07c:	fa03 f606 	lsl.w	r6, r3, r6
 800f080:	4216      	tst	r6, r2
 800f082:	d129      	bne.n	800f0d8 <otg_epin_handler.constprop.8+0x88>
 800f084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800f088:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f08c:	68d9      	ldr	r1, [r3, #12]
 800f08e:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800f090:	6858      	ldr	r0, [r3, #4]
 800f092:	691a      	ldr	r2, [r3, #16]
 800f094:	4290      	cmp	r0, r2
 800f096:	d234      	bcs.n	800f102 <otg_epin_handler.constprop.8+0xb2>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800f098:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800f09a:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800f09e:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 800f0a0:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f7ff ffaa 	bl	800f000 <usb_lld_prepare_transmit>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b4:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f0b8:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f0ba:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800f0be:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800f0c2:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f0c6:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800f0ca:	40b2      	lsls	r2, r6
 800f0cc:	430a      	orrs	r2, r1
 800f0ce:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800f0d2:	f388 8811 	msr	BASEPRI, r8
 800f0d6:	e7cc      	b.n	800f072 <otg_epin_handler.constprop.8+0x22>
 800f0d8:	2320      	movs	r3, #32
 800f0da:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800f0de:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800f0e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800f0e4:	480e      	ldr	r0, [pc, #56]	; (800f120 <otg_epin_handler.constprop.8+0xd0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800f0e6:	ea23 0306 	bic.w	r3, r3, r6
 800f0ea:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800f0ee:	4316      	orrs	r6, r2
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	65fe      	str	r6, [r7, #92]	; 0x5c
 800f0f4:	f7fd ffcc 	bl	800d090 <chThdResumeI>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f383 8811 	msr	BASEPRI, r3
 800f0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800f102:	893a      	ldrh	r2, [r7, #8]
 800f104:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800f108:	2301      	movs	r3, #1
 800f10a:	40b3      	lsls	r3, r6
 800f10c:	ea22 0303 	bic.w	r3, r2, r3
 800f110:	813b      	strh	r3, [r7, #8]
 800f112:	4631      	mov	r1, r6
 800f114:	4638      	mov	r0, r7
 800f116:	47c0      	blx	r8
 800f118:	e7ab      	b.n	800f072 <otg_epin_handler.constprop.8+0x22>
 800f11a:	bf00      	nop
 800f11c:	20000fe0 	.word	0x20000fe0
 800f120:	20001040 	.word	0x20001040
	...

0800f130 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800f130:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f132:	4d3a      	ldr	r5, [pc, #232]	; (800f21c <Vector14C+0xec>)
 800f134:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 800f136:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 800f138:	69b3      	ldr	r3, [r6, #24]
 800f13a:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800f13c:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 800f13e:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800f140:	d42d      	bmi.n	800f19e <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 800f142:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 800f144:	bf48      	it	mi
 800f146:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800f14a:	0723      	lsls	r3, r4, #28
 800f14c:	d504      	bpl.n	800f158 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 800f14e:	686b      	ldr	r3, [r5, #4]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	b10b      	cbz	r3, 800f158 <Vector14C+0x28>
 800f154:	4831      	ldr	r0, [pc, #196]	; (800f21c <Vector14C+0xec>)
 800f156:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 800f158:	06e5      	lsls	r5, r4, #27
 800f15a:	d42b      	bmi.n	800f1b4 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 800f15c:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 800f15e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800f162:	d507      	bpl.n	800f174 <Vector14C+0x44>
    if (src & (1 << 0))
 800f164:	07e9      	lsls	r1, r5, #31
 800f166:	d445      	bmi.n	800f1f4 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 800f168:	07aa      	lsls	r2, r5, #30
 800f16a:	d448      	bmi.n	800f1fe <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800f16c:	076b      	lsls	r3, r5, #29
 800f16e:	d44b      	bmi.n	800f208 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 800f170:	072e      	lsls	r6, r5, #28
 800f172:	d44e      	bmi.n	800f212 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800f174:	0324      	lsls	r4, r4, #12
 800f176:	d507      	bpl.n	800f188 <Vector14C+0x58>
    if (src & (1 << 16))
 800f178:	03e8      	lsls	r0, r5, #15
 800f17a:	d430      	bmi.n	800f1de <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 800f17c:	03a9      	lsls	r1, r5, #14
 800f17e:	d433      	bmi.n	800f1e8 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 800f180:	036a      	lsls	r2, r5, #13
 800f182:	d426      	bmi.n	800f1d2 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800f184:	032b      	lsls	r3, r5, #12
 800f186:	d403      	bmi.n	800f190 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800f188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800f18c:	f7fe ba78 	b.w	800d680 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800f190:	2003      	movs	r0, #3
 800f192:	f7ff fedd 	bl	800ef50 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800f196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800f19a:	f7fe ba71 	b.w	800d680 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f7fe fc3e 	bl	800da20 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800f1a4:	686b      	ldr	r3, [r5, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d0ca      	beq.n	800f142 <Vector14C+0x12>
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	4798      	blx	r3
 800f1b2:	e7c6      	b.n	800f142 <Vector14C+0x12>
 800f1b4:	2320      	movs	r3, #32
 800f1b6:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800f1ba:	69b3      	ldr	r3, [r6, #24]
 800f1bc:	4818      	ldr	r0, [pc, #96]	; (800f220 <Vector14C+0xf0>)
 800f1be:	f023 0310 	bic.w	r3, r3, #16
 800f1c2:	61b3      	str	r3, [r6, #24]
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	f7fd ff63 	bl	800d090 <chThdResumeI>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	e7c4      	b.n	800f15c <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800f1d2:	2002      	movs	r0, #2
 800f1d4:	f7ff febc 	bl	800ef50 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 800f1d8:	032b      	lsls	r3, r5, #12
 800f1da:	d5d5      	bpl.n	800f188 <Vector14C+0x58>
 800f1dc:	e7d8      	b.n	800f190 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800f1de:	2000      	movs	r0, #0
 800f1e0:	f7ff feb6 	bl	800ef50 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 800f1e4:	03a9      	lsls	r1, r5, #14
 800f1e6:	d5cb      	bpl.n	800f180 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	f7ff feb1 	bl	800ef50 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 800f1ee:	036a      	lsls	r2, r5, #13
 800f1f0:	d5c8      	bpl.n	800f184 <Vector14C+0x54>
 800f1f2:	e7ee      	b.n	800f1d2 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	f7ff ff2b 	bl	800f050 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 800f1fa:	07aa      	lsls	r2, r5, #30
 800f1fc:	d5b6      	bpl.n	800f16c <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 800f1fe:	2001      	movs	r0, #1
 800f200:	f7ff ff26 	bl	800f050 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 800f204:	076b      	lsls	r3, r5, #29
 800f206:	d5b3      	bpl.n	800f170 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 800f208:	2002      	movs	r0, #2
 800f20a:	f7ff ff21 	bl	800f050 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 800f20e:	072e      	lsls	r6, r5, #28
 800f210:	d5b0      	bpl.n	800f174 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 800f212:	2003      	movs	r0, #3
 800f214:	f7ff ff1c 	bl	800f050 <otg_epin_handler.constprop.8>
 800f218:	e7ac      	b.n	800f174 <Vector14C+0x44>
 800f21a:	bf00      	nop
 800f21c:	20000fe0 	.word	0x20000fe0
 800f220:	20001040 	.word	0x20001040
	...

0800f230 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800f230:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f232:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800f236:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f23a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f23e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f242:	4770      	bx	lr
	...

0800f250 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f250:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800f252:	b410      	push	{r4}
 800f254:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f258:	2001      	movs	r0, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f25a:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 800f25e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f262:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f266:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
}
 800f26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f26e:	fa00 f101 	lsl.w	r1, r0, r1
 800f272:	4311      	orrs	r1, r2
 800f274:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
}
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	0000      	movs	r0, r0
	...

0800f280 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800f280:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f282:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800f286:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f28a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f28e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f292:	4770      	bx	lr
	...

0800f2a0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800f2a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f2a2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800f2a6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f2aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f2ae:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800f2b2:	4770      	bx	lr
	...

0800f2c0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800f2c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f2c2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800f2c6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f2ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2ce:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f2d2:	4770      	bx	lr
	...

0800f2e0 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 800f2e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f2e2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800f2e6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f2ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2ee:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800f2f2:	4770      	bx	lr
	...

0800f300 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 800f300:	b508      	push	{r3, lr}
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800f302:	4b0b      	ldr	r3, [pc, #44]	; (800f330 <Vector108+0x30>)
  if (gptp->state == GPT_ONESHOT) {
 800f304:	7818      	ldrb	r0, [r3, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800f306:	68da      	ldr	r2, [r3, #12]
 800f308:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 800f30a:	2804      	cmp	r0, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800f30c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 800f30e:	d107      	bne.n	800f320 <Vector108+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800f310:	2002      	movs	r0, #2
 800f312:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 800f314:	6011      	str	r1, [r2, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 800f316:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 800f318:	68d1      	ldr	r1, [r2, #12]
 800f31a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800f31e:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	4803      	ldr	r0, [pc, #12]	; (800f330 <Vector108+0x30>)
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD5);

  OSAL_IRQ_EPILOGUE();
}
 800f328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD5);

  OSAL_IRQ_EPILOGUE();
 800f32c:	f7fe b9a8 	b.w	800d680 <_port_irq_epilogue>
 800f330:	2000127c 	.word	0x2000127c
	...

0800f340 <gpt_lld_init>:
  gptObjectInit(&GPTD4);
#endif

#if STM32_GPT_USE_TIM5
  /* Driver initialization.*/
  GPTD5.tim = STM32_TIM5;
 800f340:	4802      	ldr	r0, [pc, #8]	; (800f34c <gpt_lld_init+0xc>)
 800f342:	4b03      	ldr	r3, [pc, #12]	; (800f350 <gpt_lld_init+0x10>)
 800f344:	60c3      	str	r3, [r0, #12]
  gptObjectInit(&GPTD5);
 800f346:	f7fe ba53 	b.w	800d7f0 <gptObjectInit>
 800f34a:	bf00      	nop
 800f34c:	2000127c 	.word	0x2000127c
 800f350:	40000c00 	.word	0x40000c00
	...

0800f360 <VectorB8>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 800f360:	b538      	push	{r3, r4, r5, lr}
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800f362:	4d25      	ldr	r5, [pc, #148]	; (800f3f8 <VectorB8+0x98>)
 800f364:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f366:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800f368:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800f36a:	68da      	ldr	r2, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f36c:	7d08      	ldrb	r0, [r1, #20]
 800f36e:	4014      	ands	r4, r2
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
 800f370:	b2e2      	uxtb	r2, r4
 800f372:	43d2      	mvns	r2, r2
 800f374:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f376:	b990      	cbnz	r0, 800f39e <VectorB8+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f378:	0760      	lsls	r0, r4, #29
 800f37a:	d52f      	bpl.n	800f3dc <VectorB8+0x7c>
      _icu_isr_invoke_width_cb(icup);
 800f37c:	782b      	ldrb	r3, [r5, #0]
 800f37e:	2b04      	cmp	r3, #4
 800f380:	d028      	beq.n	800f3d4 <VectorB8+0x74>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f382:	07a1      	lsls	r1, r4, #30
 800f384:	d412      	bmi.n	800f3ac <VectorB8+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800f386:	07e4      	lsls	r4, r4, #31
 800f388:	d505      	bpl.n	800f396 <VectorB8+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 800f38a:	686b      	ldr	r3, [r5, #4]
 800f38c:	481a      	ldr	r0, [pc, #104]	; (800f3f8 <VectorB8+0x98>)
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	4798      	blx	r3
 800f392:	2303      	movs	r3, #3
 800f394:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD4);

  OSAL_IRQ_EPILOGUE();
}
 800f396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD4);

  OSAL_IRQ_EPILOGUE();
 800f39a:	f7fe b971 	b.w	800d680 <_port_irq_epilogue>
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f39e:	07a2      	lsls	r2, r4, #30
 800f3a0:	d50b      	bpl.n	800f3ba <VectorB8+0x5a>
      _icu_isr_invoke_width_cb(icup);
 800f3a2:	782b      	ldrb	r3, [r5, #0]
 800f3a4:	2b04      	cmp	r3, #4
 800f3a6:	d004      	beq.n	800f3b2 <VectorB8+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f3a8:	0763      	lsls	r3, r4, #29
 800f3aa:	d5ec      	bpl.n	800f386 <VectorB8+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800f3ac:	2304      	movs	r3, #4
 800f3ae:	702b      	strb	r3, [r5, #0]
 800f3b0:	e7e9      	b.n	800f386 <VectorB8+0x26>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800f3b2:	688b      	ldr	r3, [r1, #8]
 800f3b4:	b1e3      	cbz	r3, 800f3f0 <VectorB8+0x90>
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f3ba:	0763      	lsls	r3, r4, #29
 800f3bc:	d5e3      	bpl.n	800f386 <VectorB8+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800f3be:	782b      	ldrb	r3, [r5, #0]
 800f3c0:	4a0d      	ldr	r2, [pc, #52]	; (800f3f8 <VectorB8+0x98>)
 800f3c2:	2b04      	cmp	r3, #4
 800f3c4:	d1f2      	bne.n	800f3ac <VectorB8+0x4c>
 800f3c6:	6851      	ldr	r1, [r2, #4]
 800f3c8:	68cb      	ldr	r3, [r1, #12]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d0ee      	beq.n	800f3ac <VectorB8+0x4c>
 800f3ce:	480a      	ldr	r0, [pc, #40]	; (800f3f8 <VectorB8+0x98>)
 800f3d0:	4798      	blx	r3
 800f3d2:	e7eb      	b.n	800f3ac <VectorB8+0x4c>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800f3d4:	688b      	ldr	r3, [r1, #8]
 800f3d6:	b143      	cbz	r3, 800f3ea <VectorB8+0x8a>
 800f3d8:	4628      	mov	r0, r5
 800f3da:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f3dc:	07a1      	lsls	r1, r4, #30
 800f3de:	d5d2      	bpl.n	800f386 <VectorB8+0x26>
      _icu_isr_invoke_period_cb(icup);
 800f3e0:	782b      	ldrb	r3, [r5, #0]
 800f3e2:	4a05      	ldr	r2, [pc, #20]	; (800f3f8 <VectorB8+0x98>)
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	d1e1      	bne.n	800f3ac <VectorB8+0x4c>
 800f3e8:	e7ed      	b.n	800f3c6 <VectorB8+0x66>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f3ea:	07a0      	lsls	r0, r4, #30
 800f3ec:	d4ec      	bmi.n	800f3c8 <VectorB8+0x68>
 800f3ee:	e7ca      	b.n	800f386 <VectorB8+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f3f0:	0762      	lsls	r2, r4, #29
 800f3f2:	d4e9      	bmi.n	800f3c8 <VectorB8+0x68>
 800f3f4:	e7c7      	b.n	800f386 <VectorB8+0x26>
 800f3f6:	bf00      	nop
 800f3f8:	2000128c 	.word	0x2000128c
 800f3fc:	00000000 	.word	0x00000000

0800f400 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 800f400:	b510      	push	{r4, lr}
  ICUD3.tim = STM32_TIM3;
#endif

#if STM32_ICU_USE_TIM4
  /* Driver initialization.*/
  icuObjectInit(&ICUD4);
 800f402:	4c03      	ldr	r4, [pc, #12]	; (800f410 <icu_lld_init+0x10>)
 800f404:	4620      	mov	r0, r4
 800f406:	f7fe fa13 	bl	800d830 <icuObjectInit>
  ICUD4.tim = STM32_TIM4;
 800f40a:	4b02      	ldr	r3, [pc, #8]	; (800f414 <icu_lld_init+0x14>)
 800f40c:	60e3      	str	r3, [r4, #12]
 800f40e:	bd10      	pop	{r4, pc}
 800f410:	2000128c 	.word	0x2000128c
 800f414:	40000800 	.word	0x40000800
	...

0800f420 <icu_lld_start>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start(ICUDriver *icup) {
 800f420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 800f422:	7803      	ldrb	r3, [r0, #0]
 800f424:	2b01      	cmp	r3, #1
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start(ICUDriver *icup) {
 800f426:	4604      	mov	r4, r0

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 800f428:	d03a      	beq.n	800f4a0 <icu_lld_start+0x80>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 800f42a:	68c3      	ldr	r3, [r0, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800f430:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 800f432:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 800f434:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f436:	6861      	ldr	r1, [r4, #4]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800f438:	68a2      	ldr	r2, [r4, #8]
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f43a:	6988      	ldr	r0, [r1, #24]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 800f43c:	7d0d      	ldrb	r5, [r1, #20]

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800f43e:	684e      	ldr	r6, [r1, #4]
 800f440:	fbb2 f2f6 	udiv	r2, r2, r6
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f444:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800f448:	3a01      	subs	r2, #1
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 800f44a:	2700      	movs	r7, #0
  psc = (icup->clock / icup->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;
 800f44c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 800f450:	611f      	str	r7, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f452:	60d8      	str	r0, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
 800f454:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 800f456:	62de      	str	r6, [r3, #44]	; 0x2c
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800f458:	780a      	ldrb	r2, [r1, #0]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 800f45a:	b96d      	cbnz	r5, 800f478 <icu_lld_start+0x58>
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 800f45c:	f240 2001 	movw	r0, #513	; 0x201

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800f460:	2154      	movs	r1, #84	; 0x54

  if (icup->config->channel == ICU_CHANNEL_1) {
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 800f462:	6198      	str	r0, [r3, #24]

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800f464:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800f466:	b1c2      	cbz	r2, 800f49a <icu_lld_start+0x7a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800f468:	2213      	movs	r2, #19
 800f46a:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 800f46c:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 800f470:	3334      	adds	r3, #52	; 0x34
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 800f472:	6122      	str	r2, [r4, #16]
    icup->pccrp = &icup->tim->CCR[0];
 800f474:	6163      	str	r3, [r4, #20]
 800f476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800f478:	f44f 7081 	mov.w	r0, #258	; 0x102

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800f47c:	2164      	movs	r1, #100	; 0x64
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800f47e:	6198      	str	r0, [r3, #24]

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800f480:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800f482:	b13a      	cbz	r2, 800f494 <icu_lld_start+0x74>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800f484:	2231      	movs	r2, #49	; 0x31
 800f486:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 800f488:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 800f48c:	3338      	adds	r3, #56	; 0x38
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 800f48e:	6122      	str	r2, [r4, #16]
    icup->pccrp = &icup->tim->CCR[1];
 800f490:	6163      	str	r3, [r4, #20]
 800f492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800f494:	2213      	movs	r2, #19
 800f496:	621a      	str	r2, [r3, #32]
 800f498:	e7f6      	b.n	800f488 <icu_lld_start+0x68>

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800f49a:	2231      	movs	r2, #49	; 0x31
 800f49c:	621a      	str	r2, [r3, #32]
 800f49e:	e7e5      	b.n	800f46c <icu_lld_start+0x4c>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
      icup->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_ICU_USE_TIM4
    if (&ICUD4 == icup) {
 800f4a0:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <icu_lld_start+0xb0>)
 800f4a2:	4298      	cmp	r0, r3
 800f4a4:	d001      	beq.n	800f4aa <icu_lld_start+0x8a>
 800f4a6:	68e3      	ldr	r3, [r4, #12]
 800f4a8:	e7c5      	b.n	800f436 <icu_lld_start+0x16>
      rccEnableTIM4(FALSE);
 800f4aa:	4b0a      	ldr	r3, [pc, #40]	; (800f4d4 <icu_lld_start+0xb4>)
 800f4ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f4ae:	f042 0204 	orr.w	r2, r2, #4
 800f4b2:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM4();
 800f4b4:	6a1a      	ldr	r2, [r3, #32]
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	f042 0204 	orr.w	r2, r2, #4
 800f4bc:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_ICU_TIM4_IRQ_PRIORITY);
 800f4be:	2107      	movs	r1, #7
    }
#endif
#if STM32_ICU_USE_TIM4
    if (&ICUD4 == icup) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 800f4c0:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_ICU_TIM4_IRQ_PRIORITY);
 800f4c2:	201e      	movs	r0, #30
 800f4c4:	f7fe fd2c 	bl	800df20 <nvicEnableVector>
      icup->clock = STM32_TIMCLK1;
 800f4c8:	4b03      	ldr	r3, [pc, #12]	; (800f4d8 <icu_lld_start+0xb8>)
 800f4ca:	60a3      	str	r3, [r4, #8]
 800f4cc:	e7eb      	b.n	800f4a6 <icu_lld_start+0x86>
 800f4ce:	bf00      	nop
 800f4d0:	2000128c 	.word	0x2000128c
 800f4d4:	40023800 	.word	0x40023800
 800f4d8:	0501bd00 	.word	0x0501bd00
 800f4dc:	00000000 	.word	0x00000000

0800f4e0 <icu_lld_start_capture>:
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800f4e0:	68c3      	ldr	r3, [r0, #12]
 800f4e2:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 800f4e4:	2000      	movs	r0, #0
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800f4e6:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->SR = 0;

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800f4ea:	2105      	movs	r1, #5
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800f4ec:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 800f4ee:	6118      	str	r0, [r3, #16]

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800f4f0:	6019      	str	r1, [r3, #0]
 800f4f2:	4770      	bx	lr
	...

0800f500 <icu_lld_enable_notifications>:
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 800f500:	68c2      	ldr	r2, [r0, #12]
 800f502:	68d3      	ldr	r3, [r2, #12]
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
 800f504:	b410      	push	{r4}
  uint32_t dier = icup->tim->DIER;

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 800f506:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800f50a:	d10c      	bne.n	800f526 <icu_lld_enable_notifications+0x26>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 800f50c:	6841      	ldr	r1, [r0, #4]
  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;
 800f50e:	6114      	str	r4, [r2, #16]

    if (icup->config->channel == ICU_CHANNEL_1) {
 800f510:	7d08      	ldrb	r0, [r1, #20]
 800f512:	b158      	cbz	r0, 800f52c <icu_lld_enable_notifications+0x2c>
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
 800f514:	6888      	ldr	r0, [r1, #8]
 800f516:	b178      	cbz	r0, 800f538 <icu_lld_enable_notifications+0x38>
        dier |= STM32_TIM_DIER_CC1IE;
 800f518:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 800f51c:	6909      	ldr	r1, [r1, #16]
 800f51e:	b109      	cbz	r1, 800f524 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 800f520:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 800f524:	60d3      	str	r3, [r2, #12]
  }
}
 800f526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f52a:	4770      	bx	lr
    if (icup->config->channel == ICU_CHANNEL_1) {
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 800f52c:	6888      	ldr	r0, [r1, #8]
 800f52e:	2800      	cmp	r0, #0
 800f530:	d1f2      	bne.n	800f518 <icu_lld_enable_notifications+0x18>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;
 800f532:	f043 0302 	orr.w	r3, r3, #2
 800f536:	e7f1      	b.n	800f51c <icu_lld_enable_notifications+0x1c>
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC2IE;
    }
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;
 800f538:	f043 0304 	orr.w	r3, r3, #4
 800f53c:	e7ee      	b.n	800f51c <icu_lld_enable_notifications+0x1c>
 800f53e:	bf00      	nop

0800f540 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800f540:	b508      	push	{r3, lr}
 800f542:	2320      	movs	r3, #32
 800f544:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 800f548:	f7fd fb3a 	bl	800cbc0 <chSysTimerHandlerI>
 800f54c:	2300      	movs	r3, #0
 800f54e:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800f552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800f556:	f7fe b893 	b.w	800d680 <_port_irq_epilogue>
 800f55a:	bf00      	nop
 800f55c:	0000      	movs	r0, r0
	...

0800f560 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f560:	4b05      	ldr	r3, [pc, #20]	; (800f578 <st_lld_init+0x18>)
 800f562:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 800f566:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f568:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f56a:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800f56c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f56e:	2108      	movs	r1, #8
 800f570:	200b      	movs	r0, #11
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f572:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f574:	f7fe bcf4 	b.w	800df60 <nvicSetSystemHandlerPriority>
 800f578:	e000e010 	.word	0xe000e010
 800f57c:	00000000 	.word	0x00000000

0800f580 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 800f580:	4a02      	ldr	r2, [pc, #8]	; (800f58c <notify3+0xc>)
 800f582:	68d3      	ldr	r3, [r2, #12]
 800f584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f588:	60d3      	str	r3, [r2, #12]
 800f58a:	4770      	bx	lr
 800f58c:	40004800 	.word	0x40004800

0800f590 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 800f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800f592:	4e43      	ldr	r6, [pc, #268]	; (800f6a0 <VectorDC+0x110>)
 800f594:	f8d6 5254 	ldr.w	r5, [r6, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 800f598:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 800f59a:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800f59c:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800f59e:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800f5a0:	d44f      	bmi.n	800f642 <VectorDC+0xb2>
 800f5a2:	2320      	movs	r3, #32
 800f5a4:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f5a8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f5ac:	d108      	bne.n	800f5c0 <VectorDC+0x30>
 800f5ae:	e029      	b.n	800f604 <VectorDC+0x74>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800f5b0:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800f5b2:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800f5b4:	d41d      	bmi.n	800f5f2 <VectorDC+0x62>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800f5b6:	682c      	ldr	r4, [r5, #0]
 800f5b8:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f5ba:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f5be:	d021      	beq.n	800f604 <VectorDC+0x74>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800f5c0:	0723      	lsls	r3, r4, #28
 800f5c2:	d0f5      	beq.n	800f5b0 <VectorDC+0x20>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800f5c4:	f014 0f08 	tst.w	r4, #8
 800f5c8:	bf0c      	ite	eq
 800f5ca:	2100      	moveq	r1, #0
 800f5cc:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800f5ce:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800f5d0:	bf48      	it	mi
 800f5d2:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800f5d6:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 800f5d8:	bf48      	it	mi
 800f5da:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800f5de:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800f5e0:	bf48      	it	mi
 800f5e2:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800f5e6:	482f      	ldr	r0, [pc, #188]	; (800f6a4 <VectorDC+0x114>)
 800f5e8:	f7fd fe42 	bl	800d270 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800f5ec:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800f5ee:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800f5f0:	d5e1      	bpl.n	800f5b6 <VectorDC+0x26>
      sdIncomingDataI(sdp, b);
 800f5f2:	b2c9      	uxtb	r1, r1
 800f5f4:	482a      	ldr	r0, [pc, #168]	; (800f6a0 <VectorDC+0x110>)
 800f5f6:	f7fe f9d3 	bl	800d9a0 <sdIncomingDataI>
    sr = u->SR;
 800f5fa:	682c      	ldr	r4, [r5, #0]
 800f5fc:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f5fe:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f602:	d1dd      	bne.n	800f5c0 <VectorDC+0x30>
 800f604:	2300      	movs	r3, #0
 800f606:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800f60a:	0639      	lsls	r1, r7, #24
 800f60c:	d501      	bpl.n	800f612 <VectorDC+0x82>
 800f60e:	0622      	lsls	r2, r4, #24
 800f610:	d426      	bmi.n	800f660 <VectorDC+0xd0>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 800f612:	0663      	lsls	r3, r4, #25
 800f614:	d511      	bpl.n	800f63a <VectorDC+0xaa>
 800f616:	2320      	movs	r3, #32
 800f618:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800f61c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f61e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f620:	481f      	ldr	r0, [pc, #124]	; (800f6a0 <VectorDC+0x110>)
 800f622:	429a      	cmp	r2, r3
 800f624:	d029      	beq.n	800f67a <VectorDC+0xea>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f626:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800f62a:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 800f62c:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f630:	60eb      	str	r3, [r5, #12]
 800f632:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800f634:	602a      	str	r2, [r5, #0]
 800f636:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 800f63a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 800f63e:	f7fe b81f 	b.w	800d680 <_port_irq_epilogue>
 800f642:	2320      	movs	r3, #32
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f64c:	1d30      	adds	r0, r6, #4
 800f64e:	f7fd fe0f 	bl	800d270 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 800f652:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800f656:	602b      	str	r3, [r5, #0]
 800f658:	2300      	movs	r3, #0
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	e7a0      	b.n	800f5a2 <VectorDC+0x12>
 800f660:	2320      	movs	r3, #32
 800f662:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 800f666:	4810      	ldr	r0, [pc, #64]	; (800f6a8 <VectorDC+0x118>)
 800f668:	f7fd ff4a 	bl	800d500 <chOQGetI>
    if (b < Q_OK) {
 800f66c:	2800      	cmp	r0, #0
 800f66e:	db0c      	blt.n	800f68a <VectorDC+0xfa>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800f670:	6068      	str	r0, [r5, #4]
 800f672:	2300      	movs	r3, #0
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	e7cb      	b.n	800f612 <VectorDC+0x82>
 800f67a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0d2      	beq.n	800f626 <VectorDC+0x96>
 800f680:	3004      	adds	r0, #4
 800f682:	2110      	movs	r1, #16
 800f684:	f7fd fdf4 	bl	800d270 <chEvtBroadcastFlagsI>
 800f688:	e7cd      	b.n	800f626 <VectorDC+0x96>
 800f68a:	2108      	movs	r1, #8
 800f68c:	4805      	ldr	r0, [pc, #20]	; (800f6a4 <VectorDC+0x114>)
 800f68e:	f7fd fdef 	bl	800d270 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800f692:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f696:	403b      	ands	r3, r7
 800f698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f69c:	60eb      	str	r3, [r5, #12]
 800f69e:	e7e8      	b.n	800f672 <VectorDC+0xe2>
 800f6a0:	200012a4 	.word	0x200012a4
 800f6a4:	200012a8 	.word	0x200012a8
 800f6a8:	200012d4 	.word	0x200012d4
 800f6ac:	00000000 	.word	0x00000000

0800f6b0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 800f6b0:	b510      	push	{r4, lr}
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800f6b2:	4c05      	ldr	r4, [pc, #20]	; (800f6c8 <sd_lld_init+0x18>)
 800f6b4:	4a05      	ldr	r2, [pc, #20]	; (800f6cc <sd_lld_init+0x1c>)
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	f7fe f939 	bl	800d930 <sdObjectInit>
  SD3.usart = USART3;
 800f6be:	4b04      	ldr	r3, [pc, #16]	; (800f6d0 <sd_lld_init+0x20>)
 800f6c0:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 800f6c4:	bd10      	pop	{r4, pc}
 800f6c6:	bf00      	nop
 800f6c8:	200012a4 	.word	0x200012a4
 800f6cc:	0800f581 	.word	0x0800f581
 800f6d0:	40004800 	.word	0x40004800
	...

0800f6e0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800f6e0:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 800f6e2:	4c1f      	ldr	r4, [pc, #124]	; (800f760 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 800f6e4:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 800f6e6:	2900      	cmp	r1, #0
 800f6e8:	bf18      	it	ne
 800f6ea:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 800f6ec:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800f6ee:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800f6f0:	d023      	beq.n	800f73a <sd_lld_start+0x5a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800f6f2:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800f6f6:	4a1b      	ldr	r2, [pc, #108]	; (800f764 <sd_lld_start+0x84>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d02b      	beq.n	800f754 <sd_lld_start+0x74>
 800f6fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f700:	4293      	cmp	r3, r2
 800f702:	d027      	beq.n	800f754 <sd_lld_start+0x74>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800f704:	6821      	ldr	r1, [r4, #0]
 800f706:	4a18      	ldr	r2, [pc, #96]	; (800f768 <sd_lld_start+0x88>)
 800f708:	fbb2 f2f1 	udiv	r2, r2, r1
 800f70c:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f70e:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f710:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f712:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f714:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f718:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f71c:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f720:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f724:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f726:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f728:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800f72a:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f72c:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f72e:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800f730:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800f732:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800f734:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	bd38      	pop	{r3, r4, r5, pc}
      rccEnableUSART2(FALSE);
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 800f73a:	4b0c      	ldr	r3, [pc, #48]	; (800f76c <sd_lld_start+0x8c>)
 800f73c:	4298      	cmp	r0, r3
 800f73e:	d1d8      	bne.n	800f6f2 <sd_lld_start+0x12>
      rccEnableUSART3(FALSE);
 800f740:	4a0b      	ldr	r2, [pc, #44]	; (800f770 <sd_lld_start+0x90>)
 800f742:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f748:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 800f74a:	210c      	movs	r1, #12
 800f74c:	2027      	movs	r0, #39	; 0x27
 800f74e:	f7fe fbe7 	bl	800df20 <nvicEnableVector>
 800f752:	e7ce      	b.n	800f6f2 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 800f754:	6821      	ldr	r1, [r4, #0]
 800f756:	4a07      	ldr	r2, [pc, #28]	; (800f774 <sd_lld_start+0x94>)
 800f758:	fbb2 f2f1 	udiv	r2, r2, r1
 800f75c:	609a      	str	r2, [r3, #8]
 800f75e:	e7d6      	b.n	800f70e <sd_lld_start+0x2e>
 800f760:	08012ad0 	.word	0x08012ad0
 800f764:	40011000 	.word	0x40011000
 800f768:	0280de80 	.word	0x0280de80
 800f76c:	200012a4 	.word	0x200012a4
 800f770:	40023800 	.word	0x40023800
 800f774:	0501bd00 	.word	0x0501bd00
	...

0800f780 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 800f780:	f7fe be26 	b.w	800e3d0 <stm32_clock_init>
	...

0800f790 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
	...

0800f7a0 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800f7a0:	2101      	movs	r1, #1
		OPMODE_I2C,
		100000,
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
 800f7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800f7a6:	4608      	mov	r0, r1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7a8:	4e5a      	ldr	r6, [pc, #360]	; (800f914 <hw_init_gpio+0x174>)

	palClearPad(GPIOB, 6);
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7aa:	4c5b      	ldr	r4, [pc, #364]	; (800f918 <hw_init_gpio+0x178>)

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800f7ac:	4d5b      	ldr	r5, [pc, #364]	; (800f91c <hw_init_gpio+0x17c>)
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800f7ae:	f001 fddf 	bl	8011370 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	2002      	movs	r0, #2

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
//	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 800f7b6:	2740      	movs	r7, #64	; 0x40
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800f7b8:	f001 fdda 	bl	8011370 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800f7bc:	2101      	movs	r1, #1
 800f7be:	2004      	movs	r0, #4
 800f7c0:	f001 fdd6 	bl	8011370 <RCC_AHB1PeriphClockCmd>

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	4639      	mov	r1, r7
 800f7c8:	2219      	movs	r2, #25
 800f7ca:	f7ff f971 	bl	800eab0 <_pal_lld_setgroupmode>

	palClearPad(GPIOB, 6);
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7ce:	4639      	mov	r1, r7
 800f7d0:	4620      	mov	r0, r4

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
//	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 800f7d2:	8377      	strh	r7, [r6, #26]
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7d4:	2219      	movs	r2, #25
 800f7d6:	f7ff f96b 	bl	800eab0 <_pal_lld_setgroupmode>
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 800f7da:	f44f 7880 	mov.w	r8, #256	; 0x100
	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7de:	4620      	mov	r0, r4
	palClearPad(GPIOB, 6);
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();
 800f7e0:	8367      	strh	r7, [r4, #26]

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7e2:	2219      	movs	r2, #25
 800f7e4:	2180      	movs	r1, #128	; 0x80
 800f7e6:	f7ff f963 	bl	800eab0 <_pal_lld_setgroupmode>
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	4641      	mov	r1, r8
 800f7ee:	2219      	movs	r2, #25
 800f7f0:	f7ff f95e 	bl	800eab0 <_pal_lld_setgroupmode>
	GAIN_FULLDN();

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 800f7f4:	4630      	mov	r0, r6
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 800f7f6:	f8a4 801a 	strh.w	r8, [r4, #26]

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 800f7fa:	2220      	movs	r2, #32
 800f7fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f800:	f7ff f956 	bl	800eab0 <_pal_lld_setgroupmode>

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800f804:	4641      	mov	r1, r8
 800f806:	4628      	mov	r0, r5
 800f808:	229a      	movs	r2, #154	; 0x9a
 800f80a:	f7ff f951 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800f80e:	4628      	mov	r0, r5
 800f810:	229a      	movs	r2, #154	; 0x9a
 800f812:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f816:	f7ff f94b 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800f81a:	4628      	mov	r0, r5
 800f81c:	229a      	movs	r2, #154	; 0x9a
 800f81e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f822:	f7ff f945 	bl	800eab0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800f826:	4630      	mov	r0, r6
 800f828:	229a      	movs	r2, #154	; 0x9a
 800f82a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f82e:	f7ff f93f 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800f832:	4630      	mov	r0, r6
 800f834:	229a      	movs	r2, #154	; 0x9a
 800f836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f83a:	f7ff f939 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800f83e:	4630      	mov	r0, r6
 800f840:	229a      	movs	r2, #154	; 0x9a
 800f842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f846:	f7ff f933 	bl	800eab0 <_pal_lld_setgroupmode>

	// DHall sensors
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 800f84a:	4620      	mov	r0, r4
 800f84c:	2220      	movs	r2, #32
 800f84e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f852:	f7ff f92d 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 800f856:	4620      	mov	r0, r4
 800f858:	2220      	movs	r2, #32
 800f85a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f85e:	f7ff f927 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);
 800f862:	4620      	mov	r0, r4
 800f864:	2220      	movs	r2, #32
 800f866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f86a:	f7ff f921 	bl	800eab0 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);//sen3
 800f86e:	4628      	mov	r0, r5
 800f870:	2203      	movs	r2, #3
 800f872:	2101      	movs	r1, #1
 800f874:	f7ff f91c 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);//sen2
 800f878:	4628      	mov	r0, r5
 800f87a:	2203      	movs	r2, #3
 800f87c:	2102      	movs	r1, #2
 800f87e:	f7ff f917 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);//sen1
 800f882:	4628      	mov	r0, r5
 800f884:	2203      	movs	r2, #3
 800f886:	2104      	movs	r1, #4
 800f888:	f7ff f912 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);//INV_TEMP
 800f88c:	4628      	mov	r0, r5
 800f88e:	2203      	movs	r2, #3
 800f890:	2108      	movs	r1, #8
 800f892:	f7ff f90d 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 800f896:	4628      	mov	r0, r5
 800f898:	2203      	movs	r2, #3
 800f89a:	2110      	movs	r1, #16
 800f89c:	f7ff f908 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	2203      	movs	r2, #3
 800f8a4:	2120      	movs	r1, #32
 800f8a6:	f7ff f903 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	f7ff f8fe 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT_ANALOG);
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	2203      	movs	r2, #3
 800f8b8:	2180      	movs	r1, #128	; 0x80
 800f8ba:	f7ff f8f9 	bl	800eab0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);//BR_SO1
 800f8be:	4630      	mov	r0, r6
 800f8c0:	2203      	movs	r2, #3
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	f7ff f8f4 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);//BR_SO2
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	2102      	movs	r1, #2
 800f8ce:	f7ff f8ef 	bl	800eab0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	2203      	movs	r2, #3
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	f7ff f8ea 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 800f8dc:	4620      	mov	r0, r4
 800f8de:	2203      	movs	r2, #3
 800f8e0:	2102      	movs	r1, #2
 800f8e2:	f7ff f8e5 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	2203      	movs	r2, #3
 800f8ea:	2104      	movs	r1, #4
 800f8ec:	f7ff f8e0 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	2203      	movs	r2, #3
 800f8f4:	2108      	movs	r1, #8
 800f8f6:	f7ff f8db 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	2203      	movs	r2, #3
 800f8fe:	2110      	movs	r1, #16
 800f900:	f7ff f8d6 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 800f904:	4620      	mov	r0, r4
 800f906:	2203      	movs	r2, #3
 800f908:	2120      	movs	r1, #32

}
 800f90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 800f90e:	f7ff b8cf 	b.w	800eab0 <_pal_lld_setgroupmode>
 800f912:	bf00      	nop
 800f914:	40020400 	.word	0x40020400
 800f918:	40020800 	.word	0x40020800
 800f91c:	40020000 	.word	0x40020000

0800f920 <hw_setup_adc_channels>:

}

void hw_setup_adc_channels(void) {
 800f920:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 800f922:	4e26      	ldr	r6, [pc, #152]	; (800f9bc <hw_setup_adc_channels+0x9c>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 800f924:	4d26      	ldr	r5, [pc, #152]	; (800f9c0 <hw_setup_adc_channels+0xa0>)
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 800f926:	4c27      	ldr	r4, [pc, #156]	; (800f9c4 <hw_setup_adc_channels+0xa4>)

}

void hw_setup_adc_channels(void) {
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 800f928:	2301      	movs	r3, #1
 800f92a:	4630      	mov	r0, r6
 800f92c:	461a      	mov	r2, r3
 800f92e:	2100      	movs	r1, #0
 800f930:	f001 fc46 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 800f934:	4630      	mov	r0, r6
 800f936:	2301      	movs	r3, #1
 800f938:	2202      	movs	r2, #2
 800f93a:	2108      	movs	r1, #8
 800f93c:	f001 fc40 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
 800f940:	4630      	mov	r0, r6
 800f942:	2301      	movs	r3, #1
 800f944:	2203      	movs	r2, #3
 800f946:	210a      	movs	r1, #10
 800f948:	f001 fc3a 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 800f94c:	2204      	movs	r2, #4
 800f94e:	4630      	mov	r0, r6
 800f950:	4611      	mov	r1, r2
 800f952:	2301      	movs	r3, #1
 800f954:	f001 fc34 	bl	80111c0 <ADC_RegularChannelConfig>

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 800f958:	2301      	movs	r3, #1
 800f95a:	4628      	mov	r0, r5
 800f95c:	461a      	mov	r2, r3
 800f95e:	4619      	mov	r1, r3
 800f960:	f001 fc2e 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 800f964:	4628      	mov	r0, r5
 800f966:	2301      	movs	r3, #1
 800f968:	2202      	movs	r2, #2
 800f96a:	2109      	movs	r1, #9
 800f96c:	f001 fc28 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
 800f970:	4628      	mov	r0, r5
 800f972:	2301      	movs	r3, #1
 800f974:	2203      	movs	r2, #3
 800f976:	210b      	movs	r1, #11
 800f978:	f001 fc22 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);
 800f97c:	4628      	mov	r0, r5
 800f97e:	2301      	movs	r3, #1
 800f980:	2204      	movs	r2, #4
 800f982:	210f      	movs	r1, #15
 800f984:	f001 fc1c 	bl	80111c0 <ADC_RegularChannelConfig>

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 800f988:	2301      	movs	r3, #1
 800f98a:	4620      	mov	r0, r4
 800f98c:	461a      	mov	r2, r3
 800f98e:	2102      	movs	r1, #2
 800f990:	f001 fc16 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 800f994:	4620      	mov	r0, r4
 800f996:	2301      	movs	r3, #1
 800f998:	2202      	movs	r2, #2
 800f99a:	2103      	movs	r1, #3
 800f99c:	f001 fc10 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	2203      	movs	r2, #3
 800f9a6:	210c      	movs	r1, #12
 800f9a8:	f001 fc0a 	bl	80111c0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	2204      	movs	r2, #4
 800f9b2:	2105      	movs	r1, #5

	// Injected channels
//==	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
//==	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
}
 800f9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 800f9b8:	f001 bc02 	b.w	80111c0 <ADC_RegularChannelConfig>
 800f9bc:	40012000 	.word	0x40012000
 800f9c0:	40012100 	.word	0x40012100
 800f9c4:	40012200 	.word	0x40012200
	...

0800f9d0 <periodic_thread>:
 *
 */

static THD_WORKING_AREA(periodic_thread_wa, 128);
static THD_FUNCTION(periodic_thread, arg) 
{
 800f9d0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800f9d2:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <periodic_thread+0x28>)
 800f9d4:	4a09      	ldr	r2, [pc, #36]	; (800f9fc <periodic_thread+0x2c>)
 800f9d6:	699b      	ldr	r3, [r3, #24]

	//Uart3_printf(&SD3, (uint8_t *)"periodic_thread\r\n");//170530  

	for(;;)
	{
		LED_GREEN_ON();
 800f9d8:	4c09      	ldr	r4, [pc, #36]	; (800fa00 <periodic_thread+0x30>)
 800f9da:	619a      	str	r2, [r3, #24]
 800f9dc:	2540      	movs	r5, #64	; 0x40
 800f9de:	462e      	mov	r6, r5
 800f9e0:	8326      	strh	r6, [r4, #24]
		chThdSleepMilliseconds(500);
 800f9e2:	f241 3088 	movw	r0, #5000	; 0x1388
 800f9e6:	f7fd fb1b 	bl	800d020 <chThdSleep>
		LED_GREEN_OFF();
 800f9ea:	8365      	strh	r5, [r4, #26]
		chThdSleepMilliseconds(500);
 800f9ec:	f241 3088 	movw	r0, #5000	; 0x1388
 800f9f0:	f7fd fb16 	bl	800d020 <chThdSleep>
 800f9f4:	e7f4      	b.n	800f9e0 <periodic_thread+0x10>
 800f9f6:	bf00      	nop
 800f9f8:	20000c70 	.word	0x20000c70
 800f9fc:	08012be0 	.word	0x08012be0
 800fa00:	40020400 	.word	0x40020400
	...

0800fa10 <bldc_init>:
}



int bldc_init(void)
{
 800fa10:	b510      	push	{r4, lr}
 800fa12:	b082      	sub	sp, #8
	halInit();
 800fa14:	f7fd fe64 	bl	800d6e0 <halInit>
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800fa18:	2400      	movs	r4, #0


int bldc_init(void)
{
	halInit();
	chSysInit();
 800fa1a:	f7fd f879 	bl	800cb10 <chSysInit>

	chThdSleepMilliseconds(1000);
 800fa1e:	f242 7010 	movw	r0, #10000	; 0x2710
 800fa22:	f7fd fafd 	bl	800d020 <chThdSleep>

	hw_init_gpio();
 800fa26:	f7ff febb 	bl	800f7a0 <hw_init_gpio>

	//spi_dac_hw_init();
	//spi_dac_write_A( 100) ;

	mcpwm_init();
 800fa2a:	f000 f8c9 	bl	800fbc0 <mcpwm_init>
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800fa2e:	9400      	str	r4, [sp, #0]
 800fa30:	4b04      	ldr	r3, [pc, #16]	; (800fa44 <bldc_init+0x34>)
 800fa32:	4805      	ldr	r0, [pc, #20]	; (800fa48 <bldc_init+0x38>)
 800fa34:	2240      	movs	r2, #64	; 0x40
 800fa36:	f44f 7106 	mov.w	r1, #536	; 0x218
 800fa3a:	f7fd fab9 	bl	800cfb0 <chThdCreateStatic>
	//chThdSleepMilliseconds(1000);

	bldc_start();

	return 0;
}
 800fa3e:	4620      	mov	r0, r4
 800fa40:	b002      	add	sp, #8
 800fa42:	bd10      	pop	{r4, pc}
 800fa44:	0800f9d1 	.word	0x0800f9d1
 800fa48:	20001500 	.word	0x20001500
 800fa4c:	00000000 	.word	0x00000000

0800fa50 <do_dc_cal>:
static volatile int curr1_sum;
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
void do_dc_cal(void)
{
 800fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DCCAL_ON();
 800fa52:	4b15      	ldr	r3, [pc, #84]	; (800faa8 <do_dc_cal+0x58>)
	while(IS_DRV_FAULT()){};
 800fa54:	4a15      	ldr	r2, [pc, #84]	; (800faac <do_dc_cal+0x5c>)
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
void do_dc_cal(void)
{
	DCCAL_ON();
 800fa56:	2180      	movs	r1, #128	; 0x80
 800fa58:	8319      	strh	r1, [r3, #24]
	while(IS_DRV_FAULT()){};
 800fa5a:	6913      	ldr	r3, [r2, #16]
 800fa5c:	04db      	lsls	r3, r3, #19
 800fa5e:	d5fc      	bpl.n	800fa5a <do_dc_cal+0xa>
	chThdSleepMilliseconds(1000);
 800fa60:	f242 7010 	movw	r0, #10000	; 0x2710
 800fa64:	f7fd fadc 	bl	800d020 <chThdSleep>
	curr0_sum = 0;
 800fa68:	4c11      	ldr	r4, [pc, #68]	; (800fab0 <do_dc_cal+0x60>)
	curr1_sum = 0;
 800fa6a:	4812      	ldr	r0, [pc, #72]	; (800fab4 <do_dc_cal+0x64>)
	curr_start_samples = 0;
 800fa6c:	4912      	ldr	r1, [pc, #72]	; (800fab8 <do_dc_cal+0x68>)
void do_dc_cal(void)
{
	DCCAL_ON();
	while(IS_DRV_FAULT()){};
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	6023      	str	r3, [r4, #0]
	curr1_sum = 0;
 800fa72:	6003      	str	r3, [r0, #0]
	curr_start_samples = 0;
 800fa74:	600b      	str	r3, [r1, #0]
	while(curr_start_samples < 4000) {};
 800fa76:	680b      	ldr	r3, [r1, #0]
 800fa78:	4a0f      	ldr	r2, [pc, #60]	; (800fab8 <do_dc_cal+0x68>)
 800fa7a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800fa7e:	dbfa      	blt.n	800fa76 <do_dc_cal+0x26>
	curr0_offset = curr0_sum / curr_start_samples;
 800fa80:	4e0e      	ldr	r6, [pc, #56]	; (800fabc <do_dc_cal+0x6c>)
	curr1_offset = curr1_sum / curr_start_samples;
 800fa82:	4f0f      	ldr	r7, [pc, #60]	; (800fac0 <do_dc_cal+0x70>)
	DCCAL_OFF();
 800fa84:	4d08      	ldr	r5, [pc, #32]	; (800faa8 <do_dc_cal+0x58>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 800fa86:	6823      	ldr	r3, [r4, #0]
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
	dccal_done = true;
 800fa88:	490e      	ldr	r1, [pc, #56]	; (800fac4 <do_dc_cal+0x74>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 800fa8a:	6814      	ldr	r4, [r2, #0]
 800fa8c:	fb93 f3f4 	sdiv	r3, r3, r4
 800fa90:	6033      	str	r3, [r6, #0]
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
 800fa92:	2680      	movs	r6, #128	; 0x80
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
 800fa94:	6803      	ldr	r3, [r0, #0]
 800fa96:	6812      	ldr	r2, [r2, #0]
 800fa98:	fb93 f3f2 	sdiv	r3, r3, r2
	DCCAL_OFF();
	dccal_done = true;
 800fa9c:	2401      	movs	r4, #1
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
 800fa9e:	603b      	str	r3, [r7, #0]
	DCCAL_OFF();
 800faa0:	836e      	strh	r6, [r5, #26]
	dccal_done = true;
 800faa2:	700c      	strb	r4, [r1, #0]
 800faa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa6:	bf00      	nop
 800faa8:	40020800 	.word	0x40020800
 800faac:	40020400 	.word	0x40020400
 800fab0:	20001898 	.word	0x20001898
 800fab4:	200018e4 	.word	0x200018e4
 800fab8:	20001744 	.word	0x20001744
 800fabc:	20001718 	.word	0x20001718
 800fac0:	200018e8 	.word	0x200018e8
 800fac4:	200018e0 	.word	0x200018e0
	...

0800fad0 <CalcPI>:

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 800fad0:	ed90 7a06 	vldr	s14, [r0, #24]
 800fad4:	ed90 6a07 	vldr	s12, [r0, #28]
	
	U  = pParm->qdSum + pParm->qKp * Err;
 800fad8:	edd0 7a00 	vldr	s15, [r0]
 800fadc:	edd0 5a01 	vldr	s11, [r0, #4]

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 800fae0:	edd0 6a04 	vldr	s13, [r0, #16]

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 800fae4:	ee37 6a46 	vsub.f32	s12, s14, s12
	
	U  = pParm->qdSum + pParm->qKp * Err;
 800fae8:	eeb0 7a67 	vmov.f32	s14, s15
 800faec:	eea6 7a25 	vfma.f32	s14, s12, s11

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 800faf0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800faf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf8:	dc0b      	bgt.n	800fb12 <CalcPI+0x42>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 800fafa:	edd0 6a05 	vldr	s13, [r0, #20]
 800fafe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb06:	d404      	bmi.n	800fb12 <CalcPI+0x42>
	else                  pParm->qOut = U ;
 800fb08:	eef0 6a47 	vmov.f32	s13, s14
 800fb0c:	ed80 7a08 	vstr	s14, [r0, #32]
 800fb10:	e001      	b.n	800fb16 <CalcPI+0x46>
	Err  = pParm->qInRef - pParm->qInMeas;
	
	U  = pParm->qdSum + pParm->qKp * Err;

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 800fb12:	edc0 6a08 	vstr	s13, [r0, #32]
	else                  pParm->qOut = U ;

	Exc = U - pParm->qOut;

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 800fb16:	ed90 5a02 	vldr	s10, [r0, #8]
 800fb1a:	edd0 5a03 	vldr	s11, [r0, #12]
 800fb1e:	eee6 7a05 	vfma.f32	s15, s12, s10
 800fb22:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fb26:	eee7 7a65 	vfms.f32	s15, s14, s11
 800fb2a:	edc0 7a00 	vstr	s15, [r0]
 800fb2e:	4770      	bx	lr

0800fb30 <SetupControlParameters>:
	
	return;
}
void SetupControlParameters(void)
{
 800fb30:	b5f0      	push	{r4, r5, r6, r7, lr}
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 800fb32:	4817      	ldr	r0, [pc, #92]	; (800fb90 <SetupControlParameters+0x60>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 800fb34:	4c17      	ldr	r4, [pc, #92]	; (800fb94 <SetupControlParameters+0x64>)
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
 800fb36:	4a18      	ldr	r2, [pc, #96]	; (800fb98 <SetupControlParameters+0x68>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 800fb38:	4918      	ldr	r1, [pc, #96]	; (800fb9c <SetupControlParameters+0x6c>)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 800fb3a:	4d19      	ldr	r5, [pc, #100]	; (800fba0 <SetupControlParameters+0x70>)
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 800fb3c:	4e19      	ldr	r6, [pc, #100]	; (800fba4 <SetupControlParameters+0x74>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 800fb3e:	4f1a      	ldr	r7, [pc, #104]	; (800fba8 <SetupControlParameters+0x78>)
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 800fb40:	60e5      	str	r5, [r4, #12]
	PIParmD.qOutMax = DOUTMAX;
 800fb42:	6125      	str	r5, [r4, #16]
	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
 800fb44:	60c5      	str	r5, [r0, #12]
	PIParmQ.qOutMax = QOUTMAX;
 800fb46:	6105      	str	r5, [r0, #16]
	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
	PIParmPLL.qKc = PLLKC;		 
 800fb48:	60d5      	str	r5, [r2, #12]
	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
 800fb4a:	60cd      	str	r5, [r1, #12]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 800fb4c:	4d17      	ldr	r5, [pc, #92]	; (800fbac <SetupControlParameters+0x7c>)
	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 800fb4e:	f8df e068 	ldr.w	lr, [pc, #104]	; 800fbb8 <SetupControlParameters+0x88>
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 800fb52:	6067      	str	r7, [r4, #4]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 800fb54:	2300      	movs	r3, #0
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 800fb56:	6047      	str	r7, [r0, #4]
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 800fb58:	60a6      	str	r6, [r4, #8]

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 800fb5a:	4f15      	ldr	r7, [pc, #84]	; (800fbb0 <SetupControlParameters+0x80>)

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
 800fb5c:	6086      	str	r6, [r0, #8]

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
 800fb5e:	6096      	str	r6, [r2, #8]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 800fb60:	604d      	str	r5, [r1, #4]
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
	PIParmW.qOutMin = -PIParmW.qOutMax;
 800fb62:	4e14      	ldr	r6, [pc, #80]	; (800fbb4 <SetupControlParameters+0x84>)
	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 800fb64:	f8c4 e014 	str.w	lr, [r4, #20]

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
 800fb68:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
	PIParmQ.qOutMax = QOUTMAX;
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 800fb6c:	f8c0 e014 	str.w	lr, [r0, #20]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 800fb70:	6023      	str	r3, [r4, #0]
	pParm->qOut=0;
 800fb72:	6223      	str	r3, [r4, #32]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 800fb74:	6003      	str	r3, [r0, #0]
	pParm->qOut=0;
 800fb76:	6203      	str	r3, [r0, #32]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 800fb78:	600b      	str	r3, [r1, #0]
	pParm->qOut=0;
 800fb7a:	620b      	str	r3, [r1, #32]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 800fb7c:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 800fb7e:	6213      	str	r3, [r2, #32]

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
 800fb80:	608d      	str	r5, [r1, #8]
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
 800fb82:	6055      	str	r5, [r2, #4]

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 800fb84:	610f      	str	r7, [r1, #16]

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
	PIParmPLL.qKc = PLLKC;		 
	PIParmPLL.qOutMax = PLLOUTMAX;	 
 800fb86:	6117      	str	r7, [r2, #16]
	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
	PIParmW.qOutMin = -PIParmW.qOutMax;
 800fb88:	614e      	str	r6, [r1, #20]
	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
	PIParmPLL.qKc = PLLKC;		 
	PIParmPLL.qOutMax = PLLOUTMAX;	 
	PIParmPLL.qOutMin = -PIParmPLL.qOutMax;
 800fb8a:	6156      	str	r6, [r2, #20]
 800fb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	200018a0 	.word	0x200018a0
 800fb94:	20001720 	.word	0x20001720
 800fb98:	20001910 	.word	0x20001910
 800fb9c:	200018ec 	.word	0x200018ec
 800fba0:	3f7fff58 	.word	0x3f7fff58
 800fba4:	3c23d70a 	.word	0x3c23d70a
 800fba8:	3d4ccccd 	.word	0x3d4ccccd
 800fbac:	41400000 	.word	0x41400000
 800fbb0:	3f733333 	.word	0x3f733333
 800fbb4:	bf733333 	.word	0xbf733333
 800fbb8:	bf7fff58 	.word	0xbf7fff58
 800fbbc:	00000000 	.word	0x00000000

0800fbc0 <mcpwm_init>:
						// variable. Any variation on DC bus will be compared to this value
						// and compensated linearly.


void mcpwm_init(void)
{
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	dccal_done = false;

	TIM_DeInit(TIM1);
 800fbc4:	4dd7      	ldr	r5, [pc, #860]	; (800ff24 <mcpwm_init+0x364>)
	TIM_DeInit(TIM8);
 800fbc6:	4fd8      	ldr	r7, [pc, #864]	; (800ff28 <mcpwm_init+0x368>)
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 800fbc8:	f8df 938c 	ldr.w	r9, [pc, #908]	; 800ff58 <mcpwm_init+0x398>
						// variable. Any variation on DC bus will be compared to this value
						// and compensated linearly.


void mcpwm_init(void)
{
 800fbcc:	b0a7      	sub	sp, #156	; 0x9c

	//Uart3_printf(&SD3, (uint8_t *)"mcpwm_init....\r\n");//170530  
	utils_sys_lock_cnt();
 800fbce:	f000 feef 	bl	80109b0 <utils_sys_lock_cnt>
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	//NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	dccal_done = false;
 800fbd2:	4bd6      	ldr	r3, [pc, #856]	; (800ff2c <mcpwm_init+0x36c>)
 800fbd4:	2400      	movs	r4, #0

	TIM_DeInit(TIM1);
 800fbd6:	4628      	mov	r0, r5
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	//NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	dccal_done = false;
 800fbd8:	701c      	strb	r4, [r3, #0]

	TIM_DeInit(TIM1);
 800fbda:	f001 fc19 	bl	8011410 <TIM_DeInit>
	TIM_DeInit(TIM8);
 800fbde:	4638      	mov	r0, r7
 800fbe0:	f001 fc16 	bl	8011410 <TIM_DeInit>
	TIM1->CNT = 0;
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800fbe4:	2101      	movs	r1, #1
	// Initialize variables
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
 800fbe6:	626c      	str	r4, [r5, #36]	; 0x24
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800fbe8:	4608      	mov	r0, r1
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
	TIM8->CNT = 0;
 800fbea:	627c      	str	r4, [r7, #36]	; 0x24

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800fbec:	f001 fbe0 	bl	80113b0 <RCC_APB2PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 800fbf0:	4bcf      	ldr	r3, [pc, #828]	; (800ff30 <mcpwm_init+0x370>)

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800fbf2:	f8ad 4004 	strh.w	r4, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 800fbf6:	2601      	movs	r6, #1
	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 800fbf8:	f04f 0e20 	mov.w	lr, #32
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	a901      	add	r1, sp, #4
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 800fc00:	681a      	ldr	r2, [r3, #0]
	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 800fc02:	f8ad e006 	strh.w	lr, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 800fc06:	f88d 600e 	strb.w	r6, [sp, #14]

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800fc0a:	f8ad 400c 	strh.w	r4, [sp, #12]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 800fc0e:	4bc9      	ldr	r3, [pc, #804]	; (800ff34 <mcpwm_init+0x374>)
 800fc10:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc14:	9302      	str	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800fc16:	f001 fcdb 	bl	80115d0 <TIM_TimeBaseInit>

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 800fc1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800fc1c:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 800fc20:	40f3      	lsrs	r3, r6
 800fc22:	930e      	str	r3, [sp, #56]	; 0x38
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800fc24:	f04f 0360 	mov.w	r3, #96	; 0x60
 800fc28:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800fc2c:	f04f 0304 	mov.w	r3, #4
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800fc30:	f44f 7b80 	mov.w	fp, #256	; 0x100
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 800fc34:	4628      	mov	r0, r5
 800fc36:	a90c      	add	r1, sp, #48	; 0x30
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800fc38:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 800fc3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc40:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800fc44:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 800fc48:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800fc4c:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 800fc50:	f001 fd2e 	bl	80116b0 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 800fc54:	a90c      	add	r1, sp, #48	; 0x30
 800fc56:	4628      	mov	r0, r5
 800fc58:	f001 fd6a 	bl	8011730 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 800fc5c:	a90c      	add	r1, sp, #48	; 0x30
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f001 fda6 	bl	80117b0 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 800fc64:	a90c      	add	r1, sp, #48	; 0x30
 800fc66:	4628      	mov	r0, r5
 800fc68:	f001 fdea 	bl	8011840 <TIM_OC4Init>

	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	2108      	movs	r1, #8
 800fc70:	f001 fe1e 	bl	80118b0 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800fc74:	4628      	mov	r0, r5
 800fc76:	2108      	movs	r1, #8
 800fc78:	f001 fe22 	bl	80118c0 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	2108      	movs	r1, #8
 800fc80:	f001 fe2e 	bl	80118e0 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800fc84:	4628      	mov	r0, r5
 800fc86:	2108      	movs	r1, #8
 800fc88:	f001 fe32 	bl	80118f0 <TIM_OC4PreloadConfig>

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 800fc8c:	f44f 6800 	mov.w	r8, #2048	; 0x800
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 800fc90:	2350      	movs	r3, #80	; 0x50
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 800fc92:	4628      	mov	r0, r5
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 800fc94:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 800fc98:	a904      	add	r1, sp, #16

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 800fc9a:	f8ad 3016 	strh.w	r3, [sp, #22]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 800fc9e:	f8ad a01a 	strh.w	sl, [sp, #26]
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800fca2:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 800fca6:	f8ad 4018 	strh.w	r4, [sp, #24]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800fcaa:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 800fcae:	f8ad 8010 	strh.w	r8, [sp, #16]
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
 800fcb2:	f8ad 8012 	strh.w	r8, [sp, #18]
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 800fcb6:	f001 fe2b 	bl	8011910 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 800fcba:	4631      	mov	r1, r6
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	f001 fe4f 	bl	8011960 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 800fcc2:	4631      	mov	r1, r6
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f001 fcd3 	bl	8011670 <TIM_ARRPreloadConfig>
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;

	// Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 800fcca:	4631      	mov	r1, r6
 800fccc:	489a      	ldr	r0, [pc, #616]	; (800ff38 <mcpwm_init+0x378>)
 800fcce:	f001 fb4f 	bl	8011370 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 800fcd2:	4631      	mov	r1, r6
 800fcd4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800fcd8:	f001 fb6a 	bl	80113b0 <RCC_APB2PeriphClockCmd>

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
 800fcdc:	4623      	mov	r3, r4
 800fcde:	4a97      	ldr	r2, [pc, #604]	; (800ff3c <mcpwm_init+0x37c>)
 800fce0:	4897      	ldr	r0, [pc, #604]	; (800ff40 <mcpwm_init+0x380>)
 800fce2:	2103      	movs	r1, #3
 800fce4:	f7fe faf4 	bl	800e2d0 <dmaStreamAllocate>

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 800fce8:	4996      	ldr	r1, [pc, #600]	; (800ff44 <mcpwm_init+0x384>)

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 800fcea:	4b97      	ldr	r3, [pc, #604]	; (800ff48 <mcpwm_init+0x388>)
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 800fcec:	9118      	str	r1, [sp, #96]	; 0x60
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 800fcee:	f04f 0e0c 	mov.w	lr, #12
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800fcf2:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800fcf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 800fcfa:	4648      	mov	r0, r9
 800fcfc:	a917      	add	r1, sp, #92	; 0x5c
	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 800fcfe:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800fd02:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 800fd06:	9319      	str	r3, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800fd08:	921d      	str	r2, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800fd0a:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 800fd0e:	9417      	str	r4, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800fd10:	941a      	str	r4, [sp, #104]	; 0x68
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800fd12:	941c      	str	r4, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800fd14:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800fd18:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800fd1c:	9422      	str	r4, [sp, #136]	; 0x88
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800fd1e:	9423      	str	r4, [sp, #140]	; 0x8c
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800fd20:	9424      	str	r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800fd22:	9425      	str	r4, [sp, #148]	; 0x94
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 800fd24:	f001 faac 	bl	8011280 <DMA_Init>

	// DMA2_Stream0 enable
	DMA_Cmd(DMA2_Stream4, ENABLE);
 800fd28:	4631      	mov	r1, r6
 800fd2a:	4648      	mov	r0, r9
 800fd2c:	f001 fad8 	bl	80112e0 <DMA_Cmd>

	// Enable transfer complete interrupt
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 800fd30:	4632      	mov	r2, r6
 800fd32:	4648      	mov	r0, r9
 800fd34:	2110      	movs	r1, #16
 800fd36:	f001 fae3 	bl	8011300 <DMA_ITConfig>

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 800fd3a:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 800fd3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);
 800fd40:	a808      	add	r0, sp, #32
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_Init(ADC2, &ADC_InitStructure);
 800fd42:	f8df a218 	ldr.w	sl, [pc, #536]	; 800ff5c <mcpwm_init+0x39c>
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 800fd46:	9208      	str	r2, [sp, #32]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 800fd48:	930a      	str	r3, [sp, #40]	; 0x28

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800fd4a:	9409      	str	r4, [sp, #36]	; 0x24
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800fd4c:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInit(&ADC_CommonInitStructure);
 800fd4e:	f001 fa0f 	bl	8011170 <ADC_CommonInit>

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 800fd52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 800fd56:	f04f 0204 	mov.w	r2, #4

	ADC_Init(ADC1, &ADC_InitStructure);
 800fd5a:	a911      	add	r1, sp, #68	; 0x44

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 800fd5c:	9313      	str	r3, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_Init(ADC2, &ADC_InitStructure);
	ADC_Init(ADC3, &ADC_InitStructure);
 800fd5e:	f8df 9200 	ldr.w	r9, [pc, #512]	; 800ff60 <mcpwm_init+0x3a0>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
 800fd62:	487a      	ldr	r0, [pc, #488]	; (800ff4c <mcpwm_init+0x38c>)
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 800fd64:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 800fd68:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
 800fd6c:	9314      	str	r3, [sp, #80]	; 0x50
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 800fd6e:	f88d 6048 	strb.w	r6, [sp, #72]	; 0x48
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800fd72:	9411      	str	r4, [sp, #68]	; 0x44
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 800fd74:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800fd78:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
 800fd7a:	f001 f9d1 	bl	8011120 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 800fd7e:	a911      	add	r1, sp, #68	; 0x44
 800fd80:	4650      	mov	r0, sl
 800fd82:	f001 f9cd 	bl	8011120 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 800fd86:	a911      	add	r1, sp, #68	; 0x44
 800fd88:	4648      	mov	r0, r9
 800fd8a:	f001 f9c9 	bl	8011120 <ADC_Init>

	hw_setup_adc_channels();
 800fd8e:	f7ff fdc7 	bl	800f920 <hw_setup_adc_channels>

	// Enable DMA request after last transfer (Multi-ADC mode)
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 800fd92:	4630      	mov	r0, r6
 800fd94:	f001 fa64 	bl	8011260 <ADC_MultiModeDMARequestAfterLastTransferCmd>

	// Enable ADC
	ADC_Cmd(ADC1, ENABLE);
 800fd98:	4631      	mov	r1, r6
 800fd9a:	486c      	ldr	r0, [pc, #432]	; (800ff4c <mcpwm_init+0x38c>)
 800fd9c:	f001 fa00 	bl	80111a0 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 800fda0:	4631      	mov	r1, r6
 800fda2:	4650      	mov	r0, sl
 800fda4:	f001 f9fc 	bl	80111a0 <ADC_Cmd>
	ADC_Cmd(ADC3, ENABLE);
 800fda8:	4631      	mov	r1, r6
 800fdaa:	4648      	mov	r0, r9
 800fdac:	f001 f9f8 	bl	80111a0 <ADC_Cmd>

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 800fdb0:	4631      	mov	r1, r6
 800fdb2:	2002      	movs	r0, #2
 800fdb4:	f001 fafc 	bl	80113b0 <RCC_APB2PeriphClockCmd>

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 800fdb8:	4b5d      	ldr	r3, [pc, #372]	; (800ff30 <mcpwm_init+0x370>)

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800fdba:	f8ad 4004 	strh.w	r4, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 800fdbe:	a901      	add	r1, sp, #4
 800fdc0:	4638      	mov	r0, r7
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 800fdc2:	681a      	ldr	r2, [r3, #0]
	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800fdc4:	f8ad 4006 	strh.w	r4, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800fdc8:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 800fdcc:	f88d 400e 	strb.w	r4, [sp, #14]
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 800fdd0:	4b5f      	ldr	r3, [pc, #380]	; (800ff50 <mcpwm_init+0x390>)
 800fdd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdd6:	9302      	str	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 800fdd8:	f001 fbfa 	bl	80115d0 <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800fddc:	f04f 0260 	mov.w	r2, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 800fde0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800fde2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 800fde6:	a90c      	add	r1, sp, #48	; 0x30
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 800fde8:	f44f 7200 	mov.w	r2, #512	; 0x200
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 800fdec:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 800fdee:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 800fdf2:	930e      	str	r3, [sp, #56]	; 0x38
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800fdf4:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800fdf8:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 800fdfc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 800fe00:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 800fe04:	f001 fc54 	bl	80116b0 <TIM_OC1Init>
 800fe08:	4638      	mov	r0, r7
 800fe0a:	2108      	movs	r1, #8
 800fe0c:	f001 fd50 	bl	80118b0 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 800fe10:	a90c      	add	r1, sp, #48	; 0x30
 800fe12:	4638      	mov	r0, r7
 800fe14:	f001 fc8c 	bl	8011730 <TIM_OC2Init>
 800fe18:	4638      	mov	r0, r7
 800fe1a:	2108      	movs	r1, #8
 800fe1c:	f001 fd50 	bl	80118c0 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 800fe20:	a90c      	add	r1, sp, #48	; 0x30
 800fe22:	4638      	mov	r0, r7
 800fe24:	f001 fcc4 	bl	80117b0 <TIM_OC3Init>
 800fe28:	4638      	mov	r0, r7
 800fe2a:	2108      	movs	r1, #8
 800fe2c:	f001 fd58 	bl	80118e0 <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM8, ENABLE);
 800fe30:	4631      	mov	r1, r6
 800fe32:	4638      	mov	r0, r7
 800fe34:	f001 fc1c 	bl	8011670 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 800fe38:	4631      	mov	r1, r6
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	f001 fd90 	bl	8011960 <TIM_CCPreloadControl>

	// PWM outputs have to be enabled in order to trigger ADC on CCx
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 800fe40:	4631      	mov	r1, r6
 800fe42:	4638      	mov	r0, r7
 800fe44:	f001 fd7c 	bl	8011940 <TIM_CtrlPWMOutputs>

	// TIM1 Master and TIM8 slave
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 800fe48:	4628      	mov	r0, r5
 800fe4a:	2120      	movs	r1, #32
 800fe4c:	f001 fda8 	bl	80119a0 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 800fe50:	4628      	mov	r0, r5
 800fe52:	2180      	movs	r1, #128	; 0x80
 800fe54:	f001 fdc4 	bl	80119e0 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 800fe58:	4621      	mov	r1, r4
 800fe5a:	4638      	mov	r0, r7
 800fe5c:	f001 fd98 	bl	8011990 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 800fe60:	4638      	mov	r0, r7
 800fe62:	2104      	movs	r1, #4
 800fe64:	f001 fdac 	bl	80119c0 <TIM_SelectSlaveMode>

	// Enable TIM8
	TIM_Cmd(TIM8, ENABLE);
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4638      	mov	r0, r7
 800fe6c:	f001 fc10 	bl	8011690 <TIM_Cmd>

	// Enable TIM1
	TIM_Cmd(TIM1, ENABLE);
 800fe70:	4631      	mov	r1, r6
 800fe72:	4628      	mov	r0, r5
 800fe74:	f001 fc0c 	bl	8011690 <TIM_Cmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f001 fd60 	bl	8011940 <TIM_CtrlPWMOutputs>

	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800fe80:	4631      	mov	r1, r6
 800fe82:	4630      	mov	r0, r6
 800fe84:	f001 fa84 	bl	8011390 <RCC_APB1PeriphClockCmd>
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 800fe88:	f04f 3aff 	mov.w	sl, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800fe8c:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800fe8e:	a901      	add	r1, sp, #4
 800fe90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800fe94:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800fe98:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800fe9c:	f8ad 4006 	strh.w	r4, [sp, #6]
	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 800fea0:	f8cd a008 	str.w	sl, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800fea4:	f001 fb94 	bl	80115d0 <TIM_TimeBaseInit>

	// TIM2 enable counter
	TIM_Cmd(TIM2, ENABLE);
 800fea8:	4631      	mov	r1, r6
 800feaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800feae:	f001 fbef 	bl	8011690 <TIM_Cmd>

	// ADC sampling locations
	//stop_pwm_hw();
	utils_sys_lock_cnt();
 800feb2:	f000 fd7d 	bl	80109b0 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 800feb6:	682b      	ldr	r3, [r5, #0]
 800feb8:	f043 0302 	orr.w	r3, r3, #2
 800febc:	602b      	str	r3, [r5, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	f043 0302 	orr.w	r3, r3, #2
 800fec4:	603b      	str	r3, [r7, #0]

	TIM8->CCR1 = TIM1->ARR;//for vdc
 800fec6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fec8:	637b      	str	r3, [r7, #52]	; 0x34
	TIM8->CCR2 = TIM1->ARR;//for Ib
 800feca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fecc:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM8->CCR3 = TIM1->ARR;//for Ia
 800fece:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fed0:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 800fed2:	682b      	ldr	r3, [r5, #0]
 800fed4:	f023 0302 	bic.w	r3, r3, #2
 800fed8:	602b      	str	r3, [r5, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	f023 0302 	bic.w	r3, r3, #2
 800fee0:	603b      	str	r3, [r7, #0]

	utils_sys_unlock_cnt();
 800fee2:	f000 fd75 	bl	80109d0 <utils_sys_unlock_cnt>

	// Calibrate current offset
	ENABLE_GATE();
 800fee6:	4b1b      	ldr	r3, [pc, #108]	; (800ff54 <mcpwm_init+0x394>)
	DCCAL_OFF();
 800fee8:	2280      	movs	r2, #128	; 0x80
	TIM8->CR1 &= ~TIM_CR1_UDIS;

	utils_sys_unlock_cnt();

	// Calibrate current offset
	ENABLE_GATE();
 800feea:	2740      	movs	r7, #64	; 0x40
 800feec:	831f      	strh	r7, [r3, #24]
	DCCAL_OFF();
 800feee:	835a      	strh	r2, [r3, #26]
	GAIN_FULLDN();
 800fef0:	f8a3 b01a 	strh.w	fp, [r3, #26]
	do_dc_cal();
 800fef4:	f7ff fdac 	bl	800fa50 <do_dc_cal>
	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 800fef8:	f5a9 3985 	sub.w	r9, r9, #68096	; 0x10a00
	//Uart3_printf(&SD3, (uint8_t *)"5-1\r\n");
	// Enable transfer complete interrupt


	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 800fefc:	4631      	mov	r1, r6
 800fefe:	4638      	mov	r0, r7
 800ff00:	f001 fa46 	bl	8011390 <RCC_APB1PeriphClockCmd>
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800ff04:	2307      	movs	r3, #7
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 800ff06:	a901      	add	r1, sp, #4
 800ff08:	4648      	mov	r0, r9
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800ff0a:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 800ff0e:	f8cd a008 	str.w	sl, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800ff12:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800ff16:	f8ad 4006 	strh.w	r4, [sp, #6]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 800ff1a:	f001 fb59 	bl	80115d0 <TIM_TimeBaseInit>

	// TIM3 enable counter
	TIM_Cmd(TIM12, ENABLE);
 800ff1e:	4631      	mov	r1, r6
 800ff20:	4648      	mov	r0, r9
 800ff22:	e01f      	b.n	800ff64 <mcpwm_init+0x3a4>
 800ff24:	40010000 	.word	0x40010000
 800ff28:	40010400 	.word	0x40010400
 800ff2c:	200018e0 	.word	0x200018e0
 800ff30:	20000800 	.word	0x20000800
 800ff34:	0501bd00 	.word	0x0501bd00
 800ff38:	00400005 	.word	0x00400005
 800ff3c:	080104f1 	.word	0x080104f1
 800ff40:	08012a60 	.word	0x08012a60
 800ff44:	40012308 	.word	0x40012308
 800ff48:	20001748 	.word	0x20001748
 800ff4c:	40012000 	.word	0x40012000
 800ff50:	0a037a00 	.word	0x0a037a00
 800ff54:	40020800 	.word	0x40020800
 800ff58:	40026470 	.word	0x40026470
 800ff5c:	40012100 	.word	0x40012100
 800ff60:	40012200 	.word	0x40012200
 800ff64:	f001 fb94 	bl	8011690 <TIM_Cmd>

	// WWDG configuration
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 800ff68:	4631      	mov	r1, r6
 800ff6a:	4640      	mov	r0, r8
 800ff6c:	f001 fa10 	bl	8011390 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 800ff70:	4620      	mov	r0, r4
 800ff72:	f001 fd45 	bl	8011a00 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 800ff76:	20ff      	movs	r0, #255	; 0xff
 800ff78:	f001 fd52 	bl	8011a20 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 800ff7c:	2064      	movs	r0, #100	; 0x64
 800ff7e:	f001 fd6f 	bl	8011a60 <WWDG_Enable>

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ff82:	4b15      	ldr	r3, [pc, #84]	; (800ffd8 <mcpwm_init+0x418>)

bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
 800ff84:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ffdc <mcpwm_init+0x41c>

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ff88:	8a1b      	ldrh	r3, [r3, #16]

	MeasCurrParm.qKa    = DQKA;
	MeasCurrParm.qKb    = DQKB;

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 
 800ff8a:	4915      	ldr	r1, [pc, #84]	; (800ffe0 <mcpwm_init+0x420>)
 800ff8c:	4a15      	ldr	r2, [pc, #84]	; (800ffe4 <mcpwm_init+0x424>)

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ff8e:	4e16      	ldr	r6, [pc, #88]	; (800ffe8 <mcpwm_init+0x428>)

	// ============= SVGen ===============
	// Set PWM period to Loop Time
	SVGenParm.iPWMPeriod = LOOPINTCY;
 800ff90:	4816      	ldr	r0, [pc, #88]	; (800ffec <mcpwm_init+0x42c>)

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ff92:	ee07 3a90 	vmov	s15, r3

bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
 800ff96:	4b16      	ldr	r3, [pc, #88]	; (800fff0 <mcpwm_init+0x430>)

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ff98:	eef8 7a67 	vcvt.f32.u32	s15, s15

bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
 800ff9c:	ed83 7a00 	vstr	s14, [r3]

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ffa0:	ee67 7a87 	vmul.f32	s15, s15, s14
bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
	MeasCurrParm.qKb    = DQKB;
 800ffa4:	ed83 7a02 	vstr	s14, [r3, #8]

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 
 800ffa8:	6809      	ldr	r1, [r1, #0]
 800ffaa:	6812      	ldr	r2, [r2, #0]

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ffac:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800ffb0:	ee67 7a87 	vmul.f32	s15, s15, s14

	MeasCurrParm.qKa    = DQKA;
	MeasCurrParm.qKb    = DQKB;

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 
 800ffb4:	b209      	sxth	r1, r1
 800ffb6:	b212      	sxth	r2, r2
	return CompVdq;
}

void InitMeasCompCurr( short Offset_a, short Offset_b )
{
	MeasCurrParm.Offseta = Offset_a;
 800ffb8:	8099      	strh	r1, [r3, #4]
	MeasCurrParm.Offsetb = Offset_b;
 800ffba:	819a      	strh	r2, [r3, #12]

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 800ffbc:	edc6 7a00 	vstr	s15, [r6]

	// ============= SVGen ===============
	// Set PWM period to Loop Time
	SVGenParm.iPWMPeriod = LOOPINTCY;
 800ffc0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ffc2:	6003      	str	r3, [r0, #0]

//--------------------------------------------------
//main ctrl setup

	SetupParm();
	SetupControlParameters();
 800ffc4:	f7ff fdb4 	bl	800fb30 <SetupControlParameters>

	//dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
	//DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);


	uGF.Word = 0;                   // clear flags
 800ffc8:	4b0a      	ldr	r3, [pc, #40]	; (800fff4 <mcpwm_init+0x434>)

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 800ffca:	2202      	movs	r2, #2

	//dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
	//DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);


	uGF.Word = 0;                   // clear flags
 800ffcc:	801c      	strh	r4, [r3, #0]

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 800ffce:	701a      	strb	r2, [r3, #0]

	
//
}
 800ffd0:	b027      	add	sp, #156	; 0x9c
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20001748 	.word	0x20001748
 800ffdc:	3a534067 	.word	0x3a534067
 800ffe0:	20001718 	.word	0x20001718
 800ffe4:	200018e8 	.word	0x200018e8
 800ffe8:	20001938 	.word	0x20001938
 800ffec:	20001834 	.word	0x20001834
 800fff0:	200018c4 	.word	0x200018c4
 800fff4:	20001934 	.word	0x20001934
	...

08010000 <VoltRippleComp>:
	// CompVdq = ------------- * Vdq
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
 8010000:	4a14      	ldr	r2, [pc, #80]	; (8010054 <VoltRippleComp+0x54>)
 8010002:	4b15      	ldr	r3, [pc, #84]	; (8010058 <VoltRippleComp+0x58>)
 8010004:	ed92 7a00 	vldr	s14, [r2]
 8010008:	edd3 7a00 	vldr	s15, [r3]
 801000c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010014:	dc11      	bgt.n	801003a <VoltRippleComp+0x3a>
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
	else if (DCbus > TargetDCbus)
 8010016:	ed93 7a00 	vldr	s14, [r3]
 801001a:	edd2 7a00 	vldr	s15, [r2]
 801001e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010026:	dd07      	ble.n	8010038 <VoltRippleComp+0x38>
		CompVdq = ((TargetDCbus/ DCbus)* Vdq);
 8010028:	edd2 6a00 	vldr	s13, [r2]
 801002c:	ed93 7a00 	vldr	s14, [r3]
 8010030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010034:	ee20 0a27 	vmul.f32	s0, s0, s15
	else
		CompVdq = Vdq;

	return CompVdq;
}
 8010038:	4770      	bx	lr
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
 801003a:	edd2 7a00 	vldr	s15, [r2]
 801003e:	ed93 7a00 	vldr	s14, [r3]
 8010042:	edd3 6a00 	vldr	s13, [r3]
 8010046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801004a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801004e:	eea7 0a00 	vfma.f32	s0, s14, s0
 8010052:	4770      	bx	lr
 8010054:	20001938 	.word	0x20001938
 8010058:	2000171c 	.word	0x2000171c
 801005c:	00000000 	.word	0x00000000

08010060 <DoControl>:
//---------------------------------------------------------------------
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
{
	if(AccumThetaCnt == 0)
 8010060:	4b30      	ldr	r3, [pc, #192]	; (8010124 <DoControl+0xc4>)
 8010062:	881b      	ldrh	r3, [r3, #0]

//---------------------------------------------------------------------
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
{
 8010064:	b570      	push	{r4, r5, r6, lr}
	if(AccumThetaCnt == 0)
 8010066:	2b00      	cmp	r3, #0
 8010068:	d03d      	beq.n	80100e6 <DoControl+0x86>
 801006a:	4e2f      	ldr	r6, [pc, #188]	; (8010128 <DoControl+0xc8>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
		CtrlParm.qVqRef = PIParmW.qOut;
	}

	if (uGF.bit.EnTorqueMod)
 801006c:	4c2f      	ldr	r4, [pc, #188]	; (801012c <DoControl+0xcc>)
		CtrlParm.qVqRef = CtrlParm.qVelRef;

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 801006e:	4d30      	ldr	r5, [pc, #192]	; (8010130 <DoControl+0xd0>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
		CtrlParm.qVqRef = PIParmW.qOut;
	}

	if (uGF.bit.EnTorqueMod)
 8010070:	7823      	ldrb	r3, [r4, #0]
		CtrlParm.qVqRef = CtrlParm.qVelRef;

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 8010072:	69e9      	ldr	r1, [r5, #28]
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
		CtrlParm.qVqRef = PIParmW.qOut;
	}

	if (uGF.bit.EnTorqueMod)
 8010074:	0758      	lsls	r0, r3, #29
		CtrlParm.qVqRef = CtrlParm.qVelRef;
 8010076:	bf44      	itt	mi
 8010078:	6833      	ldrmi	r3, [r6, #0]
 801007a:	60b3      	strmi	r3, [r6, #8]

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 801007c:	4b2d      	ldr	r3, [pc, #180]	; (8010134 <DoControl+0xd4>)
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
 801007e:	2200      	movs	r2, #0
	CalcPI(&PIParmD);
 8010080:	4618      	mov	r0, r3
		CtrlParm.qVqRef = CtrlParm.qVelRef;

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 8010082:	61d9      	str	r1, [r3, #28]
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
 8010084:	619a      	str	r2, [r3, #24]
	CalcPI(&PIParmD);
 8010086:	f7ff fd23 	bl	800fad0 <CalcPI>

	if(uGF.bit.EnVoltRipCo)
 801008a:	7822      	ldrb	r2, [r4, #0]
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 801008c:	ed93 0a08 	vldr	s0, [r3, #32]
	PIParmD.qInMeas = ParkParm.qId;
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
	CalcPI(&PIParmD);

	if(uGF.bit.EnVoltRipCo)
 8010090:	0711      	lsls	r1, r2, #28
 8010092:	d436      	bmi.n	8010102 <DoControl+0xa2>
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;
 8010094:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8010098:	ee20 0a00 	vmul.f32	s0, s0, s0
 801009c:	4b26      	ldr	r3, [pc, #152]	; (8010138 <DoControl+0xd8>)
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801009e:	eddf 7a27 	vldr	s15, [pc, #156]	; 801013c <DoControl+0xdc>
	if(uGF.bit.EnVoltRipCo)
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 80100a2:	ed83 0a00 	vstr	s0, [r3]
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80100a6:	ed93 0a00 	vldr	s0, [r3]
 80100aa:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80100ae:	eef1 7ac0 	vsqrt.f32	s15, s0
 80100b2:	eef4 7a67 	vcmp.f32	s15, s15
 80100b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ba:	d12e      	bne.n	801011a <DoControl+0xba>
 80100bc:	4b20      	ldr	r3, [pc, #128]	; (8010140 <DoControl+0xe0>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
 80100be:	6a29      	ldr	r1, [r5, #32]
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 80100c0:	68b2      	ldr	r2, [r6, #8]
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
 80100c2:	61d9      	str	r1, [r3, #28]
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80100c4:	eeb1 7a67 	vneg.f32	s14, s15

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
	PIParmQ.qInRef	= CtrlParm.qVqRef;
	CalcPI(&PIParmQ);
 80100c8:	4618      	mov	r0, r3
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 80100ca:	619a      	str	r2, [r3, #24]
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80100cc:	edc3 7a04 	vstr	s15, [r3, #16]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80100d0:	ed83 7a05 	vstr	s14, [r3, #20]

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
	PIParmQ.qInRef	= CtrlParm.qVqRef;
	CalcPI(&PIParmQ);
 80100d4:	f7ff fcfc 	bl	800fad0 <CalcPI>

	// If voltage ripple compensation flag is set, adjust the output
	// of the Q controller depending on measured DC Bus voltage
	if(uGF.bit.EnVoltRipCo)
 80100d8:	7822      	ldrb	r2, [r4, #0]
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
 80100da:	4915      	ldr	r1, [pc, #84]	; (8010130 <DoControl+0xd0>)
	PIParmQ.qInRef	= CtrlParm.qVqRef;
	CalcPI(&PIParmQ);

	// If voltage ripple compensation flag is set, adjust the output
	// of the Q controller depending on measured DC Bus voltage
	if(uGF.bit.EnVoltRipCo)
 80100dc:	0712      	lsls	r2, r2, #28
 80100de:	d415      	bmi.n	801010c <DoControl+0xac>
		ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
	else
		ParkParm.qVq = PIParmQ.qOut;
 80100e0:	6a1b      	ldr	r3, [r3, #32]
 80100e2:	628b      	str	r3, [r1, #40]	; 0x28
 80100e4:	bd70      	pop	{r4, r5, r6, pc}
void DoControl( void )
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
 80100e6:	4b17      	ldr	r3, [pc, #92]	; (8010144 <DoControl+0xe4>)
 80100e8:	4a17      	ldr	r2, [pc, #92]	; (8010148 <DoControl+0xe8>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80100ea:	4e0f      	ldr	r6, [pc, #60]	; (8010128 <DoControl+0xc8>)
void DoControl( void )
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
 80100ec:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80100f0:	6832      	ldr	r2, [r6, #0]
void DoControl( void )
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
 80100f2:	61d9      	str	r1, [r3, #28]
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
 80100f4:	4618      	mov	r0, r3
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80100f6:	619a      	str	r2, [r3, #24]
		CalcPI(&PIParmW);
 80100f8:	f7ff fcea 	bl	800fad0 <CalcPI>
		CtrlParm.qVqRef = PIParmW.qOut;
 80100fc:	6a1b      	ldr	r3, [r3, #32]
 80100fe:	60b3      	str	r3, [r6, #8]
 8010100:	e7b4      	b.n	801006c <DoControl+0xc>
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
	CalcPI(&PIParmD);

	if(uGF.bit.EnVoltRipCo)
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 8010102:	f7ff ff7d 	bl	8010000 <VoltRippleComp>
 8010106:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 801010a:	e7c5      	b.n	8010098 <DoControl+0x38>
	CalcPI(&PIParmQ);

	// If voltage ripple compensation flag is set, adjust the output
	// of the Q controller depending on measured DC Bus voltage
	if(uGF.bit.EnVoltRipCo)
		ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
 801010c:	ed93 0a08 	vldr	s0, [r3, #32]
 8010110:	f7ff ff76 	bl	8010000 <VoltRippleComp>
 8010114:	ed81 0a0a 	vstr	s0, [r1, #40]	; 0x28
 8010118:	bd70      	pop	{r4, r5, r6, pc}
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801011a:	f001 fd59 	bl	8011bd0 <sqrtf>
 801011e:	eef0 7a40 	vmov.f32	s15, s0
 8010122:	e7cb      	b.n	80100bc <DoControl+0x5c>
 8010124:	20001760 	.word	0x20001760
 8010128:	200018d4 	.word	0x200018d4
 801012c:	20001934 	.word	0x20001934
 8010130:	20001858 	.word	0x20001858
 8010134:	20001720 	.word	0x20001720
 8010138:	2000189c 	.word	0x2000189c
 801013c:	3f670a3d 	.word	0x3f670a3d
 8010140:	200018a0 	.word	0x200018a0
 8010144:	200018ec 	.word	0x200018ec
 8010148:	20001764 	.word	0x20001764
 801014c:	00000000 	.word	0x00000000

08010150 <CalcTimes>:
}


void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 8010150:	4b18      	ldr	r3, [pc, #96]	; (80101b4 <CalcTimes+0x64>)
 8010152:	4a19      	ldr	r2, [pc, #100]	; (80101b8 <CalcTimes+0x68>)
 8010154:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010156:	ed92 6a04 	vldr	s12, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 801015a:	edd2 6a05 	vldr	s13, [r2, #20]
}


void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 801015e:	6013      	str	r3, [r2, #0]

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010160:	ee07 3a90 	vmov	s15, r3
 8010164:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5

void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 801016c:	ee27 6a86 	vmul.f32	s12, s15, s12
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010170:	ee67 6aa6 	vmul.f32	s13, s15, s13
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010174:	ee77 7ac6 	vsub.f32	s15, s15, s12

void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010178:	ed82 6a04 	vstr	s12, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 801017c:	ee77 7ae6 	vsub.f32	s15, s15, s13
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010180:	edc2 6a05 	vstr	s13, [r2, #20]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 801018c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010190:	edc2 7a08 	vstr	s15, [r2, #32]
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010194:	ee77 7a06 	vadd.f32	s15, s14, s12
 8010198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 801019c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 80101a0:	edc2 7a07 	vstr	s15, [r2, #28]
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 80101a4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80101a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101ac:	edc2 7a06 	vstr	s15, [r2, #24]
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	40010000 	.word	0x40010000
 80101b8:	20001834 	.word	0x20001834
 80101bc:	00000000 	.word	0x00000000

080101c0 <update_timer_Duty>:

	return;
}  
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
 80101c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c4:	4616      	mov	r6, r2
 80101c6:	4680      	mov	r8, r0
 80101c8:	460f      	mov	r7, r1
	utils_sys_lock_cnt();
 80101ca:	f000 fbf1 	bl	80109b0 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80101ce:	4b0d      	ldr	r3, [pc, #52]	; (8010204 <update_timer_Duty+0x44>)
	TIM8->CR1 |= TIM_CR1_UDIS;
 80101d0:	4c0d      	ldr	r4, [pc, #52]	; (8010208 <update_timer_Duty+0x48>)
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
	utils_sys_lock_cnt();

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80101d2:	681d      	ldr	r5, [r3, #0]
 80101d4:	f045 0502 	orr.w	r5, r5, #2
 80101d8:	601d      	str	r5, [r3, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80101da:	6825      	ldr	r5, [r4, #0]
 80101dc:	f045 0502 	orr.w	r5, r5, #2
 80101e0:	6025      	str	r5, [r4, #0]

	TIM1->CCR1 = duty_A;
 80101e2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_B;
 80101e6:	639f      	str	r7, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_C;
 80101e8:	63de      	str	r6, [r3, #60]	; 0x3c
	//TIM8->CCR2 = duty_A;
	//TIM8->CCR3 = duty_C;


	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	f022 0202 	bic.w	r2, r2, #2
 80101f0:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	f023 0302 	bic.w	r3, r3, #2
 80101f8:	6023      	str	r3, [r4, #0]

	utils_sys_unlock_cnt();
}
 80101fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
	TIM8->CR1 &= ~TIM_CR1_UDIS;

	utils_sys_unlock_cnt();
 80101fe:	f000 bbe7 	b.w	80109d0 <utils_sys_unlock_cnt>
 8010202:	bf00      	nop
 8010204:	40010000 	.word	0x40010000
 8010208:	40010400 	.word	0x40010400
 801020c:	00000000 	.word	0x00000000

08010210 <CalcSVGen>:
}

void CalcSVGen( void )
{ 
	if( SVGenParm.qVr1 >= 0 )
 8010210:	483e      	ldr	r0, [pc, #248]	; (801030c <CalcSVGen+0xfc>)
 8010212:	edd0 7a01 	vldr	s15, [r0, #4]
 8010216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801021a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

	utils_sys_unlock_cnt();
}

void CalcSVGen( void )
{ 
 801021e:	b508      	push	{r3, lr}
	if( SVGenParm.qVr1 >= 0 )
 8010220:	db26      	blt.n	8010270 <CalcSVGen+0x60>
	{       
		// (xx1)
		if( SVGenParm.qVr2 >= 0 )
 8010222:	ed90 7a02 	vldr	s14, [r0, #8]
 8010226:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801022a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022e:	da13      	bge.n	8010258 <CalcSVGen+0x48>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
		}
		else
		{            
			// (x01)
			if( SVGenParm.qVr3 >= 0 )
 8010230:	edd0 6a03 	vldr	s13, [r0, #12]
 8010234:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023c:	db44      	blt.n	80102c8 <CalcSVGen+0xb8>
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
 801023e:	edc0 7a05 	vstr	s15, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr3;
 8010242:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8010246:	f7ff ff83 	bl	8010150 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 801024a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
				SVGenParm.T1 = SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 801024e:	69c2      	ldr	r2, [r0, #28]
 8010250:	6981      	ldr	r1, [r0, #24]
 8010252:	6a00      	ldr	r0, [r0, #32]
 8010254:	f7ff bfb4 	b.w	80101c0 <update_timer_Duty>
		if( SVGenParm.qVr2 >= 0 )
		{
			// (x11)
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
 8010258:	ed80 7a05 	vstr	s14, [r0, #20]
			SVGenParm.T1 = SVGenParm.qVr1;
 801025c:	edc0 7a04 	vstr	s15, [r0, #16]
			CalcTimes();
 8010260:	f7ff ff76 	bl	8010150 <CalcTimes>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8010264:	3018      	adds	r0, #24
 8010266:	c807      	ldmia	r0, {r0, r1, r2}
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
			SVGenParm.T1 = SVGenParm.qVr1;
			CalcTimes();
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 801026c:	f7ff bfa8 	b.w	80101c0 <update_timer_Duty>
		}
	}
	else
	{
		// (xx0)
		if( SVGenParm.qVr2 >= 0 )
 8010270:	edd0 6a02 	vldr	s13, [r0, #8]
 8010274:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027c:	db35      	blt.n	80102ea <CalcSVGen+0xda>
		{
			// (x10)
			if( SVGenParm.qVr3 >= 0 )
 801027e:	ed90 7a03 	vldr	s14, [r0, #12]
 8010282:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801028a:	db0c      	blt.n	80102a6 <CalcSVGen+0x96>
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
 801028c:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr2;
 8010290:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8010294:	f7ff ff5c 	bl	8010150 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
				SVGenParm.T1 = SVGenParm.qVr2;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 801029c:	6982      	ldr	r2, [r0, #24]
 801029e:	6a01      	ldr	r1, [r0, #32]
 80102a0:	69c0      	ldr	r0, [r0, #28]
 80102a2:	f7ff bf8d 	b.w	80101c0 <update_timer_Duty>
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 80102a6:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr1;
 80102aa:	eef1 7a67 	vneg.f32	s15, s15
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 80102ae:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr1;
 80102b2:	edc0 7a04 	vstr	s15, [r0, #16]
				CalcTimes();
 80102b6:	f7ff ff4b 	bl	8010150 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80102ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
				SVGenParm.T1 = -SVGenParm.qVr1;
				CalcTimes();
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 80102be:	69c2      	ldr	r2, [r0, #28]
 80102c0:	6a01      	ldr	r1, [r0, #32]
 80102c2:	6980      	ldr	r0, [r0, #24]
 80102c4:	f7ff bf7c 	b.w	80101c0 <update_timer_Duty>

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 80102c8:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr3;
 80102cc:	eef1 6a66 	vneg.f32	s13, s13

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 80102d0:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr3;
 80102d4:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 80102d8:	f7ff ff3a 	bl	8010150 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80102dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
				SVGenParm.T1 = -SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 80102e0:	6a02      	ldr	r2, [r0, #32]
 80102e2:	6981      	ldr	r1, [r0, #24]
 80102e4:	69c0      	ldr	r0, [r0, #28]
 80102e6:	f7ff bf6b 	b.w	80101c0 <update_timer_Duty>
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 80102ea:	eef1 7a67 	vneg.f32	s15, s15
			SVGenParm.T1 = -SVGenParm.qVr2;
 80102ee:	eef1 6a66 	vneg.f32	s13, s13
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 80102f2:	edc0 7a05 	vstr	s15, [r0, #20]
			SVGenParm.T1 = -SVGenParm.qVr2;
 80102f6:	edc0 6a04 	vstr	s13, [r0, #16]
			CalcTimes();
 80102fa:	f7ff ff29 	bl	8010150 <CalcTimes>
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80102fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
			SVGenParm.T1 = -SVGenParm.qVr2;
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 8010302:	6982      	ldr	r2, [r0, #24]
 8010304:	69c1      	ldr	r1, [r0, #28]
 8010306:	6a00      	ldr	r0, [r0, #32]
 8010308:	f7ff bf5a 	b.w	80101c0 <update_timer_Duty>
 801030c:	20001834 	.word	0x20001834

08010310 <SMC_HallSensor_Estimation>:
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010310:	4b68      	ldr	r3, [pc, #416]	; (80104b4 <SMC_HallSensor_Estimation+0x1a4>)
 8010312:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80104b8 <SMC_HallSensor_Estimation+0x1a8>
 8010316:	889a      	ldrh	r2, [r3, #4]
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010318:	885b      	ldrh	r3, [r3, #2]
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801031a:	eddf 6a68 	vldr	s13, [pc, #416]	; 80104bc <SMC_HallSensor_Estimation+0x1ac>
 801031e:	ee07 2a10 	vmov	s14, r2
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010322:	ee07 3a90 	vmov	s15, r3
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void SMC_HallSensor_Estimation (SMC *s)
{
 8010326:	b510      	push	{r4, lr}


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010328:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801032c:	eef8 7a67 	vcvt.f32.u32	s15, s15
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010330:	ee37 7a46 	vsub.f32	s14, s14, s12
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010334:	ee77 7ac6 	vsub.f32	s15, s15, s12
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void SMC_HallSensor_Estimation (SMC *s)
{
 8010338:	ed2d 8b04 	vpush	{d8-d9}


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801033c:	eec7 8a26 	vdiv.f32	s17, s14, s13
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void SMC_HallSensor_Estimation (SMC *s)
{
 8010340:	4604      	mov	r4, r0


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010342:	ee87 9aa6 	vdiv.f32	s18, s15, s13

	s->costh = cosf(s->Theta);
 8010346:	ed90 8a2e 	vldr	s16, [r0, #184]	; 0xb8
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801034a:	edc0 8a12 	vstr	s17, [r0, #72]	; 0x48
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801034e:	ed80 9a14 	vstr	s18, [r0, #80]	; 0x50

	s->costh = cosf(s->Theta);
 8010352:	eeb0 0a48 	vmov.f32	s0, s16
 8010356:	f001 fba3 	bl	8011aa0 <cosf>
 801035a:	eef0 9a40 	vmov.f32	s19, s0
 801035e:	edc4 9a24 	vstr	s19, [r4, #144]	; 0x90
	s->sinth = sinf(s->Theta);
 8010362:	eeb0 0a48 	vmov.f32	s0, s16
 8010366:	f001 fbe3 	bl	8011b30 <sinf>
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
 801036a:	ee68 8aa9 	vmul.f32	s17, s17, s19
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 801036e:	ee29 9a00 	vmul.f32	s18, s18, s0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010372:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8010376:	ed9f 6a52 	vldr	s12, [pc, #328]	; 80104c0 <SMC_HallSensor_Estimation+0x1b0>
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;

	s->costh = cosf(s->Theta);
	s->sinth = sinf(s->Theta);
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
 801037a:	edc4 8a21 	vstr	s17, [r4, #132]	; 0x84
	s->Hall_CosSin = s->HallPLLB * s->sinth;

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
 801037e:	ee78 8ac9 	vsub.f32	s17, s17, s18
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010382:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40

	s->costh = cosf(s->Theta);
	s->sinth = sinf(s->Theta);
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 8010386:	ed84 9a22 	vstr	s18, [r4, #136]	; 0x88

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 801038a:	eed8 7a86 	vfnms.f32	s15, s17, s12
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 801038e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010392:	ee77 7aa6 	vadd.f32	s15, s15, s13

	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;

	s->costh = cosf(s->Theta);
	s->sinth = sinf(s->Theta);
 8010396:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 801039a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a2:	dc0f      	bgt.n	80103c4 <SMC_HallSensor_Estimation+0xb4>
 80103a4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80103a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b0:	d561      	bpl.n	8010476 <SMC_HallSensor_Estimation+0x166>
 80103b2:	eef0 7a47 	vmov.f32	s15, s14
 80103b6:	eddf 5a43 	vldr	s11, [pc, #268]	; 80104c4 <SMC_HallSensor_Estimation+0x1b4>
 80103ba:	eddf 6a43 	vldr	s13, [pc, #268]	; 80104c8 <SMC_HallSensor_Estimation+0x1b8>
 80103be:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80104cc <SMC_HallSensor_Estimation+0x1bc>
 80103c2:	e007      	b.n	80103d4 <SMC_HallSensor_Estimation+0xc4>
 80103c4:	eef0 7a47 	vmov.f32	s15, s14
 80103c8:	eddf 5a41 	vldr	s11, [pc, #260]	; 80104d0 <SMC_HallSensor_Estimation+0x1c0>
 80103cc:	eddf 6a41 	vldr	s13, [pc, #260]	; 80104d4 <SMC_HallSensor_Estimation+0x1c4>
 80103d0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80104d8 <SMC_HallSensor_Estimation+0x1c8>
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 80103d4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80104dc <SMC_HallSensor_Estimation+0x1cc>
	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 80103d8:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
 80103dc:	ee37 0a88 	vadd.f32	s0, s15, s16
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
	s->Hall_Err0= err;									
 80103e0:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 80103e4:	eeb4 0ac6 	vcmpe.f32	s0, s12
 80103e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ec:	dd2f      	ble.n	801044e <SMC_HallSensor_Estimation+0x13e>
 80103ee:	ee30 0a46 	vsub.f32	s0, s0, s12
 80103f2:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->ThetaCal= s->Theta + 0.3f;
 80103f6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80104e0 <SMC_HallSensor_Estimation+0x1d0>

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
 80103fa:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80104dc <SMC_HallSensor_Estimation+0x1cc>
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->ThetaCal= s->Theta + 0.3f;
 80103fe:	ee30 0a05 	vadd.f32	s0, s0, s10

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
 8010402:	eeb4 0ac6 	vcmpe.f32	s0, s12
 8010406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040a:	dd2a      	ble.n	8010462 <SMC_HallSensor_Estimation+0x152>
 801040c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010410:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
 8010414:	ed94 5a30 	vldr	s10, [r4, #192]	; 0xc0
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8010418:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80104dc <SMC_HallSensor_Estimation+0x1cc>
	s->ThetaCal= s->Theta + 0.3f;

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;

	s->Omega = s->Hall_PIout;
 801041c:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8


	s->trueTheta += (s->Hall_PIout /7.0f) ;
 8010420:	ee77 7a05 	vadd.f32	s15, s14, s10
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8010424:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042c:	dc36      	bgt.n	801049c <SMC_HallSensor_Estimation+0x18c>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 801042e:	ecbd 8b04 	vpop	{d8-d9}
	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;
 8010432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043a:	bf48      	it	mi
 801043c:	ee77 7a86 	vaddmi.f32	s15, s15, s12

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
 8010440:	edc4 6a31 	vstr	s13, [r4, #196]	; 0xc4
	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;
 8010444:	edc4 7a30 	vstr	s15, [r4, #192]	; 0xc0

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
	s->rpm = 120.0f * s->Futi / 7.0f;
 8010448:	edc4 5a33 	vstr	s11, [r4, #204]	; 0xcc

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 801044c:	bd10      	pop	{r4, pc}
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 801044e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010456:	bf48      	it	mi
 8010458:	ee30 0a06 	vaddmi.f32	s0, s0, s12
 801045c:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8010460:	e7c9      	b.n	80103f6 <SMC_HallSensor_Estimation+0xe6>

	s->ThetaCal= s->Theta + 0.3f;

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;
 8010462:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046a:	bf48      	it	mi
 801046c:	ee30 0a06 	vaddmi.f32	s0, s0, s12
 8010470:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
 8010474:	e7ce      	b.n	8010414 <SMC_HallSensor_Estimation+0x104>
 8010476:	eddf 5a19 	vldr	s11, [pc, #100]	; 80104dc <SMC_HallSensor_Estimation+0x1cc>
 801047a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80104e4 <SMC_HallSensor_Estimation+0x1d4>
 801047e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80104e8 <SMC_HallSensor_Estimation+0x1d8>
 8010482:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8010486:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
 801048a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801048e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8010492:	ee26 6a86 	vmul.f32	s12, s13, s12
 8010496:	eec6 5a05 	vdiv.f32	s11, s12, s10
 801049a:	e79b      	b.n	80103d4 <SMC_HallSensor_Estimation+0xc4>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 801049c:	ecbd 8b04 	vpop	{d8-d9}

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 80104a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
 80104a4:	edc4 6a31 	vstr	s13, [r4, #196]	; 0xc4

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 80104a8:	edc4 7a30 	vstr	s15, [r4, #192]	; 0xc0
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
	s->rpm = 120.0f * s->Futi / 7.0f;
 80104ac:	edc4 5a33 	vstr	s11, [r4, #204]	; 0xcc

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	bf00      	nop
 80104b4:	20001748 	.word	0x20001748
 80104b8:	449b2000 	.word	0x449b2000
 80104bc:	457ff000 	.word	0x457ff000
 80104c0:	3f80020c 	.word	0x3f80020c
 80104c4:	c8d52769 	.word	0xc8d52769
 80104c8:	c6c6f195 	.word	0xc6c6f195
 80104cc:	bfb6db6e 	.word	0xbfb6db6e
 80104d0:	48d52769 	.word	0x48d52769
 80104d4:	46c6f195 	.word	0x46c6f195
 80104d8:	3fb6db6e 	.word	0x3fb6db6e
 80104dc:	40c90fdb 	.word	0x40c90fdb
 80104e0:	3e99999a 	.word	0x3e99999a
 80104e4:	467a0000 	.word	0x467a0000
 80104e8:	42f00000 	.word	0x42f00000
 80104ec:	00000000 	.word	0x00000000

080104f0 <mcpwm_adc_int_handler>:

/*
 * New ADC samples ready. Do commutation!
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) 
{
 80104f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 80104f2:	4a5c      	ldr	r2, [pc, #368]	; (8010664 <mcpwm_adc_int_handler+0x174>)

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80104f4:	4c5c      	ldr	r4, [pc, #368]	; (8010668 <mcpwm_adc_int_handler+0x178>)
	(void)p;
	(void)flags;

	TIM12->CNT = 0;

	curr_start_samples++;
 80104f6:	4e5d      	ldr	r6, [pc, #372]	; (801066c <mcpwm_adc_int_handler+0x17c>)
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80104f8:	8923      	ldrh	r3, [r4, #8]
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80104fa:	f8b4 e006 	ldrh.w	lr, [r4, #6]
	(void)flags;

	TIM12->CNT = 0;

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80104fe:	485c      	ldr	r0, [pc, #368]	; (8010670 <mcpwm_adc_int_handler+0x180>)
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 8010500:	4f5c      	ldr	r7, [pc, #368]	; (8010674 <mcpwm_adc_int_handler+0x184>)
void mcpwm_adc_int_handler(void *p, uint32_t flags) 
{
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 8010502:	2500      	movs	r5, #0

/*
 * New ADC samples ready. Do commutation!
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) 
{
 8010504:	ed2d 8b04 	vpush	{d8-d9}
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 8010508:	6255      	str	r5, [r2, #36]	; 0x24

	curr_start_samples++;
 801050a:	6831      	ldr	r1, [r6, #0]
 801050c:	3101      	adds	r1, #1
 801050e:	6031      	str	r1, [r6, #0]
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 8010510:	6802      	ldr	r2, [r0, #0]
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;

	SMC_HallSensor_Estimation (&smc1);
 8010512:	4e59      	ldr	r6, [pc, #356]	; (8010678 <mcpwm_adc_int_handler+0x188>)
	(void)flags;

	TIM12->CNT = 0;

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 8010514:	441a      	add	r2, r3
 8010516:	6002      	str	r2, [r0, #0]
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 8010518:	683b      	ldr	r3, [r7, #0]

	SMC_HallSensor_Estimation (&smc1);
 801051a:	4630      	mov	r0, r6

	TIM12->CNT = 0;

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 801051c:	4473      	add	r3, lr
 801051e:	603b      	str	r3, [r7, #0]

	SMC_HallSensor_Estimation (&smc1);
 8010520:	f7ff fef6 	bl	8010310 <SMC_HallSensor_Estimation>

	// Check for faults that should stop the motor
	uGF.bit.RunMotor = 1;
 8010524:	4a55      	ldr	r2, [pc, #340]	; (801067c <mcpwm_adc_int_handler+0x18c>)
 8010526:	7813      	ldrb	r3, [r2, #0]
 8010528:	f043 0302 	orr.w	r3, r3, #2
 801052c:	7013      	strb	r3, [r2, #0]
	if( uGF.bit.RunMotor )
 801052e:	079b      	lsls	r3, r3, #30
 8010530:	f140 808d 	bpl.w	801064e <mcpwm_adc_int_handler+0x15e>
		{
			ENABLE_GATE();
 8010534:	4852      	ldr	r0, [pc, #328]	; (8010680 <mcpwm_adc_int_handler+0x190>)
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
	
			//Uart3_printf(&SD3,  "%f,%d,%d\r\n",ParkParm.qAngle ,ParkParm.qIa,CorrADC2);

			// Calculate commutation angle using estimator
			ParkParm.qAngle = smc1.Theta;
 8010536:	ed96 9a2e 	vldr	s18, [r6, #184]	; 0xb8
//			LED_RED_ON();
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 801053a:	4952      	ldr	r1, [pc, #328]	; (8010684 <mcpwm_adc_int_handler+0x194>)
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 801053c:	8922      	ldrh	r2, [r4, #8]
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 801053e:	88e3      	ldrh	r3, [r4, #6]
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010540:	4c51      	ldr	r4, [pc, #324]	; (8010688 <mcpwm_adc_int_handler+0x198>)
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010542:	4f52      	ldr	r7, [pc, #328]	; (801068c <mcpwm_adc_int_handler+0x19c>)

	// Check for faults that should stop the motor
	uGF.bit.RunMotor = 1;
	if( uGF.bit.RunMotor )
		{
			ENABLE_GATE();
 8010544:	2640      	movs	r6, #64	; 0x40
 8010546:	8306      	strh	r6, [r0, #24]
//			LED_RED_ON();
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8010548:	888e      	ldrh	r6, [r1, #4]
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 801054a:	8988      	ldrh	r0, [r1, #12]
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 801054c:	ed91 7a00 	vldr	s14, [r1]
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010550:	edd1 7a02 	vldr	s15, [r1, #8]
	
			//Uart3_printf(&SD3,  "%f,%d,%d\r\n",ParkParm.qAngle ,ParkParm.qIa,CorrADC2);

			// Calculate commutation angle using estimator
			ParkParm.qAngle = smc1.Theta;
 8010554:	ed84 9a00 	vstr	s18, [r4]
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8010558:	b201      	sxth	r1, r0
 801055a:	1a5b      	subs	r3, r3, r1
 801055c:	ee08 3a10 	vmov	s16, r3
//			LED_RED_ON();
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8010560:	b236      	sxth	r6, r6
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010562:	eeb8 8ac8 	vcvt.f32.s32	s16, s16

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010566:	1b92      	subs	r2, r2, r6
 8010568:	ee08 2a90 	vmov	s17, r2
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 801056c:	ee28 8a27 	vmul.f32	s16, s16, s15

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010570:	eef8 8ae8 	vcvt.f32.s32	s17, s17
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010574:	eddf 7a46 	vldr	s15, [pc, #280]	; 8010690 <mcpwm_adc_int_handler+0x1a0>
			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010578:	ed84 8a04 	vstr	s16, [r4, #16]
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 801057c:	ee38 8a08 	vadd.f32	s16, s16, s16

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010580:	ee68 8a87 	vmul.f32	s17, s17, s14
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010584:	ee28 8a27 	vmul.f32	s16, s16, s15
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010588:	883b      	ldrh	r3, [r7, #0]

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 801058a:	edc4 8a03 	vstr	s17, [r4, #12]
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 801058e:	eea8 8aa7 	vfma.f32	s16, s17, s15
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010592:	3301      	adds	r3, #1
 8010594:	b29b      	uxth	r3, r3
			if (AccumThetaCnt == IRP_PERCALC)
 8010596:	2b10      	cmp	r3, #16
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010598:	eeb0 0a49 	vmov.f32	s0, s18
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 801059c:	bf14      	ite	ne
 801059e:	803b      	strhne	r3, [r7, #0]
			if (AccumThetaCnt == IRP_PERCALC)
			{
				AccumThetaCnt = 0;
 80105a0:	803d      	strheq	r5, [r7, #0]
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
 80105a2:	edc4 8a05 	vstr	s17, [r4, #20]
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 80105a6:	ed84 8a06 	vstr	s16, [r4, #24]
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 80105aa:	f001 fa79 	bl	8011aa0 <cosf>
 80105ae:	eef0 9a40 	vmov.f32	s19, s0
 80105b2:	eeb0 0a49 	vmov.f32	s0, s18
 80105b6:	f001 fabb 	bl	8011b30 <sinf>
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 80105ba:	ee68 7a29 	vmul.f32	s15, s16, s19
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 80105be:	ee28 8a00 	vmul.f32	s16, s16, s0
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 80105c2:	eee8 7a80 	vfma.f32	s15, s17, s0
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 80105c6:	eea8 8ae9 	vfms.f32	s16, s17, s19
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 80105ca:	edc4 7a08 	vstr	s15, [r4, #32]
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 80105ce:	ed84 8a07 	vstr	s16, [r4, #28]
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
	
			// Calculate control values
			DoControl();
 80105d2:	f7ff fd45 	bl	8010060 <DoControl>
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 80105d6:	edd4 9a00 	vldr	s19, [r4]
 80105da:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 80105de:	eeb0 0a69 	vmov.f32	s0, s19
 80105e2:	f001 fa5d 	bl	8011aa0 <cosf>
 80105e6:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 80105ea:	eef0 8a40 	vmov.f32	s17, s0
 80105ee:	eeb0 0a69 	vmov.f32	s0, s19
 80105f2:	f001 fa9d 	bl	8011b30 <sinf>
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 80105f6:	ee68 6a88 	vmul.f32	s13, s17, s16
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 80105fa:	ee60 7a48 	vnmul.f32	s15, s0, s16
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 80105fe:	eee9 6a00 	vfma.f32	s13, s18, s0
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
 8010602:	4b24      	ldr	r3, [pc, #144]	; (8010694 <mcpwm_adc_int_handler+0x1a4>)
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010604:	eee9 7a28 	vfma.f32	s15, s18, s17
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010608:	eddf 5a23 	vldr	s11, [pc, #140]	; 8010698 <mcpwm_adc_int_handler+0x1a8>
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 801060c:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010610:	eeb1 7a66 	vneg.f32	s14, s13
 8010614:	eeb0 6a47 	vmov.f32	s12, s14
 8010618:	eea7 6aa5 	vfma.f32	s12, s15, s11
			SVGenParm.qVr3 = (-ParkParm.qVbeta	- SQRT3 * ParkParm.qValpha)/2;
 801061c:	eea7 7ae5 	vfms.f32	s14, s15, s11
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010620:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010624:	ee66 7a25 	vmul.f32	s15, s12, s11
			SVGenParm.qVr3 = (-ParkParm.qVbeta	- SQRT3 * ParkParm.qValpha)/2;
 8010628:	ee27 7a25 	vmul.f32	s14, s14, s11
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 801062c:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
 8010630:	edc3 6a01 	vstr	s13, [r3, #4]
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010634:	edc3 7a02 	vstr	s15, [r3, #8]
			SVGenParm.qVr3 = (-ParkParm.qVbeta	- SQRT3 * ParkParm.qValpha)/2;
 8010638:	ed83 7a03 	vstr	s14, [r3, #12]


			CalcSVGen();
 801063c:	f7ff fde8 	bl	8010210 <CalcSVGen>
		}

	// Reset the watchdog
	WWDG_SetCounter(100);

}
 8010640:	ecbd 8b04 	vpop	{d8-d9}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 8010644:	2064      	movs	r0, #100	; 0x64

}
 8010646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 801064a:	f001 ba01 	b.w	8011a50 <WWDG_SetCounter>
	
				
		}
		else
		{
			DISABLE_GATE();
 801064e:	4b0c      	ldr	r3, [pc, #48]	; (8010680 <mcpwm_adc_int_handler+0x190>)
 8010650:	2240      	movs	r2, #64	; 0x40
 8010652:	835a      	strh	r2, [r3, #26]
		}

	// Reset the watchdog
	WWDG_SetCounter(100);

}
 8010654:	ecbd 8b04 	vpop	{d8-d9}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 8010658:	2064      	movs	r0, #100	; 0x64

}
 801065a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 801065e:	f001 b9f7 	b.w	8011a50 <WWDG_SetCounter>
 8010662:	bf00      	nop
 8010664:	40001800 	.word	0x40001800
 8010668:	20001748 	.word	0x20001748
 801066c:	20001744 	.word	0x20001744
 8010670:	20001898 	.word	0x20001898
 8010674:	200018e4 	.word	0x200018e4
 8010678:	20001764 	.word	0x20001764
 801067c:	20001934 	.word	0x20001934
 8010680:	40020800 	.word	0x40020800
 8010684:	200018c4 	.word	0x200018c4
 8010688:	20001858 	.word	0x20001858
 801068c:	20001760 	.word	0x20001760
 8010690:	3f13cd3a 	.word	0x3f13cd3a
 8010694:	20001834 	.word	0x20001834
 8010698:	3fddb3d7 	.word	0x3fddb3d7
 801069c:	00000000 	.word	0x00000000

080106a0 <icuperiodcb>:
			done_func();
		}
	}
}

static void icuperiodcb(ICUDriver *icup) {
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
	...

080106b0 <icuwidthcb>:
// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {

	last_len_received[0] = ((float) icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0f));
 80106b0:	6903      	ldr	r3, [r0, #16]
 80106b2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80107b0 <icuwidthcb+0x100>
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	493e      	ldr	r1, [pc, #248]	; (80107b4 <icuwidthcb+0x104>)
	
	float len = last_len_received[0] - pulse_start;
 80106ba:	4a3f      	ldr	r2, [pc, #252]	; (80107b8 <icuwidthcb+0x108>)
	const float len_set = pulse_end - pulse_start;
 80106bc:	483f      	ldr	r0, [pc, #252]	; (80107bc <icuwidthcb+0x10c>)
// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {

	last_len_received[0] = ((float) icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0f));
 80106be:	3301      	adds	r3, #1
 80106c0:	ee07 3a90 	vmov	s15, r3
 80106c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
static volatile bool use_median_filter = false;

// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
 80106c8:	b570      	push	{r4, r5, r6, lr}

	last_len_received[0] = ((float) icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0f));
 80106ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
static volatile bool use_median_filter = false;

// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
 80106ce:	ed2d 8b02 	vpush	{d8}

	last_len_received[0] = ((float) icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0f));
 80106d2:	ed81 7a00 	vstr	s14, [r1]
	
	float len = last_len_received[0] - pulse_start;
 80106d6:	edd1 7a00 	vldr	s15, [r1]
 80106da:	ed92 6a00 	vldr	s12, [r2]
	const float len_set = pulse_end - pulse_start;
 80106de:	ed90 7a00 	vldr	s14, [r0]
 80106e2:	edd2 6a00 	vldr	s13, [r2]

static void icuwidthcb(ICUDriver *icup) {

	last_len_received[0] = ((float) icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0f));
	
	float len = last_len_received[0] - pulse_start;
 80106e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
	const float len_set = pulse_end - pulse_start;
 80106ea:	ee37 7a66 	vsub.f32	s14, s14, s13

	//Uart3_printf(&SD3, (uint8_t *)"len_set:%f\r\n",len_set);

	if (len > len_set) {
 80106ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80106f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f6:	dd2d      	ble.n	8010754 <icuwidthcb+0xa4>
		if (len < (len_set * 1.2)) {
 80106f8:	eddf 6a31 	vldr	s13, [pc, #196]	; 80107c0 <icuwidthcb+0x110>
 80106fc:	ee67 6a26 	vmul.f32	s13, s14, s13
 8010700:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010708:	d53b      	bpl.n	8010782 <icuwidthcb+0xd2>
			len = len_set;
 801070a:	eef0 7a47 	vmov.f32	s15, s14
			// Too short pulse. Most likely something is wrong.
			len = -1.0;
		}
	}

	if (len >= 0.0) {
 801070e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010716:	db34      	blt.n	8010782 <icuwidthcb+0xd2>
 8010718:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if (use_median_filter) {
 801071c:	4b29      	ldr	r3, [pc, #164]	; (80107c4 <icuwidthcb+0x114>)
 801071e:	781b      	ldrb	r3, [r3, #0]
			float c = (len * 2.0 - len_set) / len_set;
 8010720:	ee77 7ac7 	vsub.f32	s15, s15, s14
			len = -1.0;
		}
	}

	if (len >= 0.0) {
		if (use_median_filter) {
 8010724:	bb83      	cbnz	r3, 8010788 <icuwidthcb+0xd8>
			c2 = c1;
			c1 = c;

			servo_pos[0] = med;
		} else {
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
 8010726:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801072a:	4b27      	ldr	r3, [pc, #156]	; (80107c8 <icuwidthcb+0x118>)
 801072c:	edc3 6a00 	vstr	s13, [r3]
 8010730:	2320      	movs	r3, #32
 8010732:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 8010736:	4a25      	ldr	r2, [pc, #148]	; (80107cc <icuwidthcb+0x11c>)
 8010738:	2300      	movs	r3, #0
 801073a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801073c:	f383 8811 	msr	BASEPRI, r3
		}

		last_update_time = chVTGetSystemTime();

		if (done_func) {
 8010740:	4b23      	ldr	r3, [pc, #140]	; (80107d0 <icuwidthcb+0x120>)
			servo_pos[0] = med;
		} else {
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
		}

		last_update_time = chVTGetSystemTime();
 8010742:	4a24      	ldr	r2, [pc, #144]	; (80107d4 <icuwidthcb+0x124>)

		if (done_func) {
 8010744:	681b      	ldr	r3, [r3, #0]
			servo_pos[0] = med;
		} else {
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
		}

		last_update_time = chVTGetSystemTime();
 8010746:	6011      	str	r1, [r2, #0]

		if (done_func) {
 8010748:	b1db      	cbz	r3, 8010782 <icuwidthcb+0xd2>
			done_func();
		}
	}
}
 801074a:	ecbd 8b02 	vpop	{d8}
 801074e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}

		last_update_time = chVTGetSystemTime();

		if (done_func) {
			done_func();
 8010752:	4718      	bx	r3
			len = len_set;
		} else {
			// Too long pulse. Most likely something is wrong.
			len = -1.0;
		}
	} else if (len < 0.0) {
 8010754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801075c:	d5d7      	bpl.n	801070e <icuwidthcb+0x5e>
		if ((len + pulse_start) > (pulse_start * 0.8)) {
 801075e:	edd2 5a00 	vldr	s11, [r2]
 8010762:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80107d8 <icuwidthcb+0x128>
 8010766:	edd2 6a00 	vldr	s13, [r2]
 801076a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801076e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010772:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077a:	dd02      	ble.n	8010782 <icuwidthcb+0xd2>
 801077c:	eddf 7a17 	vldr	s15, [pc, #92]	; 80107dc <icuwidthcb+0x12c>
 8010780:	e7cc      	b.n	801071c <icuwidthcb+0x6c>

		if (done_func) {
			done_func();
		}
	}
}
 8010782:	ecbd 8b02 	vpop	{d8}
 8010786:	bd70      	pop	{r4, r5, r6, pc}
		}
	}

	if (len >= 0.0) {
		if (use_median_filter) {
			float c = (len * 2.0 - len_set) / len_set;
 8010788:	ee87 8a87 	vdiv.f32	s16, s15, s14
			static float c1 = 0.5;
			static float c2 = 0.5;
			float med = utils_middle_of_3(c, c1, c2);
 801078c:	4c14      	ldr	r4, [pc, #80]	; (80107e0 <icuwidthcb+0x130>)
 801078e:	4d15      	ldr	r5, [pc, #84]	; (80107e4 <icuwidthcb+0x134>)
 8010790:	edd4 0a00 	vldr	s1, [r4]
 8010794:	ed95 1a00 	vldr	s2, [r5]
 8010798:	eeb0 0a48 	vmov.f32	s0, s16
 801079c:	f000 f8c8 	bl	8010930 <utils_middle_of_3>

			c2 = c1;
			c1 = c;

			servo_pos[0] = med;
 80107a0:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <icuwidthcb+0x118>)
			float c = (len * 2.0 - len_set) / len_set;
			static float c1 = 0.5;
			static float c2 = 0.5;
			float med = utils_middle_of_3(c, c1, c2);

			c2 = c1;
 80107a2:	6822      	ldr	r2, [r4, #0]
 80107a4:	602a      	str	r2, [r5, #0]
			c1 = c;
 80107a6:	ed84 8a00 	vstr	s16, [r4]

			servo_pos[0] = med;
 80107aa:	ed83 0a00 	vstr	s0, [r3]
 80107ae:	e7bf      	b.n	8010730 <icuwidthcb+0x80>
 80107b0:	447a0000 	.word	0x447a0000
 80107b4:	20001944 	.word	0x20001944
 80107b8:	20000810 	.word	0x20000810
 80107bc:	20000804 	.word	0x20000804
 80107c0:	3f99999a 	.word	0x3f99999a
 80107c4:	20001948 	.word	0x20001948
 80107c8:	2000193c 	.word	0x2000193c
 80107cc:	20000c70 	.word	0x20000c70
 80107d0:	2000194c 	.word	0x2000194c
 80107d4:	20001940 	.word	0x20001940
 80107d8:	3f4ccccd 	.word	0x3f4ccccd
 80107dc:	00000000 	.word	0x00000000
 80107e0:	2000080c 	.word	0x2000080c
 80107e4:	20000808 	.word	0x20000808
	...

080107f0 <servodec_init>:
 *
 * @param d_func
 * A function that should be called every time the servo signals have been
 * decoded. Can be NULL.
 */
void servodec_init(void (*d_func)(void)) {
 80107f0:	b538      	push	{r3, r4, r5, lr}
	icuStart(&HW_ICU_DEV, &icucfg);
 80107f2:	4c0d      	ldr	r4, [pc, #52]	; (8010828 <servodec_init+0x38>)
 80107f4:	490d      	ldr	r1, [pc, #52]	; (801082c <servodec_init+0x3c>)
 *
 * @param d_func
 * A function that should be called every time the servo signals have been
 * decoded. Can be NULL.
 */
void servodec_init(void (*d_func)(void)) {
 80107f6:	4605      	mov	r5, r0
	icuStart(&HW_ICU_DEV, &icucfg);
 80107f8:	4620      	mov	r0, r4
 80107fa:	f7fd f821 	bl	800d840 <icuStart>
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
 80107fe:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010802:	2180      	movs	r1, #128	; 0x80
 8010804:	480a      	ldr	r0, [pc, #40]	; (8010830 <servodec_init+0x40>)
 8010806:	f7fe f953 	bl	800eab0 <_pal_lld_setgroupmode>
	icuStartCapture(&HW_ICU_DEV);
 801080a:	4620      	mov	r0, r4
 801080c:	f7fd f828 	bl	800d860 <icuStartCapture>
	icuEnableNotifications(&HW_ICU_DEV);
 8010810:	4620      	mov	r0, r4
 8010812:	f7fd f835 	bl	800d880 <icuEnableNotifications>
		servo_pos[i] = 0.0;
		last_len_received[i] = 0.0;
	}

	// Set our function pointer
	done_func = d_func;
 8010816:	4807      	ldr	r0, [pc, #28]	; (8010834 <servodec_init+0x44>)
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
	icuStartCapture(&HW_ICU_DEV);
	icuEnableNotifications(&HW_ICU_DEV);

	for (int i = 0;i < SERVO_NUM;i++) {
		servo_pos[i] = 0.0;
 8010818:	4907      	ldr	r1, [pc, #28]	; (8010838 <servodec_init+0x48>)
		last_len_received[i] = 0.0;
 801081a:	4a08      	ldr	r2, [pc, #32]	; (801083c <servodec_init+0x4c>)
	}

	// Set our function pointer
	done_func = d_func;
 801081c:	6005      	str	r5, [r0, #0]
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
	icuStartCapture(&HW_ICU_DEV);
	icuEnableNotifications(&HW_ICU_DEV);

	for (int i = 0;i < SERVO_NUM;i++) {
		servo_pos[i] = 0.0;
 801081e:	2300      	movs	r3, #0
 8010820:	600b      	str	r3, [r1, #0]
		last_len_received[i] = 0.0;
 8010822:	6013      	str	r3, [r2, #0]
 8010824:	bd38      	pop	{r3, r4, r5, pc}
 8010826:	bf00      	nop
 8010828:	2000128c 	.word	0x2000128c
 801082c:	20000814 	.word	0x20000814
 8010830:	40020400 	.word	0x40020400
 8010834:	2000194c 	.word	0x2000194c
 8010838:	2000193c 	.word	0x2000193c
 801083c:	20001944 	.word	0x20001944

08010840 <servodec_set_pulse_options>:
 *
 * @param end
 * he amount of milliseconds the pulse ends at (default is 2.0)
 */
void servodec_set_pulse_options(float start, float end, bool median_filter) {
	pulse_start = start;
 8010840:	4904      	ldr	r1, [pc, #16]	; (8010854 <servodec_set_pulse_options+0x14>)
	pulse_end = end;
 8010842:	4a05      	ldr	r2, [pc, #20]	; (8010858 <servodec_set_pulse_options+0x18>)
	use_median_filter = median_filter;
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <servodec_set_pulse_options+0x1c>)
 *
 * @param end
 * he amount of milliseconds the pulse ends at (default is 2.0)
 */
void servodec_set_pulse_options(float start, float end, bool median_filter) {
	pulse_start = start;
 8010846:	ed81 0a00 	vstr	s0, [r1]
	pulse_end = end;
 801084a:	edc2 0a00 	vstr	s1, [r2]
	use_median_filter = median_filter;
 801084e:	7018      	strb	r0, [r3, #0]
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	20000810 	.word	0x20000810
 8010858:	20000804 	.word	0x20000804
 801085c:	20001948 	.word	0x20001948

08010860 <servodec_get_servo>:
 *
 * @return
 * The servo value in the range [-1.0 1.0].
 */
float servodec_get_servo(int servo_num) {
	if (servo_num < SERVO_NUM) {
 8010860:	2800      	cmp	r0, #0
		return servo_pos[servo_num];
 8010862:	bfdd      	ittte	le
 8010864:	4b03      	ldrle	r3, [pc, #12]	; (8010874 <servodec_get_servo+0x14>)
 8010866:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 801086a:	ed90 0a00 	vldrle	s0, [r0]
	} else {
		return 0.0;
 801086e:	ed9f 0a02 	vldrgt	s0, [pc, #8]	; 8010878 <servodec_get_servo+0x18>
	}
}
 8010872:	4770      	bx	lr
 8010874:	2000193c 	.word	0x2000193c
	...

08010880 <Uart3_print_init>:
    USART_CR2_STOP1_BITS | USART_CR2_LINEN,
    0
};

 void Uart3_print_init(void)
{
 8010880:	b510      	push	{r4, lr}
    * PC10(TX) and PC11(RX) are routed to USART3.
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD3, &sd3cfg);
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
 8010882:	4c0a      	ldr	r4, [pc, #40]	; (80108ac <Uart3_print_init+0x2c>)
    * Activates the serial driver 3 using the driver sd3cfg configuration.
    * PC10(TX) and PC11(RX) are routed to USART3.
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD3, &sd3cfg);
 8010884:	490a      	ldr	r1, [pc, #40]	; (80108b0 <Uart3_print_init+0x30>)
 8010886:	480b      	ldr	r0, [pc, #44]	; (80108b4 <Uart3_print_init+0x34>)
 8010888:	f7fd f87a 	bl	800d980 <sdStart>
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
 801088c:	4620      	mov	r0, r4
 801088e:	f240 3282 	movw	r2, #898	; 0x382
 8010892:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010896:	f7fe f90b 	bl	800eab0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));
 801089a:	4620      	mov	r0, r4
 801089c:	f240 3282 	movw	r2, #898	; 0x382
 80108a0:	f44f 6100 	mov.w	r1, #2048	; 0x800

}
 80108a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD3, &sd3cfg);
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));
 80108a8:	f7fe b902 	b.w	800eab0 <_pal_lld_setgroupmode>
 80108ac:	40020800 	.word	0x40020800
 80108b0:	20000830 	.word	0x20000830
 80108b4:	200012a4 	.word	0x200012a4
	...

080108c0 <Uart3_getch>:

//}


uint8_t Uart3_getch( void )
{
 80108c0:	b500      	push	{lr}
	uint8_t buffer[128];
	int len;


	len = chSequentialStreamRead(&SD3, (uint8_t*) buffer, 1);
 80108c2:	4806      	ldr	r0, [pc, #24]	; (80108dc <Uart3_getch+0x1c>)
 80108c4:	6803      	ldr	r3, [r0, #0]

//}


uint8_t Uart3_getch( void )
{
 80108c6:	b0a1      	sub	sp, #132	; 0x84
	uint8_t buffer[128];
	int len;


	len = chSequentialStreamRead(&SD3, (uint8_t*) buffer, 1);
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	2201      	movs	r2, #1
 80108cc:	4669      	mov	r1, sp
 80108ce:	4798      	blx	r3

	return buffer[0];
}
 80108d0:	f89d 0000 	ldrb.w	r0, [sp]
 80108d4:	b021      	add	sp, #132	; 0x84
 80108d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80108da:	bf00      	nop
 80108dc:	200012a4 	.word	0x200012a4

080108e0 <Vector11C>:
#include "isr_vector_table.h"
#include "main.h"
#include "mcpwm.h"
#include "hw.h"

CH_IRQ_HANDLER(TIM7_IRQHandler) {
 80108e0:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80108e2:	2101      	movs	r1, #1
 80108e4:	4803      	ldr	r0, [pc, #12]	; (80108f4 <Vector11C+0x14>)
 80108e6:	f001 f84b 	bl	8011980 <TIM_ClearITPendingBit>

	CH_IRQ_EPILOGUE();
}
 80108ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(TIM7_IRQHandler) {
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);

	CH_IRQ_EPILOGUE();
 80108ee:	f7fc bec7 	b.w	800d680 <_port_irq_epilogue>
 80108f2:	bf00      	nop
 80108f4:	40001400 	.word	0x40001400
	...

08010900 <VectorE0>:
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
	mcpwm_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
}
*/
CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8010900:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8010902:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010906:	f000 fd1b 	bl	8011340 <EXTI_GetITStatus>
 801090a:	b900      	cbnz	r0, 801090e <VectorE0+0xe>
 801090c:	bd08      	pop	{r3, pc}
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;
 801090e:	4b04      	ldr	r3, [pc, #16]	; (8010920 <VectorE0+0x20>)
 8010910:	2200      	movs	r2, #0
 8010912:	625a      	str	r2, [r3, #36]	; 0x24

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8010914:	f44f 6000 	mov.w	r0, #2048	; 0x800
	}
}
 8010918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 801091c:	f000 bd20 	b.w	8011360 <EXTI_ClearITPendingBit>
 8010920:	40000800 	.word	0x40000800
	...

08010930 <utils_middle_of_3>:
 * The middle value
 */
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
 8010930:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8010934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010938:	d80e      	bhi.n	8010958 <utils_middle_of_3+0x28>
 801093a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 801093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010942:	d825      	bhi.n	8010990 <utils_middle_of_3+0x60>
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 8010944:	eef4 0a41 	vcmp.f32	s1, s2
 8010948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094c:	bf98      	it	ls
 801094e:	eeb0 1a60 	vmovls.f32	s2, s1
	}
	return middle;
}
 8010952:	eeb0 0a41 	vmov.f32	s0, s2
 8010956:	4770      	bx	lr
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8010958:	da0b      	bge.n	8010972 <utils_middle_of_3+0x42>
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 801095a:	eeb4 0ae0 	vcmpe.f32	s0, s1
 801095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010962:	bf8c      	ite	hi
 8010964:	eeb0 1a60 	vmovhi.f32	s2, s1
 8010968:	eeb0 1a40 	vmovls.f32	s2, s0
	}
	return middle;
}
 801096c:	eeb0 0a41 	vmov.f32	s0, s2
 8010970:	4770      	bx	lr
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8010972:	eef4 0ac1 	vcmpe.f32	s1, s2
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	d8ee      	bhi.n	801095a <utils_middle_of_3+0x2a>
		middle = (a <= c) ? a : c;
 801097c:	eeb4 0a41 	vcmp.f32	s0, s2
 8010980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010984:	bf98      	it	ls
 8010986:	eeb0 1a40 	vmovls.f32	s2, s0
	} else {
		middle = (a <= b) ? a : b;
	}
	return middle;
}
 801098a:	eeb0 0a41 	vmov.f32	s0, s2
 801098e:	4770      	bx	lr
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8010990:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8010994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010998:	db04      	blt.n	80109a4 <utils_middle_of_3+0x74>
 801099a:	eef4 0ac1 	vcmpe.f32	s1, s2
 801099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a2:	d9eb      	bls.n	801097c <utils_middle_of_3+0x4c>
		middle = (a <= c) ? a : c;
 80109a4:	eeb0 1a40 	vmov.f32	s2, s0
	} else {
		middle = (a <= b) ? a : b;
	}
	return middle;
}
 80109a8:	eeb0 0a41 	vmov.f32	s0, s2
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop

080109b0 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 80109b0:	4b04      	ldr	r3, [pc, #16]	; (80109c4 <utils_sys_lock_cnt+0x14>)
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	b912      	cbnz	r2, 80109bc <utils_sys_lock_cnt+0xc>
 80109b6:	2220      	movs	r2, #32
 80109b8:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	3201      	adds	r2, #1
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	4770      	bx	lr
 80109c4:	20001950 	.word	0x20001950
	...

080109d0 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 80109d0:	4b05      	ldr	r3, [pc, #20]	; (80109e8 <utils_sys_unlock_cnt+0x18>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	b132      	cbz	r2, 80109e4 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	3a01      	subs	r2, #1
 80109da:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	b90b      	cbnz	r3, 80109e4 <utils_sys_unlock_cnt+0x14>
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	20001950 	.word	0x20001950
 80109ec:	00000000 	.word	0x00000000

080109f0 <timeout_thread>:
systime_t timeout_get_timeout_msec(void) {
	return timeout_msec;
}

static THD_FUNCTION(timeout_thread, arg)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	4f14      	ldr	r7, [pc, #80]	; (8010a44 <timeout_thread+0x54>)
 80109f4:	4c14      	ldr	r4, [pc, #80]	; (8010a48 <timeout_thread+0x58>)
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	4a14      	ldr	r2, [pc, #80]	; (8010a4c <timeout_thread+0x5c>)
 80109fa:	f8df a058 	ldr.w	sl, [pc, #88]	; 8010a54 <timeout_thread+0x64>
 80109fe:	4d14      	ldr	r5, [pc, #80]	; (8010a50 <timeout_thread+0x60>)

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010a00:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8010a58 <timeout_thread+0x68>
 8010a04:	619a      	str	r2, [r3, #24]
 8010a06:	46a0      	mov	r8, r4
		{
			has_timeout = true;
		} 
		else
		{
			has_timeout = false;
 8010a08:	2600      	movs	r6, #0
 8010a0a:	e014      	b.n	8010a36 <timeout_thread+0x46>

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010a0c:	f8da 1000 	ldr.w	r1, [sl]
 8010a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a12:	f8d8 0000 	ldr.w	r0, [r8]
 8010a16:	fb03 f300 	mul.w	r3, r3, r0
 8010a1a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8010a1e:	1a52      	subs	r2, r2, r1
 8010a20:	fba9 1303 	umull	r1, r3, r9, r3
 8010a24:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
		{
			has_timeout = true;
 8010a28:	f04f 0301 	mov.w	r3, #1

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010a2c:	d908      	bls.n	8010a40 <timeout_thread+0x50>
		{
			has_timeout = true;
 8010a2e:	702b      	strb	r3, [r5, #0]
		else
		{
			has_timeout = false;
		}

		chThdSleepMilliseconds(10);
 8010a30:	2064      	movs	r0, #100	; 0x64
 8010a32:	f7fc faf5 	bl	800d020 <chThdSleep>

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010a36:	6822      	ldr	r2, [r4, #0]
 8010a38:	f242 7310 	movw	r3, #10000	; 0x2710
 8010a3c:	2a00      	cmp	r2, #0
 8010a3e:	d1e5      	bne.n	8010a0c <timeout_thread+0x1c>
		{
			has_timeout = true;
		} 
		else
		{
			has_timeout = false;
 8010a40:	702e      	strb	r6, [r5, #0]
 8010a42:	e7f5      	b.n	8010a30 <timeout_thread+0x40>
 8010a44:	20000c70 	.word	0x20000c70
 8010a48:	20001cf8 	.word	0x20001cf8
 8010a4c:	08012bf0 	.word	0x08012bf0
 8010a50:	20001cf4 	.word	0x20001cf4
 8010a54:	20001cf0 	.word	0x20001cf0
 8010a58:	10624dd3 	.word	0x10624dd3
 8010a5c:	00000000 	.word	0x00000000

08010a60 <timeout_configure>:
static THD_WORKING_AREA(timeout_thread_wa, 512);
static THD_FUNCTION(timeout_thread, arg);


void timeout_configure(systime_t timeout) {
	timeout_msec = timeout;
 8010a60:	4b01      	ldr	r3, [pc, #4]	; (8010a68 <timeout_configure+0x8>)
 8010a62:	6018      	str	r0, [r3, #0]
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	20001cf8 	.word	0x20001cf8
 8010a6c:	00000000 	.word	0x00000000

08010a70 <timeout_reset>:
 8010a70:	4a02      	ldr	r2, [pc, #8]	; (8010a7c <timeout_reset+0xc>)
}

void timeout_reset(void) {
	last_update_time = chVTGetSystemTimeX();
 8010a72:	4b03      	ldr	r3, [pc, #12]	; (8010a80 <timeout_reset+0x10>)
 8010a74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	20000c70 	.word	0x20000c70
 8010a80:	20001cf0 	.word	0x20001cf0
	...

08010a90 <timeout_init>:
		chThdSleepMilliseconds(10);
	}

}

void timeout_init(void) {
 8010a90:	b5f0      	push	{r4, r5, r6, r7, lr}
	timeout_msec = 1000;
 8010a92:	490a      	ldr	r1, [pc, #40]	; (8010abc <timeout_init+0x2c>)
	last_update_time = 0;
 8010a94:	4e0a      	ldr	r6, [pc, #40]	; (8010ac0 <timeout_init+0x30>)
	has_timeout = false;
 8010a96:	4d0b      	ldr	r5, [pc, #44]	; (8010ac4 <timeout_init+0x34>)

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010a98:	4b0b      	ldr	r3, [pc, #44]	; (8010ac8 <timeout_init+0x38>)
 8010a9a:	480c      	ldr	r0, [pc, #48]	; (8010acc <timeout_init+0x3c>)
		chThdSleepMilliseconds(10);
	}

}

void timeout_init(void) {
 8010a9c:	b083      	sub	sp, #12
	timeout_msec = 1000;
	last_update_time = 0;
 8010a9e:	2400      	movs	r4, #0
	}

}

void timeout_init(void) {
	timeout_msec = 1000;
 8010aa0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	last_update_time = 0;
	has_timeout = false;

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010aa4:	9400      	str	r4, [sp, #0]
 8010aa6:	2240      	movs	r2, #64	; 0x40
	}

}

void timeout_init(void) {
	timeout_msec = 1000;
 8010aa8:	600f      	str	r7, [r1, #0]
	last_update_time = 0;
	has_timeout = false;

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010aaa:	f44f 7166 	mov.w	r1, #920	; 0x398

}

void timeout_init(void) {
	timeout_msec = 1000;
	last_update_time = 0;
 8010aae:	6034      	str	r4, [r6, #0]
	has_timeout = false;
 8010ab0:	702c      	strb	r4, [r5, #0]

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010ab2:	f7fc fa7d 	bl	800cfb0 <chThdCreateStatic>
}
 8010ab6:	b003      	add	sp, #12
 8010ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aba:	bf00      	nop
 8010abc:	20001cf8 	.word	0x20001cf8
 8010ac0:	20001cf0 	.word	0x20001cf0
 8010ac4:	20001cf4 	.word	0x20001cf4
 8010ac8:	080109f1 	.word	0x080109f1
 8010acc:	20001958 	.word	0x20001958

08010ad0 <cancom_process_thread>:
 8010ad0:	4b0d      	ldr	r3, [pc, #52]	; (8010b08 <cancom_process_thread+0x38>)

static THD_FUNCTION(cancom_process_thread, arg) {
	(void)arg;

	chRegSetThreadName("Cancom process");
	process_tp = chThdGetSelfX();
 8010ad2:	4a0e      	ldr	r2, [pc, #56]	; (8010b0c <cancom_process_thread+0x3c>)
 8010ad4:	699b      	ldr	r3, [r3, #24]
 8010ad6:	490e      	ldr	r1, [pc, #56]	; (8010b10 <cancom_process_thread+0x40>)
	}

	chEvtUnregister(&CANDx.rxfull_event, &el);
}

static THD_FUNCTION(cancom_process_thread, arg) {
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	4c0e      	ldr	r4, [pc, #56]	; (8010b14 <cancom_process_thread+0x44>)
 8010adc:	4d0e      	ldr	r5, [pc, #56]	; (8010b18 <cancom_process_thread+0x48>)
 8010ade:	6199      	str	r1, [r3, #24]
	(void)arg;

	chRegSetThreadName("Cancom process");
	process_tp = chThdGetSelfX();
 8010ae0:	6013      	str	r3, [r2, #0]
			CANRxFrame rxmsg = rx_frames[rx_frame_read++];
		}

		if (rx_frame_read == RX_FRAMES_SIZE) 
		{
			rx_frame_read = 0;
 8010ae2:	2600      	movs	r6, #0
	uint8_t crc_high;
	bool commands_send;

	for(;;)
	{
		chEvtWaitAny((eventmask_t) 1);
 8010ae4:	2001      	movs	r0, #1
 8010ae6:	f7fc fbeb 	bl	800d2c0 <chEvtWaitAny>

		while (rx_frame_read != rx_frame_write)
 8010aea:	6822      	ldr	r2, [r4, #0]
 8010aec:	6829      	ldr	r1, [r5, #0]
 8010aee:	4291      	cmp	r1, r2
 8010af0:	d005      	beq.n	8010afe <cancom_process_thread+0x2e>
 8010af2:	1a8a      	subs	r2, r1, r2
 8010af4:	2300      	movs	r3, #0
 8010af6:	3301      	adds	r3, #1
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d1fc      	bne.n	8010af6 <cancom_process_thread+0x26>
 8010afc:	6021      	str	r1, [r4, #0]
		{
			CANRxFrame rxmsg = rx_frames[rx_frame_read++];
		}

		if (rx_frame_read == RX_FRAMES_SIZE) 
 8010afe:	2964      	cmp	r1, #100	; 0x64
		{
			rx_frame_read = 0;
 8010b00:	bf08      	it	eq
 8010b02:	6026      	streq	r6, [r4, #0]
 8010b04:	e7ee      	b.n	8010ae4 <cancom_process_thread+0x14>
 8010b06:	bf00      	nop
 8010b08:	20000c70 	.word	0x20000c70
 8010b0c:	200037e0 	.word	0x200037e0
 8010b10:	08012c10 	.word	0x08012c10
 8010b14:	20002e98 	.word	0x20002e98
 8010b18:	200037e4 	.word	0x200037e4
 8010b1c:	00000000 	.word	0x00000000

08010b20 <cancom_status_thread>:

	}
}

static THD_FUNCTION(cancom_status_thread, arg) 
{
 8010b20:	b508      	push	{r3, lr}
 8010b22:	4b04      	ldr	r3, [pc, #16]	; (8010b34 <cancom_status_thread+0x14>)
 8010b24:	4a04      	ldr	r2, [pc, #16]	; (8010b38 <cancom_status_thread+0x18>)
 8010b26:	699b      	ldr	r3, [r3, #24]
 8010b28:	619a      	str	r2, [r3, #24]
	//	if (sleep_time == 0) {
	//		sleep_time = 1;
	//	}

	//	chThdSleep(sleep_time);
		chThdSleep(1000);
 8010b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010b2e:	f7fc fa77 	bl	800d020 <chThdSleep>
 8010b32:	e7fa      	b.n	8010b2a <cancom_status_thread+0xa>
 8010b34:	20000c70 	.word	0x20000c70
 8010b38:	08012c20 	.word	0x08012c20
 8010b3c:	00000000 	.word	0x00000000

08010b40 <cancom_read_thread>:
	chThdCreateStatic(cancom_status_thread_wa, sizeof(cancom_status_thread_wa), NORMALPRIO,cancom_status_thread, NULL);
	chThdCreateStatic(cancom_process_thread_wa, sizeof(cancom_process_thread_wa), NORMALPRIO,cancom_process_thread, NULL);
}

static THD_FUNCTION(cancom_read_thread, arg)
{
 8010b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b42:	4e1f      	ldr	r6, [pc, #124]	; (8010bc0 <cancom_read_thread+0x80>)
 8010b44:	4a1f      	ldr	r2, [pc, #124]	; (8010bc4 <cancom_read_thread+0x84>)
 8010b46:	69b3      	ldr	r3, [r6, #24]
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8010b48:	481f      	ldr	r0, [pc, #124]	; (8010bc8 <cancom_read_thread+0x88>)
 8010b4a:	619a      	str	r2, [r3, #24]
 8010b4c:	b08b      	sub	sp, #44	; 0x2c
 8010b4e:	4669      	mov	r1, sp
 8010b50:	f04f 33ff 	mov.w	r3, #4294967295
 8010b54:	2201      	movs	r2, #1
 8010b56:	f7fc fb43 	bl	800d1e0 <chEvtRegisterMaskWithFlags>
 8010b5a:	4c1c      	ldr	r4, [pc, #112]	; (8010bcc <cancom_read_thread+0x8c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8010b5c:	69b3      	ldr	r3, [r6, #24]
	event_listener_t el;
	CANRxFrame rxmsg;

	chEvtRegister(&CANDx.rxfull_event, &el, 0);

	while(!chThdShouldTerminateX()) 
 8010b5e:	7f5b      	ldrb	r3, [r3, #29]
 8010b60:	f003 0304 	and.w	r3, r3, #4
 8010b64:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8010b68:	bb1b      	cbnz	r3, 8010bb2 <cancom_read_thread+0x72>
	{
		if (chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(10)) == 0) 
 8010b6a:	2164      	movs	r1, #100	; 0x64
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b70:	f7fc fbc6 	bl	800d300 <chEvtWaitAnyTimeout>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d0f1      	beq.n	8010b5c <cancom_read_thread+0x1c>
		{
			continue;
		}

		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 8010b78:	aa05      	add	r2, sp, #20
 8010b7a:	462b      	mov	r3, r5
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	4814      	ldr	r0, [pc, #80]	; (8010bd0 <cancom_read_thread+0x90>)
 8010b80:	f7fc fe06 	bl	800d790 <canReceive>

		while (result == MSG_OK) 
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d1e9      	bne.n	8010b5c <cancom_read_thread+0x1c>
 8010b88:	4f12      	ldr	r7, [pc, #72]	; (8010bd4 <cancom_read_thread+0x94>)
		{
			rx_frames[rx_frame_write++] = rxmsg;
			if (rx_frame_write == RX_FRAMES_SIZE) 
			{
				rx_frame_write = 0;
 8010b8a:	4605      	mov	r5, r0

		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);

		while (result == MSG_OK) 
		{
			rx_frames[rx_frame_write++] = rxmsg;
 8010b8c:	6823      	ldr	r3, [r4, #0]
			if (rx_frame_write == RX_FRAMES_SIZE) 
			{
				rx_frame_write = 0;
			}

			chEvtSignal(process_tp, (eventmask_t) 1);
 8010b8e:	6838      	ldr	r0, [r7, #0]

		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);

		while (result == MSG_OK) 
		{
			rx_frames[rx_frame_write++] = rxmsg;
 8010b90:	3301      	adds	r3, #1
 8010b92:	2b64      	cmp	r3, #100	; 0x64
 8010b94:	bf08      	it	eq
 8010b96:	462b      	moveq	r3, r5
			if (rx_frame_write == RX_FRAMES_SIZE) 
			{
				rx_frame_write = 0;
			}

			chEvtSignal(process_tp, (eventmask_t) 1);
 8010b98:	2101      	movs	r1, #1

		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);

		while (result == MSG_OK) 
		{
			rx_frames[rx_frame_write++] = rxmsg;
 8010b9a:	6023      	str	r3, [r4, #0]
			if (rx_frame_write == RX_FRAMES_SIZE) 
			{
				rx_frame_write = 0;
			}

			chEvtSignal(process_tp, (eventmask_t) 1);
 8010b9c:	f7fc fb80 	bl	800d2a0 <chEvtSignal>
			result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	aa05      	add	r2, sp, #20
 8010ba6:	480a      	ldr	r0, [pc, #40]	; (8010bd0 <cancom_read_thread+0x90>)
 8010ba8:	f7fc fdf2 	bl	800d790 <canReceive>
			continue;
		}

		msg_t result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);

		while (result == MSG_OK) 
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d0ed      	beq.n	8010b8c <cancom_read_thread+0x4c>
 8010bb0:	e7d4      	b.n	8010b5c <cancom_read_thread+0x1c>
			chEvtSignal(process_tp, (eventmask_t) 1);
			result = canReceive(&CANDx, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE);
		}
	}

	chEvtUnregister(&CANDx.rxfull_event, &el);
 8010bb2:	4669      	mov	r1, sp
 8010bb4:	4804      	ldr	r0, [pc, #16]	; (8010bc8 <cancom_read_thread+0x88>)
 8010bb6:	f7fc fb2b 	bl	800d210 <chEvtUnregister>
}
 8010bba:	b00b      	add	sp, #44	; 0x2c
 8010bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	20000c70 	.word	0x20000c70
 8010bc4:	08012c2c 	.word	0x08012c2c
 8010bc8:	20000f8c 	.word	0x20000f8c
 8010bcc:	200037e4 	.word	0x200037e4
 8010bd0:	20000f74 	.word	0x20000f74
 8010bd4:	200037e0 	.word	0x200037e0
	...

08010be0 <comm_can_init>:
		

// Private functions
static void send_packet_wrapper(unsigned char *data, unsigned int len);

void comm_can_init(void) {
 8010be0:	b530      	push	{r4, r5, lr}
	//for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
	//	stat_msgs[i].id = -1;
	//}

	rx_frame_read = 0;
	rx_frame_write = 0;
 8010be2:	4b1b      	ldr	r3, [pc, #108]	; (8010c50 <comm_can_init+0x70>)
void comm_can_init(void) {
	//for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
	//	stat_msgs[i].id = -1;
	//}

	rx_frame_read = 0;
 8010be4:	4a1b      	ldr	r2, [pc, #108]	; (8010c54 <comm_can_init+0x74>)
	rx_frame_write = 0;

	chMtxObjectInit(&can_mtx);

	palSetPadMode(GPIOB, 8,	PAL_MODE_ALTERNATE(GPIO_AF_CAN1) |PAL_STM32_OTYPE_PUSHPULL |	PAL_STM32_OSPEED_MID1);
 8010be6:	4d1c      	ldr	r5, [pc, #112]	; (8010c58 <comm_can_init+0x78>)
	//}

	rx_frame_read = 0;
	rx_frame_write = 0;

	chMtxObjectInit(&can_mtx);
 8010be8:	481c      	ldr	r0, [pc, #112]	; (8010c5c <comm_can_init+0x7c>)
		

// Private functions
static void send_packet_wrapper(unsigned char *data, unsigned int len);

void comm_can_init(void) {
 8010bea:	b083      	sub	sp, #12
	//for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
	//	stat_msgs[i].id = -1;
	//}

	rx_frame_read = 0;
 8010bec:	2400      	movs	r4, #0
	rx_frame_write = 0;
 8010bee:	601c      	str	r4, [r3, #0]
void comm_can_init(void) {
	//for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
	//	stat_msgs[i].id = -1;
	//}

	rx_frame_read = 0;
 8010bf0:	6014      	str	r4, [r2, #0]
	rx_frame_write = 0;

	chMtxObjectInit(&can_mtx);
 8010bf2:	f7fc faed 	bl	800d1d0 <chMtxObjectInit>

	palSetPadMode(GPIOB, 8,	PAL_MODE_ALTERNATE(GPIO_AF_CAN1) |PAL_STM32_OTYPE_PUSHPULL |	PAL_STM32_OSPEED_MID1);
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	f240 428a 	movw	r2, #1162	; 0x48a
 8010bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c00:	f7fd ff56 	bl	800eab0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 9,	PAL_MODE_ALTERNATE(GPIO_AF_CAN1) |PAL_STM32_OTYPE_PUSHPULL |	PAL_STM32_OSPEED_MID1);
 8010c04:	4628      	mov	r0, r5
 8010c06:	f240 428a 	movw	r2, #1162	; 0x48a
 8010c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c0e:	f7fd ff4f 	bl	800eab0 <_pal_lld_setgroupmode>

	canStart(&CANDx, &cancfg);
 8010c12:	4913      	ldr	r1, [pc, #76]	; (8010c60 <comm_can_init+0x80>)
 8010c14:	4813      	ldr	r0, [pc, #76]	; (8010c64 <comm_can_init+0x84>)
 8010c16:	f7fc fdab 	bl	800d770 <canStart>

	chThdCreateStatic(cancom_read_thread_wa, sizeof(cancom_read_thread_wa), NORMALPRIO + 1,cancom_read_thread, NULL);
 8010c1a:	9400      	str	r4, [sp, #0]
 8010c1c:	4b12      	ldr	r3, [pc, #72]	; (8010c68 <comm_can_init+0x88>)
 8010c1e:	4813      	ldr	r0, [pc, #76]	; (8010c6c <comm_can_init+0x8c>)
 8010c20:	2241      	movs	r2, #65	; 0x41
 8010c22:	f44f 7166 	mov.w	r1, #920	; 0x398
 8010c26:	f7fc f9c3 	bl	800cfb0 <chThdCreateStatic>
	chThdCreateStatic(cancom_status_thread_wa, sizeof(cancom_status_thread_wa), NORMALPRIO,cancom_status_thread, NULL);
 8010c2a:	9400      	str	r4, [sp, #0]
 8010c2c:	4b10      	ldr	r3, [pc, #64]	; (8010c70 <comm_can_init+0x90>)
 8010c2e:	4811      	ldr	r0, [pc, #68]	; (8010c74 <comm_can_init+0x94>)
 8010c30:	2240      	movs	r2, #64	; 0x40
 8010c32:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8010c36:	f7fc f9bb 	bl	800cfb0 <chThdCreateStatic>
	chThdCreateStatic(cancom_process_thread_wa, sizeof(cancom_process_thread_wa), NORMALPRIO,cancom_process_thread, NULL);
 8010c3a:	9400      	str	r4, [sp, #0]
 8010c3c:	4b0e      	ldr	r3, [pc, #56]	; (8010c78 <comm_can_init+0x98>)
 8010c3e:	480f      	ldr	r0, [pc, #60]	; (8010c7c <comm_can_init+0x9c>)
 8010c40:	2240      	movs	r2, #64	; 0x40
 8010c42:	f241 1198 	movw	r1, #4504	; 0x1198
 8010c46:	f7fc f9b3 	bl	800cfb0 <chThdCreateStatic>
}
 8010c4a:	b003      	add	sp, #12
 8010c4c:	bd30      	pop	{r4, r5, pc}
 8010c4e:	bf00      	nop
 8010c50:	200037e4 	.word	0x200037e4
 8010c54:	20002e98 	.word	0x20002e98
 8010c58:	40020400 	.word	0x40020400
 8010c5c:	20003438 	.word	0x20003438
 8010c60:	08012c00 	.word	0x08012c00
 8010c64:	20000f74 	.word	0x20000f74
 8010c68:	08010b41 	.word	0x08010b41
 8010c6c:	20003448 	.word	0x20003448
 8010c70:	08010b21 	.word	0x08010b21
 8010c74:	20002ea0 	.word	0x20002ea0
 8010c78:	08010ad1 	.word	0x08010ad1
 8010c7c:	20001d00 	.word	0x20001d00

08010c80 <mavlink_thread>:
	chThdCreateStatic(mavlink_thread_wa, sizeof(mavlink_thread_wa),NORMALPRIO + 1, mavlink_thread, NULL);
}

 
static THD_FUNCTION(mavlink_thread, arg)
{
 8010c80:	b508      	push	{r3, lr}
 
	/* Thread activity.*/
	while (true)
	{
		/* Waiting for any event.*/
		eventmask_t evt = chEvtWaitAny(ALL_EVENTS);
 8010c82:	f04f 30ff 	mov.w	r0, #4294967295
 8010c86:	f7fc fb1b 	bl	800d2c0 <chEvtWaitAny>
 8010c8a:	e7fa      	b.n	8010c82 <mavlink_thread+0x2>
 8010c8c:	0000      	movs	r0, r0
	...

08010c90 <mavlink_uart_send>:
	msg->len = length;
	msg->sysid = system_id;
	msg->compid = component_id;
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8010c90:	4a02      	ldr	r2, [pc, #8]	; (8010c9c <mavlink_uart_send+0xc>)
 8010c92:	7993      	ldrb	r3, [r2, #6]
 8010c94:	3301      	adds	r3, #1
 8010c96:	7193      	strb	r3, [r2, #6]

    int len = mavlink_msg_to_send_buffer(buf, &msg);

    //usb_uart_write(buf, len);
    //uart3_write(buf, len);
}
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	20003d80 	.word	0x20003d80

08010ca0 <mavlink_uart_recv>:


bool mavlink_uart_recv( uint8_t ch )
{
 8010ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
#endif

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8010ca4:	4d81      	ldr	r5, [pc, #516]	; (8010eac <mavlink_uart_recv+0x20c>)

	switch (status->parse_state)
 8010ca6:	78eb      	ldrb	r3, [r5, #3]
#endif
#endif

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8010ca8:	2200      	movs	r2, #0
 8010caa:	b0c4      	sub	sp, #272	; 0x110
 8010cac:	4604      	mov	r4, r0
 8010cae:	702a      	strb	r2, [r5, #0]

	switch (status->parse_state)
 8010cb0:	2b0a      	cmp	r3, #10
 8010cb2:	f200 80e5 	bhi.w	8010e80 <mavlink_uart_recv+0x1e0>
 8010cb6:	e8df f003 	tbb	[pc, r3]
 8010cba:	3636      	.short	0x3636
 8010cbc:	3cab99bd 	.word	0x3cab99bd
 8010cc0:	067e634e 	.word	0x067e634e
 8010cc4:	06          	.byte	0x06
 8010cc5:	00          	.byte	0x00
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		break;

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8010cc6:	2b0a      	cmp	r3, #10
 8010cc8:	4979      	ldr	r1, [pc, #484]	; (8010eb0 <mavlink_uart_recv+0x210>)
 8010cca:	d004      	beq.n	8010cd6 <mavlink_uart_recv+0x36>
 8010ccc:	880b      	ldrh	r3, [r1, #0]
 8010cce:	ebb0 2f13 	cmp.w	r0, r3, lsr #8
 8010cd2:	f000 80d2 	beq.w	8010e7a <mavlink_uart_recv+0x1da>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8010cd6:	2702      	movs	r7, #2
 8010cd8:	702f      	strb	r7, [r5, #0]
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8010cda:	792b      	ldrb	r3, [r5, #4]
 8010cdc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8010eb0 <mavlink_uart_recv+0x210>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8010ce0:	4e72      	ldr	r6, [pc, #456]	; (8010eac <mavlink_uart_recv+0x20c>)
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8010ce2:	440b      	add	r3, r1
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8010ce4:	f04f 0e01 	mov.w	lr, #1
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8010ce8:	4641      	mov	r1, r8
 8010cea:	4668      	mov	r0, sp
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 8010cec:	725c      	strb	r4, [r3, #9]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8010cee:	f44f 7288 	mov.w	r2, #272	; 0x110
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8010cf2:	f885 e003 	strb.w	lr, [r5, #3]
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8010cf6:	f7fb fe43 	bl	800c980 <memcpy>
		break;
	}

	bufferIndex++;
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8010cfa:	2f01      	cmp	r7, #1
 8010cfc:	f040 80c1 	bne.w	8010e82 <mavlink_uart_recv+0x1e2>
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8010d00:	8933      	ldrh	r3, [r6, #8]
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8010d02:	f898 2004 	ldrb.w	r2, [r8, #4]
 8010d06:	7172      	strb	r2, [r6, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8010d08:	b903      	cbnz	r3, 8010d0c <mavlink_uart_recv+0x6c>
 8010d0a:	8173      	strh	r3, [r6, #10]
	mavlink_status_t status; 

	if (mavlink_parse_char(MAVLINK_COMM_0, ch, &msg, &status) == MAVLINK_FRAMING_OK)
	{

		if( MAVLINK_MSG_ID_SET_VELOCITY == msg.msgid ) 
 8010d0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
		// Count this packet as received
		status->packet_rx_success_count++;
 8010d10:	3301      	adds	r3, #1
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 8010d12:	2100      	movs	r1, #0
 8010d14:	2adc      	cmp	r2, #220	; 0xdc
		//}
		status->current_rx_seq = rxmsg->seq;
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
		// Count this packet as received
		status->packet_rx_success_count++;
 8010d16:	812b      	strh	r3, [r5, #8]
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 8010d18:	70a9      	strb	r1, [r5, #2]
 8010d1a:	f000 809f 	beq.w	8010e5c <mavlink_uart_recv+0x1bc>
}


bool mavlink_uart_recv( uint8_t ch )
{
	bool ret = false;
 8010d1e:	2000      	movs	r0, #0
			ret = true;
		}
    }

	return ret;
}
 8010d20:	b044      	add	sp, #272	; 0x110
 8010d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	switch (status->parse_state)
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8010d26:	28fe      	cmp	r0, #254	; 0xfe
 8010d28:	f000 809d 	beq.w	8010e66 <mavlink_uart_recv+0x1c6>
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	70ab      	strb	r3, [r5, #2]
 8010d30:	e7f5      	b.n	8010d1e <mavlink_uart_recv+0x7e>
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
		break;

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8010d32:	4a5f      	ldr	r2, [pc, #380]	; (8010eb0 <mavlink_uart_recv+0x210>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010d34:	8811      	ldrh	r1, [r2, #0]
 8010d36:	7190      	strb	r0, [r2, #6]
 8010d38:	404c      	eors	r4, r1
        tmp ^= (tmp<<4);
 8010d3a:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 8010d3e:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010d40:	0923      	lsrs	r3, r4, #4
 8010d42:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010d46:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010d4a:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8010d4e:	2306      	movs	r3, #6
 8010d50:	8014      	strh	r4, [r2, #0]
 8010d52:	70eb      	strb	r3, [r5, #3]
 8010d54:	e7ea      	b.n	8010d2c <mavlink_uart_recv+0x8c>
			status->parse_error++;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
	    }
#endif
		rxmsg->msgid = c;
 8010d56:	4a56      	ldr	r2, [pc, #344]	; (8010eb0 <mavlink_uart_recv+0x210>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010d58:	8811      	ldrh	r1, [r2, #0]
 8010d5a:	71d4      	strb	r4, [r2, #7]
 8010d5c:	404c      	eors	r4, r1
        tmp ^= (tmp<<4);
 8010d5e:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 8010d62:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010d64:	0923      	lsrs	r3, r4, #4
 8010d66:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010d6a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
		mavlink_update_checksum(rxmsg, c);
		if (rxmsg->len == 0)
 8010d6e:	78d0      	ldrb	r0, [r2, #3]
 8010d70:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
 8010d74:	8014      	strh	r4, [r2, #0]
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d172      	bne.n	8010e60 <mavlink_uart_recv+0x1c0>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8010d7a:	2308      	movs	r3, #8
 8010d7c:	70eb      	strb	r3, [r5, #3]
 8010d7e:	e7d5      	b.n	8010d2c <mavlink_uart_recv+0x8c>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8010d80:	494b      	ldr	r1, [pc, #300]	; (8010eb0 <mavlink_uart_recv+0x210>)
 8010d82:	792b      	ldrb	r3, [r5, #4]
 8010d84:	4e49      	ldr	r6, [pc, #292]	; (8010eac <mavlink_uart_recv+0x20c>)
 8010d86:	18ca      	adds	r2, r1, r3
 8010d88:	3301      	adds	r3, #1
 8010d8a:	7210      	strb	r0, [r2, #8]
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010d8c:	8808      	ldrh	r0, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
 8010d8e:	78cf      	ldrb	r7, [r1, #3]
 8010d90:	4044      	eors	r4, r0
        tmp ^= (tmp<<4);
 8010d92:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 8010d96:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010d98:	0922      	lsrs	r2, r4, #4
 8010d9a:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8010da4:	ea82 04c4 	eor.w	r4, r2, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
 8010da8:	429f      	cmp	r7, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8010daa:	712b      	strb	r3, [r5, #4]
 8010dac:	800c      	strh	r4, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
 8010dae:	d1bd      	bne.n	8010d2c <mavlink_uart_recv+0x8c>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8010db0:	2308      	movs	r3, #8
 8010db2:	70f3      	strb	r3, [r6, #3]
 8010db4:	e7ba      	b.n	8010d2c <mavlink_uart_recv+0x8c>
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010db6:	493e      	ldr	r1, [pc, #248]	; (8010eb0 <mavlink_uart_recv+0x210>)
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 8010db8:	4a3e      	ldr	r2, [pc, #248]	; (8010eb4 <mavlink_uart_recv+0x214>)
 8010dba:	79cb      	ldrb	r3, [r1, #7]
 8010dbc:	8808      	ldrh	r0, [r1, #0]
 8010dbe:	5cd3      	ldrb	r3, [r2, r3]
 8010dc0:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8010dc2:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8010dc6:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010dc8:	091a      	lsrs	r2, r3, #4
 8010dca:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8010dce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8010dd2:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	4294      	cmp	r4, r2
 8010dda:	800b      	strh	r3, [r1, #0]
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8010ddc:	bf14      	ite	ne
 8010dde:	230a      	movne	r3, #10
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8010de0:	2309      	moveq	r3, #9
 8010de2:	70eb      	strb	r3, [r5, #3]
		}
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 8010de4:	792b      	ldrb	r3, [r5, #4]
 8010de6:	4419      	add	r1, r3
 8010de8:	720c      	strb	r4, [r1, #8]
 8010dea:	e79f      	b.n	8010d2c <mavlink_uart_recv+0x8c>
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
		break;

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8010dec:	4a30      	ldr	r2, [pc, #192]	; (8010eb0 <mavlink_uart_recv+0x210>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010dee:	8811      	ldrh	r1, [r2, #0]
 8010df0:	7150      	strb	r0, [r2, #5]
 8010df2:	404c      	eors	r4, r1
        tmp ^= (tmp<<4);
 8010df4:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 8010df8:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010dfa:	0923      	lsrs	r3, r4, #4
 8010dfc:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010e00:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010e04:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8010e08:	2305      	movs	r3, #5
 8010e0a:	8014      	strh	r4, [r2, #0]
 8010e0c:	70eb      	strb	r3, [r5, #3]
 8010e0e:	e78d      	b.n	8010d2c <mavlink_uart_recv+0x8c>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
 8010e10:	4a27      	ldr	r2, [pc, #156]	; (8010eb0 <mavlink_uart_recv+0x210>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010e12:	8811      	ldrh	r1, [r2, #0]
 8010e14:	7110      	strb	r0, [r2, #4]
 8010e16:	404c      	eors	r4, r1
        tmp ^= (tmp<<4);
 8010e18:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 8010e1c:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010e1e:	0923      	lsrs	r3, r4, #4
 8010e20:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010e24:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010e28:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	8014      	strh	r4, [r2, #0]
 8010e30:	70eb      	strb	r3, [r5, #3]
 8010e32:	e77b      	b.n	8010d2c <mavlink_uart_recv+0x8c>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
 8010e34:	4a1e      	ldr	r2, [pc, #120]	; (8010eb0 <mavlink_uart_recv+0x210>)
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010e36:	8811      	ldrh	r1, [r2, #0]
 8010e38:	70d0      	strb	r0, [r2, #3]
 8010e3a:	404c      	eors	r4, r1
        tmp ^= (tmp<<4);
 8010e3c:	ea84 1404 	eor.w	r4, r4, r4, lsl #4
 8010e40:	b2e4      	uxtb	r4, r4
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010e42:	0923      	lsrs	r3, r4, #4
 8010e44:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010e48:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010e4c:	ea83 04c4 	eor.w	r4, r3, r4, lsl #3
			status->packet_idx = 0;
 8010e50:	2100      	movs	r1, #0
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8010e52:	2304      	movs	r3, #4
 8010e54:	8014      	strh	r4, [r2, #0]
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
			status->packet_idx = 0;
 8010e56:	7129      	strb	r1, [r5, #4]
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8010e58:	70eb      	strb	r3, [r5, #3]
 8010e5a:	e767      	b.n	8010d2c <mavlink_uart_recv+0x8c>
			mavlink_set_velocity_t set_velocity;
			mavlink_msg_set_velocity_decode( &msg, &set_velocity);

			//Serial.print("seq= ");
			//Serial.println(test_cmd.arg1);
			ret = true;
 8010e5c:	2001      	movs	r0, #1
 8010e5e:	e75f      	b.n	8010d20 <mavlink_uart_recv+0x80>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
 8010e60:	2307      	movs	r3, #7
 8010e62:	70eb      	strb	r3, [r5, #3]
 8010e64:	e762      	b.n	8010d2c <mavlink_uart_recv+0x8c>
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
 8010e66:	4b12      	ldr	r3, [pc, #72]	; (8010eb0 <mavlink_uart_recv+0x210>)
 8010e68:	2000      	movs	r0, #0
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
 8010e6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8010e6e:	2202      	movs	r2, #2
			rxmsg->len = 0;
			rxmsg->magic = c;
 8010e70:	709c      	strb	r4, [r3, #2]
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
 8010e72:	70d8      	strb	r0, [r3, #3]
 8010e74:	8019      	strh	r1, [r3, #0]
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8010e76:	70ea      	strb	r2, [r5, #3]
 8010e78:	e758      	b.n	8010d2c <mavlink_uart_recv+0x8c>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8010e7a:	2701      	movs	r7, #1
 8010e7c:	702f      	strb	r7, [r5, #0]
 8010e7e:	e72c      	b.n	8010cda <mavlink_uart_recv+0x3a>

	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;

	switch (status->parse_state)
 8010e80:	2700      	movs	r7, #0
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 8010e82:	2100      	movs	r1, #0

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8010e84:	2f02      	cmp	r7, #2
	r_mavlink_status->parse_state = status->parse_state;
	r_mavlink_status->packet_idx = status->packet_idx;
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
	status->parse_error = 0;
 8010e86:	70a9      	strb	r1, [r5, #2]
 8010e88:	4b08      	ldr	r3, [pc, #32]	; (8010eac <mavlink_uart_recv+0x20c>)

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8010e8a:	f47f af48 	bne.w	8010d1e <mavlink_uart_recv+0x7e>
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
 8010e8e:	2201      	movs	r2, #1
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 8010e90:	2cfe      	cmp	r4, #254	; 0xfe
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8010e92:	7019      	strb	r1, [r3, #0]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
 8010e94:	709a      	strb	r2, [r3, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 8010e96:	d001      	beq.n	8010e9c <mavlink_uart_recv+0x1fc>
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8010e98:	70da      	strb	r2, [r3, #3]
 8010e9a:	e740      	b.n	8010d1e <mavlink_uart_recv+0x7e>
	    if (c == MAVLINK_STX)
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
		    rxmsg->len = 0;
 8010e9c:	4a04      	ldr	r2, [pc, #16]	; (8010eb0 <mavlink_uart_recv+0x210>)
	    status->parse_error++;
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8010e9e:	70df      	strb	r7, [r3, #3]
 8010ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
		    rxmsg->len = 0;
 8010ea4:	70d1      	strb	r1, [r2, #3]
 8010ea6:	8013      	strh	r3, [r2, #0]
 8010ea8:	e739      	b.n	8010d1e <mavlink_uart_recv+0x7e>
 8010eaa:	bf00      	nop
 8010eac:	20003d80 	.word	0x20003d80
 8010eb0:	20003fd4 	.word	0x20003fd4
 8010eb4:	08012c50 	.word	0x08012c50
	...

08010ec0 <mavlink_uart_thread>:
}



static THD_FUNCTION(mavlink_uart_thread, arg)
{
 8010ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ec2:	4b12      	ldr	r3, [pc, #72]	; (8010f0c <mavlink_uart_thread+0x4c>)
 8010ec4:	4a12      	ldr	r2, [pc, #72]	; (8010f10 <mavlink_uart_thread+0x50>)
 8010ec6:	699b      	ldr	r3, [r3, #24]
 8010ec8:	4c12      	ldr	r4, [pc, #72]	; (8010f14 <mavlink_uart_thread+0x54>)
 8010eca:	4f13      	ldr	r7, [pc, #76]	; (8010f18 <mavlink_uart_thread+0x58>)
 8010ecc:	619a      	str	r2, [r3, #24]
 8010ece:	2620      	movs	r6, #32
 8010ed0:	2500      	movs	r5, #0

	for(;;)
	{
		//chThdSleepMilliseconds(1);

		Ch = Uart3_getch();
 8010ed2:	f7ff fcf5 	bl	80108c0 <Uart3_getch>

		//Uart3_printf(&SD3, (uint8_t *)"0x%x", Ch);
		
		if( mavlink_uart_recv( Ch ) )
 8010ed6:	f7ff fee3 	bl	8010ca0 <mavlink_uart_recv>
 8010eda:	b938      	cbnz	r0, 8010eec <mavlink_uart_thread+0x2c>

			mavlink_events |= EVT_UART_RX;

		}

		if (mavlink_events) 
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	b963      	cbnz	r3, 8010efa <mavlink_uart_thread+0x3a>

	for(;;)
	{
		//chThdSleepMilliseconds(1);

		Ch = Uart3_getch();
 8010ee0:	f7ff fcee 	bl	80108c0 <Uart3_getch>

		//Uart3_printf(&SD3, (uint8_t *)"0x%x", Ch);
		
		if( mavlink_uart_recv( Ch ) )
 8010ee4:	f7ff fedc 	bl	8010ca0 <mavlink_uart_recv>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d0f7      	beq.n	8010edc <mavlink_uart_thread+0x1c>
		{
			mavlink_uart_send( 1 );
 8010eec:	2001      	movs	r0, #1
 8010eee:	f7ff fecf 	bl	8010c90 <mavlink_uart_send>

			mavlink_events |= EVT_UART_RX;
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	f043 0301 	orr.w	r3, r3, #1
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	f386 8811 	msr	BASEPRI, r6
		}

		if (mavlink_events) 
		{
		    chSysLockFromISR();
		    chEvtSignalI(pMavlinkThread, mavlink_events);
 8010efe:	6821      	ldr	r1, [r4, #0]
 8010f00:	6838      	ldr	r0, [r7, #0]
 8010f02:	f7fc f99d 	bl	800d240 <chEvtSignalI>
 8010f06:	f385 8811 	msr	BASEPRI, r5
 8010f0a:	e7e2      	b.n	8010ed2 <mavlink_uart_thread+0x12>
 8010f0c:	20000c70 	.word	0x20000c70
 8010f10:	08012c30 	.word	0x08012c30
 8010f14:	20003db0 	.word	0x20003db0
 8010f18:	20003fd0 	.word	0x20003fd0
 8010f1c:	00000000 	.word	0x00000000

08010f20 <mavlink_proc_configure>:


void mavlink_proc_configure(void)
{

	mavlink_events=0;
 8010f20:	4b01      	ldr	r3, [pc, #4]	; (8010f28 <mavlink_proc_configure+0x8>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	601a      	str	r2, [r3, #0]
 8010f26:	4770      	bx	lr
 8010f28:	20003db0 	.word	0x20003db0
 8010f2c:	00000000 	.word	0x00000000

08010f30 <mavlink_proc_start>:
}

void mavlink_proc_start(void) 
{
 8010f30:	b510      	push	{r4, lr}
 8010f32:	b082      	sub	sp, #8
	chThdCreateStatic(mavlink_uart_thread_wa, sizeof(mavlink_uart_thread_wa), NORMALPRIO, mavlink_uart_thread, NULL);
 8010f34:	2400      	movs	r4, #0
 8010f36:	9400      	str	r4, [sp, #0]
 8010f38:	4b08      	ldr	r3, [pc, #32]	; (8010f5c <mavlink_proc_start+0x2c>)
 8010f3a:	4809      	ldr	r0, [pc, #36]	; (8010f60 <mavlink_proc_start+0x30>)
 8010f3c:	2240      	movs	r2, #64	; 0x40
 8010f3e:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8010f42:	f7fc f835 	bl	800cfb0 <chThdCreateStatic>


	//Uart3_printf(&SD3, (uint8_t *)"mavlink_proc_start.....\r\n");  //170530  
	chThdCreateStatic(mavlink_thread_wa, sizeof(mavlink_thread_wa),NORMALPRIO + 1, mavlink_thread, NULL);
 8010f46:	9400      	str	r4, [sp, #0]
 8010f48:	4b06      	ldr	r3, [pc, #24]	; (8010f64 <mavlink_proc_start+0x34>)
 8010f4a:	4807      	ldr	r0, [pc, #28]	; (8010f68 <mavlink_proc_start+0x38>)
 8010f4c:	2241      	movs	r2, #65	; 0x41
 8010f4e:	f44f 7106 	mov.w	r1, #536	; 0x218
 8010f52:	f7fc f82d 	bl	800cfb0 <chThdCreateStatic>
}
 8010f56:	b002      	add	sp, #8
 8010f58:	bd10      	pop	{r4, pc}
 8010f5a:	bf00      	nop
 8010f5c:	08010ec1 	.word	0x08010ec1
 8010f60:	200037e8 	.word	0x200037e8
 8010f64:	08010c81 	.word	0x08010c81
 8010f68:	20003db8 	.word	0x20003db8
 8010f6c:	00000000 	.word	0x00000000

08010f70 <app_init>:

// Private variables
app_use app_to_use = APP_MAVLINK;

void app_init(void)
{
 8010f70:	b508      	push	{r3, lr}
	//Uart3_printf(&SD3, (uint8_t *)"app_init.....\r\n");
	switch (app_to_use)
 8010f72:	4b0a      	ldr	r3, [pc, #40]	; (8010f9c <app_init+0x2c>)
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d00a      	beq.n	8010f90 <app_init+0x20>
 8010f7a:	2b02      	cmp	r3, #2
 8010f7c:	d107      	bne.n	8010f8e <app_init+0x1e>
			app_ppm_configure();
			app_ppm_start();
			break;

		case APP_MAVLINK:
			Uart3_print_init();
 8010f7e:	f7ff fc7f 	bl	8010880 <Uart3_print_init>
			//Uart3_printf(&SD3, (uint8_t *)"oroca_bldc\r\n");//170530	

			mavlink_proc_configure();
 8010f82:	f7ff ffcd 	bl	8010f20 <mavlink_proc_configure>
			break;

		default:
			break;
	}
}
 8010f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case APP_MAVLINK:
			Uart3_print_init();
			//Uart3_printf(&SD3, (uint8_t *)"oroca_bldc\r\n");//170530	

			mavlink_proc_configure();
			mavlink_proc_start(); 
 8010f8a:	f7ff bfd1 	b.w	8010f30 <mavlink_proc_start>
 8010f8e:	bd08      	pop	{r3, pc}
{
	//Uart3_printf(&SD3, (uint8_t *)"app_init.....\r\n");
	switch (app_to_use)
	{
		case APP_PPM:
			app_ppm_configure();
 8010f90:	f000 f876 	bl	8011080 <app_ppm_configure>
			break;

		default:
			break;
	}
}
 8010f94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	//Uart3_printf(&SD3, (uint8_t *)"app_init.....\r\n");
	switch (app_to_use)
	{
		case APP_PPM:
			app_ppm_configure();
			app_ppm_start();
 8010f98:	f000 b89a 	b.w	80110d0 <app_ppm_start>
 8010f9c:	2000083c 	.word	0x2000083c

08010fa0 <ppm_thread>:
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
	chSysUnlockFromISR();
}

static THD_FUNCTION(ppm_thread, arg)
{
 8010fa0:	b510      	push	{r4, lr}
 8010fa2:	4b11      	ldr	r3, [pc, #68]	; (8010fe8 <ppm_thread+0x48>)
	(void)arg;

	

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();
 8010fa4:	4a11      	ldr	r2, [pc, #68]	; (8010fec <ppm_thread+0x4c>)
 8010fa6:	699b      	ldr	r3, [r3, #24]
 8010fa8:	4911      	ldr	r1, [pc, #68]	; (8010ff0 <ppm_thread+0x50>)
 8010faa:	4c12      	ldr	r4, [pc, #72]	; (8010ff4 <ppm_thread+0x54>)
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
	chSysUnlockFromISR();
}

static THD_FUNCTION(ppm_thread, arg)
{
 8010fac:	ed2d 8b02 	vpush	{d8}

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();

	//servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
	servodec_set_pulse_options(1.0f, 2.0f, false);
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	6199      	str	r1, [r3, #24]
 8010fb4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8010fb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	(void)arg;

	

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();
 8010fbc:	6013      	str	r3, [r2, #0]

	//servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
	servodec_set_pulse_options(1.0f, 2.0f, false);
 8010fbe:	f7ff fc3f 	bl	8010840 <servodec_set_pulse_options>
	servodec_init(servodec_func);
 8010fc2:	480d      	ldr	r0, [pc, #52]	; (8010ff8 <ppm_thread+0x58>)
		float servo_val = servodec_get_servo(0);


//		Uart3_printf(&SD3, (uint8_t *)"servo : %f\r\n",(float)servo_val);    //170530  

		CtrlParm.qVelRef=servo_val/100.0f;
 8010fc4:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8010ffc <ppm_thread+0x5c>
	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();

	//servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
	servodec_set_pulse_options(1.0f, 2.0f, false);
	servodec_init(servodec_func);
 8010fc8:	f7ff fc12 	bl	80107f0 <servodec_init>
	is_running = true;
 8010fcc:	4b0c      	ldr	r3, [pc, #48]	; (8011000 <ppm_thread+0x60>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	701a      	strb	r2, [r3, #0]

	for(;;) {

		chEvtWaitAny((eventmask_t) 1);
 8010fd2:	2001      	movs	r0, #1
 8010fd4:	f7fc f974 	bl	800d2c0 <chEvtWaitAny>
		//{
		//	pulses_without_power = 0;
		//	continue;
		//}

		float servo_val = servodec_get_servo(0);
 8010fd8:	2000      	movs	r0, #0
 8010fda:	f7ff fc41 	bl	8010860 <servodec_get_servo>


//		Uart3_printf(&SD3, (uint8_t *)"servo : %f\r\n",(float)servo_val);    //170530  

		CtrlParm.qVelRef=servo_val/100.0f;
 8010fde:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8010fe2:	ed84 0a00 	vstr	s0, [r4]
 8010fe6:	e7f4      	b.n	8010fd2 <ppm_thread+0x32>
 8010fe8:	20000c70 	.word	0x20000c70
 8010fec:	20004418 	.word	0x20004418
 8010ff0:	08012d50 	.word	0x08012d50
 8010ff4:	200018d4 	.word	0x200018d4
 8010ff8:	08011011 	.word	0x08011011
 8010ffc:	42c80000 	.word	0x42c80000
 8011000:	20004414 	.word	0x20004414
	...

08011010 <servodec_func>:
	chSysLock();
	chVTSetI(&vt, MS2ST(1), update, NULL);
	chSysUnlock();
}

static void servodec_func(void) {
 8011010:	b508      	push	{r3, lr}
 8011012:	2320      	movs	r3, #32
 8011014:	f383 8811 	msr	BASEPRI, r3
	chSysLockFromISR();
	timeout_reset();
 8011018:	f7ff fd2a 	bl	8010a70 <timeout_reset>

	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 801101c:	4b04      	ldr	r3, [pc, #16]	; (8011030 <servodec_func+0x20>)
 801101e:	2101      	movs	r1, #1
 8011020:	6818      	ldr	r0, [r3, #0]
 8011022:	f7fc f90d 	bl	800d240 <chEvtSignalI>
 8011026:	2300      	movs	r3, #0
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	bd08      	pop	{r3, pc}
 801102e:	bf00      	nop
 8011030:	20004418 	.word	0x20004418
	...

08011040 <update>:
	chSysUnlockFromISR();
}


static void update(void *p) {
 8011040:	b510      	push	{r4, lr}
 8011042:	2320      	movs	r3, #32
 8011044:	4604      	mov	r4, r0
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	480a      	ldr	r0, [pc, #40]	; (8011074 <update+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 801104c:	68c3      	ldr	r3, [r0, #12]
 801104e:	b10b      	cbz	r3, 8011054 <update+0x14>
    chVTDoResetI(vtp);
 8011050:	f7fb fe26 	bl	800cca0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8011054:	4623      	mov	r3, r4
 8011056:	4a08      	ldr	r2, [pc, #32]	; (8011078 <update+0x38>)
 8011058:	4806      	ldr	r0, [pc, #24]	; (8011074 <update+0x34>)
 801105a:	2114      	movs	r1, #20
 801105c:	f7fb fe00 	bl	800cc60 <chVTDoSetI>
	chSysLockFromISR();
	chVTSetI(&vt, MS2ST(2), update, p);

	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 8011060:	4b06      	ldr	r3, [pc, #24]	; (801107c <update+0x3c>)
 8011062:	2101      	movs	r1, #1
 8011064:	6818      	ldr	r0, [r3, #0]
 8011066:	f7fc f8eb 	bl	800d240 <chEvtSignalI>
 801106a:	2300      	movs	r3, #0
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	bd10      	pop	{r4, pc}
 8011072:	bf00      	nop
 8011074:	200049bc 	.word	0x200049bc
 8011078:	08011041 	.word	0x08011041
 801107c:	20004418 	.word	0x20004418

08011080 <app_ppm_configure>:
static volatile int pulses_without_power = 0;

// Private functions
static void update(void *p);

void app_ppm_configure(ppm_config *conf) {
 8011080:	b4f0      	push	{r4, r5, r6, r7}
	config = *conf;
 8011082:	4605      	mov	r5, r0
 8011084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011086:	4e0c      	ldr	r6, [pc, #48]	; (80110b8 <app_ppm_configure+0x38>)
	pulses_without_power = 0;
 8011088:	4f0c      	ldr	r7, [pc, #48]	; (80110bc <app_ppm_configure+0x3c>)

// Private functions
static void update(void *p);

void app_ppm_configure(ppm_config *conf) {
	config = *conf;
 801108a:	4634      	mov	r4, r6
 801108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011096:	e884 0003 	stmia.w	r4, {r0, r1}
	pulses_without_power = 0;
 801109a:	2200      	movs	r2, #0

	if (is_running) {
 801109c:	4b08      	ldr	r3, [pc, #32]	; (80110c0 <app_ppm_configure+0x40>)
// Private functions
static void update(void *p);

void app_ppm_configure(ppm_config *conf) {
	config = *conf;
	pulses_without_power = 0;
 801109e:	603a      	str	r2, [r7, #0]

	if (is_running) {
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	b90b      	cbnz	r3, 80110a8 <app_ppm_configure+0x28>
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
	}
}
 80110a4:	bcf0      	pop	{r4, r5, r6, r7}
 80110a6:	4770      	bx	lr
void app_ppm_configure(ppm_config *conf) {
	config = *conf;
	pulses_without_power = 0;

	if (is_running) {
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 80110a8:	ed96 0a03 	vldr	s0, [r6, #12]
 80110ac:	edd6 0a04 	vldr	s1, [r6, #16]
 80110b0:	7d30      	ldrb	r0, [r6, #20]
	}
}
 80110b2:	bcf0      	pop	{r4, r5, r6, r7}
void app_ppm_configure(ppm_config *conf) {
	config = *conf;
	pulses_without_power = 0;

	if (is_running) {
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 80110b4:	f7ff bbc4 	b.w	8010840 <servodec_set_pulse_options>
 80110b8:	200049d0 	.word	0x200049d0
 80110bc:	200049b8 	.word	0x200049b8
 80110c0:	20004414 	.word	0x20004414
	...

080110d0 <app_ppm_start>:
	}
}

void app_ppm_start(void) {
 80110d0:	b500      	push	{lr}
 80110d2:	b083      	sub	sp, #12
	chThdCreateStatic(ppm_thread_wa, sizeof(ppm_thread_wa), NORMALPRIO, ppm_thread, NULL);
 80110d4:	2300      	movs	r3, #0
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	2240      	movs	r2, #64	; 0x40
 80110da:	4b0d      	ldr	r3, [pc, #52]	; (8011110 <app_ppm_start+0x40>)
 80110dc:	480d      	ldr	r0, [pc, #52]	; (8011114 <app_ppm_start+0x44>)
 80110de:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 80110e2:	f7fb ff65 	bl	800cfb0 <chThdCreateStatic>
 80110e6:	2320      	movs	r3, #32
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	480a      	ldr	r0, [pc, #40]	; (8011118 <app_ppm_start+0x48>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80110ee:	68c3      	ldr	r3, [r0, #12]
 80110f0:	b10b      	cbz	r3, 80110f6 <app_ppm_start+0x26>
    chVTDoResetI(vtp);
 80110f2:	f7fb fdd5 	bl	800cca0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80110f6:	2300      	movs	r3, #0
 80110f8:	4a08      	ldr	r2, [pc, #32]	; (801111c <app_ppm_start+0x4c>)
 80110fa:	4807      	ldr	r0, [pc, #28]	; (8011118 <app_ppm_start+0x48>)
 80110fc:	210a      	movs	r1, #10
 80110fe:	f7fb fdaf 	bl	800cc60 <chVTDoSetI>
 8011102:	2300      	movs	r3, #0
 8011104:	f383 8811 	msr	BASEPRI, r3
	//Uart3_printf(&SD3, (uint8_t *)"app_ppm_start.....\r\n");  //170530  

	chSysLock();
	chVTSetI(&vt, MS2ST(1), update, NULL);
	chSysUnlock();
}
 8011108:	b003      	add	sp, #12
 801110a:	f85d fb04 	ldr.w	pc, [sp], #4
 801110e:	bf00      	nop
 8011110:	08010fa1 	.word	0x08010fa1
 8011114:	20004420 	.word	0x20004420
 8011118:	200049bc 	.word	0x200049bc
 801111c:	08011041 	.word	0x08011041

08011120 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8011120:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8011122:	6844      	ldr	r4, [r0, #4]
 8011124:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8011126:	790e      	ldrb	r6, [r1, #4]
 8011128:	f8d1 e010 	ldr.w	lr, [r1, #16]
 801112c:	68cd      	ldr	r5, [r1, #12]
 801112e:	4b0f      	ldr	r3, [pc, #60]	; (801116c <ADC_Init+0x4c>)
 8011130:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 8011134:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8011138:	4322      	orrs	r2, r4
 801113a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 801113e:	6042      	str	r2, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8011140:	6887      	ldr	r7, [r0, #8]
 8011142:	688a      	ldr	r2, [r1, #8]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8011144:	794e      	ldrb	r6, [r1, #5]
 8011146:	ea4e 0405 	orr.w	r4, lr, r5
 801114a:	4322      	orrs	r2, r4
 801114c:	403b      	ands	r3, r7
 801114e:	4313      	orrs	r3, r2
 8011150:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8011154:	6083      	str	r3, [r0, #8]
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8011156:	7d0a      	ldrb	r2, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8011158:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 801115a:	3a01      	subs	r2, #1
 801115c:	b2d2      	uxtb	r2, r2
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 801115e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8011162:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8011166:	62c3      	str	r3, [r0, #44]	; 0x2c
 8011168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801116a:	bf00      	nop
 801116c:	c0fff7fd 	.word	0xc0fff7fd

08011170 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8011170:	b470      	push	{r4, r5, r6}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011172:	6842      	ldr	r2, [r0, #4]
 8011174:	6806      	ldr	r6, [r0, #0]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8011176:	4d06      	ldr	r5, [pc, #24]	; (8011190 <ADC_CommonInit+0x20>)
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011178:	6884      	ldr	r4, [r0, #8]
 801117a:	68c1      	ldr	r1, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 801117c:	4b05      	ldr	r3, [pc, #20]	; (8011194 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 801117e:	6868      	ldr	r0, [r5, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011180:	4332      	orrs	r2, r6
 8011182:	4322      	orrs	r2, r4
 8011184:	430a      	orrs	r2, r1
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8011186:	4003      	ands	r3, r0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011188:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 801118a:	606b      	str	r3, [r5, #4]
}
 801118c:	bc70      	pop	{r4, r5, r6}
 801118e:	4770      	bx	lr
 8011190:	40012300 	.word	0x40012300
 8011194:	fffc30e0 	.word	0xfffc30e0
	...

080111a0 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80111a0:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80111a2:	b919      	cbnz	r1, 80111ac <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80111a4:	f023 0301 	bic.w	r3, r3, #1
 80111a8:	6083      	str	r3, [r0, #8]
 80111aa:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80111ac:	f043 0301 	orr.w	r3, r3, #1
 80111b0:	6083      	str	r3, [r0, #8]
 80111b2:	4770      	bx	lr
	...

080111c0 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80111c0:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80111c2:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80111c4:	d91d      	bls.n	8011202 <ADC_RegularChannelConfig+0x42>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80111c6:	f1a1 060a 	sub.w	r6, r1, #10
 80111ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80111ce:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80111d0:	2407      	movs	r4, #7
 80111d2:	40b4      	lsls	r4, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80111d4:	40b3      	lsls	r3, r6
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80111d6:	ea25 0404 	bic.w	r4, r5, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80111da:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80111dc:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80111de:	60c3      	str	r3, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80111e0:	d91b      	bls.n	801121a <ADC_RegularChannelConfig+0x5a>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80111e2:	2a0c      	cmp	r2, #12
 80111e4:	d927      	bls.n	8011236 <ADC_RegularChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80111e6:	3a0d      	subs	r2, #13
 80111e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80111ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80111ee:	241f      	movs	r4, #31
 80111f0:	4094      	lsls	r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80111f2:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80111f6:	ea23 0104 	bic.w	r1, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80111fa:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80111fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 80111fe:	bc70      	pop	{r4, r5, r6}
 8011200:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011202:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8011206:	6905      	ldr	r5, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011208:	2407      	movs	r4, #7
 801120a:	40b4      	lsls	r4, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 801120c:	40b3      	lsls	r3, r6
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 801120e:	ea25 0404 	bic.w	r4, r5, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011212:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011214:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8011216:	6103      	str	r3, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011218:	d8e3      	bhi.n	80111e2 <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 801121a:	3a01      	subs	r2, #1
 801121c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8011220:	6b43      	ldr	r3, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011222:	241f      	movs	r4, #31
 8011224:	4094      	lsls	r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011226:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 801122a:	ea23 0104 	bic.w	r1, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 801122e:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8011230:	6342      	str	r2, [r0, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8011232:	bc70      	pop	{r4, r5, r6}
 8011234:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8011236:	3a07      	subs	r2, #7
 8011238:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 801123c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 801123e:	241f      	movs	r4, #31
 8011240:	4094      	lsls	r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011242:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011246:	ea23 0104 	bic.w	r1, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 801124a:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 801124c:	6302      	str	r2, [r0, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 801124e:	bc70      	pop	{r4, r5, r6}
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
	...

08011260 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8011260:	4a05      	ldr	r2, [pc, #20]	; (8011278 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 8011262:	6853      	ldr	r3, [r2, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011264:	b918      	cbnz	r0, 801126e <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8011266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801126a:	6053      	str	r3, [r2, #4]
 801126c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 801126e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011272:	6053      	str	r3, [r2, #4]
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop
 8011278:	40012300 	.word	0x40012300
 801127c:	00000000 	.word	0x00000000

08011280 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011280:	f101 0218 	add.w	r2, r1, #24
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8011284:	b4f0      	push	{r4, r5, r6, r7}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011286:	ca8c      	ldmia	r2, {r2, r3, r7}
 8011288:	68cd      	ldr	r5, [r1, #12]
 801128a:	680e      	ldr	r6, [r1, #0]
 801128c:	694c      	ldr	r4, [r1, #20]
 801128e:	432e      	orrs	r6, r5
 8011290:	4326      	orrs	r6, r4
 8011292:	4316      	orrs	r6, r2
 8011294:	431e      	orrs	r6, r3
 8011296:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8011298:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801129a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 801129c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801129e:	433e      	orrs	r6, r7
 80112a0:	4316      	orrs	r6, r2
 80112a2:	431e      	orrs	r6, r3
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80112a4:	4a0b      	ldr	r2, [pc, #44]	; (80112d4 <DMA_Init+0x54>)
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80112a6:	6803      	ldr	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80112a8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80112aa:	4335      	orrs	r5, r6
 80112ac:	432c      	orrs	r4, r5
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80112ae:	401a      	ands	r2, r3
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80112b0:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80112b2:	6002      	str	r2, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80112b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80112b6:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80112b8:	690d      	ldr	r5, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80112ba:	684c      	ldr	r4, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80112bc:	6889      	ldr	r1, [r1, #8]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80112be:	433b      	orrs	r3, r7
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80112c0:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80112c4:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80112c6:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80112c8:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80112ca:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80112cc:	60c1      	str	r1, [r0, #12]
}
 80112ce:	bcf0      	pop	{r4, r5, r6, r7}
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	f01c803f 	.word	0xf01c803f
	...

080112e0 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80112e0:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80112e2:	b919      	cbnz	r1, 80112ec <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80112e4:	f023 0301 	bic.w	r3, r3, #1
 80112e8:	6003      	str	r3, [r0, #0]
 80112ea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80112ec:	f043 0301 	orr.w	r3, r3, #1
 80112f0:	6003      	str	r3, [r0, #0]
 80112f2:	4770      	bx	lr
	...

08011300 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8011300:	060b      	lsls	r3, r1, #24
 8011302:	d50c      	bpl.n	801131e <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011304:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8011306:	b1aa      	cbz	r2, 8011334 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801130c:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 801130e:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011310:	d00f      	beq.n	8011332 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8011312:	6803      	ldr	r3, [r0, #0]
 8011314:	f001 011e 	and.w	r1, r1, #30
 8011318:	4319      	orrs	r1, r3
 801131a:	6001      	str	r1, [r0, #0]
 801131c:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801131e:	2980      	cmp	r1, #128	; 0x80
 8011320:	d007      	beq.n	8011332 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8011322:	2a00      	cmp	r2, #0
 8011324:	d1f5      	bne.n	8011312 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8011326:	6803      	ldr	r3, [r0, #0]
 8011328:	f001 011e 	and.w	r1, r1, #30
 801132c:	ea23 0101 	bic.w	r1, r3, r1
 8011330:	6001      	str	r1, [r0, #0]
 8011332:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8011334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011338:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 801133a:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801133c:	d1f3      	bne.n	8011326 <DMA_ITConfig+0x26>
 801133e:	4770      	bx	lr

08011340 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8011340:	4b03      	ldr	r3, [pc, #12]	; (8011350 <EXTI_GetITStatus+0x10>)
 8011342:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8011344:	4203      	tst	r3, r0
  
}
 8011346:	bf14      	ite	ne
 8011348:	2001      	movne	r0, #1
 801134a:	2000      	moveq	r0, #0
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop
 8011350:	40013c00 	.word	0x40013c00
	...

08011360 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8011360:	4b01      	ldr	r3, [pc, #4]	; (8011368 <EXTI_ClearITPendingBit+0x8>)
 8011362:	6158      	str	r0, [r3, #20]
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	40013c00 	.word	0x40013c00
 801136c:	00000000 	.word	0x00000000

08011370 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011370:	b929      	cbnz	r1, 801137e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8011372:	4a05      	ldr	r2, [pc, #20]	; (8011388 <RCC_AHB1PeriphClockCmd+0x18>)
 8011374:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011376:	ea23 0000 	bic.w	r0, r3, r0
 801137a:	6310      	str	r0, [r2, #48]	; 0x30
 801137c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 801137e:	4b02      	ldr	r3, [pc, #8]	; (8011388 <RCC_AHB1PeriphClockCmd+0x18>)
 8011380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011382:	4310      	orrs	r0, r2
 8011384:	6318      	str	r0, [r3, #48]	; 0x30
 8011386:	4770      	bx	lr
 8011388:	40023800 	.word	0x40023800
 801138c:	00000000 	.word	0x00000000

08011390 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011390:	b929      	cbnz	r1, 801139e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8011392:	4a05      	ldr	r2, [pc, #20]	; (80113a8 <RCC_APB1PeriphClockCmd+0x18>)
 8011394:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011396:	ea23 0000 	bic.w	r0, r3, r0
 801139a:	6410      	str	r0, [r2, #64]	; 0x40
 801139c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 801139e:	4b02      	ldr	r3, [pc, #8]	; (80113a8 <RCC_APB1PeriphClockCmd+0x18>)
 80113a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80113a2:	4310      	orrs	r0, r2
 80113a4:	6418      	str	r0, [r3, #64]	; 0x40
 80113a6:	4770      	bx	lr
 80113a8:	40023800 	.word	0x40023800
 80113ac:	00000000 	.word	0x00000000

080113b0 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80113b0:	b929      	cbnz	r1, 80113be <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80113b2:	4a05      	ldr	r2, [pc, #20]	; (80113c8 <RCC_APB2PeriphClockCmd+0x18>)
 80113b4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80113b6:	ea23 0000 	bic.w	r0, r3, r0
 80113ba:	6450      	str	r0, [r2, #68]	; 0x44
 80113bc:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80113be:	4b02      	ldr	r3, [pc, #8]	; (80113c8 <RCC_APB2PeriphClockCmd+0x18>)
 80113c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113c2:	4310      	orrs	r0, r2
 80113c4:	6458      	str	r0, [r3, #68]	; 0x44
 80113c6:	4770      	bx	lr
 80113c8:	40023800 	.word	0x40023800
 80113cc:	00000000 	.word	0x00000000

080113d0 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80113d0:	b929      	cbnz	r1, 80113de <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80113d2:	4a05      	ldr	r2, [pc, #20]	; (80113e8 <RCC_APB1PeriphResetCmd+0x18>)
 80113d4:	6a13      	ldr	r3, [r2, #32]
 80113d6:	ea23 0000 	bic.w	r0, r3, r0
 80113da:	6210      	str	r0, [r2, #32]
 80113dc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80113de:	4b02      	ldr	r3, [pc, #8]	; (80113e8 <RCC_APB1PeriphResetCmd+0x18>)
 80113e0:	6a1a      	ldr	r2, [r3, #32]
 80113e2:	4310      	orrs	r0, r2
 80113e4:	6218      	str	r0, [r3, #32]
 80113e6:	4770      	bx	lr
 80113e8:	40023800 	.word	0x40023800
 80113ec:	00000000 	.word	0x00000000

080113f0 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80113f0:	b929      	cbnz	r1, 80113fe <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80113f2:	4a05      	ldr	r2, [pc, #20]	; (8011408 <RCC_APB2PeriphResetCmd+0x18>)
 80113f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80113f6:	ea23 0000 	bic.w	r0, r3, r0
 80113fa:	6250      	str	r0, [r2, #36]	; 0x24
 80113fc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80113fe:	4b02      	ldr	r3, [pc, #8]	; (8011408 <RCC_APB2PeriphResetCmd+0x18>)
 8011400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011402:	4310      	orrs	r0, r2
 8011404:	6258      	str	r0, [r3, #36]	; 0x24
 8011406:	4770      	bx	lr
 8011408:	40023800 	.word	0x40023800
 801140c:	00000000 	.word	0x00000000

08011410 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8011410:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8011412:	4b60      	ldr	r3, [pc, #384]	; (8011594 <TIM_DeInit+0x184>)
 8011414:	4298      	cmp	r0, r3
 8011416:	d035      	beq.n	8011484 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8011418:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801141c:	d03c      	beq.n	8011498 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 801141e:	4b5e      	ldr	r3, [pc, #376]	; (8011598 <TIM_DeInit+0x188>)
 8011420:	4298      	cmp	r0, r3
 8011422:	d043      	beq.n	80114ac <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8011424:	4b5d      	ldr	r3, [pc, #372]	; (801159c <TIM_DeInit+0x18c>)
 8011426:	4298      	cmp	r0, r3
 8011428:	d04a      	beq.n	80114c0 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 801142a:	4b5d      	ldr	r3, [pc, #372]	; (80115a0 <TIM_DeInit+0x190>)
 801142c:	4298      	cmp	r0, r3
 801142e:	d051      	beq.n	80114d4 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8011430:	4b5c      	ldr	r3, [pc, #368]	; (80115a4 <TIM_DeInit+0x194>)
 8011432:	4298      	cmp	r0, r3
 8011434:	d058      	beq.n	80114e8 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8011436:	4b5c      	ldr	r3, [pc, #368]	; (80115a8 <TIM_DeInit+0x198>)
 8011438:	4298      	cmp	r0, r3
 801143a:	d05f      	beq.n	80114fc <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 801143c:	4b5b      	ldr	r3, [pc, #364]	; (80115ac <TIM_DeInit+0x19c>)
 801143e:	4298      	cmp	r0, r3
 8011440:	d066      	beq.n	8011510 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8011442:	4b5b      	ldr	r3, [pc, #364]	; (80115b0 <TIM_DeInit+0x1a0>)
 8011444:	4298      	cmp	r0, r3
 8011446:	d06d      	beq.n	8011524 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8011448:	4b5a      	ldr	r3, [pc, #360]	; (80115b4 <TIM_DeInit+0x1a4>)
 801144a:	4298      	cmp	r0, r3
 801144c:	d076      	beq.n	801153c <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 801144e:	4b5a      	ldr	r3, [pc, #360]	; (80115b8 <TIM_DeInit+0x1a8>)
 8011450:	4298      	cmp	r0, r3
 8011452:	d07f      	beq.n	8011554 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8011454:	4b59      	ldr	r3, [pc, #356]	; (80115bc <TIM_DeInit+0x1ac>)
 8011456:	4298      	cmp	r0, r3
 8011458:	f000 8088 	beq.w	801156c <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 801145c:	4b58      	ldr	r3, [pc, #352]	; (80115c0 <TIM_DeInit+0x1b0>)
 801145e:	4298      	cmp	r0, r3
 8011460:	f000 808e 	beq.w	8011580 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8011464:	4b57      	ldr	r3, [pc, #348]	; (80115c4 <TIM_DeInit+0x1b4>)
 8011466:	4298      	cmp	r0, r3
 8011468:	d000      	beq.n	801146c <TIM_DeInit+0x5c>
 801146a:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 801146c:	2101      	movs	r1, #1
 801146e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011472:	f7ff ffad 	bl	80113d0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011476:	2100      	movs	r1, #0
 8011478:	f44f 7080 	mov.w	r0, #256	; 0x100
    }   
  }
}
 801147c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011480:	f7ff bfa6 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8011484:	2101      	movs	r1, #1
 8011486:	4608      	mov	r0, r1
 8011488:	f7ff ffb2 	bl	80113f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 801148c:	2100      	movs	r1, #0
 801148e:	2001      	movs	r0, #1
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8011494:	f7ff bfac 	b.w	80113f0 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8011498:	2101      	movs	r1, #1
 801149a:	4608      	mov	r0, r1
 801149c:	f7ff ff98 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80114a0:	2100      	movs	r1, #0
 80114a2:	2001      	movs	r0, #1
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80114a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80114a8:	f7ff bf92 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80114ac:	2101      	movs	r1, #1
 80114ae:	2002      	movs	r0, #2
 80114b0:	f7ff ff8e 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80114b4:	2100      	movs	r1, #0
 80114b6:	2002      	movs	r0, #2
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80114b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80114bc:	f7ff bf88 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80114c0:	2101      	movs	r1, #1
 80114c2:	2004      	movs	r0, #4
 80114c4:	f7ff ff84 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80114c8:	2100      	movs	r1, #0
 80114ca:	2004      	movs	r0, #4
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80114cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80114d0:	f7ff bf7e 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80114d4:	2101      	movs	r1, #1
 80114d6:	2008      	movs	r0, #8
 80114d8:	f7ff ff7a 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80114dc:	2100      	movs	r1, #0
 80114de:	2008      	movs	r0, #8
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80114e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80114e4:	f7ff bf74 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80114e8:	2101      	movs	r1, #1
 80114ea:	2010      	movs	r0, #16
 80114ec:	f7ff ff70 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80114f0:	2100      	movs	r1, #0
 80114f2:	2010      	movs	r0, #16
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80114f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80114f8:	f7ff bf6a 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80114fc:	2101      	movs	r1, #1
 80114fe:	2020      	movs	r0, #32
 8011500:	f7ff ff66 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8011504:	2100      	movs	r1, #0
 8011506:	2020      	movs	r0, #32
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 801150c:	f7ff bf60 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8011510:	2101      	movs	r1, #1
 8011512:	2002      	movs	r0, #2
 8011514:	f7ff ff6c 	bl	80113f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8011518:	2100      	movs	r1, #0
 801151a:	2002      	movs	r0, #2
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801151c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8011520:	f7ff bf66 	b.w	80113f0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8011524:	2101      	movs	r1, #1
 8011526:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801152a:	f7ff ff61 	bl	80113f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 801152e:	2100      	movs	r1, #0
 8011530:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8011538:	f7ff bf5a 	b.w	80113f0 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 801153c:	2101      	movs	r1, #1
 801153e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011542:	f7ff ff55 	bl	80113f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8011546:	2100      	movs	r1, #0
 8011548:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801154c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8011550:	f7ff bf4e 	b.w	80113f0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8011554:	2101      	movs	r1, #1
 8011556:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801155a:	f7ff ff49 	bl	80113f0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 801155e:	2100      	movs	r1, #0
 8011560:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8011568:	f7ff bf42 	b.w	80113f0 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 801156c:	2101      	movs	r1, #1
 801156e:	2040      	movs	r0, #64	; 0x40
 8011570:	f7ff ff2e 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8011574:	2100      	movs	r1, #0
 8011576:	2040      	movs	r0, #64	; 0x40
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 801157c:	f7ff bf28 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8011580:	2101      	movs	r1, #1
 8011582:	2080      	movs	r0, #128	; 0x80
 8011584:	f7ff ff24 	bl	80113d0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011588:	2100      	movs	r1, #0
 801158a:	2080      	movs	r0, #128	; 0x80
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801158c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011590:	f7ff bf1e 	b.w	80113d0 <RCC_APB1PeriphResetCmd>
 8011594:	40010000 	.word	0x40010000
 8011598:	40000400 	.word	0x40000400
 801159c:	40000800 	.word	0x40000800
 80115a0:	40000c00 	.word	0x40000c00
 80115a4:	40001000 	.word	0x40001000
 80115a8:	40001400 	.word	0x40001400
 80115ac:	40010400 	.word	0x40010400
 80115b0:	40014000 	.word	0x40014000
 80115b4:	40014400 	.word	0x40014400
 80115b8:	40014800 	.word	0x40014800
 80115bc:	40001800 	.word	0x40001800
 80115c0:	40001c00 	.word	0x40001c00
 80115c4:	40002000 	.word	0x40002000
	...

080115d0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80115d0:	4a22      	ldr	r2, [pc, #136]	; (801165c <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80115d2:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80115d4:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80115d6:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80115d8:	d012      	beq.n	8011600 <TIM_TimeBaseInit+0x30>
 80115da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115de:	4290      	cmp	r0, r2
 80115e0:	d00e      	beq.n	8011600 <TIM_TimeBaseInit+0x30>
 80115e2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80115e6:	d00b      	beq.n	8011600 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80115e8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80115ec:	4290      	cmp	r0, r2
 80115ee:	d007      	beq.n	8011600 <TIM_TimeBaseInit+0x30>
 80115f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115f4:	4290      	cmp	r0, r2
 80115f6:	d003      	beq.n	8011600 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80115f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115fc:	4290      	cmp	r0, r2
 80115fe:	d103      	bne.n	8011608 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011600:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8011602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011606:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8011608:	4a15      	ldr	r2, [pc, #84]	; (8011660 <TIM_TimeBaseInit+0x90>)
 801160a:	4290      	cmp	r0, r2
 801160c:	d01e      	beq.n	801164c <TIM_TimeBaseInit+0x7c>
 801160e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011612:	4290      	cmp	r0, r2
 8011614:	d01a      	beq.n	801164c <TIM_TimeBaseInit+0x7c>
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011616:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8011618:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 801161a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 801161e:	4c0f      	ldr	r4, [pc, #60]	; (801165c <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011620:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011622:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8011624:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011626:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011628:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 801162a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 801162c:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801162e:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011630:	d006      	beq.n	8011640 <TIM_TimeBaseInit+0x70>
 8011632:	4b0c      	ldr	r3, [pc, #48]	; (8011664 <TIM_TimeBaseInit+0x94>)
 8011634:	4298      	cmp	r0, r3
 8011636:	d003      	beq.n	8011640 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011638:	2301      	movs	r3, #1
 801163a:	6143      	str	r3, [r0, #20]
}
 801163c:	bc70      	pop	{r4, r5, r6}
 801163e:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8011640:	7a8b      	ldrb	r3, [r1, #10]
 8011642:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011644:	2301      	movs	r3, #1
 8011646:	6143      	str	r3, [r0, #20]
}
 8011648:	bc70      	pop	{r4, r5, r6}
 801164a:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 801164c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 801164e:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011650:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011652:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011654:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011656:	2301      	movs	r3, #1
 8011658:	6143      	str	r3, [r0, #20]
 801165a:	4770      	bx	lr
 801165c:	40010000 	.word	0x40010000
 8011660:	40001000 	.word	0x40001000
 8011664:	40010400 	.word	0x40010400
	...

08011670 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011670:	b929      	cbnz	r1, 801167e <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8011672:	6802      	ldr	r2, [r0, #0]
 8011674:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8011678:	4013      	ands	r3, r2
 801167a:	6003      	str	r3, [r0, #0]
 801167c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801167e:	6803      	ldr	r3, [r0, #0]
 8011680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011684:	6003      	str	r3, [r0, #0]
 8011686:	4770      	bx	lr
	...

08011690 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011690:	b929      	cbnz	r1, 801169e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8011692:	6802      	ldr	r2, [r0, #0]
 8011694:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011698:	4013      	ands	r3, r2
 801169a:	6003      	str	r3, [r0, #0]
 801169c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801169e:	6803      	ldr	r3, [r0, #0]
 80116a0:	f043 0301 	orr.w	r3, r3, #1
 80116a4:	6003      	str	r3, [r0, #0]
 80116a6:	4770      	bx	lr
	...

080116b0 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80116b0:	6a02      	ldr	r2, [r0, #32]
 80116b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80116b6:	4013      	ands	r3, r2
 80116b8:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80116ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80116bc:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116be:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80116c0:	898b      	ldrh	r3, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116c2:	6844      	ldr	r4, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80116c4:	4f15      	ldr	r7, [pc, #84]	; (801171c <TIM_OC1Init+0x6c>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80116c6:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80116ca:	f64f 76fd 	movw	r6, #65533	; 0xfffd
 80116ce:	402e      	ands	r6, r5
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80116d0:	4313      	orrs	r3, r2
 80116d2:	4333      	orrs	r3, r6
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80116d4:	f64f 758c 	movw	r5, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80116d8:	880e      	ldrh	r6, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80116da:	ea0e 0505 	and.w	r5, lr, r5
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80116de:	42b8      	cmp	r0, r7
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116e0:	b2a2      	uxth	r2, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80116e2:	b29b      	uxth	r3, r3
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80116e4:	ea45 0406 	orr.w	r4, r5, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80116e8:	d008      	beq.n	80116fc <TIM_OC1Init+0x4c>
 80116ea:	4d0d      	ldr	r5, [pc, #52]	; (8011720 <TIM_OC1Init+0x70>)
 80116ec:	42a8      	cmp	r0, r5
 80116ee:	d005      	beq.n	80116fc <TIM_OC1Init+0x4c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80116f0:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116f2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116f4:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80116f6:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116f8:	6203      	str	r3, [r0, #32]
 80116fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80116fc:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80116fe:	8a0f      	ldrh	r7, [r1, #16]
 8011700:	8a4d      	ldrh	r5, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8011702:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8011706:	4333      	orrs	r3, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8011708:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 801170c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 801170e:	433d      	orrs	r5, r7
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8011710:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8011714:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8011716:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8011718:	b292      	uxth	r2, r2
 801171a:	e7e9      	b.n	80116f0 <TIM_OC1Init+0x40>
 801171c:	40010000 	.word	0x40010000
 8011720:	40010400 	.word	0x40010400
	...

08011730 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8011730:	6a02      	ldr	r2, [r0, #32]
 8011732:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8011736:	4013      	ands	r3, r2
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8011738:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 801173a:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801173c:	884a      	ldrh	r2, [r1, #2]
 801173e:	898c      	ldrh	r4, [r1, #12]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8011740:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011744:	6846      	ldr	r6, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011746:	6987      	ldr	r7, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011748:	4d18      	ldr	r5, [pc, #96]	; (80117ac <TIM_OC2Init+0x7c>)
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801174a:	4314      	orrs	r4, r2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 801174c:	f648 42ff 	movw	r2, #36095	; 0x8cff
 8011750:	403a      	ands	r2, r7
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8011752:	f64f 73df 	movw	r3, #65503	; 0xffdf
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011756:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8011758:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801175c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011760:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011764:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8011766:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011768:	b2b4      	uxth	r4, r6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801176a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801176c:	d009      	beq.n	8011782 <TIM_OC2Init+0x52>
 801176e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011772:	42a8      	cmp	r0, r5
 8011774:	d005      	beq.n	8011782 <TIM_OC2Init+0x52>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8011776:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011778:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801177a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801177c:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801177e:	6203      	str	r3, [r0, #32]
 8011780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8011782:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011784:	8a0f      	ldrh	r7, [r1, #16]
 8011786:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8011788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801178c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8011790:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8011794:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8011796:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8011798:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801179c:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 801179e:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80117a2:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80117a6:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80117a8:	b2a4      	uxth	r4, r4
 80117aa:	e7e4      	b.n	8011776 <TIM_OC2Init+0x46>
 80117ac:	40010000 	.word	0x40010000

080117b0 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80117b0:	6a02      	ldr	r2, [r0, #32]
 80117b2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80117b6:	4013      	ands	r3, r2
 80117b8:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80117ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80117bc:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117be:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80117c2:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117c4:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80117c6:	4e1a      	ldr	r6, [pc, #104]	; (8011830 <TIM_OC3Init+0x80>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80117c8:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80117ca:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80117ce:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80117d0:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80117d4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80117d8:	f64f 728c 	movw	r2, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80117dc:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80117de:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80117e0:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80117e2:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117e4:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80117e6:	ea42 0204 	orr.w	r2, r2, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80117ea:	d009      	beq.n	8011800 <TIM_OC3Init+0x50>
 80117ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80117f0:	42b0      	cmp	r0, r6
 80117f2:	d005      	beq.n	8011800 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80117f4:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117f6:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117f8:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80117fa:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117fc:	6203      	str	r3, [r0, #32]
 80117fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8011800:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8011802:	8a0c      	ldrh	r4, [r1, #16]
 8011804:	f8b1 e012 	ldrh.w	lr, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8011808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801180c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8011810:	f64f 36ff 	movw	r6, #64511	; 0xfbff
 8011814:	401e      	ands	r6, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8011816:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8011818:	f425 5740 	bic.w	r7, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 801181c:	ea44 050e 	orr.w	r5, r4, lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8011820:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8011824:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8011828:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 801182a:	b2ad      	uxth	r5, r5
 801182c:	e7e2      	b.n	80117f4 <TIM_OC3Init+0x44>
 801182e:	bf00      	nop
 8011830:	40010000 	.word	0x40010000
	...

08011840 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8011840:	6a02      	ldr	r2, [r0, #32]
 8011842:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8011846:	4013      	ands	r3, r2
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8011848:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 801184a:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801184c:	884a      	ldrh	r2, [r1, #2]
 801184e:	898d      	ldrh	r5, [r1, #12]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011850:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011854:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011856:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011858:	4e11      	ldr	r6, [pc, #68]	; (80118a0 <TIM_OC4Init+0x60>)
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801185a:	4315      	orrs	r5, r2
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801185c:	f648 42ff 	movw	r2, #36095	; 0x8cff
 8011860:	403a      	ands	r2, r7
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8011862:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011866:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8011868:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801186c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011870:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011874:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8011876:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011878:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801187a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801187c:	d008      	beq.n	8011890 <TIM_OC4Init+0x50>
 801187e:	4d09      	ldr	r5, [pc, #36]	; (80118a4 <TIM_OC4Init+0x64>)
 8011880:	42a8      	cmp	r0, r5
 8011882:	d005      	beq.n	8011890 <TIM_OC4Init+0x50>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8011884:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011886:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8011888:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801188a:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801188c:	6203      	str	r3, [r0, #32]
 801188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8011890:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8011892:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8011896:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 801189a:	b2a4      	uxth	r4, r4
 801189c:	e7f2      	b.n	8011884 <TIM_OC4Init+0x44>
 801189e:	bf00      	nop
 80118a0:	40010000 	.word	0x40010000
 80118a4:	40010400 	.word	0x40010400
	...

080118b0 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80118b0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80118b2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80118b6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80118b8:	4319      	orrs	r1, r3
 80118ba:	6181      	str	r1, [r0, #24]
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop

080118c0 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80118c0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80118c2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80118c6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80118c8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80118cc:	b289      	uxth	r1, r1
 80118ce:	6181      	str	r1, [r0, #24]
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
	...

080118e0 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80118e0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80118e2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80118e6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80118e8:	4319      	orrs	r1, r3
 80118ea:	61c1      	str	r1, [r0, #28]
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop

080118f0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80118f0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80118f2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80118f6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80118f8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80118fc:	b289      	uxth	r1, r1
 80118fe:	61c1      	str	r1, [r0, #28]
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
	...

08011910 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8011910:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8011912:	884b      	ldrh	r3, [r1, #2]
 8011914:	f8b1 e000 	ldrh.w	lr, [r1]
 8011918:	888f      	ldrh	r7, [r1, #4]
 801191a:	88ce      	ldrh	r6, [r1, #6]
 801191c:	890d      	ldrh	r5, [r1, #8]
 801191e:	894c      	ldrh	r4, [r1, #10]
 8011920:	898a      	ldrh	r2, [r1, #12]
 8011922:	ea4e 0303 	orr.w	r3, lr, r3
 8011926:	433b      	orrs	r3, r7
 8011928:	4333      	orrs	r3, r6
 801192a:	432b      	orrs	r3, r5
 801192c:	4323      	orrs	r3, r4
 801192e:	4313      	orrs	r3, r2
 8011930:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8011932:	6443      	str	r3, [r0, #68]	; 0x44
 8011934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011936:	bf00      	nop
	...

08011940 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8011940:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011942:	b919      	cbnz	r1, 801194c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8011944:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011948:	6443      	str	r3, [r0, #68]	; 0x44
 801194a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 801194c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011950:	6443      	str	r3, [r0, #68]	; 0x44
 8011952:	4770      	bx	lr
	...

08011960 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011960:	b929      	cbnz	r1, 801196e <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8011962:	6842      	ldr	r2, [r0, #4]
 8011964:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011968:	4013      	ands	r3, r2
 801196a:	6043      	str	r3, [r0, #4]
 801196c:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 801196e:	6843      	ldr	r3, [r0, #4]
 8011970:	f043 0301 	orr.w	r3, r3, #1
 8011974:	6043      	str	r3, [r0, #4]
 8011976:	4770      	bx	lr
	...

08011980 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8011980:	43c9      	mvns	r1, r1
 8011982:	b289      	uxth	r1, r1
 8011984:	6101      	str	r1, [r0, #16]
 8011986:	4770      	bx	lr
	...

08011990 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011990:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8011992:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8011996:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011998:	4319      	orrs	r1, r3
 801199a:	6081      	str	r1, [r0, #8]
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop

080119a0 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80119a0:	6842      	ldr	r2, [r0, #4]
 80119a2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80119a6:	4013      	ands	r3, r2
 80119a8:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80119aa:	6843      	ldr	r3, [r0, #4]
 80119ac:	4319      	orrs	r1, r3
 80119ae:	6041      	str	r1, [r0, #4]
 80119b0:	4770      	bx	lr
 80119b2:	bf00      	nop
	...

080119c0 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80119c0:	6882      	ldr	r2, [r0, #8]
 80119c2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80119c6:	4013      	ands	r3, r2
 80119c8:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80119ca:	6883      	ldr	r3, [r0, #8]
 80119cc:	4319      	orrs	r1, r3
 80119ce:	6081      	str	r1, [r0, #8]
 80119d0:	4770      	bx	lr
 80119d2:	bf00      	nop
	...

080119e0 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80119e0:	6882      	ldr	r2, [r0, #8]
 80119e2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80119e6:	4013      	ands	r3, r2
 80119e8:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80119ea:	6883      	ldr	r3, [r0, #8]
 80119ec:	4319      	orrs	r1, r3
 80119ee:	6081      	str	r1, [r0, #8]
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
	...

08011a00 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8011a00:	4a03      	ldr	r2, [pc, #12]	; (8011a10 <WWDG_SetPrescaler+0x10>)
 8011a02:	6853      	ldr	r3, [r2, #4]
 8011a04:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8011a08:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8011a0a:	6050      	str	r0, [r2, #4]
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop
 8011a10:	40002c00 	.word	0x40002c00
	...

08011a20 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8011a20:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8011a22:	4a08      	ldr	r2, [pc, #32]	; (8011a44 <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 8011a24:	2300      	movs	r3, #0
 8011a26:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8011a28:	6853      	ldr	r3, [r2, #4]
 8011a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011a2e:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8011a30:	9b01      	ldr	r3, [sp, #4]
 8011a32:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011a36:	4303      	orrs	r3, r0
 8011a38:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8011a3a:	9b01      	ldr	r3, [sp, #4]
 8011a3c:	6053      	str	r3, [r2, #4]
}
 8011a3e:	b002      	add	sp, #8
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	40002c00 	.word	0x40002c00
	...

08011a50 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8011a50:	4b02      	ldr	r3, [pc, #8]	; (8011a5c <WWDG_SetCounter+0xc>)
 8011a52:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011a56:	6018      	str	r0, [r3, #0]
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop
 8011a5c:	40002c00 	.word	0x40002c00

08011a60 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8011a60:	4b02      	ldr	r3, [pc, #8]	; (8011a6c <WWDG_Enable+0xc>)
 8011a62:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8011a66:	6018      	str	r0, [r3, #0]
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	40002c00 	.word	0x40002c00

08011a70 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 8011a70:	b508      	push	{r3, lr}
//=================================
// hardware setup
	
	bldc_init();
 8011a72:	f7fd ffcd 	bl	800fa10 <bldc_init>

	app_init();
 8011a76:	f7ff fa7b 	bl	8010f70 <app_init>

	timeout_init();
 8011a7a:	f7ff f809 	bl	8010a90 <timeout_init>
	timeout_configure(1000);
 8011a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011a82:	f7fe ffed 	bl	8010a60 <timeout_configure>

	comm_can_init();
 8011a86:	f7ff f8ab 	bl	8010be0 <comm_can_init>
	test.print();

//=================================
	for(;;)
	{
		chThdSleepMilliseconds(10);
 8011a8a:	2064      	movs	r0, #100	; 0x64
 8011a8c:	f7fb fac8 	bl	800d020 <chThdSleep>
 8011a90:	e7fb      	b.n	8011a8a <main+0x1a>
 8011a92:	bf00      	nop
	...

08011aa0 <cosf>:
 8011aa0:	b500      	push	{lr}
 8011aa2:	ee10 3a10 	vmov	r3, s0
 8011aa6:	4a20      	ldr	r2, [pc, #128]	; (8011b28 <cosf+0x88>)
 8011aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011aac:	4293      	cmp	r3, r2
 8011aae:	b083      	sub	sp, #12
 8011ab0:	dd19      	ble.n	8011ae6 <cosf+0x46>
 8011ab2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011ab6:	db04      	blt.n	8011ac2 <cosf+0x22>
 8011ab8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011abc:	b003      	add	sp, #12
 8011abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ac2:	4668      	mov	r0, sp
 8011ac4:	f000 f8dc 	bl	8011c80 <__ieee754_rem_pio2f>
 8011ac8:	f000 0003 	and.w	r0, r0, #3
 8011acc:	2801      	cmp	r0, #1
 8011ace:	d01a      	beq.n	8011b06 <cosf+0x66>
 8011ad0:	2802      	cmp	r0, #2
 8011ad2:	d00f      	beq.n	8011af4 <cosf+0x54>
 8011ad4:	b300      	cbz	r0, 8011b18 <cosf+0x78>
 8011ad6:	2001      	movs	r0, #1
 8011ad8:	eddd 0a01 	vldr	s1, [sp, #4]
 8011adc:	ed9d 0a00 	vldr	s0, [sp]
 8011ae0:	f000 fe16 	bl	8012710 <__kernel_sinf>
 8011ae4:	e7ea      	b.n	8011abc <cosf+0x1c>
 8011ae6:	eddf 0a11 	vldr	s1, [pc, #68]	; 8011b2c <cosf+0x8c>
 8011aea:	f000 fa71 	bl	8011fd0 <__kernel_cosf>
 8011aee:	b003      	add	sp, #12
 8011af0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011af4:	eddd 0a01 	vldr	s1, [sp, #4]
 8011af8:	ed9d 0a00 	vldr	s0, [sp]
 8011afc:	f000 fa68 	bl	8011fd0 <__kernel_cosf>
 8011b00:	eeb1 0a40 	vneg.f32	s0, s0
 8011b04:	e7da      	b.n	8011abc <cosf+0x1c>
 8011b06:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b0a:	ed9d 0a00 	vldr	s0, [sp]
 8011b0e:	f000 fdff 	bl	8012710 <__kernel_sinf>
 8011b12:	eeb1 0a40 	vneg.f32	s0, s0
 8011b16:	e7d1      	b.n	8011abc <cosf+0x1c>
 8011b18:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b1c:	ed9d 0a00 	vldr	s0, [sp]
 8011b20:	f000 fa56 	bl	8011fd0 <__kernel_cosf>
 8011b24:	e7ca      	b.n	8011abc <cosf+0x1c>
 8011b26:	bf00      	nop
 8011b28:	3f490fd8 	.word	0x3f490fd8
 8011b2c:	00000000 	.word	0x00000000

08011b30 <sinf>:
 8011b30:	b500      	push	{lr}
 8011b32:	ee10 3a10 	vmov	r3, s0
 8011b36:	4a21      	ldr	r2, [pc, #132]	; (8011bbc <sinf+0x8c>)
 8011b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	b083      	sub	sp, #12
 8011b40:	dd1a      	ble.n	8011b78 <sinf+0x48>
 8011b42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b46:	db04      	blt.n	8011b52 <sinf+0x22>
 8011b48:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011b4c:	b003      	add	sp, #12
 8011b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b52:	4668      	mov	r0, sp
 8011b54:	f000 f894 	bl	8011c80 <__ieee754_rem_pio2f>
 8011b58:	f000 0003 	and.w	r0, r0, #3
 8011b5c:	2801      	cmp	r0, #1
 8011b5e:	d01d      	beq.n	8011b9c <sinf+0x6c>
 8011b60:	2802      	cmp	r0, #2
 8011b62:	d011      	beq.n	8011b88 <sinf+0x58>
 8011b64:	b308      	cbz	r0, 8011baa <sinf+0x7a>
 8011b66:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b6a:	ed9d 0a00 	vldr	s0, [sp]
 8011b6e:	f000 fa2f 	bl	8011fd0 <__kernel_cosf>
 8011b72:	eeb1 0a40 	vneg.f32	s0, s0
 8011b76:	e7e9      	b.n	8011b4c <sinf+0x1c>
 8011b78:	2000      	movs	r0, #0
 8011b7a:	eddf 0a11 	vldr	s1, [pc, #68]	; 8011bc0 <sinf+0x90>
 8011b7e:	f000 fdc7 	bl	8012710 <__kernel_sinf>
 8011b82:	b003      	add	sp, #12
 8011b84:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b88:	2001      	movs	r0, #1
 8011b8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b8e:	ed9d 0a00 	vldr	s0, [sp]
 8011b92:	f000 fdbd 	bl	8012710 <__kernel_sinf>
 8011b96:	eeb1 0a40 	vneg.f32	s0, s0
 8011b9a:	e7d7      	b.n	8011b4c <sinf+0x1c>
 8011b9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ba0:	ed9d 0a00 	vldr	s0, [sp]
 8011ba4:	f000 fa14 	bl	8011fd0 <__kernel_cosf>
 8011ba8:	e7d0      	b.n	8011b4c <sinf+0x1c>
 8011baa:	2001      	movs	r0, #1
 8011bac:	eddd 0a01 	vldr	s1, [sp, #4]
 8011bb0:	ed9d 0a00 	vldr	s0, [sp]
 8011bb4:	f000 fdac 	bl	8012710 <__kernel_sinf>
 8011bb8:	e7c8      	b.n	8011b4c <sinf+0x1c>
 8011bba:	bf00      	nop
 8011bbc:	3f490fd8 	.word	0x3f490fd8
	...

08011bd0 <sqrtf>:
 8011bd0:	b510      	push	{r4, lr}
 8011bd2:	ed2d 8b02 	vpush	{d8}
 8011bd6:	b08a      	sub	sp, #40	; 0x28
 8011bd8:	eeb0 8a40 	vmov.f32	s16, s0
 8011bdc:	f000 f9a0 	bl	8011f20 <__ieee754_sqrtf>
 8011be0:	4b24      	ldr	r3, [pc, #144]	; (8011c74 <sqrtf+0xa4>)
 8011be2:	f993 4000 	ldrsb.w	r4, [r3]
 8011be6:	1c63      	adds	r3, r4, #1
 8011be8:	d009      	beq.n	8011bfe <sqrtf+0x2e>
 8011bea:	eeb4 8a48 	vcmp.f32	s16, s16
 8011bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf2:	d604      	bvs.n	8011bfe <sqrtf+0x2e>
 8011bf4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfc:	d403      	bmi.n	8011c06 <sqrtf+0x36>
 8011bfe:	b00a      	add	sp, #40	; 0x28
 8011c00:	ecbd 8b02 	vpop	{d8}
 8011c04:	bd10      	pop	{r4, pc}
 8011c06:	2301      	movs	r3, #1
 8011c08:	4a1b      	ldr	r2, [pc, #108]	; (8011c78 <sqrtf+0xa8>)
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	ee18 0a10 	vmov	r0, s16
 8011c10:	2300      	movs	r3, #0
 8011c12:	9201      	str	r2, [sp, #4]
 8011c14:	9308      	str	r3, [sp, #32]
 8011c16:	f7fa fbf7 	bl	800c408 <__aeabi_f2d>
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c24:	2300      	movs	r3, #0
 8011c26:	b1bc      	cbz	r4, 8011c58 <sqrtf+0x88>
 8011c28:	4610      	mov	r0, r2
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	f7fa fd6a 	bl	800c704 <__aeabi_ddiv>
 8011c30:	2c02      	cmp	r4, #2
 8011c32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c36:	d111      	bne.n	8011c5c <sqrtf+0x8c>
 8011c38:	f000 fe82 	bl	8012940 <__errno>
 8011c3c:	2321      	movs	r3, #33	; 0x21
 8011c3e:	6003      	str	r3, [r0, #0]
 8011c40:	9b08      	ldr	r3, [sp, #32]
 8011c42:	b98b      	cbnz	r3, 8011c68 <sqrtf+0x98>
 8011c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c48:	f7fa fe4a 	bl	800c8e0 <__aeabi_d2f>
 8011c4c:	ee00 0a10 	vmov	s0, r0
 8011c50:	b00a      	add	sp, #40	; 0x28
 8011c52:	ecbd 8b02 	vpop	{d8}
 8011c56:	bd10      	pop	{r4, pc}
 8011c58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c5c:	4668      	mov	r0, sp
 8011c5e:	f000 fd9f 	bl	80127a0 <matherr>
 8011c62:	2800      	cmp	r0, #0
 8011c64:	d1ec      	bne.n	8011c40 <sqrtf+0x70>
 8011c66:	e7e7      	b.n	8011c38 <sqrtf+0x68>
 8011c68:	f000 fe6a 	bl	8012940 <__errno>
 8011c6c:	9b08      	ldr	r3, [sp, #32]
 8011c6e:	6003      	str	r3, [r0, #0]
 8011c70:	e7e8      	b.n	8011c44 <sqrtf+0x74>
 8011c72:	bf00      	nop
 8011c74:	2000083d 	.word	0x2000083d
 8011c78:	08012d60 	.word	0x08012d60
 8011c7c:	00000000 	.word	0x00000000

08011c80 <__ieee754_rem_pio2f>:
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	ee10 3a10 	vmov	r3, s0
 8011c86:	4a96      	ldr	r2, [pc, #600]	; (8011ee0 <__ieee754_rem_pio2f+0x260>)
 8011c88:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011c8c:	4294      	cmp	r4, r2
 8011c8e:	b086      	sub	sp, #24
 8011c90:	dd5f      	ble.n	8011d52 <__ieee754_rem_pio2f+0xd2>
 8011c92:	4a94      	ldr	r2, [pc, #592]	; (8011ee4 <__ieee754_rem_pio2f+0x264>)
 8011c94:	4294      	cmp	r4, r2
 8011c96:	ee10 6a10 	vmov	r6, s0
 8011c9a:	dc1b      	bgt.n	8011cd4 <__ieee754_rem_pio2f+0x54>
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	eddf 7a92 	vldr	s15, [pc, #584]	; 8011ee8 <__ieee754_rem_pio2f+0x268>
 8011ca2:	4a92      	ldr	r2, [pc, #584]	; (8011eec <__ieee754_rem_pio2f+0x26c>)
 8011ca4:	f024 040f 	bic.w	r4, r4, #15
 8011ca8:	f340 80d5 	ble.w	8011e56 <__ieee754_rem_pio2f+0x1d6>
 8011cac:	4294      	cmp	r4, r2
 8011cae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011cb2:	d05e      	beq.n	8011d72 <__ieee754_rem_pio2f+0xf2>
 8011cb4:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8011ef0 <__ieee754_rem_pio2f+0x270>
 8011cb8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011cc2:	edc0 6a00 	vstr	s13, [r0]
 8011cc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cca:	edc0 7a01 	vstr	s15, [r0, #4]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	b006      	add	sp, #24
 8011cd2:	bd70      	pop	{r4, r5, r6, pc}
 8011cd4:	4a87      	ldr	r2, [pc, #540]	; (8011ef4 <__ieee754_rem_pio2f+0x274>)
 8011cd6:	4294      	cmp	r4, r2
 8011cd8:	4605      	mov	r5, r0
 8011cda:	dd5c      	ble.n	8011d96 <__ieee754_rem_pio2f+0x116>
 8011cdc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011ce0:	da3f      	bge.n	8011d62 <__ieee754_rem_pio2f+0xe2>
 8011ce2:	15e2      	asrs	r2, r4, #23
 8011ce4:	3a86      	subs	r2, #134	; 0x86
 8011ce6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8011cea:	ee07 3a10 	vmov	s14, r3
 8011cee:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8011cf2:	eddf 7a81 	vldr	s15, [pc, #516]	; 8011ef8 <__ieee754_rem_pio2f+0x278>
 8011cf6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011cfa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011cfe:	edcd 6a03 	vstr	s13, [sp, #12]
 8011d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011d06:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8011d0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011d0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d12:	edcd 6a04 	vstr	s13, [sp, #16]
 8011d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d22:	edcd 7a05 	vstr	s15, [sp, #20]
 8011d26:	f040 80b7 	bne.w	8011e98 <__ieee754_rem_pio2f+0x218>
 8011d2a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d32:	bf0c      	ite	eq
 8011d34:	2301      	moveq	r3, #1
 8011d36:	2302      	movne	r3, #2
 8011d38:	4970      	ldr	r1, [pc, #448]	; (8011efc <__ieee754_rem_pio2f+0x27c>)
 8011d3a:	9101      	str	r1, [sp, #4]
 8011d3c:	2102      	movs	r1, #2
 8011d3e:	9100      	str	r1, [sp, #0]
 8011d40:	a803      	add	r0, sp, #12
 8011d42:	4629      	mov	r1, r5
 8011d44:	f000 f9cc 	bl	80120e0 <__kernel_rem_pio2f>
 8011d48:	2e00      	cmp	r6, #0
 8011d4a:	f2c0 8097 	blt.w	8011e7c <__ieee754_rem_pio2f+0x1fc>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	e004      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011d52:	2200      	movs	r2, #0
 8011d54:	ed80 0a00 	vstr	s0, [r0]
 8011d58:	6042      	str	r2, [r0, #4]
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	b006      	add	sp, #24
 8011d60:	bd70      	pop	{r4, r5, r6, pc}
 8011d62:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011d66:	2300      	movs	r3, #0
 8011d68:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d6c:	edc0 7a00 	vstr	s15, [r0]
 8011d70:	e7f4      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011d72:	eddf 6a63 	vldr	s13, [pc, #396]	; 8011f00 <__ieee754_rem_pio2f+0x280>
 8011d76:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8011f04 <__ieee754_rem_pio2f+0x284>
 8011d7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d7e:	2301      	movs	r3, #1
 8011d80:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011d84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d88:	edc0 6a00 	vstr	s13, [r0]
 8011d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d90:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d94:	e7e2      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011d96:	f000 fd0b 	bl	80127b0 <fabsf>
 8011d9a:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8011f08 <__ieee754_rem_pio2f+0x288>
 8011d9e:	eddf 5a52 	vldr	s11, [pc, #328]	; 8011ee8 <__ieee754_rem_pio2f+0x268>
 8011da2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8011ef0 <__ieee754_rem_pio2f+0x270>
 8011da6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011daa:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011db2:	ee17 3a90 	vmov	r3, s15
 8011db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011dba:	2b1f      	cmp	r3, #31
 8011dbc:	eeb1 6a66 	vneg.f32	s12, s13
 8011dc0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011dc4:	ee66 7a87 	vmul.f32	s15, s13, s14
 8011dc8:	dc1d      	bgt.n	8011e06 <__ieee754_rem_pio2f+0x186>
 8011dca:	4950      	ldr	r1, [pc, #320]	; (8011f0c <__ieee754_rem_pio2f+0x28c>)
 8011dcc:	1e58      	subs	r0, r3, #1
 8011dce:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8011dd2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011dd6:	428a      	cmp	r2, r1
 8011dd8:	d015      	beq.n	8011e06 <__ieee754_rem_pio2f+0x186>
 8011dda:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011dde:	ed85 7a00 	vstr	s14, [r5]
 8011de2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011de6:	2e00      	cmp	r6, #0
 8011de8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011dec:	ed85 0a01 	vstr	s0, [r5, #4]
 8011df0:	dab4      	bge.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011df2:	eeb1 7a47 	vneg.f32	s14, s14
 8011df6:	eeb1 0a40 	vneg.f32	s0, s0
 8011dfa:	ed85 7a00 	vstr	s14, [r5]
 8011dfe:	ed85 0a01 	vstr	s0, [r5, #4]
 8011e02:	425b      	negs	r3, r3
 8011e04:	e7aa      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011e06:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011e0a:	15e4      	asrs	r4, r4, #23
 8011e0c:	ee17 2a10 	vmov	r2, s14
 8011e10:	f3c2 52c7 	ubfx	r2, r2, #23, #8
 8011e14:	1aa2      	subs	r2, r4, r2
 8011e16:	2a08      	cmp	r2, #8
 8011e18:	dde1      	ble.n	8011dde <__ieee754_rem_pio2f+0x15e>
 8011e1a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8011f00 <__ieee754_rem_pio2f+0x280>
 8011e1e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011f04 <__ieee754_rem_pio2f+0x284>
 8011e22:	eef0 5a40 	vmov.f32	s11, s0
 8011e26:	eee6 5a27 	vfma.f32	s11, s12, s15
 8011e2a:	ee30 0a65 	vsub.f32	s0, s0, s11
 8011e2e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8011e32:	eef0 7a40 	vmov.f32	s15, s0
 8011e36:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8011e3a:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8011e3e:	ee17 2a10 	vmov	r2, s14
 8011e42:	f3c2 52c7 	ubfx	r2, r2, #23, #8
 8011e46:	1aa4      	subs	r4, r4, r2
 8011e48:	2c19      	cmp	r4, #25
 8011e4a:	dc3a      	bgt.n	8011ec2 <__ieee754_rem_pio2f+0x242>
 8011e4c:	ed85 7a00 	vstr	s14, [r5]
 8011e50:	eeb0 0a65 	vmov.f32	s0, s11
 8011e54:	e7c5      	b.n	8011de2 <__ieee754_rem_pio2f+0x162>
 8011e56:	4294      	cmp	r4, r2
 8011e58:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011e5c:	d01e      	beq.n	8011e9c <__ieee754_rem_pio2f+0x21c>
 8011e5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8011ef0 <__ieee754_rem_pio2f+0x270>
 8011e62:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011e66:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e6e:	edc0 6a00 	vstr	s13, [r0]
 8011e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e76:	edc0 7a01 	vstr	s15, [r0, #4]
 8011e7a:	e76f      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011e7c:	ed95 7a00 	vldr	s14, [r5]
 8011e80:	edd5 7a01 	vldr	s15, [r5, #4]
 8011e84:	eeb1 7a47 	vneg.f32	s14, s14
 8011e88:	eef1 7a67 	vneg.f32	s15, s15
 8011e8c:	4243      	negs	r3, r0
 8011e8e:	ed85 7a00 	vstr	s14, [r5]
 8011e92:	edc5 7a01 	vstr	s15, [r5, #4]
 8011e96:	e761      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011e98:	2303      	movs	r3, #3
 8011e9a:	e74d      	b.n	8011d38 <__ieee754_rem_pio2f+0xb8>
 8011e9c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8011f00 <__ieee754_rem_pio2f+0x280>
 8011ea0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8011f04 <__ieee754_rem_pio2f+0x284>
 8011ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8011eac:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011eb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011eb4:	edc0 6a00 	vstr	s13, [r0]
 8011eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ebc:	edc0 7a01 	vstr	s15, [r0, #4]
 8011ec0:	e74c      	b.n	8011d5c <__ieee754_rem_pio2f+0xdc>
 8011ec2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011f10 <__ieee754_rem_pio2f+0x290>
 8011ec6:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8011f14 <__ieee754_rem_pio2f+0x294>
 8011eca:	eeb0 0a65 	vmov.f32	s0, s11
 8011ece:	eea6 0a07 	vfma.f32	s0, s12, s14
 8011ed2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8011ed6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011eda:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8011ede:	e77c      	b.n	8011dda <__ieee754_rem_pio2f+0x15a>
 8011ee0:	3f490fd8 	.word	0x3f490fd8
 8011ee4:	4016cbe3 	.word	0x4016cbe3
 8011ee8:	3fc90f80 	.word	0x3fc90f80
 8011eec:	3fc90fd0 	.word	0x3fc90fd0
 8011ef0:	37354443 	.word	0x37354443
 8011ef4:	43490f80 	.word	0x43490f80
 8011ef8:	43800000 	.word	0x43800000
 8011efc:	08012df0 	.word	0x08012df0
 8011f00:	37354400 	.word	0x37354400
 8011f04:	2e85a308 	.word	0x2e85a308
 8011f08:	3f22f984 	.word	0x3f22f984
 8011f0c:	08012d70 	.word	0x08012d70
 8011f10:	2e85a300 	.word	0x2e85a300
 8011f14:	248d3132 	.word	0x248d3132
	...

08011f20 <__ieee754_sqrtf>:
 8011f20:	ee10 3a10 	vmov	r3, s0
 8011f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011f28:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011f2c:	b470      	push	{r4, r5, r6}
 8011f2e:	d230      	bcs.n	8011f92 <__ieee754_sqrtf+0x72>
 8011f30:	b36a      	cbz	r2, 8011f8e <__ieee754_sqrtf+0x6e>
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	db3d      	blt.n	8011fb2 <__ieee754_sqrtf+0x92>
 8011f36:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8011f3a:	ea4f 50e3 	mov.w	r0, r3, asr #23
 8011f3e:	d32c      	bcc.n	8011f9a <__ieee754_sqrtf+0x7a>
 8011f40:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 8011f44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011f48:	07d1      	lsls	r1, r2, #31
 8011f4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011f4e:	bf48      	it	mi
 8011f50:	005b      	lslmi	r3, r3, #1
 8011f52:	2400      	movs	r4, #0
 8011f54:	1056      	asrs	r6, r2, #1
 8011f56:	005b      	lsls	r3, r3, #1
 8011f58:	4625      	mov	r5, r4
 8011f5a:	2119      	movs	r1, #25
 8011f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f60:	18a8      	adds	r0, r5, r2
 8011f62:	4298      	cmp	r0, r3
 8011f64:	dc02      	bgt.n	8011f6c <__ieee754_sqrtf+0x4c>
 8011f66:	1a1b      	subs	r3, r3, r0
 8011f68:	1885      	adds	r5, r0, r2
 8011f6a:	4414      	add	r4, r2
 8011f6c:	3901      	subs	r1, #1
 8011f6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011f72:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011f76:	d1f3      	bne.n	8011f60 <__ieee754_sqrtf+0x40>
 8011f78:	b113      	cbz	r3, 8011f80 <__ieee754_sqrtf+0x60>
 8011f7a:	f004 0301 	and.w	r3, r4, #1
 8011f7e:	441c      	add	r4, r3
 8011f80:	1064      	asrs	r4, r4, #1
 8011f82:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8011f86:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8011f8a:	ee00 3a10 	vmov	s0, r3
 8011f8e:	bc70      	pop	{r4, r5, r6}
 8011f90:	4770      	bx	lr
 8011f92:	eea0 0a00 	vfma.f32	s0, s0, s0
 8011f96:	bc70      	pop	{r4, r5, r6}
 8011f98:	4770      	bx	lr
 8011f9a:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 8011f9e:	d001      	beq.n	8011fa4 <__ieee754_sqrtf+0x84>
 8011fa0:	e00c      	b.n	8011fbc <__ieee754_sqrtf+0x9c>
 8011fa2:	460a      	mov	r2, r1
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	021c      	lsls	r4, r3, #8
 8011fa8:	f102 0101 	add.w	r1, r2, #1
 8011fac:	d5f9      	bpl.n	8011fa2 <__ieee754_sqrtf+0x82>
 8011fae:	1a80      	subs	r0, r0, r2
 8011fb0:	e7c6      	b.n	8011f40 <__ieee754_sqrtf+0x20>
 8011fb2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011fb6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011fba:	e7e8      	b.n	8011f8e <__ieee754_sqrtf+0x6e>
 8011fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8011fc0:	e7f5      	b.n	8011fae <__ieee754_sqrtf+0x8e>
 8011fc2:	bf00      	nop
	...

08011fd0 <__kernel_cosf>:
 8011fd0:	ee10 3a10 	vmov	r3, s0
 8011fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011fd8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011fdc:	da2c      	bge.n	8012038 <__kernel_cosf+0x68>
 8011fde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011fe2:	ee17 3a90 	vmov	r3, s15
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d060      	beq.n	80120ac <__kernel_cosf+0xdc>
 8011fea:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011fee:	eddf 4a31 	vldr	s9, [pc, #196]	; 80120b4 <__kernel_cosf+0xe4>
 8011ff2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80120b8 <__kernel_cosf+0xe8>
 8011ff6:	eddf 5a31 	vldr	s11, [pc, #196]	; 80120bc <__kernel_cosf+0xec>
 8011ffa:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80120c0 <__kernel_cosf+0xf0>
 8011ffe:	eddf 7a31 	vldr	s15, [pc, #196]	; 80120c4 <__kernel_cosf+0xf4>
 8012002:	eddf 6a31 	vldr	s13, [pc, #196]	; 80120c8 <__kernel_cosf+0xf8>
 8012006:	eea7 5a24 	vfma.f32	s10, s14, s9
 801200a:	eee7 5a05 	vfma.f32	s11, s14, s10
 801200e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012012:	eee7 7a06 	vfma.f32	s15, s14, s12
 8012016:	eee7 6a27 	vfma.f32	s13, s14, s15
 801201a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801201e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012022:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012026:	eee7 0a26 	vfma.f32	s1, s14, s13
 801202a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801202e:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8012032:	ee37 0ae0 	vsub.f32	s0, s15, s1
 8012036:	4770      	bx	lr
 8012038:	ee20 7a00 	vmul.f32	s14, s0, s0
 801203c:	eddf 4a1d 	vldr	s9, [pc, #116]	; 80120b4 <__kernel_cosf+0xe4>
 8012040:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80120b8 <__kernel_cosf+0xe8>
 8012044:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80120bc <__kernel_cosf+0xec>
 8012048:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80120c0 <__kernel_cosf+0xf0>
 801204c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80120c4 <__kernel_cosf+0xf4>
 8012050:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80120c8 <__kernel_cosf+0xf8>
 8012054:	4a1d      	ldr	r2, [pc, #116]	; (80120cc <__kernel_cosf+0xfc>)
 8012056:	eea7 5a24 	vfma.f32	s10, s14, s9
 801205a:	4293      	cmp	r3, r2
 801205c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012060:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012064:	eee7 7a06 	vfma.f32	s15, s14, s12
 8012068:	eee7 6a27 	vfma.f32	s13, s14, s15
 801206c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012070:	ddd5      	ble.n	801201e <__kernel_cosf+0x4e>
 8012072:	4a17      	ldr	r2, [pc, #92]	; (80120d0 <__kernel_cosf+0x100>)
 8012074:	4293      	cmp	r3, r2
 8012076:	dc14      	bgt.n	80120a2 <__kernel_cosf+0xd2>
 8012078:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801207c:	ee07 3a90 	vmov	s15, r3
 8012080:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012084:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012088:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801208c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012090:	eee7 0a26 	vfma.f32	s1, s14, s13
 8012094:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012098:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801209c:	ee36 0a67 	vsub.f32	s0, s12, s15
 80120a0:	4770      	bx	lr
 80120a2:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80120a6:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 80120aa:	e7ed      	b.n	8012088 <__kernel_cosf+0xb8>
 80120ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	ad47d74e 	.word	0xad47d74e
 80120b8:	310f74f6 	.word	0x310f74f6
 80120bc:	b493f27c 	.word	0xb493f27c
 80120c0:	37d00d01 	.word	0x37d00d01
 80120c4:	bab60b61 	.word	0xbab60b61
 80120c8:	3d2aaaab 	.word	0x3d2aaaab
 80120cc:	3e999999 	.word	0x3e999999
 80120d0:	3f480000 	.word	0x3f480000
	...

080120e0 <__kernel_rem_pio2f>:
 80120e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e4:	ed2d 8b04 	vpush	{d8-d9}
 80120e8:	b0d7      	sub	sp, #348	; 0x15c
 80120ea:	1e5f      	subs	r7, r3, #1
 80120ec:	4cda      	ldr	r4, [pc, #872]	; (8012458 <__kernel_rem_pio2f+0x378>)
 80120ee:	9d64      	ldr	r5, [sp, #400]	; 0x190
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	1ed3      	subs	r3, r2, #3
 80120f4:	bf48      	it	mi
 80120f6:	1d13      	addmi	r3, r2, #4
 80120f8:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 80120fc:	10db      	asrs	r3, r3, #3
 80120fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012102:	f103 0a01 	add.w	sl, r3, #1
 8012106:	468b      	mov	fp, r1
 8012108:	19f1      	adds	r1, r6, r7
 801210a:	9302      	str	r3, [sp, #8]
 801210c:	4681      	mov	r9, r0
 801210e:	eba2 0aca 	sub.w	sl, r2, sl, lsl #3
 8012112:	eba3 0307 	sub.w	r3, r3, r7
 8012116:	d414      	bmi.n	8012142 <__kernel_rem_pio2f+0x62>
 8012118:	4419      	add	r1, r3
 801211a:	9865      	ldr	r0, [sp, #404]	; 0x194
 801211c:	3101      	adds	r1, #1
 801211e:	aa1a      	add	r2, sp, #104	; 0x68
 8012120:	2b00      	cmp	r3, #0
 8012122:	bfaa      	itet	ge
 8012124:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8012128:	eddf 7ad0 	vldrlt	s15, [pc, #832]	; 801246c <__kernel_rem_pio2f+0x38c>
 801212c:	ee07 4a90 	vmovge	s15, r4
 8012130:	f103 0301 	add.w	r3, r3, #1
 8012134:	bfa8      	it	ge
 8012136:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 801213a:	428b      	cmp	r3, r1
 801213c:	ece2 7a01 	vstmia	r2!, {s15}
 8012140:	d1ee      	bne.n	8012120 <__kernel_rem_pio2f+0x40>
 8012142:	2e00      	cmp	r6, #0
 8012144:	f2c0 82d6 	blt.w	80126f4 <__kernel_rem_pio2f+0x614>
 8012148:	9b01      	ldr	r3, [sp, #4]
 801214a:	ad42      	add	r5, sp, #264	; 0x108
 801214c:	009c      	lsls	r4, r3, #2
 801214e:	f106 0e01 	add.w	lr, r6, #1
 8012152:	ab1a      	add	r3, sp, #104	; 0x68
 8012154:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8012158:	1918      	adds	r0, r3, r4
 801215a:	eb09 0104 	add.w	r1, r9, r4
 801215e:	2f00      	cmp	r7, #0
 8012160:	f2c0 81c0 	blt.w	80124e4 <__kernel_rem_pio2f+0x404>
 8012164:	eddf 7ac1 	vldr	s15, [pc, #772]	; 801246c <__kernel_rem_pio2f+0x38c>
 8012168:	464b      	mov	r3, r9
 801216a:	4602      	mov	r2, r0
 801216c:	ecf3 6a01 	vldmia	r3!, {s13}
 8012170:	ed32 7a01 	vldmdb	r2!, {s14}
 8012174:	428b      	cmp	r3, r1
 8012176:	eee6 7a87 	vfma.f32	s15, s13, s14
 801217a:	d1f7      	bne.n	801216c <__kernel_rem_pio2f+0x8c>
 801217c:	ece5 7a01 	vstmia	r5!, {s15}
 8012180:	4575      	cmp	r5, lr
 8012182:	f100 0004 	add.w	r0, r0, #4
 8012186:	d1ea      	bne.n	801215e <__kernel_rem_pio2f+0x7e>
 8012188:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 801218c:	3b02      	subs	r3, #2
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	aa06      	add	r2, sp, #24
 8012192:	f103 0804 	add.w	r8, r3, #4
 8012196:	eddf 8ab1 	vldr	s17, [pc, #708]	; 801245c <__kernel_rem_pio2f+0x37c>
 801219a:	ed9f 8ab1 	vldr	s16, [pc, #708]	; 8012460 <__kernel_rem_pio2f+0x380>
 801219e:	f8cd b010 	str.w	fp, [sp, #16]
 80121a2:	4413      	add	r3, r2
 80121a4:	444c      	add	r4, r9
 80121a6:	4490      	add	r8, r2
 80121a8:	9303      	str	r3, [sp, #12]
 80121aa:	4635      	mov	r5, r6
 80121ac:	ab56      	add	r3, sp, #344	; 0x158
 80121ae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80121b2:	2d00      	cmp	r5, #0
 80121b4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80121b8:	dd19      	ble.n	80121ee <__kernel_rem_pio2f+0x10e>
 80121ba:	a942      	add	r1, sp, #264	; 0x108
 80121bc:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 80121c0:	aa05      	add	r2, sp, #20
 80121c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80121c6:	eeb0 7a40 	vmov.f32	s14, s0
 80121ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121ce:	ed73 6a01 	vldmdb	r3!, {s13}
 80121d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121d6:	428b      	cmp	r3, r1
 80121d8:	eea7 7ac8 	vfms.f32	s14, s15, s16
 80121dc:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80121e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80121e4:	ee17 0a10 	vmov	r0, s14
 80121e8:	f842 0f04 	str.w	r0, [r2, #4]!
 80121ec:	d1e9      	bne.n	80121c2 <__kernel_rem_pio2f+0xe2>
 80121ee:	4650      	mov	r0, sl
 80121f0:	f000 fb2e 	bl	8012850 <scalbnf>
 80121f4:	eeb0 9a40 	vmov.f32	s18, s0
 80121f8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80121fc:	ee29 0a00 	vmul.f32	s0, s18, s0
 8012200:	f000 fade 	bl	80127c0 <floorf>
 8012204:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012208:	eea0 9a67 	vfms.f32	s18, s0, s15
 801220c:	f1ba 0f00 	cmp.w	sl, #0
 8012210:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8012214:	ee17 ba90 	vmov	fp, s15
 8012218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801221c:	ee39 9a67 	vsub.f32	s18, s18, s15
 8012220:	f340 8145 	ble.w	80124ae <__kernel_rem_pio2f+0x3ce>
 8012224:	f105 3eff 	add.w	lr, r5, #4294967295
 8012228:	ab06      	add	r3, sp, #24
 801222a:	f1ca 0208 	rsb	r2, sl, #8
 801222e:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8012232:	fa43 f002 	asr.w	r0, r3, r2
 8012236:	fa00 f202 	lsl.w	r2, r0, r2
 801223a:	a906      	add	r1, sp, #24
 801223c:	1a9b      	subs	r3, r3, r2
 801223e:	f1ca 0207 	rsb	r2, sl, #7
 8012242:	f841 302e 	str.w	r3, [r1, lr, lsl #2]
 8012246:	4483      	add	fp, r0
 8012248:	fa43 f102 	asr.w	r1, r3, r2
 801224c:	2900      	cmp	r1, #0
 801224e:	dd37      	ble.n	80122c0 <__kernel_rem_pio2f+0x1e0>
 8012250:	2d00      	cmp	r5, #0
 8012252:	f10b 0b01 	add.w	fp, fp, #1
 8012256:	f340 8228 	ble.w	80126aa <__kernel_rem_pio2f+0x5ca>
 801225a:	2200      	movs	r2, #0
 801225c:	4610      	mov	r0, r2
 801225e:	f10d 0e14 	add.w	lr, sp, #20
 8012262:	468c      	mov	ip, r1
 8012264:	e008      	b.n	8012278 <__kernel_rem_pio2f+0x198>
 8012266:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801226a:	b113      	cbz	r3, 8012272 <__kernel_rem_pio2f+0x192>
 801226c:	f8ce 1000 	str.w	r1, [lr]
 8012270:	2001      	movs	r0, #1
 8012272:	3201      	adds	r2, #1
 8012274:	4295      	cmp	r5, r2
 8012276:	dd0c      	ble.n	8012292 <__kernel_rem_pio2f+0x1b2>
 8012278:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 801227c:	2800      	cmp	r0, #0
 801227e:	d0f2      	beq.n	8012266 <__kernel_rem_pio2f+0x186>
 8012280:	3201      	adds	r2, #1
 8012282:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012286:	4295      	cmp	r5, r2
 8012288:	f8ce 3000 	str.w	r3, [lr]
 801228c:	f04f 0001 	mov.w	r0, #1
 8012290:	dcf2      	bgt.n	8012278 <__kernel_rem_pio2f+0x198>
 8012292:	4661      	mov	r1, ip
 8012294:	f1ba 0f00 	cmp.w	sl, #0
 8012298:	dd10      	ble.n	80122bc <__kernel_rem_pio2f+0x1dc>
 801229a:	f1ba 0f01 	cmp.w	sl, #1
 801229e:	f000 810d 	beq.w	80124bc <__kernel_rem_pio2f+0x3dc>
 80122a2:	f1ba 0f02 	cmp.w	sl, #2
 80122a6:	d109      	bne.n	80122bc <__kernel_rem_pio2f+0x1dc>
 80122a8:	1e6a      	subs	r2, r5, #1
 80122aa:	ab06      	add	r3, sp, #24
 80122ac:	f10d 0e18 	add.w	lr, sp, #24
 80122b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122b8:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 80122bc:	2902      	cmp	r1, #2
 80122be:	d05c      	beq.n	801237a <__kernel_rem_pio2f+0x29a>
 80122c0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80122c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c8:	d169      	bne.n	801239e <__kernel_rem_pio2f+0x2be>
 80122ca:	f105 3eff 	add.w	lr, r5, #4294967295
 80122ce:	4576      	cmp	r6, lr
 80122d0:	dc0f      	bgt.n	80122f2 <__kernel_rem_pio2f+0x212>
 80122d2:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 80122d6:	3a01      	subs	r2, #1
 80122d8:	ab06      	add	r3, sp, #24
 80122da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80122de:	2000      	movs	r0, #0
 80122e0:	f852 3904 	ldr.w	r3, [r2], #-4
 80122e4:	4542      	cmp	r2, r8
 80122e6:	ea40 0003 	orr.w	r0, r0, r3
 80122ea:	d1f9      	bne.n	80122e0 <__kernel_rem_pio2f+0x200>
 80122ec:	2800      	cmp	r0, #0
 80122ee:	f040 8110 	bne.w	8012512 <__kernel_rem_pio2f+0x432>
 80122f2:	1e73      	subs	r3, r6, #1
 80122f4:	aa06      	add	r2, sp, #24
 80122f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	f040 81d2 	bne.w	80126a4 <__kernel_rem_pio2f+0x5c4>
 8012300:	9b03      	ldr	r3, [sp, #12]
 8012302:	f04f 0e01 	mov.w	lr, #1
 8012306:	f853 2904 	ldr.w	r2, [r3], #-4
 801230a:	f10e 0e01 	add.w	lr, lr, #1
 801230e:	2a00      	cmp	r2, #0
 8012310:	d0f9      	beq.n	8012306 <__kernel_rem_pio2f+0x226>
 8012312:	44ae      	add	lr, r5
 8012314:	1c6b      	adds	r3, r5, #1
 8012316:	4573      	cmp	r3, lr
 8012318:	dc2d      	bgt.n	8012376 <__kernel_rem_pio2f+0x296>
 801231a:	9a02      	ldr	r2, [sp, #8]
 801231c:	1898      	adds	r0, r3, r2
 801231e:	9a01      	ldr	r2, [sp, #4]
 8012320:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8012324:	1951      	adds	r1, r2, r5
 8012326:	eb0e 0c02 	add.w	ip, lr, r2
 801232a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801232c:	3801      	subs	r0, #1
 801232e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8012332:	aa1a      	add	r2, sp, #104	; 0x68
 8012334:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012338:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801233c:	aa42      	add	r2, sp, #264	; 0x108
 801233e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012342:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8012346:	ee07 3a90 	vmov	s15, r3
 801234a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801234e:	2f00      	cmp	r7, #0
 8012350:	ece1 7a01 	vstmia	r1!, {s15}
 8012354:	eddf 7a45 	vldr	s15, [pc, #276]	; 801246c <__kernel_rem_pio2f+0x38c>
 8012358:	db09      	blt.n	801236e <__kernel_rem_pio2f+0x28e>
 801235a:	464b      	mov	r3, r9
 801235c:	460a      	mov	r2, r1
 801235e:	ecf3 6a01 	vldmia	r3!, {s13}
 8012362:	ed32 7a01 	vldmdb	r2!, {s14}
 8012366:	42a3      	cmp	r3, r4
 8012368:	eee6 7a87 	vfma.f32	s15, s13, s14
 801236c:	d1f7      	bne.n	801235e <__kernel_rem_pio2f+0x27e>
 801236e:	4561      	cmp	r1, ip
 8012370:	ece5 7a01 	vstmia	r5!, {s15}
 8012374:	d1e5      	bne.n	8012342 <__kernel_rem_pio2f+0x262>
 8012376:	4675      	mov	r5, lr
 8012378:	e718      	b.n	80121ac <__kernel_rem_pio2f+0xcc>
 801237a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801237e:	ee30 9a49 	vsub.f32	s18, s0, s18
 8012382:	2800      	cmp	r0, #0
 8012384:	d09c      	beq.n	80122c0 <__kernel_rem_pio2f+0x1e0>
 8012386:	4650      	mov	r0, sl
 8012388:	9105      	str	r1, [sp, #20]
 801238a:	f000 fa61 	bl	8012850 <scalbnf>
 801238e:	ee39 9a40 	vsub.f32	s18, s18, s0
 8012392:	9905      	ldr	r1, [sp, #20]
 8012394:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239c:	d095      	beq.n	80122ca <__kernel_rem_pio2f+0x1ea>
 801239e:	eeb0 0a49 	vmov.f32	s0, s18
 80123a2:	f1ca 0000 	rsb	r0, sl, #0
 80123a6:	ee09 ba90 	vmov	s19, fp
 80123aa:	4688      	mov	r8, r1
 80123ac:	f8dd b010 	ldr.w	fp, [sp, #16]
 80123b0:	f000 fa4e 	bl	8012850 <scalbnf>
 80123b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8012460 <__kernel_rem_pio2f+0x380>
 80123b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80123bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c0:	f2c0 817e 	blt.w	80126c0 <__kernel_rem_pio2f+0x5e0>
 80123c4:	eddf 7a25 	vldr	s15, [pc, #148]	; 801245c <__kernel_rem_pio2f+0x37c>
 80123c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80123cc:	a906      	add	r1, sp, #24
 80123ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123d2:	1c6b      	adds	r3, r5, #1
 80123d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123d8:	f10a 0a08 	add.w	sl, sl, #8
 80123dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80123e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80123e8:	ee10 2a10 	vmov	r2, s0
 80123ec:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
 80123f0:	ee17 2a90 	vmov	r2, s15
 80123f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80123f8:	4650      	mov	r0, sl
 80123fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	f000 fa26 	bl	8012850 <scalbnf>
 8012404:	9b01      	ldr	r3, [sp, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	f2c0 8166 	blt.w	80126d8 <__kernel_rem_pio2f+0x5f8>
 801240c:	009f      	lsls	r7, r3, #2
 801240e:	ac42      	add	r4, sp, #264	; 0x108
 8012410:	aa06      	add	r2, sp, #24
 8012412:	1d38      	adds	r0, r7, #4
 8012414:	eb04 0e07 	add.w	lr, r4, r7
 8012418:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801245c <__kernel_rem_pio2f+0x37c>
 801241c:	4410      	add	r0, r2
 801241e:	f10e 0204 	add.w	r2, lr, #4
 8012422:	ed70 7a01 	vldmdb	r0!, {s15}
 8012426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801242a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801242e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012432:	ed62 7a01 	vstmdb	r2!, {s15}
 8012436:	42a2      	cmp	r2, r4
 8012438:	d1f3      	bne.n	8012422 <__kernel_rem_pio2f+0x342>
 801243a:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 801243e:	2500      	movs	r5, #0
 8012440:	2e00      	cmp	r6, #0
 8012442:	f2c0 8121 	blt.w	8012688 <__kernel_rem_pio2f+0x5a8>
 8012446:	4807      	ldr	r0, [pc, #28]	; (8012464 <__kernel_rem_pio2f+0x384>)
 8012448:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8012468 <__kernel_rem_pio2f+0x388>
 801244c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801246c <__kernel_rem_pio2f+0x38c>
 8012450:	4671      	mov	r1, lr
 8012452:	2200      	movs	r2, #0
 8012454:	e011      	b.n	801247a <__kernel_rem_pio2f+0x39a>
 8012456:	bf00      	nop
 8012458:	08013110 	.word	0x08013110
 801245c:	3b800000 	.word	0x3b800000
 8012460:	43800000 	.word	0x43800000
 8012464:	08013120 	.word	0x08013120
 8012468:	3fc90000 	.word	0x3fc90000
 801246c:	00000000 	.word	0x00000000
 8012470:	4295      	cmp	r5, r2
 8012472:	db09      	blt.n	8012488 <__kernel_rem_pio2f+0x3a8>
 8012474:	3004      	adds	r0, #4
 8012476:	ed90 7a00 	vldr	s14, [r0]
 801247a:	ecf1 6a01 	vldmia	r1!, {s13}
 801247e:	3201      	adds	r2, #1
 8012480:	4296      	cmp	r6, r2
 8012482:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012486:	daf3      	bge.n	8012470 <__kernel_rem_pio2f+0x390>
 8012488:	f1ae 0e04 	sub.w	lr, lr, #4
 801248c:	aa56      	add	r2, sp, #344	; 0x158
 801248e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012492:	45f4      	cmp	ip, lr
 8012494:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8012498:	f105 0501 	add.w	r5, r5, #1
 801249c:	d1d0      	bne.n	8012440 <__kernel_rem_pio2f+0x360>
 801249e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80124a0:	2a03      	cmp	r2, #3
 80124a2:	f200 80ae 	bhi.w	8012602 <__kernel_rem_pio2f+0x522>
 80124a6:	e8df f002 	tbb	[pc, r2]
 80124aa:	b5dc      	.short	0xb5dc
 80124ac:	50b5      	.short	0x50b5
 80124ae:	d110      	bne.n	80124d2 <__kernel_rem_pio2f+0x3f2>
 80124b0:	1e6b      	subs	r3, r5, #1
 80124b2:	aa06      	add	r2, sp, #24
 80124b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80124b8:	1209      	asrs	r1, r1, #8
 80124ba:	e6c7      	b.n	801224c <__kernel_rem_pio2f+0x16c>
 80124bc:	1e6a      	subs	r2, r5, #1
 80124be:	ab06      	add	r3, sp, #24
 80124c0:	f10d 0e18 	add.w	lr, sp, #24
 80124c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124cc:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 80124d0:	e6f4      	b.n	80122bc <__kernel_rem_pio2f+0x1dc>
 80124d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80124d6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80124da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124de:	da0b      	bge.n	80124f8 <__kernel_rem_pio2f+0x418>
 80124e0:	2100      	movs	r1, #0
 80124e2:	e6ed      	b.n	80122c0 <__kernel_rem_pio2f+0x1e0>
 80124e4:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 801246c <__kernel_rem_pio2f+0x38c>
 80124e8:	ece5 7a01 	vstmia	r5!, {s15}
 80124ec:	4575      	cmp	r5, lr
 80124ee:	f100 0004 	add.w	r0, r0, #4
 80124f2:	f47f ae34 	bne.w	801215e <__kernel_rem_pio2f+0x7e>
 80124f6:	e647      	b.n	8012188 <__kernel_rem_pio2f+0xa8>
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	f10b 0b01 	add.w	fp, fp, #1
 80124fe:	bfc8      	it	gt
 8012500:	2102      	movgt	r1, #2
 8012502:	f73f aeaa 	bgt.w	801225a <__kernel_rem_pio2f+0x17a>
 8012506:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801250a:	ee37 9ac9 	vsub.f32	s18, s15, s18
 801250e:	2102      	movs	r1, #2
 8012510:	e6d6      	b.n	80122c0 <__kernel_rem_pio2f+0x1e0>
 8012512:	aa06      	add	r2, sp, #24
 8012514:	ee09 ba90 	vmov	s19, fp
 8012518:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801251c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8012520:	4673      	mov	r3, lr
 8012522:	4688      	mov	r8, r1
 8012524:	f1aa 0a08 	sub.w	sl, sl, #8
 8012528:	2a00      	cmp	r2, #0
 801252a:	f47f af65 	bne.w	80123f8 <__kernel_rem_pio2f+0x318>
 801252e:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
 8012532:	3a01      	subs	r2, #1
 8012534:	a906      	add	r1, sp, #24
 8012536:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801253a:	f852 1904 	ldr.w	r1, [r2], #-4
 801253e:	3b01      	subs	r3, #1
 8012540:	f1aa 0a08 	sub.w	sl, sl, #8
 8012544:	2900      	cmp	r1, #0
 8012546:	d0f8      	beq.n	801253a <__kernel_rem_pio2f+0x45a>
 8012548:	e756      	b.n	80123f8 <__kernel_rem_pio2f+0x318>
 801254a:	2b00      	cmp	r3, #0
 801254c:	f340 80c1 	ble.w	80126d2 <__kernel_rem_pio2f+0x5f2>
 8012550:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8012554:	3a01      	subs	r2, #1
 8012556:	0090      	lsls	r0, r2, #2
 8012558:	a956      	add	r1, sp, #344	; 0x158
 801255a:	19cd      	adds	r5, r1, r7
 801255c:	1d04      	adds	r4, r0, #4
 801255e:	a92e      	add	r1, sp, #184	; 0xb8
 8012560:	3008      	adds	r0, #8
 8012562:	ed15 7a28 	vldr	s14, [r5, #-160]	; 0xffffff60
 8012566:	440c      	add	r4, r1
 8012568:	4408      	add	r0, r1
 801256a:	ad2f      	add	r5, sp, #188	; 0xbc
 801256c:	ed74 7a01 	vldmdb	r4!, {s15}
 8012570:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012574:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012578:	ee77 7a87 	vadd.f32	s15, s15, s14
 801257c:	eeb0 7a66 	vmov.f32	s14, s13
 8012580:	ed60 7a01 	vstmdb	r0!, {s15}
 8012584:	42a8      	cmp	r0, r5
 8012586:	edc4 6a00 	vstr	s13, [r4]
 801258a:	d1ef      	bne.n	801256c <__kernel_rem_pio2f+0x48c>
 801258c:	2b01      	cmp	r3, #1
 801258e:	f340 80a0 	ble.w	80126d2 <__kernel_rem_pio2f+0x5f2>
 8012592:	0092      	lsls	r2, r2, #2
 8012594:	ab56      	add	r3, sp, #344	; 0x158
 8012596:	441f      	add	r7, r3
 8012598:	f102 0008 	add.w	r0, r2, #8
 801259c:	ab2e      	add	r3, sp, #184	; 0xb8
 801259e:	4418      	add	r0, r3
 80125a0:	3204      	adds	r2, #4
 80125a2:	ed17 7a28 	vldr	s14, [r7, #-160]	; 0xffffff60
 80125a6:	4413      	add	r3, r2
 80125a8:	ac30      	add	r4, sp, #192	; 0xc0
 80125aa:	4602      	mov	r2, r0
 80125ac:	ed73 7a01 	vldmdb	r3!, {s15}
 80125b0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80125b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80125b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125bc:	eeb0 7a66 	vmov.f32	s14, s13
 80125c0:	ed62 7a01 	vstmdb	r2!, {s15}
 80125c4:	4294      	cmp	r4, r2
 80125c6:	edc3 6a00 	vstr	s13, [r3]
 80125ca:	d1ef      	bne.n	80125ac <__kernel_rem_pio2f+0x4cc>
 80125cc:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 801246c <__kernel_rem_pio2f+0x38c>
 80125d0:	ed30 7a01 	vldmdb	r0!, {s14}
 80125d4:	4284      	cmp	r4, r0
 80125d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125da:	d1f9      	bne.n	80125d0 <__kernel_rem_pio2f+0x4f0>
 80125dc:	4643      	mov	r3, r8
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d065      	beq.n	80126ae <__kernel_rem_pio2f+0x5ce>
 80125e2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80125e6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80125ea:	eef1 7a67 	vneg.f32	s15, s15
 80125ee:	eef1 6a66 	vneg.f32	s13, s13
 80125f2:	eeb1 7a47 	vneg.f32	s14, s14
 80125f6:	edcb 7a02 	vstr	s15, [fp, #8]
 80125fa:	edcb 6a00 	vstr	s13, [fp]
 80125fe:	ed8b 7a01 	vstr	s14, [fp, #4]
 8012602:	ee19 3a90 	vmov	r3, s19
 8012606:	f003 0007 	and.w	r0, r3, #7
 801260a:	b057      	add	sp, #348	; 0x15c
 801260c:	ecbd 8b04 	vpop	{d8-d9}
 8012610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012614:	1d3a      	adds	r2, r7, #4
 8012616:	a82e      	add	r0, sp, #184	; 0xb8
 8012618:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 801246c <__kernel_rem_pio2f+0x38c>
 801261c:	4402      	add	r2, r0
 801261e:	ed32 7a01 	vldmdb	r2!, {s14}
 8012622:	4282      	cmp	r2, r0
 8012624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012628:	d1f9      	bne.n	801261e <__kernel_rem_pio2f+0x53e>
 801262a:	4642      	mov	r2, r8
 801262c:	b37a      	cbz	r2, 801268e <__kernel_rem_pio2f+0x5ae>
 801262e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8012632:	eeb1 7a67 	vneg.f32	s14, s15
 8012636:	2b00      	cmp	r3, #0
 8012638:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801263c:	ed8b 7a00 	vstr	s14, [fp]
 8012640:	dd0a      	ble.n	8012658 <__kernel_rem_pio2f+0x578>
 8012642:	a82f      	add	r0, sp, #188	; 0xbc
 8012644:	2201      	movs	r2, #1
 8012646:	ecb0 7a01 	vldmia	r0!, {s14}
 801264a:	3201      	adds	r2, #1
 801264c:	4293      	cmp	r3, r2
 801264e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012652:	daf8      	bge.n	8012646 <__kernel_rem_pio2f+0x566>
 8012654:	4643      	mov	r3, r8
 8012656:	b10b      	cbz	r3, 801265c <__kernel_rem_pio2f+0x57c>
 8012658:	eef1 7a67 	vneg.f32	s15, s15
 801265c:	edcb 7a01 	vstr	s15, [fp, #4]
 8012660:	e7cf      	b.n	8012602 <__kernel_rem_pio2f+0x522>
 8012662:	aa56      	add	r2, sp, #344	; 0x158
 8012664:	443a      	add	r2, r7
 8012666:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 801246c <__kernel_rem_pio2f+0x38c>
 801266a:	3a9c      	subs	r2, #156	; 0x9c
 801266c:	ed32 7a01 	vldmdb	r2!, {s14}
 8012670:	3b01      	subs	r3, #1
 8012672:	1c59      	adds	r1, r3, #1
 8012674:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012678:	d1f8      	bne.n	801266c <__kernel_rem_pio2f+0x58c>
 801267a:	4643      	mov	r3, r8
 801267c:	b10b      	cbz	r3, 8012682 <__kernel_rem_pio2f+0x5a2>
 801267e:	eef1 7a67 	vneg.f32	s15, s15
 8012682:	edcb 7a00 	vstr	s15, [fp]
 8012686:	e7bc      	b.n	8012602 <__kernel_rem_pio2f+0x522>
 8012688:	ed5f 7a88 	vldr	s15, [pc, #-544]	; 801246c <__kernel_rem_pio2f+0x38c>
 801268c:	e6fc      	b.n	8012488 <__kernel_rem_pio2f+0x3a8>
 801268e:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8012692:	edcb 7a00 	vstr	s15, [fp]
 8012696:	2b00      	cmp	r3, #0
 8012698:	ee77 7a67 	vsub.f32	s15, s14, s15
 801269c:	dcd1      	bgt.n	8012642 <__kernel_rem_pio2f+0x562>
 801269e:	edcb 7a01 	vstr	s15, [fp, #4]
 80126a2:	e7ae      	b.n	8012602 <__kernel_rem_pio2f+0x522>
 80126a4:	f04f 0e01 	mov.w	lr, #1
 80126a8:	e633      	b.n	8012312 <__kernel_rem_pio2f+0x232>
 80126aa:	2000      	movs	r0, #0
 80126ac:	e5f2      	b.n	8012294 <__kernel_rem_pio2f+0x1b4>
 80126ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80126b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80126b2:	edcb 7a02 	vstr	s15, [fp, #8]
 80126b6:	f8cb 2000 	str.w	r2, [fp]
 80126ba:	f8cb 3004 	str.w	r3, [fp, #4]
 80126be:	e7a0      	b.n	8012602 <__kernel_rem_pio2f+0x522>
 80126c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80126c4:	a906      	add	r1, sp, #24
 80126c6:	ee10 2a10 	vmov	r2, s0
 80126ca:	462b      	mov	r3, r5
 80126cc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
 80126d0:	e692      	b.n	80123f8 <__kernel_rem_pio2f+0x318>
 80126d2:	ed5f 7a9a 	vldr	s15, [pc, #-616]	; 801246c <__kernel_rem_pio2f+0x38c>
 80126d6:	e781      	b.n	80125dc <__kernel_rem_pio2f+0x4fc>
 80126d8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80126da:	2a03      	cmp	r2, #3
 80126dc:	d891      	bhi.n	8012602 <__kernel_rem_pio2f+0x522>
 80126de:	a101      	add	r1, pc, #4	; (adr r1, 80126e4 <__kernel_rem_pio2f+0x604>)
 80126e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80126e4:	08012701 	.word	0x08012701
 80126e8:	080126fb 	.word	0x080126fb
 80126ec:	080126fb 	.word	0x080126fb
 80126f0:	080126d3 	.word	0x080126d3
 80126f4:	9b01      	ldr	r3, [sp, #4]
 80126f6:	009c      	lsls	r4, r3, #2
 80126f8:	e546      	b.n	8012188 <__kernel_rem_pio2f+0xa8>
 80126fa:	ed5f 7aa4 	vldr	s15, [pc, #-656]	; 801246c <__kernel_rem_pio2f+0x38c>
 80126fe:	e794      	b.n	801262a <__kernel_rem_pio2f+0x54a>
 8012700:	ed5f 7aa6 	vldr	s15, [pc, #-664]	; 801246c <__kernel_rem_pio2f+0x38c>
 8012704:	e7b9      	b.n	801267a <__kernel_rem_pio2f+0x59a>
 8012706:	bf00      	nop
	...

08012710 <__kernel_sinf>:
 8012710:	ee10 3a10 	vmov	r3, s0
 8012714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012718:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801271c:	da04      	bge.n	8012728 <__kernel_sinf+0x18>
 801271e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012722:	ee17 3a90 	vmov	r3, s15
 8012726:	b323      	cbz	r3, 8012772 <__kernel_sinf+0x62>
 8012728:	ee60 7a00 	vmul.f32	s15, s0, s0
 801272c:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8012784 <__kernel_sinf+0x74>
 8012730:	eddf 5a15 	vldr	s11, [pc, #84]	; 8012788 <__kernel_sinf+0x78>
 8012734:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801278c <__kernel_sinf+0x7c>
 8012738:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012790 <__kernel_sinf+0x80>
 801273c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012794 <__kernel_sinf+0x84>
 8012740:	eee7 5a85 	vfma.f32	s11, s15, s10
 8012744:	ee20 5a27 	vmul.f32	s10, s0, s15
 8012748:	eea7 6aa5 	vfma.f32	s12, s15, s11
 801274c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012750:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012754:	b170      	cbz	r0, 8012774 <__kernel_sinf+0x64>
 8012756:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801275a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801275e:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8012762:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8012798 <__kernel_sinf+0x88>
 8012766:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801276a:	eee5 0a26 	vfma.f32	s1, s10, s13
 801276e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012772:	4770      	bx	lr
 8012774:	eddf 6a09 	vldr	s13, [pc, #36]	; 801279c <__kernel_sinf+0x8c>
 8012778:	eee7 6a87 	vfma.f32	s13, s15, s14
 801277c:	eea5 0a26 	vfma.f32	s0, s10, s13
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	2f2ec9d3 	.word	0x2f2ec9d3
 8012788:	b2d72f34 	.word	0xb2d72f34
 801278c:	3638ef1b 	.word	0x3638ef1b
 8012790:	b9500d01 	.word	0xb9500d01
 8012794:	3c088889 	.word	0x3c088889
 8012798:	3e2aaaab 	.word	0x3e2aaaab
 801279c:	be2aaaab 	.word	0xbe2aaaab

080127a0 <matherr>:
 80127a0:	2000      	movs	r0, #0
 80127a2:	4770      	bx	lr
	...

080127b0 <fabsf>:
 80127b0:	ee10 3a10 	vmov	r3, s0
 80127b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127b8:	ee00 3a10 	vmov	s0, r3
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop

080127c0 <floorf>:
 80127c0:	ee10 2a10 	vmov	r2, s0
 80127c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80127c8:	0dcb      	lsrs	r3, r1, #23
 80127ca:	3b7f      	subs	r3, #127	; 0x7f
 80127cc:	2b16      	cmp	r3, #22
 80127ce:	dc17      	bgt.n	8012800 <floorf+0x40>
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	ee10 0a10 	vmov	r0, s0
 80127d6:	db19      	blt.n	801280c <floorf+0x4c>
 80127d8:	491a      	ldr	r1, [pc, #104]	; (8012844 <floorf+0x84>)
 80127da:	4119      	asrs	r1, r3
 80127dc:	420a      	tst	r2, r1
 80127de:	d022      	beq.n	8012826 <floorf+0x66>
 80127e0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012848 <floorf+0x88>
 80127e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80127e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f0:	dd19      	ble.n	8012826 <floorf+0x66>
 80127f2:	2a00      	cmp	r2, #0
 80127f4:	db18      	blt.n	8012828 <floorf+0x68>
 80127f6:	ea20 0301 	bic.w	r3, r0, r1
 80127fa:	ee00 3a10 	vmov	s0, r3
 80127fe:	4770      	bx	lr
 8012800:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012804:	d30f      	bcc.n	8012826 <floorf+0x66>
 8012806:	ee30 0a00 	vadd.f32	s0, s0, s0
 801280a:	4770      	bx	lr
 801280c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8012848 <floorf+0x88>
 8012810:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281c:	dd03      	ble.n	8012826 <floorf+0x66>
 801281e:	2a00      	cmp	r2, #0
 8012820:	db08      	blt.n	8012834 <floorf+0x74>
 8012822:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801284c <floorf+0x8c>
 8012826:	4770      	bx	lr
 8012828:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801282c:	fa42 f303 	asr.w	r3, r2, r3
 8012830:	4418      	add	r0, r3
 8012832:	e7e0      	b.n	80127f6 <floorf+0x36>
 8012834:	2900      	cmp	r1, #0
 8012836:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801283a:	bf18      	it	ne
 801283c:	eeb0 0a67 	vmovne.f32	s0, s15
 8012840:	4770      	bx	lr
 8012842:	bf00      	nop
 8012844:	007fffff 	.word	0x007fffff
 8012848:	7149f2ca 	.word	0x7149f2ca
 801284c:	00000000 	.word	0x00000000

08012850 <scalbnf>:
 8012850:	b508      	push	{r3, lr}
 8012852:	ee10 3a10 	vmov	r3, s0
 8012856:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801285a:	ed2d 8b02 	vpush	{d8}
 801285e:	d011      	beq.n	8012884 <scalbnf+0x34>
 8012860:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012864:	d211      	bcs.n	801288a <scalbnf+0x3a>
 8012866:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801286a:	d313      	bcc.n	8012894 <scalbnf+0x44>
 801286c:	0dd2      	lsrs	r2, r2, #23
 801286e:	4402      	add	r2, r0
 8012870:	2afe      	cmp	r2, #254	; 0xfe
 8012872:	dc2e      	bgt.n	80128d2 <scalbnf+0x82>
 8012874:	2a00      	cmp	r2, #0
 8012876:	dd1a      	ble.n	80128ae <scalbnf+0x5e>
 8012878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801287c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012880:	ee00 3a10 	vmov	s0, r3
 8012884:	ecbd 8b02 	vpop	{d8}
 8012888:	bd08      	pop	{r3, pc}
 801288a:	ecbd 8b02 	vpop	{d8}
 801288e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012892:	bd08      	pop	{r3, pc}
 8012894:	4b1d      	ldr	r3, [pc, #116]	; (801290c <scalbnf+0xbc>)
 8012896:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012910 <scalbnf+0xc0>
 801289a:	4298      	cmp	r0, r3
 801289c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128a0:	db22      	blt.n	80128e8 <scalbnf+0x98>
 80128a2:	ee10 3a10 	vmov	r3, s0
 80128a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80128aa:	3a19      	subs	r2, #25
 80128ac:	e7df      	b.n	801286e <scalbnf+0x1e>
 80128ae:	f112 0f16 	cmn.w	r2, #22
 80128b2:	da1e      	bge.n	80128f2 <scalbnf+0xa2>
 80128b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80128b8:	4298      	cmp	r0, r3
 80128ba:	dc0a      	bgt.n	80128d2 <scalbnf+0x82>
 80128bc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8012914 <scalbnf+0xc4>
 80128c0:	eef0 0a40 	vmov.f32	s1, s0
 80128c4:	eeb0 0a48 	vmov.f32	s0, s16
 80128c8:	f000 f82a 	bl	8012920 <copysignf>
 80128cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80128d0:	e7d8      	b.n	8012884 <scalbnf+0x34>
 80128d2:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8012918 <scalbnf+0xc8>
 80128d6:	eef0 0a40 	vmov.f32	s1, s0
 80128da:	eeb0 0a48 	vmov.f32	s0, s16
 80128de:	f000 f81f 	bl	8012920 <copysignf>
 80128e2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80128e6:	e7cd      	b.n	8012884 <scalbnf+0x34>
 80128e8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8012914 <scalbnf+0xc4>
 80128ec:	ee20 0a20 	vmul.f32	s0, s0, s1
 80128f0:	e7c8      	b.n	8012884 <scalbnf+0x34>
 80128f2:	3219      	adds	r2, #25
 80128f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80128f8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80128fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 801291c <scalbnf+0xcc>
 8012900:	ee00 3a10 	vmov	s0, r3
 8012904:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012908:	e7bc      	b.n	8012884 <scalbnf+0x34>
 801290a:	bf00      	nop
 801290c:	ffff3cb0 	.word	0xffff3cb0
 8012910:	4c000000 	.word	0x4c000000
 8012914:	0da24260 	.word	0x0da24260
 8012918:	7149f2ca 	.word	0x7149f2ca
 801291c:	33000000 	.word	0x33000000

08012920 <copysignf>:
 8012920:	ee10 3a10 	vmov	r3, s0
 8012924:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012928:	ee10 3a90 	vmov	r3, s1
 801292c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012930:	4313      	orrs	r3, r2
 8012932:	ee00 3a10 	vmov	s0, r3
 8012936:	4770      	bx	lr
	...

08012940 <__errno>:
 8012940:	4b01      	ldr	r3, [pc, #4]	; (8012948 <__errno+0x8>)
 8012942:	6818      	ldr	r0, [r3, #0]
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	20000c68 	.word	0x20000c68
 801294c:	00000000 	.word	0x00000000
 8012950:	656c6469 	.word	0x656c6469
	...

08012960 <ch_debug>:
 8012960:	6e69616d 18011600 08480404 1814100c     main......H.....
 8012970:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08012980 <vmt>:
 8012980:	0800d8d1 0800d8b1 0800d911 0800d8f1     ................
 8012990:	0800d901 0800d8e1 0800d8c1 0800d8a1     ................

080129a0 <zero_status>:
	...

080129b0 <active_status>:
	...

080129c0 <halted_status>:
 80129c0:	00000001 00000000 00000000 00000000     ................

080129d0 <_stm32_dma_streams>:
 80129d0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 80129e0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 80129f0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8012a00:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8012a10:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8012a20:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8012a30:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8012a40:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8012a50:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8012a60:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8012a70:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8012a80:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08012a90 <fsparams>:
 8012a90:	00000080 00000140 00000003 00000000     ....@...........

08012aa0 <ep0config>:
 8012aa0:	00000000 0800da51 0800dd91 0800de81     ....Q...........
 8012ab0:	00400040 20001260 20001260 00000001     @.@.`.. `.. ....
 8012ac0:	20001274 00000000 00000000 00000000     t.. ............

08012ad0 <default_config>:
 8012ad0:	0001c200 40000000 00000000 00000000     .......@........

08012ae0 <pal_default_config>:
 8012ae0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8012af0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8012b00:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8012b10:	04000000 00000040 02208001 00000000     ....@..... .....
 8012b20:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8012b30:	00060600 55000100 00000000 ffffffff     .......U........
 8012b40:	00555055 00000fff 00000000 00000000     UPU.............
 8012b50:	00000040 00000000 ffffffff 00000000     @...............
 8012b60:	0000ffff 00000000 00000000 00000000     ................
 8012b70:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8012b90:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8012bac:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8012bc8:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8012be0:	43444c42 72657020 69646f69 00000063     BLDC periodic...
 8012bf0:	656d6954 0074756f 00000000 00000000     Timeout.........

08012c00 <cancfg>:
 8012c00:	00000064 00180006 00000000 00000000     d...............
 8012c10:	636e6143 70206d6f 65636f72 00007373     Cancom process..
 8012c20:	204e4143 74617473 00007375 004e4143     CAN status..CAN.
 8012c30:	6c76616d 5f6b6e69 74726175 5f78725f     mavlink_uart_rx_
 8012c40:	636f7270 00737365 00000000 00000000     process.........

08012c50 <mavlink_message_crcs.9722>:
 8012c50:	00897c32 7768d9ed 59000000 00000000     2|....hw...Y....
 8012c60:	00000000 a8dc9fd6 90aa1718 f6277343     ............Cs'.
 8012c70:	f4ed68b9 fe09d4de 841c1ce6 990be8dd     .h..............
 8012c80:	c44e2729 030f0000 00000000 33b79900     )'N............3
 8012c90:	1594763b 007cf300 9e142600 00008f98     ;v....|..&......
 8012ca0:	16316a00 96058c8f 3fb7e700 00000036     .j1........?6...
 8012cb0:	00000000 d09e66af 6c8a5d38 2254b920     .....f..8].l .T"
 8012cc0:	04ed7cae 7438804c facbed86 19dccb57     .|..L.8t....W...
 8012cd0:	df1d2ee2 cbe50655 a86dc301 83482fb5     ....U.....m../H.
 8012ce0:	9a67007f 0000c8b2 00000000 00000000     ..g.............
	...
 8012d2c:	00000064 00000000 69a30000 00000000     d..........i....
 8012d3c:	00000000 55685a00 00b8825f aa31cc08     .....ZhU_.....1.
 8012d4c:	002e532c 5f505041 004d5050 00000000     ,S..APP_PPM.....
 8012d5c:	00000000 74727173 00000066 00000000     ....sqrtf.......
 8012d6c:	00000000                                ....

08012d70 <npio2_hw>:
 8012d70:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8012d80:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8012d90:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8012da0:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8012db0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8012dc0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8012dd0:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 8012de0:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

08012df0 <two_over_pi>:
 8012df0:	000000a2 000000f9 00000083 0000006e     ............n...
 8012e00:	0000004e 00000044 00000015 00000029     N...D.......)...
 8012e10:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8012e20:	000000f5 00000034 000000dd 000000c0     ....4...........
 8012e30:	000000db 00000062 00000095 00000099     ....b...........
 8012e40:	0000003c 00000043 00000090 00000041     <...C.......A...
 8012e50:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8012e60:	000000de 000000bb 000000c5 00000061     ............a...
 8012e70:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8012e80:	00000042 0000004d 000000d2 000000e0     B...M...........
 8012e90:	00000006 00000049 0000002e 000000ea     ....I...........
 8012ea0:	00000009 000000d1 00000092 0000001c     ................
 8012eb0:	000000fe 0000001d 000000eb 0000001c     ................
 8012ec0:	000000b1 00000029 000000a7 0000003e     ....).......>...
 8012ed0:	000000e8 00000082 00000035 000000f5     ........5.......
 8012ee0:	0000002e 000000bb 00000044 00000084     ........D.......
 8012ef0:	000000e9 0000009c 00000070 00000026     ........p...&...
 8012f00:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8012f10:	00000039 00000091 000000d6 00000039     9...........9...
 8012f20:	00000083 00000053 00000039 000000f4     ....S...9.......
 8012f30:	0000009c 00000084 0000005f 0000008b     ........_.......
 8012f40:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8012f50:	0000001f 000000f8 00000097 000000ff     ................
 8012f60:	000000de 00000005 00000098 0000000f     ................
 8012f70:	000000ef 0000002f 00000011 0000008b     ..../...........
 8012f80:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8012f90:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8012fa0:	00000027 000000cb 00000009 000000b7     '...............
 8012fb0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8012fc0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8012fd0:	00000075 00000027 000000ba 000000c7     u...'...........
 8012fe0:	000000eb 000000e5 000000f1 0000007b     ............{...
 8012ff0:	0000003d 00000007 00000039 000000f7     =.......9.......
 8013000:	0000008a 00000052 00000092 000000ea     ....R...........
 8013010:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8013020:	0000001f 0000008d 0000005d 00000008     ........].......
 8013030:	00000056 00000003 00000030 00000046     V.......0...F...
 8013040:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8013050:	000000f0 000000cf 000000bc 00000020     ............ ...
 8013060:	0000009a 000000f4 00000036 0000001d     ........6.......
 8013070:	000000a9 000000e3 00000091 00000061     ............a...
 8013080:	0000005e 000000e6 0000001b 00000008     ^...............
 8013090:	00000065 00000099 00000085 0000005f     e..........._...
 80130a0:	00000014 000000a0 00000068 00000040     ........h...@...
 80130b0:	0000008d 000000ff 000000d8 00000080     ................
 80130c0:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80130d0:	00000006 00000006 00000015 00000056     ............V...
 80130e0:	000000ca 00000073 000000a8 000000c9     ....s...........
 80130f0:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8013100:	0000008c 0000006b 00000000 00000000     ....k...........

08013110 <init_jk>:
 8013110:	00000004 00000007 00000009 00000000     ................

08013120 <PIo2>:
 8013120:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8013130:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8013140:	1fc40000 1bc60000 17440000 00000000     ..........D.....
 8013150:	00000043                                C...
