
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x4>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f000 f872 	bl	800c140 <__core_init>
 800c05c:	f002 fc40 	bl	800e8e0 <__early_init>
 800c060:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800c064:	491b      	ldr	r1, [pc, #108]	; (800c0d4 <endfiniloop+0x8>)
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <endfiniloop+0xc>)

0800c068 <msloop>:
 800c068:	4291      	cmp	r1, r2
 800c06a:	bf3c      	itt	cc
 800c06c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c070:	e7fa      	bcc.n	800c068 <msloop>
 800c072:	491a      	ldr	r1, [pc, #104]	; (800c0dc <endfiniloop+0x10>)
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <endfiniloop+0x4>)

0800c076 <psloop>:
 800c076:	4291      	cmp	r1, r2
 800c078:	bf3c      	itt	cc
 800c07a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07e:	e7fa      	bcc.n	800c076 <psloop>
 800c080:	4917      	ldr	r1, [pc, #92]	; (800c0e0 <endfiniloop+0x14>)
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <endfiniloop+0x18>)
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <endfiniloop+0x1c>)

0800c086 <dloop>:
 800c086:	429a      	cmp	r2, r3
 800c088:	bf3e      	ittt	cc
 800c08a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08e:	f842 0b04 	strcc.w	r0, [r2], #4
 800c092:	e7f8      	bcc.n	800c086 <dloop>
 800c094:	2000      	movs	r0, #0
 800c096:	4915      	ldr	r1, [pc, #84]	; (800c0ec <endfiniloop+0x20>)
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <endfiniloop+0x24>)

0800c09a <bloop>:
 800c09a:	4291      	cmp	r1, r2
 800c09c:	bf3c      	itt	cc
 800c09e:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a2:	e7fa      	bcc.n	800c09a <bloop>
 800c0a4:	f000 f854 	bl	800c150 <__late_init>
 800c0a8:	4c12      	ldr	r4, [pc, #72]	; (800c0f4 <endfiniloop+0x28>)
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <endfiniloop+0x2c>)

0800c0ac <initloop>:
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	da03      	bge.n	800c0b8 <endinitloop>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	4788      	blx	r1
 800c0b6:	e7f9      	b.n	800c0ac <initloop>

0800c0b8 <endinitloop>:
 800c0b8:	f002 fdc2 	bl	800ec40 <main>
 800c0bc:	4c0f      	ldr	r4, [pc, #60]	; (800c0fc <endfiniloop+0x30>)
 800c0be:	4d10      	ldr	r5, [pc, #64]	; (800c100 <endfiniloop+0x34>)

0800c0c0 <finiloop>:
 800c0c0:	42ac      	cmp	r4, r5
 800c0c2:	da03      	bge.n	800c0cc <endfiniloop>
 800c0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c8:	4788      	blx	r1
 800c0ca:	e7f9      	b.n	800c0c0 <finiloop>

0800c0cc <endfiniloop>:
 800c0cc:	f000 b848 	b.w	800c160 <__default_exit>
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	20000000 	.word	0x20000000
 800c0d8:	20000400 	.word	0x20000400
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	0800ef10 	.word	0x0800ef10
 800c0e4:	20000800 	.word	0x20000800
 800c0e8:	2000080c 	.word	0x2000080c
 800c0ec:	20000810 	.word	0x20000810
 800c0f0:	20001850 	.word	0x20001850
 800c0f4:	0800c000 	.word	0x0800c000
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f000 fad4 	bl	800c6e0 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f000 fa32 	bl	800c5a0 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__core_init>:
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
	...

0800c150 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
	...

0800c160 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800c160:	e7fe      	b.n	800c160 <__default_exit>
 800c162:	bf00      	nop
	...

0800c170 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800c170:	e7fe      	b.n	800c170 <_unhandled_exception>
 800c172:	bf00      	nop
	...

0800c180 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800c180:	e7fe      	b.n	800c180 <_idle_thread>
 800c182:	bf00      	nop
	...

0800c190 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800c190:	4b20      	ldr	r3, [pc, #128]	; (800c214 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800c192:	4a21      	ldr	r2, [pc, #132]	; (800c218 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c194:	4821      	ldr	r0, [pc, #132]	; (800c21c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800c196:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800c198:	2400      	movs	r4, #0
 800c19a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c19c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c19e:	4e20      	ldr	r6, [pc, #128]	; (800c220 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800c1a0:	4d20      	ldr	r5, [pc, #128]	; (800c224 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800c1a2:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800c1a6:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 800c1a8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800c1aa:	60da      	str	r2, [r3, #12]
 800c1ac:	68f2      	ldr	r2, [r6, #12]
 800c1ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800c1b2:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c1b4:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800c1b6:	2120      	movs	r1, #32
 800c1b8:	f042 0201 	orr.w	r2, r2, #1
 800c1bc:	2610      	movs	r6, #16
 800c1be:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800c1c0:	b083      	sub	sp, #12
 800c1c2:	77de      	strb	r6, [r3, #31]
 800c1c4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 800c1c8:	f000 f8fa 	bl	800c3c0 <_scheduler_init>
  _vt_init();
 800c1cc:	f000 f878 	bl	800c2c0 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800c1d0:	f000 fb0e 	bl	800c7f0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800c1d4:	f000 fca4 	bl	800cb20 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800c1d8:	f000 fcda 	bl	800cb90 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800c1dc:	4628      	mov	r0, r5
 800c1de:	2140      	movs	r1, #64	; 0x40
 800c1e0:	f000 f9ee 	bl	800c5c0 <_thread_init>
 800c1e4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800c1e8:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800c1ea:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800c1ec:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c1ee:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800c1f2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	490c      	ldr	r1, [pc, #48]	; (800c228 <chSysInit+0x98>)
 800c1f8:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800c1fa:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800c1fe:	9400      	str	r4, [sp, #0]
 800c200:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <chSysInit+0x9c>)
 800c202:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800c206:	f000 fa03 	bl	800c610 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800c20a:	4b09      	ldr	r3, [pc, #36]	; (800c230 <chSysInit+0xa0>)
 800c20c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800c20e:	b003      	add	sp, #12
 800c210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c212:	bf00      	nop
 800c214:	e000ed00 	.word	0xe000ed00
 800c218:	05fa0300 	.word	0x05fa0300
 800c21c:	e0001000 	.word	0xe0001000
 800c220:	e000edf0 	.word	0xe000edf0
 800c224:	20000840 	.word	0x20000840
 800c228:	0800ec60 	.word	0x0800ec60
 800c22c:	0800c181 	.word	0x0800c181
 800c230:	0800ec50 	.word	0x0800ec50
	...

0800c240 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800c242:	4d13      	ldr	r5, [pc, #76]	; (800c290 <chSysTimerHandlerI+0x50>)
 800c244:	69aa      	ldr	r2, [r5, #24]
 800c246:	7fd3      	ldrb	r3, [r2, #31]
 800c248:	b10b      	cbz	r3, 800c24e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800c24a:	3b01      	subs	r3, #1
 800c24c:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800c24e:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c250:	69eb      	ldr	r3, [r5, #28]
 800c252:	4e10      	ldr	r6, [pc, #64]	; (800c294 <chSysTimerHandlerI+0x54>)
 800c254:	3101      	adds	r1, #1
 800c256:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800c258:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c25a:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800c25c:	f102 0201 	add.w	r2, r2, #1
 800c260:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c262:	d013      	beq.n	800c28c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800c264:	689c      	ldr	r4, [r3, #8]
 800c266:	3c01      	subs	r4, #1
 800c268:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800c26a:	b97c      	cbnz	r4, 800c28c <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c26c:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800c26e:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800c270:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800c272:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800c274:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800c276:	61ea      	str	r2, [r5, #28]
 800c278:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800c27c:	6918      	ldr	r0, [r3, #16]
 800c27e:	4788      	blx	r1
 800c280:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800c284:	69eb      	ldr	r3, [r5, #28]
 800c286:	689a      	ldr	r2, [r3, #8]
 800c288:	2a00      	cmp	r2, #0
 800c28a:	d0f0      	beq.n	800c26e <chSysTimerHandlerI+0x2e>
 800c28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c28e:	bf00      	nop
 800c290:	20000810 	.word	0x20000810
 800c294:	2000082c 	.word	0x2000082c
	...

0800c2a0 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800c2a0:	4a03      	ldr	r2, [pc, #12]	; (800c2b0 <chSysPolledDelayX+0x10>)
 800c2a2:	6851      	ldr	r1, [r2, #4]
 800c2a4:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800c2a6:	1a5b      	subs	r3, r3, r1
 800c2a8:	4283      	cmp	r3, r0
 800c2aa:	d3fb      	bcc.n	800c2a4 <chSysPolledDelayX+0x4>
  }
}
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	e0001000 	.word	0xe0001000
	...

0800c2c0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800c2c0:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800c2c2:	f04f 30ff 	mov.w	r0, #4294967295
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800c2c6:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800c2ca:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800c2cc:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800c2ce:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800c2d0:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800c2d2:	621a      	str	r2, [r3, #32]
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	20000810 	.word	0x20000810
 800c2dc:	00000000 	.word	0x00000000

0800c2e0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800c2e0:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800c2e2:	4e0d      	ldr	r6, [pc, #52]	; (800c318 <chVTDoSetI+0x38>)
 800c2e4:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800c2e6:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800c2e8:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800c2ea:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800c2ec:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800c2ee:	d904      	bls.n	800c2fa <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800c2f0:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800c2f2:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800c2f4:	68a5      	ldr	r5, [r4, #8]
 800c2f6:	428d      	cmp	r5, r1
 800c2f8:	d3fa      	bcc.n	800c2f0 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800c2fa:	6863      	ldr	r3, [r4, #4]
 800c2fc:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800c2fe:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800c300:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800c302:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800c304:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800c306:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800c308:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800c30c:	1a59      	subs	r1, r3, r1
 800c30e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800c310:	6272      	str	r2, [r6, #36]	; 0x24
}
 800c312:	bc70      	pop	{r4, r5, r6}
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	20000810 	.word	0x20000810
 800c31c:	00000000 	.word	0x00000000

0800c320 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800c320:	6803      	ldr	r3, [r0, #0]
 800c322:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800c324:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800c326:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800c328:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800c32a:	4c06      	ldr	r4, [pc, #24]	; (800c344 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800c32c:	442a      	add	r2, r5
 800c32e:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800c330:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800c332:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800c334:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800c336:	f04f 33ff 	mov.w	r3, #4294967295
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800c33a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800c33c:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800c33e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800c340:	bc30      	pop	{r4, r5}
 800c342:	4770      	bx	lr
 800c344:	20000810 	.word	0x20000810
	...

0800c350 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800c350:	b410      	push	{r4}
 800c352:	2320      	movs	r3, #32
 800c354:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800c358:	7f03      	ldrb	r3, [r0, #28]
 800c35a:	2b07      	cmp	r3, #7
 800c35c:	d80e      	bhi.n	800c37c <wakeup+0x2c>
 800c35e:	e8df f003 	tbb	[pc, r3]
 800c362:	0d27      	.short	0x0d27
 800c364:	0408230d 	.word	0x0408230d
 800c368:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800c36a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800c36c:	6893      	ldr	r3, [r2, #8]
 800c36e:	3301      	adds	r3, #1
 800c370:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800c372:	e890 000c 	ldmia.w	r0, {r2, r3}
 800c376:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800c378:	6802      	ldr	r2, [r0, #0]
 800c37a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800c37c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c380:	2200      	movs	r2, #0
 800c382:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800c384:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800c386:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c388:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800c38a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800c38c:	689a      	ldr	r2, [r3, #8]
 800c38e:	428a      	cmp	r2, r1
 800c390:	d2fb      	bcs.n	800c38a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800c396:	6003      	str	r3, [r0, #0]
 800c398:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800c39a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800c39c:	6058      	str	r0, [r3, #4]
 800c39e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800c3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800c3a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
    break;
 800c3ae:	e7e5      	b.n	800c37c <wakeup+0x2c>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800c3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	20000810 	.word	0x20000810

0800c3c0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800c3c0:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800c3c6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800c3c8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800c3ca:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800c3cc:	609a      	str	r2, [r3, #8]
 800c3ce:	4770      	bx	lr
 800c3d0:	20000810 	.word	0x20000810
	...

0800c3e0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800c3e4:	4b08      	ldr	r3, [pc, #32]	; (800c408 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800c3e6:	b410      	push	{r4}
 800c3e8:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c3ea:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800c3ec:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	428a      	cmp	r2, r1
 800c3f2:	d2fb      	bcs.n	800c3ec <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800c3f8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800c3fa:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800c3fc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800c3fe:	605c      	str	r4, [r3, #4]

  return tp;
}
 800c400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	20000810 	.word	0x20000810
 800c40c:	00000000 	.word	0x00000000

0800c410 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800c410:	4b08      	ldr	r3, [pc, #32]	; (800c434 <chSchGoSleepS+0x24>)
 800c412:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800c414:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800c416:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800c418:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c41a:	2004      	movs	r0, #4
 800c41c:	77c8      	strb	r0, [r1, #31]

  tqp->p_next = tp->p_next;
 800c41e:	6810      	ldr	r0, [r2, #0]
 800c420:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800c422:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c424:	6043      	str	r3, [r0, #4]
 800c426:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800c428:	4610      	mov	r0, r2
}
 800c42a:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800c42e:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800c430:	f7ff be6e 	b.w	800c110 <_port_switch>
 800c434:	20000810 	.word	0x20000810
	...

0800c440 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800c440:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800c442:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800c444:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800c446:	d012      	beq.n	800c46e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800c448:	4c0c      	ldr	r4, [pc, #48]	; (800c47c <chSchGoSleepTimeoutS+0x3c>)
 800c44a:	4a0d      	ldr	r2, [pc, #52]	; (800c480 <chSchGoSleepTimeoutS+0x40>)
 800c44c:	69a3      	ldr	r3, [r4, #24]
 800c44e:	4605      	mov	r5, r0
 800c450:	a801      	add	r0, sp, #4
 800c452:	f7ff ff45 	bl	800c2e0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800c456:	4628      	mov	r0, r5
 800c458:	f7ff ffda 	bl	800c410 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	b113      	cbz	r3, 800c466 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800c460:	a801      	add	r0, sp, #4
 800c462:	f7ff ff5d 	bl	800c320 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800c466:	69a3      	ldr	r3, [r4, #24]
}
 800c468:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c46a:	b007      	add	sp, #28
 800c46c:	bd30      	pop	{r4, r5, pc}
 800c46e:	4c03      	ldr	r4, [pc, #12]	; (800c47c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800c470:	f7ff ffce 	bl	800c410 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800c474:	69a3      	ldr	r3, [r4, #24]
}
 800c476:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c478:	b007      	add	sp, #28
 800c47a:	bd30      	pop	{r4, r5, pc}
 800c47c:	20000810 	.word	0x20000810
 800c480:	0800c351 	.word	0x0800c351
	...

0800c490 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800c490:	4b14      	ldr	r3, [pc, #80]	; (800c4e4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800c492:	b470      	push	{r4, r5, r6}
 800c494:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800c496:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800c498:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800c49a:	68a8      	ldr	r0, [r5, #8]
 800c49c:	68a1      	ldr	r1, [r4, #8]
 800c49e:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c4a0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800c4a4:	d80b      	bhi.n	800c4be <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c4a6:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800c4a8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800c4aa:	689a      	ldr	r2, [r3, #8]
 800c4ac:	4291      	cmp	r1, r2
 800c4ae:	d9fb      	bls.n	800c4a8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800c4b4:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800c4b6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800c4b8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800c4ba:	bc70      	pop	{r4, r5, r6}
 800c4bc:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c4be:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800c4c0:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 800c4c2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800c4c4:	6891      	ldr	r1, [r2, #8]
 800c4c6:	4288      	cmp	r0, r1
 800c4c8:	d9fb      	bls.n	800c4c2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800c4ca:	6850      	ldr	r0, [r2, #4]
 800c4cc:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800c4ce:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800c4d0:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800c4d2:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 800c4d4:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800c4d6:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 800c4d8:	4629      	mov	r1, r5
 800c4da:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800c4dc:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800c4de:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800c4e0:	f7ff be16 	b.w	800c110 <_port_switch>
 800c4e4:	20000810 	.word	0x20000810
	...

0800c4f0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800c4f0:	4b08      	ldr	r3, [pc, #32]	; (800c514 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800c4f2:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800c4f4:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800c4f6:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800c4f8:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800c4fa:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800c4fc:	b921      	cbnz	r1, 800c508 <chSchIsPreemptionRequired+0x18>
 800c4fe:	4283      	cmp	r3, r0
 800c500:	bf34      	ite	cc
 800c502:	2000      	movcc	r0, #0
 800c504:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800c506:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800c508:	4283      	cmp	r3, r0
 800c50a:	bf94      	ite	ls
 800c50c:	2000      	movls	r0, #0
 800c50e:	2001      	movhi	r0, #1
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	20000810 	.word	0x20000810
	...

0800c520 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800c520:	4a0e      	ldr	r2, [pc, #56]	; (800c55c <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800c522:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800c524:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 800c526:	b470      	push	{r4, r5, r6}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800c528:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800c52a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c52c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c52e:	2604      	movs	r6, #4
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800c530:	7701      	strb	r1, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c532:	2500      	movs	r5, #0
 800c534:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800c536:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800c538:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c53a:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800c53c:	7725      	strb	r5, [r4, #28]
 800c53e:	e000      	b.n	800c542 <chSchDoRescheduleBehind+0x22>
 800c540:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	428a      	cmp	r2, r1
 800c546:	d2fb      	bcs.n	800c540 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800c54c:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800c54e:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800c550:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800c552:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800c554:	bc70      	pop	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800c556:	f7ff bddb 	b.w	800c110 <_port_switch>
 800c55a:	bf00      	nop
 800c55c:	20000810 	.word	0x20000810

0800c560 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800c560:	4a0d      	ldr	r2, [pc, #52]	; (800c598 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800c562:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800c564:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 800c566:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800c568:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800c56a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c56c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800c56e:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800c570:	7701      	strb	r1, [r0, #28]
 800c572:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800c574:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800c576:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800c578:	7725      	strb	r5, [r4, #28]
 800c57a:	e000      	b.n	800c57e <chSchDoRescheduleAhead+0x1e>
 800c57c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	428a      	cmp	r2, r1
 800c582:	d8fb      	bhi.n	800c57c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800c588:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800c58a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800c58c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800c58e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 800c590:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800c592:	f7ff bdbd 	b.w	800c110 <_port_switch>
 800c596:	bf00      	nop
 800c598:	20000810 	.word	0x20000810
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800c5a0:	4b03      	ldr	r3, [pc, #12]	; (800c5b0 <chSchDoReschedule+0x10>)
 800c5a2:	699b      	ldr	r3, [r3, #24]
 800c5a4:	7fdb      	ldrb	r3, [r3, #31]
 800c5a6:	b10b      	cbz	r3, 800c5ac <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800c5a8:	f7ff bfda 	b.w	800c560 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800c5ac:	f7ff bfb8 	b.w	800c520 <chSchDoRescheduleBehind>
 800c5b0:	20000810 	.word	0x20000810
	...

0800c5c0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c5c2:	4c0f      	ldr	r4, [pc, #60]	; (800c600 <_thread_init+0x40>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800c5c4:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c5c6:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800c5c8:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800c5ca:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800c5cc:	2200      	movs	r2, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800c5ce:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800c5d0:	f100 012c 	add.w	r1, r0, #44	; 0x2c

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c5d4:	f04f 0e04 	mov.w	lr, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800c5d8:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800c5da:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c5de:	6145      	str	r5, [r0, #20]
 800c5e0:	6104      	str	r4, [r0, #16]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c5e2:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800c5e6:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800c5e8:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800c5ea:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800c5ec:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800c5ee:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800c5f0:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800c5f2:	6128      	str	r0, [r5, #16]
 800c5f4:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800c5f6:	6286      	str	r6, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800c5f8:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800c5fa:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5fe:	bf00      	nop
 800c600:	20000810 	.word	0x20000810
	...

0800c610 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c612:	461d      	mov	r5, r3
 800c614:	4604      	mov	r4, r0
 800c616:	2320      	movs	r3, #32
 800c618:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800c61c:	3964      	subs	r1, #100	; 0x64
 800c61e:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c620:	4e13      	ldr	r6, [pc, #76]	; (800c670 <chThdCreateStatic+0x60>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800c622:	4b14      	ldr	r3, [pc, #80]	; (800c674 <chThdCreateStatic+0x64>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c624:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800c626:	60c1      	str	r1, [r0, #12]
 800c628:	640d      	str	r5, [r1, #64]	; 0x40
 800c62a:	9d06      	ldr	r5, [sp, #24]
 800c62c:	644d      	str	r5, [r1, #68]	; 0x44
 800c62e:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800c630:	2502      	movs	r5, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c632:	2304      	movs	r3, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800c634:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800c636:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800c638:	7705      	strb	r5, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800c63a:	77c3      	strb	r3, [r0, #31]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800c63c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800c63e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800c642:	f100 0228 	add.w	r2, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800c646:	2101      	movs	r1, #1
 800c648:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c64a:	6106      	str	r6, [r0, #16]
 800c64c:	6147      	str	r7, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800c64e:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800c650:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800c652:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800c654:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800c656:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800c658:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800c65a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800c65c:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800c65e:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800c660:	6303      	str	r3, [r0, #48]	; 0x30
 800c662:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800c664:	f7ff ff14 	bl	800c490 <chSchWakeupS>
 800c668:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800c66c:	4620      	mov	r0, r4
 800c66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c670:	20000810 	.word	0x20000810
 800c674:	0800c129 	.word	0x0800c129
	...

0800c680 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800c680:	b508      	push	{r3, lr}
 800c682:	4601      	mov	r1, r0
 800c684:	2320      	movs	r3, #32
 800c686:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800c68a:	2008      	movs	r0, #8
 800c68c:	f7ff fed8 	bl	800c440 <chSchGoSleepTimeoutS>
 800c690:	2300      	movs	r3, #0
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	bd08      	pop	{r3, pc}
	...

0800c6a0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800c6a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800c6a2:	4b0e      	ldr	r3, [pc, #56]	; (800c6dc <chThdExitS+0x3c>)
 800c6a4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800c6a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800c6a8:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800c6aa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800c6ae:	429d      	cmp	r5, r3
 800c6b0:	d007      	beq.n	800c6c2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff fe92 	bl	800c3e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800c6bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800c6be:	42ab      	cmp	r3, r5
 800c6c0:	d1f7      	bne.n	800c6b2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800c6c2:	7f63      	ldrb	r3, [r4, #29]
 800c6c4:	079b      	lsls	r3, r3, #30
 800c6c6:	d104      	bne.n	800c6d2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800c6c8:	6963      	ldr	r3, [r4, #20]
 800c6ca:	6922      	ldr	r2, [r4, #16]
 800c6cc:	611a      	str	r2, [r3, #16]
 800c6ce:	6922      	ldr	r2, [r4, #16]
 800c6d0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800c6d2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800c6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800c6d8:	f7ff be9a 	b.w	800c410 <chSchGoSleepS>
 800c6dc:	20000810 	.word	0x20000810

0800c6e0 <chThdExit>:
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800c6e6:	f7ff bfdb 	b.w	800c6a0 <chThdExitS>
 800c6ea:	bf00      	nop
 800c6ec:	0000      	movs	r0, r0
	...

0800c6f0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800c6f0:	6803      	ldr	r3, [r0, #0]
 800c6f2:	b12b      	cbz	r3, 800c700 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800c6f8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800c6fa:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800c6fc:	f7ff be70 	b.w	800c3e0 <chSchReadyI>
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
	...

0800c710 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800c710:	b169      	cbz	r1, 800c72e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800c712:	4b08      	ldr	r3, [pc, #32]	; (800c734 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800c714:	b410      	push	{r4}
 800c716:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800c718:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800c71a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800c71c:	2004      	movs	r0, #4
 800c71e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800c722:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800c724:	6053      	str	r3, [r2, #4]
}
 800c726:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800c72a:	f7ff be89 	b.w	800c440 <chSchGoSleepTimeoutS>
}
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	4770      	bx	lr
 800c734:	20000810 	.word	0x20000810
	...

0800c740 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800c740:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800c742:	4290      	cmp	r0, r2
 800c744:	d00a      	beq.n	800c75c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800c746:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800c748:	6814      	ldr	r4, [r2, #0]
 800c74a:	6004      	str	r4, [r0, #0]
 800c74c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c74e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800c750:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 800c752:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800c754:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c758:	f7ff be42 	b.w	800c3e0 <chSchReadyI>
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop

0800c760 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800c760:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800c762:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800c764:	4298      	cmp	r0, r3
 800c766:	d00b      	beq.n	800c780 <chThdDequeueAllI+0x20>
 800c768:	4604      	mov	r4, r0
 800c76a:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	6022      	str	r2, [r4, #0]
 800c770:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c772:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800c774:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800c776:	f7ff fe33 	bl	800c3e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	429c      	cmp	r4, r3
 800c77e:	d1f5      	bne.n	800c76c <chThdDequeueAllI+0xc>
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	bf00      	nop
	...

0800c790 <chTMStartMeasurementX>:
 800c790:	4b01      	ldr	r3, [pc, #4]	; (800c798 <chTMStartMeasurementX+0x8>)
 800c792:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800c794:	6083      	str	r3, [r0, #8]
 800c796:	4770      	bx	lr
 800c798:	e0001000 	.word	0xe0001000
 800c79c:	00000000 	.word	0x00000000

0800c7a0 <chTMStopMeasurementX>:
 800c7a0:	4b0f      	ldr	r3, [pc, #60]	; (800c7e0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800c7a2:	4910      	ldr	r1, [pc, #64]	; (800c7e4 <chTMStopMeasurementX+0x44>)
 800c7a4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800c7a6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800c7a8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800c7aa:	6f8f      	ldr	r7, [r1, #120]	; 0x78

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800c7ac:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800c7ae:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800c7b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800c7b8:	18e4      	adds	r4, r4, r3
 800c7ba:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800c7be:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800c7c0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800c7c2:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800c7c4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800c7c6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800c7ca:	d805      	bhi.n	800c7d8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800c7cc:	6802      	ldr	r2, [r0, #0]
 800c7ce:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800c7d0:	bf38      	it	cc
 800c7d2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800c7d4:	bcf0      	pop	{r4, r5, r6, r7}
 800c7d6:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800c7d8:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800c7da:	bcf0      	pop	{r4, r5, r6, r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	e0001000 	.word	0xe0001000
 800c7e4:	20000810 	.word	0x20000810
	...

0800c7f0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800c7f0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800c7f2:	4c0c      	ldr	r4, [pc, #48]	; (800c824 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800c7f4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800c7f6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800c7f8:	f04f 32ff 	mov.w	r2, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800c7fc:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800c7fe:	2600      	movs	r6, #0
 800c800:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800c802:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800c804:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800c806:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800c808:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800c80a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800c80c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800c810:	f7ff ffbe 	bl	800c790 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800c814:	4668      	mov	r0, sp
 800c816:	f7ff ffc3 	bl	800c7a0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800c81a:	9b02      	ldr	r3, [sp, #8]
 800c81c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800c81e:	b006      	add	sp, #24
 800c820:	bdd0      	pop	{r4, r6, r7, pc}
 800c822:	bf00      	nop
 800c824:	20000810 	.word	0x20000810
	...

0800c830 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800c830:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800c832:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800c834:	6040      	str	r0, [r0, #4]
 800c836:	6083      	str	r3, [r0, #8]
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	0000      	movs	r0, r0
	...

0800c840 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800c840:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800c842:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800c844:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800c846:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800c848:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800c84a:	d009      	beq.n	800c860 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800c84c:	2a0b      	cmp	r2, #11
 800c84e:	d000      	beq.n	800c852 <chEvtSignalI+0x12>
 800c850:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800c852:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800c854:	438b      	bics	r3, r1
 800c856:	d1fb      	bne.n	800c850 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800c85c:	f7ff bdc0 	b.w	800c3e0 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800c860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c862:	4219      	tst	r1, r3
 800c864:	d1f8      	bne.n	800c858 <chEvtSignalI+0x18>
 800c866:	4770      	bx	lr
	...

0800c870 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800c870:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800c872:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800c874:	42a0      	cmp	r0, r4
 800c876:	d00f      	beq.n	800c898 <chEvtBroadcastFlagsI+0x28>
 800c878:	4606      	mov	r6, r0
 800c87a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800c87c:	68e3      	ldr	r3, [r4, #12]
 800c87e:	432b      	orrs	r3, r5
 800c880:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800c882:	b115      	cbz	r5, 800c88a <chEvtBroadcastFlagsI+0x1a>
 800c884:	6922      	ldr	r2, [r4, #16]
 800c886:	4213      	tst	r3, r2
 800c888:	d003      	beq.n	800c892 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800c88a:	68a1      	ldr	r1, [r4, #8]
 800c88c:	6860      	ldr	r0, [r4, #4]
 800c88e:	f7ff ffd7 	bl	800c840 <chEvtSignalI>
    }
    elp = elp->el_next;
 800c892:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800c894:	42a6      	cmp	r6, r4
 800c896:	d1f1      	bne.n	800c87c <chEvtBroadcastFlagsI+0xc>
 800c898:	bd70      	pop	{r4, r5, r6, pc}
 800c89a:	bf00      	nop
 800c89c:	0000      	movs	r0, r0
	...

0800c8a0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800c8a0:	b430      	push	{r4, r5}
 800c8a2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800c8a4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800c8a6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800c8a8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800c8aa:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800c8ac:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800c8ae:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800c8b0:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800c8b2:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 800c8b4:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 800c8b6:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800c8b8:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800c8ba:	bc30      	pop	{r4, r5}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop

0800c8c0 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800c8c0:	6943      	ldr	r3, [r0, #20]
 800c8c2:	6982      	ldr	r2, [r0, #24]
 800c8c4:	4293      	cmp	r3, r2
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 800c8c6:	b510      	push	{r4, lr}
 800c8c8:	d010      	beq.n	800c8ec <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800c8ca:	6882      	ldr	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800c8cc:	1c5c      	adds	r4, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800c8ce:	3201      	adds	r2, #1
 800c8d0:	6082      	str	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800c8d2:	6144      	str	r4, [r0, #20]
 800c8d4:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800c8d6:	6942      	ldr	r2, [r0, #20]
 800c8d8:	6903      	ldr	r3, [r0, #16]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d301      	bcc.n	800c8e2 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 800c8de:	68c3      	ldr	r3, [r0, #12]
 800c8e0:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	f7ff ff2c 	bl	800c740 <chThdDequeueNextI>

  return Q_OK;
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	bd10      	pop	{r4, pc}
 800c8ec:	6882      	ldr	r2, [r0, #8]
 800c8ee:	2a00      	cmp	r2, #0
 800c8f0:	d0eb      	beq.n	800c8ca <chIQPutI+0xa>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 800c8f2:	f06f 0003 	mvn.w	r0, #3
 800c8f6:	bd10      	pop	{r4, pc}
	...

0800c900 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	2320      	movs	r3, #32
 800c904:	460e      	mov	r6, r1
 800c906:	4604      	mov	r4, r0
 800c908:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800c90c:	69c3      	ldr	r3, [r0, #28]
 800c90e:	b12b      	cbz	r3, 800c91c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800c910:	4798      	blx	r3
 800c912:	e003      	b.n	800c91c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800c914:	f7ff fefc 	bl	800c710 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800c918:	2800      	cmp	r0, #0
 800c91a:	db15      	blt.n	800c948 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800c91c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800c91e:	4631      	mov	r1, r6
 800c920:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 800c922:	2d00      	cmp	r5, #0
 800c924:	d0f6      	beq.n	800c914 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800c926:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800c928:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800c92a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800c92c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800c92e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800c930:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800c932:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800c934:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800c936:	bf28      	it	cs
 800c938:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800c93a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800c93c:	bf28      	it	cs
 800c93e:	61a3      	strcs	r3, [r4, #24]
 800c940:	2300      	movs	r3, #0
 800c942:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800c94c:	bd70      	pop	{r4, r5, r6, pc}
 800c94e:	bf00      	nop

0800c950 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	b083      	sub	sp, #12
 800c958:	4689      	mov	r9, r1
 800c95a:	4693      	mov	fp, r2
 800c95c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800c95e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800c962:	2720      	movs	r7, #32
 800c964:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800c968:	2600      	movs	r6, #0
 800c96a:	9701      	str	r7, [sp, #4]
 800c96c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800c96e:	f1b8 0f00 	cmp.w	r8, #0
 800c972:	d005      	beq.n	800c980 <chIQReadTimeout+0x30>
      nfy(iqp);
 800c974:	4620      	mov	r0, r4
 800c976:	47c0      	blx	r8
 800c978:	e002      	b.n	800c980 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800c97a:	f7ff fec9 	bl	800c710 <chThdEnqueueTimeoutS>
 800c97e:	b9e0      	cbnz	r0, 800c9ba <chIQReadTimeout+0x6a>
 800c980:	68a7      	ldr	r7, [r4, #8]
 800c982:	4629      	mov	r1, r5
 800c984:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800c986:	2f00      	cmp	r7, #0
 800c988:	d0f7      	beq.n	800c97a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800c98a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800c98c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800c98e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800c990:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800c992:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800c994:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800c996:	7813      	ldrb	r3, [r2, #0]
 800c998:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	69a2      	ldr	r2, [r4, #24]
 800c9a0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800c9a2:	bf24      	itt	cs
 800c9a4:	68e3      	ldrcs	r3, [r4, #12]
 800c9a6:	61a3      	strcs	r3, [r4, #24]
 800c9a8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800c9ac:	3601      	adds	r6, #1
    if (--n == 0U) {
 800c9ae:	45b3      	cmp	fp, r6
 800c9b0:	d005      	beq.n	800c9be <chIQReadTimeout+0x6e>
 800c9b2:	9b01      	ldr	r3, [sp, #4]
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	e7d9      	b.n	800c96e <chIQReadTimeout+0x1e>
 800c9ba:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800c9be:	4630      	mov	r0, r6
 800c9c0:	b003      	add	sp, #12
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c6:	bf00      	nop
	...

0800c9d0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800c9d0:	b430      	push	{r4, r5}
 800c9d2:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800c9d4:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800c9d6:	188d      	adds	r5, r1, r2
 800c9d8:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800c9da:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800c9dc:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800c9de:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 800c9e0:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 800c9e2:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800c9e4:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800c9e6:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 800c9e8:	bc30      	pop	{r4, r5}
 800c9ea:	4770      	bx	lr
 800c9ec:	0000      	movs	r0, r0
	...

0800c9f0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	4616      	mov	r6, r2
 800c9f8:	2320      	movs	r3, #32
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	e003      	b.n	800ca08 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800ca00:	f7ff fe86 	bl	800c710 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800ca04:	2800      	cmp	r0, #0
 800ca06:	db19      	blt.n	800ca3c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800ca08:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	d0f6      	beq.n	800ca00 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800ca12:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800ca14:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800ca16:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800ca18:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800ca1a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800ca1c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800ca1e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	6962      	ldr	r2, [r4, #20]
 800ca24:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800ca26:	bf24      	itt	cs
 800ca28:	68e3      	ldrcs	r3, [r4, #12]
 800ca2a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800ca2c:	69e3      	ldr	r3, [r4, #28]
 800ca2e:	b10b      	cbz	r3, 800ca34 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 800ca30:	4620      	mov	r0, r4
 800ca32:	4798      	blx	r3
 800ca34:	2000      	movs	r0, #0
 800ca36:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800ca3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca3c:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800ca40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca42:	bf00      	nop
	...

0800ca50 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 800ca50:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800ca52:	6942      	ldr	r2, [r0, #20]
 800ca54:	6983      	ldr	r3, [r0, #24]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d00f      	beq.n	800ca7a <chOQGetI+0x2a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800ca5a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800ca5c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800ca5e:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800ca60:	3201      	adds	r2, #1
 800ca62:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 800ca64:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 800ca66:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800ca68:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800ca6a:	d301      	bcc.n	800ca70 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 800ca6c:	68c3      	ldr	r3, [r0, #12]
 800ca6e:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 800ca70:	2100      	movs	r1, #0
 800ca72:	f7ff fe65 	bl	800c740 <chThdDequeueNextI>

  return (msg_t)b;
 800ca76:	4620      	mov	r0, r4
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	6882      	ldr	r2, [r0, #8]
 800ca7c:	2a00      	cmp	r2, #0
 800ca7e:	d0ec      	beq.n	800ca5a <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 800ca80:	f06f 0002 	mvn.w	r0, #2
 800ca84:	bd38      	pop	{r3, r4, r5, pc}
 800ca86:	bf00      	nop
	...

0800ca90 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	b083      	sub	sp, #12
 800ca96:	4604      	mov	r4, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	4616      	mov	r6, r2
 800ca9c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800ca9e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800caa2:	f04f 0920 	mov.w	r9, #32
 800caa6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800caaa:	2700      	movs	r7, #0
 800caac:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800caae:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800cab0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800cab4:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800cab6:	b303      	cbz	r3, 800cafa <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800cab8:	6961      	ldr	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800caba:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800cabc:	1c4a      	adds	r2, r1, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800cabe:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800cac0:	6162      	str	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800cac2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800cac4:	782b      	ldrb	r3, [r5, #0]
 800cac6:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800cac8:	6923      	ldr	r3, [r4, #16]
 800caca:	6961      	ldr	r1, [r4, #20]
 800cacc:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800cace:	bf24      	itt	cs
 800cad0:	68e3      	ldrcs	r3, [r4, #12]
 800cad2:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 800cad4:	f1b8 0f00 	cmp.w	r8, #0
 800cad8:	d000      	beq.n	800cadc <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800cada:	47c0      	blx	r8
 800cadc:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800cae0:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800cae2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800cae6:	d012      	beq.n	800cb0e <chOQWriteTimeout+0x7e>
 800cae8:	f389 8811 	msr	BASEPRI, r9
 800caec:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800caee:	465d      	mov	r5, fp
 800caf0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800caf4:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1de      	bne.n	800cab8 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800cafa:	9901      	ldr	r1, [sp, #4]
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7ff fe06 	bl	800c710 <chThdEnqueueTimeoutS>
 800cb04:	9b00      	ldr	r3, [sp, #0]
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d0d1      	beq.n	800caae <chOQWriteTimeout+0x1e>
 800cb0a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800cb0e:	4638      	mov	r0, r7
 800cb10:	b003      	add	sp, #12
 800cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb16:	bf00      	nop
	...

0800cb20 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800cb20:	4a05      	ldr	r2, [pc, #20]	; (800cb38 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800cb22:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800cb24:	4806      	ldr	r0, [pc, #24]	; (800cb40 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800cb26:	4907      	ldr	r1, [pc, #28]	; (800cb44 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800cb28:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800cb2c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800cb30:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800cb32:	600b      	str	r3, [r1, #0]
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	20001857 	.word	0x20001857
 800cb3c:	20020000 	.word	0x20020000
 800cb40:	20000a6c 	.word	0x20000a6c
 800cb44:	20000a68 	.word	0x20000a68
	...

0800cb50 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800cb50:	b410      	push	{r4}
 800cb52:	2320      	movs	r3, #32
 800cb54:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800cb58:	4c09      	ldr	r4, [pc, #36]	; (800cb80 <chCoreAlloc+0x30>)
 800cb5a:	4b0a      	ldr	r3, [pc, #40]	; (800cb84 <chCoreAlloc+0x34>)
 800cb5c:	6822      	ldr	r2, [r4, #0]
 800cb5e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800cb60:	1dc3      	adds	r3, r0, #7
 800cb62:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800cb66:	1a89      	subs	r1, r1, r2
 800cb68:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800cb6a:	bf9d      	ittte	ls
 800cb6c:	189b      	addls	r3, r3, r2
 800cb6e:	6023      	strls	r3, [r4, #0]

  return p;
 800cb70:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 800cb72:	2000      	movhi	r0, #0
 800cb74:	2300      	movs	r3, #0
 800cb76:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800cb7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	20000a6c 	.word	0x20000a6c
 800cb84:	20000a68 	.word	0x20000a68
	...

0800cb90 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800cb90:	4b04      	ldr	r3, [pc, #16]	; (800cba4 <_heap_init+0x14>)
 800cb92:	4a05      	ldr	r2, [pc, #20]	; (800cba8 <_heap_init+0x18>)
 800cb94:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800cb96:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800cb9e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800cba0:	f7ff be46 	b.w	800c830 <chMtxObjectInit>
 800cba4:	20000a70 	.word	0x20000a70
 800cba8:	0800cb51 	.word	0x0800cb51
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800cbb0:	4a06      	ldr	r2, [pc, #24]	; (800cbcc <SVC_Handler+0x1c>)
 800cbb2:	6853      	ldr	r3, [r2, #4]
 800cbb4:	f023 0301 	bic.w	r3, r3, #1
 800cbb8:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800cbba:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800cbbe:	3368      	adds	r3, #104	; 0x68
 800cbc0:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	4770      	bx	lr
 800cbcc:	e000ef30 	.word	0xe000ef30

0800cbd0 <_port_irq_epilogue>:
 800cbd0:	2320      	movs	r3, #32
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800cbd6:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <_port_irq_epilogue+0x50>)
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800cbde:	d102      	bne.n	800cbe6 <_port_irq_epilogue+0x16>
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800cbe6:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800cbe8:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800cbec:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800cbf0:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800cbf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800cbfc:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800cc00:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 800cc04:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800cc08:	f7ff fc72 	bl	800c4f0 <chSchIsPreemptionRequired>
 800cc0c:	b118      	cbz	r0, 800cc16 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800cc0e:	4b06      	ldr	r3, [pc, #24]	; (800cc28 <_port_irq_epilogue+0x58>)
 800cc10:	f844 3c50 	str.w	r3, [r4, #-80]
 800cc14:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800cc16:	4b05      	ldr	r3, [pc, #20]	; (800cc2c <_port_irq_epilogue+0x5c>)
 800cc18:	f844 3c50 	str.w	r3, [r4, #-80]
 800cc1c:	bd10      	pop	{r4, pc}
 800cc1e:	bf00      	nop
 800cc20:	e000ed00 	.word	0xe000ed00
 800cc24:	e000ef30 	.word	0xe000ef30
 800cc28:	0800c139 	.word	0x0800c139
 800cc2c:	0800c13c 	.word	0x0800c13c

0800cc30 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800cc30:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800cc32:	f000 fd8d 	bl	800d750 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800cc36:	480a      	ldr	r0, [pc, #40]	; (800cc60 <halInit+0x30>)
 800cc38:	f000 ffa2 	bl	800db80 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800cc3c:	f000 f818 	bl	800cc70 <canInit>
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
 800cc40:	f000 f83e 	bl	800ccc0 <gptInit>
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800cc44:	f000 f84c 	bl	800cce0 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800cc48:	f000 f85a 	bl	800cd00 <icuInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800cc4c:	f000 f8a8 	bl	800cda0 <sdInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800cc50:	f000 f90e 	bl	800ce70 <usbInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800cc54:	f001 fe4c 	bl	800e8f0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800cc58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800cc5c:	f000 b900 	b.w	800ce60 <stInit>
 800cc60:	0800ede0 	.word	0x0800ede0
	...

0800cc70 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800cc70:	f000 bf6e 	b.w	800db50 <can_lld_init>
	...

0800cc80 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800cc80:	b4f0      	push	{r4, r5, r6, r7}

  canp->state    = CAN_STOP;
 800cc82:	2201      	movs	r2, #1
  canp->config   = NULL;
 800cc84:	2300      	movs	r3, #0
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800cc86:	f100 0718 	add.w	r7, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800cc8a:	f100 061c 	add.w	r6, r0, #28
  osalEventObjectInit(&canp->error_event);
 800cc8e:	f100 0520 	add.w	r5, r0, #32
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800cc92:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800cc96:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800cc9a:	7002      	strb	r2, [r0, #0]
  canp->config   = NULL;
 800cc9c:	6043      	str	r3, [r0, #4]
  osalThreadQueueObjectInit(&canp->txqueue);
 800cc9e:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800cca2:	f100 0310 	add.w	r3, r0, #16
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800cca6:	6187      	str	r7, [r0, #24]
 800cca8:	61c6      	str	r6, [r0, #28]
 800ccaa:	6205      	str	r5, [r0, #32]
 800ccac:	6244      	str	r4, [r0, #36]	; 0x24
 800ccae:	6281      	str	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800ccb0:	6082      	str	r2, [r0, #8]
  tqp->p_prev = (thread_t *)tqp;
 800ccb2:	60c2      	str	r2, [r0, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800ccb4:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800ccb6:	6143      	str	r3, [r0, #20]
  osalEventObjectInit(&canp->error_event);
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
}
 800ccb8:	bcf0      	pop	{r4, r5, r6, r7}
 800ccba:	4770      	bx	lr
 800ccbc:	0000      	movs	r0, r0
	...

0800ccc0 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
 800ccc0:	f001 bc7e 	b.w	800e5c0 <gpt_lld_init>
	...

0800ccd0 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800ccd0:	2201      	movs	r2, #1
  gptp->config = NULL;
 800ccd2:	2300      	movs	r3, #0
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800ccd4:	7002      	strb	r2, [r0, #0]
  gptp->config = NULL;
 800ccd6:	6043      	str	r3, [r0, #4]
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	0000      	movs	r0, r0
	...

0800cce0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800cce0:	f001 b976 	b.w	800dfd0 <i2c_lld_init>
	...

0800ccf0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800ccf0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800ccf2:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800ccf4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800ccf6:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800ccf8:	300c      	adds	r0, #12
 800ccfa:	f7ff bd99 	b.w	800c830 <chMtxObjectInit>
 800ccfe:	bf00      	nop

0800cd00 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800cd00:	f001 bcbe 	b.w	800e680 <icu_lld_init>
	...

0800cd10 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800cd10:	2201      	movs	r2, #1
  icup->config = NULL;
 800cd12:	2300      	movs	r3, #0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800cd14:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800cd16:	6043      	str	r3, [r0, #4]
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	0000      	movs	r0, r0
	...

0800cd20 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800cd20:	300c      	adds	r0, #12
 800cd22:	f7ff be15 	b.w	800c950 <chIQReadTimeout>
 800cd26:	bf00      	nop
	...

0800cd30 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800cd30:	300c      	adds	r0, #12
 800cd32:	f04f 33ff 	mov.w	r3, #4294967295
 800cd36:	f7ff be0b 	b.w	800c950 <chIQReadTimeout>
 800cd3a:	bf00      	nop
 800cd3c:	0000      	movs	r0, r0
	...

0800cd40 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800cd40:	3030      	adds	r0, #48	; 0x30
 800cd42:	f7ff bea5 	b.w	800ca90 <chOQWriteTimeout>
 800cd46:	bf00      	nop
	...

0800cd50 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800cd50:	3030      	adds	r0, #48	; 0x30
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295
 800cd56:	f7ff be9b 	b.w	800ca90 <chOQWriteTimeout>
 800cd5a:	bf00      	nop
 800cd5c:	0000      	movs	r0, r0
	...

0800cd60 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800cd60:	300c      	adds	r0, #12
 800cd62:	f7ff bdcd 	b.w	800c900 <chIQGetTimeout>
 800cd66:	bf00      	nop
	...

0800cd70 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800cd70:	300c      	adds	r0, #12
 800cd72:	f04f 31ff 	mov.w	r1, #4294967295
 800cd76:	f7ff bdc3 	b.w	800c900 <chIQGetTimeout>
 800cd7a:	bf00      	nop
 800cd7c:	0000      	movs	r0, r0
	...

0800cd80 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800cd80:	3030      	adds	r0, #48	; 0x30
 800cd82:	f7ff be35 	b.w	800c9f0 <chOQPutTimeout>
 800cd86:	bf00      	nop
	...

0800cd90 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800cd90:	3030      	adds	r0, #48	; 0x30
 800cd92:	f04f 32ff 	mov.w	r2, #4294967295
 800cd96:	f7ff be2b 	b.w	800c9f0 <chOQPutTimeout>
 800cd9a:	bf00      	nop
 800cd9c:	0000      	movs	r0, r0
	...

0800cda0 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 800cda0:	f001 bd36 	b.w	800e810 <sd_lld_init>
	...

0800cdb0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800cdb0:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 800cdb2:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <sdObjectInit+0x40>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 800cdb8:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800cdbc:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800cdbe:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800cdc0:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	6060      	str	r0, [r4, #4]
 800cdc6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800cdca:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800cdce:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800cdd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdd4:	f7ff fd64 	bl	800c8a0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800cdd8:	9400      	str	r4, [sp, #0]
 800cdda:	462b      	mov	r3, r5
 800cddc:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800cde0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800cde4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cde8:	f7ff fdf2 	bl	800c9d0 <chOQObjectInit>
}
 800cdec:	b002      	add	sp, #8
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
 800cdf0:	0800ec80 	.word	0x0800ec80
	...

0800ce00 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 800ce00:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ce02:	2320      	movs	r3, #32
 800ce04:	4604      	mov	r4, r0
 800ce06:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 800ce0a:	f001 fd19 	bl	800e840 <sd_lld_start>
  sdp->state = SD_READY;
 800ce0e:	2302      	movs	r3, #2
 800ce10:	7223      	strb	r3, [r4, #8]
 800ce12:	2300      	movs	r3, #0
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	bf00      	nop
 800ce1c:	0000      	movs	r0, r0
	...

0800ce20 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 800ce20:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800ce22:	6943      	ldr	r3, [r0, #20]
 800ce24:	4604      	mov	r4, r0
 800ce26:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800ce28:	b13b      	cbz	r3, 800ce3a <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f104 000c 	add.w	r0, r4, #12
 800ce30:	f7ff fd46 	bl	800c8c0 <chIQPutI>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	db0b      	blt.n	800ce50 <sdIncomingDataI+0x30>
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800ce3a:	2104      	movs	r1, #4
 800ce3c:	4408      	add	r0, r1
 800ce3e:	f7ff fd17 	bl	800c870 <chEvtBroadcastFlagsI>
 800ce42:	4629      	mov	r1, r5
 800ce44:	f104 000c 	add.w	r0, r4, #12
 800ce48:	f7ff fd3a 	bl	800c8c0 <chIQPutI>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	daf3      	bge.n	800ce38 <sdIncomingDataI+0x18>
 800ce50:	1d20      	adds	r0, r4, #4
 800ce52:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 800ce54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce58:	f7ff bd0a 	b.w	800c870 <chEvtBroadcastFlagsI>
 800ce5c:	0000      	movs	r0, r0
	...

0800ce60 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800ce60:	f001 bc2e 	b.w	800e6c0 <st_lld_init>
	...

0800ce70 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800ce70:	f001 b8c6 	b.w	800e000 <usb_lld_init>
	...

0800ce80 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800ce80:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800ce82:	2201      	movs	r2, #1
 800ce84:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800ce86:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800ce88:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800ce8a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800ce8c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800ce8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800ce90:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800ce92:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800ce94:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800ce96:	8143      	strh	r3, [r0, #10]
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	0000      	movs	r0, r0
	...

0800cea0 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800cea0:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800cea2:	2102      	movs	r1, #2
 800cea4:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800cea6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800ceaa:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800ceae:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800ceb2:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 800ceb4:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800ceb6:	60c2      	str	r2, [r0, #12]
 800ceb8:	6102      	str	r2, [r0, #16]
 800ceba:	6142      	str	r2, [r0, #20]
 800cebc:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800cebe:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800cec2:	f001 b8b5 	b.w	800e030 <usb_lld_reset>
 800cec6:	bf00      	nop
	...

0800ced0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800ced2:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800ced4:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800ced6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800ceda:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800cede:	f001 f93f 	bl	800e160 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800cee2:	6863      	ldr	r3, [r4, #4]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d036      	beq.n	800cf58 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 800ceea:	4620      	mov	r0, r4
 800ceec:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d032      	beq.n	800cf58 <_usb_ep0setup+0x88>
 800cef2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800cef4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800cef8:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800cefc:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800cf00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800cf04:	4282      	cmp	r2, r0
    usbp->ep0n = max;
 800cf06:	bf3c      	itt	cc
 800cf08:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800cf0a:	4610      	movcc	r0, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800cf0c:	061a      	lsls	r2, r3, #24
 800cf0e:	f100 80ab 	bmi.w	800d068 <_usb_ep0setup+0x198>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800cf12:	2800      	cmp	r0, #0
 800cf14:	f000 808b 	beq.w	800d02e <_usb_ep0setup+0x15e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800cf18:	68e3      	ldr	r3, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800cf1a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800cf1c:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800cf1e:	2200      	movs	r2, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800cf20:	2104      	movs	r1, #4
 800cf22:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800cf26:	4611      	mov	r1, r2
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800cf28:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800cf2a:	6058      	str	r0, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800cf2c:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800cf2e:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800cf30:	4620      	mov	r0, r4
 800cf32:	f001 f925 	bl	800e180 <usb_lld_prepare_receive>
 800cf36:	2320      	movs	r3, #32
 800cf38:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800cf3c:	8963      	ldrh	r3, [r4, #10]
 800cf3e:	f013 0101 	ands.w	r1, r3, #1
 800cf42:	d105      	bne.n	800cf50 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800cf44:	f043 0301 	orr.w	r3, r3, #1
 800cf48:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f001 fab0 	bl	800e4b0 <usb_lld_start_out>
 800cf50:	2300      	movs	r3, #0
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800cf58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cf5c:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 800cf60:	461e      	mov	r6, r3
 800cf62:	d011      	beq.n	800cf88 <_usb_ep0setup+0xb8>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800cf64:	2100      	movs	r1, #0
 800cf66:	4620      	mov	r0, r4
 800cf68:	f001 fada 	bl	800e520 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f001 fac6 	bl	800e500 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800cf74:	6863      	ldr	r3, [r4, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	b113      	cbz	r3, 800cf80 <_usb_ep0setup+0xb0>
 800cf7a:	2105      	movs	r1, #5
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800cf80:	2306      	movs	r3, #6
 800cf82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800cf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800cf88:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800cf8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf90:	ea42 2500 	orr.w	r5, r2, r0, lsl #8
 800cf94:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800cf98:	f000 80eb 	beq.w	800d172 <_usb_ep0setup+0x2a2>
 800cf9c:	d916      	bls.n	800cfcc <_usb_ep0setup+0xfc>
 800cf9e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800cfa2:	f000 80ce 	beq.w	800d142 <_usb_ep0setup+0x272>
 800cfa6:	d92f      	bls.n	800d008 <_usb_ep0setup+0x138>
 800cfa8:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800cfac:	d076      	beq.n	800d09c <_usb_ep0setup+0x1cc>
 800cfae:	f640 4202 	movw	r2, #3074	; 0xc02
 800cfb2:	4295      	cmp	r5, r2
 800cfb4:	f000 80ef 	beq.w	800d196 <_usb_ep0setup+0x2c6>
 800cfb8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cfbc:	d1d2      	bne.n	800cf64 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800cfbe:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	6427      	str	r7, [r4, #64]	; 0x40
 800cfc6:	63a2      	str	r2, [r4, #56]	; 0x38
 800cfc8:	63e0      	str	r0, [r4, #60]	; 0x3c
 800cfca:	e795      	b.n	800cef8 <_usb_ep0setup+0x28>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800cfcc:	2d02      	cmp	r5, #2
 800cfce:	f000 80a2 	beq.w	800d116 <_usb_ep0setup+0x246>
 800cfd2:	f240 8097 	bls.w	800d104 <_usb_ep0setup+0x234>
 800cfd6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800cfda:	f000 8084 	beq.w	800d0e6 <_usb_ep0setup+0x216>
 800cfde:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800cfe2:	d1bf      	bne.n	800cf64 <_usb_ep0setup+0x94>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800cfe4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1bb      	bne.n	800cf64 <_usb_ep0setup+0x94>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800cfec:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800cff0:	f013 010f 	ands.w	r1, r3, #15
 800cff4:	d015      	beq.n	800d022 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800cff6:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800cff8:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800cffa:	f100 80f4 	bmi.w	800d1e6 <_usb_ep0setup+0x316>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800cffe:	f001 fa9f 	bl	800e540 <usb_lld_clear_out>
 800d002:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d006:	e00c      	b.n	800d022 <_usb_ep0setup+0x152>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800d008:	f240 3302 	movw	r3, #770	; 0x302
 800d00c:	429d      	cmp	r5, r3
 800d00e:	d057      	beq.n	800d0c0 <_usb_ep0setup+0x1f0>
 800d010:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800d014:	d1a6      	bne.n	800cf64 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800d016:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800d01a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d01e:	f000 80d0 	beq.w	800d1c2 <_usb_ep0setup+0x2f2>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800d022:	2300      	movs	r3, #0
 800d024:	63a3      	str	r3, [r4, #56]	; 0x38
 800d026:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d028:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800d02a:	0633      	lsls	r3, r6, #24
 800d02c:	d42a      	bmi.n	800d084 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d02e:	68e3      	ldr	r3, [r4, #12]
 800d030:	695a      	ldr	r2, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800d032:	2105      	movs	r1, #5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800d034:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800d036:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800d03a:	4619      	mov	r1, r3
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800d03c:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 800d03e:	60d3      	str	r3, [r2, #12]
  isp->txsize             = n;
 800d040:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 800d042:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800d044:	4620      	mov	r0, r4
 800d046:	f001 f91b 	bl	800e280 <usb_lld_prepare_transmit>
 800d04a:	2320      	movs	r3, #32
 800d04c:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800d050:	8923      	ldrh	r3, [r4, #8]
 800d052:	f013 0101 	ands.w	r1, r3, #1
 800d056:	f47f af7b 	bne.w	800cf50 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800d05a:	f043 0301 	orr.w	r3, r3, #1
 800d05e:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800d060:	4620      	mov	r0, r4
 800d062:	f001 fa35 	bl	800e4d0 <usb_lld_start_in>
 800d066:	e773      	b.n	800cf50 <_usb_ep0setup+0x80>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800d068:	b160      	cbz	r0, 800d084 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d06a:	68e3      	ldr	r3, [r4, #12]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800d06c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d06e:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = false;
 800d070:	2200      	movs	r2, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 800d072:	2101      	movs	r1, #1
 800d074:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800d078:	4611      	mov	r1, r2
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800d07a:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800d07c:	6058      	str	r0, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800d07e:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800d080:	609a      	str	r2, [r3, #8]
 800d082:	e7df      	b.n	800d044 <_usb_ep0setup+0x174>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800d084:	68e3      	ldr	r3, [r4, #12]
 800d086:	699a      	ldr	r2, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800d088:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800d08a:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800d08c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800d090:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800d092:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800d094:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800d096:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800d098:	6093      	str	r3, [r2, #8]
 800d09a:	e749      	b.n	800cf30 <_usb_ep0setup+0x60>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800d09c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0a0:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d17d      	bne.n	800d1a4 <_usb_ep0setup+0x2d4>
      usbp->state = USB_SELECTED;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d0b6      	beq.n	800d022 <_usb_ep0setup+0x152>
 800d0b4:	2102      	movs	r1, #2
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4798      	blx	r3
 800d0ba:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d0be:	e7b0      	b.n	800d022 <_usb_ep0setup+0x152>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800d0c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f47f af4d 	bne.w	800cf64 <_usb_ep0setup+0x94>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800d0ca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d0ce:	f013 010f 	ands.w	r1, r3, #15
 800d0d2:	d0a6      	beq.n	800d022 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800d0d4:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800d0d6:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800d0d8:	f100 808a 	bmi.w	800d1f0 <_usb_ep0setup+0x320>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800d0dc:	f001 fa10 	bl	800e500 <usb_lld_stall_out>
 800d0e0:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d0e4:	e79d      	b.n	800d022 <_usb_ep0setup+0x152>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800d0e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	f47f af3a 	bne.w	800cf64 <_usb_ep0setup+0x94>
      usbp->status &= ~2U;
 800d0f0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800d0f4:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800d0f6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800d0fa:	63e7      	str	r7, [r4, #60]	; 0x3c
 800d0fc:	6427      	str	r7, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800d0fe:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800d102:	e792      	b.n	800d02a <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800d104:	2d00      	cmp	r5, #0
 800d106:	d143      	bne.n	800d190 <_usb_ep0setup+0x2c0>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800d108:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800d10c:	2002      	movs	r0, #2
 800d10e:	6425      	str	r5, [r4, #64]	; 0x40
 800d110:	63a2      	str	r2, [r4, #56]	; 0x38
 800d112:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d114:	e6f0      	b.n	800cef8 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800d116:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800d11a:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800d11e:	4620      	mov	r0, r4
 800d120:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800d124:	d141      	bne.n	800d1aa <_usb_ep0setup+0x2da>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800d126:	f000 fffb 	bl	800e120 <usb_lld_get_status_out>
 800d12a:	2801      	cmp	r0, #1
 800d12c:	d041      	beq.n	800d1b2 <_usb_ep0setup+0x2e2>
 800d12e:	2802      	cmp	r0, #2
 800d130:	f47f af18 	bne.w	800cf64 <_usb_ep0setup+0x94>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800d134:	4b31      	ldr	r3, [pc, #196]	; (800d1fc <_usb_ep0setup+0x32c>)
 800d136:	63a3      	str	r3, [r4, #56]	; 0x38
 800d138:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d13a:	6427      	str	r7, [r4, #64]	; 0x40
 800d13c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d140:	e6da      	b.n	800cef8 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800d142:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800d146:	6861      	ldr	r1, [r4, #4]
 800d148:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d14c:	684d      	ldr	r5, [r1, #4]
 800d14e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800d152:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800d156:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d15a:	4620      	mov	r0, r4
 800d15c:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800d15e:	2800      	cmp	r0, #0
 800d160:	f43f af00 	beq.w	800cf64 <_usb_ep0setup+0x94>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800d164:	c809      	ldmia	r0, {r0, r3}
 800d166:	6427      	str	r7, [r4, #64]	; 0x40
 800d168:	63a3      	str	r3, [r4, #56]	; 0x38
 800d16a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d16c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d170:	e6c2      	b.n	800cef8 <_usb_ep0setup+0x28>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800d172:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d176:	2b01      	cmp	r3, #1
 800d178:	f47f aef4 	bne.w	800cf64 <_usb_ep0setup+0x94>
      usbp->status |= 2U;
 800d17c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800d180:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800d182:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800d186:	63e7      	str	r7, [r4, #60]	; 0x3c
 800d188:	6427      	str	r7, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800d18a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800d18e:	e74c      	b.n	800d02a <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800d190:	2d01      	cmp	r5, #1
 800d192:	f47f aee7 	bne.w	800cf64 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800d196:	4a1a      	ldr	r2, [pc, #104]	; (800d200 <_usb_ep0setup+0x330>)
 800d198:	63a2      	str	r2, [r4, #56]	; 0x38
 800d19a:	2002      	movs	r0, #2
 800d19c:	2200      	movs	r2, #0
 800d19e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d1a0:	6422      	str	r2, [r4, #64]	; 0x40
 800d1a2:	e6a9      	b.n	800cef8 <_usb_ep0setup+0x28>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800d1a4:	2304      	movs	r3, #4
 800d1a6:	7023      	strb	r3, [r4, #0]
 800d1a8:	e780      	b.n	800d0ac <_usb_ep0setup+0x1dc>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800d1aa:	f000 ffc9 	bl	800e140 <usb_lld_get_status_in>
 800d1ae:	2801      	cmp	r0, #1
 800d1b0:	d1bd      	bne.n	800d12e <_usb_ep0setup+0x25e>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800d1b2:	4b14      	ldr	r3, [pc, #80]	; (800d204 <_usb_ep0setup+0x334>)
 800d1b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1b6:	63e5      	str	r5, [r4, #60]	; 0x3c
 800d1b8:	6427      	str	r7, [r4, #64]	; 0x40
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d1c0:	e69a      	b.n	800cef8 <_usb_ep0setup+0x28>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 800d1c2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d1c6:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 ff98 	bl	800e100 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800d1d0:	6863      	ldr	r3, [r4, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	b113      	cbz	r3, 800d1dc <_usb_ep0setup+0x30c>
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	4620      	mov	r0, r4
 800d1da:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d1e2:	7023      	strb	r3, [r4, #0]
 800d1e4:	e71d      	b.n	800d022 <_usb_ep0setup+0x152>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800d1e6:	f001 f9bb 	bl	800e560 <usb_lld_clear_in>
 800d1ea:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d1ee:	e718      	b.n	800d022 <_usb_ep0setup+0x152>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800d1f0:	f001 f996 	bl	800e520 <usb_lld_stall_in>
 800d1f4:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800d1f8:	e713      	b.n	800d022 <_usb_ep0setup+0x152>
 800d1fa:	bf00      	nop
 800d1fc:	0800ecb0 	.word	0x0800ecb0
 800d200:	0800eca0 	.word	0x0800eca0
 800d204:	0800ecc0 	.word	0x0800ecc0
	...

0800d210 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800d210:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800d214:	b510      	push	{r4, lr}
 800d216:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800d218:	2b06      	cmp	r3, #6
 800d21a:	d815      	bhi.n	800d248 <_usb_ep0in+0x38>
 800d21c:	e8df f003 	tbb	[pc, r3]
 800d220:	041c3b04 	.word	0x041c3b04
 800d224:	1504      	.short	0x1504
 800d226:	04          	.byte	0x04
 800d227:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800d228:	2100      	movs	r1, #0
 800d22a:	f001 f979 	bl	800e520 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800d22e:	2100      	movs	r1, #0
 800d230:	4620      	mov	r0, r4
 800d232:	f001 f965 	bl	800e500 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800d236:	6863      	ldr	r3, [r4, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	b113      	cbz	r3, 800d242 <_usb_ep0in+0x32>
 800d23c:	2105      	movs	r1, #5
 800d23e:	4620      	mov	r0, r4
 800d240:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800d242:	2306      	movs	r3, #6
 800d244:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800d248:	bd10      	pop	{r4, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800d24a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d24c:	b103      	cbz	r3, 800d250 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 800d24e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800d250:	2300      	movs	r3, #0
 800d252:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800d256:	bd10      	pop	{r4, pc}
 800d258:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800d25a:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800d25c:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800d25e:	2300      	movs	r3, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800d260:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800d264:	4620      	mov	r0, r4
 800d266:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800d268:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800d26a:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800d26c:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800d26e:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_receive(usbp, ep);
 800d270:	f000 ff86 	bl	800e180 <usb_lld_prepare_receive>
 800d274:	2320      	movs	r3, #32
 800d276:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800d27a:	8963      	ldrh	r3, [r4, #10]
 800d27c:	f013 0101 	ands.w	r1, r3, #1
 800d280:	d105      	bne.n	800d28e <_usb_ep0in+0x7e>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800d282:	f043 0301 	orr.w	r3, r3, #1
 800d286:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800d288:	4620      	mov	r0, r4
 800d28a:	f001 f911 	bl	800e4b0 <usb_lld_start_out>
 800d28e:	2300      	movs	r3, #0
 800d290:	f383 8811 	msr	BASEPRI, r3
 800d294:	bd10      	pop	{r4, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800d296:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800d29a:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800d29e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d2a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d2a4:	4293      	cmp	r3, r2
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800d2a6:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800d2a8:	d9d7      	bls.n	800d25a <_usb_ep0in+0x4a>
 800d2aa:	8a18      	ldrh	r0, [r3, #16]
 800d2ac:	fbb2 f1f0 	udiv	r1, r2, r0
 800d2b0:	fb00 2211 	mls	r2, r0, r1, r2
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	d1d0      	bne.n	800d25a <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d2b8:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800d2ba:	4611      	mov	r1, r2
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800d2bc:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800d2be:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800d2c0:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800d2c2:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f000 ffdb 	bl	800e280 <usb_lld_prepare_transmit>
 800d2ca:	2320      	movs	r3, #32
 800d2cc:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800d2d0:	8923      	ldrh	r3, [r4, #8]
 800d2d2:	f013 0101 	ands.w	r1, r3, #1
 800d2d6:	d105      	bne.n	800d2e4 <_usb_ep0in+0xd4>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800d2d8:	f043 0301 	orr.w	r3, r3, #1
 800d2dc:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f001 f8f6 	bl	800e4d0 <usb_lld_start_in>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f383 8811 	msr	BASEPRI, r3
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800d2f0:	bd10      	pop	{r4, pc}
 800d2f2:	bf00      	nop
	...

0800d300 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800d300:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800d304:	2a06      	cmp	r2, #6
 800d306:	d80c      	bhi.n	800d322 <_usb_ep0out+0x22>
 800d308:	2301      	movs	r3, #1
 800d30a:	4093      	lsls	r3, r2
 800d30c:	f013 0f67 	tst.w	r3, #103	; 0x67
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800d310:	b510      	push	{r4, lr}
 800d312:	4604      	mov	r4, r0
 800d314:	d112      	bne.n	800d33c <_usb_ep0out+0x3c>
 800d316:	f013 0208 	ands.w	r2, r3, #8
 800d31a:	d103      	bne.n	800d324 <_usb_ep0out+0x24>
 800d31c:	06db      	lsls	r3, r3, #27
 800d31e:	d41e      	bmi.n	800d35e <_usb_ep0out+0x5e>
 800d320:	bd10      	pop	{r4, pc}
 800d322:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800d324:	68c3      	ldr	r3, [r0, #12]
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1f8      	bne.n	800d320 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800d32e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d330:	b103      	cbz	r3, 800d334 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 800d332:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800d334:	2300      	movs	r3, #0
 800d336:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800d33a:	bd10      	pop	{r4, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800d33c:	2100      	movs	r1, #0
 800d33e:	f001 f8ef 	bl	800e520 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800d342:	2100      	movs	r1, #0
 800d344:	4620      	mov	r0, r4
 800d346:	f001 f8db 	bl	800e500 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800d34a:	6863      	ldr	r3, [r4, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	b113      	cbz	r3, 800d356 <_usb_ep0out+0x56>
 800d350:	2105      	movs	r1, #5
 800d352:	4620      	mov	r0, r4
 800d354:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800d356:	2306      	movs	r3, #6
 800d358:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800d35c:	bd10      	pop	{r4, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800d35e:	68c3      	ldr	r3, [r0, #12]
 800d360:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800d362:	2105      	movs	r1, #5
 800d364:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800d368:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800d36a:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800d36c:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800d36e:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800d370:	4611      	mov	r1, r2
 800d372:	f000 ff85 	bl	800e280 <usb_lld_prepare_transmit>
 800d376:	2320      	movs	r3, #32
 800d378:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800d37c:	8923      	ldrh	r3, [r4, #8]
 800d37e:	f013 0101 	ands.w	r1, r3, #1
 800d382:	d003      	beq.n	800d38c <_usb_ep0out+0x8c>
 800d384:	2300      	movs	r3, #0
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	bd10      	pop	{r4, pc}
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800d38c:	f043 0301 	orr.w	r3, r3, #1
 800d390:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800d392:	4620      	mov	r0, r4
 800d394:	f001 f89c 	bl	800e4d0 <usb_lld_start_in>
 800d398:	e7f4      	b.n	800d384 <_usb_ep0out+0x84>
 800d39a:	bf00      	nop
 800d39c:	0000      	movs	r0, r0
	...

0800d3a0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800d3a0:	0943      	lsrs	r3, r0, #5
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	b410      	push	{r4}
 800d3a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800d3aa:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800d3ae:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800d3b2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800d3b6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800d3b8:	f000 001f 	and.w	r0, r0, #31
 800d3bc:	2201      	movs	r2, #1
 800d3be:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800d3c2:	b2c9      	uxtb	r1, r1
 800d3c4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800d3c8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800d3cc:	6018      	str	r0, [r3, #0]
}
 800d3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3d2:	4770      	bx	lr
	...

0800d3e0 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800d3e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800d3e4:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800d3e8:	0109      	lsls	r1, r1, #4
 800d3ea:	b2c9      	uxtb	r1, r1
 800d3ec:	7601      	strb	r1, [r0, #24]
 800d3ee:	4770      	bx	lr

0800d3f0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800d3f0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800d3f2:	4b07      	ldr	r3, [pc, #28]	; (800d410 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800d3f4:	4a07      	ldr	r2, [pc, #28]	; (800d414 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800d3f6:	6819      	ldr	r1, [r3, #0]
 800d3f8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800d3fc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800d3fe:	6813      	ldr	r3, [r2, #0]
 800d400:	b10b      	cbz	r3, 800d406 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800d402:	6850      	ldr	r0, [r2, #4]
 800d404:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800d406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d40a:	f7ff bbe1 	b.w	800cbd0 <_port_irq_epilogue>
 800d40e:	bf00      	nop
 800d410:	40026000 	.word	0x40026000
 800d414:	20000a90 	.word	0x20000a90
	...

0800d420 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800d420:	4b08      	ldr	r3, [pc, #32]	; (800d444 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800d422:	4809      	ldr	r0, [pc, #36]	; (800d448 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800d424:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800d426:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800d428:	0989      	lsrs	r1, r1, #6
 800d42a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800d42e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 800d430:	018c      	lsls	r4, r1, #6
 800d432:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800d434:	b10a      	cbz	r2, 800d43a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800d436:	68c0      	ldr	r0, [r0, #12]
 800d438:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d43e:	f7ff bbc7 	b.w	800cbd0 <_port_irq_epilogue>
 800d442:	bf00      	nop
 800d444:	40026000 	.word	0x40026000
 800d448:	20000a90 	.word	0x20000a90
 800d44c:	00000000 	.word	0x00000000

0800d450 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800d450:	4b08      	ldr	r3, [pc, #32]	; (800d474 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800d452:	4809      	ldr	r0, [pc, #36]	; (800d478 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800d454:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800d456:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800d458:	0c09      	lsrs	r1, r1, #16
 800d45a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800d45e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 800d460:	040c      	lsls	r4, r1, #16
 800d462:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800d464:	b10a      	cbz	r2, 800d46a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800d466:	6940      	ldr	r0, [r0, #20]
 800d468:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d46e:	f7ff bbaf 	b.w	800cbd0 <_port_irq_epilogue>
 800d472:	bf00      	nop
 800d474:	40026000 	.word	0x40026000
 800d478:	20000a90 	.word	0x20000a90
 800d47c:	00000000 	.word	0x00000000

0800d480 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800d480:	4b08      	ldr	r3, [pc, #32]	; (800d4a4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800d482:	4809      	ldr	r0, [pc, #36]	; (800d4a8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800d484:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800d486:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800d488:	0d89      	lsrs	r1, r1, #22
 800d48a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800d48e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 800d490:	058c      	lsls	r4, r1, #22
 800d492:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800d494:	b10a      	cbz	r2, 800d49a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800d496:	69c0      	ldr	r0, [r0, #28]
 800d498:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d49e:	f7ff bb97 	b.w	800cbd0 <_port_irq_epilogue>
 800d4a2:	bf00      	nop
 800d4a4:	40026000 	.word	0x40026000
 800d4a8:	20000a90 	.word	0x20000a90
 800d4ac:	00000000 	.word	0x00000000

0800d4b0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800d4b0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800d4b2:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800d4b4:	4807      	ldr	r0, [pc, #28]	; (800d4d4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800d4b6:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800d4b8:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800d4ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800d4be:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800d4c0:	b10a      	cbz	r2, 800d4c6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800d4c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d4c4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d4c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d4ca:	f7ff bb81 	b.w	800cbd0 <_port_irq_epilogue>
 800d4ce:	bf00      	nop
 800d4d0:	40026000 	.word	0x40026000
 800d4d4:	20000a90 	.word	0x20000a90
	...

0800d4e0 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800d4e0:	4b08      	ldr	r3, [pc, #32]	; (800d504 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800d4e2:	4809      	ldr	r0, [pc, #36]	; (800d508 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800d4e4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800d4e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800d4e8:	0989      	lsrs	r1, r1, #6
 800d4ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800d4ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 800d4f0:	018c      	lsls	r4, r1, #6
 800d4f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800d4f4:	b10a      	cbz	r2, 800d4fa <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800d4f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d4f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d4fe:	f7ff bb67 	b.w	800cbd0 <_port_irq_epilogue>
 800d502:	bf00      	nop
 800d504:	40026000 	.word	0x40026000
 800d508:	20000a90 	.word	0x20000a90
 800d50c:	00000000 	.word	0x00000000

0800d510 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800d510:	4b08      	ldr	r3, [pc, #32]	; (800d534 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800d512:	4809      	ldr	r0, [pc, #36]	; (800d538 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800d514:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800d516:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800d518:	0c09      	lsrs	r1, r1, #16
 800d51a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800d51e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 800d520:	040c      	lsls	r4, r1, #16
 800d522:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800d524:	b10a      	cbz	r2, 800d52a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800d526:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d528:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d52e:	f7ff bb4f 	b.w	800cbd0 <_port_irq_epilogue>
 800d532:	bf00      	nop
 800d534:	40026000 	.word	0x40026000
 800d538:	20000a90 	.word	0x20000a90
 800d53c:	00000000 	.word	0x00000000

0800d540 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800d540:	4b08      	ldr	r3, [pc, #32]	; (800d564 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800d542:	4809      	ldr	r0, [pc, #36]	; (800d568 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800d544:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800d546:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800d548:	0d89      	lsrs	r1, r1, #22
 800d54a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 800d54e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 800d550:	058c      	lsls	r4, r1, #22
 800d552:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800d554:	b10a      	cbz	r2, 800d55a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800d556:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800d558:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d55e:	f7ff bb37 	b.w	800cbd0 <_port_irq_epilogue>
 800d562:	bf00      	nop
 800d564:	40026000 	.word	0x40026000
 800d568:	20000a90 	.word	0x20000a90
 800d56c:	00000000 	.word	0x00000000

0800d570 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800d570:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800d574:	4807      	ldr	r0, [pc, #28]	; (800d594 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800d576:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800d578:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800d57a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800d57e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800d580:	b10a      	cbz	r2, 800d586 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800d582:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800d584:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d58a:	f7ff bb21 	b.w	800cbd0 <_port_irq_epilogue>
 800d58e:	bf00      	nop
 800d590:	40026400 	.word	0x40026400
 800d594:	20000a90 	.word	0x20000a90
	...

0800d5a0 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800d5a0:	4b08      	ldr	r3, [pc, #32]	; (800d5c4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800d5a2:	4809      	ldr	r0, [pc, #36]	; (800d5c8 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800d5a4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800d5a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800d5a8:	0989      	lsrs	r1, r1, #6
 800d5aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800d5ae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 800d5b0:	018c      	lsls	r4, r1, #6
 800d5b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800d5b4:	b10a      	cbz	r2, 800d5ba <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800d5b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d5b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d5be:	f7ff bb07 	b.w	800cbd0 <_port_irq_epilogue>
 800d5c2:	bf00      	nop
 800d5c4:	40026400 	.word	0x40026400
 800d5c8:	20000a90 	.word	0x20000a90
 800d5cc:	00000000 	.word	0x00000000

0800d5d0 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800d5d0:	4b08      	ldr	r3, [pc, #32]	; (800d5f4 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800d5d2:	4809      	ldr	r0, [pc, #36]	; (800d5f8 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800d5d4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800d5d6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800d5d8:	0c09      	lsrs	r1, r1, #16
 800d5da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800d5de:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 800d5e0:	040c      	lsls	r4, r1, #16
 800d5e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800d5e4:	b10a      	cbz	r2, 800d5ea <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800d5e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800d5e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d5ee:	f7ff baef 	b.w	800cbd0 <_port_irq_epilogue>
 800d5f2:	bf00      	nop
 800d5f4:	40026400 	.word	0x40026400
 800d5f8:	20000a90 	.word	0x20000a90
 800d5fc:	00000000 	.word	0x00000000

0800d600 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800d600:	4b08      	ldr	r3, [pc, #32]	; (800d624 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800d602:	4809      	ldr	r0, [pc, #36]	; (800d628 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800d604:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800d606:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800d608:	0d89      	lsrs	r1, r1, #22
 800d60a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800d60e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 800d610:	058c      	lsls	r4, r1, #22
 800d612:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800d614:	b10a      	cbz	r2, 800d61a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800d616:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800d618:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d61e:	f7ff bad7 	b.w	800cbd0 <_port_irq_epilogue>
 800d622:	bf00      	nop
 800d624:	40026400 	.word	0x40026400
 800d628:	20000a90 	.word	0x20000a90
 800d62c:	00000000 	.word	0x00000000

0800d630 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800d630:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800d632:	4b07      	ldr	r3, [pc, #28]	; (800d650 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800d634:	4807      	ldr	r0, [pc, #28]	; (800d654 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800d636:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800d638:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800d63a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800d63e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800d640:	b10a      	cbz	r2, 800d646 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800d642:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800d644:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d64a:	f7ff bac1 	b.w	800cbd0 <_port_irq_epilogue>
 800d64e:	bf00      	nop
 800d650:	40026400 	.word	0x40026400
 800d654:	20000a90 	.word	0x20000a90
	...

0800d660 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800d660:	4b08      	ldr	r3, [pc, #32]	; (800d684 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800d662:	4809      	ldr	r0, [pc, #36]	; (800d688 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800d664:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800d666:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800d668:	0989      	lsrs	r1, r1, #6
 800d66a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800d66e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 800d670:	018c      	lsls	r4, r1, #6
 800d672:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800d674:	b10a      	cbz	r2, 800d67a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800d676:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800d678:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d67e:	f7ff baa7 	b.w	800cbd0 <_port_irq_epilogue>
 800d682:	bf00      	nop
 800d684:	40026400 	.word	0x40026400
 800d688:	20000a90 	.word	0x20000a90
 800d68c:	00000000 	.word	0x00000000

0800d690 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800d690:	4b08      	ldr	r3, [pc, #32]	; (800d6b4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800d692:	4809      	ldr	r0, [pc, #36]	; (800d6b8 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800d694:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800d696:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800d698:	0c09      	lsrs	r1, r1, #16
 800d69a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 800d69e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 800d6a0:	040c      	lsls	r4, r1, #16
 800d6a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800d6a4:	b10a      	cbz	r2, 800d6aa <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800d6a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800d6a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d6ae:	f7ff ba8f 	b.w	800cbd0 <_port_irq_epilogue>
 800d6b2:	bf00      	nop
 800d6b4:	40026400 	.word	0x40026400
 800d6b8:	20000a90 	.word	0x20000a90
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800d6c0:	4b08      	ldr	r3, [pc, #32]	; (800d6e4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800d6c2:	4809      	ldr	r0, [pc, #36]	; (800d6e8 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800d6c4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800d6c6:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800d6c8:	0d89      	lsrs	r1, r1, #22
 800d6ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 800d6ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 800d6d0:	058c      	lsls	r4, r1, #22
 800d6d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800d6d4:	b10a      	cbz	r2, 800d6da <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800d6d6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800d6d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800d6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800d6de:	f7ff ba77 	b.w	800cbd0 <_port_irq_epilogue>
 800d6e2:	bf00      	nop
 800d6e4:	40026400 	.word	0x40026400
 800d6e8:	20000a90 	.word	0x20000a90
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800d6f0:	490e      	ldr	r1, [pc, #56]	; (800d72c <dmaInit+0x3c>)
 800d6f2:	4a0f      	ldr	r2, [pc, #60]	; (800d730 <dmaInit+0x40>)
 800d6f4:	480f      	ldr	r0, [pc, #60]	; (800d734 <dmaInit+0x44>)
 800d6f6:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800d6f8:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 800d6fa:	600b      	str	r3, [r1, #0]
 800d6fc:	4c0e      	ldr	r4, [pc, #56]	; (800d738 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800d6fe:	4619      	mov	r1, r3
 800d700:	e001      	b.n	800d706 <dmaInit+0x16>
 800d702:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800d706:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800d708:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800d70c:	3301      	adds	r3, #1
 800d70e:	2b10      	cmp	r3, #16
 800d710:	f102 020c 	add.w	r2, r2, #12
 800d714:	d1f5      	bne.n	800d702 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800d716:	4909      	ldr	r1, [pc, #36]	; (800d73c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800d718:	4a09      	ldr	r2, [pc, #36]	; (800d740 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800d71a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800d71e:	f04f 33ff 	mov.w	r3, #4294967295
 800d722:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 800d724:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800d726:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800d728:	60d3      	str	r3, [r2, #12]
}
 800d72a:	4770      	bx	lr
 800d72c:	20000b10 	.word	0x20000b10
 800d730:	0800ecdc 	.word	0x0800ecdc
 800d734:	40026010 	.word	0x40026010
 800d738:	20000a90 	.word	0x20000a90
 800d73c:	40026000 	.word	0x40026000
 800d740:	40026400 	.word	0x40026400
	...

0800d750 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800d750:	4b17      	ldr	r3, [pc, #92]	; (800d7b0 <hal_lld_init+0x60>)
 800d752:	f04f 31ff 	mov.w	r1, #4294967295
 800d756:	691a      	ldr	r2, [r3, #16]
 800d758:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800d75a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800d75c:	6119      	str	r1, [r3, #16]
 800d75e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800d760:	6958      	ldr	r0, [r3, #20]
 800d762:	6159      	str	r1, [r3, #20]
 800d764:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800d766:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800d768:	4c12      	ldr	r4, [pc, #72]	; (800d7b4 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800d76a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800d76e:	6218      	str	r0, [r3, #32]
 800d770:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800d772:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d774:	6259      	str	r1, [r3, #36]	; 0x24
 800d776:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800d778:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d77a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800d77e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800d780:	6821      	ldr	r1, [r4, #0]
 800d782:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d786:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800d788:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d78a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800d78e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d792:	d003      	beq.n	800d79c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800d794:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d798:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800d79a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800d79c:	4a05      	ldr	r2, [pc, #20]	; (800d7b4 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800d79e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800d7a2:	6853      	ldr	r3, [r2, #4]
 800d7a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7a8:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800d7aa:	f7ff bfa1 	b.w	800d6f0 <dmaInit>
 800d7ae:	bf00      	nop
 800d7b0:	40023800 	.word	0x40023800
 800d7b4:	40007000 	.word	0x40007000
	...

0800d7c0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800d7c0:	492c      	ldr	r1, [pc, #176]	; (800d874 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800d7c2:	4b2d      	ldr	r3, [pc, #180]	; (800d878 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800d7c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800d7c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800d7cc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800d7ce:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800d7d0:	680b      	ldr	r3, [r1, #0]
 800d7d2:	f043 0301 	orr.w	r3, r3, #1
 800d7d6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800d7d8:	680a      	ldr	r2, [r1, #0]
 800d7da:	4b26      	ldr	r3, [pc, #152]	; (800d874 <stm32_clock_init+0xb4>)
 800d7dc:	0790      	lsls	r0, r2, #30
 800d7de:	d5fb      	bpl.n	800d7d8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800d7e0:	689a      	ldr	r2, [r3, #8]
 800d7e2:	f022 0203 	bic.w	r2, r2, #3
 800d7e6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	688b      	ldr	r3, [r1, #8]
 800d7f0:	4a20      	ldr	r2, [pc, #128]	; (800d874 <stm32_clock_init+0xb4>)
 800d7f2:	f013 030c 	ands.w	r3, r3, #12
 800d7f6:	d1fa      	bne.n	800d7ee <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800d7f8:	6811      	ldr	r1, [r2, #0]
 800d7fa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800d7fe:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800d800:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 800d802:	6813      	ldr	r3, [r2, #0]
 800d804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d808:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800d80a:	6811      	ldr	r1, [r2, #0]
 800d80c:	4b19      	ldr	r3, [pc, #100]	; (800d874 <stm32_clock_init+0xb4>)
 800d80e:	0389      	lsls	r1, r1, #14
 800d810:	d5fb      	bpl.n	800d80a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800d812:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d814:	f042 0201 	orr.w	r2, r2, #1
 800d818:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800d81a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d81c:	4915      	ldr	r1, [pc, #84]	; (800d874 <stm32_clock_init+0xb4>)
 800d81e:	0790      	lsls	r0, r2, #30
 800d820:	d5fb      	bpl.n	800d81a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800d822:	4b16      	ldr	r3, [pc, #88]	; (800d87c <stm32_clock_init+0xbc>)
 800d824:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800d826:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800d828:	4a13      	ldr	r2, [pc, #76]	; (800d878 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800d82a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d82e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800d830:	6853      	ldr	r3, [r2, #4]
 800d832:	0459      	lsls	r1, r3, #17
 800d834:	d5fc      	bpl.n	800d830 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800d836:	490f      	ldr	r1, [pc, #60]	; (800d874 <stm32_clock_init+0xb4>)
 800d838:	680a      	ldr	r2, [r1, #0]
 800d83a:	4b0e      	ldr	r3, [pc, #56]	; (800d874 <stm32_clock_init+0xb4>)
 800d83c:	0192      	lsls	r2, r2, #6
 800d83e:	d5fb      	bpl.n	800d838 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800d840:	4a0f      	ldr	r2, [pc, #60]	; (800d880 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800d842:	4910      	ldr	r1, [pc, #64]	; (800d884 <stm32_clock_init+0xc4>)
 800d844:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800d846:	f240 7105 	movw	r1, #1797	; 0x705
 800d84a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800d84c:	689a      	ldr	r2, [r3, #8]
 800d84e:	f042 0202 	orr.w	r2, r2, #2
 800d852:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800d854:	461a      	mov	r2, r3
 800d856:	6893      	ldr	r3, [r2, #8]
 800d858:	4906      	ldr	r1, [pc, #24]	; (800d874 <stm32_clock_init+0xb4>)
 800d85a:	f003 030c 	and.w	r3, r3, #12
 800d85e:	2b08      	cmp	r3, #8
 800d860:	d1f9      	bne.n	800d856 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800d862:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800d864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d868:	644b      	str	r3, [r1, #68]	; 0x44
 800d86a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d86c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d870:	664b      	str	r3, [r1, #100]	; 0x64
 800d872:	4770      	bx	lr
 800d874:	40023800 	.word	0x40023800
 800d878:	40007000 	.word	0x40007000
 800d87c:	07405408 	.word	0x07405408
 800d880:	40023c00 	.word	0x40023c00
 800d884:	38089400 	.word	0x38089400
	...

0800d890 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800d890:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800d892:	4c43      	ldr	r4, [pc, #268]	; (800d9a0 <can_lld_set_filters+0x110>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800d894:	4d43      	ldr	r5, [pc, #268]	; (800d9a4 <can_lld_set_filters+0x114>)
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800d896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d89c:	6423      	str	r3, [r4, #64]	; 0x40

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800d89e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800d8a2:	0c1b      	lsrs	r3, r3, #16
 800d8a4:	041b      	lsls	r3, r3, #16
 800d8a6:	f043 0301 	orr.w	r3, r3, #1
 800d8aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d8ae:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  if (num > 0) {
 800d8b2:	2900      	cmp	r1, #0
 800d8b4:	d05a      	beq.n	800d96c <can_lld_set_filters+0xdc>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800d8bc:	4618      	mov	r0, r3
  if (num > 0) {
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
 800d8be:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
      CAN1->sFilterRegister[i].FR1 = 0;
 800d8c2:	461c      	mov	r4, r3
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
 800d8c4:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800d8c8:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800d8cc:	00c3      	lsls	r3, r0, #3
 800d8ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8d2:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800d8da:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800d8de:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800d8e2:	d1f3      	bne.n	800d8cc <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800d8e4:	4d2f      	ldr	r5, [pc, #188]	; (800d9a4 <can_lld_set_filters+0x114>)
 800d8e6:	2600      	movs	r6, #0
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 800d8e8:	2701      	movs	r7, #1
 800d8ea:	6810      	ldr	r0, [r2, #0]
      if (cfp->mode)
 800d8ec:	7914      	ldrb	r4, [r2, #4]
 800d8ee:	00c3      	lsls	r3, r0, #3
 800d8f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8f4:	f014 0f01 	tst.w	r4, #1
 800d8f8:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800d8fc:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800d900:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 800d904:	d005      	beq.n	800d912 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800d906:	f8d5 e204 	ldr.w	lr, [r5, #516]	; 0x204
 800d90a:	ea40 0e0e 	orr.w	lr, r0, lr
 800d90e:	f8c5 e204 	str.w	lr, [r5, #516]	; 0x204
      if (cfp->scale)
 800d912:	f014 0f02 	tst.w	r4, #2
 800d916:	d005      	beq.n	800d924 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800d918:	f8d5 e20c 	ldr.w	lr, [r5, #524]	; 0x20c
 800d91c:	ea40 0e0e 	orr.w	lr, r0, lr
 800d920:	f8c5 e20c 	str.w	lr, [r5, #524]	; 0x20c
      if (cfp->assignment)
 800d924:	0764      	lsls	r4, r4, #29
 800d926:	d504      	bpl.n	800d932 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800d928:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800d92c:	4304      	orrs	r4, r0
 800d92e:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800d932:	6894      	ldr	r4, [r2, #8]
 800d934:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800d938:	68d4      	ldr	r4, [r2, #12]
 800d93a:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800d93e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800d942:	42b1      	cmp	r1, r6
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800d944:	ea40 0003 	orr.w	r0, r0, r3
      cfp++;
 800d948:	f102 0210 	add.w	r2, r2, #16
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800d94c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800d950:	d1cb      	bne.n	800d8ea <can_lld_set_filters+0x5a>
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800d952:	4914      	ldr	r1, [pc, #80]	; (800d9a4 <can_lld_set_filters+0x114>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800d954:	4a12      	ldr	r2, [pc, #72]	; (800d9a0 <can_lld_set_filters+0x110>)
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800d956:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800d95a:	f023 0301 	bic.w	r3, r3, #1
 800d95e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800d962:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d964:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d968:	6413      	str	r3, [r2, #64]	; 0x40
 800d96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d96c:	00c2      	lsls	r2, r0, #3
 800d96e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
    CAN1->FFA1R = 0;
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800d972:	2301      	movs	r3, #1
 800d974:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800d978:	4083      	lsls	r3, r0
 800d97a:	f043 0301 	orr.w	r3, r3, #1
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 800d97e:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800d982:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800d986:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800d98a:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
#endif
    CAN1->FM1R = 0;
 800d98e:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    CAN1->FFA1R = 0;
 800d992:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800d996:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800d99a:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 800d99e:	e7d8      	b.n	800d952 <can_lld_set_filters+0xc2>
 800d9a0:	40023800 	.word	0x40023800
 800d9a4:	40006400 	.word	0x40006400
	...

0800d9b0 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800d9b0:	b510      	push	{r4, lr}
 * @notapi
 */
static void can_lld_tx_handler(CANDriver *canp) {

  /* No more events until a message is transmitted.*/
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800d9b2:	4c0c      	ldr	r4, [pc, #48]	; (800d9e4 <Vector8C+0x34>)
 800d9b4:	490c      	ldr	r1, [pc, #48]	; (800d9e8 <Vector8C+0x38>)
 800d9b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d9b8:	2320      	movs	r3, #32
 800d9ba:	6091      	str	r1, [r2, #8]
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	f104 0008 	add.w	r0, r4, #8
 800d9c6:	f7fe fecb 	bl	800c760 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800d9ca:	f104 001c 	add.w	r0, r4, #28
 800d9ce:	2101      	movs	r1, #1
 800d9d0:	f7fe ff4e 	bl	800c870 <chEvtBroadcastFlagsI>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800d9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800d9de:	f7ff b8f7 	b.w	800cbd0 <_port_irq_epilogue>
 800d9e2:	bf00      	nop
 800d9e4:	20000b14 	.word	0x20000b14
 800d9e8:	00010101 	.word	0x00010101
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 800d9f2:	4d16      	ldr	r5, [pc, #88]	; (800da4c <Vector90+0x5c>)
 800d9f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d9f6:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800d9f8:	07a2      	lsls	r2, r4, #30
 800d9fa:	d111      	bne.n	800da20 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800d9fc:	06e3      	lsls	r3, r4, #27
 800d9fe:	d50b      	bpl.n	800da18 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800da00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da02:	2110      	movs	r1, #16
 800da04:	60d9      	str	r1, [r3, #12]
 800da06:	2320      	movs	r3, #32
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	4810      	ldr	r0, [pc, #64]	; (800da50 <Vector90+0x60>)
 800da0e:	f7fe ff2f 	bl	800c870 <chEvtBroadcastFlagsI>
 800da12:	2300      	movs	r3, #0
 800da14:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800da18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800da1c:	f7ff b8d8 	b.w	800cbd0 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800da20:	695a      	ldr	r2, [r3, #20]
 800da22:	f022 0202 	bic.w	r2, r2, #2
 800da26:	615a      	str	r2, [r3, #20]
 800da28:	2320      	movs	r3, #32
 800da2a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800da2e:	2100      	movs	r1, #0
 800da30:	f105 0010 	add.w	r0, r5, #16
 800da34:	f7fe fe94 	bl	800c760 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800da38:	f105 0018 	add.w	r0, r5, #24
 800da3c:	2101      	movs	r1, #1
 800da3e:	f7fe ff17 	bl	800c870 <chEvtBroadcastFlagsI>
 800da42:	2300      	movs	r3, #0
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	e7d8      	b.n	800d9fc <Vector90+0xc>
 800da4a:	bf00      	nop
 800da4c:	20000b14 	.word	0x20000b14
 800da50:	20000b34 	.word	0x20000b34
	...

0800da60 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800da60:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 800da62:	4d16      	ldr	r5, [pc, #88]	; (800dabc <Vector94+0x5c>)
 800da64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da66:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800da68:	07a2      	lsls	r2, r4, #30
 800da6a:	d111      	bne.n	800da90 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800da6c:	06e3      	lsls	r3, r4, #27
 800da6e:	d50b      	bpl.n	800da88 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800da70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da72:	2110      	movs	r1, #16
 800da74:	6119      	str	r1, [r3, #16]
 800da76:	2320      	movs	r3, #32
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	4810      	ldr	r0, [pc, #64]	; (800dac0 <Vector94+0x60>)
 800da7e:	f7fe fef7 	bl	800c870 <chEvtBroadcastFlagsI>
 800da82:	2300      	movs	r3, #0
 800da84:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800da88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800da8c:	f7ff b8a0 	b.w	800cbd0 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800da90:	695a      	ldr	r2, [r3, #20]
 800da92:	f022 0210 	bic.w	r2, r2, #16
 800da96:	615a      	str	r2, [r3, #20]
 800da98:	2320      	movs	r3, #32
 800da9a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800da9e:	2100      	movs	r1, #0
 800daa0:	f105 0010 	add.w	r0, r5, #16
 800daa4:	f7fe fe5c 	bl	800c760 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800daa8:	f105 0018 	add.w	r0, r5, #24
 800daac:	2102      	movs	r1, #2
 800daae:	f7fe fedf 	bl	800c870 <chEvtBroadcastFlagsI>
 800dab2:	2300      	movs	r3, #0
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	e7d8      	b.n	800da6c <Vector94+0xc>
 800daba:	bf00      	nop
 800dabc:	20000b14 	.word	0x20000b14
 800dac0:	20000b34 	.word	0x20000b34
	...

0800dad0 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800dad0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  msr = canp->can->MSR;
 800dad2:	4d1b      	ldr	r5, [pc, #108]	; (800db40 <Vector98+0x70>)
 800dad4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800dad6:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800dad8:	221c      	movs	r2, #28
 800dada:	605a      	str	r2, [r3, #4]
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800dadc:	0722      	lsls	r2, r4, #28
 800dade:	d41d      	bmi.n	800db1c <Vector98+0x4c>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800dae0:	0763      	lsls	r3, r4, #29
 800dae2:	d517      	bpl.n	800db14 <Vector98+0x44>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 800dae4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800dae6:	6993      	ldr	r3, [r2, #24]

    canp->can->ESR &= ~CAN_ESR_LEC;
 800dae8:	6991      	ldr	r1, [r2, #24]
 800daea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800daee:	6191      	str	r1, [r2, #24]
    flags = (eventflags_t)(esr & 7);
    if ((esr & CAN_ESR_LEC) > 0)
 800daf0:	f013 0f70 	tst.w	r3, #112	; 0x70
  if (msr & CAN_MSR_ERRI) {
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;

    canp->can->ESR &= ~CAN_ESR_LEC;
    flags = (eventflags_t)(esr & 7);
 800daf4:	f003 0107 	and.w	r1, r3, #7
    if ((esr & CAN_ESR_LEC) > 0)
      flags |= CAN_FRAMING_ERROR;
 800daf8:	bf18      	it	ne
 800dafa:	f041 0108 	orrne.w	r1, r1, #8
 800dafe:	2220      	movs	r2, #32
 800db00:	f382 8811 	msr	BASEPRI, r2
 800db04:	480f      	ldr	r0, [pc, #60]	; (800db44 <Vector98+0x74>)
 800db06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800db0a:	f7fe feb1 	bl	800c870 <chEvtBroadcastFlagsI>
 800db0e:	2300      	movs	r3, #0
 800db10:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800db14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800db18:	f7ff b85a 	b.w	800cbd0 <_port_irq_epilogue>
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800db1c:	681a      	ldr	r2, [r3, #0]
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800db1e:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800db20:	f022 0202 	bic.w	r2, r2, #2
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800db24:	2103      	movs	r1, #3
 800db26:	f800 1b28 	strb.w	r1, [r0], #40
 800db2a:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	f381 8811 	msr	BASEPRI, r1
 800db32:	2100      	movs	r1, #0
 800db34:	f7fe fe9c 	bl	800c870 <chEvtBroadcastFlagsI>
 800db38:	2300      	movs	r3, #0
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	e7cf      	b.n	800dae0 <Vector98+0x10>
 800db40:	20000b14 	.word	0x20000b14
 800db44:	20000b34 	.word	0x20000b34
	...

0800db50 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800db50:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800db52:	4c06      	ldr	r4, [pc, #24]	; (800db6c <can_lld_init+0x1c>)
 800db54:	4620      	mov	r0, r4
 800db56:	f7ff f893 	bl	800cc80 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800db5a:	2200      	movs	r2, #0
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800db5c:	4b04      	ldr	r3, [pc, #16]	; (800db70 <can_lld_init+0x20>)
 800db5e:	62e3      	str	r3, [r4, #44]	; 0x2c
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800db60:	4611      	mov	r1, r2
 800db62:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800db64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800db68:	f7ff be92 	b.w	800d890 <can_lld_set_filters>
 800db6c:	20000b14 	.word	0x20000b14
 800db70:	40006400 	.word	0x40006400
	...

0800db80 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800db80:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800db82:	4d65      	ldr	r5, [pc, #404]	; (800dd18 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800db84:	4c65      	ldr	r4, [pc, #404]	; (800dd1c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800db86:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800db88:	4965      	ldr	r1, [pc, #404]	; (800dd20 <_pal_lld_init+0x1a0>)
 800db8a:	4a66      	ldr	r2, [pc, #408]	; (800dd24 <_pal_lld_init+0x1a4>)
 800db8c:	4b66      	ldr	r3, [pc, #408]	; (800dd28 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800db8e:	f240 16ff 	movw	r6, #511	; 0x1ff
 800db92:	4337      	orrs	r7, r6
 800db94:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800db96:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800db98:	433e      	orrs	r6, r7
 800db9a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800db9c:	6845      	ldr	r5, [r0, #4]
 800db9e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800dba0:	6885      	ldr	r5, [r0, #8]
 800dba2:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800dba4:	68c5      	ldr	r5, [r0, #12]
 800dba6:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800dba8:	6905      	ldr	r5, [r0, #16]
 800dbaa:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800dbac:	6945      	ldr	r5, [r0, #20]
 800dbae:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800dbb0:	6985      	ldr	r5, [r0, #24]
 800dbb2:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800dbb4:	6805      	ldr	r5, [r0, #0]
 800dbb6:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dbb8:	6a04      	ldr	r4, [r0, #32]
 800dbba:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800dbbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dbbe:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800dbc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dbc2:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800dbc4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800dbc6:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800dbc8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800dbca:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800dbcc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800dbce:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800dbd0:	69c4      	ldr	r4, [r0, #28]
 800dbd2:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dbd4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800dbd6:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800dbd8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800dbda:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800dbdc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800dbde:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800dbe0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800dbe2:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800dbe4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800dbe6:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800dbe8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800dbea:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800dbec:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800dbee:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dbf0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800dbf2:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800dbf4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800dbf6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800dbf8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800dbfa:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800dbfc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800dbfe:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800dc00:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800dc02:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800dc04:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800dc06:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800dc08:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800dc0a:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dc0c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800dc0e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800dc12:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800dc14:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800dc18:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800dc1a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800dc1e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800dc22:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800dc26:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800dc2a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800dc2e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800dc32:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800dc36:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800dc38:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dc3c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc40:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800dc44:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800dc48:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800dc4c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800dc50:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800dc54:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800dc58:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800dc5c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800dc60:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800dc64:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800dc68:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800dc6c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800dc70:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dc74:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800dc78:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800dc7c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800dc7e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800dc82:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800dc84:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800dc88:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800dc8a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800dc8e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800dc90:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800dc94:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800dc96:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800dc9a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800dc9c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800dca0:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dca2:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800dca6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800dcaa:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800dcae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800dcb2:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800dcb6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800dcba:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800dcbe:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800dcc2:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800dcc6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800dcca:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800dcce:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800dcd2:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800dcd6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800dcda:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800dcde:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800dce2:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800dce6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800dcea:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800dcee:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800dcf2:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800dcf6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800dcfa:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800dcfe:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800dd02:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800dd06:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800dd0a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800dd0e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 800dd12:	bcf0      	pop	{r4, r5, r6, r7}
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	40023800 	.word	0x40023800
 800dd1c:	40020000 	.word	0x40020000
 800dd20:	40020400 	.word	0x40020400
 800dd24:	40020800 	.word	0x40020800
 800dd28:	40020c00 	.word	0x40020c00
 800dd2c:	00000000 	.word	0x00000000

0800dd30 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800dd34:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800dd38:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800dd3c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800dd40:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800dd44:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800dd48:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800dd4a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800dd4e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800dd52:	f04f 0803 	mov.w	r8, #3
 800dd56:	e030      	b.n	800ddba <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800dd58:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800dd5c:	ea2b 0303 	bic.w	r3, fp, r3
 800dd60:	ea43 030a 	orr.w	r3, r3, sl
 800dd64:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800dd66:	6843      	ldr	r3, [r0, #4]
 800dd68:	fa09 fa04 	lsl.w	sl, r9, r4
 800dd6c:	ea23 030a 	bic.w	r3, r3, sl
 800dd70:	433b      	orrs	r3, r7
 800dd72:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800dd74:	0063      	lsls	r3, r4, #1
 800dd76:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800dd7a:	fa08 f303 	lsl.w	r3, r8, r3
 800dd7e:	43db      	mvns	r3, r3
 800dd80:	ea0a 0a03 	and.w	sl, sl, r3
 800dd84:	ea4a 0a06 	orr.w	sl, sl, r6
 800dd88:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800dd8c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800dd90:	ea03 0a0a 	and.w	sl, r3, sl
 800dd94:	ea4a 0a05 	orr.w	sl, sl, r5
 800dd98:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800dd9c:	f8d0 a000 	ldr.w	sl, [r0]
 800dda0:	ea03 030a 	and.w	r3, r3, sl
 800dda4:	ea43 030e 	orr.w	r3, r3, lr
 800dda8:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800ddaa:	0849      	lsrs	r1, r1, #1
 800ddac:	d019      	beq.n	800dde2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800ddae:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800ddb0:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800ddb2:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800ddb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800ddb8:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800ddba:	f004 0307 	and.w	r3, r4, #7
 800ddbe:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800ddc0:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800ddc4:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 800ddc8:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800ddcc:	d0ed      	beq.n	800ddaa <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800ddce:	2c07      	cmp	r4, #7
 800ddd0:	d9c2      	bls.n	800dd58 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800ddd2:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800ddd6:	ea2b 0303 	bic.w	r3, fp, r3
 800ddda:	ea43 030a 	orr.w	r3, r3, sl
 800ddde:	6243      	str	r3, [r0, #36]	; 0x24
 800dde0:	e7c1      	b.n	800dd66 <_pal_lld_setgroupmode+0x36>
 800dde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde6:	bf00      	nop
	...

0800ddf0 <VectorC4>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800ddf0:	483a      	ldr	r0, [pc, #232]	; (800dedc <VectorC4+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ddf2:	4a3b      	ldr	r2, [pc, #236]	; (800dee0 <VectorC4+0xf0>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800ddf6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800ddf8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800ddfa:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ddfc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800de00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800de04:	4293      	cmp	r3, r2
 800de06:	d04c      	beq.n	800dea2 <VectorC4+0xb2>
 800de08:	d81e      	bhi.n	800de48 <VectorC4+0x58>
 800de0a:	3a07      	subs	r2, #7
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d03c      	beq.n	800de8a <VectorC4+0x9a>
 800de10:	3201      	adds	r2, #1
 800de12:	4293      	cmp	r3, r2
 800de14:	d110      	bne.n	800de38 <VectorC4+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800de16:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800de18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800de1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800de1e:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800de20:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	f042 0201 	orr.w	r2, r2, #1
 800de28:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800de2a:	6862      	ldr	r2, [r4, #4]
 800de2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de30:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d94b      	bls.n	800ded0 <VectorC4+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800de38:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800de3c:	bf18      	it	ne
 800de3e:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800de40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800de44:	f7fe bec4 	b.w	800cbd0 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800de48:	4a26      	ldr	r2, [pc, #152]	; (800dee4 <VectorC4+0xf4>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d012      	beq.n	800de74 <VectorC4+0x84>
 800de4e:	3202      	adds	r2, #2
 800de50:	4293      	cmp	r3, r2
 800de52:	d1f1      	bne.n	800de38 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800de54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685e      	ldr	r6, [r3, #4]
 800de5a:	b33e      	cbz	r6, 800deac <VectorC4+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800de5c:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800de5e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800de60:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800de64:	f042 0201 	orr.w	r2, r2, #1
 800de68:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800de6a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800de6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800de70:	f7fe beae 	b.w	800cbd0 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800de74:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800de76:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800de78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800de7c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800de7e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800de80:	6813      	ldr	r3, [r2, #0]
 800de82:	f043 0301 	orr.w	r3, r3, #1
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	e7d6      	b.n	800de38 <VectorC4+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800de8a:	8c03      	ldrh	r3, [r0, #32]
 800de8c:	0a1a      	lsrs	r2, r3, #8
 800de8e:	d00b      	beq.n	800dea8 <VectorC4+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800de98:	f002 0206 	and.w	r2, r2, #6
 800de9c:	4313      	orrs	r3, r2
 800de9e:	6123      	str	r3, [r4, #16]
 800dea0:	e7ca      	b.n	800de38 <VectorC4+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800dea2:	8c03      	ldrh	r3, [r0, #32]
 800dea4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800dea8:	6123      	str	r3, [r4, #16]
 800deaa:	e7c5      	b.n	800de38 <VectorC4+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800deac:	6863      	ldr	r3, [r4, #4]
 800deae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800deb2:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	2320      	movs	r3, #32
 800debe:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800dec2:	301c      	adds	r0, #28
 800dec4:	4631      	mov	r1, r6
 800dec6:	f7fe fc13 	bl	800c6f0 <chThdResumeI>
 800deca:	f386 8811 	msr	BASEPRI, r6
 800dece:	e7b3      	b.n	800de38 <VectorC4+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ded6:	6023      	str	r3, [r4, #0]
 800ded8:	e7ae      	b.n	800de38 <VectorC4+0x48>
 800deda:	bf00      	nop
 800dedc:	20000b44 	.word	0x20000b44
 800dee0:	00030008 	.word	0x00030008
 800dee4:	00070082 	.word	0x00070082
	...

0800def0 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800def0:	4833      	ldr	r0, [pc, #204]	; (800dfc0 <VectorC8+0xd0>)
/**
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800def2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 800def4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800def6:	6b07      	ldr	r7, [r0, #48]	; 0x30
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800def8:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800defa:	683a      	ldr	r2, [r7, #0]
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800defc:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800defe:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 800df02:	43db      	mvns	r3, r3
 800df04:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800df06:	6813      	ldr	r3, [r2, #0]
 800df08:	f023 031f 	bic.w	r3, r3, #31
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	6813      	ldr	r3, [r2, #0]
 800df10:	07db      	lsls	r3, r3, #31
 800df12:	d4fc      	bmi.n	800df0e <VectorC8+0x1e>
 800df14:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800df16:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800df18:	687f      	ldr	r7, [r7, #4]
 800df1a:	233d      	movs	r3, #61	; 0x3d
 800df1c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800df1e:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800df20:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800df22:	6813      	ldr	r3, [r2, #0]
 800df24:	f023 031f 	bic.w	r3, r3, #31
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	6813      	ldr	r3, [r2, #0]
 800df2c:	f013 0301 	ands.w	r3, r3, #1
 800df30:	d1fb      	bne.n	800df2a <VectorC8+0x3a>
 800df32:	7a2f      	ldrb	r7, [r5, #8]
 800df34:	686d      	ldr	r5, [r5, #4]
 800df36:	223d      	movs	r2, #61	; 0x3d
 800df38:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800df3a:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800df3c:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800df3e:	bf48      	it	mi
 800df40:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800df42:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800df44:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800df46:	bf44      	itt	mi
 800df48:	f043 0302 	orrmi.w	r3, r3, #2
 800df4c:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800df4e:	054a      	lsls	r2, r1, #21
 800df50:	d50a      	bpl.n	800df68 <VectorC8+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800df52:	6862      	ldr	r2, [r4, #4]
 800df54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800df58:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800df5a:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800df5c:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800df60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df64:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800df66:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800df68:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800df6a:	bf44      	itt	mi
 800df6c:	f043 0308 	orrmi.w	r3, r3, #8
 800df70:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800df72:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800df74:	bf44      	itt	mi
 800df76:	f043 0320 	orrmi.w	r3, r3, #32
 800df7a:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800df7c:	04cc      	lsls	r4, r1, #19
 800df7e:	d513      	bpl.n	800dfa8 <VectorC8+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 800df80:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800df84:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800df86:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800df88:	d416      	bmi.n	800dfb8 <VectorC8+0xc8>
 800df8a:	2320      	movs	r3, #32
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f06f 0101 	mvn.w	r1, #1
 800df94:	480b      	ldr	r0, [pc, #44]	; (800dfc4 <VectorC8+0xd4>)
 800df96:	f7fe fbab 	bl	800c6f0 <chThdResumeI>
 800df9a:	2300      	movs	r3, #0
 800df9c:	f383 8811 	msr	BASEPRI, r3

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800dfa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800dfa4:	f7fe be14 	b.w	800cbd0 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800dfa8:	0432      	lsls	r2, r6, #16
 800dfaa:	d405      	bmi.n	800dfb8 <VectorC8+0xc8>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1ec      	bne.n	800df8a <VectorC8+0x9a>

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800dfb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800dfb4:	f7fe be0c 	b.w	800cbd0 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800dfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfbc:	6083      	str	r3, [r0, #8]
 800dfbe:	e7e4      	b.n	800df8a <VectorC8+0x9a>
 800dfc0:	20000b44 	.word	0x20000b44
 800dfc4:	20000b60 	.word	0x20000b60
	...

0800dfd0 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800dfd0:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800dfd2:	4c07      	ldr	r4, [pc, #28]	; (800dff0 <i2c_lld_init+0x20>)
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f7fe fe8b 	bl	800ccf0 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800dfda:	4b06      	ldr	r3, [pc, #24]	; (800dff4 <i2c_lld_init+0x24>)
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 800dfdc:	4a06      	ldr	r2, [pc, #24]	; (800dff8 <i2c_lld_init+0x28>)
 800dfde:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800dfe0:	2100      	movs	r1, #0
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800dfe2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800dfe6:	61e1      	str	r1, [r4, #28]
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800dfe8:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800dfea:	6322      	str	r2, [r4, #48]	; 0x30
 800dfec:	bd10      	pop	{r4, pc}
 800dfee:	bf00      	nop
 800dff0:	20000b44 	.word	0x20000b44
 800dff4:	0800ece8 	.word	0x0800ece8
 800dff8:	40005800 	.word	0x40005800
 800dffc:	00000000 	.word	0x00000000

0800e000 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800e000:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800e002:	4c06      	ldr	r4, [pc, #24]	; (800e01c <usb_lld_init+0x1c>)
 800e004:	4620      	mov	r0, r4
 800e006:	f7fe ff3b 	bl	800ce80 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800e00a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800e00e:	4a04      	ldr	r2, [pc, #16]	; (800e020 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800e010:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800e012:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 800e014:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800e016:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800e018:	6663      	str	r3, [r4, #100]	; 0x64
 800e01a:	bd10      	pop	{r4, pc}
 800e01c:	20000b80 	.word	0x20000b80
 800e020:	0800ed90 	.word	0x0800ed90
	...

0800e030 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800e032:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800e034:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800e036:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800e038:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800e03a:	692b      	ldr	r3, [r5, #16]
 800e03c:	f013 0420 	ands.w	r4, r3, #32
 800e040:	d1fb      	bne.n	800e03a <usb_lld_reset+0xa>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800e042:	200c      	movs	r0, #12
 800e044:	f7fe f92c 	bl	800c2a0 <chSysPolledDelayX>

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800e048:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 800e04c:	f8de 6008 	ldr.w	r6, [lr, #8]
 800e050:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800e052:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 800e056:	21ff      	movs	r1, #255	; 0xff
 800e058:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800e05c:	3301      	adds	r3, #1
 800e05e:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800e060:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800e064:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800e068:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800e06c:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800e070:	d9f2      	bls.n	800e058 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800e072:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800e076:	f04f 32ff 	mov.w	r2, #4294967295
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800e07a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800e07e:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 800e082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800e084:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800e088:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800e08a:	f8de 3000 	ldr.w	r3, [lr]
 800e08e:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800e090:	2310      	movs	r3, #16
 800e092:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800e094:	6913      	ldr	r3, [r2, #16]
 800e096:	f013 0410 	ands.w	r4, r3, #16
 800e09a:	d1fb      	bne.n	800e094 <usb_lld_reset+0x64>
 800e09c:	200c      	movs	r0, #12
 800e09e:	f7fe f8ff 	bl	800c2a0 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800e0a2:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800e0a6:	4a11      	ldr	r2, [pc, #68]	; (800e0ec <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800e0a8:	4811      	ldr	r0, [pc, #68]	; (800e0f0 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800e0aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e0ae:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800e0b2:	69ab      	ldr	r3, [r5, #24]
 800e0b4:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800e0b8:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800e0bc:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800e0be:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800e0c0:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800e0c4:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800e0c8:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800e0ca:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800e0ce:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800e0d2:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800e0d6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800e0da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800e0dc:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800e0e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800e0e4:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800e0e6:	62ab      	str	r3, [r5, #40]	; 0x28
 800e0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	10008040 	.word	0x10008040
 800e0f0:	0800eda0 	.word	0x0800eda0
	...

0800e100 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800e100:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800e102:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800e106:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800e10a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e10e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800e112:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800e116:	4770      	bx	lr
	...

0800e120 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800e120:	3158      	adds	r1, #88	; 0x58
 800e122:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e124:	0149      	lsls	r1, r1, #5
 800e126:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800e128:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800e12c:	d004      	beq.n	800e138 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800e12e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800e132:	bf14      	ite	ne
 800e134:	2001      	movne	r0, #1
 800e136:	2002      	moveq	r0, #2
}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	0000      	movs	r0, r0
	...

0800e140 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800e140:	3148      	adds	r1, #72	; 0x48
 800e142:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e144:	0149      	lsls	r1, r1, #5
 800e146:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800e148:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800e14c:	d004      	beq.n	800e158 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800e14e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800e152:	bf14      	ite	ne
 800e154:	2001      	movne	r0, #1
 800e156:	2002      	moveq	r0, #2
}
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	0000      	movs	r0, r0
	...

0800e160 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800e160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e164:	68cb      	ldr	r3, [r1, #12]
 800e166:	6a1b      	ldr	r3, [r3, #32]
 800e168:	6819      	ldr	r1, [r3, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	6053      	str	r3, [r2, #4]
 800e16e:	6011      	str	r1, [r2, #0]
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
	...

0800e180 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e180:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 800e184:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e186:	68dd      	ldr	r5, [r3, #12]
 800e188:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800e18a:	6863      	ldr	r3, [r4, #4]
 800e18c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 800e18e:	b931      	cbnz	r1, 800e19e <usb_lld_prepare_receive+0x1e>
 800e190:	2b40      	cmp	r3, #64	; 0x40
 800e192:	d904      	bls.n	800e19e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 800e194:	2340      	movs	r3, #64	; 0x40
 800e196:	6063      	str	r3, [r4, #4]
 800e198:	4a09      	ldr	r2, [pc, #36]	; (800e1c0 <usb_lld_prepare_receive+0x40>)
 800e19a:	243f      	movs	r4, #63	; 0x3f
 800e19c:	e002      	b.n	800e1a4 <usb_lld_prepare_receive+0x24>
 800e19e:	1e5c      	subs	r4, r3, #1
 800e1a0:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800e1a4:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800e1a6:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800e1a8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800e1ac:	192b      	adds	r3, r5, r4
 800e1ae:	fbb3 f3f5 	udiv	r3, r3, r5
 800e1b2:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 800e1b6:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 800e1ba:	bc30      	pop	{r4, r5}
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	60000040 	.word	0x60000040
	...

0800e1d0 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800e1d4:	4e26      	ldr	r6, [pc, #152]	; (800e270 <otg_epout_handler.constprop.7+0xa0>)
 800e1d6:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800e1d8:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800e1dc:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800e1de:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 800e1e2:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800e1e6:	0720      	lsls	r0, r4, #28
 800e1e8:	d503      	bpl.n	800e1f2 <otg_epout_handler.constprop.7+0x22>
 800e1ea:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e1ee:	0719      	lsls	r1, r3, #28
 800e1f0:	d41d      	bmi.n	800e22e <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800e1f2:	07e2      	lsls	r2, r4, #31
 800e1f4:	d519      	bpl.n	800e22a <otg_epout_handler.constprop.7+0x5a>
 800e1f6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e1fa:	07db      	lsls	r3, r3, #31
 800e1fc:	d515      	bpl.n	800e22a <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800e1fe:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800e202:	4c1b      	ldr	r4, [pc, #108]	; (800e270 <otg_epout_handler.constprop.7+0xa0>)
 800e204:	68f1      	ldr	r1, [r6, #12]
 800e206:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 800e208:	6858      	ldr	r0, [r3, #4]
 800e20a:	691a      	ldr	r2, [r3, #16]
 800e20c:	4290      	cmp	r0, r2
 800e20e:	d316      	bcc.n	800e23e <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800e210:	8962      	ldrh	r2, [r4, #10]
 800e212:	68ce      	ldr	r6, [r1, #12]
 800e214:	2301      	movs	r3, #1
 800e216:	40ab      	lsls	r3, r5
 800e218:	ea22 0303 	bic.w	r3, r2, r3
 800e21c:	8163      	strh	r3, [r4, #10]
 800e21e:	4629      	mov	r1, r5
 800e220:	4620      	mov	r0, r4
 800e222:	4633      	mov	r3, r6
    }
  }
}
 800e224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800e228:	4718      	bx	r3
 800e22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800e22e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800e232:	4629      	mov	r1, r5
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	4630      	mov	r0, r6
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	4798      	blx	r3
 800e23c:	e7d9      	b.n	800e1f2 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800e23e:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 800e240:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800e242:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 800e244:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 800e246:	4629      	mov	r1, r5
 800e248:	4620      	mov	r0, r4
 800e24a:	f7ff ff99 	bl	800e180 <usb_lld_prepare_receive>
 800e24e:	2320      	movs	r3, #32
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e256:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800e25a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800e25e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e262:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800e266:	f386 8811 	msr	BASEPRI, r6
 800e26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26e:	bf00      	nop
 800e270:	20000b80 	.word	0x20000b80
	...

0800e280 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e280:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800e284:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e286:	68dc      	ldr	r4, [r3, #12]
 800e288:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800e28a:	6853      	ldr	r3, [r2, #4]
 800e28c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 800e28e:	b1ab      	cbz	r3, 800e2bc <usb_lld_prepare_transmit+0x3c>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800e290:	b171      	cbz	r1, 800e2b0 <usb_lld_prepare_transmit+0x30>
 800e292:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800e294:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800e296:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800e298:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800e29c:	4422      	add	r2, r4
 800e29e:	fbb2 f2f4 	udiv	r2, r2, r4
 800e2a2:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800e2a6:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800e2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ae:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800e2b0:	2b40      	cmp	r3, #64	; 0x40
 800e2b2:	d9ee      	bls.n	800e292 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 800e2b4:	2340      	movs	r3, #64	; 0x40
 800e2b6:	6053      	str	r3, [r2, #4]
 800e2b8:	223f      	movs	r2, #63	; 0x3f
 800e2ba:	e7eb      	b.n	800e294 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800e2bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800e2be:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800e2c2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800e2c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e2ca:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800e2ce:	4770      	bx	lr

0800e2d0 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800e2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800e2d4:	4f31      	ldr	r7, [pc, #196]	; (800e39c <otg_epin_handler.constprop.8+0xcc>)
 800e2d6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800e2d8:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800e2dc:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800e2de:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 800e2e2:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800e2e6:	07e1      	lsls	r1, r4, #31
 800e2e8:	d503      	bpl.n	800e2f2 <otg_epin_handler.constprop.8+0x22>
 800e2ea:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800e2ee:	07da      	lsls	r2, r3, #31
 800e2f0:	d40a      	bmi.n	800e308 <otg_epin_handler.constprop.8+0x38>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800e2f2:	0623      	lsls	r3, r4, #24
 800e2f4:	d506      	bpl.n	800e304 <otg_epin_handler.constprop.8+0x34>
 800e2f6:	2301      	movs	r3, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800e2f8:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800e2fc:	fa03 f606 	lsl.w	r6, r3, r6
 800e300:	4216      	tst	r6, r2
 800e302:	d129      	bne.n	800e358 <otg_epin_handler.constprop.8+0x88>
 800e304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800e308:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800e30c:	68d9      	ldr	r1, [r3, #12]
 800e30e:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800e310:	6858      	ldr	r0, [r3, #4]
 800e312:	691a      	ldr	r2, [r3, #16]
 800e314:	4290      	cmp	r0, r2
 800e316:	d234      	bcs.n	800e382 <otg_epin_handler.constprop.8+0xb2>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800e318:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800e31a:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800e31e:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 800e320:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 800e324:	4631      	mov	r1, r6
 800e326:	4638      	mov	r0, r7
 800e328:	f7ff ffaa 	bl	800e280 <usb_lld_prepare_transmit>
 800e32c:	2320      	movs	r3, #32
 800e32e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800e332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e334:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800e338:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800e33a:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800e33e:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800e342:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800e346:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800e34a:	40b2      	lsls	r2, r6
 800e34c:	430a      	orrs	r2, r1
 800e34e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800e352:	f388 8811 	msr	BASEPRI, r8
 800e356:	e7cc      	b.n	800e2f2 <otg_epin_handler.constprop.8+0x22>
 800e358:	2320      	movs	r3, #32
 800e35a:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800e35e:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800e362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800e364:	480e      	ldr	r0, [pc, #56]	; (800e3a0 <otg_epin_handler.constprop.8+0xd0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800e366:	ea23 0306 	bic.w	r3, r3, r6
 800e36a:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800e36e:	4316      	orrs	r6, r2
 800e370:	2100      	movs	r1, #0
 800e372:	65fe      	str	r6, [r7, #92]	; 0x5c
 800e374:	f7fe f9bc 	bl	800c6f0 <chThdResumeI>
 800e378:	2300      	movs	r3, #0
 800e37a:	f383 8811 	msr	BASEPRI, r3
 800e37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800e382:	893a      	ldrh	r2, [r7, #8]
 800e384:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800e388:	2301      	movs	r3, #1
 800e38a:	40b3      	lsls	r3, r6
 800e38c:	ea22 0303 	bic.w	r3, r2, r3
 800e390:	813b      	strh	r3, [r7, #8]
 800e392:	4631      	mov	r1, r6
 800e394:	4638      	mov	r0, r7
 800e396:	47c0      	blx	r8
 800e398:	e7ab      	b.n	800e2f2 <otg_epin_handler.constprop.8+0x22>
 800e39a:	bf00      	nop
 800e39c:	20000b80 	.word	0x20000b80
 800e3a0:	20000be0 	.word	0x20000be0
	...

0800e3b0 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800e3b2:	4d3a      	ldr	r5, [pc, #232]	; (800e49c <Vector14C+0xec>)
 800e3b4:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 800e3b6:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 800e3b8:	69b3      	ldr	r3, [r6, #24]
 800e3ba:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800e3bc:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 800e3be:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800e3c0:	d42d      	bmi.n	800e41e <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 800e3c2:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 800e3c4:	bf48      	it	mi
 800e3c6:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800e3ca:	0723      	lsls	r3, r4, #28
 800e3cc:	d504      	bpl.n	800e3d8 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 800e3ce:	686b      	ldr	r3, [r5, #4]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	b10b      	cbz	r3, 800e3d8 <Vector14C+0x28>
 800e3d4:	4831      	ldr	r0, [pc, #196]	; (800e49c <Vector14C+0xec>)
 800e3d6:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 800e3d8:	06e5      	lsls	r5, r4, #27
 800e3da:	d42b      	bmi.n	800e434 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 800e3dc:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 800e3de:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800e3e2:	d507      	bpl.n	800e3f4 <Vector14C+0x44>
    if (src & (1 << 0))
 800e3e4:	07e9      	lsls	r1, r5, #31
 800e3e6:	d445      	bmi.n	800e474 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 800e3e8:	07aa      	lsls	r2, r5, #30
 800e3ea:	d448      	bmi.n	800e47e <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800e3ec:	076b      	lsls	r3, r5, #29
 800e3ee:	d44b      	bmi.n	800e488 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 800e3f0:	072e      	lsls	r6, r5, #28
 800e3f2:	d44e      	bmi.n	800e492 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800e3f4:	0324      	lsls	r4, r4, #12
 800e3f6:	d507      	bpl.n	800e408 <Vector14C+0x58>
    if (src & (1 << 16))
 800e3f8:	03e8      	lsls	r0, r5, #15
 800e3fa:	d430      	bmi.n	800e45e <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 800e3fc:	03a9      	lsls	r1, r5, #14
 800e3fe:	d433      	bmi.n	800e468 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 800e400:	036a      	lsls	r2, r5, #13
 800e402:	d426      	bmi.n	800e452 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800e404:	032b      	lsls	r3, r5, #12
 800e406:	d403      	bmi.n	800e410 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800e408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800e40c:	f7fe bbe0 	b.w	800cbd0 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800e410:	2003      	movs	r0, #3
 800e412:	f7ff fedd 	bl	800e1d0 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800e416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800e41a:	f7fe bbd9 	b.w	800cbd0 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 800e41e:	4628      	mov	r0, r5
 800e420:	f7fe fd3e 	bl	800cea0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800e424:	686b      	ldr	r3, [r5, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d0ca      	beq.n	800e3c2 <Vector14C+0x12>
 800e42c:	2100      	movs	r1, #0
 800e42e:	4628      	mov	r0, r5
 800e430:	4798      	blx	r3
 800e432:	e7c6      	b.n	800e3c2 <Vector14C+0x12>
 800e434:	2320      	movs	r3, #32
 800e436:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800e43a:	69b3      	ldr	r3, [r6, #24]
 800e43c:	4818      	ldr	r0, [pc, #96]	; (800e4a0 <Vector14C+0xf0>)
 800e43e:	f023 0310 	bic.w	r3, r3, #16
 800e442:	61b3      	str	r3, [r6, #24]
 800e444:	2100      	movs	r1, #0
 800e446:	f7fe f953 	bl	800c6f0 <chThdResumeI>
 800e44a:	2300      	movs	r3, #0
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	e7c4      	b.n	800e3dc <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800e452:	2002      	movs	r0, #2
 800e454:	f7ff febc 	bl	800e1d0 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 800e458:	032b      	lsls	r3, r5, #12
 800e45a:	d5d5      	bpl.n	800e408 <Vector14C+0x58>
 800e45c:	e7d8      	b.n	800e410 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800e45e:	2000      	movs	r0, #0
 800e460:	f7ff feb6 	bl	800e1d0 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 800e464:	03a9      	lsls	r1, r5, #14
 800e466:	d5cb      	bpl.n	800e400 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 800e468:	2001      	movs	r0, #1
 800e46a:	f7ff feb1 	bl	800e1d0 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 800e46e:	036a      	lsls	r2, r5, #13
 800e470:	d5c8      	bpl.n	800e404 <Vector14C+0x54>
 800e472:	e7ee      	b.n	800e452 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 800e474:	2000      	movs	r0, #0
 800e476:	f7ff ff2b 	bl	800e2d0 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 800e47a:	07aa      	lsls	r2, r5, #30
 800e47c:	d5b6      	bpl.n	800e3ec <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 800e47e:	2001      	movs	r0, #1
 800e480:	f7ff ff26 	bl	800e2d0 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 800e484:	076b      	lsls	r3, r5, #29
 800e486:	d5b3      	bpl.n	800e3f0 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 800e488:	2002      	movs	r0, #2
 800e48a:	f7ff ff21 	bl	800e2d0 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 800e48e:	072e      	lsls	r6, r5, #28
 800e490:	d5b0      	bpl.n	800e3f4 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 800e492:	2003      	movs	r0, #3
 800e494:	f7ff ff1c 	bl	800e2d0 <otg_epin_handler.constprop.8>
 800e498:	e7ac      	b.n	800e3f4 <Vector14C+0x44>
 800e49a:	bf00      	nop
 800e49c:	20000b80 	.word	0x20000b80
 800e4a0:	20000be0 	.word	0x20000be0
	...

0800e4b0 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800e4b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e4b2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800e4b6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800e4ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4be:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800e4c2:	4770      	bx	lr
	...

0800e4d0 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800e4d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800e4d2:	b410      	push	{r4}
 800e4d4:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800e4d8:	2001      	movs	r0, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800e4da:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 800e4de:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e4e2:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800e4e6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
}
 800e4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800e4ee:	fa00 f101 	lsl.w	r1, r0, r1
 800e4f2:	4311      	orrs	r1, r2
 800e4f4:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
}
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	0000      	movs	r0, r0
	...

0800e500 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800e500:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e502:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800e506:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800e50a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e50e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800e512:	4770      	bx	lr
	...

0800e520 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800e520:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e522:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800e526:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800e52a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e52e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800e532:	4770      	bx	lr
	...

0800e540 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800e540:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e542:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800e546:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800e54a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e54e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800e552:	4770      	bx	lr
	...

0800e560 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 800e560:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e562:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800e566:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800e56a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e56e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800e572:	4770      	bx	lr
	...

0800e580 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 800e580:	b508      	push	{r3, lr}
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800e582:	4b0b      	ldr	r3, [pc, #44]	; (800e5b0 <Vector108+0x30>)
  if (gptp->state == GPT_ONESHOT) {
 800e584:	7818      	ldrb	r0, [r3, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800e586:	68da      	ldr	r2, [r3, #12]
 800e588:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 800e58a:	2804      	cmp	r0, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800e58c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 800e58e:	d107      	bne.n	800e5a0 <Vector108+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800e590:	2002      	movs	r0, #2
 800e592:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 800e594:	6011      	str	r1, [r2, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 800e596:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 800e598:	68d1      	ldr	r1, [r2, #12]
 800e59a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800e59e:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	4803      	ldr	r0, [pc, #12]	; (800e5b0 <Vector108+0x30>)
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD5);

  OSAL_IRQ_EPILOGUE();
}
 800e5a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD5);

  OSAL_IRQ_EPILOGUE();
 800e5ac:	f7fe bb10 	b.w	800cbd0 <_port_irq_epilogue>
 800e5b0:	20000e1c 	.word	0x20000e1c
	...

0800e5c0 <gpt_lld_init>:
  gptObjectInit(&GPTD4);
#endif

#if STM32_GPT_USE_TIM5
  /* Driver initialization.*/
  GPTD5.tim = STM32_TIM5;
 800e5c0:	4802      	ldr	r0, [pc, #8]	; (800e5cc <gpt_lld_init+0xc>)
 800e5c2:	4b03      	ldr	r3, [pc, #12]	; (800e5d0 <gpt_lld_init+0x10>)
 800e5c4:	60c3      	str	r3, [r0, #12]
  gptObjectInit(&GPTD5);
 800e5c6:	f7fe bb83 	b.w	800ccd0 <gptObjectInit>
 800e5ca:	bf00      	nop
 800e5cc:	20000e1c 	.word	0x20000e1c
 800e5d0:	40000c00 	.word	0x40000c00
	...

0800e5e0 <VectorB4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800e5e2:	4d25      	ldr	r5, [pc, #148]	; (800e678 <VectorB4+0x98>)
 800e5e4:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800e5e6:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800e5e8:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800e5ea:	68da      	ldr	r2, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800e5ec:	7d08      	ldrb	r0, [r1, #20]
 800e5ee:	4014      	ands	r4, r2
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
 800e5f0:	b2e2      	uxtb	r2, r4
 800e5f2:	43d2      	mvns	r2, r2
 800e5f4:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800e5f6:	b990      	cbnz	r0, 800e61e <VectorB4+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800e5f8:	0760      	lsls	r0, r4, #29
 800e5fa:	d52f      	bpl.n	800e65c <VectorB4+0x7c>
      _icu_isr_invoke_width_cb(icup);
 800e5fc:	782b      	ldrb	r3, [r5, #0]
 800e5fe:	2b04      	cmp	r3, #4
 800e600:	d028      	beq.n	800e654 <VectorB4+0x74>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800e602:	07a1      	lsls	r1, r4, #30
 800e604:	d412      	bmi.n	800e62c <VectorB4+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800e606:	07e4      	lsls	r4, r4, #31
 800e608:	d505      	bpl.n	800e616 <VectorB4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 800e60a:	686b      	ldr	r3, [r5, #4]
 800e60c:	481a      	ldr	r0, [pc, #104]	; (800e678 <VectorB4+0x98>)
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	4798      	blx	r3
 800e612:	2303      	movs	r3, #3
 800e614:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 800e616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
 800e61a:	f7fe bad9 	b.w	800cbd0 <_port_irq_epilogue>
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800e61e:	07a2      	lsls	r2, r4, #30
 800e620:	d50b      	bpl.n	800e63a <VectorB4+0x5a>
      _icu_isr_invoke_width_cb(icup);
 800e622:	782b      	ldrb	r3, [r5, #0]
 800e624:	2b04      	cmp	r3, #4
 800e626:	d004      	beq.n	800e632 <VectorB4+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800e628:	0763      	lsls	r3, r4, #29
 800e62a:	d5ec      	bpl.n	800e606 <VectorB4+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800e62c:	2304      	movs	r3, #4
 800e62e:	702b      	strb	r3, [r5, #0]
 800e630:	e7e9      	b.n	800e606 <VectorB4+0x26>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800e632:	688b      	ldr	r3, [r1, #8]
 800e634:	b1e3      	cbz	r3, 800e670 <VectorB4+0x90>
 800e636:	4628      	mov	r0, r5
 800e638:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800e63a:	0763      	lsls	r3, r4, #29
 800e63c:	d5e3      	bpl.n	800e606 <VectorB4+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800e63e:	782b      	ldrb	r3, [r5, #0]
 800e640:	4a0d      	ldr	r2, [pc, #52]	; (800e678 <VectorB4+0x98>)
 800e642:	2b04      	cmp	r3, #4
 800e644:	d1f2      	bne.n	800e62c <VectorB4+0x4c>
 800e646:	6851      	ldr	r1, [r2, #4]
 800e648:	68cb      	ldr	r3, [r1, #12]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d0ee      	beq.n	800e62c <VectorB4+0x4c>
 800e64e:	480a      	ldr	r0, [pc, #40]	; (800e678 <VectorB4+0x98>)
 800e650:	4798      	blx	r3
 800e652:	e7eb      	b.n	800e62c <VectorB4+0x4c>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800e654:	688b      	ldr	r3, [r1, #8]
 800e656:	b143      	cbz	r3, 800e66a <VectorB4+0x8a>
 800e658:	4628      	mov	r0, r5
 800e65a:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800e65c:	07a1      	lsls	r1, r4, #30
 800e65e:	d5d2      	bpl.n	800e606 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
 800e660:	782b      	ldrb	r3, [r5, #0]
 800e662:	4a05      	ldr	r2, [pc, #20]	; (800e678 <VectorB4+0x98>)
 800e664:	2b04      	cmp	r3, #4
 800e666:	d1e1      	bne.n	800e62c <VectorB4+0x4c>
 800e668:	e7ed      	b.n	800e646 <VectorB4+0x66>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800e66a:	07a0      	lsls	r0, r4, #30
 800e66c:	d4ec      	bmi.n	800e648 <VectorB4+0x68>
 800e66e:	e7ca      	b.n	800e606 <VectorB4+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800e670:	0762      	lsls	r2, r4, #29
 800e672:	d4e9      	bmi.n	800e648 <VectorB4+0x68>
 800e674:	e7c7      	b.n	800e606 <VectorB4+0x26>
 800e676:	bf00      	nop
 800e678:	20000e2c 	.word	0x20000e2c
 800e67c:	00000000 	.word	0x00000000

0800e680 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 800e680:	b510      	push	{r4, lr}
  ICUD2.tim = STM32_TIM2;
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
 800e682:	4c03      	ldr	r4, [pc, #12]	; (800e690 <icu_lld_init+0x10>)
 800e684:	4620      	mov	r0, r4
 800e686:	f7fe fb43 	bl	800cd10 <icuObjectInit>
  ICUD3.tim = STM32_TIM3;
 800e68a:	4b02      	ldr	r3, [pc, #8]	; (800e694 <icu_lld_init+0x14>)
 800e68c:	60e3      	str	r3, [r4, #12]
 800e68e:	bd10      	pop	{r4, pc}
 800e690:	20000e2c 	.word	0x20000e2c
 800e694:	40000400 	.word	0x40000400
	...

0800e6a0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800e6a0:	b508      	push	{r3, lr}
 800e6a2:	2320      	movs	r3, #32
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 800e6a8:	f7fd fdca 	bl	800c240 <chSysTimerHandlerI>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800e6b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800e6b6:	f7fe ba8b 	b.w	800cbd0 <_port_irq_epilogue>
 800e6ba:	bf00      	nop
 800e6bc:	0000      	movs	r0, r0
	...

0800e6c0 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800e6c0:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <st_lld_init+0x18>)
 800e6c2:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 800e6c6:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800e6c8:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800e6ca:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800e6cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800e6ce:	2108      	movs	r1, #8
 800e6d0:	200b      	movs	r0, #11
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800e6d2:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800e6d4:	f7fe be84 	b.w	800d3e0 <nvicSetSystemHandlerPriority>
 800e6d8:	e000e010 	.word	0xe000e010
 800e6dc:	00000000 	.word	0x00000000

0800e6e0 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 800e6e0:	4a02      	ldr	r2, [pc, #8]	; (800e6ec <notify3+0xc>)
 800e6e2:	68d3      	ldr	r3, [r2, #12]
 800e6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e8:	60d3      	str	r3, [r2, #12]
 800e6ea:	4770      	bx	lr
 800e6ec:	40004800 	.word	0x40004800

0800e6f0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 800e6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800e6f2:	4e43      	ldr	r6, [pc, #268]	; (800e800 <VectorDC+0x110>)
 800e6f4:	f8d6 5254 	ldr.w	r5, [r6, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 800e6f8:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 800e6fa:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800e6fc:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800e6fe:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800e700:	d44f      	bmi.n	800e7a2 <VectorDC+0xb2>
 800e702:	2320      	movs	r3, #32
 800e704:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800e708:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800e70c:	d108      	bne.n	800e720 <VectorDC+0x30>
 800e70e:	e029      	b.n	800e764 <VectorDC+0x74>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800e710:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800e712:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800e714:	d41d      	bmi.n	800e752 <VectorDC+0x62>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800e716:	682c      	ldr	r4, [r5, #0]
 800e718:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800e71a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800e71e:	d021      	beq.n	800e764 <VectorDC+0x74>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800e720:	0723      	lsls	r3, r4, #28
 800e722:	d0f5      	beq.n	800e710 <VectorDC+0x20>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800e724:	f014 0f08 	tst.w	r4, #8
 800e728:	bf0c      	ite	eq
 800e72a:	2100      	moveq	r1, #0
 800e72c:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800e72e:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800e730:	bf48      	it	mi
 800e732:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800e736:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 800e738:	bf48      	it	mi
 800e73a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800e73e:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800e740:	bf48      	it	mi
 800e742:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e746:	482f      	ldr	r0, [pc, #188]	; (800e804 <VectorDC+0x114>)
 800e748:	f7fe f892 	bl	800c870 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800e74c:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800e74e:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800e750:	d5e1      	bpl.n	800e716 <VectorDC+0x26>
      sdIncomingDataI(sdp, b);
 800e752:	b2c9      	uxtb	r1, r1
 800e754:	482a      	ldr	r0, [pc, #168]	; (800e800 <VectorDC+0x110>)
 800e756:	f7fe fb63 	bl	800ce20 <sdIncomingDataI>
    sr = u->SR;
 800e75a:	682c      	ldr	r4, [r5, #0]
 800e75c:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800e75e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800e762:	d1dd      	bne.n	800e720 <VectorDC+0x30>
 800e764:	2300      	movs	r3, #0
 800e766:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800e76a:	0639      	lsls	r1, r7, #24
 800e76c:	d501      	bpl.n	800e772 <VectorDC+0x82>
 800e76e:	0622      	lsls	r2, r4, #24
 800e770:	d426      	bmi.n	800e7c0 <VectorDC+0xd0>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 800e772:	0663      	lsls	r3, r4, #25
 800e774:	d511      	bpl.n	800e79a <VectorDC+0xaa>
 800e776:	2320      	movs	r3, #32
 800e778:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800e77c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e77e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800e780:	481f      	ldr	r0, [pc, #124]	; (800e800 <VectorDC+0x110>)
 800e782:	429a      	cmp	r2, r3
 800e784:	d029      	beq.n	800e7da <VectorDC+0xea>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800e786:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800e78a:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 800e78c:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800e790:	60eb      	str	r3, [r5, #12]
 800e792:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800e794:	602a      	str	r2, [r5, #0]
 800e796:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 800e79a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 800e79e:	f7fe ba17 	b.w	800cbd0 <_port_irq_epilogue>
 800e7a2:	2320      	movs	r3, #32
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e7ac:	1d30      	adds	r0, r6, #4
 800e7ae:	f7fe f85f 	bl	800c870 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 800e7b2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800e7b6:	602b      	str	r3, [r5, #0]
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 800e7be:	e7a0      	b.n	800e702 <VectorDC+0x12>
 800e7c0:	2320      	movs	r3, #32
 800e7c2:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 800e7c6:	4810      	ldr	r0, [pc, #64]	; (800e808 <VectorDC+0x118>)
 800e7c8:	f7fe f942 	bl	800ca50 <chOQGetI>
    if (b < Q_OK) {
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	db0c      	blt.n	800e7ea <VectorDC+0xfa>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800e7d0:	6068      	str	r0, [r5, #4]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	e7cb      	b.n	800e772 <VectorDC+0x82>
 800e7da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d0d2      	beq.n	800e786 <VectorDC+0x96>
 800e7e0:	3004      	adds	r0, #4
 800e7e2:	2110      	movs	r1, #16
 800e7e4:	f7fe f844 	bl	800c870 <chEvtBroadcastFlagsI>
 800e7e8:	e7cd      	b.n	800e786 <VectorDC+0x96>
 800e7ea:	2108      	movs	r1, #8
 800e7ec:	4805      	ldr	r0, [pc, #20]	; (800e804 <VectorDC+0x114>)
 800e7ee:	f7fe f83f 	bl	800c870 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800e7f2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e7f6:	403b      	ands	r3, r7
 800e7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7fc:	60eb      	str	r3, [r5, #12]
 800e7fe:	e7e8      	b.n	800e7d2 <VectorDC+0xe2>
 800e800:	20000e44 	.word	0x20000e44
 800e804:	20000e48 	.word	0x20000e48
 800e808:	20000e74 	.word	0x20000e74
 800e80c:	00000000 	.word	0x00000000

0800e810 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 800e810:	b510      	push	{r4, lr}
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800e812:	4c05      	ldr	r4, [pc, #20]	; (800e828 <sd_lld_init+0x18>)
 800e814:	4a05      	ldr	r2, [pc, #20]	; (800e82c <sd_lld_init+0x1c>)
 800e816:	4620      	mov	r0, r4
 800e818:	2100      	movs	r1, #0
 800e81a:	f7fe fac9 	bl	800cdb0 <sdObjectInit>
  SD3.usart = USART3;
 800e81e:	4b04      	ldr	r3, [pc, #16]	; (800e830 <sd_lld_init+0x20>)
 800e820:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 800e824:	bd10      	pop	{r4, pc}
 800e826:	bf00      	nop
 800e828:	20000e44 	.word	0x20000e44
 800e82c:	0800e6e1 	.word	0x0800e6e1
 800e830:	40004800 	.word	0x40004800
	...

0800e840 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800e840:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 800e842:	4c1f      	ldr	r4, [pc, #124]	; (800e8c0 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 800e844:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 800e846:	2900      	cmp	r1, #0
 800e848:	bf18      	it	ne
 800e84a:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 800e84c:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800e84e:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800e850:	d023      	beq.n	800e89a <sd_lld_start+0x5a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800e852:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800e856:	4a1b      	ldr	r2, [pc, #108]	; (800e8c4 <sd_lld_start+0x84>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d02b      	beq.n	800e8b4 <sd_lld_start+0x74>
 800e85c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e860:	4293      	cmp	r3, r2
 800e862:	d027      	beq.n	800e8b4 <sd_lld_start+0x74>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800e864:	6821      	ldr	r1, [r4, #0]
 800e866:	4a18      	ldr	r2, [pc, #96]	; (800e8c8 <sd_lld_start+0x88>)
 800e868:	fbb2 f2f1 	udiv	r2, r2, r1
 800e86c:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800e86e:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800e870:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800e872:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800e874:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800e878:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800e87c:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800e880:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800e884:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800e886:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800e888:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800e88a:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800e88c:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800e88e:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800e890:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800e892:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800e894:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	bd38      	pop	{r3, r4, r5, pc}
      rccEnableUSART2(FALSE);
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 800e89a:	4b0c      	ldr	r3, [pc, #48]	; (800e8cc <sd_lld_start+0x8c>)
 800e89c:	4298      	cmp	r0, r3
 800e89e:	d1d8      	bne.n	800e852 <sd_lld_start+0x12>
      rccEnableUSART3(FALSE);
 800e8a0:	4a0b      	ldr	r2, [pc, #44]	; (800e8d0 <sd_lld_start+0x90>)
 800e8a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e8a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e8a8:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 800e8aa:	210c      	movs	r1, #12
 800e8ac:	2027      	movs	r0, #39	; 0x27
 800e8ae:	f7fe fd77 	bl	800d3a0 <nvicEnableVector>
 800e8b2:	e7ce      	b.n	800e852 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 800e8b4:	6821      	ldr	r1, [r4, #0]
 800e8b6:	4a07      	ldr	r2, [pc, #28]	; (800e8d4 <sd_lld_start+0x94>)
 800e8b8:	fbb2 f2f1 	udiv	r2, r2, r1
 800e8bc:	609a      	str	r2, [r3, #8]
 800e8be:	e7d6      	b.n	800e86e <sd_lld_start+0x2e>
 800e8c0:	0800edd0 	.word	0x0800edd0
 800e8c4:	40011000 	.word	0x40011000
 800e8c8:	0280de80 	.word	0x0280de80
 800e8cc:	20000e44 	.word	0x20000e44
 800e8d0:	40023800 	.word	0x40023800
 800e8d4:	0501bd00 	.word	0x0501bd00
	...

0800e8e0 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 800e8e0:	f7fe bf6e 	b.w	800d7c0 <stm32_clock_init>
	...

0800e8f0 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
	...

0800e900 <uart_process_thread>:

	return 0;
}


static msg_t uart_process_thread(void *arg) {
 800e900:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800e902:	4b04      	ldr	r3, [pc, #16]	; (800e914 <uart_process_thread+0x14>)
 800e904:	4a04      	ldr	r2, [pc, #16]	; (800e918 <uart_process_thread+0x18>)
 800e906:	699b      	ldr	r3, [r3, #24]
 800e908:	619a      	str	r2, [r3, #24]
	//process_tp = chThdSelf();

	for(;;)
	{

	chThdSleepMilliseconds(100);/*Wait for an arbitrary time*/
 800e90a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e90e:	f7fd feb7 	bl	800c680 <chThdSleep>
 800e912:	e7fa      	b.n	800e90a <uart_process_thread+0xa>
 800e914:	20000810 	.word	0x20000810
 800e918:	0800eee0 	.word	0x0800eee0
 800e91c:	00000000 	.word	0x00000000

0800e920 <periodic_thread>:
 */

static THD_WORKING_AREA(periodic_thread_wa, 1024);
static THD_WORKING_AREA(uart_thread_wa, 128);

static msg_t periodic_thread(void *arg) {
 800e920:	b508      	push	{r3, lr}
 800e922:	4b04      	ldr	r3, [pc, #16]	; (800e934 <periodic_thread+0x14>)
 800e924:	4a04      	ldr	r2, [pc, #16]	; (800e938 <periodic_thread+0x18>)
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	619a      	str	r2, [r3, #24]
	//int fault_print = 0;

	for(;;)
	{

		chThdSleepMilliseconds(10);
 800e92a:	2064      	movs	r0, #100	; 0x64
 800e92c:	f7fd fea8 	bl	800c680 <chThdSleep>
 800e930:	e7fb      	b.n	800e92a <periodic_thread+0xa>
 800e932:	bf00      	nop
 800e934:	20000810 	.word	0x20000810
 800e938:	0800eef0 	.word	0x0800eef0
 800e93c:	00000000 	.word	0x00000000

0800e940 <bldc_init>:
    0
};


int bldc_init(void)
{
 800e940:	b508      	push	{r3, lr}
	halInit();
 800e942:	f7fe f975 	bl	800cc30 <halInit>
	chSysInit();
 800e946:	f7fd fc23 	bl	800c190 <chSysInit>

	chThdSleepMilliseconds(1000);
 800e94a:	f242 7010 	movw	r0, #10000	; 0x2710
 800e94e:	f7fd fe97 	bl	800c680 <chThdSleep>

	hw_init_gpio();
 800e952:	f000 f87d 	bl	800ea50 <hw_init_gpio>
	//comm_usb_init();

	while(true){

	
	chThdSleepMilliseconds(100);/*Wait for an arbitrary time*/
 800e956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e95a:	f7fd fe91 	bl	800c680 <chThdSleep>
 800e95e:	e7fa      	b.n	800e956 <bldc_init+0x16>

0800e960 <bldc_start>:
float dbg_fTheta;
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
 800e960:	b500      	push	{lr}
 800e962:	b083      	sub	sp, #12
	//-- 스레드 생성
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800e964:	2500      	movs	r5, #0
 800e966:	9500      	str	r5, [sp, #0]
 800e968:	4b1a      	ldr	r3, [pc, #104]	; (800e9d4 <bldc_start+0x74>)
 800e96a:	481b      	ldr	r0, [pc, #108]	; (800e9d8 <bldc_start+0x78>)
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));

	for(;;)
	{
		LED_GREEN_ON();
 800e96c:	4c1b      	ldr	r4, [pc, #108]	; (800e9dc <bldc_start+0x7c>)
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
	//-- 스레드 생성
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800e96e:	2240      	movs	r2, #64	; 0x40
 800e970:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 800e974:	f7fd fe4c 	bl	800c610 <chThdCreateStatic>
	chThdCreateStatic(uart_thread_wa, sizeof(uart_thread_wa), NORMALPRIO, uart_process_thread, NULL);
 800e978:	4b19      	ldr	r3, [pc, #100]	; (800e9e0 <bldc_start+0x80>)
 800e97a:	9500      	str	r5, [sp, #0]
 800e97c:	2240      	movs	r2, #64	; 0x40
 800e97e:	f44f 7106 	mov.w	r1, #536	; 0x218
 800e982:	4818      	ldr	r0, [pc, #96]	; (800e9e4 <bldc_start+0x84>)
 800e984:	f7fd fe44 	bl	800c610 <chThdCreateStatic>

	//-- IDLE
	uint8_t buffer[2];
    sdStart(&SD3, &sd3cfg);
 800e988:	4917      	ldr	r1, [pc, #92]	; (800e9e8 <bldc_start+0x88>)
 800e98a:	4818      	ldr	r0, [pc, #96]	; (800e9ec <bldc_start+0x8c>)
 800e98c:	f7fe fa38 	bl	800ce00 <sdStart>
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
 800e990:	f240 3282 	movw	r2, #898	; 0x382
 800e994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e998:	4815      	ldr	r0, [pc, #84]	; (800e9f0 <bldc_start+0x90>)
 800e99a:	f7ff f9c9 	bl	800dd30 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));
 800e99e:	f240 3282 	movw	r2, #898	; 0x382
 800e9a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e9a6:	4812      	ldr	r0, [pc, #72]	; (800e9f0 <bldc_start+0x90>)
 800e9a8:	f7ff f9c2 	bl	800dd30 <_pal_lld_setgroupmode>

	for(;;)
	{
		LED_GREEN_ON();
 800e9ac:	2540      	movs	r5, #64	; 0x40
 800e9ae:	462e      	mov	r6, r5
		//palSetPad(GPIOA, 7);
		chThdSleepMilliseconds(1);
 800e9b0:	200a      	movs	r0, #10
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));

	for(;;)
	{
		LED_GREEN_ON();
 800e9b2:	8326      	strh	r6, [r4, #24]
		//palSetPad(GPIOA, 7);
		chThdSleepMilliseconds(1);
 800e9b4:	f7fd fe64 	bl	800c680 <chThdSleep>
		/* Write arg3 bytes from arg2 to device pointed by arg1(SD3 for this example).
		 * Type of arg2 should be (uint8_t *) otherwise only first 8 bit will be send.*/
	
		//sdWrite(&SD3, buffer,2);

		sdWrite(&SD3, (uint8_t *)"Example: 1\r\n", 12);
 800e9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9bc:	220c      	movs	r2, #12
 800e9be:	490d      	ldr	r1, [pc, #52]	; (800e9f4 <bldc_start+0x94>)
 800e9c0:	480d      	ldr	r0, [pc, #52]	; (800e9f8 <bldc_start+0x98>)
 800e9c2:	f7fe f865 	bl	800ca90 <chOQWriteTimeout>

		chThdSleepMilliseconds(100);/*Wait for an arbitrary time*/
 800e9c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e9ca:	f7fd fe59 	bl	800c680 <chThdSleep>
		LED_GREEN_OFF();
 800e9ce:	8365      	strh	r5, [r4, #26]
 800e9d0:	e7ee      	b.n	800e9b0 <bldc_start+0x50>
 800e9d2:	bf00      	nop
 800e9d4:	0800e921 	.word	0x0800e921
 800e9d8:	200012b8 	.word	0x200012b8
 800e9dc:	40020400 	.word	0x40020400
 800e9e0:	0800e901 	.word	0x0800e901
 800e9e4:	200010a0 	.word	0x200010a0
 800e9e8:	20000800 	.word	0x20000800
 800e9ec:	20000e44 	.word	0x20000e44
 800e9f0:	40020800 	.word	0x40020800
 800e9f4:	0800ef00 	.word	0x0800ef00
 800e9f8:	20000e74 	.word	0x20000e74
 800e9fc:	00000000 	.word	0x00000000

0800ea00 <Vector11C>:
#include "isr_vector_table.h"
#include "main.h"
#include "mcpwm.h"
#include "hw.h"

CH_IRQ_HANDLER(TIM7_IRQHandler) {
 800ea00:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 800ea02:	2101      	movs	r1, #1
 800ea04:	4803      	ldr	r0, [pc, #12]	; (800ea14 <Vector11C+0x14>)
 800ea06:	f000 f913 	bl	800ec30 <TIM_ClearITPendingBit>

	CH_IRQ_EPILOGUE();
}
 800ea0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(TIM7_IRQHandler) {
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);

	CH_IRQ_EPILOGUE();
 800ea0e:	f7fe b8df 	b.w	800cbd0 <_port_irq_epilogue>
 800ea12:	bf00      	nop
 800ea14:	40001400 	.word	0x40001400
	...

0800ea20 <VectorE0>:
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
	mcpwm_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
}
*/
CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 800ea20:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 800ea22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ea26:	f000 f8db 	bl	800ebe0 <EXTI_GetITStatus>
 800ea2a:	b900      	cbnz	r0, 800ea2e <VectorE0+0xe>
 800ea2c:	bd08      	pop	{r3, pc}
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;
 800ea2e:	4b04      	ldr	r3, [pc, #16]	; (800ea40 <VectorE0+0x20>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	625a      	str	r2, [r3, #36]	; 0x24

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 800ea34:	f44f 6000 	mov.w	r0, #2048	; 0x800
	}
}
 800ea38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 800ea3c:	f000 b8e0 	b.w	800ec00 <EXTI_ClearITPendingBit>
 800ea40:	40000800 	.word	0x40000800
	...

0800ea50 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800ea50:	2101      	movs	r1, #1
		OPMODE_I2C,
		100000,
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
 800ea52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800ea56:	4608      	mov	r0, r1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea58:	4e5e      	ldr	r6, [pc, #376]	; (800ebd4 <hw_init_gpio+0x184>)

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea5a:	4c5f      	ldr	r4, [pc, #380]	; (800ebd8 <hw_init_gpio+0x188>)

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800ea5c:	4d5f      	ldr	r5, [pc, #380]	; (800ebdc <hw_init_gpio+0x18c>)
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800ea5e:	f000 f8d7 	bl	800ec10 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800ea62:	2101      	movs	r1, #1
 800ea64:	2002      	movs	r0, #2
 800ea66:	f000 f8d3 	bl	800ec10 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	2004      	movs	r0, #4
 800ea6e:	f000 f8cf 	bl	800ec10 <RCC_AHB1PeriphClockCmd>

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea72:	4630      	mov	r0, r6
 800ea74:	2219      	movs	r2, #25
 800ea76:	2140      	movs	r1, #64	; 0x40
 800ea78:	f7ff f95a 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea7c:	2180      	movs	r1, #128	; 0x80

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);
 800ea7e:	4688      	mov	r8, r1

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 800ea80:	2740      	movs	r7, #64	; 0x40
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea82:	4630      	mov	r0, r6
 800ea84:	2219      	movs	r2, #25
 800ea86:	f7ff f953 	bl	800dd30 <_pal_lld_setgroupmode>

	palClearPad(GPIOB, 6);
 800ea8a:	8377      	strh	r7, [r6, #26]
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea8c:	4639      	mov	r1, r7
 800ea8e:	4620      	mov	r0, r4
	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);
 800ea90:	f8a6 801a 	strh.w	r8, [r6, #26]

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea94:	2219      	movs	r2, #25
 800ea96:	f7ff f94b 	bl	800dd30 <_pal_lld_setgroupmode>
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 800ea9a:	f44f 7980 	mov.w	r9, #256	; 0x100
	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800ea9e:	4641      	mov	r1, r8
 800eaa0:	4620      	mov	r0, r4
	palClearPad(GPIOB, 6);
	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();
 800eaa2:	8367      	strh	r7, [r4, #26]

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800eaa4:	2219      	movs	r2, #25
 800eaa6:	f7ff f943 	bl	800dd30 <_pal_lld_setgroupmode>
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800eaaa:	4620      	mov	r0, r4
 800eaac:	4649      	mov	r1, r9
 800eaae:	2219      	movs	r2, #25
 800eab0:	f7ff f93e 	bl	800dd30 <_pal_lld_setgroupmode>
	GAIN_FULLDN();

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 800eab4:	4630      	mov	r0, r6
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 800eab6:	f8a4 901a 	strh.w	r9, [r4, #26]

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 800eaba:	2220      	movs	r2, #32
 800eabc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eac0:	f7ff f936 	bl	800dd30 <_pal_lld_setgroupmode>

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800eac4:	4649      	mov	r1, r9
 800eac6:	4628      	mov	r0, r5
 800eac8:	229a      	movs	r2, #154	; 0x9a
 800eaca:	f7ff f931 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800eace:	4628      	mov	r0, r5
 800ead0:	229a      	movs	r2, #154	; 0x9a
 800ead2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ead6:	f7ff f92b 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800eada:	4628      	mov	r0, r5
 800eadc:	229a      	movs	r2, #154	; 0x9a
 800eade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eae2:	f7ff f925 	bl	800dd30 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800eae6:	4630      	mov	r0, r6
 800eae8:	229a      	movs	r2, #154	; 0x9a
 800eaea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800eaee:	f7ff f91f 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	229a      	movs	r2, #154	; 0x9a
 800eaf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eafa:	f7ff f919 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800eafe:	4630      	mov	r0, r6
 800eb00:	229a      	movs	r2, #154	; 0x9a
 800eb02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eb06:	f7ff f913 	bl	800dd30 <_pal_lld_setgroupmode>

	// DHall sensors
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800eb12:	f7ff f90d 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 800eb16:	4620      	mov	r0, r4
 800eb18:	2220      	movs	r2, #32
 800eb1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eb1e:	f7ff f907 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);
 800eb22:	4620      	mov	r0, r4
 800eb24:	2220      	movs	r2, #32
 800eb26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eb2a:	f7ff f901 	bl	800dd30 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);//sen3
 800eb2e:	4628      	mov	r0, r5
 800eb30:	2203      	movs	r2, #3
 800eb32:	2101      	movs	r1, #1
 800eb34:	f7ff f8fc 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);//sen2
 800eb38:	4628      	mov	r0, r5
 800eb3a:	2203      	movs	r2, #3
 800eb3c:	2102      	movs	r1, #2
 800eb3e:	f7ff f8f7 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);//sen1
 800eb42:	4628      	mov	r0, r5
 800eb44:	2203      	movs	r2, #3
 800eb46:	2104      	movs	r1, #4
 800eb48:	f7ff f8f2 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);//INV_TEMP
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	2203      	movs	r2, #3
 800eb50:	2108      	movs	r1, #8
 800eb52:	f7ff f8ed 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 800eb56:	4628      	mov	r0, r5
 800eb58:	2203      	movs	r2, #3
 800eb5a:	2110      	movs	r1, #16
 800eb5c:	f7ff f8e8 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 800eb60:	4628      	mov	r0, r5
 800eb62:	2203      	movs	r2, #3
 800eb64:	2120      	movs	r1, #32
 800eb66:	f7ff f8e3 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 800eb6a:	4639      	mov	r1, r7
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	2203      	movs	r2, #3
 800eb70:	f7ff f8de 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT_ANALOG);
 800eb74:	4641      	mov	r1, r8
 800eb76:	4628      	mov	r0, r5
 800eb78:	2203      	movs	r2, #3
 800eb7a:	f7ff f8d9 	bl	800dd30 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);//BR_SO1
 800eb7e:	4630      	mov	r0, r6
 800eb80:	2203      	movs	r2, #3
 800eb82:	2101      	movs	r1, #1
 800eb84:	f7ff f8d4 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);//BR_SO2
 800eb88:	4630      	mov	r0, r6
 800eb8a:	2203      	movs	r2, #3
 800eb8c:	2102      	movs	r1, #2
 800eb8e:	f7ff f8cf 	bl	800dd30 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
 800eb92:	4620      	mov	r0, r4
 800eb94:	2203      	movs	r2, #3
 800eb96:	2101      	movs	r1, #1
 800eb98:	f7ff f8ca 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	2203      	movs	r2, #3
 800eba0:	2102      	movs	r1, #2
 800eba2:	f7ff f8c5 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
 800eba6:	4620      	mov	r0, r4
 800eba8:	2203      	movs	r2, #3
 800ebaa:	2104      	movs	r1, #4
 800ebac:	f7ff f8c0 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	2203      	movs	r2, #3
 800ebb4:	2108      	movs	r1, #8
 800ebb6:	f7ff f8bb 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
 800ebba:	4620      	mov	r0, r4
 800ebbc:	2203      	movs	r2, #3
 800ebbe:	2110      	movs	r1, #16
 800ebc0:	f7ff f8b6 	bl	800dd30 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	2203      	movs	r2, #3
 800ebc8:	2120      	movs	r1, #32

}
 800ebca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 800ebce:	f7ff b8af 	b.w	800dd30 <_pal_lld_setgroupmode>
 800ebd2:	bf00      	nop
 800ebd4:	40020400 	.word	0x40020400
 800ebd8:	40020800 	.word	0x40020800
 800ebdc:	40020000 	.word	0x40020000

0800ebe0 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800ebe0:	4b03      	ldr	r3, [pc, #12]	; (800ebf0 <EXTI_GetITStatus+0x10>)
 800ebe2:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800ebe4:	4203      	tst	r3, r0
  
}
 800ebe6:	bf14      	ite	ne
 800ebe8:	2001      	movne	r0, #1
 800ebea:	2000      	moveq	r0, #0
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	40013c00 	.word	0x40013c00
	...

0800ec00 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800ec00:	4b01      	ldr	r3, [pc, #4]	; (800ec08 <EXTI_ClearITPendingBit+0x8>)
 800ec02:	6158      	str	r0, [r3, #20]
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	40013c00 	.word	0x40013c00
 800ec0c:	00000000 	.word	0x00000000

0800ec10 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ec10:	b929      	cbnz	r1, 800ec1e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800ec12:	4a05      	ldr	r2, [pc, #20]	; (800ec28 <RCC_AHB1PeriphClockCmd+0x18>)
 800ec14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ec16:	ea23 0000 	bic.w	r0, r3, r0
 800ec1a:	6310      	str	r0, [r2, #48]	; 0x30
 800ec1c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800ec1e:	4b02      	ldr	r3, [pc, #8]	; (800ec28 <RCC_AHB1PeriphClockCmd+0x18>)
 800ec20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec22:	4310      	orrs	r0, r2
 800ec24:	6318      	str	r0, [r3, #48]	; 0x30
 800ec26:	4770      	bx	lr
 800ec28:	40023800 	.word	0x40023800
 800ec2c:	00000000 	.word	0x00000000

0800ec30 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800ec30:	43c9      	mvns	r1, r1
 800ec32:	b289      	uxth	r1, r1
 800ec34:	6101      	str	r1, [r0, #16]
 800ec36:	4770      	bx	lr
	...

0800ec40 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 800ec40:	b508      	push	{r3, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void main_init(void)
{
	bldc_init();
 800ec42:	f7ff fe7d 	bl	800e940 <bldc_init>

	test.print();

	//-- BLDC 시작
	//
	bldc_start();
 800ec46:	f7ff fe8b 	bl	800e960 <bldc_start>


	return 0;
}
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	bd08      	pop	{r3, pc}
 800ec4e:	bf00      	nop
 800ec50:	656c6469 	.word	0x656c6469
	...

0800ec60 <ch_debug>:
 800ec60:	6e69616d 18011600 08480404 1814100c     main......H.....
 800ec70:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

0800ec80 <vmt>:
 800ec80:	0800cd51 0800cd31 0800cd91 0800cd71     Q...1.......q...
 800ec90:	0800cd81 0800cd61 0800cd41 0800cd21     ....a...A...!...

0800eca0 <zero_status>:
	...

0800ecb0 <active_status>:
	...

0800ecc0 <halted_status>:
 800ecc0:	00000001 00000000 00000000 00000000     ................

0800ecd0 <_stm32_dma_streams>:
 800ecd0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 800ece0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 800ecf0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 800ed00:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 800ed10:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 800ed20:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 800ed30:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 800ed40:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 800ed50:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 800ed60:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 800ed70:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 800ed80:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

0800ed90 <fsparams>:
 800ed90:	00000080 00000140 00000003 00000000     ....@...........

0800eda0 <ep0config>:
 800eda0:	00000000 0800ced1 0800d211 0800d301     ................
 800edb0:	00400040 20000e00 20000e00 00000001     @.@.... ... ....
 800edc0:	20000e14 00000000 00000000 00000000     ... ............

0800edd0 <default_config>:
 800edd0:	0001c200 40000000 00000000 00000000     .......@........

0800ede0 <pal_default_config>:
 800ede0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 800edf0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 800ee00:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 800ee10:	04000000 00000040 02208001 00000000     ....@..... .....
 800ee20:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 800ee30:	00060600 55000100 00000000 ffffffff     .......U........
 800ee40:	00555055 00000fff 00000000 00000000     UPU.............
 800ee50:	00000040 00000000 ffffffff 00000000     @...............
 800ee60:	0000ffff 00000000 00000000 00000000     ................
 800ee70:	00000000 ffffffff 00000000 0000ffff     ................
	...
 800ee90:	ffffffff 00000000 0000ffff 00000000     ................
	...
 800eeac:	ffffffff 00000000 0000ffff 00000000     ................
	...
 800eec8:	ffffffff 00000000 0000ffff 00000000     ................
	...
 800eee0:	74726175 20787220 636f7270 00737365     uart rx process.
 800eef0:	6e69614d 72657020 69646f69 00000063     Main periodic...
 800ef00:	6d617845 3a656c70 0a0d3120 00000000     Example: 1......
