
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x4>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f000 fcba 	bl	800c9d0 <__core_init>
 800c05c:	f003 fb18 	bl	800f690 <__early_init>
 800c060:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800c064:	491b      	ldr	r1, [pc, #108]	; (800c0d4 <endfiniloop+0x8>)
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <endfiniloop+0xc>)

0800c068 <msloop>:
 800c068:	4291      	cmp	r1, r2
 800c06a:	bf3c      	itt	cc
 800c06c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c070:	e7fa      	bcc.n	800c068 <msloop>
 800c072:	491a      	ldr	r1, [pc, #104]	; (800c0dc <endfiniloop+0x10>)
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <endfiniloop+0x4>)

0800c076 <psloop>:
 800c076:	4291      	cmp	r1, r2
 800c078:	bf3c      	itt	cc
 800c07a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07e:	e7fa      	bcc.n	800c076 <psloop>
 800c080:	4917      	ldr	r1, [pc, #92]	; (800c0e0 <endfiniloop+0x14>)
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <endfiniloop+0x18>)
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <endfiniloop+0x1c>)

0800c086 <dloop>:
 800c086:	429a      	cmp	r2, r3
 800c088:	bf3e      	ittt	cc
 800c08a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08e:	f842 0b04 	strcc.w	r0, [r2], #4
 800c092:	e7f8      	bcc.n	800c086 <dloop>
 800c094:	2000      	movs	r0, #0
 800c096:	4915      	ldr	r1, [pc, #84]	; (800c0ec <endfiniloop+0x20>)
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <endfiniloop+0x24>)

0800c09a <bloop>:
 800c09a:	4291      	cmp	r1, r2
 800c09c:	bf3c      	itt	cc
 800c09e:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a2:	e7fa      	bcc.n	800c09a <bloop>
 800c0a4:	f000 fc9c 	bl	800c9e0 <__late_init>
 800c0a8:	4c12      	ldr	r4, [pc, #72]	; (800c0f4 <endfiniloop+0x28>)
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <endfiniloop+0x2c>)

0800c0ac <initloop>:
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	da03      	bge.n	800c0b8 <endinitloop>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	4788      	blx	r1
 800c0b6:	e7f9      	b.n	800c0ac <initloop>

0800c0b8 <endinitloop>:
 800c0b8:	f005 fd22 	bl	8011b00 <main>
 800c0bc:	4c0f      	ldr	r4, [pc, #60]	; (800c0fc <endfiniloop+0x30>)
 800c0be:	4d10      	ldr	r5, [pc, #64]	; (800c100 <endfiniloop+0x34>)

0800c0c0 <finiloop>:
 800c0c0:	42ac      	cmp	r4, r5
 800c0c2:	da03      	bge.n	800c0cc <endfiniloop>
 800c0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c8:	4788      	blx	r1
 800c0ca:	e7f9      	b.n	800c0c0 <finiloop>

0800c0cc <endfiniloop>:
 800c0cc:	f000 bc90 	b.w	800c9f0 <__default_exit>
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	20000000 	.word	0x20000000
 800c0d8:	20000400 	.word	0x20000400
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	08013188 	.word	0x08013188
 800c0e4:	20000800 	.word	0x20000800
 800c0e8:	20000c6c 	.word	0x20000c6c
 800c0ec:	20000c70 	.word	0x20000c70
 800c0f0:	200022e0 	.word	0x200022e0
 800c0f4:	0800c000 	.word	0x0800c000
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f000 ff2c 	bl	800cf90 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f000 fe8a 	bl	800ce50 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f092 0f00 	teq	r2, #0
 800c42a:	bf14      	ite	ne
 800c42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c430:	4770      	bxeq	lr
 800c432:	b530      	push	{r4, r5, lr}
 800c434:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c440:	e720      	b.n	800c284 <__adddf3+0x138>
 800c442:	bf00      	nop

0800c444 <__aeabi_ul2d>:
 800c444:	ea50 0201 	orrs.w	r2, r0, r1
 800c448:	bf08      	it	eq
 800c44a:	4770      	bxeq	lr
 800c44c:	b530      	push	{r4, r5, lr}
 800c44e:	f04f 0500 	mov.w	r5, #0
 800c452:	e00a      	b.n	800c46a <__aeabi_l2d+0x16>

0800c454 <__aeabi_l2d>:
 800c454:	ea50 0201 	orrs.w	r2, r0, r1
 800c458:	bf08      	it	eq
 800c45a:	4770      	bxeq	lr
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c462:	d502      	bpl.n	800c46a <__aeabi_l2d+0x16>
 800c464:	4240      	negs	r0, r0
 800c466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c46a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c46e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c476:	f43f aedc 	beq.w	800c232 <__adddf3+0xe6>
 800c47a:	f04f 0203 	mov.w	r2, #3
 800c47e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c482:	bf18      	it	ne
 800c484:	3203      	addne	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c492:	f1c2 0320 	rsb	r3, r2, #32
 800c496:	fa00 fc03 	lsl.w	ip, r0, r3
 800c49a:	fa20 f002 	lsr.w	r0, r0, r2
 800c49e:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4a2:	ea40 000e 	orr.w	r0, r0, lr
 800c4a6:	fa21 f102 	lsr.w	r1, r1, r2
 800c4aa:	4414      	add	r4, r2
 800c4ac:	e6c1      	b.n	800c232 <__adddf3+0xe6>
 800c4ae:	bf00      	nop

0800c4b0 <__aeabi_dmul>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4be:	bf1d      	ittte	ne
 800c4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4c4:	ea94 0f0c 	teqne	r4, ip
 800c4c8:	ea95 0f0c 	teqne	r5, ip
 800c4cc:	f000 f8de 	bleq	800c68c <__aeabi_dmul+0x1dc>
 800c4d0:	442c      	add	r4, r5
 800c4d2:	ea81 0603 	eor.w	r6, r1, r3
 800c4d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4e2:	bf18      	it	ne
 800c4e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f0:	d038      	beq.n	800c564 <__aeabi_dmul+0xb4>
 800c4f2:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4f6:	f04f 0500 	mov.w	r5, #0
 800c4fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c502:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c506:	f04f 0600 	mov.w	r6, #0
 800c50a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c50e:	f09c 0f00 	teq	ip, #0
 800c512:	bf18      	it	ne
 800c514:	f04e 0e01 	orrne.w	lr, lr, #1
 800c518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c51c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c524:	d204      	bcs.n	800c530 <__aeabi_dmul+0x80>
 800c526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c52a:	416d      	adcs	r5, r5
 800c52c:	eb46 0606 	adc.w	r6, r6, r6
 800c530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c53c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c548:	bf88      	it	hi
 800c54a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c54e:	d81e      	bhi.n	800c58e <__aeabi_dmul+0xde>
 800c550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c554:	bf08      	it	eq
 800c556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c55a:	f150 0000 	adcs.w	r0, r0, #0
 800c55e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c568:	ea46 0101 	orr.w	r1, r6, r1
 800c56c:	ea40 0002 	orr.w	r0, r0, r2
 800c570:	ea81 0103 	eor.w	r1, r1, r3
 800c574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c578:	bfc2      	ittt	gt
 800c57a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c57e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c582:	bd70      	popgt	{r4, r5, r6, pc}
 800c584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c588:	f04f 0e00 	mov.w	lr, #0
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f300 80ab 	bgt.w	800c6e8 <__aeabi_dmul+0x238>
 800c592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c596:	bfde      	ittt	le
 800c598:	2000      	movle	r0, #0
 800c59a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c59e:	bd70      	pople	{r4, r5, r6, pc}
 800c5a0:	f1c4 0400 	rsb	r4, r4, #0
 800c5a4:	3c20      	subs	r4, #32
 800c5a6:	da35      	bge.n	800c614 <__aeabi_dmul+0x164>
 800c5a8:	340c      	adds	r4, #12
 800c5aa:	dc1b      	bgt.n	800c5e4 <__aeabi_dmul+0x134>
 800c5ac:	f104 0414 	add.w	r4, r4, #20
 800c5b0:	f1c4 0520 	rsb	r5, r4, #32
 800c5b4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5b8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5bc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5c0:	ea40 0002 	orr.w	r0, r0, r2
 800c5c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5d0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5d4:	eb42 0106 	adc.w	r1, r2, r6
 800c5d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5dc:	bf08      	it	eq
 800c5de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f1c4 040c 	rsb	r4, r4, #12
 800c5e8:	f1c4 0520 	rsb	r5, r4, #32
 800c5ec:	fa00 f304 	lsl.w	r3, r0, r4
 800c5f0:	fa20 f005 	lsr.w	r0, r0, r5
 800c5f4:	fa01 f204 	lsl.w	r2, r1, r4
 800c5f8:	ea40 0002 	orr.w	r0, r0, r2
 800c5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c604:	f141 0100 	adc.w	r1, r1, #0
 800c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c60c:	bf08      	it	eq
 800c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f1c4 0520 	rsb	r5, r4, #32
 800c618:	fa00 f205 	lsl.w	r2, r0, r5
 800c61c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c620:	fa20 f304 	lsr.w	r3, r0, r4
 800c624:	fa01 f205 	lsl.w	r2, r1, r5
 800c628:	ea43 0302 	orr.w	r3, r3, r2
 800c62c:	fa21 f004 	lsr.w	r0, r1, r4
 800c630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c634:	fa21 f204 	lsr.w	r2, r1, r4
 800c638:	ea20 0002 	bic.w	r0, r0, r2
 800c63c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c644:	bf08      	it	eq
 800c646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f094 0f00 	teq	r4, #0
 800c650:	d10f      	bne.n	800c672 <__aeabi_dmul+0x1c2>
 800c652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c656:	0040      	lsls	r0, r0, #1
 800c658:	eb41 0101 	adc.w	r1, r1, r1
 800c65c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c660:	bf08      	it	eq
 800c662:	3c01      	subeq	r4, #1
 800c664:	d0f7      	beq.n	800c656 <__aeabi_dmul+0x1a6>
 800c666:	ea41 0106 	orr.w	r1, r1, r6
 800c66a:	f095 0f00 	teq	r5, #0
 800c66e:	bf18      	it	ne
 800c670:	4770      	bxne	lr
 800c672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c676:	0052      	lsls	r2, r2, #1
 800c678:	eb43 0303 	adc.w	r3, r3, r3
 800c67c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c680:	bf08      	it	eq
 800c682:	3d01      	subeq	r5, #1
 800c684:	d0f7      	beq.n	800c676 <__aeabi_dmul+0x1c6>
 800c686:	ea43 0306 	orr.w	r3, r3, r6
 800c68a:	4770      	bx	lr
 800c68c:	ea94 0f0c 	teq	r4, ip
 800c690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c694:	bf18      	it	ne
 800c696:	ea95 0f0c 	teqne	r5, ip
 800c69a:	d00c      	beq.n	800c6b6 <__aeabi_dmul+0x206>
 800c69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6a0:	bf18      	it	ne
 800c6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6a6:	d1d1      	bne.n	800c64c <__aeabi_dmul+0x19c>
 800c6a8:	ea81 0103 	eor.w	r1, r1, r3
 800c6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6b0:	f04f 0000 	mov.w	r0, #0
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ba:	bf06      	itte	eq
 800c6bc:	4610      	moveq	r0, r2
 800c6be:	4619      	moveq	r1, r3
 800c6c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6c4:	d019      	beq.n	800c6fa <__aeabi_dmul+0x24a>
 800c6c6:	ea94 0f0c 	teq	r4, ip
 800c6ca:	d102      	bne.n	800c6d2 <__aeabi_dmul+0x222>
 800c6cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6d0:	d113      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6d2:	ea95 0f0c 	teq	r5, ip
 800c6d6:	d105      	bne.n	800c6e4 <__aeabi_dmul+0x234>
 800c6d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6dc:	bf1c      	itt	ne
 800c6de:	4610      	movne	r0, r2
 800c6e0:	4619      	movne	r1, r3
 800c6e2:	d10a      	bne.n	800c6fa <__aeabi_dmul+0x24a>
 800c6e4:	ea81 0103 	eor.w	r1, r1, r3
 800c6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c702:	bd70      	pop	{r4, r5, r6, pc}

0800c704 <__aeabi_ddiv>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c712:	bf1d      	ittte	ne
 800c714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c718:	ea94 0f0c 	teqne	r4, ip
 800c71c:	ea95 0f0c 	teqne	r5, ip
 800c720:	f000 f8a7 	bleq	800c872 <__aeabi_ddiv+0x16e>
 800c724:	eba4 0405 	sub.w	r4, r4, r5
 800c728:	ea81 0e03 	eor.w	lr, r1, r3
 800c72c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c734:	f000 8088 	beq.w	800c848 <__aeabi_ddiv+0x144>
 800c738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c73c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c74c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c75c:	429d      	cmp	r5, r3
 800c75e:	bf08      	it	eq
 800c760:	4296      	cmpeq	r6, r2
 800c762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c76a:	d202      	bcs.n	800c772 <__aeabi_ddiv+0x6e>
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c772:	1ab6      	subs	r6, r6, r2
 800c774:	eb65 0503 	sbc.w	r5, r5, r3
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c77e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c786:	ebb6 0e02 	subs.w	lr, r6, r2
 800c78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c78e:	bf22      	ittt	cs
 800c790:	1ab6      	subcs	r6, r6, r2
 800c792:	4675      	movcs	r5, lr
 800c794:	ea40 000c 	orrcs.w	r0, r0, ip
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c79e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7a6:	bf22      	ittt	cs
 800c7a8:	1ab6      	subcs	r6, r6, r2
 800c7aa:	4675      	movcs	r5, lr
 800c7ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7b6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7be:	bf22      	ittt	cs
 800c7c0:	1ab6      	subcs	r6, r6, r2
 800c7c2:	4675      	movcs	r5, lr
 800c7c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7c8:	085b      	lsrs	r3, r3, #1
 800c7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7d6:	bf22      	ittt	cs
 800c7d8:	1ab6      	subcs	r6, r6, r2
 800c7da:	4675      	movcs	r5, lr
 800c7dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7e0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7e4:	d018      	beq.n	800c818 <__aeabi_ddiv+0x114>
 800c7e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c7f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c7fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c7fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c802:	d1c0      	bne.n	800c786 <__aeabi_ddiv+0x82>
 800c804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c808:	d10b      	bne.n	800c822 <__aeabi_ddiv+0x11e>
 800c80a:	ea41 0100 	orr.w	r1, r1, r0
 800c80e:	f04f 0000 	mov.w	r0, #0
 800c812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c816:	e7b6      	b.n	800c786 <__aeabi_ddiv+0x82>
 800c818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c81c:	bf04      	itt	eq
 800c81e:	4301      	orreq	r1, r0
 800c820:	2000      	moveq	r0, #0
 800c822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c826:	bf88      	it	hi
 800c828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c82c:	f63f aeaf 	bhi.w	800c58e <__aeabi_dmul+0xde>
 800c830:	ebb5 0c03 	subs.w	ip, r5, r3
 800c834:	bf04      	itt	eq
 800c836:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c83e:	f150 0000 	adcs.w	r0, r0, #0
 800c842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c84c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c854:	bfc2      	ittt	gt
 800c856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c85a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c85e:	bd70      	popgt	{r4, r5, r6, pc}
 800c860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c864:	f04f 0e00 	mov.w	lr, #0
 800c868:	3c01      	subs	r4, #1
 800c86a:	e690      	b.n	800c58e <__aeabi_dmul+0xde>
 800c86c:	ea45 0e06 	orr.w	lr, r5, r6
 800c870:	e68d      	b.n	800c58e <__aeabi_dmul+0xde>
 800c872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c876:	ea94 0f0c 	teq	r4, ip
 800c87a:	bf08      	it	eq
 800c87c:	ea95 0f0c 	teqeq	r5, ip
 800c880:	f43f af3b 	beq.w	800c6fa <__aeabi_dmul+0x24a>
 800c884:	ea94 0f0c 	teq	r4, ip
 800c888:	d10a      	bne.n	800c8a0 <__aeabi_ddiv+0x19c>
 800c88a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c88e:	f47f af34 	bne.w	800c6fa <__aeabi_dmul+0x24a>
 800c892:	ea95 0f0c 	teq	r5, ip
 800c896:	f47f af25 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c89a:	4610      	mov	r0, r2
 800c89c:	4619      	mov	r1, r3
 800c89e:	e72c      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8a0:	ea95 0f0c 	teq	r5, ip
 800c8a4:	d106      	bne.n	800c8b4 <__aeabi_ddiv+0x1b0>
 800c8a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8aa:	f43f aefd 	beq.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	e722      	b.n	800c6fa <__aeabi_dmul+0x24a>
 800c8b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8b8:	bf18      	it	ne
 800c8ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8be:	f47f aec5 	bne.w	800c64c <__aeabi_dmul+0x19c>
 800c8c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8c6:	f47f af0d 	bne.w	800c6e4 <__aeabi_dmul+0x234>
 800c8ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8ce:	f47f aeeb 	bne.w	800c6a8 <__aeabi_dmul+0x1f8>
 800c8d2:	e712      	b.n	800c6fa <__aeabi_dmul+0x24a>
	...

0800c8e0 <__aeabi_d2iz>:
 800c8e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c8e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800c8e8:	d215      	bcs.n	800c916 <__aeabi_d2iz+0x36>
 800c8ea:	d511      	bpl.n	800c910 <__aeabi_d2iz+0x30>
 800c8ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800c8f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800c8f4:	d912      	bls.n	800c91c <__aeabi_d2iz+0x3c>
 800c8f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c8fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c902:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c906:	fa23 f002 	lsr.w	r0, r3, r2
 800c90a:	bf18      	it	ne
 800c90c:	4240      	negne	r0, r0
 800c90e:	4770      	bx	lr
 800c910:	f04f 0000 	mov.w	r0, #0
 800c914:	4770      	bx	lr
 800c916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800c91a:	d105      	bne.n	800c928 <__aeabi_d2iz+0x48>
 800c91c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800c920:	bf08      	it	eq
 800c922:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800c926:	4770      	bx	lr
 800c928:	f04f 0000 	mov.w	r0, #0
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop

0800c930 <__aeabi_d2f>:
 800c930:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c934:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800c938:	bf24      	itt	cs
 800c93a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800c93e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800c942:	d90d      	bls.n	800c960 <__aeabi_d2f+0x30>
 800c944:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800c948:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800c94c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800c950:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800c954:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800c958:	bf08      	it	eq
 800c95a:	f020 0001 	biceq.w	r0, r0, #1
 800c95e:	4770      	bx	lr
 800c960:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800c964:	d121      	bne.n	800c9aa <__aeabi_d2f+0x7a>
 800c966:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800c96a:	bfbc      	itt	lt
 800c96c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800c970:	4770      	bxlt	lr
 800c972:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c976:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800c97a:	f1c2 0218 	rsb	r2, r2, #24
 800c97e:	f1c2 0c20 	rsb	ip, r2, #32
 800c982:	fa10 f30c 	lsls.w	r3, r0, ip
 800c986:	fa20 f002 	lsr.w	r0, r0, r2
 800c98a:	bf18      	it	ne
 800c98c:	f040 0001 	orrne.w	r0, r0, #1
 800c990:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c994:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800c998:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c99c:	ea40 000c 	orr.w	r0, r0, ip
 800c9a0:	fa23 f302 	lsr.w	r3, r3, r2
 800c9a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9a8:	e7cc      	b.n	800c944 <__aeabi_d2f+0x14>
 800c9aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800c9ae:	d107      	bne.n	800c9c0 <__aeabi_d2f+0x90>
 800c9b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800c9b4:	bf1e      	ittt	ne
 800c9b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800c9ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800c9be:	4770      	bxne	lr
 800c9c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800c9c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800c9c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop

0800c9d0 <__core_init>:
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
	...

0800c9e0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
	...

0800c9f0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800c9f0:	e7fe      	b.n	800c9f0 <__default_exit>
 800c9f2:	bf00      	nop
	...

0800ca00 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800ca00:	e7fe      	b.n	800ca00 <_unhandled_exception>
 800ca02:	bf00      	nop
	...

0800ca10 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800ca10:	e7fe      	b.n	800ca10 <_idle_thread>
 800ca12:	bf00      	nop
	...

0800ca20 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800ca20:	4b20      	ldr	r3, [pc, #128]	; (800caa4 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800ca22:	4a21      	ldr	r2, [pc, #132]	; (800caa8 <chSysInit+0x88>)
  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800ca24:	4821      	ldr	r0, [pc, #132]	; (800caac <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800ca26:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800ca28:	2400      	movs	r4, #0
 800ca2a:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ca2c:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ca2e:	4e20      	ldr	r6, [pc, #128]	; (800cab0 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800ca30:	4d20      	ldr	r5, [pc, #128]	; (800cab4 <chSysInit+0x94>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800ca32:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800ca36:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                 |
 800ca38:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800ca3a:	60da      	str	r2, [r3, #12]
 800ca3c:	68f2      	ldr	r2, [r6, #12]
 800ca3e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ca42:	60f2      	str	r2, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800ca44:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800ca46:	2120      	movs	r1, #32
 800ca48:	f042 0201 	orr.w	r2, r2, #1
 800ca4c:	2610      	movs	r6, #16
 800ca4e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800ca50:	b083      	sub	sp, #12
 800ca52:	77de      	strb	r6, [r3, #31]
 800ca54:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 800ca58:	f000 f8fa 	bl	800cc50 <_scheduler_init>
  _vt_init();
 800ca5c:	f000 f878 	bl	800cb50 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800ca60:	f000 fb1e 	bl	800d0a0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800ca64:	f000 fd84 	bl	800d570 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800ca68:	f000 fdba 	bl	800d5e0 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	2140      	movs	r1, #64	; 0x40
 800ca70:	f000 f9fe 	bl	800ce70 <_thread_init>
 800ca74:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800ca78:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800ca7a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800ca7c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ca7e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800ca82:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	490c      	ldr	r1, [pc, #48]	; (800cab8 <chSysInit+0x98>)
 800ca88:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800ca8a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800ca8e:	9400      	str	r4, [sp, #0]
 800ca90:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <chSysInit+0x9c>)
 800ca92:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800ca96:	f000 fa13 	bl	800cec0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800ca9a:	4b09      	ldr	r3, [pc, #36]	; (800cac0 <chSysInit+0xa0>)
 800ca9c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800ca9e:	b003      	add	sp, #12
 800caa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa2:	bf00      	nop
 800caa4:	e000ed00 	.word	0xe000ed00
 800caa8:	05fa0300 	.word	0x05fa0300
 800caac:	e0001000 	.word	0xe0001000
 800cab0:	e000edf0 	.word	0xe000edf0
 800cab4:	20000ca0 	.word	0x20000ca0
 800cab8:	08012a30 	.word	0x08012a30
 800cabc:	0800ca11 	.word	0x0800ca11
 800cac0:	08012a20 	.word	0x08012a20
	...

0800cad0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800cad2:	4d13      	ldr	r5, [pc, #76]	; (800cb20 <chSysTimerHandlerI+0x50>)
 800cad4:	69aa      	ldr	r2, [r5, #24]
 800cad6:	7fd3      	ldrb	r3, [r2, #31]
 800cad8:	b10b      	cbz	r3, 800cade <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800cada:	3b01      	subs	r3, #1
 800cadc:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800cade:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cae0:	69eb      	ldr	r3, [r5, #28]
 800cae2:	4e10      	ldr	r6, [pc, #64]	; (800cb24 <chSysTimerHandlerI+0x54>)
 800cae4:	3101      	adds	r1, #1
 800cae6:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800cae8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800caea:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 800caec:	f102 0201 	add.w	r2, r2, #1
 800caf0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800caf2:	d013      	beq.n	800cb1c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800caf4:	689c      	ldr	r4, [r3, #8]
 800caf6:	3c01      	subs	r4, #1
 800caf8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cafa:	b97c      	cbnz	r4, 800cb1c <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cafc:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cafe:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 800cb00:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800cb02:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cb04:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800cb06:	61ea      	str	r2, [r5, #28]
 800cb08:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800cb0c:	6918      	ldr	r0, [r3, #16]
 800cb0e:	4788      	blx	r1
 800cb10:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cb14:	69eb      	ldr	r3, [r5, #28]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	2a00      	cmp	r2, #0
 800cb1a:	d0f0      	beq.n	800cafe <chSysTimerHandlerI+0x2e>
 800cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	20000c70 	.word	0x20000c70
 800cb24:	20000c8c 	.word	0x20000c8c
	...

0800cb30 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800cb30:	4a03      	ldr	r2, [pc, #12]	; (800cb40 <chSysPolledDelayX+0x10>)
 800cb32:	6851      	ldr	r1, [r2, #4]
 800cb34:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800cb36:	1a5b      	subs	r3, r3, r1
 800cb38:	4283      	cmp	r3, r0
 800cb3a:	d3fb      	bcc.n	800cb34 <chSysPolledDelayX+0x4>
  }
}
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	e0001000 	.word	0xe0001000
	...

0800cb50 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cb50:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cb56:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cb5a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cb5c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cb5e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cb60:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cb62:	621a      	str	r2, [r3, #32]
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	20000c70 	.word	0x20000c70
 800cb6c:	00000000 	.word	0x00000000

0800cb70 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800cb70:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800cb72:	4e0d      	ldr	r6, [pc, #52]	; (800cba8 <chVTDoSetI+0x38>)
 800cb74:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 800cb76:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800cb78:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cb7a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800cb7c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cb7e:	d904      	bls.n	800cb8a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800cb80:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800cb82:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800cb84:	68a5      	ldr	r5, [r4, #8]
 800cb86:	428d      	cmp	r5, r1
 800cb88:	d3fa      	bcc.n	800cb80 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800cb8a:	6863      	ldr	r3, [r4, #4]
 800cb8c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800cb8e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800cb90:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800cb92:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800cb94:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cb96:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cb98:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cb9c:	1a59      	subs	r1, r3, r1
 800cb9e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cba0:	6272      	str	r2, [r6, #36]	; 0x24
}
 800cba2:	bc70      	pop	{r4, r5, r6}
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	20000c70 	.word	0x20000c70
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cbb0:	6803      	ldr	r3, [r0, #0]
 800cbb2:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800cbb4:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800cbb6:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cbb8:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800cbba:	4c06      	ldr	r4, [pc, #24]	; (800cbd4 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800cbbc:	442a      	add	r2, r5
 800cbbe:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800cbc0:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800cbc2:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800cbc4:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800cbc6:	f04f 33ff 	mov.w	r3, #4294967295
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800cbca:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800cbcc:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800cbce:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800cbd0:	bc30      	pop	{r4, r5}
 800cbd2:	4770      	bx	lr
 800cbd4:	20000c70 	.word	0x20000c70
	...

0800cbe0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800cbe0:	b410      	push	{r4}
 800cbe2:	2320      	movs	r3, #32
 800cbe4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800cbe8:	7f03      	ldrb	r3, [r0, #28]
 800cbea:	2b07      	cmp	r3, #7
 800cbec:	d80e      	bhi.n	800cc0c <wakeup+0x2c>
 800cbee:	e8df f003 	tbb	[pc, r3]
 800cbf2:	0d27      	.short	0x0d27
 800cbf4:	0408230d 	.word	0x0408230d
 800cbf8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800cbfa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800cbfc:	6893      	ldr	r3, [r2, #8]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800cc02:	e890 000c 	ldmia.w	r0, {r2, r3}
 800cc06:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800cc08:	6802      	ldr	r2, [r0, #0]
 800cc0a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800cc0c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cc10:	2200      	movs	r2, #0
 800cc12:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cc14:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800cc16:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cc18:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cc1a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cc1c:	689a      	ldr	r2, [r3, #8]
 800cc1e:	428a      	cmp	r2, r1
 800cc20:	d2fb      	bcs.n	800cc1a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cc26:	6003      	str	r3, [r0, #0]
 800cc28:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cc2a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800cc2c:	6058      	str	r0, [r3, #4]
 800cc2e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cc32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc36:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800cc38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]
    break;
 800cc3e:	e7e5      	b.n	800cc0c <wakeup+0x2c>
 800cc40:	2300      	movs	r3, #0
 800cc42:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800cc46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	20000c70 	.word	0x20000c70

0800cc50 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cc50:	4b03      	ldr	r3, [pc, #12]	; (800cc60 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800cc52:	2200      	movs	r2, #0
 800cc54:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800cc56:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800cc58:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800cc5a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800cc5c:	609a      	str	r2, [r3, #8]
 800cc5e:	4770      	bx	lr
 800cc60:	20000c70 	.word	0x20000c70
	...

0800cc70 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cc70:	2200      	movs	r2, #0
 800cc72:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cc74:	4b08      	ldr	r3, [pc, #32]	; (800cc98 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 800cc76:	b410      	push	{r4}
 800cc78:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cc7a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cc7c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	428a      	cmp	r2, r1
 800cc82:	d2fb      	bcs.n	800cc7c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cc88:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800cc8a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cc8c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800cc8e:	605c      	str	r4, [r3, #4]

  return tp;
}
 800cc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	20000c70 	.word	0x20000c70
 800cc9c:	00000000 	.word	0x00000000

0800cca0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800cca0:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <chSchGoSleepS+0x24>)
 800cca2:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cca4:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800cca6:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800cca8:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ccaa:	2004      	movs	r0, #4
 800ccac:	77c8      	strb	r0, [r1, #31]

  tqp->p_next = tp->p_next;
 800ccae:	6810      	ldr	r0, [r2, #0]
 800ccb0:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ccb2:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ccb4:	6043      	str	r3, [r0, #4]
 800ccb6:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800ccb8:	4610      	mov	r0, r2
}
 800ccba:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800ccbe:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800ccc0:	f7ff ba26 	b.w	800c110 <_port_switch>
 800ccc4:	20000c70 	.word	0x20000c70
	...

0800ccd0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800ccd0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800ccd2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800ccd4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800ccd6:	d012      	beq.n	800ccfe <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800ccd8:	4c0c      	ldr	r4, [pc, #48]	; (800cd0c <chSchGoSleepTimeoutS+0x3c>)
 800ccda:	4a0d      	ldr	r2, [pc, #52]	; (800cd10 <chSchGoSleepTimeoutS+0x40>)
 800ccdc:	69a3      	ldr	r3, [r4, #24]
 800ccde:	4605      	mov	r5, r0
 800cce0:	a801      	add	r0, sp, #4
 800cce2:	f7ff ff45 	bl	800cb70 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800cce6:	4628      	mov	r0, r5
 800cce8:	f7ff ffda 	bl	800cca0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	b113      	cbz	r3, 800ccf6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800ccf0:	a801      	add	r0, sp, #4
 800ccf2:	f7ff ff5d 	bl	800cbb0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800ccf6:	69a3      	ldr	r3, [r4, #24]
}
 800ccf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ccfa:	b007      	add	sp, #28
 800ccfc:	bd30      	pop	{r4, r5, pc}
 800ccfe:	4c03      	ldr	r4, [pc, #12]	; (800cd0c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800cd00:	f7ff ffce 	bl	800cca0 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800cd04:	69a3      	ldr	r3, [r4, #24]
}
 800cd06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cd08:	b007      	add	sp, #28
 800cd0a:	bd30      	pop	{r4, r5, pc}
 800cd0c:	20000c70 	.word	0x20000c70
 800cd10:	0800cbe1 	.word	0x0800cbe1
	...

0800cd20 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800cd20:	4b14      	ldr	r3, [pc, #80]	; (800cd74 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800cd22:	b470      	push	{r4, r5, r6}
 800cd24:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800cd26:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800cd28:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800cd2a:	68a8      	ldr	r0, [r5, #8]
 800cd2c:	68a1      	ldr	r1, [r4, #8]
 800cd2e:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd30:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800cd34:	d80b      	bhi.n	800cd4e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd36:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800cd38:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cd3a:	689a      	ldr	r2, [r3, #8]
 800cd3c:	4291      	cmp	r1, r2
 800cd3e:	d9fb      	bls.n	800cd38 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cd44:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cd46:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800cd48:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800cd4a:	bc70      	pop	{r4, r5, r6}
 800cd4c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cd4e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cd50:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 800cd52:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cd54:	6891      	ldr	r1, [r2, #8]
 800cd56:	4288      	cmp	r0, r1
 800cd58:	d9fb      	bls.n	800cd52 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cd5a:	6850      	ldr	r0, [r2, #4]
 800cd5c:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800cd5e:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cd60:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cd62:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 800cd64:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800cd66:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 800cd68:	4629      	mov	r1, r5
 800cd6a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800cd6c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800cd6e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800cd70:	f7ff b9ce 	b.w	800c110 <_port_switch>
 800cd74:	20000c70 	.word	0x20000c70
	...

0800cd80 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800cd80:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800cd82:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800cd84:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800cd86:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800cd88:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800cd8a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800cd8c:	b921      	cbnz	r1, 800cd98 <chSchIsPreemptionRequired+0x18>
 800cd8e:	4283      	cmp	r3, r0
 800cd90:	bf34      	ite	cc
 800cd92:	2000      	movcc	r0, #0
 800cd94:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800cd96:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800cd98:	4283      	cmp	r3, r0
 800cd9a:	bf94      	ite	ls
 800cd9c:	2000      	movls	r0, #0
 800cd9e:	2001      	movhi	r0, #1
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20000c70 	.word	0x20000c70
	...

0800cdb0 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800cdb0:	4a0e      	ldr	r2, [pc, #56]	; (800cdec <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cdb2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800cdb4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 800cdb6:	b470      	push	{r4, r5, r6}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cdb8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800cdba:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cdbc:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cdbe:	2604      	movs	r6, #4
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cdc0:	7701      	strb	r1, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800cdc6:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800cdc8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cdca:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800cdcc:	7725      	strb	r5, [r4, #28]
 800cdce:	e000      	b.n	800cdd2 <chSchDoRescheduleBehind+0x22>
 800cdd0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	428a      	cmp	r2, r1
 800cdd6:	d2fb      	bcs.n	800cdd0 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800cddc:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800cdde:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800cde0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800cde2:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800cde4:	bc70      	pop	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800cde6:	f7ff b993 	b.w	800c110 <_port_switch>
 800cdea:	bf00      	nop
 800cdec:	20000c70 	.word	0x20000c70

0800cdf0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800cdf0:	4a0d      	ldr	r2, [pc, #52]	; (800ce28 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800cdf2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 800cdf4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 800cdf6:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800cdf8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800cdfa:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cdfc:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800cdfe:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800ce00:	7701      	strb	r1, [r0, #28]
 800ce02:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800ce04:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800ce06:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800ce08:	7725      	strb	r5, [r4, #28]
 800ce0a:	e000      	b.n	800ce0e <chSchDoRescheduleAhead+0x1e>
 800ce0c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800ce0e:	689a      	ldr	r2, [r3, #8]
 800ce10:	428a      	cmp	r2, r1
 800ce12:	d8fb      	bhi.n	800ce0c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800ce18:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800ce1a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 800ce1c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800ce1e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 800ce20:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800ce22:	f7ff b975 	b.w	800c110 <_port_switch>
 800ce26:	bf00      	nop
 800ce28:	20000c70 	.word	0x20000c70
 800ce2c:	00000000 	.word	0x00000000

0800ce30 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 800ce30:	4b04      	ldr	r3, [pc, #16]	; (800ce44 <chSchRescheduleS+0x14>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 800ce36:	6892      	ldr	r2, [r2, #8]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d800      	bhi.n	800ce40 <chSchRescheduleS+0x10>
 800ce3e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 800ce40:	f7ff bfd6 	b.w	800cdf0 <chSchDoRescheduleAhead>
 800ce44:	20000c70 	.word	0x20000c70
	...

0800ce50 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800ce50:	4b03      	ldr	r3, [pc, #12]	; (800ce60 <chSchDoReschedule+0x10>)
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	7fdb      	ldrb	r3, [r3, #31]
 800ce56:	b10b      	cbz	r3, 800ce5c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800ce58:	f7ff bfca 	b.w	800cdf0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800ce5c:	f7ff bfa8 	b.w	800cdb0 <chSchDoRescheduleBehind>
 800ce60:	20000c70 	.word	0x20000c70
	...

0800ce70 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800ce70:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ce72:	4c0f      	ldr	r4, [pc, #60]	; (800ceb0 <_thread_init+0x40>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800ce74:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ce76:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800ce78:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800ce7a:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ce7c:	2200      	movs	r2, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800ce7e:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800ce80:	f100 012c 	add.w	r1, r0, #44	; 0x2c

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ce84:	f04f 0e04 	mov.w	lr, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800ce88:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800ce8a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ce8e:	6145      	str	r5, [r0, #20]
 800ce90:	6104      	str	r4, [r0, #16]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ce92:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800ce96:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ce98:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800ce9a:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800ce9c:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800ce9e:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800cea0:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800cea2:	6128      	str	r0, [r5, #16]
 800cea4:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800cea6:	6286      	str	r6, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cea8:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800ceaa:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20000c70 	.word	0x20000c70
	...

0800cec0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	461d      	mov	r5, r3
 800cec4:	4604      	mov	r4, r0
 800cec6:	2320      	movs	r3, #32
 800cec8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800cecc:	3964      	subs	r1, #100	; 0x64
 800cece:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ced0:	4e13      	ldr	r6, [pc, #76]	; (800cf20 <chThdCreateStatic+0x60>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ced2:	4b14      	ldr	r3, [pc, #80]	; (800cf24 <chThdCreateStatic+0x64>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800ced4:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ced6:	60c1      	str	r1, [r0, #12]
 800ced8:	640d      	str	r5, [r1, #64]	; 0x40
 800ceda:	9d06      	ldr	r5, [sp, #24]
 800cedc:	644d      	str	r5, [r1, #68]	; 0x44
 800cede:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cee0:	2502      	movs	r5, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cee2:	2304      	movs	r3, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800cee4:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800cee6:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800cee8:	7705      	strb	r5, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800ceea:	77c3      	strb	r3, [r0, #31]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ceec:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800ceee:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800cef2:	f100 0228 	add.w	r2, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800cef6:	2101      	movs	r1, #1
 800cef8:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cefa:	6106      	str	r6, [r0, #16]
 800cefc:	6147      	str	r7, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800cefe:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800cf00:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800cf02:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800cf04:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800cf06:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800cf08:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800cf0a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800cf0c:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800cf0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800cf10:	6303      	str	r3, [r0, #48]	; 0x30
 800cf12:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800cf14:	f7ff ff04 	bl	800cd20 <chSchWakeupS>
 800cf18:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf20:	20000c70 	.word	0x20000c70
 800cf24:	0800c129 	.word	0x0800c129
	...

0800cf30 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800cf30:	b508      	push	{r3, lr}
 800cf32:	4601      	mov	r1, r0
 800cf34:	2320      	movs	r3, #32
 800cf36:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800cf3a:	2008      	movs	r0, #8
 800cf3c:	f7ff fec8 	bl	800ccd0 <chSchGoSleepTimeoutS>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	bd08      	pop	{r3, pc}
	...

0800cf50 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800cf50:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800cf52:	4b0e      	ldr	r3, [pc, #56]	; (800cf8c <chThdExitS+0x3c>)
 800cf54:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800cf56:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800cf58:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800cf5a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800cf5e:	429d      	cmp	r5, r3
 800cf60:	d007      	beq.n	800cf72 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fe82 	bl	800cc70 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800cf6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800cf6e:	42ab      	cmp	r3, r5
 800cf70:	d1f7      	bne.n	800cf62 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800cf72:	7f63      	ldrb	r3, [r4, #29]
 800cf74:	079b      	lsls	r3, r3, #30
 800cf76:	d104      	bne.n	800cf82 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800cf78:	6963      	ldr	r3, [r4, #20]
 800cf7a:	6922      	ldr	r2, [r4, #16]
 800cf7c:	611a      	str	r2, [r3, #16]
 800cf7e:	6922      	ldr	r2, [r4, #16]
 800cf80:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800cf82:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800cf84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800cf88:	f7ff be8a 	b.w	800cca0 <chSchGoSleepS>
 800cf8c:	20000c70 	.word	0x20000c70

0800cf90 <chThdExit>:
 800cf90:	2320      	movs	r3, #32
 800cf92:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800cf96:	f7ff bfdb 	b.w	800cf50 <chThdExitS>
 800cf9a:	bf00      	nop
 800cf9c:	0000      	movs	r0, r0
	...

0800cfa0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800cfa0:	6803      	ldr	r3, [r0, #0]
 800cfa2:	b12b      	cbz	r3, 800cfb0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800cfa8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800cfaa:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800cfac:	f7ff be60 	b.w	800cc70 <chSchReadyI>
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
	...

0800cfc0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800cfc0:	b169      	cbz	r1, 800cfde <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800cfc2:	4b08      	ldr	r3, [pc, #32]	; (800cfe4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800cfc4:	b410      	push	{r4}
 800cfc6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800cfc8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800cfca:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800cfcc:	2004      	movs	r0, #4
 800cfce:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 800cfd2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800cfd4:	6053      	str	r3, [r2, #4]
}
 800cfd6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800cfda:	f7ff be79 	b.w	800ccd0 <chSchGoSleepTimeoutS>
}
 800cfde:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe2:	4770      	bx	lr
 800cfe4:	20000c70 	.word	0x20000c70
	...

0800cff0 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800cff0:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800cff2:	4290      	cmp	r0, r2
 800cff4:	d00a      	beq.n	800d00c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800cff6:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800cff8:	6814      	ldr	r4, [r2, #0]
 800cffa:	6004      	str	r4, [r0, #0]
 800cffc:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cffe:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800d000:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d002:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800d004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d008:	f7ff be32 	b.w	800cc70 <chSchReadyI>
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop

0800d010 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d010:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d012:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800d014:	4298      	cmp	r0, r3
 800d016:	d00b      	beq.n	800d030 <chThdDequeueAllI+0x20>
 800d018:	4604      	mov	r4, r0
 800d01a:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	6022      	str	r2, [r4, #0]
 800d020:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d022:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800d024:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d026:	f7ff fe23 	bl	800cc70 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	429c      	cmp	r4, r3
 800d02e:	d1f5      	bne.n	800d01c <chThdDequeueAllI+0xc>
 800d030:	bd38      	pop	{r3, r4, r5, pc}
 800d032:	bf00      	nop
	...

0800d040 <chTMStartMeasurementX>:
 800d040:	4b01      	ldr	r3, [pc, #4]	; (800d048 <chTMStartMeasurementX+0x8>)
 800d042:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800d044:	6083      	str	r3, [r0, #8]
 800d046:	4770      	bx	lr
 800d048:	e0001000 	.word	0xe0001000
 800d04c:	00000000 	.word	0x00000000

0800d050 <chTMStopMeasurementX>:
 800d050:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d052:	4910      	ldr	r1, [pc, #64]	; (800d094 <chTMStopMeasurementX+0x44>)
 800d054:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d056:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800d058:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d05a:	6f8f      	ldr	r7, [r1, #120]	; 0x78

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d05c:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d05e:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800d060:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800d068:	18e4      	adds	r4, r4, r3
 800d06a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d06e:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d070:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800d072:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800d074:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800d076:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800d07a:	d805      	bhi.n	800d088 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800d07c:	6802      	ldr	r2, [r0, #0]
 800d07e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800d080:	bf38      	it	cc
 800d082:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d084:	bcf0      	pop	{r4, r5, r6, r7}
 800d086:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800d088:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800d08a:	bcf0      	pop	{r4, r5, r6, r7}
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	e0001000 	.word	0xe0001000
 800d094:	20000c70 	.word	0x20000c70
	...

0800d0a0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d0a0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d0a2:	4c0c      	ldr	r4, [pc, #48]	; (800d0d4 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 800d0a4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d0a6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d0ac:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800d0b2:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800d0b4:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 800d0b6:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800d0b8:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800d0ba:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800d0bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800d0c0:	f7ff ffbe 	bl	800d040 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800d0c4:	4668      	mov	r0, sp
 800d0c6:	f7ff ffc3 	bl	800d050 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800d0ca:	9b02      	ldr	r3, [sp, #8]
 800d0cc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d0ce:	b006      	add	sp, #24
 800d0d0:	bdd0      	pop	{r4, r6, r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20000c70 	.word	0x20000c70
	...

0800d0e0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800d0e0:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d0e2:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d0e4:	6040      	str	r0, [r0, #4]
 800d0e6:	6083      	str	r3, [r0, #8]
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	0000      	movs	r0, r0
	...

0800d0f0 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800d0f0:	4b30      	ldr	r3, [pc, #192]	; (800d1b4 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800d0f2:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 800d0f4:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800d0f6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800d0f8:	2a00      	cmp	r2, #0
 800d0fa:	d055      	beq.n	800d1a8 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800d0fc:	68a1      	ldr	r1, [r4, #8]
 800d0fe:	6893      	ldr	r3, [r2, #8]
 800d100:	428b      	cmp	r3, r1
 800d102:	4605      	mov	r5, r0
 800d104:	d206      	bcs.n	800d114 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800d106:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 800d108:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800d10a:	2b06      	cmp	r3, #6
 800d10c:	d033      	beq.n	800d176 <chMtxLockS+0x86>
 800d10e:	2b07      	cmp	r3, #7
 800d110:	d01d      	beq.n	800d14e <chMtxLockS+0x5e>
 800d112:	b19b      	cbz	r3, 800d13c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800d114:	462b      	mov	r3, r5
 800d116:	e003      	b.n	800d120 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d118:	6899      	ldr	r1, [r3, #8]
 800d11a:	68a2      	ldr	r2, [r4, #8]
 800d11c:	4291      	cmp	r1, r2
 800d11e:	d302      	bcc.n	800d126 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800d120:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d122:	429d      	cmp	r5, r3
 800d124:	d1f8      	bne.n	800d118 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d126:	685a      	ldr	r2, [r3, #4]
 800d128:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800d12a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d12c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d12e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 800d130:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800d132:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 800d134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 800d138:	f7ff bdb2 	b.w	800cca0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800d13c:	e892 000a 	ldmia.w	r2, {r1, r3}
 800d140:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800d142:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 800d144:	4610      	mov	r0, r2
 800d146:	604b      	str	r3, [r1, #4]
 800d148:	f7ff fd92 	bl	800cc70 <chSchReadyI>
          break;
 800d14c:	e7e2      	b.n	800d114 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800d14e:	e892 0009 	ldmia.w	r2, {r0, r3}
 800d152:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800d154:	6810      	ldr	r0, [r2, #0]
 800d156:	6043      	str	r3, [r0, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800d158:	6a56      	ldr	r6, [r2, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800d15a:	4633      	mov	r3, r6
 800d15c:	e002      	b.n	800d164 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d15e:	6898      	ldr	r0, [r3, #8]
 800d160:	4288      	cmp	r0, r1
 800d162:	d302      	bcc.n	800d16a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800d164:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d166:	429e      	cmp	r6, r3
 800d168:	d1f9      	bne.n	800d15e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d16a:	6859      	ldr	r1, [r3, #4]
 800d16c:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800d16e:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d170:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800d172:	605a      	str	r2, [r3, #4]
 800d174:	e7ce      	b.n	800d114 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800d176:	e892 0009 	ldmia.w	r2, {r0, r3}
 800d17a:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800d17c:	6810      	ldr	r0, [r2, #0]
 800d17e:	6043      	str	r3, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800d180:	6a56      	ldr	r6, [r2, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800d182:	4633      	mov	r3, r6
 800d184:	e002      	b.n	800d18c <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d186:	6898      	ldr	r0, [r3, #8]
 800d188:	4288      	cmp	r0, r1
 800d18a:	d302      	bcc.n	800d192 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800d18c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800d18e:	429e      	cmp	r6, r3
 800d190:	d1f9      	bne.n	800d186 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800d192:	6859      	ldr	r1, [r3, #4]
 800d194:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800d196:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800d198:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800d19a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800d19c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800d19e:	68a1      	ldr	r1, [r4, #8]
 800d1a0:	6893      	ldr	r3, [r2, #8]
 800d1a2:	428b      	cmp	r3, r1
 800d1a4:	d3af      	bcc.n	800d106 <chMtxLockS+0x16>
 800d1a6:	e7b5      	b.n	800d114 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 800d1a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d1aa:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800d1ac:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 800d1ae:	63e0      	str	r0, [r4, #60]	; 0x3c
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20000c70 	.word	0x20000c70
	...

0800d1c0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 800d1c0:	b508      	push	{r3, lr}
 800d1c2:	2320      	movs	r3, #32
 800d1c4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 800d1c8:	f7ff ff92 	bl	800d0f0 <chMtxLockS>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	bd08      	pop	{r3, pc}
	...

0800d1e0 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 800d1e0:	4b17      	ldr	r3, [pc, #92]	; (800d240 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 800d1e2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800d1e4:	699d      	ldr	r5, [r3, #24]
 800d1e6:	2320      	movs	r3, #32
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d1ec:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800d1ee:	68c3      	ldr	r3, [r0, #12]
 800d1f0:	63eb      	str	r3, [r5, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800d1f2:	4284      	cmp	r4, r0
 800d1f4:	d01d      	beq.n	800d232 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 800d1f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800d1f8:	b14b      	cbz	r3, 800d20e <chMtxUnlock+0x2e>
 800d1fa:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d003      	beq.n	800d208 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 800d200:	6892      	ldr	r2, [r2, #8]
 800d202:	4291      	cmp	r1, r2
 800d204:	bf38      	it	cc
 800d206:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 800d208:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1f5      	bne.n	800d1fa <chMtxUnlock+0x1a>
 800d20e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800d210:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800d212:	6be6      	ldr	r6, [r4, #60]	; 0x3c
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800d214:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800d216:	4620      	mov	r0, r4
 800d218:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d21a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800d21c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800d21e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 800d220:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800d222:	f7ff fd25 	bl	800cc70 <chSchReadyI>
      chSchRescheduleS();
 800d226:	f7ff fe03 	bl	800ce30 <chSchRescheduleS>
 800d22a:	2300      	movs	r3, #0
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	60a3      	str	r3, [r4, #8]
 800d236:	2300      	movs	r3, #0
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	bd70      	pop	{r4, r5, r6, pc}
 800d23e:	bf00      	nop
 800d240:	20000c70 	.word	0x20000c70
	...

0800d250 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d250:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d252:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d254:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d256:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d258:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d25a:	d009      	beq.n	800d270 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d25c:	2a0b      	cmp	r2, #11
 800d25e:	d000      	beq.n	800d262 <chEvtSignalI+0x12>
 800d260:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800d262:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800d264:	438b      	bics	r3, r1
 800d266:	d1fb      	bne.n	800d260 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d26c:	f7ff bd00 	b.w	800cc70 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d270:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d272:	4219      	tst	r1, r3
 800d274:	d1f8      	bne.n	800d268 <chEvtSignalI+0x18>
 800d276:	4770      	bx	lr
	...

0800d280 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d280:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800d282:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d284:	42a0      	cmp	r0, r4
 800d286:	d00f      	beq.n	800d2a8 <chEvtBroadcastFlagsI+0x28>
 800d288:	4606      	mov	r6, r0
 800d28a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800d28c:	68e3      	ldr	r3, [r4, #12]
 800d28e:	432b      	orrs	r3, r5
 800d290:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800d292:	b115      	cbz	r5, 800d29a <chEvtBroadcastFlagsI+0x1a>
 800d294:	6922      	ldr	r2, [r4, #16]
 800d296:	4213      	tst	r3, r2
 800d298:	d003      	beq.n	800d2a2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800d29a:	68a1      	ldr	r1, [r4, #8]
 800d29c:	6860      	ldr	r0, [r4, #4]
 800d29e:	f7ff ffd7 	bl	800d250 <chEvtSignalI>
    }
    elp = elp->el_next;
 800d2a2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800d2a4:	42a6      	cmp	r6, r4
 800d2a6:	d1f1      	bne.n	800d28c <chEvtBroadcastFlagsI+0xc>
 800d2a8:	bd70      	pop	{r4, r5, r6, pc}
 800d2aa:	bf00      	nop
 800d2ac:	0000      	movs	r0, r0
	...

0800d2b0 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800d2b0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800d2b2:	4b0c      	ldr	r3, [pc, #48]	; (800d2e4 <chEvtWaitAny+0x34>)
 800d2b4:	699d      	ldr	r5, [r3, #24]
 800d2b6:	2320      	movs	r3, #32
 800d2b8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800d2bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800d2be:	ea13 0400 	ands.w	r4, r3, r0
 800d2c2:	d106      	bne.n	800d2d2 <chEvtWaitAny+0x22>
 800d2c4:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 800d2c6:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800d2c8:	200a      	movs	r0, #10
 800d2ca:	f7ff fce9 	bl	800cca0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800d2ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d2d0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 800d2d2:	ea23 0304 	bic.w	r3, r3, r4
 800d2d6:	63ab      	str	r3, [r5, #56]	; 0x38
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800d2de:	4620      	mov	r0, r4
 800d2e0:	bd38      	pop	{r3, r4, r5, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20000c70 	.word	0x20000c70
	...

0800d2f0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800d2f0:	b430      	push	{r4, r5}
 800d2f2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800d2f4:	6204      	str	r4, [r0, #32]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d2f6:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d2f8:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800d2fa:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800d2fc:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d2fe:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d300:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800d302:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 800d304:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 800d306:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800d308:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800d30a:	bc30      	pop	{r4, r5}
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop

0800d310 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800d310:	6943      	ldr	r3, [r0, #20]
 800d312:	6982      	ldr	r2, [r0, #24]
 800d314:	4293      	cmp	r3, r2
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 800d316:	b510      	push	{r4, lr}
 800d318:	d010      	beq.n	800d33c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800d31a:	6882      	ldr	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800d31c:	1c5c      	adds	r4, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800d31e:	3201      	adds	r2, #1
 800d320:	6082      	str	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800d322:	6144      	str	r4, [r0, #20]
 800d324:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800d326:	6942      	ldr	r2, [r0, #20]
 800d328:	6903      	ldr	r3, [r0, #16]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d301      	bcc.n	800d332 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 800d32e:	68c3      	ldr	r3, [r0, #12]
 800d330:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 800d332:	2100      	movs	r1, #0
 800d334:	f7ff fe5c 	bl	800cff0 <chThdDequeueNextI>

  return Q_OK;
 800d338:	2000      	movs	r0, #0
 800d33a:	bd10      	pop	{r4, pc}
 800d33c:	6882      	ldr	r2, [r0, #8]
 800d33e:	2a00      	cmp	r2, #0
 800d340:	d0eb      	beq.n	800d31a <chIQPutI+0xa>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 800d342:	f06f 0003 	mvn.w	r0, #3
 800d346:	bd10      	pop	{r4, pc}
	...

0800d350 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	2320      	movs	r3, #32
 800d354:	460e      	mov	r6, r1
 800d356:	4604      	mov	r4, r0
 800d358:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800d35c:	69c3      	ldr	r3, [r0, #28]
 800d35e:	b12b      	cbz	r3, 800d36c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800d360:	4798      	blx	r3
 800d362:	e003      	b.n	800d36c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d364:	f7ff fe2c 	bl	800cfc0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d368:	2800      	cmp	r0, #0
 800d36a:	db15      	blt.n	800d398 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800d36c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d36e:	4631      	mov	r1, r6
 800d370:	4620      	mov	r0, r4
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 800d372:	2d00      	cmp	r5, #0
 800d374:	d0f6      	beq.n	800d364 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d376:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d378:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800d37a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d37c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d37e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800d380:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800d382:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800d384:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800d386:	bf28      	it	cs
 800d388:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d38a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800d38c:	bf28      	it	cs
 800d38e:	61a3      	strcs	r3, [r4, #24]
 800d390:	2300      	movs	r3, #0
 800d392:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800d396:	bd70      	pop	{r4, r5, r6, pc}
 800d398:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800d39c:	bd70      	pop	{r4, r5, r6, pc}
 800d39e:	bf00      	nop

0800d3a0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	4689      	mov	r9, r1
 800d3aa:	4693      	mov	fp, r2
 800d3ac:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800d3ae:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d3b2:	2720      	movs	r7, #32
 800d3b4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800d3b8:	2600      	movs	r6, #0
 800d3ba:	9701      	str	r7, [sp, #4]
 800d3bc:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800d3be:	f1b8 0f00 	cmp.w	r8, #0
 800d3c2:	d005      	beq.n	800d3d0 <chIQReadTimeout+0x30>
      nfy(iqp);
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	47c0      	blx	r8
 800d3c8:	e002      	b.n	800d3d0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800d3ca:	f7ff fdf9 	bl	800cfc0 <chThdEnqueueTimeoutS>
 800d3ce:	b9e0      	cbnz	r0, 800d40a <chIQReadTimeout+0x6a>
 800d3d0:	68a7      	ldr	r7, [r4, #8]
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	4620      	mov	r0, r4
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800d3d6:	2f00      	cmp	r7, #0
 800d3d8:	d0f7      	beq.n	800d3ca <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800d3da:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d3dc:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d3de:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d3e0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800d3e2:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800d3e4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d3e6:	7813      	ldrb	r3, [r2, #0]
 800d3e8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	69a2      	ldr	r2, [r4, #24]
 800d3f0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800d3f2:	bf24      	itt	cs
 800d3f4:	68e3      	ldrcs	r3, [r4, #12]
 800d3f6:	61a3      	strcs	r3, [r4, #24]
 800d3f8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800d3fc:	3601      	adds	r6, #1
    if (--n == 0U) {
 800d3fe:	45b3      	cmp	fp, r6
 800d400:	d005      	beq.n	800d40e <chIQReadTimeout+0x6e>
 800d402:	9b01      	ldr	r3, [sp, #4]
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	e7d9      	b.n	800d3be <chIQReadTimeout+0x1e>
 800d40a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800d40e:	4630      	mov	r0, r6
 800d410:	b003      	add	sp, #12
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	bf00      	nop
	...

0800d420 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800d420:	b430      	push	{r4, r5}
 800d422:	9c02      	ldr	r4, [sp, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800d424:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800d426:	188d      	adds	r5, r1, r2
 800d428:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d42a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800d42c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800d42e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 800d430:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 800d432:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 800d434:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800d436:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 800d438:	bc30      	pop	{r4, r5}
 800d43a:	4770      	bx	lr
 800d43c:	0000      	movs	r0, r0
	...

0800d440 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	460f      	mov	r7, r1
 800d446:	4616      	mov	r6, r2
 800d448:	2320      	movs	r3, #32
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	e003      	b.n	800d458 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d450:	f7ff fdb6 	bl	800cfc0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d454:	2800      	cmp	r0, #0
 800d456:	db19      	blt.n	800d48c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d458:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d45a:	4631      	mov	r1, r6
 800d45c:	4620      	mov	r0, r4
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800d45e:	2d00      	cmp	r5, #0
 800d460:	d0f6      	beq.n	800d450 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800d462:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d464:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d466:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d468:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800d46a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800d46c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d46e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	6962      	ldr	r2, [r4, #20]
 800d474:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800d476:	bf24      	itt	cs
 800d478:	68e3      	ldrcs	r3, [r4, #12]
 800d47a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800d47c:	69e3      	ldr	r3, [r4, #28]
 800d47e:	b10b      	cbz	r3, 800d484 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 800d480:	4620      	mov	r0, r4
 800d482:	4798      	blx	r3
 800d484:	2000      	movs	r0, #0
 800d486:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48c:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 800d490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d492:	bf00      	nop
	...

0800d4a0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800d4a2:	6942      	ldr	r2, [r0, #20]
 800d4a4:	6983      	ldr	r3, [r0, #24]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d00f      	beq.n	800d4ca <chOQGetI+0x2a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800d4aa:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800d4ac:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800d4ae:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800d4b0:	3201      	adds	r2, #1
 800d4b2:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 800d4b4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 800d4b6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800d4b8:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800d4ba:	d301      	bcc.n	800d4c0 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 800d4bc:	68c3      	ldr	r3, [r0, #12]
 800d4be:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	f7ff fd95 	bl	800cff0 <chThdDequeueNextI>

  return (msg_t)b;
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ca:	6882      	ldr	r2, [r0, #8]
 800d4cc:	2a00      	cmp	r2, #0
 800d4ce:	d0ec      	beq.n	800d4aa <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 800d4d0:	f06f 0002 	mvn.w	r0, #2
 800d4d4:	bd38      	pop	{r3, r4, r5, pc}
 800d4d6:	bf00      	nop
	...

0800d4e0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	4616      	mov	r6, r2
 800d4ec:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800d4ee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d4f2:	f04f 0920 	mov.w	r9, #32
 800d4f6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800d4fa:	2700      	movs	r7, #0
 800d4fc:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d4fe:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d500:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d504:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800d506:	b303      	cbz	r3, 800d54a <chOQWriteTimeout+0x6a>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d508:	6961      	ldr	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d50a:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d50c:	1c4a      	adds	r2, r1, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d50e:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800d510:	6162      	str	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800d512:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d514:	782b      	ldrb	r3, [r5, #0]
 800d516:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	6961      	ldr	r1, [r4, #20]
 800d51c:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800d51e:	bf24      	itt	cs
 800d520:	68e3      	ldrcs	r3, [r4, #12]
 800d522:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 800d524:	f1b8 0f00 	cmp.w	r8, #0
 800d528:	d000      	beq.n	800d52c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800d52a:	47c0      	blx	r8
 800d52c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800d530:	3e01      	subs	r6, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800d532:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800d536:	d012      	beq.n	800d55e <chOQWriteTimeout+0x7e>
 800d538:	f389 8811 	msr	BASEPRI, r9
 800d53c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d53e:	465d      	mov	r5, fp
 800d540:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d544:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1de      	bne.n	800d508 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800d54a:	9901      	ldr	r1, [sp, #4]
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	4620      	mov	r0, r4
 800d550:	f7ff fd36 	bl	800cfc0 <chThdEnqueueTimeoutS>
 800d554:	9b00      	ldr	r3, [sp, #0]
 800d556:	2800      	cmp	r0, #0
 800d558:	d0d1      	beq.n	800d4fe <chOQWriteTimeout+0x1e>
 800d55a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800d55e:	4638      	mov	r0, r7
 800d560:	b003      	add	sp, #12
 800d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d566:	bf00      	nop
	...

0800d570 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d570:	4a05      	ldr	r2, [pc, #20]	; (800d588 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d572:	4b06      	ldr	r3, [pc, #24]	; (800d58c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d574:	4806      	ldr	r0, [pc, #24]	; (800d590 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d576:	4907      	ldr	r1, [pc, #28]	; (800d594 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d578:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d57c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d580:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d582:	600b      	str	r3, [r1, #0]
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	200022e7 	.word	0x200022e7
 800d58c:	20020000 	.word	0x20020000
 800d590:	20000ecc 	.word	0x20000ecc
 800d594:	20000ec8 	.word	0x20000ec8
	...

0800d5a0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800d5a0:	b410      	push	{r4}
 800d5a2:	2320      	movs	r3, #32
 800d5a4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d5a8:	4c09      	ldr	r4, [pc, #36]	; (800d5d0 <chCoreAlloc+0x30>)
 800d5aa:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <chCoreAlloc+0x34>)
 800d5ac:	6822      	ldr	r2, [r4, #0]
 800d5ae:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800d5b0:	1dc3      	adds	r3, r0, #7
 800d5b2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d5b6:	1a89      	subs	r1, r1, r2
 800d5b8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800d5ba:	bf9d      	ittte	ls
 800d5bc:	189b      	addls	r3, r3, r2
 800d5be:	6023      	strls	r3, [r4, #0]

  return p;
 800d5c0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 800d5c2:	2000      	movhi	r0, #0
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800d5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5ce:	4770      	bx	lr
 800d5d0:	20000ecc 	.word	0x20000ecc
 800d5d4:	20000ec8 	.word	0x20000ec8
	...

0800d5e0 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800d5e0:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <_heap_init+0x14>)
 800d5e2:	4a05      	ldr	r2, [pc, #20]	; (800d5f8 <_heap_init+0x18>)
 800d5e4:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d5e6:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800d5ee:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d5f0:	f7ff bd76 	b.w	800d0e0 <chMtxObjectInit>
 800d5f4:	20000ed0 	.word	0x20000ed0
 800d5f8:	0800d5a1 	.word	0x0800d5a1
 800d5fc:	00000000 	.word	0x00000000

0800d600 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800d600:	4a06      	ldr	r2, [pc, #24]	; (800d61c <SVC_Handler+0x1c>)
 800d602:	6853      	ldr	r3, [r2, #4]
 800d604:	f023 0301 	bic.w	r3, r3, #1
 800d608:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d60a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d60e:	3368      	adds	r3, #104	; 0x68
 800d610:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d614:	2300      	movs	r3, #0
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	4770      	bx	lr
 800d61c:	e000ef30 	.word	0xe000ef30

0800d620 <_port_irq_epilogue>:
 800d620:	2320      	movs	r3, #32
 800d622:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800d626:	4b12      	ldr	r3, [pc, #72]	; (800d670 <_port_irq_epilogue+0x50>)
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800d62e:	d102      	bne.n	800d636 <_port_irq_epilogue+0x16>
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800d636:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800d638:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d63c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d640:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800d642:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800d64c:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d650:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 800d654:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800d658:	f7ff fb92 	bl	800cd80 <chSchIsPreemptionRequired>
 800d65c:	b118      	cbz	r0, 800d666 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800d65e:	4b06      	ldr	r3, [pc, #24]	; (800d678 <_port_irq_epilogue+0x58>)
 800d660:	f844 3c50 	str.w	r3, [r4, #-80]
 800d664:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800d666:	4b05      	ldr	r3, [pc, #20]	; (800d67c <_port_irq_epilogue+0x5c>)
 800d668:	f844 3c50 	str.w	r3, [r4, #-80]
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	bf00      	nop
 800d670:	e000ed00 	.word	0xe000ed00
 800d674:	e000ef30 	.word	0xe000ef30
 800d678:	0800c139 	.word	0x0800c139
 800d67c:	0800c13c 	.word	0x0800c13c

0800d680 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800d680:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800d682:	f000 fe65 	bl	800e350 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800d686:	480a      	ldr	r0, [pc, #40]	; (800d6b0 <halInit+0x30>)
 800d688:	f001 f87a 	bl	800e780 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800d68c:	f000 f818 	bl	800d6c0 <canInit>
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
 800d690:	f000 f83e 	bl	800d710 <gptInit>
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800d694:	f000 f84c 	bl	800d730 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800d698:	f000 f87a 	bl	800d790 <icuInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800d69c:	f000 f8f8 	bl	800d890 <sdInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800d6a0:	f000 f95e 	bl	800d960 <usbInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800d6a4:	f001 fffc 	bl	800f6a0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800d6a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800d6ac:	f000 b950 	b.w	800d950 <stInit>
 800d6b0:	08012bb0 	.word	0x08012bb0
	...

0800d6c0 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800d6c0:	f001 b846 	b.w	800e750 <can_lld_init>
	...

0800d6d0 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800d6d0:	b4f0      	push	{r4, r5, r6, r7}

  canp->state    = CAN_STOP;
 800d6d2:	2201      	movs	r2, #1
  canp->config   = NULL;
 800d6d4:	2300      	movs	r3, #0
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800d6d6:	f100 0718 	add.w	r7, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800d6da:	f100 061c 	add.w	r6, r0, #28
  osalEventObjectInit(&canp->error_event);
 800d6de:	f100 0520 	add.w	r5, r0, #32
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800d6e2:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800d6e6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state    = CAN_STOP;
 800d6ea:	7002      	strb	r2, [r0, #0]
  canp->config   = NULL;
 800d6ec:	6043      	str	r3, [r0, #4]
  osalThreadQueueObjectInit(&canp->txqueue);
 800d6ee:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800d6f2:	f100 0310 	add.w	r3, r0, #16
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800d6f6:	6187      	str	r7, [r0, #24]
 800d6f8:	61c6      	str	r6, [r0, #28]
 800d6fa:	6205      	str	r5, [r0, #32]
 800d6fc:	6244      	str	r4, [r0, #36]	; 0x24
 800d6fe:	6281      	str	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d700:	6082      	str	r2, [r0, #8]
  tqp->p_prev = (thread_t *)tqp;
 800d702:	60c2      	str	r2, [r0, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800d704:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 800d706:	6143      	str	r3, [r0, #20]
  osalEventObjectInit(&canp->error_event);
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
}
 800d708:	bcf0      	pop	{r4, r5, r6, r7}
 800d70a:	4770      	bx	lr
 800d70c:	0000      	movs	r0, r0
	...

0800d710 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
 800d710:	f001 bd9e 	b.w	800f250 <gpt_lld_init>
	...

0800d720 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800d720:	2201      	movs	r2, #1
  gptp->config = NULL;
 800d722:	2300      	movs	r3, #0
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800d724:	7002      	strb	r2, [r0, #0]
  gptp->config = NULL;
 800d726:	6043      	str	r3, [r0, #4]
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	0000      	movs	r0, r0
	...

0800d730 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800d730:	f001 ba4e 	b.w	800ebd0 <i2c_lld_init>
	...

0800d740 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d740:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800d742:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d744:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800d746:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800d748:	300c      	adds	r0, #12
 800d74a:	f7ff bcc9 	b.w	800d0e0 <chMtxObjectInit>
 800d74e:	bf00      	nop

0800d750 <i2cStop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cStop(I2CDriver *i2cp) {
 800d750:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d752:	2320      	movs	r3, #32
 800d754:	4604      	mov	r4, r0
 800d756:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(i2cp != NULL);
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2c_lld_stop(i2cp);
 800d75a:	f001 fa51 	bl	800ec00 <i2c_lld_stop>
  i2cp->state = I2C_STOP;
 800d75e:	2301      	movs	r3, #1
 800d760:	7023      	strb	r3, [r4, #0]
 800d762:	2300      	movs	r3, #0
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	bd10      	pop	{r4, pc}
 800d76a:	bf00      	nop
 800d76c:	0000      	movs	r0, r0
	...

0800d770 <i2cAcquireBus>:
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 800d770:	300c      	adds	r0, #12
 800d772:	f7ff bd25 	b.w	800d1c0 <chMtxLock>
 800d776:	bf00      	nop
	...

0800d780 <i2cReleaseBus>:
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 800d780:	300c      	adds	r0, #12
 800d782:	f7ff bd2d 	b.w	800d1e0 <chMtxUnlock>
 800d786:	bf00      	nop
	...

0800d790 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800d790:	f001 bdbe 	b.w	800f310 <icu_lld_init>
	...

0800d7a0 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d7a0:	2201      	movs	r2, #1
  icup->config = NULL;
 800d7a2:	2300      	movs	r3, #0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d7a4:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800d7a6:	6043      	str	r3, [r0, #4]
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	0000      	movs	r0, r0
	...

0800d7b0 <icuStart>:
 * @param[in] icup      pointer to the @p ICUDriver object
 * @param[in] config    pointer to the @p ICUConfig object
 *
 * @api
 */
void icuStart(ICUDriver *icup, const ICUConfig *config) {
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	2320      	movs	r3, #32
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 800d7ba:	6041      	str	r1, [r0, #4]
  icu_lld_start(icup);
 800d7bc:	f001 fdb8 	bl	800f330 <icu_lld_start>
  icup->state = ICU_READY;
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	7023      	strb	r3, [r4, #0]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	bd10      	pop	{r4, pc}
 800d7cc:	0000      	movs	r0, r0
	...

0800d7d0 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 800d7d0:	b510      	push	{r4, lr}
 800d7d2:	2320      	movs	r3, #32
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 800d7da:	f001 fe09 	bl	800f3f0 <icu_lld_start_capture>
 800d7de:	2303      	movs	r3, #3
 800d7e0:	7023      	strb	r3, [r4, #0]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0000      	movs	r0, r0
	...

0800d7f0 <icuEnableNotifications>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuEnableNotifications(ICUDriver *icup) {
 800d7f0:	b508      	push	{r3, lr}
 800d7f2:	2320      	movs	r3, #32
 800d7f4:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800d7f8:	f001 fe0a 	bl	800f410 <icu_lld_enable_notifications>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	bd08      	pop	{r3, pc}
	...

0800d810 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800d810:	300c      	adds	r0, #12
 800d812:	f7ff bdc5 	b.w	800d3a0 <chIQReadTimeout>
 800d816:	bf00      	nop
	...

0800d820 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800d820:	300c      	adds	r0, #12
 800d822:	f04f 33ff 	mov.w	r3, #4294967295
 800d826:	f7ff bdbb 	b.w	800d3a0 <chIQReadTimeout>
 800d82a:	bf00      	nop
 800d82c:	0000      	movs	r0, r0
	...

0800d830 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800d830:	3030      	adds	r0, #48	; 0x30
 800d832:	f7ff be55 	b.w	800d4e0 <chOQWriteTimeout>
 800d836:	bf00      	nop
	...

0800d840 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800d840:	3030      	adds	r0, #48	; 0x30
 800d842:	f04f 33ff 	mov.w	r3, #4294967295
 800d846:	f7ff be4b 	b.w	800d4e0 <chOQWriteTimeout>
 800d84a:	bf00      	nop
 800d84c:	0000      	movs	r0, r0
	...

0800d850 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800d850:	300c      	adds	r0, #12
 800d852:	f7ff bd7d 	b.w	800d350 <chIQGetTimeout>
 800d856:	bf00      	nop
	...

0800d860 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800d860:	300c      	adds	r0, #12
 800d862:	f04f 31ff 	mov.w	r1, #4294967295
 800d866:	f7ff bd73 	b.w	800d350 <chIQGetTimeout>
 800d86a:	bf00      	nop
 800d86c:	0000      	movs	r0, r0
	...

0800d870 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800d870:	3030      	adds	r0, #48	; 0x30
 800d872:	f7ff bde5 	b.w	800d440 <chOQPutTimeout>
 800d876:	bf00      	nop
	...

0800d880 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800d880:	3030      	adds	r0, #48	; 0x30
 800d882:	f04f 32ff 	mov.w	r2, #4294967295
 800d886:	f7ff bddb 	b.w	800d440 <chOQPutTimeout>
 800d88a:	bf00      	nop
 800d88c:	0000      	movs	r0, r0
	...

0800d890 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 800d890:	f001 be96 	b.w	800f5c0 <sd_lld_init>
	...

0800d8a0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d8a0:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <sdObjectInit+0x40>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	b082      	sub	sp, #8

  sdp->vmt = &vmt;
 800d8a8:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800d8ac:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d8ae:	9400      	str	r4, [sp, #0]
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d8b0:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	6060      	str	r0, [r4, #4]
 800d8b6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800d8ba:	f104 000c 	add.w	r0, r4, #12
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800d8be:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d8c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8c4:	f7ff fd14 	bl	800d2f0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800d8c8:	9400      	str	r4, [sp, #0]
 800d8ca:	462b      	mov	r3, r5
 800d8cc:	f504 71aa 	add.w	r1, r4, #340	; 0x154
 800d8d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d8d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8d8:	f7ff fda2 	bl	800d420 <chOQObjectInit>
}
 800d8dc:	b002      	add	sp, #8
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
 800d8e0:	08012a50 	.word	0x08012a50
	...

0800d8f0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	2320      	movs	r3, #32
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 800d8fa:	f001 fe79 	bl	800f5f0 <sd_lld_start>
  sdp->state = SD_READY;
 800d8fe:	2302      	movs	r3, #2
 800d900:	7223      	strb	r3, [r4, #8]
 800d902:	2300      	movs	r3, #0
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	bf00      	nop
 800d90c:	0000      	movs	r0, r0
	...

0800d910 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 800d910:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800d912:	6943      	ldr	r3, [r0, #20]
 800d914:	4604      	mov	r4, r0
 800d916:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800d918:	b13b      	cbz	r3, 800d92a <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800d91a:	4629      	mov	r1, r5
 800d91c:	f104 000c 	add.w	r0, r4, #12
 800d920:	f7ff fcf6 	bl	800d310 <chIQPutI>
 800d924:	2800      	cmp	r0, #0
 800d926:	db0b      	blt.n	800d940 <sdIncomingDataI+0x30>
 800d928:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800d92a:	2104      	movs	r1, #4
 800d92c:	4408      	add	r0, r1
 800d92e:	f7ff fca7 	bl	800d280 <chEvtBroadcastFlagsI>
 800d932:	4629      	mov	r1, r5
 800d934:	f104 000c 	add.w	r0, r4, #12
 800d938:	f7ff fcea 	bl	800d310 <chIQPutI>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	daf3      	bge.n	800d928 <sdIncomingDataI+0x18>
 800d940:	1d20      	adds	r0, r4, #4
 800d942:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 800d944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d948:	f7ff bc9a 	b.w	800d280 <chEvtBroadcastFlagsI>
 800d94c:	0000      	movs	r0, r0
	...

0800d950 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800d950:	f001 bd8e 	b.w	800f470 <st_lld_init>
	...

0800d960 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800d960:	f001 b996 	b.w	800ec90 <usb_lld_init>
	...

0800d970 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 800d970:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800d972:	2201      	movs	r2, #1
 800d974:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 800d976:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800d978:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800d97a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800d97c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800d97e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800d980:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800d982:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 800d984:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 800d986:	8143      	strh	r3, [r0, #10]
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	0000      	movs	r0, r0
	...

0800d990 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800d990:	2200      	movs	r2, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800d992:	2102      	movs	r1, #2
 800d994:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800d996:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800d99a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 800d99e:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 800d9a2:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 800d9a4:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800d9a6:	60c2      	str	r2, [r0, #12]
 800d9a8:	6102      	str	r2, [r0, #16]
 800d9aa:	6142      	str	r2, [r0, #20]
 800d9ac:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800d9ae:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800d9b2:	f001 b985 	b.w	800ecc0 <usb_lld_reset>
 800d9b6:	bf00      	nop
	...

0800d9c0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800d9c2:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800d9c4:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800d9c6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800d9ca:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800d9ce:	f001 fa0f 	bl	800edf0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800d9d2:	6863      	ldr	r3, [r4, #4]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d036      	beq.n	800da48 <_usb_ep0setup+0x88>
      !(usbp->config->requests_hook_cb(usbp))) {
 800d9da:	4620      	mov	r0, r4
 800d9dc:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d032      	beq.n	800da48 <_usb_ep0setup+0x88>
 800d9e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d9e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800d9e8:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800d9ec:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800d9f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800d9f4:	4282      	cmp	r2, r0
    usbp->ep0n = max;
 800d9f6:	bf3c      	itt	cc
 800d9f8:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 800d9fa:	4610      	movcc	r0, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800d9fc:	061a      	lsls	r2, r3, #24
 800d9fe:	f100 80ab 	bmi.w	800db58 <_usb_ep0setup+0x198>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800da02:	2800      	cmp	r0, #0
 800da04:	f000 808b 	beq.w	800db1e <_usb_ep0setup+0x15e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800da08:	68e3      	ldr	r3, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800da0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800da0c:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800da0e:	2200      	movs	r2, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800da10:	2104      	movs	r1, #4
 800da12:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800da16:	4611      	mov	r1, r2
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800da18:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800da1a:	6058      	str	r0, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800da1c:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800da1e:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800da20:	4620      	mov	r0, r4
 800da22:	f001 f9f5 	bl	800ee10 <usb_lld_prepare_receive>
 800da26:	2320      	movs	r3, #32
 800da28:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800da2c:	8963      	ldrh	r3, [r4, #10]
 800da2e:	f013 0101 	ands.w	r1, r3, #1
 800da32:	d105      	bne.n	800da40 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800da34:	f043 0301 	orr.w	r3, r3, #1
 800da38:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800da3a:	4620      	mov	r0, r4
 800da3c:	f001 fb80 	bl	800f140 <usb_lld_start_out>
 800da40:	2300      	movs	r3, #0
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800da48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800da4c:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 800da50:	461e      	mov	r6, r3
 800da52:	d011      	beq.n	800da78 <_usb_ep0setup+0xb8>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800da54:	2100      	movs	r1, #0
 800da56:	4620      	mov	r0, r4
 800da58:	f001 fbaa 	bl	800f1b0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800da5c:	2100      	movs	r1, #0
 800da5e:	4620      	mov	r0, r4
 800da60:	f001 fb96 	bl	800f190 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800da64:	6863      	ldr	r3, [r4, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	b113      	cbz	r3, 800da70 <_usb_ep0setup+0xb0>
 800da6a:	2105      	movs	r1, #5
 800da6c:	4620      	mov	r0, r4
 800da6e:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800da70:	2306      	movs	r3, #6
 800da72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800da76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800da78:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800da7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da80:	ea42 2500 	orr.w	r5, r2, r0, lsl #8
 800da84:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800da88:	f000 80eb 	beq.w	800dc62 <_usb_ep0setup+0x2a2>
 800da8c:	d916      	bls.n	800dabc <_usb_ep0setup+0xfc>
 800da8e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800da92:	f000 80ce 	beq.w	800dc32 <_usb_ep0setup+0x272>
 800da96:	d92f      	bls.n	800daf8 <_usb_ep0setup+0x138>
 800da98:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 800da9c:	d076      	beq.n	800db8c <_usb_ep0setup+0x1cc>
 800da9e:	f640 4202 	movw	r2, #3074	; 0xc02
 800daa2:	4295      	cmp	r5, r2
 800daa4:	f000 80ef 	beq.w	800dc86 <_usb_ep0setup+0x2c6>
 800daa8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800daac:	d1d2      	bne.n	800da54 <_usb_ep0setup+0x94>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800daae:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800dab2:	2001      	movs	r0, #1
 800dab4:	6427      	str	r7, [r4, #64]	; 0x40
 800dab6:	63a2      	str	r2, [r4, #56]	; 0x38
 800dab8:	63e0      	str	r0, [r4, #60]	; 0x3c
 800daba:	e795      	b.n	800d9e8 <_usb_ep0setup+0x28>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dabc:	2d02      	cmp	r5, #2
 800dabe:	f000 80a2 	beq.w	800dc06 <_usb_ep0setup+0x246>
 800dac2:	f240 8097 	bls.w	800dbf4 <_usb_ep0setup+0x234>
 800dac6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800daca:	f000 8084 	beq.w	800dbd6 <_usb_ep0setup+0x216>
 800dace:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800dad2:	d1bf      	bne.n	800da54 <_usb_ep0setup+0x94>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800dad4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1bb      	bne.n	800da54 <_usb_ep0setup+0x94>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800dadc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dae0:	f013 010f 	ands.w	r1, r3, #15
 800dae4:	d015      	beq.n	800db12 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dae6:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800dae8:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800daea:	f100 80f4 	bmi.w	800dcd6 <_usb_ep0setup+0x316>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800daee:	f001 fb6f 	bl	800f1d0 <usb_lld_clear_out>
 800daf2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800daf6:	e00c      	b.n	800db12 <_usb_ep0setup+0x152>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800daf8:	f240 3302 	movw	r3, #770	; 0x302
 800dafc:	429d      	cmp	r5, r3
 800dafe:	d057      	beq.n	800dbb0 <_usb_ep0setup+0x1f0>
 800db00:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800db04:	d1a6      	bne.n	800da54 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800db06:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800db0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800db0e:	f000 80d0 	beq.w	800dcb2 <_usb_ep0setup+0x2f2>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800db12:	2300      	movs	r3, #0
 800db14:	63a3      	str	r3, [r4, #56]	; 0x38
 800db16:	63e3      	str	r3, [r4, #60]	; 0x3c
 800db18:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800db1a:	0633      	lsls	r3, r6, #24
 800db1c:	d42a      	bmi.n	800db74 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db1e:	68e3      	ldr	r3, [r4, #12]
 800db20:	695a      	ldr	r2, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800db22:	2105      	movs	r1, #5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800db24:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800db26:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800db2a:	4619      	mov	r1, r3
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800db2c:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 800db2e:	60d3      	str	r3, [r2, #12]
  isp->txsize             = n;
 800db30:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 800db32:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800db34:	4620      	mov	r0, r4
 800db36:	f001 f9eb 	bl	800ef10 <usb_lld_prepare_transmit>
 800db3a:	2320      	movs	r3, #32
 800db3c:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800db40:	8923      	ldrh	r3, [r4, #8]
 800db42:	f013 0101 	ands.w	r1, r3, #1
 800db46:	f47f af7b 	bne.w	800da40 <_usb_ep0setup+0x80>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800db50:	4620      	mov	r0, r4
 800db52:	f001 fb05 	bl	800f160 <usb_lld_start_in>
 800db56:	e773      	b.n	800da40 <_usb_ep0setup+0x80>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800db58:	b160      	cbz	r0, 800db74 <_usb_ep0setup+0x1b4>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db5a:	68e3      	ldr	r3, [r4, #12]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800db5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db5e:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = false;
 800db60:	2200      	movs	r2, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 800db62:	2101      	movs	r1, #1
 800db64:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800db68:	4611      	mov	r1, r2
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800db6a:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800db6c:	6058      	str	r0, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800db6e:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800db70:	609a      	str	r2, [r3, #8]
 800db72:	e7df      	b.n	800db34 <_usb_ep0setup+0x174>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800db74:	68e3      	ldr	r3, [r4, #12]
 800db76:	699a      	ldr	r2, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800db78:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800db7a:	2300      	movs	r3, #0
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800db7c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800db80:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800db82:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800db84:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800db86:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800db88:	6093      	str	r3, [r2, #8]
 800db8a:	e749      	b.n	800da20 <_usb_ep0setup+0x60>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800db8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800db90:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800db94:	2b00      	cmp	r3, #0
 800db96:	d17d      	bne.n	800dc94 <_usb_ep0setup+0x2d4>
      usbp->state = USB_SELECTED;
 800db98:	2303      	movs	r3, #3
 800db9a:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800db9c:	6863      	ldr	r3, [r4, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d0b6      	beq.n	800db12 <_usb_ep0setup+0x152>
 800dba4:	2102      	movs	r1, #2
 800dba6:	4620      	mov	r0, r4
 800dba8:	4798      	blx	r3
 800dbaa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dbae:	e7b0      	b.n	800db12 <_usb_ep0setup+0x152>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800dbb0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f47f af4d 	bne.w	800da54 <_usb_ep0setup+0x94>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800dbba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dbbe:	f013 010f 	ands.w	r1, r3, #15
 800dbc2:	d0a6      	beq.n	800db12 <_usb_ep0setup+0x152>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dbc4:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800dbc6:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dbc8:	f100 808a 	bmi.w	800dce0 <_usb_ep0setup+0x320>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800dbcc:	f001 fae0 	bl	800f190 <usb_lld_stall_out>
 800dbd0:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dbd4:	e79d      	b.n	800db12 <_usb_ep0setup+0x152>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800dbd6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	f47f af3a 	bne.w	800da54 <_usb_ep0setup+0x94>
      usbp->status &= ~2U;
 800dbe0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dbe4:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800dbe6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dbea:	63e7      	str	r7, [r4, #60]	; 0x3c
 800dbec:	6427      	str	r7, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800dbee:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800dbf2:	e792      	b.n	800db1a <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	d143      	bne.n	800dc80 <_usb_ep0setup+0x2c0>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800dbf8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800dbfc:	2002      	movs	r0, #2
 800dbfe:	6425      	str	r5, [r4, #64]	; 0x40
 800dc00:	63a2      	str	r2, [r4, #56]	; 0x38
 800dc02:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dc04:	e6f0      	b.n	800d9e8 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc06:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800dc0a:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc14:	d141      	bne.n	800dc9a <_usb_ep0setup+0x2da>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800dc16:	f001 f8cb 	bl	800edb0 <usb_lld_get_status_out>
 800dc1a:	2801      	cmp	r0, #1
 800dc1c:	d041      	beq.n	800dca2 <_usb_ep0setup+0x2e2>
 800dc1e:	2802      	cmp	r0, #2
 800dc20:	f47f af18 	bne.w	800da54 <_usb_ep0setup+0x94>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800dc24:	4b31      	ldr	r3, [pc, #196]	; (800dcec <_usb_ep0setup+0x32c>)
 800dc26:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc28:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dc2a:	6427      	str	r7, [r4, #64]	; 0x40
 800dc2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc30:	e6da      	b.n	800d9e8 <_usb_ep0setup+0x28>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800dc32:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800dc36:	6861      	ldr	r1, [r4, #4]
 800dc38:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dc3c:	684d      	ldr	r5, [r1, #4]
 800dc3e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800dc42:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800dc46:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f af00 	beq.w	800da54 <_usb_ep0setup+0x94>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800dc54:	c809      	ldmia	r0, {r0, r3}
 800dc56:	6427      	str	r7, [r4, #64]	; 0x40
 800dc58:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc5a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dc5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc60:	e6c2      	b.n	800d9e8 <_usb_ep0setup+0x28>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800dc62:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	f47f aef4 	bne.w	800da54 <_usb_ep0setup+0x94>
      usbp->status |= 2U;
 800dc6c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dc70:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800dc72:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dc76:	63e7      	str	r7, [r4, #60]	; 0x3c
 800dc78:	6427      	str	r7, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 800dc7a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800dc7e:	e74c      	b.n	800db1a <_usb_ep0setup+0x15a>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dc80:	2d01      	cmp	r5, #1
 800dc82:	f47f aee7 	bne.w	800da54 <_usb_ep0setup+0x94>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800dc86:	4a1a      	ldr	r2, [pc, #104]	; (800dcf0 <_usb_ep0setup+0x330>)
 800dc88:	63a2      	str	r2, [r4, #56]	; 0x38
 800dc8a:	2002      	movs	r0, #2
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dc90:	6422      	str	r2, [r4, #64]	; 0x40
 800dc92:	e6a9      	b.n	800d9e8 <_usb_ep0setup+0x28>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800dc94:	2304      	movs	r3, #4
 800dc96:	7023      	strb	r3, [r4, #0]
 800dc98:	e780      	b.n	800db9c <_usb_ep0setup+0x1dc>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800dc9a:	f001 f899 	bl	800edd0 <usb_lld_get_status_in>
 800dc9e:	2801      	cmp	r0, #1
 800dca0:	d1bd      	bne.n	800dc1e <_usb_ep0setup+0x25e>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800dca2:	4b14      	ldr	r3, [pc, #80]	; (800dcf4 <_usb_ep0setup+0x334>)
 800dca4:	63a3      	str	r3, [r4, #56]	; 0x38
 800dca6:	63e5      	str	r5, [r4, #60]	; 0x3c
 800dca8:	6427      	str	r7, [r4, #64]	; 0x40
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcb0:	e69a      	b.n	800d9e8 <_usb_ep0setup+0x28>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 800dcb2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dcb6:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f001 f868 	bl	800ed90 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800dcc0:	6863      	ldr	r3, [r4, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	b113      	cbz	r3, 800dccc <_usb_ep0setup+0x30c>
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	4620      	mov	r0, r4
 800dcca:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800dccc:	2303      	movs	r3, #3
 800dcce:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dcd2:	7023      	strb	r3, [r4, #0]
 800dcd4:	e71d      	b.n	800db12 <_usb_ep0setup+0x152>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800dcd6:	f001 fa8b 	bl	800f1f0 <usb_lld_clear_in>
 800dcda:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dcde:	e718      	b.n	800db12 <_usb_ep0setup+0x152>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800dce0:	f001 fa66 	bl	800f1b0 <usb_lld_stall_in>
 800dce4:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 800dce8:	e713      	b.n	800db12 <_usb_ep0setup+0x152>
 800dcea:	bf00      	nop
 800dcec:	08012a80 	.word	0x08012a80
 800dcf0:	08012a70 	.word	0x08012a70
 800dcf4:	08012a90 	.word	0x08012a90
	...

0800dd00 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800dd00:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800dd04:	b510      	push	{r4, lr}
 800dd06:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800dd08:	2b06      	cmp	r3, #6
 800dd0a:	d815      	bhi.n	800dd38 <_usb_ep0in+0x38>
 800dd0c:	e8df f003 	tbb	[pc, r3]
 800dd10:	041c3b04 	.word	0x041c3b04
 800dd14:	1504      	.short	0x1504
 800dd16:	04          	.byte	0x04
 800dd17:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800dd18:	2100      	movs	r1, #0
 800dd1a:	f001 fa49 	bl	800f1b0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4620      	mov	r0, r4
 800dd22:	f001 fa35 	bl	800f190 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800dd26:	6863      	ldr	r3, [r4, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	b113      	cbz	r3, 800dd32 <_usb_ep0in+0x32>
 800dd2c:	2105      	movs	r1, #5
 800dd2e:	4620      	mov	r0, r4
 800dd30:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800dd32:	2306      	movs	r3, #6
 800dd34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800dd38:	bd10      	pop	{r4, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800dd3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd3c:	b103      	cbz	r3, 800dd40 <_usb_ep0in+0x40>
      usbp->ep0endcb(usbp);
 800dd3e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800dd40:	2300      	movs	r3, #0
 800dd42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800dd46:	bd10      	pop	{r4, pc}
 800dd48:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800dd4a:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800dd4c:	2103      	movs	r1, #3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dd4e:	2300      	movs	r3, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800dd50:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800dd54:	4620      	mov	r0, r4
 800dd56:	4619      	mov	r1, r3
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800dd58:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800dd5a:	60d3      	str	r3, [r2, #12]
  osp->rxsize             = n;
 800dd5c:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800dd5e:	6093      	str	r3, [r2, #8]

  usb_lld_prepare_receive(usbp, ep);
 800dd60:	f001 f856 	bl	800ee10 <usb_lld_prepare_receive>
 800dd64:	2320      	movs	r3, #32
 800dd66:	f383 8811 	msr	BASEPRI, r3
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 800dd6a:	8963      	ldrh	r3, [r4, #10]
 800dd6c:	f013 0101 	ands.w	r1, r3, #1
 800dd70:	d105      	bne.n	800dd7e <_usb_ep0in+0x7e>
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dd72:	f043 0301 	orr.w	r3, r3, #1
 800dd76:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f001 f9e1 	bl	800f140 <usb_lld_start_out>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	bd10      	pop	{r4, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800dd86:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 800dd8a:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800dd8e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dd90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800dd94:	4293      	cmp	r3, r2
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800dd96:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800dd98:	d9d7      	bls.n	800dd4a <_usb_ep0in+0x4a>
 800dd9a:	8a18      	ldrh	r0, [r3, #16]
 800dd9c:	fbb2 f1f0 	udiv	r1, r2, r0
 800dda0:	fb00 2211 	mls	r2, r0, r1, r2
 800dda4:	2a00      	cmp	r2, #0
 800dda6:	d1d0      	bne.n	800dd4a <_usb_ep0in+0x4a>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800dda8:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800ddaa:	4611      	mov	r1, r2
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800ddac:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800ddae:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800ddb0:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800ddb2:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f001 f8ab 	bl	800ef10 <usb_lld_prepare_transmit>
 800ddba:	2320      	movs	r3, #32
 800ddbc:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800ddc0:	8923      	ldrh	r3, [r4, #8]
 800ddc2:	f013 0101 	ands.w	r1, r3, #1
 800ddc6:	d105      	bne.n	800ddd4 <_usb_ep0in+0xd4>
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f001 f9c6 	bl	800f160 <usb_lld_start_in>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f383 8811 	msr	BASEPRI, r3
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800ddda:	2302      	movs	r3, #2
 800dddc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800dde0:	bd10      	pop	{r4, pc}
 800dde2:	bf00      	nop
	...

0800ddf0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800ddf0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800ddf4:	2a06      	cmp	r2, #6
 800ddf6:	d80c      	bhi.n	800de12 <_usb_ep0out+0x22>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	4093      	lsls	r3, r2
 800ddfc:	f013 0f67 	tst.w	r3, #103	; 0x67
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800de00:	b510      	push	{r4, lr}
 800de02:	4604      	mov	r4, r0
 800de04:	d112      	bne.n	800de2c <_usb_ep0out+0x3c>
 800de06:	f013 0208 	ands.w	r2, r3, #8
 800de0a:	d103      	bne.n	800de14 <_usb_ep0out+0x24>
 800de0c:	06db      	lsls	r3, r3, #27
 800de0e:	d41e      	bmi.n	800de4e <_usb_ep0out+0x5e>
 800de10:	bd10      	pop	{r4, pc}
 800de12:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800de14:	68c3      	ldr	r3, [r0, #12]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1f8      	bne.n	800de10 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800de1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de20:	b103      	cbz	r3, 800de24 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 800de22:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800de24:	2300      	movs	r3, #0
 800de26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 800de2a:	bd10      	pop	{r4, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800de2c:	2100      	movs	r1, #0
 800de2e:	f001 f9bf 	bl	800f1b0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800de32:	2100      	movs	r1, #0
 800de34:	4620      	mov	r0, r4
 800de36:	f001 f9ab 	bl	800f190 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800de3a:	6863      	ldr	r3, [r4, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	b113      	cbz	r3, 800de46 <_usb_ep0out+0x56>
 800de40:	2105      	movs	r1, #5
 800de42:	4620      	mov	r0, r4
 800de44:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800de46:	2306      	movs	r3, #6
 800de48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800de4c:	bd10      	pop	{r4, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800de4e:	68c3      	ldr	r3, [r0, #12]
 800de50:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800de52:	2105      	movs	r1, #5
 800de54:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800de58:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800de5a:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800de5c:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 800de5e:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 800de60:	4611      	mov	r1, r2
 800de62:	f001 f855 	bl	800ef10 <usb_lld_prepare_transmit>
 800de66:	2320      	movs	r3, #32
 800de68:	f383 8811 	msr	BASEPRI, r3
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 800de6c:	8923      	ldrh	r3, [r4, #8]
 800de6e:	f013 0101 	ands.w	r1, r3, #1
 800de72:	d003      	beq.n	800de7c <_usb_ep0out+0x8c>
 800de74:	2300      	movs	r3, #0
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	bd10      	pop	{r4, pc}
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800de7c:	f043 0301 	orr.w	r3, r3, #1
 800de80:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800de82:	4620      	mov	r0, r4
 800de84:	f001 f96c 	bl	800f160 <usb_lld_start_in>
 800de88:	e7f4      	b.n	800de74 <_usb_ep0out+0x84>
 800de8a:	bf00      	nop
 800de8c:	0000      	movs	r0, r0
	...

0800de90 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800de90:	0943      	lsrs	r3, r0, #5
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	b410      	push	{r4}
 800de96:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800de9a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800de9e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800dea2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800dea6:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800dea8:	f000 001f 	and.w	r0, r0, #31
 800deac:	2201      	movs	r2, #1
 800deae:	fa02 f000 	lsl.w	r0, r2, r0
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800deb2:	b2c9      	uxtb	r1, r1
 800deb4:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800deb8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800debc:	6018      	str	r0, [r3, #0]
}
 800debe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dec2:	4770      	bx	lr
	...

0800ded0 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800ded0:	4908      	ldr	r1, [pc, #32]	; (800def4 <nvicDisableVector+0x24>)
 800ded2:	0943      	lsrs	r3, r0, #5
/**
 * @brief   Disables an interrupt handler.
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {
 800ded4:	b410      	push	{r4}

  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800ded6:	3320      	adds	r3, #32
 800ded8:	f000 041f 	and.w	r4, r0, #31
 800dedc:	2201      	movs	r2, #1
  NVIC->IP[n]        = 0;
 800dede:	4408      	add	r0, r1
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800dee0:	40a2      	lsls	r2, r4
  NVIC->IP[n]        = 0;
 800dee2:	2400      	movs	r4, #0
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5] = 1 << (n & 0x1F);
 800dee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n]        = 0;
 800dee8:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
}
 800deec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	e000e100 	.word	0xe000e100
	...

0800df00 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800df00:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800df04:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800df08:	0109      	lsls	r1, r1, #4
 800df0a:	b2c9      	uxtb	r1, r1
 800df0c:	7601      	strb	r1, [r0, #24]
 800df0e:	4770      	bx	lr

0800df10 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800df10:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800df12:	4b07      	ldr	r3, [pc, #28]	; (800df30 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800df14:	4a07      	ldr	r2, [pc, #28]	; (800df34 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800df16:	6819      	ldr	r1, [r3, #0]
 800df18:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800df1c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800df1e:	6813      	ldr	r3, [r2, #0]
 800df20:	b10b      	cbz	r3, 800df26 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800df22:	6850      	ldr	r0, [r2, #4]
 800df24:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800df26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800df2a:	f7ff bb79 	b.w	800d620 <_port_irq_epilogue>
 800df2e:	bf00      	nop
 800df30:	40026000 	.word	0x40026000
 800df34:	20000ef0 	.word	0x20000ef0
	...

0800df40 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800df40:	4b08      	ldr	r3, [pc, #32]	; (800df64 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800df42:	4809      	ldr	r0, [pc, #36]	; (800df68 <Vector70+0x28>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800df44:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800df46:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800df48:	0989      	lsrs	r1, r1, #6
 800df4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800df4e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
 800df50:	018c      	lsls	r4, r1, #6
 800df52:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800df54:	b10a      	cbz	r2, 800df5a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800df56:	68c0      	ldr	r0, [r0, #12]
 800df58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800df5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800df5e:	f7ff bb5f 	b.w	800d620 <_port_irq_epilogue>
 800df62:	bf00      	nop
 800df64:	40026000 	.word	0x40026000
 800df68:	20000ef0 	.word	0x20000ef0
 800df6c:	00000000 	.word	0x00000000

0800df70 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800df70:	4b08      	ldr	r3, [pc, #32]	; (800df94 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800df72:	4809      	ldr	r0, [pc, #36]	; (800df98 <Vector74+0x28>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800df74:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800df76:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800df78:	0c09      	lsrs	r1, r1, #16
 800df7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800df7e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
 800df80:	040c      	lsls	r4, r1, #16
 800df82:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800df84:	b10a      	cbz	r2, 800df8a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800df86:	6940      	ldr	r0, [r0, #20]
 800df88:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800df8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800df8e:	f7ff bb47 	b.w	800d620 <_port_irq_epilogue>
 800df92:	bf00      	nop
 800df94:	40026000 	.word	0x40026000
 800df98:	20000ef0 	.word	0x20000ef0
 800df9c:	00000000 	.word	0x00000000

0800dfa0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800dfa0:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800dfa2:	4809      	ldr	r0, [pc, #36]	; (800dfc8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800dfa4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800dfa6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800dfa8:	0d89      	lsrs	r1, r1, #22
 800dfaa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800dfae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
 800dfb0:	058c      	lsls	r4, r1, #22
 800dfb2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800dfb4:	b10a      	cbz	r2, 800dfba <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800dfb6:	69c0      	ldr	r0, [r0, #28]
 800dfb8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800dfba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800dfbe:	f7ff bb2f 	b.w	800d620 <_port_irq_epilogue>
 800dfc2:	bf00      	nop
 800dfc4:	40026000 	.word	0x40026000
 800dfc8:	20000ef0 	.word	0x20000ef0
 800dfcc:	00000000 	.word	0x00000000

0800dfd0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800dfd0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800dfd2:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800dfd4:	4807      	ldr	r0, [pc, #28]	; (800dff4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800dfd6:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800dfd8:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800dfda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800dfde:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800dfe0:	b10a      	cbz	r2, 800dfe6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800dfe2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dfe4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800dfe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800dfea:	f7ff bb19 	b.w	800d620 <_port_irq_epilogue>
 800dfee:	bf00      	nop
 800dff0:	40026000 	.word	0x40026000
 800dff4:	20000ef0 	.word	0x20000ef0
	...

0800e000 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e000:	4b08      	ldr	r3, [pc, #32]	; (800e024 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e002:	4809      	ldr	r0, [pc, #36]	; (800e028 <Vector80+0x28>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e004:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e006:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e008:	0989      	lsrs	r1, r1, #6
 800e00a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800e00e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
 800e010:	018c      	lsls	r4, r1, #6
 800e012:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800e014:	b10a      	cbz	r2, 800e01a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800e016:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e018:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e01e:	f7ff baff 	b.w	800d620 <_port_irq_epilogue>
 800e022:	bf00      	nop
 800e024:	40026000 	.word	0x40026000
 800e028:	20000ef0 	.word	0x20000ef0
 800e02c:	00000000 	.word	0x00000000

0800e030 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e030:	4b08      	ldr	r3, [pc, #32]	; (800e054 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e032:	4809      	ldr	r0, [pc, #36]	; (800e058 <Vector84+0x28>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e034:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e036:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e038:	0c09      	lsrs	r1, r1, #16
 800e03a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800e03e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
 800e040:	040c      	lsls	r4, r1, #16
 800e042:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800e044:	b10a      	cbz	r2, 800e04a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800e046:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e048:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e04e:	f7ff bae7 	b.w	800d620 <_port_irq_epilogue>
 800e052:	bf00      	nop
 800e054:	40026000 	.word	0x40026000
 800e058:	20000ef0 	.word	0x20000ef0
 800e05c:	00000000 	.word	0x00000000

0800e060 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e060:	4b08      	ldr	r3, [pc, #32]	; (800e084 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e062:	4809      	ldr	r0, [pc, #36]	; (800e088 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e064:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e066:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e068:	0d89      	lsrs	r1, r1, #22
 800e06a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 800e06e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
 800e070:	058c      	lsls	r4, r1, #22
 800e072:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800e074:	b10a      	cbz	r2, 800e07a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800e076:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e078:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e07e:	f7ff bacf 	b.w	800d620 <_port_irq_epilogue>
 800e082:	bf00      	nop
 800e084:	40026000 	.word	0x40026000
 800e088:	20000ef0 	.word	0x20000ef0
 800e08c:	00000000 	.word	0x00000000

0800e090 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800e090:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e092:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e094:	4807      	ldr	r0, [pc, #28]	; (800e0b4 <Vector120+0x24>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e096:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e098:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e09a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800e09e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800e0a0:	b10a      	cbz	r2, 800e0a6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800e0a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e0a4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e0a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e0aa:	f7ff bab9 	b.w	800d620 <_port_irq_epilogue>
 800e0ae:	bf00      	nop
 800e0b0:	40026400 	.word	0x40026400
 800e0b4:	20000ef0 	.word	0x20000ef0
	...

0800e0c0 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e0c0:	4b08      	ldr	r3, [pc, #32]	; (800e0e4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e0c2:	4809      	ldr	r0, [pc, #36]	; (800e0e8 <Vector124+0x28>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e0c4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e0c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e0c8:	0989      	lsrs	r1, r1, #6
 800e0ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 800e0ce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
 800e0d0:	018c      	lsls	r4, r1, #6
 800e0d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800e0d4:	b10a      	cbz	r2, 800e0da <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800e0d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e0d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e0de:	f7ff ba9f 	b.w	800d620 <_port_irq_epilogue>
 800e0e2:	bf00      	nop
 800e0e4:	40026400 	.word	0x40026400
 800e0e8:	20000ef0 	.word	0x20000ef0
 800e0ec:	00000000 	.word	0x00000000

0800e0f0 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e0f0:	4b08      	ldr	r3, [pc, #32]	; (800e114 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e0f2:	4809      	ldr	r0, [pc, #36]	; (800e118 <Vector128+0x28>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e0f4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e0f6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e0f8:	0c09      	lsrs	r1, r1, #16
 800e0fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 800e0fe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
 800e100:	040c      	lsls	r4, r1, #16
 800e102:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800e104:	b10a      	cbz	r2, 800e10a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800e106:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800e108:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e10e:	f7ff ba87 	b.w	800d620 <_port_irq_epilogue>
 800e112:	bf00      	nop
 800e114:	40026400 	.word	0x40026400
 800e118:	20000ef0 	.word	0x20000ef0
 800e11c:	00000000 	.word	0x00000000

0800e120 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e120:	4b08      	ldr	r3, [pc, #32]	; (800e144 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e122:	4809      	ldr	r0, [pc, #36]	; (800e148 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e124:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e126:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e128:	0d89      	lsrs	r1, r1, #22
 800e12a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 800e12e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
 800e130:	058c      	lsls	r4, r1, #22
 800e132:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800e134:	b10a      	cbz	r2, 800e13a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800e136:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800e138:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e13e:	f7ff ba6f 	b.w	800d620 <_port_irq_epilogue>
 800e142:	bf00      	nop
 800e144:	40026400 	.word	0x40026400
 800e148:	20000ef0 	.word	0x20000ef0
 800e14c:	00000000 	.word	0x00000000

0800e150 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800e150:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e152:	4b07      	ldr	r3, [pc, #28]	; (800e170 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e154:	4807      	ldr	r0, [pc, #28]	; (800e174 <Vector130+0x24>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e156:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e158:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e15a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800e15e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800e160:	b10a      	cbz	r2, 800e166 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800e162:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e164:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e16a:	f7ff ba59 	b.w	800d620 <_port_irq_epilogue>
 800e16e:	bf00      	nop
 800e170:	40026400 	.word	0x40026400
 800e174:	20000ef0 	.word	0x20000ef0
	...

0800e180 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e180:	4b08      	ldr	r3, [pc, #32]	; (800e1a4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e182:	4809      	ldr	r0, [pc, #36]	; (800e1a8 <Vector150+0x28>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e184:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e186:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e188:	0989      	lsrs	r1, r1, #6
 800e18a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 800e18e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
 800e190:	018c      	lsls	r4, r1, #6
 800e192:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800e194:	b10a      	cbz	r2, 800e19a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800e196:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800e198:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e19e:	f7ff ba3f 	b.w	800d620 <_port_irq_epilogue>
 800e1a2:	bf00      	nop
 800e1a4:	40026400 	.word	0x40026400
 800e1a8:	20000ef0 	.word	0x20000ef0
 800e1ac:	00000000 	.word	0x00000000

0800e1b0 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e1b0:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e1b2:	4809      	ldr	r0, [pc, #36]	; (800e1d8 <Vector154+0x28>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e1b4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e1b6:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e1b8:	0c09      	lsrs	r1, r1, #16
 800e1ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 800e1be:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
 800e1c0:	040c      	lsls	r4, r1, #16
 800e1c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800e1c4:	b10a      	cbz	r2, 800e1ca <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800e1c6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800e1c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e1ce:	f7ff ba27 	b.w	800d620 <_port_irq_epilogue>
 800e1d2:	bf00      	nop
 800e1d4:	40026400 	.word	0x40026400
 800e1d8:	20000ef0 	.word	0x20000ef0
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e1e0:	4b08      	ldr	r3, [pc, #32]	; (800e204 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e1e2:	4809      	ldr	r0, [pc, #36]	; (800e208 <Vector158+0x28>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e1e4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e1e6:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e1e8:	0d89      	lsrs	r1, r1, #22
 800e1ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 800e1ee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
 800e1f0:	058c      	lsls	r4, r1, #22
 800e1f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800e1f4:	b10a      	cbz	r2, 800e1fa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800e1f6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800e1f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800e1fe:	f7ff ba0f 	b.w	800d620 <_port_irq_epilogue>
 800e202:	bf00      	nop
 800e204:	40026400 	.word	0x40026400
 800e208:	20000ef0 	.word	0x20000ef0
 800e20c:	00000000 	.word	0x00000000

0800e210 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800e210:	490e      	ldr	r1, [pc, #56]	; (800e24c <dmaInit+0x3c>)
 800e212:	4a0f      	ldr	r2, [pc, #60]	; (800e250 <dmaInit+0x40>)
 800e214:	480f      	ldr	r0, [pc, #60]	; (800e254 <dmaInit+0x44>)
 800e216:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 800e218:	b410      	push	{r4}
  int i;

  dma_streams_mask = 0;
 800e21a:	600b      	str	r3, [r1, #0]
 800e21c:	4c0e      	ldr	r4, [pc, #56]	; (800e258 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800e21e:	4619      	mov	r1, r3
 800e220:	e001      	b.n	800e226 <dmaInit+0x16>
 800e222:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800e226:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800e228:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e22c:	3301      	adds	r3, #1
 800e22e:	2b10      	cmp	r3, #16
 800e230:	f102 020c 	add.w	r2, r2, #12
 800e234:	d1f5      	bne.n	800e222 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e236:	4909      	ldr	r1, [pc, #36]	; (800e25c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800e238:	4a09      	ldr	r2, [pc, #36]	; (800e260 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800e23a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e23e:	f04f 33ff 	mov.w	r3, #4294967295
 800e242:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 800e244:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800e246:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800e248:	60d3      	str	r3, [r2, #12]
}
 800e24a:	4770      	bx	lr
 800e24c:	20000f70 	.word	0x20000f70
 800e250:	08012aac 	.word	0x08012aac
 800e254:	40026010 	.word	0x40026010
 800e258:	20000ef0 	.word	0x20000ef0
 800e25c:	40026000 	.word	0x40026000
 800e260:	40026400 	.word	0x40026400
	...

0800e270 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800e272:	4f1f      	ldr	r7, [pc, #124]	; (800e2f0 <dmaStreamAllocate+0x80>)
 800e274:	7a46      	ldrb	r6, [r0, #9]
 800e276:	683d      	ldr	r5, [r7, #0]
 800e278:	2401      	movs	r4, #1
 800e27a:	fa04 fe06 	lsl.w	lr, r4, r6
 800e27e:	ea1e 0f05 	tst.w	lr, r5
 800e282:	d131      	bne.n	800e2e8 <dmaStreamAllocate+0x78>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e284:	4c1b      	ldr	r4, [pc, #108]	; (800e2f4 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e286:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e28a:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e28e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e292:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e294:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e298:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e29c:	d004      	beq.n	800e2a8 <dmaStreamAllocate+0x38>
    rccEnableDMA1(FALSE);
 800e29e:	4c16      	ldr	r4, [pc, #88]	; (800e2f8 <dmaStreamAllocate+0x88>)
 800e2a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e2a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2a6:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800e2a8:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800e2ac:	d116      	bne.n	800e2dc <dmaStreamAllocate+0x6c>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e2ae:	6805      	ldr	r5, [r0, #0]
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	f023 031f 	bic.w	r3, r3, #31
 800e2b6:	602b      	str	r3, [r5, #0]
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	f013 0401 	ands.w	r4, r3, #1
 800e2be:	d1fb      	bne.n	800e2b8 <dmaStreamAllocate+0x48>
 800e2c0:	7a07      	ldrb	r7, [r0, #8]
 800e2c2:	6846      	ldr	r6, [r0, #4]
 800e2c4:	233d      	movs	r3, #61	; 0x3d
 800e2c6:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e2c8:	2721      	movs	r7, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e2ca:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800e2cc:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e2ce:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800e2d0:	b162      	cbz	r2, 800e2ec <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 800e2d2:	7a80      	ldrb	r0, [r0, #10]
 800e2d4:	f7ff fddc 	bl	800de90 <nvicEnableVector>

  return FALSE;
 800e2d8:	4620      	mov	r0, r4
 800e2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 800e2dc:	4c06      	ldr	r4, [pc, #24]	; (800e2f8 <dmaStreamAllocate+0x88>)
 800e2de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e2e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e2e4:	6323      	str	r3, [r4, #48]	; 0x30
 800e2e6:	e7e2      	b.n	800e2ae <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
 800e2ec:	4610      	mov	r0, r2
}
 800e2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f0:	20000f70 	.word	0x20000f70
 800e2f4:	20000ef0 	.word	0x20000ef0
 800e2f8:	40023800 	.word	0x40023800
 800e2fc:	00000000 	.word	0x00000000

0800e300 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 800e300:	b510      	push	{r4, lr}
 800e302:	4604      	mov	r4, r0
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1 << dmastp->selfindex)) != 0,
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 800e304:	7a80      	ldrb	r0, [r0, #10]
 800e306:	f7ff fde3 	bl	800ded0 <nvicDisableVector>

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 800e30a:	490c      	ldr	r1, [pc, #48]	; (800e33c <dmaStreamRelease+0x3c>)
 800e30c:	7a60      	ldrb	r0, [r4, #9]
 800e30e:	680a      	ldr	r2, [r1, #0]
 800e310:	2301      	movs	r3, #1
 800e312:	4083      	lsls	r3, r0
 800e314:	ea22 0303 	bic.w	r3, r2, r3

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 800e318:	f013 0fff 	tst.w	r3, #255	; 0xff

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 800e31c:	600b      	str	r3, [r1, #0]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 800e31e:	d104      	bne.n	800e32a <dmaStreamRelease+0x2a>
    rccDisableDMA1(FALSE);
 800e320:	4907      	ldr	r1, [pc, #28]	; (800e340 <dmaStreamRelease+0x40>)
 800e322:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800e324:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e328:	630a      	str	r2, [r1, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0)
 800e32a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800e32e:	d104      	bne.n	800e33a <dmaStreamRelease+0x3a>
    rccDisableDMA2(FALSE);
 800e330:	4a03      	ldr	r2, [pc, #12]	; (800e340 <dmaStreamRelease+0x40>)
 800e332:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e334:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800e338:	6313      	str	r3, [r2, #48]	; 0x30
 800e33a:	bd10      	pop	{r4, pc}
 800e33c:	20000f70 	.word	0x20000f70
 800e340:	40023800 	.word	0x40023800
	...

0800e350 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e350:	4b17      	ldr	r3, [pc, #92]	; (800e3b0 <hal_lld_init+0x60>)
 800e352:	f04f 31ff 	mov.w	r1, #4294967295
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 800e35a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e35c:	6119      	str	r1, [r3, #16]
 800e35e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800e360:	6958      	ldr	r0, [r3, #20]
 800e362:	6159      	str	r1, [r3, #20]
 800e364:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e366:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800e368:	4c12      	ldr	r4, [pc, #72]	; (800e3b4 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e36a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800e36e:	6218      	str	r0, [r3, #32]
 800e370:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800e372:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e374:	6259      	str	r1, [r3, #36]	; 0x24
 800e376:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800e378:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e37a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800e37e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800e380:	6821      	ldr	r1, [r4, #0]
 800e382:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e386:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800e388:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e38a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800e38e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e392:	d003      	beq.n	800e39c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800e394:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e398:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800e39a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800e39c:	4a05      	ldr	r2, [pc, #20]	; (800e3b4 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800e39e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 800e3a2:	6853      	ldr	r3, [r2, #4]
 800e3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3a8:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800e3aa:	f7ff bf31 	b.w	800e210 <dmaInit>
 800e3ae:	bf00      	nop
 800e3b0:	40023800 	.word	0x40023800
 800e3b4:	40007000 	.word	0x40007000
	...

0800e3c0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e3c0:	492c      	ldr	r1, [pc, #176]	; (800e474 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e3c2:	4b2d      	ldr	r3, [pc, #180]	; (800e478 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e3c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e3c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e3cc:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e3ce:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800e3d0:	680b      	ldr	r3, [r1, #0]
 800e3d2:	f043 0301 	orr.w	r3, r3, #1
 800e3d6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800e3d8:	680a      	ldr	r2, [r1, #0]
 800e3da:	4b26      	ldr	r3, [pc, #152]	; (800e474 <stm32_clock_init+0xb4>)
 800e3dc:	0790      	lsls	r0, r2, #30
 800e3de:	d5fb      	bpl.n	800e3d8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800e3e0:	689a      	ldr	r2, [r3, #8]
 800e3e2:	f022 0203 	bic.w	r2, r2, #3
 800e3e6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800e3e8:	689a      	ldr	r2, [r3, #8]
 800e3ea:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	688b      	ldr	r3, [r1, #8]
 800e3f0:	4a20      	ldr	r2, [pc, #128]	; (800e474 <stm32_clock_init+0xb4>)
 800e3f2:	f013 030c 	ands.w	r3, r3, #12
 800e3f6:	d1fa      	bne.n	800e3ee <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800e3f8:	6811      	ldr	r1, [r2, #0]
 800e3fa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800e3fe:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800e400:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 800e402:	6813      	ldr	r3, [r2, #0]
 800e404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e408:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800e40a:	6811      	ldr	r1, [r2, #0]
 800e40c:	4b19      	ldr	r3, [pc, #100]	; (800e474 <stm32_clock_init+0xb4>)
 800e40e:	0389      	lsls	r1, r1, #14
 800e410:	d5fb      	bpl.n	800e40a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800e412:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e414:	f042 0201 	orr.w	r2, r2, #1
 800e418:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800e41a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e41c:	4915      	ldr	r1, [pc, #84]	; (800e474 <stm32_clock_init+0xb4>)
 800e41e:	0790      	lsls	r0, r2, #30
 800e420:	d5fb      	bpl.n	800e41a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800e422:	4b16      	ldr	r3, [pc, #88]	; (800e47c <stm32_clock_init+0xbc>)
 800e424:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e426:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e428:	4a13      	ldr	r2, [pc, #76]	; (800e478 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e42a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e42e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e430:	6853      	ldr	r3, [r2, #4]
 800e432:	0459      	lsls	r1, r3, #17
 800e434:	d5fc      	bpl.n	800e430 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800e436:	490f      	ldr	r1, [pc, #60]	; (800e474 <stm32_clock_init+0xb4>)
 800e438:	680a      	ldr	r2, [r1, #0]
 800e43a:	4b0e      	ldr	r3, [pc, #56]	; (800e474 <stm32_clock_init+0xb4>)
 800e43c:	0192      	lsls	r2, r2, #6
 800e43e:	d5fb      	bpl.n	800e438 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e440:	4a0f      	ldr	r2, [pc, #60]	; (800e480 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800e442:	4910      	ldr	r1, [pc, #64]	; (800e484 <stm32_clock_init+0xc4>)
 800e444:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e446:	f240 7105 	movw	r1, #1797	; 0x705
 800e44a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800e44c:	689a      	ldr	r2, [r3, #8]
 800e44e:	f042 0202 	orr.w	r2, r2, #2
 800e452:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800e454:	461a      	mov	r2, r3
 800e456:	6893      	ldr	r3, [r2, #8]
 800e458:	4906      	ldr	r1, [pc, #24]	; (800e474 <stm32_clock_init+0xb4>)
 800e45a:	f003 030c 	and.w	r3, r3, #12
 800e45e:	2b08      	cmp	r3, #8
 800e460:	d1f9      	bne.n	800e456 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800e462:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800e464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e468:	644b      	str	r3, [r1, #68]	; 0x44
 800e46a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e46c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e470:	664b      	str	r3, [r1, #100]	; 0x64
 800e472:	4770      	bx	lr
 800e474:	40023800 	.word	0x40023800
 800e478:	40007000 	.word	0x40007000
 800e47c:	07405408 	.word	0x07405408
 800e480:	40023c00 	.word	0x40023c00
 800e484:	38089400 	.word	0x38089400
	...

0800e490 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800e490:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e492:	4c43      	ldr	r4, [pc, #268]	; (800e5a0 <can_lld_set_filters+0x110>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e494:	4d43      	ldr	r5, [pc, #268]	; (800e5a4 <can_lld_set_filters+0x114>)
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e49c:	6423      	str	r3, [r4, #64]	; 0x40

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e49e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800e4a2:	0c1b      	lsrs	r3, r3, #16
 800e4a4:	041b      	lsls	r3, r3, #16
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e4ae:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  if (num > 0) {
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	d05a      	beq.n	800e56c <can_lld_set_filters+0xdc>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e4bc:	4618      	mov	r0, r3
  if (num > 0) {
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
 800e4be:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
      CAN1->sFilterRegister[i].FR1 = 0;
 800e4c2:	461c      	mov	r4, r3
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
 800e4c4:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800e4c8:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800e4cc:	00c3      	lsls	r3, r0, #3
 800e4ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4d2:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800e4da:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800e4de:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    /* All filters cleared.*/
    CAN1->FA1R = 0;
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e4e2:	d1f3      	bne.n	800e4cc <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800e4e4:	4d2f      	ldr	r5, [pc, #188]	; (800e5a4 <can_lld_set_filters+0x114>)
 800e4e6:	2600      	movs	r6, #0
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 800e4e8:	2701      	movs	r7, #1
 800e4ea:	6810      	ldr	r0, [r2, #0]
      if (cfp->mode)
 800e4ec:	7914      	ldrb	r4, [r2, #4]
 800e4ee:	00c3      	lsls	r3, r0, #3
 800e4f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4f4:	f014 0f01 	tst.w	r4, #1
 800e4f8:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e4fc:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800e500:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 800e504:	d005      	beq.n	800e512 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800e506:	f8d5 e204 	ldr.w	lr, [r5, #516]	; 0x204
 800e50a:	ea40 0e0e 	orr.w	lr, r0, lr
 800e50e:	f8c5 e204 	str.w	lr, [r5, #516]	; 0x204
      if (cfp->scale)
 800e512:	f014 0f02 	tst.w	r4, #2
 800e516:	d005      	beq.n	800e524 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800e518:	f8d5 e20c 	ldr.w	lr, [r5, #524]	; 0x20c
 800e51c:	ea40 0e0e 	orr.w	lr, r0, lr
 800e520:	f8c5 e20c 	str.w	lr, [r5, #524]	; 0x20c
      if (cfp->assignment)
 800e524:	0764      	lsls	r4, r4, #29
 800e526:	d504      	bpl.n	800e532 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800e528:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800e52c:	4304      	orrs	r4, r0
 800e52e:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800e532:	6894      	ldr	r4, [r2, #8]
 800e534:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800e538:	68d4      	ldr	r4, [r2, #12]
 800e53a:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800e53e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e542:	42b1      	cmp	r1, r6
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800e544:	ea40 0003 	orr.w	r0, r0, r3
      cfp++;
 800e548:	f102 0210 	add.w	r2, r2, #16
        CAN1->FS1R |= fmask;
      if (cfp->assignment)
        CAN1->FFA1R |= fmask;
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
      CAN1->FA1R |= fmask;
 800e54c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
      CAN1->sFilterRegister[i].FR1 = 0;
      CAN1->sFilterRegister[i].FR2 = 0;
    }

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 800e550:	d1cb      	bne.n	800e4ea <can_lld_set_filters+0x5a>
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e552:	4914      	ldr	r1, [pc, #80]	; (800e5a4 <can_lld_set_filters+0x114>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e554:	4a12      	ldr	r2, [pc, #72]	; (800e5a0 <can_lld_set_filters+0x110>)
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e556:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800e55a:	f023 0301 	bic.w	r3, r3, #1
 800e55e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e562:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e564:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e568:	6413      	str	r3, [r2, #64]	; 0x40
 800e56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e56c:	00c2      	lsls	r2, r0, #3
 800e56e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->sFilterRegister[can2sb].FR2 = 0;
#endif
    CAN1->FM1R = 0;
    CAN1->FFA1R = 0;
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800e572:	2301      	movs	r3, #1
 800e574:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800e578:	4083      	lsls	r3, r0
 800e57a:	f043 0301 	orr.w	r3, r3, #1
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    CAN1->sFilterRegister[0].FR1 = 0;
 800e57e:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800e582:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
#if STM32_HAS_CAN2
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800e586:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800e58a:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
#endif
    CAN1->FM1R = 0;
 800e58e:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    CAN1->FFA1R = 0;
 800e592:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
#if STM32_HAS_CAN2
    CAN1->FS1R = 1 | (1 << can2sb);
 800e596:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800e59a:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 800e59e:	e7d8      	b.n	800e552 <can_lld_set_filters+0xc2>
 800e5a0:	40023800 	.word	0x40023800
 800e5a4:	40006400 	.word	0x40006400
	...

0800e5b0 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800e5b0:	b510      	push	{r4, lr}
 * @notapi
 */
static void can_lld_tx_handler(CANDriver *canp) {

  /* No more events until a message is transmitted.*/
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800e5b2:	4c0c      	ldr	r4, [pc, #48]	; (800e5e4 <Vector8C+0x34>)
 800e5b4:	490c      	ldr	r1, [pc, #48]	; (800e5e8 <Vector8C+0x38>)
 800e5b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5b8:	2320      	movs	r3, #32
 800e5ba:	6091      	str	r1, [r2, #8]
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	f104 0008 	add.w	r0, r4, #8
 800e5c6:	f7fe fd23 	bl	800d010 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e5ca:	f104 001c 	add.w	r0, r4, #28
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	f7fe fe56 	bl	800d280 <chEvtBroadcastFlagsI>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e5de:	f7ff b81f 	b.w	800d620 <_port_irq_epilogue>
 800e5e2:	bf00      	nop
 800e5e4:	20000f74 	.word	0x20000f74
 800e5e8:	00010101 	.word	0x00010101
 800e5ec:	00000000 	.word	0x00000000

0800e5f0 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 800e5f2:	4d16      	ldr	r5, [pc, #88]	; (800e64c <Vector90+0x5c>)
 800e5f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e5f6:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800e5f8:	07a2      	lsls	r2, r4, #30
 800e5fa:	d111      	bne.n	800e620 <Vector90+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(1));
    osalSysUnlockFromISR();
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800e5fc:	06e3      	lsls	r3, r4, #27
 800e5fe:	d50b      	bpl.n	800e618 <Vector90+0x28>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800e600:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e602:	2110      	movs	r1, #16
 800e604:	60d9      	str	r1, [r3, #12]
 800e606:	2320      	movs	r3, #32
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	4810      	ldr	r0, [pc, #64]	; (800e650 <Vector90+0x60>)
 800e60e:	f7fe fe37 	bl	800d280 <chEvtBroadcastFlagsI>
 800e612:	2300      	movs	r3, #0
 800e614:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e61c:	f7ff b800 	b.w	800d620 <_port_irq_epilogue>
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800e620:	695a      	ldr	r2, [r3, #20]
 800e622:	f022 0202 	bic.w	r2, r2, #2
 800e626:	615a      	str	r2, [r3, #20]
 800e628:	2320      	movs	r3, #32
 800e62a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e62e:	2100      	movs	r1, #0
 800e630:	f105 0010 	add.w	r0, r5, #16
 800e634:	f7fe fcec 	bl	800d010 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e638:	f105 0018 	add.w	r0, r5, #24
 800e63c:	2101      	movs	r1, #1
 800e63e:	f7fe fe1f 	bl	800d280 <chEvtBroadcastFlagsI>
 800e642:	2300      	movs	r3, #0
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	e7d8      	b.n	800e5fc <Vector90+0xc>
 800e64a:	bf00      	nop
 800e64c:	20000f74 	.word	0x20000f74
 800e650:	20000f94 	.word	0x20000f94
	...

0800e660 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800e660:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 800e662:	4d16      	ldr	r5, [pc, #88]	; (800e6bc <Vector94+0x5c>)
 800e664:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e666:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800e668:	07a2      	lsls	r2, r4, #30
 800e66a:	d111      	bne.n	800e690 <Vector94+0x30>
    osalSysLockFromISR();
    osalThreadDequeueAllI(&canp->rxqueue, MSG_OK);
    osalEventBroadcastFlagsI(&canp->rxfull_event, CAN_MAILBOX_TO_MASK(2));
    osalSysUnlockFromISR();
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800e66c:	06e3      	lsls	r3, r4, #27
 800e66e:	d50b      	bpl.n	800e688 <Vector94+0x28>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800e670:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e672:	2110      	movs	r1, #16
 800e674:	6119      	str	r1, [r3, #16]
 800e676:	2320      	movs	r3, #32
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	4810      	ldr	r0, [pc, #64]	; (800e6c0 <Vector94+0x60>)
 800e67e:	f7fe fdff 	bl	800d280 <chEvtBroadcastFlagsI>
 800e682:	2300      	movs	r3, #0
 800e684:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e68c:	f7fe bfc8 	b.w	800d620 <_port_irq_epilogue>
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800e690:	695a      	ldr	r2, [r3, #20]
 800e692:	f022 0210 	bic.w	r2, r2, #16
 800e696:	615a      	str	r2, [r3, #20]
 800e698:	2320      	movs	r3, #32
 800e69a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 800e69e:	2100      	movs	r1, #0
 800e6a0:	f105 0010 	add.w	r0, r5, #16
 800e6a4:	f7fe fcb4 	bl	800d010 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800e6a8:	f105 0018 	add.w	r0, r5, #24
 800e6ac:	2102      	movs	r1, #2
 800e6ae:	f7fe fde7 	bl	800d280 <chEvtBroadcastFlagsI>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	e7d8      	b.n	800e66c <Vector94+0xc>
 800e6ba:	bf00      	nop
 800e6bc:	20000f74 	.word	0x20000f74
 800e6c0:	20000f94 	.word	0x20000f94
	...

0800e6d0 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
static void can_lld_sce_handler(CANDriver *canp) {
  uint32_t msr;

  msr = canp->can->MSR;
 800e6d2:	4d1b      	ldr	r5, [pc, #108]	; (800e740 <Vector98+0x70>)
 800e6d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e6d6:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800e6d8:	221c      	movs	r2, #28
 800e6da:	605a      	str	r2, [r3, #4]
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 800e6dc:	0722      	lsls	r2, r4, #28
 800e6de:	d41d      	bmi.n	800e71c <Vector98+0x4c>
    osalEventBroadcastFlagsI(&canp->wakeup_event, 0);
    osalSysUnlockFromISR();
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 800e6e0:	0763      	lsls	r3, r4, #29
 800e6e2:	d517      	bpl.n	800e714 <Vector98+0x44>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 800e6e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e6e6:	6993      	ldr	r3, [r2, #24]

    canp->can->ESR &= ~CAN_ESR_LEC;
 800e6e8:	6991      	ldr	r1, [r2, #24]
 800e6ea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800e6ee:	6191      	str	r1, [r2, #24]
    flags = (eventflags_t)(esr & 7);
    if ((esr & CAN_ESR_LEC) > 0)
 800e6f0:	f013 0f70 	tst.w	r3, #112	; 0x70
  if (msr & CAN_MSR_ERRI) {
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;

    canp->can->ESR &= ~CAN_ESR_LEC;
    flags = (eventflags_t)(esr & 7);
 800e6f4:	f003 0107 	and.w	r1, r3, #7
    if ((esr & CAN_ESR_LEC) > 0)
      flags |= CAN_FRAMING_ERROR;
 800e6f8:	bf18      	it	ne
 800e6fa:	f041 0108 	orrne.w	r1, r1, #8
 800e6fe:	2220      	movs	r2, #32
 800e700:	f382 8811 	msr	BASEPRI, r2
 800e704:	480f      	ldr	r0, [pc, #60]	; (800e744 <Vector98+0x74>)
 800e706:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e70a:	f7fe fdb9 	bl	800d280 <chEvtBroadcastFlagsI>
 800e70e:	2300      	movs	r3, #0
 800e710:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
 800e718:	f7fe bf82 	b.w	800d620 <_port_irq_epilogue>
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e71c:	681a      	ldr	r2, [r3, #0]
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800e71e:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e720:	f022 0202 	bic.w	r2, r2, #2
  msr = canp->can->MSR;
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
    canp->state = CAN_READY;
 800e724:	2103      	movs	r1, #3
 800e726:	f800 1b28 	strb.w	r1, [r0], #40
 800e72a:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	f381 8811 	msr	BASEPRI, r1
 800e732:	2100      	movs	r1, #0
 800e734:	f7fe fda4 	bl	800d280 <chEvtBroadcastFlagsI>
 800e738:	2300      	movs	r3, #0
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	e7cf      	b.n	800e6e0 <Vector98+0x10>
 800e740:	20000f74 	.word	0x20000f74
 800e744:	20000f94 	.word	0x20000f94
	...

0800e750 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800e750:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800e752:	4c06      	ldr	r4, [pc, #24]	; (800e76c <can_lld_init+0x1c>)
 800e754:	4620      	mov	r0, r4
 800e756:	f7fe ffbb 	bl	800d6d0 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e75a:	2200      	movs	r2, #0
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
 800e75c:	4b04      	ldr	r3, [pc, #16]	; (800e770 <can_lld_init+0x20>)
 800e75e:	62e3      	str	r3, [r4, #44]	; 0x2c
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e760:	4611      	mov	r1, r2
 800e762:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800e764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e768:	f7ff be92 	b.w	800e490 <can_lld_set_filters>
 800e76c:	20000f74 	.word	0x20000f74
 800e770:	40006400 	.word	0x40006400
	...

0800e780 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 800e780:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e782:	4d65      	ldr	r5, [pc, #404]	; (800e918 <_pal_lld_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e784:	4c65      	ldr	r4, [pc, #404]	; (800e91c <_pal_lld_init+0x19c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e786:	6b2f      	ldr	r7, [r5, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e788:	4965      	ldr	r1, [pc, #404]	; (800e920 <_pal_lld_init+0x1a0>)
 800e78a:	4a66      	ldr	r2, [pc, #408]	; (800e924 <_pal_lld_init+0x1a4>)
 800e78c:	4b66      	ldr	r3, [pc, #408]	; (800e928 <_pal_lld_init+0x1a8>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e78e:	f240 16ff 	movw	r6, #511	; 0x1ff
 800e792:	4337      	orrs	r7, r6
 800e794:	632f      	str	r7, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800e796:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800e798:	433e      	orrs	r6, r7
 800e79a:	652e      	str	r6, [r5, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e79c:	6845      	ldr	r5, [r0, #4]
 800e79e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e7a0:	6885      	ldr	r5, [r0, #8]
 800e7a2:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800e7a4:	68c5      	ldr	r5, [r0, #12]
 800e7a6:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 800e7a8:	6905      	ldr	r5, [r0, #16]
 800e7aa:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800e7ac:	6945      	ldr	r5, [r0, #20]
 800e7ae:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800e7b0:	6985      	ldr	r5, [r0, #24]
 800e7b2:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e7b4:	6805      	ldr	r5, [r0, #0]
 800e7b6:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e7b8:	6a04      	ldr	r4, [r0, #32]
 800e7ba:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e7bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e7be:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800e7c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e7c2:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800e7c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e7c6:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800e7c8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e7ca:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800e7cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e7ce:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e7d0:	69c4      	ldr	r4, [r0, #28]
 800e7d2:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e7d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800e7d6:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e7d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800e7da:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800e7dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800e7de:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800e7e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800e7e2:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800e7e4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e7e6:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800e7e8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800e7ea:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e7ec:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800e7ee:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e7f0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800e7f2:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e7f4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e7f6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800e7f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e7fa:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800e7fc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800e7fe:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800e800:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800e802:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800e804:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800e806:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e808:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800e80a:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e80c:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e80e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800e812:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800e814:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800e818:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800e81a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800e81e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800e822:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800e826:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e82a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800e82e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e832:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800e836:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800e838:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e83c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e840:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800e844:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800e848:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800e84c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800e850:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800e854:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800e858:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800e85c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800e860:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800e864:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800e868:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800e86c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800e870:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e874:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800e878:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800e87c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e87e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800e882:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800e884:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800e888:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800e88a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800e88e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800e890:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800e894:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800e896:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800e89a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e89c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800e8a0:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e8a2:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800e8a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800e8aa:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800e8ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800e8b2:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800e8b6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800e8ba:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800e8be:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800e8c2:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800e8c6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800e8ca:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800e8ce:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800e8d2:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800e8d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800e8da:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800e8de:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800e8e2:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800e8e6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800e8ea:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800e8ee:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800e8f2:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800e8f6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800e8fa:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800e8fe:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800e902:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800e906:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800e90a:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800e90e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 800e912:	bcf0      	pop	{r4, r5, r6, r7}
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	40023800 	.word	0x40023800
 800e91c:	40020000 	.word	0x40020000
 800e920:	40020400 	.word	0x40020400
 800e924:	40020800 	.word	0x40020800
 800e928:	40020c00 	.word	0x40020c00
 800e92c:	00000000 	.word	0x00000000

0800e930 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800e934:	f04f 0c0f 	mov.w	ip, #15
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800e938:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800e93c:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800e940:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800e944:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800e948:	2400      	movs	r4, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800e94a:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800e94e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800e952:	f04f 0803 	mov.w	r8, #3
 800e956:	e030      	b.n	800e9ba <_pal_lld_setgroupmode+0x8a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800e958:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800e95c:	ea2b 0303 	bic.w	r3, fp, r3
 800e960:	ea43 030a 	orr.w	r3, r3, sl
 800e964:	6203      	str	r3, [r0, #32]
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800e966:	6843      	ldr	r3, [r0, #4]
 800e968:	fa09 fa04 	lsl.w	sl, r9, r4
 800e96c:	ea23 030a 	bic.w	r3, r3, sl
 800e970:	433b      	orrs	r3, r7
 800e972:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800e974:	0063      	lsls	r3, r4, #1
 800e976:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800e97a:	fa08 f303 	lsl.w	r3, r8, r3
 800e97e:	43db      	mvns	r3, r3
 800e980:	ea0a 0a03 	and.w	sl, sl, r3
 800e984:	ea4a 0a06 	orr.w	sl, sl, r6
 800e988:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800e98c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e990:	ea03 0a0a 	and.w	sl, r3, sl
 800e994:	ea4a 0a05 	orr.w	sl, sl, r5
 800e998:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800e99c:	f8d0 a000 	ldr.w	sl, [r0]
 800e9a0:	ea03 030a 	and.w	r3, r3, sl
 800e9a4:	ea43 030e 	orr.w	r3, r3, lr
 800e9a8:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800e9aa:	0849      	lsrs	r1, r1, #1
 800e9ac:	d019      	beq.n	800e9e2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 800e9ae:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800e9b0:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800e9b2:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800e9b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 800e9b8:	3401      	adds	r4, #1
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800e9ba:	f004 0307 	and.w	r3, r4, #7
 800e9be:	009b      	lsls	r3, r3, #2
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800e9c0:	f011 0f01 	tst.w	r1, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800e9c4:	fa02 fa03 	lsl.w	sl, r2, r3
      m4 = 15 << ((bit & 7) * 4);
 800e9c8:	fa0c f303 	lsl.w	r3, ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (TRUE) {
    if ((mask & 1) != 0) {
 800e9cc:	d0ed      	beq.n	800e9aa <_pal_lld_setgroupmode+0x7a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
      if (bit < 8)
 800e9ce:	2c07      	cmp	r4, #7
 800e9d0:	d9c2      	bls.n	800e958 <_pal_lld_setgroupmode+0x28>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800e9d2:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800e9d6:	ea2b 0303 	bic.w	r3, fp, r3
 800e9da:	ea43 030a 	orr.w	r3, r3, sl
 800e9de:	6243      	str	r3, [r0, #36]	; 0x24
 800e9e0:	e7c1      	b.n	800e966 <_pal_lld_setgroupmode+0x36>
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e6:	bf00      	nop
	...

0800e9f0 <VectorC4>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800e9f0:	483a      	ldr	r0, [pc, #232]	; (800eadc <VectorC4+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800e9f2:	4a3b      	ldr	r2, [pc, #236]	; (800eae0 <VectorC4+0xf0>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800e9f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800e9f8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800e9fa:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800e9fc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ea00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d04c      	beq.n	800eaa2 <VectorC4+0xb2>
 800ea08:	d81e      	bhi.n	800ea48 <VectorC4+0x58>
 800ea0a:	3a07      	subs	r2, #7
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d03c      	beq.n	800ea8a <VectorC4+0x9a>
 800ea10:	3201      	adds	r2, #1
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d110      	bne.n	800ea38 <VectorC4+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea16:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800ea18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800ea1e:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea20:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	f042 0201 	orr.w	r2, r2, #1
 800ea28:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800ea2a:	6862      	ldr	r2, [r4, #4]
 800ea2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea30:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d94b      	bls.n	800ead0 <VectorC4+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800ea38:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800ea3c:	bf18      	it	ne
 800ea3e:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ea40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800ea44:	f7fe bdec 	b.w	800d620 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ea48:	4a26      	ldr	r2, [pc, #152]	; (800eae4 <VectorC4+0xf4>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d012      	beq.n	800ea74 <VectorC4+0x84>
 800ea4e:	3202      	adds	r2, #2
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d1f1      	bne.n	800ea38 <VectorC4+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800ea54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685e      	ldr	r6, [r3, #4]
 800ea5a:	b33e      	cbz	r6, 800eaac <VectorC4+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ea5c:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800ea5e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ea60:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800ea64:	f042 0201 	orr.w	r2, r2, #1
 800ea68:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ea6a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800ea6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
 800ea70:	f7fe bdd6 	b.w	800d620 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea74:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ea76:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800ea7c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea7e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ea80:	6813      	ldr	r3, [r2, #0]
 800ea82:	f043 0301 	orr.w	r3, r3, #1
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	e7d6      	b.n	800ea38 <VectorC4+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800ea8a:	8c03      	ldrh	r3, [r0, #32]
 800ea8c:	0a1a      	lsrs	r2, r3, #8
 800ea8e:	d00b      	beq.n	800eaa8 <VectorC4+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800ea90:	f003 0301 	and.w	r3, r3, #1
 800ea94:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800ea98:	f002 0206 	and.w	r2, r2, #6
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	6123      	str	r3, [r4, #16]
 800eaa0:	e7ca      	b.n	800ea38 <VectorC4+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800eaa2:	8c03      	ldrh	r3, [r0, #32]
 800eaa4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800eaa8:	6123      	str	r3, [r4, #16]
 800eaaa:	e7c5      	b.n	800ea38 <VectorC4+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800eaac:	6863      	ldr	r3, [r4, #4]
 800eaae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eab2:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800eab4:	6823      	ldr	r3, [r4, #0]
 800eab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eaba:	6023      	str	r3, [r4, #0]
 800eabc:	2320      	movs	r3, #32
 800eabe:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800eac2:	301c      	adds	r0, #28
 800eac4:	4631      	mov	r1, r6
 800eac6:	f7fe fa6b 	bl	800cfa0 <chThdResumeI>
 800eaca:	f386 8811 	msr	BASEPRI, r6
 800eace:	e7b3      	b.n	800ea38 <VectorC4+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ead6:	6023      	str	r3, [r4, #0]
 800ead8:	e7ae      	b.n	800ea38 <VectorC4+0x48>
 800eada:	bf00      	nop
 800eadc:	20000fa4 	.word	0x20000fa4
 800eae0:	00030008 	.word	0x00030008
 800eae4:	00070082 	.word	0x00070082
	...

0800eaf0 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800eaf0:	4833      	ldr	r0, [pc, #204]	; (800ebc0 <VectorC8+0xd0>)
/**
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800eaf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 800eaf4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eaf6:	6b07      	ldr	r7, [r0, #48]	; 0x30
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800eaf8:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eafa:	683a      	ldr	r2, [r7, #0]
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800eafc:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800eafe:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 800eb02:	43db      	mvns	r3, r3
 800eb04:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eb06:	6813      	ldr	r3, [r2, #0]
 800eb08:	f023 031f 	bic.w	r3, r3, #31
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	6813      	ldr	r3, [r2, #0]
 800eb10:	07db      	lsls	r3, r3, #31
 800eb12:	d4fc      	bmi.n	800eb0e <VectorC8+0x1e>
 800eb14:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800eb16:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eb18:	687f      	ldr	r7, [r7, #4]
 800eb1a:	233d      	movs	r3, #61	; 0x3d
 800eb1c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800eb1e:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800eb20:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800eb22:	6813      	ldr	r3, [r2, #0]
 800eb24:	f023 031f 	bic.w	r3, r3, #31
 800eb28:	6013      	str	r3, [r2, #0]
 800eb2a:	6813      	ldr	r3, [r2, #0]
 800eb2c:	f013 0301 	ands.w	r3, r3, #1
 800eb30:	d1fb      	bne.n	800eb2a <VectorC8+0x3a>
 800eb32:	7a2f      	ldrb	r7, [r5, #8]
 800eb34:	686d      	ldr	r5, [r5, #4]
 800eb36:	223d      	movs	r2, #61	; 0x3d
 800eb38:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800eb3a:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800eb3c:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800eb3e:	bf48      	it	mi
 800eb40:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800eb42:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800eb44:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800eb46:	bf44      	itt	mi
 800eb48:	f043 0302 	orrmi.w	r3, r3, #2
 800eb4c:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800eb4e:	054a      	lsls	r2, r1, #21
 800eb50:	d50a      	bpl.n	800eb68 <VectorC8+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800eb52:	6862      	ldr	r2, [r4, #4]
 800eb54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800eb58:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800eb5a:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800eb5c:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800eb60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb64:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800eb66:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800eb68:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800eb6a:	bf44      	itt	mi
 800eb6c:	f043 0308 	orrmi.w	r3, r3, #8
 800eb70:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800eb72:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800eb74:	bf44      	itt	mi
 800eb76:	f043 0320 	orrmi.w	r3, r3, #32
 800eb7a:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800eb7c:	04cc      	lsls	r4, r1, #19
 800eb7e:	d513      	bpl.n	800eba8 <VectorC8+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 800eb80:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800eb84:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800eb86:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800eb88:	d416      	bmi.n	800ebb8 <VectorC8+0xc8>
 800eb8a:	2320      	movs	r3, #32
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f06f 0101 	mvn.w	r1, #1
 800eb94:	480b      	ldr	r0, [pc, #44]	; (800ebc4 <VectorC8+0xd4>)
 800eb96:	f7fe fa03 	bl	800cfa0 <chThdResumeI>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f383 8811 	msr	BASEPRI, r3

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800eba0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800eba4:	f7fe bd3c 	b.w	800d620 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800eba8:	0432      	lsls	r2, r6, #16
 800ebaa:	d405      	bmi.n	800ebb8 <VectorC8+0xc8>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1ec      	bne.n	800eb8a <VectorC8+0x9a>

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800ebb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
 800ebb4:	f7fe bd34 	b.w	800d620 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800ebb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebbc:	6083      	str	r3, [r0, #8]
 800ebbe:	e7e4      	b.n	800eb8a <VectorC8+0x9a>
 800ebc0:	20000fa4 	.word	0x20000fa4
 800ebc4:	20000fc0 	.word	0x20000fc0
	...

0800ebd0 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800ebd0:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800ebd2:	4c07      	ldr	r4, [pc, #28]	; (800ebf0 <i2c_lld_init+0x20>)
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7fe fdb3 	bl	800d740 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800ebda:	4b06      	ldr	r3, [pc, #24]	; (800ebf4 <i2c_lld_init+0x24>)
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 800ebdc:	4a06      	ldr	r2, [pc, #24]	; (800ebf8 <i2c_lld_init+0x28>)
 800ebde:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800ebe0:	2100      	movs	r1, #0
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800ebe2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
 800ebe6:	61e1      	str	r1, [r4, #28]
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800ebe8:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800ebea:	6322      	str	r2, [r4, #48]	; 0x30
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	bf00      	nop
 800ebf0:	20000fa4 	.word	0x20000fa4
 800ebf4:	08012ab8 	.word	0x08012ab8
 800ebf8:	40005800 	.word	0x40005800
 800ebfc:	00000000 	.word	0x00000000

0800ec00 <i2c_lld_stop>:
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 800ec00:	7803      	ldrb	r3, [r0, #0]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d02f      	beq.n	800ec66 <i2c_lld_stop+0x66>
  dp->CR1 = 0;
  dp->CR2 = 0;
  dp->SR1 = 0;

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec06:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800ec08:	6b43      	ldr	r3, [r0, #52]	; 0x34
  dp->CR1 = 0;
  dp->CR2 = 0;
  dp->SR1 = 0;

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec0a:	680a      	ldr	r2, [r1, #0]
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {
 800ec0c:	b570      	push	{r4, r5, r6, lr}
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* Stops the I2C peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
 800ec0e:	2400      	movs	r4, #0
 */
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* Stops the I2C peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800ec10:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800ec14:	601d      	str	r5, [r3, #0]
  dp->CR1 = 0;
 800ec16:	601c      	str	r4, [r3, #0]
  dp->CR2 = 0;
 800ec18:	605c      	str	r4, [r3, #4]
  dp->SR1 = 0;
 800ec1a:	615c      	str	r4, [r3, #20]

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec1c:	6813      	ldr	r3, [r2, #0]
 800ec1e:	f023 031f 	bic.w	r3, r3, #31
 800ec22:	6013      	str	r3, [r2, #0]
 800ec24:	6813      	ldr	r3, [r2, #0]
 800ec26:	07dc      	lsls	r4, r3, #31
 800ec28:	d4fc      	bmi.n	800ec24 <i2c_lld_stop+0x24>
 800ec2a:	7a0e      	ldrb	r6, [r1, #8]
  dmaStreamDisable(i2cp->dmarx);
 800ec2c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  dp->CR1 = 0;
  dp->CR2 = 0;
  dp->SR1 = 0;

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec2e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(i2cp->dmarx);
 800ec30:	682a      	ldr	r2, [r5, #0]
  dp->CR1 = 0;
  dp->CR2 = 0;
  dp->SR1 = 0;

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 800ec32:	233d      	movs	r3, #61	; 0x3d
 800ec34:	40b3      	lsls	r3, r6
 800ec36:	6023      	str	r3, [r4, #0]
  dmaStreamDisable(i2cp->dmarx);
 800ec38:	6813      	ldr	r3, [r2, #0]
 800ec3a:	f023 031f 	bic.w	r3, r3, #31
 800ec3e:	6013      	str	r3, [r2, #0]
 800ec40:	6813      	ldr	r3, [r2, #0]
 800ec42:	07db      	lsls	r3, r3, #31
 800ec44:	d4fc      	bmi.n	800ec40 <i2c_lld_stop+0x40>
 800ec46:	4604      	mov	r4, r0
 800ec48:	7a28      	ldrb	r0, [r5, #8]
 800ec4a:	686a      	ldr	r2, [r5, #4]
 800ec4c:	233d      	movs	r3, #61	; 0x3d
 800ec4e:	4083      	lsls	r3, r0
 800ec50:	6013      	str	r3, [r2, #0]
  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
    dmaStreamRelease(i2cp->dmatx);
 800ec52:	4608      	mov	r0, r1
 800ec54:	f7ff fb54 	bl	800e300 <dmaStreamRelease>
    dmaStreamRelease(i2cp->dmarx);
 800ec58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ec5a:	f7ff fb51 	bl	800e300 <dmaStreamRelease>
      rccDisableI2C1(FALSE);
    }
#endif

#if STM32_I2C_USE_I2C2
    if (&I2CD2 == i2cp) {
 800ec5e:	4b08      	ldr	r3, [pc, #32]	; (800ec80 <i2c_lld_stop+0x80>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	d001      	beq.n	800ec68 <i2c_lld_stop+0x68>
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	4770      	bx	lr
      nvicDisableVector(I2C2_EV_IRQn);
 800ec68:	2021      	movs	r0, #33	; 0x21
 800ec6a:	f7ff f931 	bl	800ded0 <nvicDisableVector>
      nvicDisableVector(I2C2_ER_IRQn);
 800ec6e:	2022      	movs	r0, #34	; 0x22
 800ec70:	f7ff f92e 	bl	800ded0 <nvicDisableVector>
      rccDisableI2C2(FALSE);
 800ec74:	4a03      	ldr	r2, [pc, #12]	; (800ec84 <i2c_lld_stop+0x84>)
 800ec76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ec78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ec7c:	6413      	str	r3, [r2, #64]	; 0x40
      nvicDisableVector(I2C3_ER_IRQn);
      rccDisableI2C3(FALSE);
    }
#endif
  }
}
 800ec7e:	e7f1      	b.n	800ec64 <i2c_lld_stop+0x64>
 800ec80:	20000fa4 	.word	0x20000fa4
 800ec84:	40023800 	.word	0x40023800
	...

0800ec90 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800ec90:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800ec92:	4c06      	ldr	r4, [pc, #24]	; (800ecac <usb_lld_init+0x1c>)
 800ec94:	4620      	mov	r0, r4
 800ec96:	f7fe fe6b 	bl	800d970 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800ec9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800ec9e:	4a04      	ldr	r2, [pc, #16]	; (800ecb0 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800eca0:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800eca2:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 800eca4:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 800eca6:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800eca8:	6663      	str	r3, [r4, #100]	; 0x64
 800ecaa:	bd10      	pop	{r4, pc}
 800ecac:	20000fe0 	.word	0x20000fe0
 800ecb0:	08012b60 	.word	0x08012b60
	...

0800ecc0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800ecc2:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800ecc4:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800ecc6:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800ecc8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800ecca:	692b      	ldr	r3, [r5, #16]
 800eccc:	f013 0420 	ands.w	r4, r3, #32
 800ecd0:	d1fb      	bne.n	800ecca <usb_lld_reset+0xa>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 800ecd2:	200c      	movs	r0, #12
 800ecd4:	f7fd ff2c 	bl	800cb30 <chSysPolledDelayX>

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ecd8:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54
 800ecdc:	f8de 6008 	ldr.w	r6, [lr, #8]
 800ece0:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ece2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 800ece6:	21ff      	movs	r1, #255	; 0xff
 800ece8:	eb05 1243 	add.w	r2, r5, r3, lsl #5

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ecec:	3301      	adds	r3, #1
 800ecee:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ecf0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800ecf4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800ecf8:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800ecfc:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ed00:	d9f2      	bls.n	800ece8 <usb_lld_reset+0x28>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ed02:	f8de 3000 	ldr.w	r3, [lr]
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800ed06:	f04f 32ff 	mov.w	r2, #4294967295
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ed0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800ed0e:	f8c5 2818 	str.w	r2, [r5, #2072]	; 0x818
 800ed12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ed14:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ed18:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800ed1a:	f8de 3000 	ldr.w	r3, [lr]
 800ed1e:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800ed20:	2310      	movs	r3, #16
 800ed22:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800ed24:	6913      	ldr	r3, [r2, #16]
 800ed26:	f013 0410 	ands.w	r4, r3, #16
 800ed2a:	d1fb      	bne.n	800ed24 <usb_lld_reset+0x64>
 800ed2c:	200c      	movs	r0, #12
 800ed2e:	f7fd feff 	bl	800cb30 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ed32:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ed36:	4a11      	ldr	r2, [pc, #68]	; (800ed7c <usb_lld_reset+0xbc>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800ed38:	4811      	ldr	r0, [pc, #68]	; (800ed80 <usb_lld_reset+0xc0>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ed3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ed3e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800ed42:	69ab      	ldr	r3, [r5, #24]
 800ed44:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ed48:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800ed4c:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800ed4e:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800ed50:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800ed54:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800ed58:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800ed5a:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ed5e:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800ed62:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800ed66:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800ed6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800ed6c:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ed70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800ed74:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ed76:	62ab      	str	r3, [r5, #40]	; 0x28
 800ed78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	10008040 	.word	0x10008040
 800ed80:	08012b70 	.word	0x08012b70
	...

0800ed90 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800ed90:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800ed92:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800ed96:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800ed9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ed9e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800eda2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800eda6:	4770      	bx	lr
	...

0800edb0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800edb0:	3158      	adds	r1, #88	; 0x58
 800edb2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800edb4:	0149      	lsls	r1, r1, #5
 800edb6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800edb8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800edbc:	d004      	beq.n	800edc8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800edbe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800edc2:	bf14      	ite	ne
 800edc4:	2001      	movne	r0, #1
 800edc6:	2002      	moveq	r0, #2
}
 800edc8:	4770      	bx	lr
 800edca:	bf00      	nop
 800edcc:	0000      	movs	r0, r0
	...

0800edd0 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800edd0:	3148      	adds	r1, #72	; 0x48
 800edd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800edd4:	0149      	lsls	r1, r1, #5
 800edd6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800edd8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800eddc:	d004      	beq.n	800ede8 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800edde:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800ede2:	bf14      	ite	ne
 800ede4:	2001      	movne	r0, #1
 800ede6:	2002      	moveq	r0, #2
}
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	0000      	movs	r0, r0
	...

0800edf0 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800edf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800edf4:	68cb      	ldr	r3, [r1, #12]
 800edf6:	6a1b      	ldr	r3, [r3, #32]
 800edf8:	6819      	ldr	r1, [r3, #0]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	6053      	str	r3, [r2, #4]
 800edfe:	6011      	str	r1, [r2, #0]
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
	...

0800ee10 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ee10:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 800ee14:	b430      	push	{r4, r5}
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ee16:	68dd      	ldr	r5, [r3, #12]
 800ee18:	69ac      	ldr	r4, [r5, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800ee1a:	6863      	ldr	r3, [r4, #4]
 800ee1c:	6123      	str	r3, [r4, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 800ee1e:	b931      	cbnz	r1, 800ee2e <usb_lld_prepare_receive+0x1e>
 800ee20:	2b40      	cmp	r3, #64	; 0x40
 800ee22:	d904      	bls.n	800ee2e <usb_lld_prepare_receive+0x1e>
      osp->rxsize = EP0_MAX_OUTSIZE;
 800ee24:	2340      	movs	r3, #64	; 0x40
 800ee26:	6063      	str	r3, [r4, #4]
 800ee28:	4a09      	ldr	r2, [pc, #36]	; (800ee50 <usb_lld_prepare_receive+0x40>)
 800ee2a:	243f      	movs	r4, #63	; 0x3f
 800ee2c:	e002      	b.n	800ee34 <usb_lld_prepare_receive+0x24>
 800ee2e:	1e5c      	subs	r4, r3, #1
 800ee30:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ee34:	6d00      	ldr	r0, [r0, #80]	; 0x50
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800ee36:	8a6d      	ldrh	r5, [r5, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ee38:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800ee3c:	192b      	adds	r3, r5, r4
 800ee3e:	fbb3 f3f5 	udiv	r3, r3, r5
 800ee42:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 800ee46:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 800ee4a:	bc30      	pop	{r4, r5}
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	60000040 	.word	0x60000040
	...

0800ee60 <otg_epout_handler.constprop.7>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ee64:	4e26      	ldr	r6, [pc, #152]	; (800ef00 <otg_epout_handler.constprop.7+0xa0>)
 800ee66:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800ee68:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800ee6c:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800ee6e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 800ee72:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800ee76:	0720      	lsls	r0, r4, #28
 800ee78:	d503      	bpl.n	800ee82 <otg_epout_handler.constprop.7+0x22>
 800ee7a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800ee7e:	0719      	lsls	r1, r3, #28
 800ee80:	d41d      	bmi.n	800eebe <otg_epout_handler.constprop.7+0x5e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800ee82:	07e2      	lsls	r2, r4, #31
 800ee84:	d519      	bpl.n	800eeba <otg_epout_handler.constprop.7+0x5a>
 800ee86:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800ee8a:	07db      	lsls	r3, r3, #31
 800ee8c:	d515      	bpl.n	800eeba <otg_epout_handler.constprop.7+0x5a>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ee8e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800ee92:	4c1b      	ldr	r4, [pc, #108]	; (800ef00 <otg_epout_handler.constprop.7+0xa0>)
 800ee94:	68f1      	ldr	r1, [r6, #12]
 800ee96:	698b      	ldr	r3, [r1, #24]

    if (osp->rxsize < osp->totsize) {
 800ee98:	6858      	ldr	r0, [r3, #4]
 800ee9a:	691a      	ldr	r2, [r3, #16]
 800ee9c:	4290      	cmp	r0, r2
 800ee9e:	d316      	bcc.n	800eece <otg_epout_handler.constprop.7+0x6e>
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800eea0:	8962      	ldrh	r2, [r4, #10]
 800eea2:	68ce      	ldr	r6, [r1, #12]
 800eea4:	2301      	movs	r3, #1
 800eea6:	40ab      	lsls	r3, r5
 800eea8:	ea22 0303 	bic.w	r3, r2, r3
 800eeac:	8163      	strh	r3, [r4, #10]
 800eeae:	4629      	mov	r1, r5
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	4633      	mov	r3, r6
    }
  }
}
 800eeb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      chSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800eeb8:	4718      	bx	r3
 800eeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800eebe:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800eec2:	4629      	mov	r1, r5
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	4630      	mov	r0, r6
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	4798      	blx	r3
 800eecc:	e7d9      	b.n	800ee82 <otg_epout_handler.constprop.7+0x22>

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800eece:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 800eed0:	2600      	movs	r6, #0

    if (osp->rxsize < osp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800eed2:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 800eed4:	609e      	str	r6, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 800eed6:	4629      	mov	r1, r5
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7ff ff99 	bl	800ee10 <usb_lld_prepare_receive>
 800eede:	2320      	movs	r3, #32
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eee6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800eeea:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800eeee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eef2:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800eef6:	f386 8811 	msr	BASEPRI, r6
 800eefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eefe:	bf00      	nop
 800ef00:	20000fe0 	.word	0x20000fe0
	...

0800ef10 <usb_lld_prepare_transmit>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ef10:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800ef14:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ef16:	68dc      	ldr	r4, [r3, #12]
 800ef18:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800ef1a:	6853      	ldr	r3, [r2, #4]
 800ef1c:	6113      	str	r3, [r2, #16]
  if (isp->txsize == 0) {
 800ef1e:	b1ab      	cbz	r3, 800ef4c <usb_lld_prepare_transmit+0x3c>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800ef20:	b171      	cbz	r1, 800ef40 <usb_lld_prepare_transmit+0x30>
 800ef22:	1e5a      	subs	r2, r3, #1
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800ef24:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800ef26:	8a24      	ldrh	r4, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800ef28:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800ef2c:	4422      	add	r2, r4
 800ef2e:	fbb2 f2f4 	udiv	r2, r2, r4
 800ef32:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800ef36:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800ef3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef3e:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800ef40:	2b40      	cmp	r3, #64	; 0x40
 800ef42:	d9ee      	bls.n	800ef22 <usb_lld_prepare_transmit+0x12>
      isp->txsize = EP0_MAX_INSIZE;
 800ef44:	2340      	movs	r3, #64	; 0x40
 800ef46:	6053      	str	r3, [r2, #4]
 800ef48:	223f      	movs	r2, #63	; 0x3f
 800ef4a:	e7eb      	b.n	800ef24 <usb_lld_prepare_transmit+0x14>

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800ef4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800ef4e:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800ef52:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800ef56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ef5a:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800ef5e:	4770      	bx	lr

0800ef60 <otg_epin_handler.constprop.8>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800ef60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ef64:	4f31      	ldr	r7, [pc, #196]	; (800f02c <otg_epin_handler.constprop.8+0xcc>)
 800ef66:	6d3d      	ldr	r5, [r7, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800ef68:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800ef6c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800ef6e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 800ef72:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800ef76:	07e1      	lsls	r1, r4, #31
 800ef78:	d503      	bpl.n	800ef82 <otg_epin_handler.constprop.8+0x22>
 800ef7a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800ef7e:	07da      	lsls	r2, r3, #31
 800ef80:	d40a      	bmi.n	800ef98 <otg_epin_handler.constprop.8+0x38>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800ef82:	0623      	lsls	r3, r4, #24
 800ef84:	d506      	bpl.n	800ef94 <otg_epin_handler.constprop.8+0x34>
 800ef86:	2301      	movs	r3, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800ef88:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800ef8c:	fa03 f606 	lsl.w	r6, r3, r6
 800ef90:	4216      	tst	r6, r2
 800ef92:	d129      	bne.n	800efe8 <otg_epin_handler.constprop.8+0x88>
 800ef94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ef98:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800ef9c:	68d9      	ldr	r1, [r3, #12]
 800ef9e:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800efa0:	6858      	ldr	r0, [r3, #4]
 800efa2:	691a      	ldr	r2, [r3, #16]
 800efa4:	4290      	cmp	r0, r2
 800efa6:	d234      	bcs.n	800f012 <otg_epin_handler.constprop.8+0xb2>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800efa8:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800efaa:	f04f 0800 	mov.w	r8, #0

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800efae:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 800efb0:	f8c3 8008 	str.w	r8, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 800efb4:	4631      	mov	r1, r6
 800efb6:	4638      	mov	r0, r7
 800efb8:	f7ff ffaa 	bl	800ef10 <usb_lld_prepare_transmit>
 800efbc:	2320      	movs	r3, #32
 800efbe:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800efc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc4:	eb03 1046 	add.w	r0, r3, r6, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800efc8:	2201      	movs	r2, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800efca:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800efce:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800efd2:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800efd6:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800efda:	40b2      	lsls	r2, r6
 800efdc:	430a      	orrs	r2, r1
 800efde:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800efe2:	f388 8811 	msr	BASEPRI, r8
 800efe6:	e7cc      	b.n	800ef82 <otg_epin_handler.constprop.8+0x22>
 800efe8:	2320      	movs	r3, #32
 800efea:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800efee:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800eff2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800eff4:	480e      	ldr	r0, [pc, #56]	; (800f030 <otg_epin_handler.constprop.8+0xd0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800eff6:	ea23 0306 	bic.w	r3, r3, r6
 800effa:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800effe:	4316      	orrs	r6, r2
 800f000:	2100      	movs	r1, #0
 800f002:	65fe      	str	r6, [r7, #92]	; 0x5c
 800f004:	f7fd ffcc 	bl	800cfa0 <chThdResumeI>
 800f008:	2300      	movs	r3, #0
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800f012:	893a      	ldrh	r2, [r7, #8]
 800f014:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800f018:	2301      	movs	r3, #1
 800f01a:	40b3      	lsls	r3, r6
 800f01c:	ea22 0303 	bic.w	r3, r2, r3
 800f020:	813b      	strh	r3, [r7, #8]
 800f022:	4631      	mov	r1, r6
 800f024:	4638      	mov	r0, r7
 800f026:	47c0      	blx	r8
 800f028:	e7ab      	b.n	800ef82 <otg_epin_handler.constprop.8+0x22>
 800f02a:	bf00      	nop
 800f02c:	20000fe0 	.word	0x20000fe0
 800f030:	20001040 	.word	0x20001040
	...

0800f040 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800f040:	b570      	push	{r4, r5, r6, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800f042:	4d3a      	ldr	r5, [pc, #232]	; (800f12c <Vector14C+0xec>)
 800f044:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 800f046:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 800f048:	69b3      	ldr	r3, [r6, #24]
 800f04a:	401c      	ands	r4, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800f04c:	04e1      	lsls	r1, r4, #19
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 800f04e:	6174      	str	r4, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800f050:	d42d      	bmi.n	800f0ae <Vector14C+0x6e>
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 800f052:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 800f054:	bf48      	it	mi
 800f056:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800f05a:	0723      	lsls	r3, r4, #28
 800f05c:	d504      	bpl.n	800f068 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 800f05e:	686b      	ldr	r3, [r5, #4]
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	b10b      	cbz	r3, 800f068 <Vector14C+0x28>
 800f064:	4831      	ldr	r0, [pc, #196]	; (800f12c <Vector14C+0xec>)
 800f066:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 800f068:	06e5      	lsls	r5, r4, #27
 800f06a:	d42b      	bmi.n	800f0c4 <Vector14C+0x84>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 800f06c:	0360      	lsls	r0, r4, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 800f06e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800f072:	d507      	bpl.n	800f084 <Vector14C+0x44>
    if (src & (1 << 0))
 800f074:	07e9      	lsls	r1, r5, #31
 800f076:	d445      	bmi.n	800f104 <Vector14C+0xc4>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 800f078:	07aa      	lsls	r2, r5, #30
 800f07a:	d448      	bmi.n	800f10e <Vector14C+0xce>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800f07c:	076b      	lsls	r3, r5, #29
 800f07e:	d44b      	bmi.n	800f118 <Vector14C+0xd8>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 800f080:	072e      	lsls	r6, r5, #28
 800f082:	d44e      	bmi.n	800f122 <Vector14C+0xe2>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 800f084:	0324      	lsls	r4, r4, #12
 800f086:	d507      	bpl.n	800f098 <Vector14C+0x58>
    if (src & (1 << 16))
 800f088:	03e8      	lsls	r0, r5, #15
 800f08a:	d430      	bmi.n	800f0ee <Vector14C+0xae>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 800f08c:	03a9      	lsls	r1, r5, #14
 800f08e:	d433      	bmi.n	800f0f8 <Vector14C+0xb8>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 800f090:	036a      	lsls	r2, r5, #13
 800f092:	d426      	bmi.n	800f0e2 <Vector14C+0xa2>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800f094:	032b      	lsls	r3, r5, #12
 800f096:	d403      	bmi.n	800f0a0 <Vector14C+0x60>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800f098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800f09c:	f7fe bac0 	b.w	800d620 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800f0a0:	2003      	movs	r0, #3
 800f0a2:	f7ff fedd 	bl	800ee60 <otg_epout_handler.constprop.7>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 800f0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 800f0aa:	f7fe bab9 	b.w	800d620 <_port_irq_epilogue>
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    _usb_reset(usbp);
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f7fe fc6e 	bl	800d990 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800f0b4:	686b      	ldr	r3, [r5, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d0ca      	beq.n	800f052 <Vector14C+0x12>
 800f0bc:	2100      	movs	r1, #0
 800f0be:	4628      	mov	r0, r5
 800f0c0:	4798      	blx	r3
 800f0c2:	e7c6      	b.n	800f052 <Vector14C+0x12>
 800f0c4:	2320      	movs	r3, #32
 800f0c6:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800f0ca:	69b3      	ldr	r3, [r6, #24]
 800f0cc:	4818      	ldr	r0, [pc, #96]	; (800f130 <Vector14C+0xf0>)
 800f0ce:	f023 0310 	bic.w	r3, r3, #16
 800f0d2:	61b3      	str	r3, [r6, #24]
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	f7fd ff63 	bl	800cfa0 <chThdResumeI>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	e7c4      	b.n	800f06c <Vector14C+0x2c>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800f0e2:	2002      	movs	r0, #2
 800f0e4:	f7ff febc 	bl	800ee60 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 800f0e8:	032b      	lsls	r3, r5, #12
 800f0ea:	d5d5      	bpl.n	800f098 <Vector14C+0x58>
 800f0ec:	e7d8      	b.n	800f0a0 <Vector14C+0x60>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	f7ff feb6 	bl	800ee60 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 800f0f4:	03a9      	lsls	r1, r5, #14
 800f0f6:	d5cb      	bpl.n	800f090 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 800f0f8:	2001      	movs	r0, #1
 800f0fa:	f7ff feb1 	bl	800ee60 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 800f0fe:	036a      	lsls	r2, r5, #13
 800f100:	d5c8      	bpl.n	800f094 <Vector14C+0x54>
 800f102:	e7ee      	b.n	800f0e2 <Vector14C+0xa2>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 800f104:	2000      	movs	r0, #0
 800f106:	f7ff ff2b 	bl	800ef60 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 800f10a:	07aa      	lsls	r2, r5, #30
 800f10c:	d5b6      	bpl.n	800f07c <Vector14C+0x3c>
      otg_epin_handler(usbp, 1);
 800f10e:	2001      	movs	r0, #1
 800f110:	f7ff ff26 	bl	800ef60 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 800f114:	076b      	lsls	r3, r5, #29
 800f116:	d5b3      	bpl.n	800f080 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 800f118:	2002      	movs	r0, #2
 800f11a:	f7ff ff21 	bl	800ef60 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 800f11e:	072e      	lsls	r6, r5, #28
 800f120:	d5b0      	bpl.n	800f084 <Vector14C+0x44>
      otg_epin_handler(usbp, 3);
 800f122:	2003      	movs	r0, #3
 800f124:	f7ff ff1c 	bl	800ef60 <otg_epin_handler.constprop.8>
 800f128:	e7ac      	b.n	800f084 <Vector14C+0x44>
 800f12a:	bf00      	nop
 800f12c:	20000fe0 	.word	0x20000fe0
 800f130:	20001040 	.word	0x20001040
	...

0800f140 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800f140:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f142:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800f146:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f14a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f14e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f152:	4770      	bx	lr
	...

0800f160 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f160:	6d03      	ldr	r3, [r0, #80]	; 0x50
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800f162:	b410      	push	{r4}
 800f164:	eb03 1441 	add.w	r4, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f168:	2001      	movs	r0, #1
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f16a:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 800f16e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f172:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f176:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
}
 800f17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f17e:	fa00 f101 	lsl.w	r1, r0, r1
 800f182:	4311      	orrs	r1, r2
 800f184:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
}
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	0000      	movs	r0, r0
	...

0800f190 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800f190:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f192:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800f196:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f19a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f19e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f1a2:	4770      	bx	lr
	...

0800f1b0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800f1b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f1b2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800f1b6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f1ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1be:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800f1c2:	4770      	bx	lr
	...

0800f1d0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800f1d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f1d2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800f1d6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f1da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1de:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 800f1e2:	4770      	bx	lr
	...

0800f1f0 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 800f1f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f1f2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800f1f6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f1fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1fe:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 800f202:	4770      	bx	lr
	...

0800f210 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 800f210:	b508      	push	{r3, lr}
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800f212:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <Vector108+0x30>)
  if (gptp->state == GPT_ONESHOT) {
 800f214:	7818      	ldrb	r0, [r3, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800f216:	68da      	ldr	r2, [r3, #12]
 800f218:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 800f21a:	2804      	cmp	r0, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800f21c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 800f21e:	d107      	bne.n	800f230 <Vector108+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800f220:	2002      	movs	r0, #2
 800f222:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 800f224:	6011      	str	r1, [r2, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 800f226:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 800f228:	68d1      	ldr	r1, [r2, #12]
 800f22a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800f22e:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	4803      	ldr	r0, [pc, #12]	; (800f240 <Vector108+0x30>)
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD5);

  OSAL_IRQ_EPILOGUE();
}
 800f238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD5);

  OSAL_IRQ_EPILOGUE();
 800f23c:	f7fe b9f0 	b.w	800d620 <_port_irq_epilogue>
 800f240:	2000127c 	.word	0x2000127c
	...

0800f250 <gpt_lld_init>:
  gptObjectInit(&GPTD4);
#endif

#if STM32_GPT_USE_TIM5
  /* Driver initialization.*/
  GPTD5.tim = STM32_TIM5;
 800f250:	4802      	ldr	r0, [pc, #8]	; (800f25c <gpt_lld_init+0xc>)
 800f252:	4b03      	ldr	r3, [pc, #12]	; (800f260 <gpt_lld_init+0x10>)
 800f254:	60c3      	str	r3, [r0, #12]
  gptObjectInit(&GPTD5);
 800f256:	f7fe ba63 	b.w	800d720 <gptObjectInit>
 800f25a:	bf00      	nop
 800f25c:	2000127c 	.word	0x2000127c
 800f260:	40000c00 	.word	0x40000c00
	...

0800f270 <VectorB8>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 800f270:	b538      	push	{r3, r4, r5, lr}
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800f272:	4d25      	ldr	r5, [pc, #148]	; (800f308 <VectorB8+0x98>)
 800f274:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f276:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800f278:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800f27a:	68da      	ldr	r2, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f27c:	7d08      	ldrb	r0, [r1, #20]
 800f27e:	4014      	ands	r4, r2
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
 800f280:	b2e2      	uxtb	r2, r4
 800f282:	43d2      	mvns	r2, r2
 800f284:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f286:	b990      	cbnz	r0, 800f2ae <VectorB8+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f288:	0760      	lsls	r0, r4, #29
 800f28a:	d52f      	bpl.n	800f2ec <VectorB8+0x7c>
      _icu_isr_invoke_width_cb(icup);
 800f28c:	782b      	ldrb	r3, [r5, #0]
 800f28e:	2b04      	cmp	r3, #4
 800f290:	d028      	beq.n	800f2e4 <VectorB8+0x74>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f292:	07a1      	lsls	r1, r4, #30
 800f294:	d412      	bmi.n	800f2bc <VectorB8+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800f296:	07e4      	lsls	r4, r4, #31
 800f298:	d505      	bpl.n	800f2a6 <VectorB8+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 800f29a:	686b      	ldr	r3, [r5, #4]
 800f29c:	481a      	ldr	r0, [pc, #104]	; (800f308 <VectorB8+0x98>)
 800f29e:	691b      	ldr	r3, [r3, #16]
 800f2a0:	4798      	blx	r3
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD4);

  OSAL_IRQ_EPILOGUE();
}
 800f2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD4);

  OSAL_IRQ_EPILOGUE();
 800f2aa:	f7fe b9b9 	b.w	800d620 <_port_irq_epilogue>
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f2ae:	07a2      	lsls	r2, r4, #30
 800f2b0:	d50b      	bpl.n	800f2ca <VectorB8+0x5a>
      _icu_isr_invoke_width_cb(icup);
 800f2b2:	782b      	ldrb	r3, [r5, #0]
 800f2b4:	2b04      	cmp	r3, #4
 800f2b6:	d004      	beq.n	800f2c2 <VectorB8+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f2b8:	0763      	lsls	r3, r4, #29
 800f2ba:	d5ec      	bpl.n	800f296 <VectorB8+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800f2bc:	2304      	movs	r3, #4
 800f2be:	702b      	strb	r3, [r5, #0]
 800f2c0:	e7e9      	b.n	800f296 <VectorB8+0x26>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800f2c2:	688b      	ldr	r3, [r1, #8]
 800f2c4:	b1e3      	cbz	r3, 800f300 <VectorB8+0x90>
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f2ca:	0763      	lsls	r3, r4, #29
 800f2cc:	d5e3      	bpl.n	800f296 <VectorB8+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800f2ce:	782b      	ldrb	r3, [r5, #0]
 800f2d0:	4a0d      	ldr	r2, [pc, #52]	; (800f308 <VectorB8+0x98>)
 800f2d2:	2b04      	cmp	r3, #4
 800f2d4:	d1f2      	bne.n	800f2bc <VectorB8+0x4c>
 800f2d6:	6851      	ldr	r1, [r2, #4]
 800f2d8:	68cb      	ldr	r3, [r1, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d0ee      	beq.n	800f2bc <VectorB8+0x4c>
 800f2de:	480a      	ldr	r0, [pc, #40]	; (800f308 <VectorB8+0x98>)
 800f2e0:	4798      	blx	r3
 800f2e2:	e7eb      	b.n	800f2bc <VectorB8+0x4c>
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 800f2e4:	688b      	ldr	r3, [r1, #8]
 800f2e6:	b143      	cbz	r3, 800f2fa <VectorB8+0x8a>
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f2ec:	07a1      	lsls	r1, r4, #30
 800f2ee:	d5d2      	bpl.n	800f296 <VectorB8+0x26>
      _icu_isr_invoke_period_cb(icup);
 800f2f0:	782b      	ldrb	r3, [r5, #0]
 800f2f2:	4a05      	ldr	r2, [pc, #20]	; (800f308 <VectorB8+0x98>)
 800f2f4:	2b04      	cmp	r3, #4
 800f2f6:	d1e1      	bne.n	800f2bc <VectorB8+0x4c>
 800f2f8:	e7ed      	b.n	800f2d6 <VectorB8+0x66>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f2fa:	07a0      	lsls	r0, r4, #30
 800f2fc:	d4ec      	bmi.n	800f2d8 <VectorB8+0x68>
 800f2fe:	e7ca      	b.n	800f296 <VectorB8+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f300:	0762      	lsls	r2, r4, #29
 800f302:	d4e9      	bmi.n	800f2d8 <VectorB8+0x68>
 800f304:	e7c7      	b.n	800f296 <VectorB8+0x26>
 800f306:	bf00      	nop
 800f308:	2000128c 	.word	0x2000128c
 800f30c:	00000000 	.word	0x00000000

0800f310 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 800f310:	b510      	push	{r4, lr}
  ICUD3.tim = STM32_TIM3;
#endif

#if STM32_ICU_USE_TIM4
  /* Driver initialization.*/
  icuObjectInit(&ICUD4);
 800f312:	4c03      	ldr	r4, [pc, #12]	; (800f320 <icu_lld_init+0x10>)
 800f314:	4620      	mov	r0, r4
 800f316:	f7fe fa43 	bl	800d7a0 <icuObjectInit>
  ICUD4.tim = STM32_TIM4;
 800f31a:	4b02      	ldr	r3, [pc, #8]	; (800f324 <icu_lld_init+0x14>)
 800f31c:	60e3      	str	r3, [r4, #12]
 800f31e:	bd10      	pop	{r4, pc}
 800f320:	2000128c 	.word	0x2000128c
 800f324:	40000800 	.word	0x40000800
	...

0800f330 <icu_lld_start>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start(ICUDriver *icup) {
 800f330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 800f332:	7803      	ldrb	r3, [r0, #0]
 800f334:	2b01      	cmp	r3, #1
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_start(ICUDriver *icup) {
 800f336:	4604      	mov	r4, r0

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 800f338:	d03a      	beq.n	800f3b0 <icu_lld_start+0x80>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 800f33a:	68c3      	ldr	r3, [r0, #12]
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800f340:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 800f342:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 800f344:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f346:	6861      	ldr	r1, [r4, #4]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800f348:	68a2      	ldr	r2, [r4, #8]
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f34a:	6988      	ldr	r0, [r1, #24]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 800f34c:	7d0d      	ldrb	r5, [r1, #20]

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800f34e:	684e      	ldr	r6, [r1, #4]
 800f350:	fbb2 f2f6 	udiv	r2, r2, r6
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f354:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800f358:	3a01      	subs	r2, #1
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 800f35a:	2700      	movs	r7, #0
  psc = (icup->clock / icup->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;
 800f35c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 800f360:	611f      	str	r7, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800f362:	60d8      	str	r0, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
 800f364:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 800f366:	62de      	str	r6, [r3, #44]	; 0x2c
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800f368:	780a      	ldrb	r2, [r1, #0]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 800f36a:	b96d      	cbnz	r5, 800f388 <icu_lld_start+0x58>
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 800f36c:	f240 2001 	movw	r0, #513	; 0x201

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800f370:	2154      	movs	r1, #84	; 0x54

  if (icup->config->channel == ICU_CHANNEL_1) {
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 800f372:	6198      	str	r0, [r3, #24]

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800f374:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800f376:	b1c2      	cbz	r2, 800f3aa <icu_lld_start+0x7a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800f378:	2213      	movs	r2, #19
 800f37a:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 800f37c:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 800f380:	3334      	adds	r3, #52	; 0x34
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 800f382:	6122      	str	r2, [r4, #16]
    icup->pccrp = &icup->tim->CCR[0];
 800f384:	6163      	str	r3, [r4, #20]
 800f386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800f388:	f44f 7081 	mov.w	r0, #258	; 0x102

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800f38c:	2164      	movs	r1, #100	; 0x64
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800f38e:	6198      	str	r0, [r3, #24]

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800f390:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800f392:	b13a      	cbz	r2, 800f3a4 <icu_lld_start+0x74>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800f394:	2231      	movs	r2, #49	; 0x31
 800f396:	621a      	str	r2, [r3, #32]
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 800f398:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 800f39c:	3338      	adds	r3, #56	; 0x38
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 800f39e:	6122      	str	r2, [r4, #16]
    icup->pccrp = &icup->tim->CCR[1];
 800f3a0:	6163      	str	r3, [r4, #20]
 800f3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800f3a4:	2213      	movs	r2, #19
 800f3a6:	621a      	str	r2, [r3, #32]
 800f3a8:	e7f6      	b.n	800f398 <icu_lld_start+0x68>

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800f3aa:	2231      	movs	r2, #49	; 0x31
 800f3ac:	621a      	str	r2, [r3, #32]
 800f3ae:	e7e5      	b.n	800f37c <icu_lld_start+0x4c>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_ICU_TIM3_IRQ_PRIORITY);
      icup->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_ICU_USE_TIM4
    if (&ICUD4 == icup) {
 800f3b0:	4b0b      	ldr	r3, [pc, #44]	; (800f3e0 <icu_lld_start+0xb0>)
 800f3b2:	4298      	cmp	r0, r3
 800f3b4:	d001      	beq.n	800f3ba <icu_lld_start+0x8a>
 800f3b6:	68e3      	ldr	r3, [r4, #12]
 800f3b8:	e7c5      	b.n	800f346 <icu_lld_start+0x16>
      rccEnableTIM4(FALSE);
 800f3ba:	4b0a      	ldr	r3, [pc, #40]	; (800f3e4 <icu_lld_start+0xb4>)
 800f3bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f3be:	f042 0204 	orr.w	r2, r2, #4
 800f3c2:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM4();
 800f3c4:	6a1a      	ldr	r2, [r3, #32]
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	f042 0204 	orr.w	r2, r2, #4
 800f3cc:	621a      	str	r2, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_ICU_TIM4_IRQ_PRIORITY);
 800f3ce:	2107      	movs	r1, #7
    }
#endif
#if STM32_ICU_USE_TIM4
    if (&ICUD4 == icup) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 800f3d0:	6218      	str	r0, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_ICU_TIM4_IRQ_PRIORITY);
 800f3d2:	201e      	movs	r0, #30
 800f3d4:	f7fe fd5c 	bl	800de90 <nvicEnableVector>
      icup->clock = STM32_TIMCLK1;
 800f3d8:	4b03      	ldr	r3, [pc, #12]	; (800f3e8 <icu_lld_start+0xb8>)
 800f3da:	60a3      	str	r3, [r4, #8]
 800f3dc:	e7eb      	b.n	800f3b6 <icu_lld_start+0x86>
 800f3de:	bf00      	nop
 800f3e0:	2000128c 	.word	0x2000128c
 800f3e4:	40023800 	.word	0x40023800
 800f3e8:	0501bd00 	.word	0x0501bd00
 800f3ec:	00000000 	.word	0x00000000

0800f3f0 <icu_lld_start_capture>:
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800f3f0:	68c3      	ldr	r3, [r0, #12]
 800f3f2:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 800f3f4:	2000      	movs	r0, #0
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800f3f6:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->SR = 0;

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800f3fa:	2105      	movs	r1, #5
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800f3fc:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 800f3fe:	6118      	str	r0, [r3, #16]

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800f400:	6019      	str	r1, [r3, #0]
 800f402:	4770      	bx	lr
	...

0800f410 <icu_lld_enable_notifications>:
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 800f410:	68c2      	ldr	r2, [r0, #12]
 800f412:	68d3      	ldr	r3, [r2, #12]
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
 800f414:	b410      	push	{r4}
  uint32_t dier = icup->tim->DIER;

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 800f416:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800f41a:	d10c      	bne.n	800f436 <icu_lld_enable_notifications+0x26>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 800f41c:	6841      	ldr	r1, [r0, #4]
  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;
 800f41e:	6114      	str	r4, [r2, #16]

    if (icup->config->channel == ICU_CHANNEL_1) {
 800f420:	7d08      	ldrb	r0, [r1, #20]
 800f422:	b158      	cbz	r0, 800f43c <icu_lld_enable_notifications+0x2c>
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
 800f424:	6888      	ldr	r0, [r1, #8]
 800f426:	b178      	cbz	r0, 800f448 <icu_lld_enable_notifications+0x38>
        dier |= STM32_TIM_DIER_CC1IE;
 800f428:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 800f42c:	6909      	ldr	r1, [r1, #16]
 800f42e:	b109      	cbz	r1, 800f434 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 800f430:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 800f434:	60d3      	str	r3, [r2, #12]
  }
}
 800f436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f43a:	4770      	bx	lr
    if (icup->config->channel == ICU_CHANNEL_1) {
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 800f43c:	6888      	ldr	r0, [r1, #8]
 800f43e:	2800      	cmp	r0, #0
 800f440:	d1f2      	bne.n	800f428 <icu_lld_enable_notifications+0x18>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;
 800f442:	f043 0302 	orr.w	r3, r3, #2
 800f446:	e7f1      	b.n	800f42c <icu_lld_enable_notifications+0x1c>
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC2IE;
    }
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;
 800f448:	f043 0304 	orr.w	r3, r3, #4
 800f44c:	e7ee      	b.n	800f42c <icu_lld_enable_notifications+0x1c>
 800f44e:	bf00      	nop

0800f450 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800f450:	b508      	push	{r3, lr}
 800f452:	2320      	movs	r3, #32
 800f454:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 800f458:	f7fd fb3a 	bl	800cad0 <chSysTimerHandlerI>
 800f45c:	2300      	movs	r3, #0
 800f45e:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800f462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800f466:	f7fe b8db 	b.w	800d620 <_port_irq_epilogue>
 800f46a:	bf00      	nop
 800f46c:	0000      	movs	r0, r0
	...

0800f470 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f470:	4b05      	ldr	r3, [pc, #20]	; (800f488 <st_lld_init+0x18>)
 800f472:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 800f476:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f478:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f47a:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800f47c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f47e:	2108      	movs	r1, #8
 800f480:	200b      	movs	r0, #11
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f482:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f484:	f7fe bd3c 	b.w	800df00 <nvicSetSystemHandlerPriority>
 800f488:	e000e010 	.word	0xe000e010
 800f48c:	00000000 	.word	0x00000000

0800f490 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 800f490:	4a02      	ldr	r2, [pc, #8]	; (800f49c <notify3+0xc>)
 800f492:	68d3      	ldr	r3, [r2, #12]
 800f494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f498:	60d3      	str	r3, [r2, #12]
 800f49a:	4770      	bx	lr
 800f49c:	40004800 	.word	0x40004800

0800f4a0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 800f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800f4a2:	4e43      	ldr	r6, [pc, #268]	; (800f5b0 <VectorDC+0x110>)
 800f4a4:	f8d6 5254 	ldr.w	r5, [r6, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 800f4a8:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 800f4aa:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800f4ac:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 800f4ae:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800f4b0:	d44f      	bmi.n	800f552 <VectorDC+0xb2>
 800f4b2:	2320      	movs	r3, #32
 800f4b4:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f4b8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f4bc:	d108      	bne.n	800f4d0 <VectorDC+0x30>
 800f4be:	e029      	b.n	800f514 <VectorDC+0x74>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800f4c0:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800f4c2:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800f4c4:	d41d      	bmi.n	800f502 <VectorDC+0x62>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800f4c6:	682c      	ldr	r4, [r5, #0]
 800f4c8:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f4ca:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f4ce:	d021      	beq.n	800f514 <VectorDC+0x74>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800f4d0:	0723      	lsls	r3, r4, #28
 800f4d2:	d0f5      	beq.n	800f4c0 <VectorDC+0x20>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800f4d4:	f014 0f08 	tst.w	r4, #8
 800f4d8:	bf0c      	ite	eq
 800f4da:	2100      	moveq	r1, #0
 800f4dc:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800f4de:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800f4e0:	bf48      	it	mi
 800f4e2:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800f4e6:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 800f4e8:	bf48      	it	mi
 800f4ea:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800f4ee:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800f4f0:	bf48      	it	mi
 800f4f2:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800f4f6:	482f      	ldr	r0, [pc, #188]	; (800f5b4 <VectorDC+0x114>)
 800f4f8:	f7fd fec2 	bl	800d280 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800f4fc:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 800f4fe:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800f500:	d5e1      	bpl.n	800f4c6 <VectorDC+0x26>
      sdIncomingDataI(sdp, b);
 800f502:	b2c9      	uxtb	r1, r1
 800f504:	482a      	ldr	r0, [pc, #168]	; (800f5b0 <VectorDC+0x110>)
 800f506:	f7fe fa03 	bl	800d910 <sdIncomingDataI>
    sr = u->SR;
 800f50a:	682c      	ldr	r4, [r5, #0]
 800f50c:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f50e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f512:	d1dd      	bne.n	800f4d0 <VectorDC+0x30>
 800f514:	2300      	movs	r3, #0
 800f516:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800f51a:	0639      	lsls	r1, r7, #24
 800f51c:	d501      	bpl.n	800f522 <VectorDC+0x82>
 800f51e:	0622      	lsls	r2, r4, #24
 800f520:	d426      	bmi.n	800f570 <VectorDC+0xd0>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 800f522:	0663      	lsls	r3, r4, #25
 800f524:	d511      	bpl.n	800f54a <VectorDC+0xaa>
 800f526:	2320      	movs	r3, #32
 800f528:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800f52c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f52e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f530:	481f      	ldr	r0, [pc, #124]	; (800f5b0 <VectorDC+0x110>)
 800f532:	429a      	cmp	r2, r3
 800f534:	d029      	beq.n	800f58a <VectorDC+0xea>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f536:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800f53a:	403b      	ands	r3, r7
    u->SR = ~USART_SR_TC;
 800f53c:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f540:	60eb      	str	r3, [r5, #12]
 800f542:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800f544:	602a      	str	r2, [r5, #0]
 800f546:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 800f54a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 800f54e:	f7fe b867 	b.w	800d620 <_port_irq_epilogue>
 800f552:	2320      	movs	r3, #32
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f55c:	1d30      	adds	r0, r6, #4
 800f55e:	f7fd fe8f 	bl	800d280 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 800f562:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800f566:	602b      	str	r3, [r5, #0]
 800f568:	2300      	movs	r3, #0
 800f56a:	f383 8811 	msr	BASEPRI, r3
 800f56e:	e7a0      	b.n	800f4b2 <VectorDC+0x12>
 800f570:	2320      	movs	r3, #32
 800f572:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 800f576:	4810      	ldr	r0, [pc, #64]	; (800f5b8 <VectorDC+0x118>)
 800f578:	f7fd ff92 	bl	800d4a0 <chOQGetI>
    if (b < Q_OK) {
 800f57c:	2800      	cmp	r0, #0
 800f57e:	db0c      	blt.n	800f59a <VectorDC+0xfa>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 800f580:	6068      	str	r0, [r5, #4]
 800f582:	2300      	movs	r3, #0
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	e7cb      	b.n	800f522 <VectorDC+0x82>
 800f58a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d0d2      	beq.n	800f536 <VectorDC+0x96>
 800f590:	3004      	adds	r0, #4
 800f592:	2110      	movs	r1, #16
 800f594:	f7fd fe74 	bl	800d280 <chEvtBroadcastFlagsI>
 800f598:	e7cd      	b.n	800f536 <VectorDC+0x96>
 800f59a:	2108      	movs	r1, #8
 800f59c:	4805      	ldr	r0, [pc, #20]	; (800f5b4 <VectorDC+0x114>)
 800f59e:	f7fd fe6f 	bl	800d280 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800f5a2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f5a6:	403b      	ands	r3, r7
 800f5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5ac:	60eb      	str	r3, [r5, #12]
 800f5ae:	e7e8      	b.n	800f582 <VectorDC+0xe2>
 800f5b0:	200012a4 	.word	0x200012a4
 800f5b4:	200012a8 	.word	0x200012a8
 800f5b8:	200012d4 	.word	0x200012d4
 800f5bc:	00000000 	.word	0x00000000

0800f5c0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 800f5c0:	b510      	push	{r4, lr}
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800f5c2:	4c05      	ldr	r4, [pc, #20]	; (800f5d8 <sd_lld_init+0x18>)
 800f5c4:	4a05      	ldr	r2, [pc, #20]	; (800f5dc <sd_lld_init+0x1c>)
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	f7fe f969 	bl	800d8a0 <sdObjectInit>
  SD3.usart = USART3;
 800f5ce:	4b04      	ldr	r3, [pc, #16]	; (800f5e0 <sd_lld_init+0x20>)
 800f5d0:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 800f5d4:	bd10      	pop	{r4, pc}
 800f5d6:	bf00      	nop
 800f5d8:	200012a4 	.word	0x200012a4
 800f5dc:	0800f491 	.word	0x0800f491
 800f5e0:	40004800 	.word	0x40004800
	...

0800f5f0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800f5f0:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 800f5f2:	4c1f      	ldr	r4, [pc, #124]	; (800f670 <sd_lld_start+0x80>)

  if (sdp->state == SD_STOP) {
 800f5f4:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	bf18      	it	ne
 800f5fa:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 800f5fc:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800f5fe:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800f600:	d023      	beq.n	800f64a <sd_lld_start+0x5a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800f602:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800f606:	4a1b      	ldr	r2, [pc, #108]	; (800f674 <sd_lld_start+0x84>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d02b      	beq.n	800f664 <sd_lld_start+0x74>
 800f60c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f610:	4293      	cmp	r3, r2
 800f612:	d027      	beq.n	800f664 <sd_lld_start+0x74>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 800f614:	6821      	ldr	r1, [r4, #0]
 800f616:	4a18      	ldr	r2, [pc, #96]	; (800f678 <sd_lld_start+0x88>)
 800f618:	fbb2 f2f1 	udiv	r2, r2, r1
 800f61c:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f61e:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f620:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f622:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f624:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f628:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f62c:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f630:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f634:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f636:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f638:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800f63a:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f63c:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f63e:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800f640:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800f642:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800f644:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	bd38      	pop	{r3, r4, r5, pc}
      rccEnableUSART2(FALSE);
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 800f64a:	4b0c      	ldr	r3, [pc, #48]	; (800f67c <sd_lld_start+0x8c>)
 800f64c:	4298      	cmp	r0, r3
 800f64e:	d1d8      	bne.n	800f602 <sd_lld_start+0x12>
      rccEnableUSART3(FALSE);
 800f650:	4a0b      	ldr	r2, [pc, #44]	; (800f680 <sd_lld_start+0x90>)
 800f652:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f658:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 800f65a:	210c      	movs	r1, #12
 800f65c:	2027      	movs	r0, #39	; 0x27
 800f65e:	f7fe fc17 	bl	800de90 <nvicEnableVector>
 800f662:	e7ce      	b.n	800f602 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 800f664:	6821      	ldr	r1, [r4, #0]
 800f666:	4a07      	ldr	r2, [pc, #28]	; (800f684 <sd_lld_start+0x94>)
 800f668:	fbb2 f2f1 	udiv	r2, r2, r1
 800f66c:	609a      	str	r2, [r3, #8]
 800f66e:	e7d6      	b.n	800f61e <sd_lld_start+0x2e>
 800f670:	08012ba0 	.word	0x08012ba0
 800f674:	40011000 	.word	0x40011000
 800f678:	0280de80 	.word	0x0280de80
 800f67c:	200012a4 	.word	0x200012a4
 800f680:	40023800 	.word	0x40023800
 800f684:	0501bd00 	.word	0x0501bd00
	...

0800f690 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 800f690:	f7fe be96 	b.w	800e3c0 <stm32_clock_init>
	...

0800f6a0 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
	...

0800f6b0 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 800f6b0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800f6b2:	f100 070b 	add.w	r7, r0, #11
 800f6b6:	463c      	mov	r4, r7
 800f6b8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800f6ba:	fbb1 f6f2 	udiv	r6, r1, r2
 800f6be:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 800f6c2:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 800f6c6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800f6c8:	bfc8      	it	gt
 800f6ca:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 800f6d4:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 800f6d8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800f6da:	2d00      	cmp	r5, #0
 800f6dc:	d1ed      	bne.n	800f6ba <ch_ltoa+0xa>
 800f6de:	1b3a      	subs	r2, r7, r4
 800f6e0:	4402      	add	r2, r0
 800f6e2:	e001      	b.n	800f6e8 <ch_ltoa+0x38>
 800f6e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 800f6e8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800f6ec:	4290      	cmp	r0, r2
 800f6ee:	d1f9      	bne.n	800f6e4 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 800f6f0:	bcf0      	pop	{r4, r5, r6, r7}
 800f6f2:	4770      	bx	lr
	...

0800f700 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800f700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f704:	ed2d 8b02 	vpush	{d8}
 800f708:	b091      	sub	sp, #68	; 0x44
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800f70a:	2300      	movs	r3, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800f70c:	4606      	mov	r6, r0
 800f70e:	468b      	mov	fp, r1
 800f710:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800f712:	9300      	str	r3, [sp, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800f714:	f89b 1000 	ldrb.w	r1, [fp]
 800f718:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800f71c:	b179      	cbz	r1, 800f73e <chvprintf+0x3e>
      return n;
    if (c != '%') {
 800f71e:	2925      	cmp	r1, #37	; 0x25
 800f720:	d013      	beq.n	800f74a <chvprintf+0x4a>
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 800f722:	9c00      	ldr	r4, [sp, #0]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800f724:	6832      	ldr	r2, [r6, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800f726:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800f728:	6892      	ldr	r2, [r2, #8]
 800f72a:	4630      	mov	r0, r6
      n++;
 800f72c:	3401      	adds	r4, #1
 800f72e:	9400      	str	r4, [sp, #0]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800f730:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800f732:	f89b 1000 	ldrb.w	r1, [fp]
 800f736:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 800f73a:	2900      	cmp	r1, #0
 800f73c:	d1ef      	bne.n	800f71e <chvprintf+0x1e>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800f73e:	9800      	ldr	r0, [sp, #0]
 800f740:	b011      	add	sp, #68	; 0x44
 800f742:	ecbd 8b02 	vpop	{d8}
 800f746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800f74a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f74e:	2a2d      	cmp	r2, #45	; 0x2d
 800f750:	bf03      	ittte	eq
 800f752:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800f756:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 800f75a:	2101      	moveq	r1, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800f75c:	2100      	movne	r1, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 800f75e:	2a30      	cmp	r2, #48	; 0x30
 800f760:	bf08      	it	eq
 800f762:	785a      	ldrbeq	r2, [r3, #1]
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800f764:	9101      	str	r1, [sp, #4]
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 800f766:	bf06      	itte	eq
 800f768:	3301      	addeq	r3, #1
      filler = '0';
 800f76a:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800f76c:	2720      	movne	r7, #32
 800f76e:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 800f770:	2400      	movs	r4, #0
 800f772:	e008      	b.n	800f786 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 800f774:	f89a 3000 	ldrb.w	r3, [sl]
 800f778:	f10a 0a04 	add.w	sl, sl, #4
 800f77c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 800f780:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 800f784:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800f786:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800f78e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800f790:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800f794:	d9f2      	bls.n	800f77c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 800f796:	2a2a      	cmp	r2, #42	; 0x2a
 800f798:	d0ec      	beq.n	800f774 <chvprintf+0x74>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800f79a:	2a2e      	cmp	r2, #46	; 0x2e
 800f79c:	f04f 0800 	mov.w	r8, #0
 800f7a0:	d045      	beq.n	800f82e <chvprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800f7a2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800f7a6:	2b4c      	cmp	r3, #76	; 0x4c
 800f7a8:	d050      	beq.n	800f84c <chvprintf+0x14c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800f7aa:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 800f7ae:	2b34      	cmp	r3, #52	; 0x34
 800f7b0:	f200 81c9 	bhi.w	800fb46 <chvprintf+0x446>
 800f7b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f7b8:	01c701b7 	.word	0x01c701b7
 800f7bc:	01c701c7 	.word	0x01c701c7
 800f7c0:	01b701c7 	.word	0x01b701c7
 800f7c4:	01c701c7 	.word	0x01c701c7
 800f7c8:	01c701c7 	.word	0x01c701c7
 800f7cc:	01b501c7 	.word	0x01b501c7
 800f7d0:	01c701c7 	.word	0x01c701c7
 800f7d4:	01c701c7 	.word	0x01c701c7
 800f7d8:	010601c7 	.word	0x010601c7
 800f7dc:	01c701c7 	.word	0x01c701c7
 800f7e0:	01c7008d 	.word	0x01c7008d
 800f7e4:	01c701c7 	.word	0x01c701c7
 800f7e8:	01c701c7 	.word	0x01c701c7
 800f7ec:	01c701c7 	.word	0x01c701c7
 800f7f0:	01c701c7 	.word	0x01c701c7
 800f7f4:	01a701c7 	.word	0x01a701c7
 800f7f8:	01c701b7 	.word	0x01c701b7
 800f7fc:	01c70108 	.word	0x01c70108
 800f800:	01b701c7 	.word	0x01b701c7
 800f804:	01c701c7 	.word	0x01c701c7
 800f808:	01c701c7 	.word	0x01c701c7
 800f80c:	01b501c7 	.word	0x01b501c7
 800f810:	01c701c7 	.word	0x01c701c7
 800f814:	00db01c7 	.word	0x00db01c7
 800f818:	010601c7 	.word	0x010601c7
 800f81c:	01c701c7 	.word	0x01c701c7
 800f820:	008d      	.short	0x008d
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800f822:	f89a 3000 	ldrb.w	r3, [sl]
 800f826:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 800f82a:	eb03 0841 	add.w	r8, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800f82e:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 800f832:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800f83a:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800f83e:	d9f4      	bls.n	800f82a <chvprintf+0x12a>
          c -= '0';
        else if (c == '*')
 800f840:	2a2a      	cmp	r2, #42	; 0x2a
 800f842:	d0ee      	beq.n	800f822 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800f844:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800f848:	2b4c      	cmp	r3, #76	; 0x4c
 800f84a:	d1ae      	bne.n	800f7aa <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 800f84c:	f89b 1000 	ldrb.w	r1, [fp]
 800f850:	2900      	cmp	r1, #0
 800f852:	f000 8178 	beq.w	800fb46 <chvprintf+0x446>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800f856:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 800f85a:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800f85e:	2b34      	cmp	r3, #52	; 0x34
 800f860:	f200 8170 	bhi.w	800fb44 <chvprintf+0x444>
 800f864:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f868:	016e015f 	.word	0x016e015f
 800f86c:	016e016e 	.word	0x016e016e
 800f870:	015f016e 	.word	0x015f016e
 800f874:	016e016e 	.word	0x016e016e
 800f878:	016e016e 	.word	0x016e016e
 800f87c:	015d016e 	.word	0x015d016e
 800f880:	016e016e 	.word	0x016e016e
 800f884:	016e016e 	.word	0x016e016e
 800f888:	00ae016e 	.word	0x00ae016e
 800f88c:	016e016e 	.word	0x016e016e
 800f890:	016e0035 	.word	0x016e0035
 800f894:	016e016e 	.word	0x016e016e
 800f898:	016e016e 	.word	0x016e016e
 800f89c:	016e016e 	.word	0x016e016e
 800f8a0:	016e016e 	.word	0x016e016e
 800f8a4:	014f016e 	.word	0x014f016e
 800f8a8:	016e015f 	.word	0x016e015f
 800f8ac:	016e00b0 	.word	0x016e00b0
 800f8b0:	015f016e 	.word	0x015f016e
 800f8b4:	016e016e 	.word	0x016e016e
 800f8b8:	016e016e 	.word	0x016e016e
 800f8bc:	015d016e 	.word	0x015d016e
 800f8c0:	016e016e 	.word	0x016e016e
 800f8c4:	0083016e 	.word	0x0083016e
 800f8c8:	00ae016e 	.word	0x00ae016e
 800f8cc:	016e016e 	.word	0x016e016e
 800f8d0:	0035      	.short	0x0035
 800f8d2:	2210      	movs	r2, #16
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 800f8d4:	ad0a      	add	r5, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800f8d6:	f8da 1000 	ldr.w	r1, [sl]
      p = ch_ltoa(p, l, c);
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f7ff fee8 	bl	800f6b0 <ch_ltoa>
 800f8e0:	1b40      	subs	r0, r0, r5
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800f8e2:	f10a 0a04 	add.w	sl, sl, #4
 800f8e6:	f100 38ff 	add.w	r8, r0, #4294967295
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800f8ea:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800f8ec:	1a24      	subs	r4, r4, r0
 800f8ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d162      	bne.n	800f9bc <chvprintf+0x2bc>
      width = -width;
 800f8f6:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 800f8fa:	f1b9 0f00 	cmp.w	r9, #0
 800f8fe:	f000 812b 	beq.w	800fb58 <chvprintf+0x458>
      if (*s == '-' && filler == '0') {
 800f902:	7829      	ldrb	r1, [r5, #0]
 800f904:	292d      	cmp	r1, #45	; 0x2d
 800f906:	f000 813a 	beq.w	800fb7e <chvprintf+0x47e>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 800f90a:	6833      	ldr	r3, [r6, #0]
 800f90c:	4639      	mov	r1, r7
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	4630      	mov	r0, r6
 800f912:	4798      	blx	r3
        n++;
      } while (++width != 0);
 800f914:	f119 0901 	adds.w	r9, r9, #1
 800f918:	d1f7      	bne.n	800f90a <chvprintf+0x20a>
 800f91a:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 800f91c:	f1b8 0f00 	cmp.w	r8, #0
 800f920:	4423      	add	r3, r4
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	f6ff aef6 	blt.w	800f714 <chvprintf+0x14>
 800f928:	464c      	mov	r4, r9
 800f92a:	46c1      	mov	r9, r8
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800f92c:	6833      	ldr	r3, [r6, #0]
 800f92e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f932:	689b      	ldr	r3, [r3, #8]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800f934:	f109 39ff 	add.w	r9, r9, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800f938:	4630      	mov	r0, r6
 800f93a:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800f93c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800f940:	d1f4      	bne.n	800f92c <chvprintf+0x22c>
 800f942:	9b00      	ldr	r3, [sp, #0]
 800f944:	3301      	adds	r3, #1
 800f946:	f1b8 0f00 	cmp.w	r8, #0
 800f94a:	bfa8      	it	ge
 800f94c:	4443      	addge	r3, r8
 800f94e:	9300      	str	r3, [sp, #0]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800f950:	2c00      	cmp	r4, #0
 800f952:	f43f aedf 	beq.w	800f714 <chvprintf+0x14>
 800f956:	4625      	mov	r5, r4
      chSequentialStreamPut(chp, (uint8_t)filler);
 800f958:	6833      	ldr	r3, [r6, #0]
 800f95a:	4639      	mov	r1, r7
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	4630      	mov	r0, r6
 800f960:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800f962:	3d01      	subs	r5, #1
 800f964:	d1f8      	bne.n	800f958 <chvprintf+0x258>
 800f966:	9b00      	ldr	r3, [sp, #0]
 800f968:	4423      	add	r3, r4
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	e6d2      	b.n	800f714 <chvprintf+0x14>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800f96e:	f8da 5000 	ldr.w	r5, [sl]
        s = "(null)";
 800f972:	4b9b      	ldr	r3, [pc, #620]	; (800fbe0 <chvprintf+0x4e0>)
 800f974:	2d00      	cmp	r5, #0
 800f976:	bf08      	it	eq
 800f978:	461d      	moveq	r5, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800f97a:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800f97e:	782b      	ldrb	r3, [r5, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 800f980:	f1b8 0f00 	cmp.w	r8, #0
 800f984:	f000 80ee 	beq.w	800fb64 <chvprintf+0x464>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f000 80f0 	beq.w	800fb6e <chvprintf+0x46e>
 800f98e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f992:	4628      	mov	r0, r5
 800f994:	e002      	b.n	800f99c <chvprintf+0x29c>
 800f996:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f99a:	d005      	beq.n	800f9a8 <chvprintf+0x2a8>
 800f99c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f9a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1f6      	bne.n	800f996 <chvprintf+0x296>
 800f9a8:	1b40      	subs	r0, r0, r5
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800f9aa:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800f9ac:	1a24      	subs	r4, r4, r0
 800f9ae:	f100 38ff 	add.w	r8, r0, #4294967295
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800f9b2:	2720      	movs	r7, #32
 800f9b4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d09c      	beq.n	800f8f6 <chvprintf+0x1f6>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800f9bc:	f1b8 0f00 	cmp.w	r8, #0
 800f9c0:	dab3      	bge.n	800f92a <chvprintf+0x22a>
 800f9c2:	e7c5      	b.n	800f950 <chvprintf+0x250>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 800f9c4:	220a      	movs	r2, #10
 800f9c6:	e785      	b.n	800f8d4 <chvprintf+0x1d4>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 800f9c8:	f10a 0a07 	add.w	sl, sl, #7
 800f9cc:	f02a 0a07 	bic.w	sl, sl, #7
 800f9d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800f9d4:	f7fc ffac 	bl	800c930 <__aeabi_d2f>
 800f9d8:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 800f9dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 800f9e4:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 800f9e8:	f100 80e8 	bmi.w	800fbbc <chvprintf+0x4bc>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800f9ec:	ad0a      	add	r5, sp, #40	; 0x28
 800f9ee:	462a      	mov	r2, r5
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800f9f0:	ee18 0a10 	vmov	r0, s16
 800f9f4:	9204      	str	r2, [sp, #16]
 800f9f6:	f7fc fd07 	bl	800c408 <__aeabi_f2d>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800f9fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9fe:	f1b8 0f08 	cmp.w	r8, #8
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800fa02:	e9cd 0102 	strd	r0, r1, [sp, #8]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800fa06:	9a04      	ldr	r2, [sp, #16]
 800fa08:	f200 80c7 	bhi.w	800fb9a <chvprintf+0x49a>
 800fa0c:	4b75      	ldr	r3, [pc, #468]	; (800fbe4 <chvprintf+0x4e4>)
 800fa0e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800fa12:	4640      	mov	r0, r8
 800fa14:	f7fc fcd6 	bl	800c3c4 <__aeabi_ui2d>
 800fa18:	4b73      	ldr	r3, [pc, #460]	; (800fbe8 <chvprintf+0x4e8>)
 800fa1a:	9a04      	ldr	r2, [sp, #16]
 800fa1c:	fba3 3808 	umull	r3, r8, r3, r8
 800fa20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fa24:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800fa28:	9309      	str	r3, [sp, #36]	; 0x24
 800fa2a:	4698      	mov	r8, r3
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 800fa2c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800fa30:	f102 030b 	add.w	r3, r2, #11
 800fa34:	ee17 1a90 	vmov	r1, s15
                                         long divisor) {
  int i;
  char *q;
  long l, ll;

  l = num;
 800fa38:	ee17 ea90 	vmov	lr, s15

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 800fa3c:	edcd 7a04 	vstr	s15, [sp, #16]
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800fa40:	9305      	str	r3, [sp, #20]
 800fa42:	4618      	mov	r0, r3
 800fa44:	9208      	str	r2, [sp, #32]
  do {
    i = (int)(l % radix);
 800fa46:	4b68      	ldr	r3, [pc, #416]	; (800fbe8 <chvprintf+0x4e8>)
 800fa48:	fba3 230e 	umull	r2, r3, r3, lr
 800fa4c:	08db      	lsrs	r3, r3, #3
 800fa4e:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800fa52:	4a65      	ldr	r2, [pc, #404]	; (800fbe8 <chvprintf+0x4e8>)
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800fa54:	469c      	mov	ip, r3
 800fa56:	ebae 0349 	sub.w	r3, lr, r9, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800fa5a:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 800fa5c:	fba2 2101 	umull	r2, r1, r2, r1
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800fa60:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 800fa62:	08c9      	lsrs	r1, r1, #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800fa64:	f800 3d01 	strb.w	r3, [r0, #-1]!
    l /= radix;
 800fa68:	46e6      	mov	lr, ip
  } while ((ll /= radix) != 0);
 800fa6a:	d1ec      	bne.n	800fa46 <chvprintf+0x346>
 800fa6c:	9905      	ldr	r1, [sp, #20]
 800fa6e:	9a08      	ldr	r2, [sp, #32]
 800fa70:	ebc0 0901 	rsb	r9, r0, r1
 800fa74:	4491      	add	r9, r2
 800fa76:	e001      	b.n	800fa7c <chvprintf+0x37c>
 800fa78:	f810 3f01 	ldrb.w	r3, [r0, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 800fa7c:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 800fa80:	454a      	cmp	r2, r9
 800fa82:	d1f9      	bne.n	800fa78 <chvprintf+0x378>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800fa84:	464a      	mov	r2, r9
 800fa86:	232e      	movs	r3, #46	; 0x2e
 800fa88:	f802 3b0c 	strb.w	r3, [r2], #12
  l = (long)((num - l) * precision);
 800fa8c:	9804      	ldr	r0, [sp, #16]
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800fa8e:	9204      	str	r2, [sp, #16]
  l = (long)((num - l) * precision);
 800fa90:	f7fc fca8 	bl	800c3e4 <__aeabi_i2d>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa9c:	f7fc fb54 	bl	800c148 <__aeabi_dsub>
 800faa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800faa4:	f7fc fd04 	bl	800c4b0 <__aeabi_dmul>
 800faa8:	f7fc ff1a 	bl	800c8e0 <__aeabi_d2iz>
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 800faac:	9909      	ldr	r1, [sp, #36]	; 0x24
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800faae:	9a04      	ldr	r2, [sp, #16]
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 800fab0:	2900      	cmp	r1, #0
 800fab2:	bf08      	it	eq
 800fab4:	4680      	moveq	r8, r0
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800fab6:	f109 0e01 	add.w	lr, r9, #1
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800faba:	4b4b      	ldr	r3, [pc, #300]	; (800fbe8 <chvprintf+0x4e8>)
 800fabc:	fba3 1300 	umull	r1, r3, r3, r0
 800fac0:	08db      	lsrs	r3, r3, #3
 800fac2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800fac6:	4619      	mov	r1, r3
 800fac8:	eba0 034c 	sub.w	r3, r0, ip, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800facc:	4846      	ldr	r0, [pc, #280]	; (800fbe8 <chvprintf+0x4e8>)
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800face:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 800fad0:	fba0 0808 	umull	r0, r8, r0, r8
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800fad4:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 800fad6:	ea5f 08d8 	movs.w	r8, r8, lsr #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800fada:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 800fade:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 800fae0:	d1eb      	bne.n	800faba <chvprintf+0x3ba>
 800fae2:	9904      	ldr	r1, [sp, #16]
 800fae4:	1a89      	subs	r1, r1, r2
 800fae6:	1c48      	adds	r0, r1, #1
 800fae8:	4481      	add	r9, r0

  i = (int)(p + MAX_FILLER - q);
 800faea:	4670      	mov	r0, lr
 800faec:	e001      	b.n	800faf2 <chvprintf+0x3f2>
 800faee:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  do
    *p++ = *q++;
 800faf2:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800faf6:	4581      	cmp	r9, r0
 800faf8:	d1f9      	bne.n	800faee <chvprintf+0x3ee>
 800fafa:	eb0e 0001 	add.w	r0, lr, r1
 800fafe:	1b40      	subs	r0, r0, r5
 800fb00:	f100 38ff 	add.w	r8, r0, #4294967295
 800fb04:	e6f1      	b.n	800f8ea <chvprintf+0x1ea>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800fb06:	ad10      	add	r5, sp, #64	; 0x40
 800fb08:	f8da 3000 	ldr.w	r3, [sl]
 800fb0c:	f805 3d18 	strb.w	r3, [r5, #-24]!
 800fb10:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800fb14:	1b40      	subs	r0, r0, r5
 800fb16:	f10a 0a04 	add.w	sl, sl, #4
 800fb1a:	f100 38ff 	add.w	r8, r0, #4294967295
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 800fb1e:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
      break;
 800fb20:	e6e3      	b.n	800f8ea <chvprintf+0x1ea>
 800fb22:	2208      	movs	r2, #8
 800fb24:	e6d6      	b.n	800f8d4 <chvprintf+0x1d4>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800fb26:	f8da 1000 	ldr.w	r1, [sl]
      if (l < 0) {
 800fb2a:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800fb2c:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 800fb30:	db3c      	blt.n	800fbac <chvprintf+0x4ac>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800fb32:	ad0a      	add	r5, sp, #40	; 0x28
 800fb34:	4628      	mov	r0, r5
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 800fb36:	220a      	movs	r2, #10
 800fb38:	f7ff fdba 	bl	800f6b0 <ch_ltoa>
 800fb3c:	1b40      	subs	r0, r0, r5
 800fb3e:	f100 38ff 	add.w	r8, r0, #4294967295
      break;
 800fb42:	e6d2      	b.n	800f8ea <chvprintf+0x1ea>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800fb44:	460a      	mov	r2, r1
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800fb46:	ad10      	add	r5, sp, #64	; 0x40
 800fb48:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800fb4c:	f805 2d18 	strb.w	r2, [r5, #-24]!
 800fb50:	1b40      	subs	r0, r0, r5
 800fb52:	f100 38ff 	add.w	r8, r0, #4294967295
      break;
 800fb56:	e6c8      	b.n	800f8ea <chvprintf+0x1ea>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800fb58:	f1b8 0f00 	cmp.w	r8, #0
 800fb5c:	f6ff adda 	blt.w	800f714 <chvprintf+0x14>
 800fb60:	464c      	mov	r4, r9
 800fb62:	e6e2      	b.n	800f92a <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800fb64:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f47f af12 	bne.w	800f992 <chvprintf+0x292>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800fb74:	bb5b      	cbnz	r3, 800fbce <chvprintf+0x4ce>
 800fb76:	f04f 38ff 	mov.w	r8, #4294967295
 800fb7a:	2720      	movs	r7, #32
 800fb7c:	e6bb      	b.n	800f8f6 <chvprintf+0x1f6>
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800fb7e:	2f30      	cmp	r7, #48	; 0x30
 800fb80:	f47f aec3 	bne.w	800f90a <chvprintf+0x20a>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800fb84:	6833      	ldr	r3, [r6, #0]
 800fb86:	4630      	mov	r0, r6
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	4798      	blx	r3
        n++;
 800fb8c:	9b00      	ldr	r3, [sp, #0]
 800fb8e:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800fb90:	3501      	adds	r5, #1
        n++;
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb98:	e6b7      	b.n	800f90a <chvprintf+0x20a>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800fb9a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800fbd8 <chvprintf+0x4d8>
 800fb9e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800fbec <chvprintf+0x4ec>
 800fba2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800fba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fbaa:	e73f      	b.n	800fa2c <chvprintf+0x32c>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800fbac:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800fbae:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800fbb0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800fbb4:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800fbb8:	ad0a      	add	r5, sp, #40	; 0x28
 800fbba:	e7bc      	b.n	800fb36 <chvprintf+0x436>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800fbbc:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 800fbbe:	eeb1 8a48 	vneg.f32	s16, s16
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800fbc2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800fbc6:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 800fbca:	ad0a      	add	r5, sp, #40	; 0x28
 800fbcc:	e710      	b.n	800f9f0 <chvprintf+0x2f0>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800fbce:	2720      	movs	r7, #32
 800fbd0:	e6be      	b.n	800f950 <chvprintf+0x250>
 800fbd2:	bf00      	nop
 800fbd4:	f3af 8000 	nop.w
 800fbd8:	00000000 	.word	0x00000000
 800fbdc:	41cdcd65 	.word	0x41cdcd65
 800fbe0:	08012cb0 	.word	0x08012cb0
 800fbe4:	08012cc0 	.word	0x08012cc0
 800fbe8:	cccccccd 	.word	0xcccccccd
 800fbec:	05f5e100 	.word	0x05f5e100

0800fbf0 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800fbf0:	2101      	movs	r1, #1
		OPMODE_I2C,
		100000,
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
 800fbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800fbf6:	4608      	mov	r0, r1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fbf8:	4e5a      	ldr	r6, [pc, #360]	; (800fd64 <hw_init_gpio+0x174>)

	palClearPad(GPIOB, 6);
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fbfa:	4c5b      	ldr	r4, [pc, #364]	; (800fd68 <hw_init_gpio+0x178>)

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800fbfc:	4d5b      	ldr	r5, [pc, #364]	; (800fd6c <hw_init_gpio+0x17c>)
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800fbfe:	f001 fbff 	bl	8011400 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800fc02:	2101      	movs	r1, #1
 800fc04:	2002      	movs	r0, #2

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
//	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 800fc06:	2740      	movs	r7, #64	; 0x40
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800fc08:	f001 fbfa 	bl	8011400 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800fc0c:	2101      	movs	r1, #1
 800fc0e:	2004      	movs	r0, #4
 800fc10:	f001 fbf6 	bl	8011400 <RCC_AHB1PeriphClockCmd>

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fc14:	4630      	mov	r0, r6
 800fc16:	4639      	mov	r1, r7
 800fc18:	2219      	movs	r2, #25
 800fc1a:	f7fe fe89 	bl	800e930 <_pal_lld_setgroupmode>

	palClearPad(GPIOB, 6);
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fc1e:	4639      	mov	r1, r7
 800fc20:	4620      	mov	r0, r4

	// LEDs
	palSetPadMode(GPIOB, 6,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
//	palSetPadMode(GPIOB, 7,	PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);

	palClearPad(GPIOB, 6);
 800fc22:	8377      	strh	r7, [r6, #26]
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fc24:	2219      	movs	r2, #25
 800fc26:	f7fe fe83 	bl	800e930 <_pal_lld_setgroupmode>
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 800fc2a:	f44f 7880 	mov.w	r8, #256	; 0x100
	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fc2e:	4620      	mov	r0, r4
	palClearPad(GPIOB, 6);
//	palClearPad(GPIOB, 7);

	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 6,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();
 800fc30:	8367      	strh	r7, [r4, #26]

	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fc32:	2219      	movs	r2, #25
 800fc34:	2180      	movs	r1, #128	; 0x80
 800fc36:	f7fe fe7b 	bl	800e930 <_pal_lld_setgroupmode>
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	4641      	mov	r1, r8
 800fc3e:	2219      	movs	r2, #25
 800fc40:	f7fe fe76 	bl	800e930 <_pal_lld_setgroupmode>
	GAIN_FULLDN();

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 800fc44:	4630      	mov	r0, r6
	// GPIOC (DCCAL)
	palSetPadMode(GPIOC, 7,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	
	// GPIOC (GAIN)
	palSetPadMode(GPIOC, 8,PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	GAIN_FULLDN();
 800fc46:	f8a4 801a 	strh.w	r8, [r4, #26]

	// Fault pin
	palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP);
 800fc4a:	2220      	movs	r2, #32
 800fc4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fc50:	f7fe fe6e 	bl	800e930 <_pal_lld_setgroupmode>

	//PWM ( GPIOA Configuration: Channel 1 to 3 as alternate function push-pull)
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800fc54:	4641      	mov	r1, r8
 800fc56:	4628      	mov	r0, r5
 800fc58:	229a      	movs	r2, #154	; 0x9a
 800fc5a:	f7fe fe69 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |	PAL_STM32_PUDR_FLOATING);
 800fc5e:	4628      	mov	r0, r5
 800fc60:	229a      	movs	r2, #154	; 0x9a
 800fc62:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc66:	f7fe fe63 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	229a      	movs	r2, #154	; 0x9a
 800fc6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc72:	f7fe fe5d 	bl	800e930 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800fc76:	4630      	mov	r0, r6
 800fc78:	229a      	movs	r2, #154	; 0x9a
 800fc7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fc7e:	f7fe fe57 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800fc82:	4630      	mov	r0, r6
 800fc84:	229a      	movs	r2, #154	; 0x9a
 800fc86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fc8a:	f7fe fe51 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |PAL_STM32_OSPEED_HIGHEST |PAL_STM32_PUDR_FLOATING);
 800fc8e:	4630      	mov	r0, r6
 800fc90:	229a      	movs	r2, #154	; 0x9a
 800fc92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc96:	f7fe fe4b 	bl	800e930 <_pal_lld_setgroupmode>

	// DHall sensors
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	2220      	movs	r2, #32
 800fc9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fca2:	f7fe fe45 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
 800fca6:	4620      	mov	r0, r4
 800fca8:	2220      	movs	r2, #32
 800fcaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fcae:	f7fe fe3f 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	2220      	movs	r2, #32
 800fcb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fcba:	f7fe fe39 	bl	800e930 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);//sen3
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	2203      	movs	r2, #3
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	f7fe fe34 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);//sen2
 800fcc8:	4628      	mov	r0, r5
 800fcca:	2203      	movs	r2, #3
 800fccc:	2102      	movs	r1, #2
 800fcce:	f7fe fe2f 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);//sen1
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	2203      	movs	r2, #3
 800fcd6:	2104      	movs	r1, #4
 800fcd8:	f7fe fe2a 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);//INV_TEMP
 800fcdc:	4628      	mov	r0, r5
 800fcde:	2203      	movs	r2, #3
 800fce0:	2108      	movs	r1, #8
 800fce2:	f7fe fe25 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 800fce6:	4628      	mov	r0, r5
 800fce8:	2203      	movs	r2, #3
 800fcea:	2110      	movs	r1, #16
 800fcec:	f7fe fe20 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	2203      	movs	r2, #3
 800fcf4:	2120      	movs	r1, #32
 800fcf6:	f7fe fe1b 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 800fcfa:	4639      	mov	r1, r7
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	2203      	movs	r2, #3
 800fd00:	f7fe fe16 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_INPUT_ANALOG);
 800fd04:	4628      	mov	r0, r5
 800fd06:	2203      	movs	r2, #3
 800fd08:	2180      	movs	r1, #128	; 0x80
 800fd0a:	f7fe fe11 	bl	800e930 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);//BR_SO1
 800fd0e:	4630      	mov	r0, r6
 800fd10:	2203      	movs	r2, #3
 800fd12:	2101      	movs	r1, #1
 800fd14:	f7fe fe0c 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);//BR_SO2
 800fd18:	4630      	mov	r0, r6
 800fd1a:	2203      	movs	r2, #3
 800fd1c:	2102      	movs	r1, #2
 800fd1e:	f7fe fe07 	bl	800e930 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
 800fd22:	4620      	mov	r0, r4
 800fd24:	2203      	movs	r2, #3
 800fd26:	2101      	movs	r1, #1
 800fd28:	f7fe fe02 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	2203      	movs	r2, #3
 800fd30:	2102      	movs	r1, #2
 800fd32:	f7fe fdfd 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
 800fd36:	4620      	mov	r0, r4
 800fd38:	2203      	movs	r2, #3
 800fd3a:	2104      	movs	r1, #4
 800fd3c:	f7fe fdf8 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 800fd40:	4620      	mov	r0, r4
 800fd42:	2203      	movs	r2, #3
 800fd44:	2108      	movs	r1, #8
 800fd46:	f7fe fdf3 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	2203      	movs	r2, #3
 800fd4e:	2110      	movs	r1, #16
 800fd50:	f7fe fdee 	bl	800e930 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 800fd54:	4620      	mov	r0, r4
 800fd56:	2203      	movs	r2, #3
 800fd58:	2120      	movs	r1, #32

}
 800fd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);//MOTOR_TEMP
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);//VIN
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
	palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);//ADC_EXT
 800fd5e:	f7fe bde7 	b.w	800e930 <_pal_lld_setgroupmode>
 800fd62:	bf00      	nop
 800fd64:	40020400 	.word	0x40020400
 800fd68:	40020800 	.word	0x40020800
 800fd6c:	40020000 	.word	0x40020000

0800fd70 <hw_setup_adc_channels>:

}

void hw_setup_adc_channels(void) {
 800fd70:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 800fd72:	4e26      	ldr	r6, [pc, #152]	; (800fe0c <hw_setup_adc_channels+0x9c>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 800fd74:	4d26      	ldr	r5, [pc, #152]	; (800fe10 <hw_setup_adc_channels+0xa0>)
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 800fd76:	4c27      	ldr	r4, [pc, #156]	; (800fe14 <hw_setup_adc_channels+0xa4>)

}

void hw_setup_adc_channels(void) {
	// ADC1 regular channels 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 800fd78:	2301      	movs	r3, #1
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	2100      	movs	r1, #0
 800fd80:	f001 fa66 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 800fd84:	4630      	mov	r0, r6
 800fd86:	2301      	movs	r3, #1
 800fd88:	2202      	movs	r2, #2
 800fd8a:	2108      	movs	r1, #8
 800fd8c:	f001 fa60 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 3, ADC_SampleTime_15Cycles);
 800fd90:	4630      	mov	r0, r6
 800fd92:	2301      	movs	r3, #1
 800fd94:	2203      	movs	r2, #3
 800fd96:	210a      	movs	r1, #10
 800fd98:	f001 fa5a 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 800fd9c:	2204      	movs	r2, #4
 800fd9e:	4630      	mov	r0, r6
 800fda0:	4611      	mov	r1, r2
 800fda2:	2301      	movs	r3, #1
 800fda4:	f001 fa54 	bl	8011250 <ADC_RegularChannelConfig>

	// ADC2 regular channels 
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 800fda8:	2301      	movs	r3, #1
 800fdaa:	4628      	mov	r0, r5
 800fdac:	461a      	mov	r2, r3
 800fdae:	4619      	mov	r1, r3
 800fdb0:	f001 fa4e 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	2202      	movs	r2, #2
 800fdba:	2109      	movs	r1, #9
 800fdbc:	f001 fa48 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_15Cycles);
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	2203      	movs	r2, #3
 800fdc6:	210b      	movs	r1, #11
 800fdc8:	f001 fa42 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_15, 4, ADC_SampleTime_15Cycles);
 800fdcc:	4628      	mov	r0, r5
 800fdce:	2301      	movs	r3, #1
 800fdd0:	2204      	movs	r2, #4
 800fdd2:	210f      	movs	r1, #15
 800fdd4:	f001 fa3c 	bl	8011250 <ADC_RegularChannelConfig>

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 800fdd8:	2301      	movs	r3, #1
 800fdda:	4620      	mov	r0, r4
 800fddc:	461a      	mov	r2, r3
 800fdde:	2102      	movs	r1, #2
 800fde0:	f001 fa36 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 800fde4:	4620      	mov	r0, r4
 800fde6:	2301      	movs	r3, #1
 800fde8:	2202      	movs	r2, #2
 800fdea:	2103      	movs	r1, #3
 800fdec:	f001 fa30 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	2203      	movs	r2, #3
 800fdf6:	210c      	movs	r1, #12
 800fdf8:	f001 fa2a 	bl	8011250 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	2301      	movs	r3, #1
 800fe00:	2204      	movs	r2, #4
 800fe02:	2105      	movs	r1, #5

	// Injected channels
//==	ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
//==	ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
}
 800fe04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// ADC3 regular channels 
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 800fe08:	f001 ba22 	b.w	8011250 <ADC_RegularChannelConfig>
 800fe0c:	40012000 	.word	0x40012000
 800fe10:	40012100 	.word	0x40012100
 800fe14:	40012200 	.word	0x40012200
	...

0800fe20 <hw_stop_i2c>:
	}

	i2cReleaseBus(&HW_I2C_DEV);
}

void hw_stop_i2c(void) {
 800fe20:	b510      	push	{r4, lr}
	i2cAcquireBus(&HW_I2C_DEV);

	if (i2c_running) {
 800fe22:	4c0e      	ldr	r4, [pc, #56]	; (800fe5c <hw_stop_i2c+0x3c>)

	i2cReleaseBus(&HW_I2C_DEV);
}

void hw_stop_i2c(void) {
	i2cAcquireBus(&HW_I2C_DEV);
 800fe24:	480e      	ldr	r0, [pc, #56]	; (800fe60 <hw_stop_i2c+0x40>)
 800fe26:	f7fd fca3 	bl	800d770 <i2cAcquireBus>

	if (i2c_running) {
 800fe2a:	7823      	ldrb	r3, [r4, #0]
 800fe2c:	b183      	cbz	r3, 800fe50 <hw_stop_i2c+0x30>
		palSetPadMode(HW_I2C_SCL_PORT, HW_I2C_SCL_PIN, PAL_MODE_INPUT);
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fe34:	480b      	ldr	r0, [pc, #44]	; (800fe64 <hw_stop_i2c+0x44>)
 800fe36:	f7fe fd7b 	bl	800e930 <_pal_lld_setgroupmode>
		palSetPadMode(HW_I2C_SDA_PORT, HW_I2C_SDA_PIN, PAL_MODE_INPUT);
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fe40:	4808      	ldr	r0, [pc, #32]	; (800fe64 <hw_stop_i2c+0x44>)
 800fe42:	f7fe fd75 	bl	800e930 <_pal_lld_setgroupmode>

		i2cStop(&HW_I2C_DEV);
 800fe46:	4806      	ldr	r0, [pc, #24]	; (800fe60 <hw_stop_i2c+0x40>)
 800fe48:	f7fd fc82 	bl	800d750 <i2cStop>
		i2c_running = false;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	7023      	strb	r3, [r4, #0]

	}

	i2cReleaseBus(&HW_I2C_DEV);
 800fe50:	4803      	ldr	r0, [pc, #12]	; (800fe60 <hw_stop_i2c+0x40>)
}
 800fe52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		i2cStop(&HW_I2C_DEV);
		i2c_running = false;

	}

	i2cReleaseBus(&HW_I2C_DEV);
 800fe56:	f7fd bc93 	b.w	800d780 <i2cReleaseBus>
 800fe5a:	bf00      	nop
 800fe5c:	200014fc 	.word	0x200014fc
 800fe60:	20000fa4 	.word	0x20000fa4
 800fe64:	40020400 	.word	0x40020400
	...

0800fe70 <periodic_thread>:
 *
 */

static THD_WORKING_AREA(periodic_thread_wa, 128);
static THD_FUNCTION(periodic_thread, arg) 
{
 800fe70:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800fe72:	4b09      	ldr	r3, [pc, #36]	; (800fe98 <periodic_thread+0x28>)
 800fe74:	4a09      	ldr	r2, [pc, #36]	; (800fe9c <periodic_thread+0x2c>)
 800fe76:	699b      	ldr	r3, [r3, #24]

	//Uart3_printf(&SD3, (uint8_t *)"periodic_thread\r\n");

	for(;;)
	{
		LED_GREEN_ON();
 800fe78:	4c09      	ldr	r4, [pc, #36]	; (800fea0 <periodic_thread+0x30>)
 800fe7a:	619a      	str	r2, [r3, #24]
 800fe7c:	2540      	movs	r5, #64	; 0x40
 800fe7e:	462e      	mov	r6, r5
 800fe80:	8326      	strh	r6, [r4, #24]
		chThdSleepMilliseconds(500);
 800fe82:	f241 3088 	movw	r0, #5000	; 0x1388
 800fe86:	f7fd f853 	bl	800cf30 <chThdSleep>
		LED_GREEN_OFF();
 800fe8a:	8365      	strh	r5, [r4, #26]
		chThdSleepMilliseconds(500);
 800fe8c:	f241 3088 	movw	r0, #5000	; 0x1388
 800fe90:	f7fd f84e 	bl	800cf30 <chThdSleep>
 800fe94:	e7f4      	b.n	800fe80 <periodic_thread+0x10>
 800fe96:	bf00      	nop
 800fe98:	20000c70 	.word	0x20000c70
 800fe9c:	08012cf0 	.word	0x08012cf0
 800fea0:	40020400 	.word	0x40020400
	...

0800feb0 <bldc_init>:
}



int bldc_init(void)
{
 800feb0:	b510      	push	{r4, lr}
 800feb2:	b082      	sub	sp, #8
	halInit();
 800feb4:	f7fd fbe4 	bl	800d680 <halInit>
	chSysInit();
 800feb8:	f7fc fdb2 	bl	800ca20 <chSysInit>

	chThdSleepMilliseconds(1000);
 800febc:	f242 7010 	movw	r0, #10000	; 0x2710
 800fec0:	f7fd f836 	bl	800cf30 <chThdSleep>
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800fec4:	2400      	movs	r4, #0
	halInit();
	chSysInit();

	chThdSleepMilliseconds(1000);

	hw_init_gpio();
 800fec6:	f7ff fe93 	bl	800fbf0 <hw_init_gpio>

	Uart3_print_init();
 800feca:	f000 ff61 	bl	8010d90 <Uart3_print_init>
	Uart3_printf(&SD3, (uint8_t *)"oroca_bldc\r\n");
 800fece:	490a      	ldr	r1, [pc, #40]	; (800fef8 <bldc_init+0x48>)
 800fed0:	480a      	ldr	r0, [pc, #40]	; (800fefc <bldc_init+0x4c>)
 800fed2:	f000 ff7d 	bl	8010dd0 <Uart3_printf>

	//spi_dac_hw_init();
	//spi_dac_write_A( 100) ;

	mcpwm_init();
 800fed6:	f000 f8e3 	bl	80100a0 <mcpwm_init>
float dbg_fMea;
uint16_t dbg_AccumTheta;

int bldc_start(void)
{
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 800feda:	9400      	str	r4, [sp, #0]
 800fedc:	4b08      	ldr	r3, [pc, #32]	; (800ff00 <bldc_init+0x50>)
 800fede:	4809      	ldr	r0, [pc, #36]	; (800ff04 <bldc_init+0x54>)
 800fee0:	2240      	movs	r2, #64	; 0x40
 800fee2:	f44f 7106 	mov.w	r1, #536	; 0x218
 800fee6:	f7fc ffeb 	bl	800cec0 <chThdCreateStatic>

	CtrlParm.qVelRef=-0.01f;
 800feea:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <bldc_init+0x58>)
 800feec:	4a07      	ldr	r2, [pc, #28]	; (800ff0c <bldc_init+0x5c>)
 800feee:	601a      	str	r2, [r3, #0]
	//chThdSleepMilliseconds(1000);

	bldc_start();

	return 0;
}
 800fef0:	4620      	mov	r0, r4
 800fef2:	b002      	add	sp, #8
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	bf00      	nop
 800fef8:	08012d00 	.word	0x08012d00
 800fefc:	200012a4 	.word	0x200012a4
 800ff00:	0800fe71 	.word	0x0800fe71
 800ff04:	20001500 	.word	0x20001500
 800ff08:	200018d0 	.word	0x200018d0
 800ff0c:	bc23d70a 	.word	0xbc23d70a

0800ff10 <do_dc_cal>:
static volatile int curr1_sum;
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
void do_dc_cal(void)
{
 800ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DCCAL_ON();
 800ff12:	4b1b      	ldr	r3, [pc, #108]	; (800ff80 <do_dc_cal+0x70>)
	while(IS_DRV_FAULT()){};
 800ff14:	4a1b      	ldr	r2, [pc, #108]	; (800ff84 <do_dc_cal+0x74>)
static volatile int curr_start_samples;
static volatile int curr0_offset;
static volatile int curr1_offset;
void do_dc_cal(void)
{
	DCCAL_ON();
 800ff16:	2180      	movs	r1, #128	; 0x80
 800ff18:	8319      	strh	r1, [r3, #24]
	while(IS_DRV_FAULT()){};
 800ff1a:	6913      	ldr	r3, [r2, #16]
 800ff1c:	04db      	lsls	r3, r3, #19
 800ff1e:	d5fc      	bpl.n	800ff1a <do_dc_cal+0xa>
	chThdSleepMilliseconds(1000);
 800ff20:	f242 7010 	movw	r0, #10000	; 0x2710
 800ff24:	f7fd f804 	bl	800cf30 <chThdSleep>
	curr0_sum = 0;
 800ff28:	4d17      	ldr	r5, [pc, #92]	; (800ff88 <do_dc_cal+0x78>)
	curr1_sum = 0;
 800ff2a:	4818      	ldr	r0, [pc, #96]	; (800ff8c <do_dc_cal+0x7c>)
	curr_start_samples = 0;
 800ff2c:	4918      	ldr	r1, [pc, #96]	; (800ff90 <do_dc_cal+0x80>)
void do_dc_cal(void)
{
	DCCAL_ON();
	while(IS_DRV_FAULT()){};
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	602b      	str	r3, [r5, #0]
	curr1_sum = 0;
 800ff32:	6003      	str	r3, [r0, #0]
	curr_start_samples = 0;
 800ff34:	600b      	str	r3, [r1, #0]
	while(curr_start_samples < 4000) {};
 800ff36:	680b      	ldr	r3, [r1, #0]
 800ff38:	4a15      	ldr	r2, [pc, #84]	; (800ff90 <do_dc_cal+0x80>)
 800ff3a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800ff3e:	dbfa      	blt.n	800ff36 <do_dc_cal+0x26>
	curr0_offset = curr0_sum / curr_start_samples;
 800ff40:	4914      	ldr	r1, [pc, #80]	; (800ff94 <do_dc_cal+0x84>)
	curr1_offset = curr1_sum / curr_start_samples;
 800ff42:	4c15      	ldr	r4, [pc, #84]	; (800ff98 <do_dc_cal+0x88>)
	DCCAL_OFF();
 800ff44:	4f0e      	ldr	r7, [pc, #56]	; (800ff80 <do_dc_cal+0x70>)
	dccal_done = true;
 800ff46:	4e15      	ldr	r6, [pc, #84]	; (800ff9c <do_dc_cal+0x8c>)
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	6815      	ldr	r5, [r2, #0]
 800ff4c:	fb93 f3f5 	sdiv	r3, r3, r5
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
 800ff50:	f04f 0e80 	mov.w	lr, #128	; 0x80
	chThdSleepMilliseconds(1000);
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
 800ff54:	600b      	str	r3, [r1, #0]
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
	dccal_done = true;
 800ff56:	2501      	movs	r5, #1
	curr0_sum = 0;
	curr1_sum = 0;
	curr_start_samples = 0;
	while(curr_start_samples < 4000) {};
	curr0_offset = curr0_sum / curr_start_samples;
	curr1_offset = curr1_sum / curr_start_samples;
 800ff58:	6803      	ldr	r3, [r0, #0]
 800ff5a:	6812      	ldr	r2, [r2, #0]
 800ff5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff60:	6023      	str	r3, [r4, #0]
	DCCAL_OFF();
 800ff62:	f8a7 e01a 	strh.w	lr, [r7, #26]
	dccal_done = true;
 800ff66:	7035      	strb	r5, [r6, #0]

	Uart3_printf(&SD3, (uint8_t *)"curr0_offset : %u\r\n",curr0_offset);
 800ff68:	680a      	ldr	r2, [r1, #0]
 800ff6a:	480d      	ldr	r0, [pc, #52]	; (800ffa0 <do_dc_cal+0x90>)
 800ff6c:	490d      	ldr	r1, [pc, #52]	; (800ffa4 <do_dc_cal+0x94>)
 800ff6e:	f000 ff2f 	bl	8010dd0 <Uart3_printf>
	Uart3_printf(&SD3, (uint8_t *)"curr1_offset : %u\r\n",curr1_offset);
 800ff72:	6822      	ldr	r2, [r4, #0]
 800ff74:	490c      	ldr	r1, [pc, #48]	; (800ffa8 <do_dc_cal+0x98>)
 800ff76:	480a      	ldr	r0, [pc, #40]	; (800ffa0 <do_dc_cal+0x90>)
}
 800ff78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	curr1_offset = curr1_sum / curr_start_samples;
	DCCAL_OFF();
	dccal_done = true;

	Uart3_printf(&SD3, (uint8_t *)"curr0_offset : %u\r\n",curr0_offset);
	Uart3_printf(&SD3, (uint8_t *)"curr1_offset : %u\r\n",curr1_offset);
 800ff7c:	f000 bf28 	b.w	8010dd0 <Uart3_printf>
 800ff80:	40020800 	.word	0x40020800
 800ff84:	40020400 	.word	0x40020400
 800ff88:	20001898 	.word	0x20001898
 800ff8c:	200018e0 	.word	0x200018e0
 800ff90:	20001744 	.word	0x20001744
 800ff94:	20001718 	.word	0x20001718
 800ff98:	200018e4 	.word	0x200018e4
 800ff9c:	200018dc 	.word	0x200018dc
 800ffa0:	200012a4 	.word	0x200012a4
 800ffa4:	08012d10 	.word	0x08012d10
 800ffa8:	08012d24 	.word	0x08012d24
 800ffac:	00000000 	.word	0x00000000

0800ffb0 <CalcPI>:

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 800ffb0:	ed90 7a06 	vldr	s14, [r0, #24]
 800ffb4:	ed90 6a07 	vldr	s12, [r0, #28]
	
	U  = pParm->qdSum + pParm->qKp * Err;
 800ffb8:	edd0 7a00 	vldr	s15, [r0]
 800ffbc:	edd0 5a01 	vldr	s11, [r0, #4]

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 800ffc0:	edd0 6a04 	vldr	s13, [r0, #16]

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 800ffc4:	ee37 6a46 	vsub.f32	s12, s14, s12
	
	U  = pParm->qdSum + pParm->qKp * Err;
 800ffc8:	eeb0 7a67 	vmov.f32	s14, s15
 800ffcc:	eea6 7a25 	vfma.f32	s14, s12, s11

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 800ffd0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ffd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd8:	dc0b      	bgt.n	800fff2 <CalcPI+0x42>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 800ffda:	edd0 6a05 	vldr	s13, [r0, #20]
 800ffde:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ffe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe6:	d404      	bmi.n	800fff2 <CalcPI+0x42>
	else                  pParm->qOut = U ;
 800ffe8:	eef0 6a47 	vmov.f32	s13, s14
 800ffec:	ed80 7a08 	vstr	s14, [r0, #32]
 800fff0:	e001      	b.n	800fff6 <CalcPI+0x46>
	Err  = pParm->qInRef - pParm->qInMeas;
	
	U  = pParm->qdSum + pParm->qKp * Err;

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 800fff2:	edc0 6a08 	vstr	s13, [r0, #32]
	else                  pParm->qOut = U ;

	Exc = U - pParm->qOut;

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 800fff6:	ed90 5a02 	vldr	s10, [r0, #8]
 800fffa:	edd0 5a03 	vldr	s11, [r0, #12]
 800fffe:	eee6 7a05 	vfma.f32	s15, s12, s10
 8010002:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010006:	eee7 7a65 	vfms.f32	s15, s14, s11
 801000a:	edc0 7a00 	vstr	s15, [r0]
 801000e:	4770      	bx	lr

08010010 <SetupControlParameters>:
	
	return;
}
void SetupControlParameters(void)
{
 8010010:	b5f0      	push	{r4, r5, r6, r7, lr}
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8010012:	4817      	ldr	r0, [pc, #92]	; (8010070 <SetupControlParameters+0x60>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 8010014:	4c17      	ldr	r4, [pc, #92]	; (8010074 <SetupControlParameters+0x64>)
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
 8010016:	4a18      	ldr	r2, [pc, #96]	; (8010078 <SetupControlParameters+0x68>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010018:	4918      	ldr	r1, [pc, #96]	; (801007c <SetupControlParameters+0x6c>)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 801001a:	4d19      	ldr	r5, [pc, #100]	; (8010080 <SetupControlParameters+0x70>)
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 801001c:	4e19      	ldr	r6, [pc, #100]	; (8010084 <SetupControlParameters+0x74>)
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 801001e:	4f1a      	ldr	r7, [pc, #104]	; (8010088 <SetupControlParameters+0x78>)
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
 8010020:	60e5      	str	r5, [r4, #12]
	PIParmD.qOutMax = DOUTMAX;
 8010022:	6125      	str	r5, [r4, #16]
	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
 8010024:	60c5      	str	r5, [r0, #12]
	PIParmQ.qOutMax = QOUTMAX;
 8010026:	6105      	str	r5, [r0, #16]
	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
	PIParmPLL.qKc = PLLKC;		 
 8010028:	60d5      	str	r5, [r2, #12]
	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
 801002a:	60cd      	str	r5, [r1, #12]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 801002c:	4d17      	ldr	r5, [pc, #92]	; (801008c <SetupControlParameters+0x7c>)
	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 801002e:	f8df e068 	ldr.w	lr, [pc, #104]	; 8010098 <SetupControlParameters+0x88>
}
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 8010032:	6067      	str	r7, [r4, #4]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010034:	2300      	movs	r3, #0
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8010036:	6047      	str	r7, [r0, #4]
void SetupControlParameters(void)
{

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
 8010038:	60a6      	str	r6, [r4, #8]

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 801003a:	4f15      	ldr	r7, [pc, #84]	; (8010090 <SetupControlParameters+0x80>)

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
 801003c:	6086      	str	r6, [r0, #8]

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
 801003e:	6096      	str	r6, [r2, #8]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 8010040:	604d      	str	r5, [r1, #4]
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
	PIParmW.qOutMin = -PIParmW.qOutMax;
 8010042:	4e14      	ldr	r6, [pc, #80]	; (8010094 <SetupControlParameters+0x84>)
	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
	PIParmD.qKi = DKI;
	PIParmD.qKc = DKC;
	PIParmD.qOutMax = DOUTMAX;
	PIParmD.qOutMin = -PIParmD.qOutMax;
 8010044:	f8c4 e014 	str.w	lr, [r4, #20]

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
 8010048:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
	PIParmQ.qKi = QKI;
	PIParmQ.qKc = QKC;
	PIParmQ.qOutMax = QOUTMAX;
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 801004c:	f8c0 e014 	str.w	lr, [r0, #20]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010050:	6023      	str	r3, [r4, #0]
	pParm->qOut=0;
 8010052:	6223      	str	r3, [r4, #32]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010054:	6003      	str	r3, [r0, #0]
	pParm->qOut=0;
 8010056:	6203      	str	r3, [r0, #32]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 8010058:	600b      	str	r3, [r1, #0]
	pParm->qOut=0;
 801005a:	620b      	str	r3, [r1, #32]

}

void InitPI( tPIParm *pParm)
{
	pParm->qdSum=0;
 801005c:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 801005e:	6213      	str	r3, [r2, #32]

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
 8010060:	608d      	str	r5, [r1, #8]
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
 8010062:	6055      	str	r5, [r2, #4]

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
 8010064:	610f      	str	r7, [r1, #16]

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
	PIParmPLL.qKc = PLLKC;		 
	PIParmPLL.qOutMax = PLLOUTMAX;	 
 8010066:	6117      	str	r7, [r2, #16]
	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
	PIParmW.qKi = WKI;
	PIParmW.qKc = WKC;
	PIParmW.qOutMax = WOUTMAX;
	PIParmW.qOutMin = -PIParmW.qOutMax;
 8010068:	614e      	str	r6, [r1, #20]
	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
	PIParmPLL.qKi = PLLKI;		 
	PIParmPLL.qKc = PLLKC;		 
	PIParmPLL.qOutMax = PLLOUTMAX;	 
	PIParmPLL.qOutMin = -PIParmPLL.qOutMax;
 801006a:	6156      	str	r6, [r2, #20]
 801006c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801006e:	bf00      	nop
 8010070:	2000189c 	.word	0x2000189c
 8010074:	20001720 	.word	0x20001720
 8010078:	2000190c 	.word	0x2000190c
 801007c:	200018e8 	.word	0x200018e8
 8010080:	3f7fff58 	.word	0x3f7fff58
 8010084:	3c23d70a 	.word	0x3c23d70a
 8010088:	3d4ccccd 	.word	0x3d4ccccd
 801008c:	41400000 	.word	0x41400000
 8010090:	3f733333 	.word	0x3f733333
 8010094:	bf733333 	.word	0xbf733333
 8010098:	bf7fff58 	.word	0xbf7fff58
 801009c:	00000000 	.word	0x00000000

080100a0 <mcpwm_init>:
						// variable. Any variation on DC bus will be compared to this value
						// and compensated linearly.


void mcpwm_init(void)
{
 80100a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	Uart3_printf(&SD3, (uint8_t *)"mcpwm_init....\r\n");
 80100a4:	49d6      	ldr	r1, [pc, #856]	; (8010400 <mcpwm_init+0x360>)
	//NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	dccal_done = false;

	TIM_DeInit(TIM1);
 80100a6:	4dd7      	ldr	r5, [pc, #860]	; (8010404 <mcpwm_init+0x364>)


void mcpwm_init(void)
{

	Uart3_printf(&SD3, (uint8_t *)"mcpwm_init....\r\n");
 80100a8:	48d7      	ldr	r0, [pc, #860]	; (8010408 <mcpwm_init+0x368>)

	// Initialize variables
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
 80100aa:	4fd8      	ldr	r7, [pc, #864]	; (801040c <mcpwm_init+0x36c>)
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80100ac:	f8df 938c 	ldr.w	r9, [pc, #908]	; 801043c <mcpwm_init+0x39c>
						// variable. Any variation on DC bus will be compared to this value
						// and compensated linearly.


void mcpwm_init(void)
{
 80100b0:	b0a7      	sub	sp, #156	; 0x9c

	Uart3_printf(&SD3, (uint8_t *)"mcpwm_init....\r\n");
 80100b2:	f000 fe8d 	bl	8010dd0 <Uart3_printf>
	utils_sys_lock_cnt();
 80100b6:	f000 ff03 	bl	8010ec0 <utils_sys_lock_cnt>
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	//NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	dccal_done = false;
 80100ba:	4bd5      	ldr	r3, [pc, #852]	; (8010410 <mcpwm_init+0x370>)
 80100bc:	2400      	movs	r4, #0

	TIM_DeInit(TIM1);
 80100be:	4628      	mov	r0, r5
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	//NVIC_InitTypeDef NVIC_InitStructure;

	// Initialize variables
	dccal_done = false;
 80100c0:	701c      	strb	r4, [r3, #0]

	TIM_DeInit(TIM1);
 80100c2:	f001 f9ed 	bl	80114a0 <TIM_DeInit>
	TIM_DeInit(TIM8);
 80100c6:	4638      	mov	r0, r7
 80100c8:	f001 f9ea 	bl	80114a0 <TIM_DeInit>
	TIM1->CNT = 0;
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80100cc:	2101      	movs	r1, #1
	// Initialize variables
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
 80100ce:	626c      	str	r4, [r5, #36]	; 0x24
	TIM8->CNT = 0;

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80100d0:	4608      	mov	r0, r1
	dccal_done = false;

	TIM_DeInit(TIM1);
	TIM_DeInit(TIM8);
	TIM1->CNT = 0;
	TIM8->CNT = 0;
 80100d2:	627c      	str	r4, [r7, #36]	; 0x24

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80100d4:	f001 f9b4 	bl	8011440 <RCC_APB2PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80100d8:	4bce      	ldr	r3, [pc, #824]	; (8010414 <mcpwm_init+0x374>)

	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80100da:	f8ad 4004 	strh.w	r4, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 80100de:	2601      	movs	r6, #1
	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 80100e0:	f04f 0e20 	mov.w	lr, #32
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80100e4:	4628      	mov	r0, r5
 80100e6:	a901      	add	r1, sp, #4
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80100e8:	681a      	ldr	r2, [r3, #0]
	// TIM1 clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 80100ea:	f8ad e006 	strh.w	lr, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;
 80100ee:	f88d 600e 	strb.w	r6, [sp, #14]

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80100f2:	f8ad 400c 	strh.w	r4, [sp, #12]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now /2;
 80100f6:	4bc8      	ldr	r3, [pc, #800]	; (8010418 <mcpwm_init+0x378>)
 80100f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80100fc:	9302      	str	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80100fe:	f001 faaf 	bl	8011660 <TIM_TimeBaseInit>

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8010102:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8010104:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8010108:	40f3      	lsrs	r3, r6
 801010a:	930e      	str	r3, [sp, #56]	; 0x38
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 1;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 801010c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8010110:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8010114:	f04f 0304 	mov.w	r3, #4
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8010118:	f44f 7b80 	mov.w	fp, #256	; 0x100
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 801011c:	4628      	mov	r0, r5
 801011e:	a90c      	add	r1, sp, #48	; 0x30
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8010120:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 8010124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010128:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
	// Channel 1, 2 and 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 801012c:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8010130:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8010134:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8010138:	f001 fb02 	bl	8011740 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 801013c:	a90c      	add	r1, sp, #48	; 0x30
 801013e:	4628      	mov	r0, r5
 8010140:	f001 fb3e 	bl	80117c0 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 8010144:	a90c      	add	r1, sp, #48	; 0x30
 8010146:	4628      	mov	r0, r5
 8010148:	f001 fb7a 	bl	8011840 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 801014c:	a90c      	add	r1, sp, #48	; 0x30
 801014e:	4628      	mov	r0, r5
 8010150:	f001 fbbe 	bl	80118d0 <TIM_OC4Init>

	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010154:	4628      	mov	r0, r5
 8010156:	2108      	movs	r1, #8
 8010158:	f001 fbf2 	bl	8011940 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801015c:	4628      	mov	r0, r5
 801015e:	2108      	movs	r1, #8
 8010160:	f001 fbf6 	bl	8011950 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8010164:	4628      	mov	r0, r5
 8010166:	2108      	movs	r1, #8
 8010168:	f001 fc02 	bl	8011970 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 801016c:	4628      	mov	r0, r5
 801016e:	2108      	movs	r1, #8
 8010170:	f001 fc06 	bl	8011980 <TIM_OC4PreloadConfig>

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8010174:	f44f 6800 	mov.w	r8, #2048	; 0x800
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 8010178:	2350      	movs	r3, #80	; 0x50
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 801017a:	4628      	mov	r0, r5
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 801017c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 8010180:	a904      	add	r1, sp, #16

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 8010182:	f8ad 3016 	strh.w	r3, [sp, #22]
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 8010186:	f8ad a01a 	strh.w	sl, [sp, #26]
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
	TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 801018a:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
 801018e:	f8ad 4018 	strh.w	r4, [sp, #24]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8010192:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);

	// Automatic Output enable, Break, dead time and lock configuration
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 8010196:	f8ad 8010 	strh.w	r8, [sp, #16]
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
 801019a:	f8ad 8012 	strh.w	r8, [sp, #18]
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
	TIM_BDTRInitStructure.TIM_Break = TIM_Break_Disable;
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
	TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;

	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 801019e:	f001 fbff 	bl	80119a0 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 80101a2:	4631      	mov	r1, r6
 80101a4:	4628      	mov	r0, r5
 80101a6:	f001 fc23 	bl	80119f0 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 80101aa:	4631      	mov	r1, r6
 80101ac:	4628      	mov	r0, r5
 80101ae:	f001 faa7 	bl	8011700 <TIM_ARRPreloadConfig>
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	DMA_InitTypeDef DMA_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;

	// Clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 80101b2:	4631      	mov	r1, r6
 80101b4:	4899      	ldr	r0, [pc, #612]	; (801041c <mcpwm_init+0x37c>)
 80101b6:	f001 f923 	bl	8011400 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 80101ba:	4631      	mov	r1, r6
 80101bc:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80101c0:	f001 f93e 	bl	8011440 <RCC_APB2PeriphClockCmd>

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
 80101c4:	4623      	mov	r3, r4
 80101c6:	4a96      	ldr	r2, [pc, #600]	; (8010420 <mcpwm_init+0x380>)
 80101c8:	4896      	ldr	r0, [pc, #600]	; (8010424 <mcpwm_init+0x384>)
 80101ca:	2103      	movs	r1, #3
 80101cc:	f7fe f850 	bl	800e270 <dmaStreamAllocate>

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 80101d0:	4995      	ldr	r1, [pc, #596]	; (8010428 <mcpwm_init+0x388>)

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 80101d2:	4b96      	ldr	r3, [pc, #600]	; (801042c <mcpwm_init+0x38c>)
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 80101d4:	9118      	str	r1, [sp, #96]	; 0x60
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 80101d6:	f04f 0e0c 	mov.w	lr, #12
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80101da:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80101de:	f44f 6280 	mov.w	r2, #1024	; 0x400
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80101e2:	4648      	mov	r0, r9
 80101e4:	a917      	add	r1, sp, #92	; 0x5c
	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 80101e6:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80101ea:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 80101ee:	9319      	str	r3, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80101f0:	921d      	str	r2, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80101f2:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);

	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);

	// DMA for the ADC
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80101f6:	9417      	str	r4, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80101f8:	941a      	str	r4, [sp, #104]	; 0x68
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80101fa:	941c      	str	r4, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80101fc:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8010200:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8010204:	9422      	str	r4, [sp, #136]	; 0x88
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8010206:	9423      	str	r4, [sp, #140]	; 0x8c
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8010208:	9424      	str	r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801020a:	9425      	str	r4, [sp, #148]	; 0x94
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801020c:	f001 f880 	bl	8011310 <DMA_Init>

	// DMA2_Stream0 enable
	DMA_Cmd(DMA2_Stream4, ENABLE);
 8010210:	4631      	mov	r1, r6
 8010212:	4648      	mov	r0, r9
 8010214:	f001 f8ac 	bl	8011370 <DMA_Cmd>

	// Enable transfer complete interrupt
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 8010218:	4632      	mov	r2, r6
 801021a:	4648      	mov	r0, r9
 801021c:	2110      	movs	r1, #16
 801021e:	f001 f8b7 	bl	8011390 <DMA_ITConfig>

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8010222:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8010224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);
 8010228:	a808      	add	r0, sp, #32
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_Init(ADC2, &ADC_InitStructure);
 801022a:	f8df a214 	ldr.w	sl, [pc, #532]	; 8010440 <mcpwm_init+0x3a0>
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 801022e:	9208      	str	r2, [sp, #32]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8010230:	930a      	str	r3, [sp, #40]	; 0x28

	// ADC Common Init
	// Note that the ADC is running at 42MHz, which is higher than the
	// specified 36MHz in the data sheet, but it works.
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8010232:	9409      	str	r4, [sp, #36]	; 0x24
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8010234:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInit(&ADC_CommonInitStructure);
 8010236:	f000 ffe3 	bl	8011200 <ADC_CommonInit>

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 801023a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 801023e:	f04f 0204 	mov.w	r2, #4

	ADC_Init(ADC1, &ADC_InitStructure);
 8010242:	a911      	add	r1, sp, #68	; 0x44

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8010244:	9313      	str	r3, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_Init(ADC2, &ADC_InitStructure);
	ADC_Init(ADC3, &ADC_InitStructure);
 8010246:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8010444 <mcpwm_init+0x3a4>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
 801024a:	4879      	ldr	r0, [pc, #484]	; (8010430 <mcpwm_init+0x390>)
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 801024c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 8010250:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
 8010254:	9314      	str	r3, [sp, #80]	; 0x50
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8010256:	f88d 6048 	strb.w	r6, [sp, #72]	; 0x48
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// Channel-specific settings
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 801025a:	9411      	str	r4, [sp, #68]	; 0x44
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 801025c:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8010260:	9415      	str	r4, [sp, #84]	; 0x54
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;

	ADC_Init(ADC1, &ADC_InitStructure);
 8010262:	f000 ffa5 	bl	80111b0 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 8010266:	a911      	add	r1, sp, #68	; 0x44
 8010268:	4650      	mov	r0, sl
 801026a:	f000 ffa1 	bl	80111b0 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 801026e:	a911      	add	r1, sp, #68	; 0x44
 8010270:	4648      	mov	r0, r9
 8010272:	f000 ff9d 	bl	80111b0 <ADC_Init>

	hw_setup_adc_channels();
 8010276:	f7ff fd7b 	bl	800fd70 <hw_setup_adc_channels>

	// Enable DMA request after last transfer (Multi-ADC mode)
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 801027a:	4630      	mov	r0, r6
 801027c:	f001 f838 	bl	80112f0 <ADC_MultiModeDMARequestAfterLastTransferCmd>

	// Enable ADC
	ADC_Cmd(ADC1, ENABLE);
 8010280:	4631      	mov	r1, r6
 8010282:	486b      	ldr	r0, [pc, #428]	; (8010430 <mcpwm_init+0x390>)
 8010284:	f000 ffd4 	bl	8011230 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 8010288:	4631      	mov	r1, r6
 801028a:	4650      	mov	r0, sl
 801028c:	f000 ffd0 	bl	8011230 <ADC_Cmd>
	ADC_Cmd(ADC3, ENABLE);
 8010290:	4631      	mov	r1, r6
 8010292:	4648      	mov	r0, r9
 8010294:	f000 ffcc 	bl	8011230 <ADC_Cmd>

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8010298:	4631      	mov	r1, r6
 801029a:	2002      	movs	r0, #2
 801029c:	f001 f8d0 	bl	8011440 <RCC_APB2PeriphClockCmd>

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 80102a0:	4b5c      	ldr	r3, [pc, #368]	; (8010414 <mcpwm_init+0x374>)

	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80102a2:	f8ad 4004 	strh.w	r4, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 80102a6:	a901      	add	r1, sp, #4
 80102a8:	4638      	mov	r0, r7
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 80102aa:	681a      	ldr	r2, [r3, #0]
	// ------------- Timer8 for ADC sampling ------------- //
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80102ac:	f8ad 4006 	strh.w	r4, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80102b0:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80102b4:	f88d 400e 	strb.w	r4, [sp, #14]
	// Time Base configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);

	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)switching_frequency_now;
 80102b8:	4b5e      	ldr	r3, [pc, #376]	; (8010434 <mcpwm_init+0x394>)
 80102ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80102be:	9302      	str	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 80102c0:	f001 f9ce 	bl	8011660 <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80102c4:	f04f 0260 	mov.w	r2, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 80102c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80102ca:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80102ce:	a90c      	add	r1, sp, #48	; 0x30
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 80102d0:	f44f 7200 	mov.w	r2, #512	; 0x200
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80102d4:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
 80102d6:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 80102da:	930e      	str	r3, [sp, #56]	; 0x38
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80102dc:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80102e0:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 80102e4:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80102e8:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80102ec:	f001 fa28 	bl	8011740 <TIM_OC1Init>
 80102f0:	4638      	mov	r0, r7
 80102f2:	2108      	movs	r1, #8
 80102f4:	f001 fb24 	bl	8011940 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 80102f8:	a90c      	add	r1, sp, #48	; 0x30
 80102fa:	4638      	mov	r0, r7
 80102fc:	f001 fa60 	bl	80117c0 <TIM_OC2Init>
 8010300:	4638      	mov	r0, r7
 8010302:	2108      	movs	r1, #8
 8010304:	f001 fb24 	bl	8011950 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010308:	a90c      	add	r1, sp, #48	; 0x30
 801030a:	4638      	mov	r0, r7
 801030c:	f001 fa98 	bl	8011840 <TIM_OC3Init>
 8010310:	4638      	mov	r0, r7
 8010312:	2108      	movs	r1, #8
 8010314:	f001 fb2c 	bl	8011970 <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM8, ENABLE);
 8010318:	4631      	mov	r1, r6
 801031a:	4638      	mov	r0, r7
 801031c:	f001 f9f0 	bl	8011700 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 8010320:	4631      	mov	r1, r6
 8010322:	4638      	mov	r0, r7
 8010324:	f001 fb64 	bl	80119f0 <TIM_CCPreloadControl>

	// PWM outputs have to be enabled in order to trigger ADC on CCx
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 8010328:	4631      	mov	r1, r6
 801032a:	4638      	mov	r0, r7
 801032c:	f001 fb50 	bl	80119d0 <TIM_CtrlPWMOutputs>

	// TIM1 Master and TIM8 slave
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 8010330:	4628      	mov	r0, r5
 8010332:	2120      	movs	r1, #32
 8010334:	f001 fb7c 	bl	8011a30 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 8010338:	4628      	mov	r0, r5
 801033a:	2180      	movs	r1, #128	; 0x80
 801033c:	f001 fb98 	bl	8011a70 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 8010340:	4621      	mov	r1, r4
 8010342:	4638      	mov	r0, r7
 8010344:	f001 fb6c 	bl	8011a20 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 8010348:	4638      	mov	r0, r7
 801034a:	2104      	movs	r1, #4
 801034c:	f001 fb80 	bl	8011a50 <TIM_SelectSlaveMode>

	// Enable TIM8
	TIM_Cmd(TIM8, ENABLE);
 8010350:	4631      	mov	r1, r6
 8010352:	4638      	mov	r0, r7
 8010354:	f001 f9e4 	bl	8011720 <TIM_Cmd>

	// Enable TIM1
	TIM_Cmd(TIM1, ENABLE);
 8010358:	4631      	mov	r1, r6
 801035a:	4628      	mov	r0, r5
 801035c:	f001 f9e0 	bl	8011720 <TIM_Cmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8010360:	4631      	mov	r1, r6
 8010362:	4628      	mov	r0, r5
 8010364:	f001 fb34 	bl	80119d0 <TIM_CtrlPWMOutputs>

	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8010368:	4631      	mov	r1, r6
 801036a:	4630      	mov	r0, r6
 801036c:	f001 f858 	bl	8011420 <RCC_APB1PeriphClockCmd>
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8010370:	f04f 3aff 	mov.w	sl, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8010374:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8010376:	a901      	add	r1, sp, #4
 8010378:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 801037c:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8010380:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010384:	f8ad 4006 	strh.w	r4, [sp, #6]
	// 32-bit timer for RPM measurement
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	uint16_t PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / MCPWM_RPM_TIMER_FREQ) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8010388:	f8cd a008 	str.w	sl, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 801038c:	f001 f968 	bl	8011660 <TIM_TimeBaseInit>

	// TIM2 enable counter
	TIM_Cmd(TIM2, ENABLE);
 8010390:	4631      	mov	r1, r6
 8010392:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8010396:	f001 f9c3 	bl	8011720 <TIM_Cmd>

	// ADC sampling locations
	//stop_pwm_hw();
	utils_sys_lock_cnt();
 801039a:	f000 fd91 	bl	8010ec0 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 801039e:	682b      	ldr	r3, [r5, #0]
 80103a0:	f043 0302 	orr.w	r3, r3, #2
 80103a4:	602b      	str	r3, [r5, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	f043 0302 	orr.w	r3, r3, #2
 80103ac:	603b      	str	r3, [r7, #0]

	TIM8->CCR1 = TIM1->ARR;//for vdc
 80103ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80103b0:	637b      	str	r3, [r7, #52]	; 0x34
	TIM8->CCR2 = TIM1->ARR;//for Ib
 80103b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80103b4:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM8->CCR3 = TIM1->ARR;//for Ia
 80103b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80103b8:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 80103ba:	682b      	ldr	r3, [r5, #0]
 80103bc:	f023 0302 	bic.w	r3, r3, #2
 80103c0:	602b      	str	r3, [r5, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	f023 0302 	bic.w	r3, r3, #2
 80103c8:	603b      	str	r3, [r7, #0]

	utils_sys_unlock_cnt();
 80103ca:	f000 fd89 	bl	8010ee0 <utils_sys_unlock_cnt>

	// Calibrate current offset
	ENABLE_GATE();
 80103ce:	4b1a      	ldr	r3, [pc, #104]	; (8010438 <mcpwm_init+0x398>)
	DCCAL_OFF();
 80103d0:	2280      	movs	r2, #128	; 0x80
	TIM8->CR1 &= ~TIM_CR1_UDIS;

	utils_sys_unlock_cnt();

	// Calibrate current offset
	ENABLE_GATE();
 80103d2:	2740      	movs	r7, #64	; 0x40
 80103d4:	831f      	strh	r7, [r3, #24]
	DCCAL_OFF();
 80103d6:	835a      	strh	r2, [r3, #26]
	GAIN_FULLDN();
 80103d8:	f8a3 b01a 	strh.w	fp, [r3, #26]
	do_dc_cal();
 80103dc:	f7ff fd98 	bl	800ff10 <do_dc_cal>
	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80103e0:	f5a9 3985 	sub.w	r9, r9, #68096	; 0x10a00
	//Uart3_printf(&SD3, (uint8_t *)"5-1\r\n");
	// Enable transfer complete interrupt


	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80103e4:	4631      	mov	r1, r6
 80103e6:	4638      	mov	r0, r7
 80103e8:	f001 f81a 	bl	8011420 <RCC_APB1PeriphClockCmd>
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80103ec:	2307      	movs	r3, #7
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80103ee:	a901      	add	r1, sp, #4
 80103f0:	4648      	mov	r0, r9
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80103f2:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Various time measurements
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
	PrescalerValue = (uint16_t) ((SYSTEM_CORE_CLOCK / 2) / 10000000) - 1;

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80103f6:	f8cd a008 	str.w	sl, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80103fa:	f8ad 400c 	strh.w	r4, [sp, #12]
 80103fe:	e023      	b.n	8010448 <mcpwm_init+0x3a8>
 8010400:	08012d38 	.word	0x08012d38
 8010404:	40010000 	.word	0x40010000
 8010408:	200012a4 	.word	0x200012a4
 801040c:	40010400 	.word	0x40010400
 8010410:	200018dc 	.word	0x200018dc
 8010414:	20000800 	.word	0x20000800
 8010418:	0501bd00 	.word	0x0501bd00
 801041c:	00400005 	.word	0x00400005
 8010420:	080109e1 	.word	0x080109e1
 8010424:	08012b30 	.word	0x08012b30
 8010428:	40012308 	.word	0x40012308
 801042c:	20001748 	.word	0x20001748
 8010430:	40012000 	.word	0x40012000
 8010434:	0a037a00 	.word	0x0a037a00
 8010438:	40020800 	.word	0x40020800
 801043c:	40026470 	.word	0x40026470
 8010440:	40012100 	.word	0x40012100
 8010444:	40012200 	.word	0x40012200
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010448:	f8ad 4006 	strh.w	r4, [sp, #6]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 801044c:	f001 f908 	bl	8011660 <TIM_TimeBaseInit>

	// TIM3 enable counter
	TIM_Cmd(TIM12, ENABLE);
 8010450:	4631      	mov	r1, r6
 8010452:	4648      	mov	r0, r9
 8010454:	f001 f964 	bl	8011720 <TIM_Cmd>

	// WWDG configuration
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8010458:	4631      	mov	r1, r6
 801045a:	4640      	mov	r0, r8
 801045c:	f000 ffe0 	bl	8011420 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 8010460:	4620      	mov	r0, r4
 8010462:	f001 fb15 	bl	8011a90 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 8010466:	20ff      	movs	r0, #255	; 0xff
 8010468:	f001 fb22 	bl	8011ab0 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 801046c:	2064      	movs	r0, #100	; 0x64
 801046e:	f001 fb3f 	bl	8011af0 <WWDG_Enable>

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 8010472:	4b15      	ldr	r3, [pc, #84]	; (80104c8 <mcpwm_init+0x428>)

bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
 8010474:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80104cc <mcpwm_init+0x42c>

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 8010478:	8a1b      	ldrh	r3, [r3, #16]

	MeasCurrParm.qKa    = DQKA;
	MeasCurrParm.qKb    = DQKB;

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 
 801047a:	4915      	ldr	r1, [pc, #84]	; (80104d0 <mcpwm_init+0x430>)
 801047c:	4a15      	ldr	r2, [pc, #84]	; (80104d4 <mcpwm_init+0x434>)

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 801047e:	4e16      	ldr	r6, [pc, #88]	; (80104d8 <mcpwm_init+0x438>)

	// ============= SVGen ===============
	// Set PWM period to Loop Time
	SVGenParm.iPWMPeriod = LOOPINTCY;
 8010480:	4816      	ldr	r0, [pc, #88]	; (80104dc <mcpwm_init+0x43c>)

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 8010482:	ee07 3a90 	vmov	s15, r3

bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
 8010486:	4b16      	ldr	r3, [pc, #88]	; (80104e0 <mcpwm_init+0x440>)

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 8010488:	eef8 7a67 	vcvt.f32.u32	s15, s15

bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
 801048c:	ed83 7a00 	vstr	s14, [r3]

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 8010490:	ee67 7a87 	vmul.f32	s15, s15, s14
bool SetupParm(void)
{
	// ============= ADC - Measure Current & Pot ======================

	MeasCurrParm.qKa    = DQKA;
	MeasCurrParm.qKb    = DQKB;
 8010494:	ed83 7a02 	vstr	s14, [r3, #8]

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 
 8010498:	6809      	ldr	r1, [r1, #0]
 801049a:	6812      	ldr	r2, [r2, #0]

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 801049c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80104a0:	ee67 7a87 	vmul.f32	s15, s15, s14

	MeasCurrParm.qKa    = DQKA;
	MeasCurrParm.qKb    = DQKB;

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 
 80104a4:	b289      	uxth	r1, r1
 80104a6:	b292      	uxth	r2, r2
	return CompVdq;
}

void InitMeasCompCurr( short Offset_a, short Offset_b )
{
	MeasCurrParm.Offseta = Offset_a;
 80104a8:	8099      	strh	r1, [r3, #4]
	MeasCurrParm.Offsetb = Offset_b;
 80104aa:	819a      	strh	r2, [r3, #12]

	// Initial Current offsets
	InitMeasCompCurr( curr0_offset, curr1_offset ); 

	// Target DC Bus, without sign.
	TargetDCbus = GET_INPUT_VOLTAGE();
 80104ac:	edc6 7a00 	vstr	s15, [r6]

	// ============= SVGen ===============
	// Set PWM period to Loop Time
	SVGenParm.iPWMPeriod = LOOPINTCY;
 80104b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80104b2:	6003      	str	r3, [r0, #0]

//--------------------------------------------------
//main ctrl setup

	SetupParm();
	SetupControlParameters();
 80104b4:	f7ff fdac 	bl	8010010 <SetupControlParameters>

	//dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
	//DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);


	uGF.Word = 0;                   // clear flags
 80104b8:	4b0a      	ldr	r3, [pc, #40]	; (80104e4 <mcpwm_init+0x444>)

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 80104ba:	2202      	movs	r2, #2

	//dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_int_handler,(void *)0);
	//DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);


	uGF.Word = 0;                   // clear flags
 80104bc:	801c      	strh	r4, [r3, #0]

	#ifdef ENVOLTRIPPLE
    	uGF.bit.EnVoltRipCo = 1;
	#endif

	uGF.bit.RunMotor = 1;
 80104be:	701a      	strb	r2, [r3, #0]

	
//
}
 80104c0:	b027      	add	sp, #156	; 0x9c
 80104c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c6:	bf00      	nop
 80104c8:	20001748 	.word	0x20001748
 80104cc:	3a534067 	.word	0x3a534067
 80104d0:	20001718 	.word	0x20001718
 80104d4:	200018e4 	.word	0x200018e4
 80104d8:	20001934 	.word	0x20001934
 80104dc:	20001834 	.word	0x20001834
 80104e0:	200018c0 	.word	0x200018c0
 80104e4:	20001930 	.word	0x20001930
	...

080104f0 <VoltRippleComp>:
	// CompVdq = ------------- * Vdq
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
 80104f0:	4a14      	ldr	r2, [pc, #80]	; (8010544 <VoltRippleComp+0x54>)
 80104f2:	4b15      	ldr	r3, [pc, #84]	; (8010548 <VoltRippleComp+0x58>)
 80104f4:	ed92 7a00 	vldr	s14, [r2]
 80104f8:	edd3 7a00 	vldr	s15, [r3]
 80104fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010504:	dc11      	bgt.n	801052a <VoltRippleComp+0x3a>
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
	else if (DCbus > TargetDCbus)
 8010506:	ed93 7a00 	vldr	s14, [r3]
 801050a:	edd2 7a00 	vldr	s15, [r2]
 801050e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010516:	dd07      	ble.n	8010528 <VoltRippleComp+0x38>
		CompVdq = ((TargetDCbus/ DCbus)* Vdq);
 8010518:	edd2 6a00 	vldr	s13, [r2]
 801051c:	ed93 7a00 	vldr	s14, [r3]
 8010520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010524:	ee20 0a27 	vmul.f32	s0, s0, s15
	else
		CompVdq = Vdq;

	return CompVdq;
}
 8010528:	4770      	bx	lr
	//               DCbus
	//
	// If target and measured are equal, no operation is made.
	//
	if (TargetDCbus > DCbus)
		CompVdq = Vdq + (((TargetDCbus - DCbus)/ DCbus)* Vdq);
 801052a:	edd2 7a00 	vldr	s15, [r2]
 801052e:	ed93 7a00 	vldr	s14, [r3]
 8010532:	edd3 6a00 	vldr	s13, [r3]
 8010536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801053a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801053e:	eea7 0a00 	vfma.f32	s0, s14, s0
 8010542:	4770      	bx	lr
 8010544:	20001934 	.word	0x20001934
 8010548:	2000171c 	.word	0x2000171c
 801054c:	00000000 	.word	0x00000000

08010550 <DoControl>:
//---------------------------------------------------------------------
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
{
	if(AccumThetaCnt == 0)
 8010550:	4b30      	ldr	r3, [pc, #192]	; (8010614 <DoControl+0xc4>)
 8010552:	881b      	ldrh	r3, [r3, #0]

//---------------------------------------------------------------------
// Executes one PI itteration for each of the three loops Id,Iq,Speed,

void DoControl( void )
{
 8010554:	b570      	push	{r4, r5, r6, lr}
	if(AccumThetaCnt == 0)
 8010556:	2b00      	cmp	r3, #0
 8010558:	d03d      	beq.n	80105d6 <DoControl+0x86>
 801055a:	4e2f      	ldr	r6, [pc, #188]	; (8010618 <DoControl+0xc8>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
		CtrlParm.qVqRef = PIParmW.qOut;
	}

	if (uGF.bit.EnTorqueMod)
 801055c:	4c2f      	ldr	r4, [pc, #188]	; (801061c <DoControl+0xcc>)
		CtrlParm.qVqRef = CtrlParm.qVelRef;

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 801055e:	4d30      	ldr	r5, [pc, #192]	; (8010620 <DoControl+0xd0>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
		CtrlParm.qVqRef = PIParmW.qOut;
	}

	if (uGF.bit.EnTorqueMod)
 8010560:	7823      	ldrb	r3, [r4, #0]
		CtrlParm.qVqRef = CtrlParm.qVelRef;

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 8010562:	69e9      	ldr	r1, [r5, #28]
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
		CtrlParm.qVqRef = PIParmW.qOut;
	}

	if (uGF.bit.EnTorqueMod)
 8010564:	0758      	lsls	r0, r3, #29
		CtrlParm.qVqRef = CtrlParm.qVelRef;
 8010566:	bf44      	itt	mi
 8010568:	6833      	ldrmi	r3, [r6, #0]
 801056a:	60b3      	strmi	r3, [r6, #8]

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 801056c:	4b2d      	ldr	r3, [pc, #180]	; (8010624 <DoControl+0xd4>)
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
 801056e:	2200      	movs	r2, #0
	CalcPI(&PIParmD);
 8010570:	4618      	mov	r0, r3
		CtrlParm.qVqRef = CtrlParm.qVelRef;

	//CtrlParm.qVdRef = FieldWeakening(fabsf(CtrlParm.qVelRef));

	// PI control for D
	PIParmD.qInMeas = ParkParm.qId;
 8010572:	61d9      	str	r1, [r3, #28]
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
 8010574:	619a      	str	r2, [r3, #24]
	CalcPI(&PIParmD);
 8010576:	f7ff fd1b 	bl	800ffb0 <CalcPI>

	if(uGF.bit.EnVoltRipCo)
 801057a:	7822      	ldrb	r2, [r4, #0]
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 801057c:	ed93 0a08 	vldr	s0, [r3, #32]
	PIParmD.qInMeas = ParkParm.qId;
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
	CalcPI(&PIParmD);

	if(uGF.bit.EnVoltRipCo)
 8010580:	0711      	lsls	r1, r2, #28
 8010582:	d436      	bmi.n	80105f2 <DoControl+0xa2>
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;
 8010584:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8010588:	ee20 0a00 	vmul.f32	s0, s0, s0
 801058c:	4b26      	ldr	r3, [pc, #152]	; (8010628 <DoControl+0xd8>)
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801058e:	eddf 7a27 	vldr	s15, [pc, #156]	; 801062c <DoControl+0xdc>
	if(uGF.bit.EnVoltRipCo)
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 8010592:	ed83 0a00 	vstr	s0, [r3]
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010596:	ed93 0a00 	vldr	s0, [r3]
 801059a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801059e:	eef1 7ac0 	vsqrt.f32	s15, s0
 80105a2:	eef4 7a67 	vcmp.f32	s15, s15
 80105a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105aa:	d12e      	bne.n	801060a <DoControl+0xba>
 80105ac:	4b20      	ldr	r3, [pc, #128]	; (8010630 <DoControl+0xe0>)
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
 80105ae:	6a29      	ldr	r1, [r5, #32]
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 80105b0:	68b2      	ldr	r2, [r6, #8]
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
 80105b2:	61d9      	str	r1, [r3, #28]
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80105b4:	eeb1 7a67 	vneg.f32	s14, s15

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
	PIParmQ.qInRef	= CtrlParm.qVqRef;
	CalcPI(&PIParmQ);
 80105b8:	4618      	mov	r0, r3
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 80105ba:	619a      	str	r2, [r3, #24]
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80105bc:	edc3 7a04 	vstr	s15, [r3, #16]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80105c0:	ed83 7a05 	vstr	s14, [r3, #20]

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
	PIParmQ.qInRef	= CtrlParm.qVqRef;
	CalcPI(&PIParmQ);
 80105c4:	f7ff fcf4 	bl	800ffb0 <CalcPI>

	// If voltage ripple compensation flag is set, adjust the output
	// of the Q controller depending on measured DC Bus voltage
	if(uGF.bit.EnVoltRipCo)
 80105c8:	7822      	ldrb	r2, [r4, #0]
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	// PI control for Q
	PIParmQ.qInMeas = ParkParm.qIq;
 80105ca:	4915      	ldr	r1, [pc, #84]	; (8010620 <DoControl+0xd0>)
	PIParmQ.qInRef	= CtrlParm.qVqRef;
	CalcPI(&PIParmQ);

	// If voltage ripple compensation flag is set, adjust the output
	// of the Q controller depending on measured DC Bus voltage
	if(uGF.bit.EnVoltRipCo)
 80105cc:	0712      	lsls	r2, r2, #28
 80105ce:	d415      	bmi.n	80105fc <DoControl+0xac>
		ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
	else
		ParkParm.qVq = PIParmQ.qOut;
 80105d0:	6a1b      	ldr	r3, [r3, #32]
 80105d2:	628b      	str	r3, [r1, #40]	; 0x28
 80105d4:	bd70      	pop	{r4, r5, r6, pc}
void DoControl( void )
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
 80105d6:	4b17      	ldr	r3, [pc, #92]	; (8010634 <DoControl+0xe4>)
 80105d8:	4a17      	ldr	r2, [pc, #92]	; (8010638 <DoControl+0xe8>)
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80105da:	4e0f      	ldr	r6, [pc, #60]	; (8010618 <DoControl+0xc8>)
void DoControl( void )
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
 80105dc:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80105e0:	6832      	ldr	r2, [r6, #0]
void DoControl( void )
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
 80105e2:	61d9      	str	r1, [r3, #28]
		PIParmW.qInRef	= CtrlParm.qVelRef;
		CalcPI(&PIParmW);
 80105e4:	4618      	mov	r0, r3
{
	if(AccumThetaCnt == 0)
	{
		// Execute the velocity control loop
		PIParmW.qInMeas = smc1.Omega;
		PIParmW.qInRef	= CtrlParm.qVelRef;
 80105e6:	619a      	str	r2, [r3, #24]
		CalcPI(&PIParmW);
 80105e8:	f7ff fce2 	bl	800ffb0 <CalcPI>
		CtrlParm.qVqRef = PIParmW.qOut;
 80105ec:	6a1b      	ldr	r3, [r3, #32]
 80105ee:	60b3      	str	r3, [r6, #8]
 80105f0:	e7b4      	b.n	801055c <DoControl+0xc>
	//PIParmD.qInRef	= CtrlParm.qVdRef;
	PIParmD.qInRef	= 0.0f;
	CalcPI(&PIParmD);

	if(uGF.bit.EnVoltRipCo)
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
 80105f2:	f7ff ff7d 	bl	80104f0 <VoltRippleComp>
 80105f6:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 80105fa:	e7c5      	b.n	8010588 <DoControl+0x38>
	CalcPI(&PIParmQ);

	// If voltage ripple compensation flag is set, adjust the output
	// of the Q controller depending on measured DC Bus voltage
	if(uGF.bit.EnVoltRipCo)
		ParkParm.qVq = VoltRippleComp(PIParmQ.qOut);
 80105fc:	ed93 0a08 	vldr	s0, [r3, #32]
 8010600:	f7ff ff76 	bl	80104f0 <VoltRippleComp>
 8010604:	ed81 0a0a 	vstr	s0, [r1, #40]	; 0x28
 8010608:	bd70      	pop	{r4, r5, r6, pc}
		ParkParm.qVd = VoltRippleComp(PIParmD.qOut);
	else
		ParkParm.qVd = PIParmD.qOut;

	qVdSquared = ParkParm.qVd * ParkParm.qVd;
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 801060a:	f001 fb21 	bl	8011c50 <sqrtf>
 801060e:	eef0 7a40 	vmov.f32	s15, s0
 8010612:	e7cb      	b.n	80105ac <DoControl+0x5c>
 8010614:	20001760 	.word	0x20001760
 8010618:	200018d0 	.word	0x200018d0
 801061c:	20001930 	.word	0x20001930
 8010620:	20001858 	.word	0x20001858
 8010624:	20001720 	.word	0x20001720
 8010628:	20001938 	.word	0x20001938
 801062c:	3f670a3d 	.word	0x3f670a3d
 8010630:	2000189c 	.word	0x2000189c
 8010634:	200018e8 	.word	0x200018e8
 8010638:	20001764 	.word	0x20001764
 801063c:	00000000 	.word	0x00000000

08010640 <CalcTimes>:
}


void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 8010640:	4b18      	ldr	r3, [pc, #96]	; (80106a4 <CalcTimes+0x64>)
 8010642:	4a19      	ldr	r2, [pc, #100]	; (80106a8 <CalcTimes+0x68>)
 8010644:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010646:	ed92 6a04 	vldr	s12, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 801064a:	edd2 6a05 	vldr	s13, [r2, #20]
}


void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  
 801064e:	6013      	str	r3, [r2, #0]

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010650:	ee07 3a90 	vmov	s15, r3
 8010654:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010658:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5

void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 801065c:	ee27 6a86 	vmul.f32	s12, s15, s12
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010660:	ee67 6aa6 	vmul.f32	s13, s15, s13
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010664:	ee77 7ac6 	vsub.f32	s15, s15, s12

void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010668:	ed82 6a04 	vstr	s12, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 801066c:	ee77 7ae6 	vsub.f32	s15, s15, s13
void CalcTimes(void)
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010670:	edc2 6a05 	vstr	s13, [r2, #20]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 801067c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
{
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010680:	edc2 7a08 	vstr	s15, [r2, #32]
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010684:	ee77 7a06 	vadd.f32	s15, s14, s12
 8010688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 801068c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	SVGenParm.iPWMPeriod = LOOPINTCY;	  

	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010690:	edc2 7a07 	vstr	s15, [r2, #28]
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 8010694:	ee77 7a26 	vadd.f32	s15, s14, s13
 8010698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801069c:	edc2 7a06 	vstr	s15, [r2, #24]
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	40010000 	.word	0x40010000
 80106a8:	20001834 	.word	0x20001834
 80106ac:	00000000 	.word	0x00000000

080106b0 <update_timer_Duty>:

	return;
}  
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
 80106b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b4:	4616      	mov	r6, r2
 80106b6:	4680      	mov	r8, r0
 80106b8:	460f      	mov	r7, r1
	utils_sys_lock_cnt();
 80106ba:	f000 fc01 	bl	8010ec0 <utils_sys_lock_cnt>

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80106be:	4b0d      	ldr	r3, [pc, #52]	; (80106f4 <update_timer_Duty+0x44>)
	TIM8->CR1 |= TIM_CR1_UDIS;
 80106c0:	4c0d      	ldr	r4, [pc, #52]	; (80106f8 <update_timer_Duty+0x48>)
void update_timer_Duty(unsigned int duty_A,unsigned int duty_B,unsigned int duty_C)
{
	utils_sys_lock_cnt();

	// Disable preload register updates
	TIM1->CR1 |= TIM_CR1_UDIS;
 80106c2:	681d      	ldr	r5, [r3, #0]
 80106c4:	f045 0502 	orr.w	r5, r5, #2
 80106c8:	601d      	str	r5, [r3, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80106ca:	6825      	ldr	r5, [r4, #0]
 80106cc:	f045 0502 	orr.w	r5, r5, #2
 80106d0:	6025      	str	r5, [r4, #0]

	TIM1->CCR1 = duty_A;
 80106d2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_B;
 80106d6:	639f      	str	r7, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_C;
 80106d8:	63de      	str	r6, [r3, #60]	; 0x3c
	//TIM8->CCR2 = duty_A;
	//TIM8->CCR3 = duty_C;


	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	f022 0202 	bic.w	r2, r2, #2
 80106e0:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	f023 0302 	bic.w	r3, r3, #2
 80106e8:	6023      	str	r3, [r4, #0]

	utils_sys_unlock_cnt();
}
 80106ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	// Enables preload register updates
	TIM1->CR1 &= ~TIM_CR1_UDIS;
	TIM8->CR1 &= ~TIM_CR1_UDIS;

	utils_sys_unlock_cnt();
 80106ee:	f000 bbf7 	b.w	8010ee0 <utils_sys_unlock_cnt>
 80106f2:	bf00      	nop
 80106f4:	40010000 	.word	0x40010000
 80106f8:	40010400 	.word	0x40010400
 80106fc:	00000000 	.word	0x00000000

08010700 <CalcSVGen>:
}

void CalcSVGen( void )
{ 
	if( SVGenParm.qVr1 >= 0 )
 8010700:	483e      	ldr	r0, [pc, #248]	; (80107fc <CalcSVGen+0xfc>)
 8010702:	edd0 7a01 	vldr	s15, [r0, #4]
 8010706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

	utils_sys_unlock_cnt();
}

void CalcSVGen( void )
{ 
 801070e:	b508      	push	{r3, lr}
	if( SVGenParm.qVr1 >= 0 )
 8010710:	db26      	blt.n	8010760 <CalcSVGen+0x60>
	{       
		// (xx1)
		if( SVGenParm.qVr2 >= 0 )
 8010712:	ed90 7a02 	vldr	s14, [r0, #8]
 8010716:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071e:	da13      	bge.n	8010748 <CalcSVGen+0x48>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
		}
		else
		{            
			// (x01)
			if( SVGenParm.qVr3 >= 0 )
 8010720:	edd0 6a03 	vldr	s13, [r0, #12]
 8010724:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072c:	db44      	blt.n	80107b8 <CalcSVGen+0xb8>
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
 801072e:	edc0 7a05 	vstr	s15, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr3;
 8010732:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8010736:	f7ff ff83 	bl	8010640 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 801073a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
				SVGenParm.T1 = SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 801073e:	69c2      	ldr	r2, [r0, #28]
 8010740:	6981      	ldr	r1, [r0, #24]
 8010742:	6a00      	ldr	r0, [r0, #32]
 8010744:	f7ff bfb4 	b.w	80106b0 <update_timer_Duty>
		if( SVGenParm.qVr2 >= 0 )
		{
			// (x11)
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
 8010748:	ed80 7a05 	vstr	s14, [r0, #20]
			SVGenParm.T1 = SVGenParm.qVr1;
 801074c:	edc0 7a04 	vstr	s15, [r0, #16]
			CalcTimes();
 8010750:	f7ff ff76 	bl	8010640 <CalcTimes>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8010754:	3018      	adds	r0, #24
 8010756:	c807      	ldmia	r0, {r0, r1, r2}
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			// Must be Sector 3 since Sector 7 not allowed
			// Sector 3: (0,1,1)  0-60 degrees
			SVGenParm.T2 = SVGenParm.qVr2;
			SVGenParm.T1 = SVGenParm.qVr1;
			CalcTimes();
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 801075c:	f7ff bfa8 	b.w	80106b0 <update_timer_Duty>
		}
	}
	else
	{
		// (xx0)
		if( SVGenParm.qVr2 >= 0 )
 8010760:	edd0 6a02 	vldr	s13, [r0, #8]
 8010764:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076c:	db35      	blt.n	80107da <CalcSVGen+0xda>
		{
			// (x10)
			if( SVGenParm.qVr3 >= 0 )
 801076e:	ed90 7a03 	vldr	s14, [r0, #12]
 8010772:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077a:	db0c      	blt.n	8010796 <CalcSVGen+0x96>
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
 801077c:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr2;
 8010780:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8010784:	f7ff ff5c 	bl	8010640 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 6: (1,1,0)  240-300 degrees
				SVGenParm.T2 = SVGenParm.qVr3;
				SVGenParm.T1 = SVGenParm.qVr2;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 801078c:	6982      	ldr	r2, [r0, #24]
 801078e:	6a01      	ldr	r1, [r0, #32]
 8010790:	69c0      	ldr	r0, [r0, #28]
 8010792:	f7ff bf8d 	b.w	80106b0 <update_timer_Duty>
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 8010796:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr1;
 801079a:	eef1 7a67 	vneg.f32	s15, s15
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
			}
			else
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
 801079e:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr1;
 80107a2:	edc0 7a04 	vstr	s15, [r0, #16]
				CalcTimes();
 80107a6:	f7ff ff4b 	bl	8010640 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80107aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 2: (0,1,0)  300-0 degrees
				SVGenParm.T2 = -SVGenParm.qVr3;
				SVGenParm.T1 = -SVGenParm.qVr1;
				CalcTimes();
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 80107ae:	69c2      	ldr	r2, [r0, #28]
 80107b0:	6a01      	ldr	r1, [r0, #32]
 80107b2:	6980      	ldr	r0, [r0, #24]
 80107b4:	f7ff bf7c 	b.w	80106b0 <update_timer_Duty>

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 80107b8:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T1 = -SVGenParm.qVr3;
 80107bc:	eef1 6a66 	vneg.f32	s13, s13

			}
			else
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
 80107c0:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr3;
 80107c4:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 80107c8:	f7ff ff3a 	bl	8010640 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80107cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			{
				// Sector 1: (0,0,1)  60-120 degrees
				SVGenParm.T2 = -SVGenParm.qVr2;
				SVGenParm.T1 = -SVGenParm.qVr3;
				CalcTimes();
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 80107d0:	6a02      	ldr	r2, [r0, #32]
 80107d2:	6981      	ldr	r1, [r0, #24]
 80107d4:	69c0      	ldr	r0, [r0, #28]
 80107d6:	f7ff bf6b 	b.w	80106b0 <update_timer_Duty>
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 80107da:	eef1 7a67 	vneg.f32	s15, s15
			SVGenParm.T1 = -SVGenParm.qVr2;
 80107de:	eef1 6a66 	vneg.f32	s13, s13
		else
		{            
			// (x00)
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
 80107e2:	edc0 7a05 	vstr	s15, [r0, #20]
			SVGenParm.T1 = -SVGenParm.qVr2;
 80107e6:	edc0 6a04 	vstr	s13, [r0, #16]
			CalcTimes();
 80107ea:	f7ff ff29 	bl	8010640 <CalcTimes>
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 80107ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			// Must be Sector 4 since Sector 0 not allowed
			// Sector 4: (1,0,0)  180-240 degrees
			SVGenParm.T2 = -SVGenParm.qVr1;
			SVGenParm.T1 = -SVGenParm.qVr2;
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 80107f2:	6982      	ldr	r2, [r0, #24]
 80107f4:	69c1      	ldr	r1, [r0, #28]
 80107f6:	6a00      	ldr	r0, [r0, #32]
 80107f8:	f7ff bf5a 	b.w	80106b0 <update_timer_Duty>
 80107fc:	20001834 	.word	0x20001834

08010800 <SMC_HallSensor_Estimation>:
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010800:	4b68      	ldr	r3, [pc, #416]	; (80109a4 <SMC_HallSensor_Estimation+0x1a4>)
 8010802:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80109a8 <SMC_HallSensor_Estimation+0x1a8>
 8010806:	889a      	ldrh	r2, [r3, #4]
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010808:	885b      	ldrh	r3, [r3, #2]
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801080a:	eddf 6a68 	vldr	s13, [pc, #416]	; 80109ac <SMC_HallSensor_Estimation+0x1ac>
 801080e:	ee07 2a10 	vmov	s14, r2
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010812:	ee07 3a90 	vmov	s15, r3
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void SMC_HallSensor_Estimation (SMC *s)
{
 8010816:	b510      	push	{r4, lr}


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010818:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801081c:	eef8 7a67 	vcvt.f32.u32	s15, s15
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010820:	ee37 7a46 	vsub.f32	s14, s14, s12
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010824:	ee77 7ac6 	vsub.f32	s15, s15, s12
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void SMC_HallSensor_Estimation (SMC *s)
{
 8010828:	ed2d 8b04 	vpush	{d8-d9}


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801082c:	eec7 8a26 	vdiv.f32	s17, s14, s13
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void SMC_HallSensor_Estimation (SMC *s)
{
 8010830:	4604      	mov	r4, r0


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010832:	ee87 9aa6 	vdiv.f32	s18, s15, s13

	s->costh = cosf(s->Theta);
 8010836:	ed90 8a2e 	vldr	s16, [r0, #184]	; 0xb8
#else
void SMC_HallSensor_Estimation (SMC *s)
{


	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801083a:	edc0 8a12 	vstr	s17, [r0, #72]	; 0x48
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801083e:	ed80 9a14 	vstr	s18, [r0, #80]	; 0x50

	s->costh = cosf(s->Theta);
 8010842:	eeb0 0a48 	vmov.f32	s0, s16
 8010846:	f001 f96b 	bl	8011b20 <cosf>
 801084a:	eef0 9a40 	vmov.f32	s19, s0
 801084e:	edc4 9a24 	vstr	s19, [r4, #144]	; 0x90
	s->sinth = sinf(s->Theta);
 8010852:	eeb0 0a48 	vmov.f32	s0, s16
 8010856:	f001 f9ab 	bl	8011bb0 <sinf>
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
 801085a:	ee68 8aa9 	vmul.f32	s17, s17, s19
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 801085e:	ee29 9a00 	vmul.f32	s18, s18, s0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010862:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8010866:	ed9f 6a52 	vldr	s12, [pc, #328]	; 80109b0 <SMC_HallSensor_Estimation+0x1b0>
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;

	s->costh = cosf(s->Theta);
	s->sinth = sinf(s->Theta);
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
 801086a:	edc4 8a21 	vstr	s17, [r4, #132]	; 0x84
	s->Hall_CosSin = s->HallPLLB * s->sinth;

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
 801086e:	ee78 8ac9 	vsub.f32	s17, s17, s18
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010872:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40

	s->costh = cosf(s->Theta);
	s->sinth = sinf(s->Theta);
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 8010876:	ed84 9a22 	vstr	s18, [r4, #136]	; 0x88

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 801087a:	eed8 7a86 	vfnms.f32	s15, s17, s12
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 801087e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010882:	ee77 7aa6 	vadd.f32	s15, s15, s13

	s->HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
	s->HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;

	s->costh = cosf(s->Theta);
	s->sinth = sinf(s->Theta);
 8010886:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 801088a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010892:	dc0f      	bgt.n	80108b4 <SMC_HallSensor_Estimation+0xb4>
 8010894:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8010898:	eef4 7ac7 	vcmpe.f32	s15, s14
 801089c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a0:	d561      	bpl.n	8010966 <SMC_HallSensor_Estimation+0x166>
 80108a2:	eef0 7a47 	vmov.f32	s15, s14
 80108a6:	eddf 5a43 	vldr	s11, [pc, #268]	; 80109b4 <SMC_HallSensor_Estimation+0x1b4>
 80108aa:	eddf 6a43 	vldr	s13, [pc, #268]	; 80109b8 <SMC_HallSensor_Estimation+0x1b8>
 80108ae:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80109bc <SMC_HallSensor_Estimation+0x1bc>
 80108b2:	e007      	b.n	80108c4 <SMC_HallSensor_Estimation+0xc4>
 80108b4:	eef0 7a47 	vmov.f32	s15, s14
 80108b8:	eddf 5a41 	vldr	s11, [pc, #260]	; 80109c0 <SMC_HallSensor_Estimation+0x1c0>
 80108bc:	eddf 6a41 	vldr	s13, [pc, #260]	; 80109c4 <SMC_HallSensor_Estimation+0x1c4>
 80108c0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80109c8 <SMC_HallSensor_Estimation+0x1c8>
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 80108c4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80109cc <SMC_HallSensor_Estimation+0x1cc>
	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 80108c8:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
 80108cc:	ee37 0a88 	vadd.f32	s0, s15, s16
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * PWMPEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
	s->Hall_Err0= err;									
 80108d0:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
 80108d4:	eeb4 0ac6 	vcmpe.f32	s0, s12
 80108d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108dc:	dd2f      	ble.n	801093e <SMC_HallSensor_Estimation+0x13e>
 80108de:	ee30 0a46 	vsub.f32	s0, s0, s12
 80108e2:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->ThetaCal= s->Theta + 0.3f;
 80108e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80109d0 <SMC_HallSensor_Estimation+0x1d0>

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
 80108ea:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80109cc <SMC_HallSensor_Estimation+0x1cc>
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;

	s->ThetaCal= s->Theta + 0.3f;
 80108ee:	ee30 0a05 	vadd.f32	s0, s0, s10

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
 80108f2:	eeb4 0ac6 	vcmpe.f32	s0, s12
 80108f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fa:	dd2a      	ble.n	8010952 <SMC_HallSensor_Estimation+0x152>
 80108fc:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010900:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
 8010904:	ed94 5a30 	vldr	s10, [r4, #192]	; 0xc0
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8010908:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80109cc <SMC_HallSensor_Estimation+0x1cc>
	s->ThetaCal= s->Theta + 0.3f;

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;

	s->Omega = s->Hall_PIout;
 801090c:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8


	s->trueTheta += (s->Hall_PIout /7.0f) ;
 8010910:	ee77 7a05 	vadd.f32	s15, s14, s10
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8010914:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801091c:	dc36      	bgt.n	801098c <SMC_HallSensor_Estimation+0x18c>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 801091e:	ecbd 8b04 	vpop	{d8-d9}
	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;
 8010922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092a:	bf48      	it	mi
 801092c:	ee77 7a86 	vaddmi.f32	s15, s15, s12

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
 8010930:	edc4 6a31 	vstr	s13, [r4, #196]	; 0xc4
	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;
 8010934:	edc4 7a30 	vstr	s15, [r4, #192]	; 0xc0

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
	s->rpm = 120.0f * s->Futi / 7.0f;
 8010938:	edc4 5a33 	vstr	s11, [r4, #204]	; 0xcc

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 801093c:	bd10      	pop	{r4, pc}
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
	s->Hall_Err0= err;									
	
	s->Theta += s->Hall_PIout ;
	if((2.0f * PI) < s->Theta) s->Theta = s->Theta - (2.0f * PI);
	else if(s->Theta < 0.0f) s->Theta = (2.0f * PI) + s->Theta;
 801093e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010946:	bf48      	it	mi
 8010948:	ee30 0a06 	vaddmi.f32	s0, s0, s12
 801094c:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8010950:	e7c9      	b.n	80108e6 <SMC_HallSensor_Estimation+0xe6>

	s->ThetaCal= s->Theta + 0.3f;

	if((2.0f * PI) < s->ThetaCal) s->ThetaCal = s->ThetaCal - (2.0f * PI);
	else if(s->ThetaCal < 0.0f) s->ThetaCal = (2.0f * PI) + s->ThetaCal;
 8010952:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095a:	bf48      	it	mi
 801095c:	ee30 0a06 	vaddmi.f32	s0, s0, s12
 8010960:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
 8010964:	e7ce      	b.n	8010904 <SMC_HallSensor_Estimation+0x104>
 8010966:	eddf 5a19 	vldr	s11, [pc, #100]	; 80109cc <SMC_HallSensor_Estimation+0x1cc>
 801096a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80109d4 <SMC_HallSensor_Estimation+0x1d4>
 801096e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80109d8 <SMC_HallSensor_Estimation+0x1d8>
 8010972:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8010976:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
 801097a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801097e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8010982:	ee26 6a86 	vmul.f32	s12, s13, s12
 8010986:	eec6 5a05 	vdiv.f32	s11, s12, s10
 801098a:	e79b      	b.n	80108c4 <SMC_HallSensor_Estimation+0xc4>

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 801098c:	ecbd 8b04 	vpop	{d8-d9}

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8010990:	ee77 7ac6 	vsub.f32	s15, s15, s12
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
 8010994:	edc4 6a31 	vstr	s13, [r4, #196]	; 0xc4

	s->Omega = s->Hall_PIout;


	s->trueTheta += (s->Hall_PIout /7.0f) ;
	if((2.0f * PI) < s->trueTheta) s->trueTheta = s->trueTheta - (2.0f * PI);
 8010998:	edc4 7a30 	vstr	s15, [r4, #192]	; 0xc0
	else if(s->trueTheta < 0.0f) s->trueTheta = (2.0f * PI) + s->trueTheta;

	s->Futi   = s->Hall_PIout / (2.* PI) * PWMFREQUENCY;
	s->rpm = 120.0f * s->Futi / 7.0f;
 801099c:	edc4 5a33 	vstr	s11, [r4, #204]	; 0xcc

	//s->Omega = Wpll;
	//s->Theta =Theta;

	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}
 80109a0:	bd10      	pop	{r4, pc}
 80109a2:	bf00      	nop
 80109a4:	20001748 	.word	0x20001748
 80109a8:	449b2000 	.word	0x449b2000
 80109ac:	457ff000 	.word	0x457ff000
 80109b0:	3f80020c 	.word	0x3f80020c
 80109b4:	c8d52769 	.word	0xc8d52769
 80109b8:	c6c6f195 	.word	0xc6c6f195
 80109bc:	bfb6db6e 	.word	0xbfb6db6e
 80109c0:	48d52769 	.word	0x48d52769
 80109c4:	46c6f195 	.word	0x46c6f195
 80109c8:	3fb6db6e 	.word	0x3fb6db6e
 80109cc:	40c90fdb 	.word	0x40c90fdb
 80109d0:	3e99999a 	.word	0x3e99999a
 80109d4:	467a0000 	.word	0x467a0000
 80109d8:	42f00000 	.word	0x42f00000
 80109dc:	00000000 	.word	0x00000000

080109e0 <mcpwm_adc_int_handler>:

/*
 * New ADC samples ready. Do commutation!
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) 
{
 80109e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 80109e2:	4a5c      	ldr	r2, [pc, #368]	; (8010b54 <mcpwm_adc_int_handler+0x174>)

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80109e4:	4c5c      	ldr	r4, [pc, #368]	; (8010b58 <mcpwm_adc_int_handler+0x178>)
	(void)p;
	(void)flags;

	TIM12->CNT = 0;

	curr_start_samples++;
 80109e6:	4e5d      	ldr	r6, [pc, #372]	; (8010b5c <mcpwm_adc_int_handler+0x17c>)
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80109e8:	8923      	ldrh	r3, [r4, #8]
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80109ea:	f8b4 e006 	ldrh.w	lr, [r4, #6]
	(void)flags;

	TIM12->CNT = 0;

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80109ee:	485c      	ldr	r0, [pc, #368]	; (8010b60 <mcpwm_adc_int_handler+0x180>)
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80109f0:	4f5c      	ldr	r7, [pc, #368]	; (8010b64 <mcpwm_adc_int_handler+0x184>)
void mcpwm_adc_int_handler(void *p, uint32_t flags) 
{
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 80109f2:	2500      	movs	r5, #0

/*
 * New ADC samples ready. Do commutation!
 */
void mcpwm_adc_int_handler(void *p, uint32_t flags) 
{
 80109f4:	ed2d 8b04 	vpush	{d8-d9}
	(void)p;
	(void)flags;

	TIM12->CNT = 0;
 80109f8:	6255      	str	r5, [r2, #36]	; 0x24

	curr_start_samples++;
 80109fa:	6831      	ldr	r1, [r6, #0]
 80109fc:	3101      	adds	r1, #1
 80109fe:	6031      	str	r1, [r6, #0]
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 8010a00:	6802      	ldr	r2, [r0, #0]
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;

	SMC_HallSensor_Estimation (&smc1);
 8010a02:	4e59      	ldr	r6, [pc, #356]	; (8010b68 <mcpwm_adc_int_handler+0x188>)
	(void)flags;

	TIM12->CNT = 0;

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 8010a04:	441a      	add	r2, r3
 8010a06:	6002      	str	r2, [r0, #0]
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 8010a08:	683b      	ldr	r3, [r7, #0]

	SMC_HallSensor_Estimation (&smc1);
 8010a0a:	4630      	mov	r0, r6

	TIM12->CNT = 0;

	curr_start_samples++;
	curr0_sum += ADC_Value[ADC_IND_CURR1] ;
	curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 8010a0c:	4473      	add	r3, lr
 8010a0e:	603b      	str	r3, [r7, #0]

	SMC_HallSensor_Estimation (&smc1);
 8010a10:	f7ff fef6 	bl	8010800 <SMC_HallSensor_Estimation>

	// Check for faults that should stop the motor
	uGF.bit.RunMotor = 1;
 8010a14:	4a55      	ldr	r2, [pc, #340]	; (8010b6c <mcpwm_adc_int_handler+0x18c>)
 8010a16:	7813      	ldrb	r3, [r2, #0]
 8010a18:	f043 0302 	orr.w	r3, r3, #2
 8010a1c:	7013      	strb	r3, [r2, #0]
	if( uGF.bit.RunMotor )
 8010a1e:	079b      	lsls	r3, r3, #30
 8010a20:	f140 808d 	bpl.w	8010b3e <mcpwm_adc_int_handler+0x15e>
		{
			ENABLE_GATE();
 8010a24:	4852      	ldr	r0, [pc, #328]	; (8010b70 <mcpwm_adc_int_handler+0x190>)
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
	
			//Uart3_printf(&SD3,  "%f,%d,%d\r\n",ParkParm.qAngle ,ParkParm.qIa,CorrADC2);

			// Calculate commutation angle using estimator
			ParkParm.qAngle = smc1.Theta;
 8010a26:	ed96 9a2e 	vldr	s18, [r6, #184]	; 0xb8
//			LED_RED_ON();
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8010a2a:	4952      	ldr	r1, [pc, #328]	; (8010b74 <mcpwm_adc_int_handler+0x194>)
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a2c:	8922      	ldrh	r2, [r4, #8]
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8010a2e:	88e3      	ldrh	r3, [r4, #6]
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a30:	4c51      	ldr	r4, [pc, #324]	; (8010b78 <mcpwm_adc_int_handler+0x198>)
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010a32:	4f52      	ldr	r7, [pc, #328]	; (8010b7c <mcpwm_adc_int_handler+0x19c>)

	// Check for faults that should stop the motor
	uGF.bit.RunMotor = 1;
	if( uGF.bit.RunMotor )
		{
			ENABLE_GATE();
 8010a34:	2640      	movs	r6, #64	; 0x40
 8010a36:	8306      	strh	r6, [r0, #24]
//			LED_RED_ON();
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8010a38:	888e      	ldrh	r6, [r1, #4]
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8010a3a:	8988      	ldrh	r0, [r1, #12]
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a3c:	ed91 7a00 	vldr	s14, [r1]
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010a40:	edd1 7a02 	vldr	s15, [r1, #8]
	
			//Uart3_printf(&SD3,  "%f,%d,%d\r\n",ParkParm.qAngle ,ParkParm.qIa,CorrADC2);

			// Calculate commutation angle using estimator
			ParkParm.qAngle = smc1.Theta;
 8010a44:	ed84 9a00 	vstr	s18, [r4]
	
			// Calculate qIa,qIb
			 int CorrADC1, CorrADC2;

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8010a48:	b201      	sxth	r1, r0
 8010a4a:	1a5b      	subs	r3, r3, r1
 8010a4c:	ee08 3a10 	vmov	s16, r3
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a50:	b236      	sxth	r6, r6
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010a52:	eeb8 8ac8 	vcvt.f32.s32	s16, s16

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a56:	1b92      	subs	r2, r2, r6
 8010a58:	ee08 2a90 	vmov	s17, r2
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010a5c:	ee28 8a27 	vmul.f32	s16, s16, s15

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a60:	eef8 8ae8 	vcvt.f32.s32	s17, s17
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010a64:	eddf 7a46 	vldr	s15, [pc, #280]	; 8010b80 <mcpwm_adc_int_handler+0x1a0>
			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
			 ParkParm.qIb = MeasCurrParm.qKb * (float)CorrADC2;	
 8010a68:	ed84 8a04 	vstr	s16, [r4, #16]
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010a6c:	ee38 8a08 	vadd.f32	s16, s16, s16

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a70:	ee68 8a87 	vmul.f32	s17, s17, s14
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010a74:	ee28 8a27 	vmul.f32	s16, s16, s15
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010a78:	883b      	ldrh	r3, [r7, #0]

			 CorrADC1 = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
			 CorrADC2 = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
			// ADC_curr_norm_value[2] = -(ADC_curr_norm_value[0] + ADC_curr_norm_value[1]);

			 ParkParm.qIa = MeasCurrParm.qKa * (float)CorrADC1;
 8010a7a:	edc4 8a03 	vstr	s17, [r4, #12]
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010a7e:	eea8 8aa7 	vfma.f32	s16, s17, s15
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010a82:	3301      	adds	r3, #1
 8010a84:	b29b      	uxth	r3, r3
			if (AccumThetaCnt == IRP_PERCALC)
 8010a86:	2b10      	cmp	r3, #16
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010a88:	eeb0 0a49 	vmov.f32	s0, s18
			ParkParm.qAngle = smc1.Theta;
	
			//ParkParm.qAngle = (float)IN[2];
			//smc1.Omega = (float)IN[3] *LOOPTIMEINSEC * IRP_PERCALC * POLEPAIRS/PI;
	
			AccumThetaCnt++;
 8010a8c:	bf14      	ite	ne
 8010a8e:	803b      	strhne	r3, [r7, #0]
			if (AccumThetaCnt == IRP_PERCALC)
			{
				AccumThetaCnt = 0;
 8010a90:	803d      	strheq	r5, [r7, #0]
			}
	
	
			// Calculate qId,qIq from qSin,qCos,qIa,qIb
			ParkParm.qIalpha = ParkParm.qIa;
 8010a92:	edc4 8a05 	vstr	s17, [r4, #20]
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010a96:	ed84 8a06 	vstr	s16, [r4, #24]
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010a9a:	f001 f841 	bl	8011b20 <cosf>
 8010a9e:	eef0 9a40 	vmov.f32	s19, s0
 8010aa2:	eeb0 0a49 	vmov.f32	s0, s18
 8010aa6:	f001 f883 	bl	8011bb0 <sinf>
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010aaa:	ee68 7a29 	vmul.f32	s15, s16, s19
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010aae:	ee28 8a00 	vmul.f32	s16, s16, s0
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010ab2:	eee8 7a80 	vfma.f32	s15, s17, s0
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010ab6:	eea8 8ae9 	vfms.f32	s16, s17, s19
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010aba:	edc4 7a08 	vstr	s15, [r4, #32]
			ParkParm.qIalpha = ParkParm.qIa;
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
			// Ialpha and Ibeta have been calculated. Now do rotation.
			// Get qSin, qCos from ParkParm structure

			ParkParm.qId = -ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010abe:	ed84 8a07 	vstr	s16, [r4, #28]
			ParkParm.qIq = ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
	
			// Calculate control values
			DoControl();
 8010ac2:	f7ff fd45 	bl	8010550 <DoControl>
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010ac6:	edd4 9a00 	vldr	s19, [r4]
 8010aca:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8010ace:	eeb0 0a69 	vmov.f32	s0, s19
 8010ad2:	f001 f825 	bl	8011b20 <cosf>
 8010ad6:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8010ada:	eef0 8a40 	vmov.f32	s17, s0
 8010ade:	eeb0 0a69 	vmov.f32	s0, s19
 8010ae2:	f001 f865 	bl	8011bb0 <sinf>
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010ae6:	ee68 6a88 	vmul.f32	s13, s17, s16
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010aea:	ee60 7a48 	vnmul.f32	s15, s0, s16
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010aee:	eee9 6a00 	vfma.f32	s13, s18, s0
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
 8010af2:	4b24      	ldr	r3, [pc, #144]	; (8010b84 <mcpwm_adc_int_handler+0x1a4>)
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010af4:	eee9 7a28 	vfma.f32	s15, s18, s17
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010af8:	eddf 5a23 	vldr	s11, [pc, #140]	; 8010b88 <mcpwm_adc_int_handler+0x1a8>
			//ParkParm.qAngle += 0.002f;
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010afc:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010b00:	eeb1 7a66 	vneg.f32	s14, s13
 8010b04:	eeb0 6a47 	vmov.f32	s12, s14
 8010b08:	eea7 6aa5 	vfma.f32	s12, s15, s11
			SVGenParm.qVr3 = (-ParkParm.qVbeta	- SQRT3 * ParkParm.qValpha)/2;
 8010b0c:	eea7 7ae5 	vfms.f32	s14, s15, s11
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010b10:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010b14:	ee66 7a25 	vmul.f32	s15, s12, s11
			SVGenParm.qVr3 = (-ParkParm.qVbeta	- SQRT3 * ParkParm.qValpha)/2;
 8010b18:	ee27 7a25 	vmul.f32	s14, s14, s11
			//if(2*PI <  ParkParm.qAngle)ParkParm.qAngle=2*PI - ParkParm.qAngle;
	//==============================================================================
	
			// Calculate qValpha, qVbeta from qSin,qCos,qVd,qVq
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010b1c:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
	
			// Calculate Vr1,Vr2,Vr3 from qValpha, qVbeta
			SVGenParm.qVr1 = ParkParm.qVbeta;
 8010b20:	edc3 6a01 	vstr	s13, [r3, #4]
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010b24:	edc3 7a02 	vstr	s15, [r3, #8]
			SVGenParm.qVr3 = (-ParkParm.qVbeta	- SQRT3 * ParkParm.qValpha)/2;
 8010b28:	ed83 7a03 	vstr	s14, [r3, #12]


			CalcSVGen();
 8010b2c:	f7ff fde8 	bl	8010700 <CalcSVGen>
		}

	// Reset the watchdog
	WWDG_SetCounter(100);

}
 8010b30:	ecbd 8b04 	vpop	{d8-d9}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 8010b34:	2064      	movs	r0, #100	; 0x64

}
 8010b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 8010b3a:	f000 bfd1 	b.w	8011ae0 <WWDG_SetCounter>
	
				
		}
		else
		{
			DISABLE_GATE();
 8010b3e:	4b0c      	ldr	r3, [pc, #48]	; (8010b70 <mcpwm_adc_int_handler+0x190>)
 8010b40:	2240      	movs	r2, #64	; 0x40
 8010b42:	835a      	strh	r2, [r3, #26]
		}

	// Reset the watchdog
	WWDG_SetCounter(100);

}
 8010b44:	ecbd 8b04 	vpop	{d8-d9}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 8010b48:	2064      	movs	r0, #100	; 0x64

}
 8010b4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			DISABLE_GATE();
		}

	// Reset the watchdog
	WWDG_SetCounter(100);
 8010b4e:	f000 bfc7 	b.w	8011ae0 <WWDG_SetCounter>
 8010b52:	bf00      	nop
 8010b54:	40001800 	.word	0x40001800
 8010b58:	20001748 	.word	0x20001748
 8010b5c:	20001744 	.word	0x20001744
 8010b60:	20001898 	.word	0x20001898
 8010b64:	200018e0 	.word	0x200018e0
 8010b68:	20001764 	.word	0x20001764
 8010b6c:	20001930 	.word	0x20001930
 8010b70:	40020800 	.word	0x40020800
 8010b74:	200018c0 	.word	0x200018c0
 8010b78:	20001858 	.word	0x20001858
 8010b7c:	20001760 	.word	0x20001760
 8010b80:	3f13cd3a 	.word	0x3f13cd3a
 8010b84:	20001834 	.word	0x20001834
 8010b88:	3fddb3d7 	.word	0x3fddb3d7
 8010b8c:	00000000 	.word	0x00000000

08010b90 <icuperiodcb>:
			done_func();
		}
	}
}

static void icuperiodcb(ICUDriver *icup) {
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
	...

08010ba0 <icuwidthcb>:

// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 8010ba0:	6903      	ldr	r3, [r0, #16]
 8010ba2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8010ca0 <icuwidthcb+0x100>
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	493e      	ldr	r1, [pc, #248]	; (8010ca4 <icuwidthcb+0x104>)
	float len = last_len_received[0] - pulse_start;
 8010baa:	4a3f      	ldr	r2, [pc, #252]	; (8010ca8 <icuwidthcb+0x108>)
	const float len_set = (pulse_end - pulse_start);
 8010bac:	483f      	ldr	r0, [pc, #252]	; (8010cac <icuwidthcb+0x10c>)

// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 8010bae:	3301      	adds	r3, #1
 8010bb0:	ee07 3a90 	vmov	s15, r3
 8010bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
static volatile bool use_median_filter = false;

// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
 8010bb8:	b570      	push	{r4, r5, r6, lr}
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 8010bba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
static volatile bool use_median_filter = false;

// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
 8010bbe:	ed2d 8b02 	vpush	{d8}
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
 8010bc2:	ed81 7a00 	vstr	s14, [r1]
	float len = last_len_received[0] - pulse_start;
 8010bc6:	edd1 7a00 	vldr	s15, [r1]
 8010bca:	ed92 6a00 	vldr	s12, [r2]
	const float len_set = (pulse_end - pulse_start);
 8010bce:	ed90 7a00 	vldr	s14, [r0]
 8010bd2:	edd2 6a00 	vldr	s13, [r2]
// Function pointers
static void(*done_func)(void) = 0;

static void icuwidthcb(ICUDriver *icup) {
	last_len_received[0] = ((float)icuGetWidthX(icup) / ((float)TIMER_FREQ / 1000.0));
	float len = last_len_received[0] - pulse_start;
 8010bd6:	ee77 7ac6 	vsub.f32	s15, s15, s12
	const float len_set = (pulse_end - pulse_start);
 8010bda:	ee37 7a66 	vsub.f32	s14, s14, s13

	if (len > len_set) {
 8010bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be6:	dd2d      	ble.n	8010c44 <icuwidthcb+0xa4>
		if (len < (len_set * 1.2)) {
 8010be8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8010cb0 <icuwidthcb+0x110>
 8010bec:	ee67 6a26 	vmul.f32	s13, s14, s13
 8010bf0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	d53b      	bpl.n	8010c72 <icuwidthcb+0xd2>
			len = len_set;
 8010bfa:	eef0 7a47 	vmov.f32	s15, s14
			// Too short pulse. Most likely something is wrong.
			len = -1.0;
		}
	}

	if (len >= 0.0) {
 8010bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c06:	db34      	blt.n	8010c72 <icuwidthcb+0xd2>
 8010c08:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if (use_median_filter) {
 8010c0c:	4b29      	ldr	r3, [pc, #164]	; (8010cb4 <icuwidthcb+0x114>)
 8010c0e:	781b      	ldrb	r3, [r3, #0]
			float c = (len * 2.0 - len_set) / len_set;
 8010c10:	ee77 7ac7 	vsub.f32	s15, s15, s14
			len = -1.0;
		}
	}

	if (len >= 0.0) {
		if (use_median_filter) {
 8010c14:	bb83      	cbnz	r3, 8010c78 <icuwidthcb+0xd8>
			c2 = c1;
			c1 = c;

			servo_pos[0] = med;
		} else {
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
 8010c16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010c1a:	4b27      	ldr	r3, [pc, #156]	; (8010cb8 <icuwidthcb+0x118>)
 8010c1c:	edc3 6a00 	vstr	s13, [r3]
 8010c20:	2320      	movs	r3, #32
 8010c22:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 8010c26:	4a25      	ldr	r2, [pc, #148]	; (8010cbc <icuwidthcb+0x11c>)
 8010c28:	2300      	movs	r3, #0
 8010c2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010c2c:	f383 8811 	msr	BASEPRI, r3
		}

		last_update_time = chVTGetSystemTime();

		if (done_func) {
 8010c30:	4b23      	ldr	r3, [pc, #140]	; (8010cc0 <icuwidthcb+0x120>)
			servo_pos[0] = med;
		} else {
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
		}

		last_update_time = chVTGetSystemTime();
 8010c32:	4a24      	ldr	r2, [pc, #144]	; (8010cc4 <icuwidthcb+0x124>)

		if (done_func) {
 8010c34:	681b      	ldr	r3, [r3, #0]
			servo_pos[0] = med;
		} else {
			servo_pos[0] = (len * 2.0 - len_set) / len_set;
		}

		last_update_time = chVTGetSystemTime();
 8010c36:	6011      	str	r1, [r2, #0]

		if (done_func) {
 8010c38:	b1db      	cbz	r3, 8010c72 <icuwidthcb+0xd2>
			done_func();
		}
	}
}
 8010c3a:	ecbd 8b02 	vpop	{d8}
 8010c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}

		last_update_time = chVTGetSystemTime();

		if (done_func) {
			done_func();
 8010c42:	4718      	bx	r3
			len = len_set;
		} else {
			// Too long pulse. Most likely something is wrong.
			len = -1.0;
		}
	} else if (len < 0.0) {
 8010c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c4c:	d5d7      	bpl.n	8010bfe <icuwidthcb+0x5e>
		if ((len + pulse_start) > (pulse_start * 0.8)) {
 8010c4e:	edd2 5a00 	vldr	s11, [r2]
 8010c52:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8010cc8 <icuwidthcb+0x128>
 8010c56:	edd2 6a00 	vldr	s13, [r2]
 8010c5a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010c5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010c62:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c6a:	dd02      	ble.n	8010c72 <icuwidthcb+0xd2>
 8010c6c:	eddf 7a17 	vldr	s15, [pc, #92]	; 8010ccc <icuwidthcb+0x12c>
 8010c70:	e7cc      	b.n	8010c0c <icuwidthcb+0x6c>

		if (done_func) {
			done_func();
		}
	}
}
 8010c72:	ecbd 8b02 	vpop	{d8}
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
		}
	}

	if (len >= 0.0) {
		if (use_median_filter) {
			float c = (len * 2.0 - len_set) / len_set;
 8010c78:	ee87 8a87 	vdiv.f32	s16, s15, s14
			static float c1 = 0.5;
			static float c2 = 0.5;
			float med = utils_middle_of_3(c, c1, c2);
 8010c7c:	4c14      	ldr	r4, [pc, #80]	; (8010cd0 <icuwidthcb+0x130>)
 8010c7e:	4d15      	ldr	r5, [pc, #84]	; (8010cd4 <icuwidthcb+0x134>)
 8010c80:	edd4 0a00 	vldr	s1, [r4]
 8010c84:	ed95 1a00 	vldr	s2, [r5]
 8010c88:	eeb0 0a48 	vmov.f32	s0, s16
 8010c8c:	f000 f8d8 	bl	8010e40 <utils_middle_of_3>

			c2 = c1;
			c1 = c;

			servo_pos[0] = med;
 8010c90:	4b09      	ldr	r3, [pc, #36]	; (8010cb8 <icuwidthcb+0x118>)
			float c = (len * 2.0 - len_set) / len_set;
			static float c1 = 0.5;
			static float c2 = 0.5;
			float med = utils_middle_of_3(c, c1, c2);

			c2 = c1;
 8010c92:	6822      	ldr	r2, [r4, #0]
 8010c94:	602a      	str	r2, [r5, #0]
			c1 = c;
 8010c96:	ed84 8a00 	vstr	s16, [r4]

			servo_pos[0] = med;
 8010c9a:	ed83 0a00 	vstr	s0, [r3]
 8010c9e:	e7bf      	b.n	8010c20 <icuwidthcb+0x80>
 8010ca0:	447a0000 	.word	0x447a0000
 8010ca4:	20001944 	.word	0x20001944
 8010ca8:	20000810 	.word	0x20000810
 8010cac:	20000808 	.word	0x20000808
 8010cb0:	3f99999a 	.word	0x3f99999a
 8010cb4:	20001948 	.word	0x20001948
 8010cb8:	2000193c 	.word	0x2000193c
 8010cbc:	20000c70 	.word	0x20000c70
 8010cc0:	2000194c 	.word	0x2000194c
 8010cc4:	20001940 	.word	0x20001940
 8010cc8:	3f4ccccd 	.word	0x3f4ccccd
 8010ccc:	00000000 	.word	0x00000000
 8010cd0:	2000080c 	.word	0x2000080c
 8010cd4:	20000804 	.word	0x20000804
	...

08010ce0 <servodec_init>:
 *
 * @param d_func
 * A function that should be called every time the servo signals have been
 * decoded. Can be NULL.
 */
void servodec_init(void (*d_func)(void)) {
 8010ce0:	b538      	push	{r3, r4, r5, lr}
	icuStart(&HW_ICU_DEV, &icucfg);
 8010ce2:	4c0d      	ldr	r4, [pc, #52]	; (8010d18 <servodec_init+0x38>)
 8010ce4:	490d      	ldr	r1, [pc, #52]	; (8010d1c <servodec_init+0x3c>)
 *
 * @param d_func
 * A function that should be called every time the servo signals have been
 * decoded. Can be NULL.
 */
void servodec_init(void (*d_func)(void)) {
 8010ce6:	4605      	mov	r5, r0
	icuStart(&HW_ICU_DEV, &icucfg);
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f7fc fd61 	bl	800d7b0 <icuStart>
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
 8010cee:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010cf2:	2180      	movs	r1, #128	; 0x80
 8010cf4:	480a      	ldr	r0, [pc, #40]	; (8010d20 <servodec_init+0x40>)
 8010cf6:	f7fd fe1b 	bl	800e930 <_pal_lld_setgroupmode>
	icuStartCapture(&HW_ICU_DEV);
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f7fc fd68 	bl	800d7d0 <icuStartCapture>
	icuEnableNotifications(&HW_ICU_DEV);
 8010d00:	4620      	mov	r0, r4
 8010d02:	f7fc fd75 	bl	800d7f0 <icuEnableNotifications>
		servo_pos[i] = 0.0;
		last_len_received[i] = 0.0;
	}

	// Set our function pointer
	done_func = d_func;
 8010d06:	4807      	ldr	r0, [pc, #28]	; (8010d24 <servodec_init+0x44>)
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
	icuStartCapture(&HW_ICU_DEV);
	icuEnableNotifications(&HW_ICU_DEV);

	for (int i = 0;i < SERVO_NUM;i++) {
		servo_pos[i] = 0.0;
 8010d08:	4907      	ldr	r1, [pc, #28]	; (8010d28 <servodec_init+0x48>)
		last_len_received[i] = 0.0;
 8010d0a:	4a08      	ldr	r2, [pc, #32]	; (8010d2c <servodec_init+0x4c>)
	}

	// Set our function pointer
	done_func = d_func;
 8010d0c:	6005      	str	r5, [r0, #0]
	palSetPadMode(HW_ICU_GPIO, HW_ICU_PIN, PAL_MODE_ALTERNATE(HW_ICU_GPIO_AF));
	icuStartCapture(&HW_ICU_DEV);
	icuEnableNotifications(&HW_ICU_DEV);

	for (int i = 0;i < SERVO_NUM;i++) {
		servo_pos[i] = 0.0;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	600b      	str	r3, [r1, #0]
		last_len_received[i] = 0.0;
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	bd38      	pop	{r3, r4, r5, pc}
 8010d16:	bf00      	nop
 8010d18:	2000128c 	.word	0x2000128c
 8010d1c:	20000814 	.word	0x20000814
 8010d20:	40020400 	.word	0x40020400
 8010d24:	2000194c 	.word	0x2000194c
 8010d28:	2000193c 	.word	0x2000193c
 8010d2c:	20001944 	.word	0x20001944

08010d30 <servodec_set_pulse_options>:
 *
 * @param end
 * he amount of milliseconds the pulse ends at (default is 2.0)
 */
void servodec_set_pulse_options(float start, float end, bool median_filter) {
	pulse_start = start;
 8010d30:	4904      	ldr	r1, [pc, #16]	; (8010d44 <servodec_set_pulse_options+0x14>)
	pulse_end = end;
 8010d32:	4a05      	ldr	r2, [pc, #20]	; (8010d48 <servodec_set_pulse_options+0x18>)
	use_median_filter = median_filter;
 8010d34:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <servodec_set_pulse_options+0x1c>)
 *
 * @param end
 * he amount of milliseconds the pulse ends at (default is 2.0)
 */
void servodec_set_pulse_options(float start, float end, bool median_filter) {
	pulse_start = start;
 8010d36:	ed81 0a00 	vstr	s0, [r1]
	pulse_end = end;
 8010d3a:	edc2 0a00 	vstr	s1, [r2]
	use_median_filter = median_filter;
 8010d3e:	7018      	strb	r0, [r3, #0]
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	20000810 	.word	0x20000810
 8010d48:	20000808 	.word	0x20000808
 8010d4c:	20001948 	.word	0x20001948

08010d50 <servodec_get_servo>:
 *
 * @return
 * The servo value in the range [-1.0 1.0].
 */
float servodec_get_servo(int servo_num) {
	if (servo_num < SERVO_NUM) {
 8010d50:	2800      	cmp	r0, #0
		return servo_pos[servo_num];
 8010d52:	bfdd      	ittte	le
 8010d54:	4b03      	ldrle	r3, [pc, #12]	; (8010d64 <servodec_get_servo+0x14>)
 8010d56:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8010d5a:	ed90 0a00 	vldrle	s0, [r0]
	} else {
		return 0.0;
 8010d5e:	ed9f 0a02 	vldrgt	s0, [pc, #8]	; 8010d68 <servodec_get_servo+0x18>
	}
}
 8010d62:	4770      	bx	lr
 8010d64:	2000193c 	.word	0x2000193c
	...

08010d70 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8010d70:	b40e      	push	{r1, r2, r3}
 8010d72:	b500      	push	{lr}
 8010d74:	b082      	sub	sp, #8
 8010d76:	aa03      	add	r2, sp, #12
 8010d78:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8010d7c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8010d7e:	f7fe fcbf 	bl	800f700 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8010d82:	b002      	add	sp, #8
 8010d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d88:	b003      	add	sp, #12
 8010d8a:	4770      	bx	lr
 8010d8c:	0000      	movs	r0, r0
	...

08010d90 <Uart3_print_init>:
    USART_CR2_STOP1_BITS | USART_CR2_LINEN,
    0
};

 void Uart3_print_init(void)
{
 8010d90:	b510      	push	{r4, lr}
    * PC10(TX) and PC11(RX) are routed to USART3.
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD3, &sd3cfg);
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
 8010d92:	4c0a      	ldr	r4, [pc, #40]	; (8010dbc <Uart3_print_init+0x2c>)
    * Activates the serial driver 3 using the driver sd3cfg configuration.
    * PC10(TX) and PC11(RX) are routed to USART3.
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD3, &sd3cfg);
 8010d94:	490a      	ldr	r1, [pc, #40]	; (8010dc0 <Uart3_print_init+0x30>)
 8010d96:	480b      	ldr	r0, [pc, #44]	; (8010dc4 <Uart3_print_init+0x34>)
 8010d98:	f7fc fdaa 	bl	800d8f0 <sdStart>
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f240 3282 	movw	r2, #898	; 0x382
 8010da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010da6:	f7fd fdc3 	bl	800e930 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));
 8010daa:	4620      	mov	r0, r4
 8010dac:	f240 3282 	movw	r2, #898	; 0x382
 8010db0:	f44f 6100 	mov.w	r1, #2048	; 0x800

}
 8010db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD3, &sd3cfg);
    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(7));
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(7));
 8010db8:	f7fd bdba 	b.w	800e930 <_pal_lld_setgroupmode>
 8010dbc:	40020800 	.word	0x40020800
 8010dc0:	20000830 	.word	0x20000830
 8010dc4:	200012a4 	.word	0x200012a4
	...

08010dd0 <Uart3_printf>:
    for (i=0; string[i]!='\0'; i++)
        sdPut(sdp, string[i]);
}

 void Uart3_printf(BaseSequentialStream * chp,const char * fmt,...)
{
 8010dd0:	b40e      	push	{r1, r2, r3}
 8010dd2:	b500      	push	{lr}
	//chprintf((BaseSequentialStream *)&SD3, "Example: %d\r\n", 2);
	chprintf(chp,fmt);
 8010dd4:	9901      	ldr	r1, [sp, #4]
 8010dd6:	f7ff ffcb 	bl	8010d70 <chprintf>
}
 8010dda:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dde:	b003      	add	sp, #12
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
	...

08010df0 <Vector11C>:
#include "isr_vector_table.h"
#include "main.h"
#include "mcpwm.h"
#include "hw.h"

CH_IRQ_HANDLER(TIM7_IRQHandler) {
 8010df0:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8010df2:	2101      	movs	r1, #1
 8010df4:	4803      	ldr	r0, [pc, #12]	; (8010e04 <Vector11C+0x14>)
 8010df6:	f000 fe0b 	bl	8011a10 <TIM_ClearITPendingBit>

	CH_IRQ_EPILOGUE();
}
 8010dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

CH_IRQ_HANDLER(TIM7_IRQHandler) {
	CH_IRQ_PROLOGUE();
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);

	CH_IRQ_EPILOGUE();
 8010dfe:	f7fc bc0f 	b.w	800d620 <_port_irq_epilogue>
 8010e02:	bf00      	nop
 8010e04:	40001400 	.word	0x40001400
	...

08010e10 <VectorE0>:
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);
	mcpwm_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
}
*/
CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8010e10:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8010e12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010e16:	f000 fadb 	bl	80113d0 <EXTI_GetITStatus>
 8010e1a:	b900      	cbnz	r0, 8010e1e <VectorE0+0xe>
 8010e1c:	bd08      	pop	{r3, pc}
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;
 8010e1e:	4b04      	ldr	r3, [pc, #16]	; (8010e30 <VectorE0+0x20>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	625a      	str	r2, [r3, #36]	; 0x24

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8010e24:	f44f 6000 	mov.w	r0, #2048	; 0x800
	}
}
 8010e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
		// Clear the encoder counter
		HW_ENC_TIM->CNT = 0;

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8010e2c:	f000 bae0 	b.w	80113f0 <EXTI_ClearITPendingBit>
 8010e30:	40000800 	.word	0x40000800
	...

08010e40 <utils_middle_of_3>:
 * The middle value
 */
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
 8010e40:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8010e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e48:	d80e      	bhi.n	8010e68 <utils_middle_of_3+0x28>
 8010e4a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8010e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e52:	d825      	bhi.n	8010ea0 <utils_middle_of_3+0x60>
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 8010e54:	eef4 0a41 	vcmp.f32	s1, s2
 8010e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5c:	bf98      	it	ls
 8010e5e:	eeb0 1a60 	vmovls.f32	s2, s1
	}
	return middle;
}
 8010e62:	eeb0 0a41 	vmov.f32	s0, s2
 8010e66:	4770      	bx	lr
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8010e68:	da0b      	bge.n	8010e82 <utils_middle_of_3+0x42>
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 8010e6a:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	bf8c      	ite	hi
 8010e74:	eeb0 1a60 	vmovhi.f32	s2, s1
 8010e78:	eeb0 1a40 	vmovls.f32	s2, s0
	}
	return middle;
}
 8010e7c:	eeb0 0a41 	vmov.f32	s0, s2
 8010e80:	4770      	bx	lr
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8010e82:	eef4 0ac1 	vcmpe.f32	s1, s2
 8010e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8a:	d8ee      	bhi.n	8010e6a <utils_middle_of_3+0x2a>
		middle = (a <= c) ? a : c;
 8010e8c:	eeb4 0a41 	vcmp.f32	s0, s2
 8010e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e94:	bf98      	it	ls
 8010e96:	eeb0 1a40 	vmovls.f32	s2, s0
	} else {
		middle = (a <= b) ? a : b;
	}
	return middle;
}
 8010e9a:	eeb0 0a41 	vmov.f32	s0, s2
 8010e9e:	4770      	bx	lr
float utils_middle_of_3(float a, float b, float c) {
	float middle;

	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8010ea0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8010ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea8:	db04      	blt.n	8010eb4 <utils_middle_of_3+0x74>
 8010eaa:	eef4 0ac1 	vcmpe.f32	s1, s2
 8010eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb2:	d9eb      	bls.n	8010e8c <utils_middle_of_3+0x4c>
		middle = (a <= c) ? a : c;
 8010eb4:	eeb0 1a40 	vmov.f32	s2, s0
	} else {
		middle = (a <= b) ? a : b;
	}
	return middle;
}
 8010eb8:	eeb0 0a41 	vmov.f32	s0, s2
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 8010ec0:	4b04      	ldr	r3, [pc, #16]	; (8010ed4 <utils_sys_lock_cnt+0x14>)
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	b912      	cbnz	r2, 8010ecc <utils_sys_lock_cnt+0xc>
 8010ec6:	2220      	movs	r2, #32
 8010ec8:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	3201      	adds	r2, #1
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	4770      	bx	lr
 8010ed4:	20001950 	.word	0x20001950
	...

08010ee0 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 8010ee0:	4b05      	ldr	r3, [pc, #20]	; (8010ef8 <utils_sys_unlock_cnt+0x18>)
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	b132      	cbz	r2, 8010ef4 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	3a01      	subs	r2, #1
 8010eea:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	b90b      	cbnz	r3, 8010ef4 <utils_sys_unlock_cnt+0x14>
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop
 8010ef8:	20001950 	.word	0x20001950
 8010efc:	00000000 	.word	0x00000000

08010f00 <timeout_thread>:
systime_t timeout_get_timeout_msec(void) {
	return timeout_msec;
}

static THD_FUNCTION(timeout_thread, arg)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	4f14      	ldr	r7, [pc, #80]	; (8010f54 <timeout_thread+0x54>)
 8010f04:	4c14      	ldr	r4, [pc, #80]	; (8010f58 <timeout_thread+0x58>)
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	4a14      	ldr	r2, [pc, #80]	; (8010f5c <timeout_thread+0x5c>)
 8010f0a:	f8df a058 	ldr.w	sl, [pc, #88]	; 8010f64 <timeout_thread+0x64>
 8010f0e:	4d14      	ldr	r5, [pc, #80]	; (8010f60 <timeout_thread+0x60>)

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010f10:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8010f68 <timeout_thread+0x68>
 8010f14:	619a      	str	r2, [r3, #24]
 8010f16:	46a0      	mov	r8, r4
		{
			has_timeout = true;
		} 
		else
		{
			has_timeout = false;
 8010f18:	2600      	movs	r6, #0
 8010f1a:	e014      	b.n	8010f46 <timeout_thread+0x46>

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010f1c:	f8da 1000 	ldr.w	r1, [sl]
 8010f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f22:	f8d8 0000 	ldr.w	r0, [r8]
 8010f26:	fb03 f300 	mul.w	r3, r3, r0
 8010f2a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8010f2e:	1a52      	subs	r2, r2, r1
 8010f30:	fba9 1303 	umull	r1, r3, r9, r3
 8010f34:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
		{
			has_timeout = true;
 8010f38:	f04f 0301 	mov.w	r3, #1

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010f3c:	d908      	bls.n	8010f50 <timeout_thread+0x50>
		{
			has_timeout = true;
 8010f3e:	702b      	strb	r3, [r5, #0]
		else
		{
			has_timeout = false;
		}

		chThdSleepMilliseconds(10);
 8010f40:	2064      	movs	r0, #100	; 0x64
 8010f42:	f7fb fff5 	bl	800cf30 <chThdSleep>

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8010f46:	6822      	ldr	r2, [r4, #0]
 8010f48:	f242 7310 	movw	r3, #10000	; 0x2710
 8010f4c:	2a00      	cmp	r2, #0
 8010f4e:	d1e5      	bne.n	8010f1c <timeout_thread+0x1c>
		{
			has_timeout = true;
		} 
		else
		{
			has_timeout = false;
 8010f50:	702e      	strb	r6, [r5, #0]
 8010f52:	e7f5      	b.n	8010f40 <timeout_thread+0x40>
 8010f54:	20000c70 	.word	0x20000c70
 8010f58:	20001cf8 	.word	0x20001cf8
 8010f5c:	08012d50 	.word	0x08012d50
 8010f60:	20001cf4 	.word	0x20001cf4
 8010f64:	20001cf0 	.word	0x20001cf0
 8010f68:	10624dd3 	.word	0x10624dd3
 8010f6c:	00000000 	.word	0x00000000

08010f70 <timeout_configure>:
static THD_WORKING_AREA(timeout_thread_wa, 512);
static THD_FUNCTION(timeout_thread, arg);


void timeout_configure(systime_t timeout) {
	timeout_msec = timeout;
 8010f70:	4b01      	ldr	r3, [pc, #4]	; (8010f78 <timeout_configure+0x8>)
 8010f72:	6018      	str	r0, [r3, #0]
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	20001cf8 	.word	0x20001cf8
 8010f7c:	00000000 	.word	0x00000000

08010f80 <timeout_reset>:
 8010f80:	4a02      	ldr	r2, [pc, #8]	; (8010f8c <timeout_reset+0xc>)
}

void timeout_reset(void) {
	last_update_time = chVTGetSystemTimeX();
 8010f82:	4b03      	ldr	r3, [pc, #12]	; (8010f90 <timeout_reset+0x10>)
 8010f84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010f86:	601a      	str	r2, [r3, #0]
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	20000c70 	.word	0x20000c70
 8010f90:	20001cf0 	.word	0x20001cf0
	...

08010fa0 <timeout_init>:
		chThdSleepMilliseconds(10);
	}

}

void timeout_init(void) {
 8010fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	timeout_msec = 1000;
 8010fa2:	490a      	ldr	r1, [pc, #40]	; (8010fcc <timeout_init+0x2c>)
	last_update_time = 0;
 8010fa4:	4e0a      	ldr	r6, [pc, #40]	; (8010fd0 <timeout_init+0x30>)
	has_timeout = false;
 8010fa6:	4d0b      	ldr	r5, [pc, #44]	; (8010fd4 <timeout_init+0x34>)

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010fa8:	4b0b      	ldr	r3, [pc, #44]	; (8010fd8 <timeout_init+0x38>)
 8010faa:	480c      	ldr	r0, [pc, #48]	; (8010fdc <timeout_init+0x3c>)
		chThdSleepMilliseconds(10);
	}

}

void timeout_init(void) {
 8010fac:	b083      	sub	sp, #12
	timeout_msec = 1000;
	last_update_time = 0;
 8010fae:	2400      	movs	r4, #0
	}

}

void timeout_init(void) {
	timeout_msec = 1000;
 8010fb0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	last_update_time = 0;
	has_timeout = false;

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010fb4:	9400      	str	r4, [sp, #0]
 8010fb6:	2240      	movs	r2, #64	; 0x40
	}

}

void timeout_init(void) {
	timeout_msec = 1000;
 8010fb8:	600f      	str	r7, [r1, #0]
	last_update_time = 0;
	has_timeout = false;

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010fba:	f44f 7166 	mov.w	r1, #920	; 0x398

}

void timeout_init(void) {
	timeout_msec = 1000;
	last_update_time = 0;
 8010fbe:	6034      	str	r4, [r6, #0]
	has_timeout = false;
 8010fc0:	702c      	strb	r4, [r5, #0]

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8010fc2:	f7fb ff7d 	bl	800cec0 <chThdCreateStatic>
}
 8010fc6:	b003      	add	sp, #12
 8010fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	20001cf8 	.word	0x20001cf8
 8010fd0:	20001cf0 	.word	0x20001cf0
 8010fd4:	20001cf4 	.word	0x20001cf4
 8010fd8:	08010f01 	.word	0x08010f01
 8010fdc:	20001958 	.word	0x20001958

08010fe0 <app_init>:

// Private variables
app_use app_to_use = APP_PPM;

void app_init(void)
{
 8010fe0:	b508      	push	{r3, lr}
	//Uart3_printf(&SD3, (uint8_t *)"app_init.....\r\n");
	switch (app_to_use)
 8010fe2:	4b08      	ldr	r3, [pc, #32]	; (8011004 <app_init+0x24>)
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d006      	beq.n	8010ff8 <app_init+0x18>
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d103      	bne.n	8010ff6 <app_init+0x16>
			break;

		default:
			break;
	}
}
 8010fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			app_ppm_configure();
			app_ppm_start();
			break;

		case APP_UART:
			hw_stop_i2c();
 8010ff2:	f7fe bf15 	b.w	800fe20 <hw_stop_i2c>
 8010ff6:	bd08      	pop	{r3, pc}
{
	//Uart3_printf(&SD3, (uint8_t *)"app_init.....\r\n");
	switch (app_to_use)
	{
		case APP_PPM:
			app_ppm_configure();
 8010ff8:	f000 f882 	bl	8011100 <app_ppm_configure>
			break;

		default:
			break;
	}
}
 8010ffc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	//Uart3_printf(&SD3, (uint8_t *)"app_init.....\r\n");
	switch (app_to_use)
	{
		case APP_PPM:
			app_ppm_configure();
			app_ppm_start();
 8011000:	f000 b8a6 	b.w	8011150 <app_ppm_start>
 8011004:	2000083c 	.word	0x2000083c
	...

08011010 <ppm_thread>:
 8011010:	4a0f      	ldr	r2, [pc, #60]	; (8011050 <ppm_thread+0x40>)
 8011012:	4910      	ldr	r1, [pc, #64]	; (8011054 <ppm_thread+0x44>)
 8011014:	6992      	ldr	r2, [r2, #24]
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
	chSysUnlockFromISR();
}

static THD_FUNCTION(ppm_thread, arg)
{
 8011016:	b508      	push	{r3, lr}
	

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();

	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8011018:	4b0f      	ldr	r3, [pc, #60]	; (8011058 <ppm_thread+0x48>)
 801101a:	6191      	str	r1, [r2, #24]
 801101c:	ed93 0a03 	vldr	s0, [r3, #12]
 8011020:	edd3 0a04 	vldr	s1, [r3, #16]
 8011024:	7d18      	ldrb	r0, [r3, #20]
	(void)arg;

	

	chRegSetThreadName("APP_PPM");
	ppm_tp = chThdGetSelfX();
 8011026:	4b0d      	ldr	r3, [pc, #52]	; (801105c <ppm_thread+0x4c>)
 8011028:	601a      	str	r2, [r3, #0]

	servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 801102a:	f7ff fe81 	bl	8010d30 <servodec_set_pulse_options>
	servodec_init(servodec_func);
 801102e:	480c      	ldr	r0, [pc, #48]	; (8011060 <ppm_thread+0x50>)
 8011030:	f7ff fe56 	bl	8010ce0 <servodec_init>
	is_running = true;
 8011034:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <ppm_thread+0x54>)
 8011036:	2201      	movs	r2, #1
 8011038:	701a      	strb	r2, [r3, #0]

	for(;;) {

		chEvtWaitAny((eventmask_t) 1);
 801103a:	2001      	movs	r0, #1
 801103c:	f7fc f938 	bl	800d2b0 <chEvtWaitAny>
		//{
		//	pulses_without_power = 0;
		//	continue;
		//}

		float servo_val = servodec_get_servo(0);
 8011040:	2000      	movs	r0, #0
 8011042:	f7ff fe85 	bl	8010d50 <servodec_get_servo>


		//Uart3_printf(&SD3, (uint8_t *)"servo : %f\r\n",(float)servo_val);

		chThdSleepMilliseconds(1000);
 8011046:	f242 7010 	movw	r0, #10000	; 0x2710
 801104a:	f7fb ff71 	bl	800cf30 <chThdSleep>
 801104e:	e7f4      	b.n	801103a <ppm_thread+0x2a>
 8011050:	20000c70 	.word	0x20000c70
 8011054:	08012d60 	.word	0x08012d60
 8011058:	200022b8 	.word	0x200022b8
 801105c:	20001d00 	.word	0x20001d00
 8011060:	08011071 	.word	0x08011071
 8011064:	20001cfc 	.word	0x20001cfc
	...

08011070 <servodec_func>:
	chSysLock();
	chVTSetI(&vt, MS2ST(1), update, NULL);
	chSysUnlock();
}

static void servodec_func(void) {
 8011070:	b508      	push	{r3, lr}
 8011072:	2320      	movs	r3, #32
 8011074:	f383 8811 	msr	BASEPRI, r3
	chSysLockFromISR();
	timeout_reset();
 8011078:	f7ff ff82 	bl	8010f80 <timeout_reset>
	Uart3_printf(&SD3, (uint8_t *)"-");
 801107c:	4906      	ldr	r1, [pc, #24]	; (8011098 <servodec_func+0x28>)
 801107e:	4807      	ldr	r0, [pc, #28]	; (801109c <servodec_func+0x2c>)
 8011080:	f7ff fea6 	bl	8010dd0 <Uart3_printf>
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 8011084:	4b06      	ldr	r3, [pc, #24]	; (80110a0 <servodec_func+0x30>)
 8011086:	2101      	movs	r1, #1
 8011088:	6818      	ldr	r0, [r3, #0]
 801108a:	f7fc f8e1 	bl	800d250 <chEvtSignalI>
 801108e:	2300      	movs	r3, #0
 8011090:	f383 8811 	msr	BASEPRI, r3
 8011094:	bd08      	pop	{r3, pc}
 8011096:	bf00      	nop
 8011098:	08012d68 	.word	0x08012d68
 801109c:	200012a4 	.word	0x200012a4
 80110a0:	20001d00 	.word	0x20001d00
	...

080110b0 <update>:
	chSysUnlockFromISR();
}


static void update(void *p) {
 80110b0:	b510      	push	{r4, lr}
 80110b2:	2320      	movs	r3, #32
 80110b4:	4604      	mov	r4, r0
 80110b6:	f383 8811 	msr	BASEPRI, r3
 80110ba:	480c      	ldr	r0, [pc, #48]	; (80110ec <update+0x3c>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80110bc:	68c3      	ldr	r3, [r0, #12]
 80110be:	b10b      	cbz	r3, 80110c4 <update+0x14>
    chVTDoResetI(vtp);
 80110c0:	f7fb fd76 	bl	800cbb0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80110c4:	4623      	mov	r3, r4
 80110c6:	4a0a      	ldr	r2, [pc, #40]	; (80110f0 <update+0x40>)
 80110c8:	4808      	ldr	r0, [pc, #32]	; (80110ec <update+0x3c>)
 80110ca:	2114      	movs	r1, #20
 80110cc:	f7fb fd50 	bl	800cb70 <chVTDoSetI>
	chSysLockFromISR();
	chVTSetI(&vt, MS2ST(2), update, p);
	Uart3_printf(&SD3, (uint8_t *)".");
 80110d0:	4908      	ldr	r1, [pc, #32]	; (80110f4 <update+0x44>)
 80110d2:	4809      	ldr	r0, [pc, #36]	; (80110f8 <update+0x48>)
 80110d4:	f7ff fe7c 	bl	8010dd0 <Uart3_printf>
	chEvtSignalI(ppm_tp, (eventmask_t) 1);
 80110d8:	4b08      	ldr	r3, [pc, #32]	; (80110fc <update+0x4c>)
 80110da:	2101      	movs	r1, #1
 80110dc:	6818      	ldr	r0, [r3, #0]
 80110de:	f7fc f8b7 	bl	800d250 <chEvtSignalI>
 80110e2:	2300      	movs	r3, #0
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	bd10      	pop	{r4, pc}
 80110ea:	bf00      	nop
 80110ec:	200022a4 	.word	0x200022a4
 80110f0:	080110b1 	.word	0x080110b1
 80110f4:	08012d6c 	.word	0x08012d6c
 80110f8:	200012a4 	.word	0x200012a4
 80110fc:	20001d00 	.word	0x20001d00

08011100 <app_ppm_configure>:
static volatile int pulses_without_power = 0;

// Private functions
static void update(void *p);

void app_ppm_configure(ppm_config *conf) {
 8011100:	b4f0      	push	{r4, r5, r6, r7}
	config = *conf;
 8011102:	4605      	mov	r5, r0
 8011104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011106:	4e0c      	ldr	r6, [pc, #48]	; (8011138 <app_ppm_configure+0x38>)
	pulses_without_power = 0;
 8011108:	4f0c      	ldr	r7, [pc, #48]	; (801113c <app_ppm_configure+0x3c>)

// Private functions
static void update(void *p);

void app_ppm_configure(ppm_config *conf) {
	config = *conf;
 801110a:	4634      	mov	r4, r6
 801110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011112:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011116:	e884 0003 	stmia.w	r4, {r0, r1}
	pulses_without_power = 0;
 801111a:	2200      	movs	r2, #0

	if (is_running) {
 801111c:	4b08      	ldr	r3, [pc, #32]	; (8011140 <app_ppm_configure+0x40>)
// Private functions
static void update(void *p);

void app_ppm_configure(ppm_config *conf) {
	config = *conf;
	pulses_without_power = 0;
 801111e:	603a      	str	r2, [r7, #0]

	if (is_running) {
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	b90b      	cbnz	r3, 8011128 <app_ppm_configure+0x28>
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
	}
}
 8011124:	bcf0      	pop	{r4, r5, r6, r7}
 8011126:	4770      	bx	lr
void app_ppm_configure(ppm_config *conf) {
	config = *conf;
	pulses_without_power = 0;

	if (is_running) {
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8011128:	ed96 0a03 	vldr	s0, [r6, #12]
 801112c:	edd6 0a04 	vldr	s1, [r6, #16]
 8011130:	7d30      	ldrb	r0, [r6, #20]
	}
}
 8011132:	bcf0      	pop	{r4, r5, r6, r7}
void app_ppm_configure(ppm_config *conf) {
	config = *conf;
	pulses_without_power = 0;

	if (is_running) {
		servodec_set_pulse_options(config.pulse_start, config.pulse_end, config.median_filter);
 8011134:	f7ff bdfc 	b.w	8010d30 <servodec_set_pulse_options>
 8011138:	200022b8 	.word	0x200022b8
 801113c:	200022a0 	.word	0x200022a0
 8011140:	20001cfc 	.word	0x20001cfc
	...

08011150 <app_ppm_start>:
	}
}

void app_ppm_start(void) {
 8011150:	b500      	push	{lr}
 8011152:	b083      	sub	sp, #12
	chThdCreateStatic(ppm_thread_wa, sizeof(ppm_thread_wa), NORMALPRIO, ppm_thread, NULL);
 8011154:	2300      	movs	r3, #0
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	2240      	movs	r2, #64	; 0x40
 801115a:	4b0f      	ldr	r3, [pc, #60]	; (8011198 <app_ppm_start+0x48>)
 801115c:	480f      	ldr	r0, [pc, #60]	; (801119c <app_ppm_start+0x4c>)
 801115e:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 8011162:	f7fb fead 	bl	800cec0 <chThdCreateStatic>


Uart3_printf(&SD3, (uint8_t *)"app_ppm_start.....\r\n");
 8011166:	490e      	ldr	r1, [pc, #56]	; (80111a0 <app_ppm_start+0x50>)
 8011168:	480e      	ldr	r0, [pc, #56]	; (80111a4 <app_ppm_start+0x54>)
 801116a:	f7ff fe31 	bl	8010dd0 <Uart3_printf>
 801116e:	2320      	movs	r3, #32
 8011170:	f383 8811 	msr	BASEPRI, r3
 8011174:	480c      	ldr	r0, [pc, #48]	; (80111a8 <app_ppm_start+0x58>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8011176:	68c3      	ldr	r3, [r0, #12]
 8011178:	b10b      	cbz	r3, 801117e <app_ppm_start+0x2e>
    chVTDoResetI(vtp);
 801117a:	f7fb fd19 	bl	800cbb0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 801117e:	2300      	movs	r3, #0
 8011180:	4a0a      	ldr	r2, [pc, #40]	; (80111ac <app_ppm_start+0x5c>)
 8011182:	4809      	ldr	r0, [pc, #36]	; (80111a8 <app_ppm_start+0x58>)
 8011184:	210a      	movs	r1, #10
 8011186:	f7fb fcf3 	bl	800cb70 <chVTDoSetI>
 801118a:	2300      	movs	r3, #0
 801118c:	f383 8811 	msr	BASEPRI, r3

	chSysLock();
	chVTSetI(&vt, MS2ST(1), update, NULL);
	chSysUnlock();
}
 8011190:	b003      	add	sp, #12
 8011192:	f85d fb04 	ldr.w	pc, [sp], #4
 8011196:	bf00      	nop
 8011198:	08011011 	.word	0x08011011
 801119c:	20001d08 	.word	0x20001d08
 80111a0:	08012d70 	.word	0x08012d70
 80111a4:	200012a4 	.word	0x200012a4
 80111a8:	200022a4 	.word	0x200022a4
 80111ac:	080110b1 	.word	0x080110b1

080111b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80111b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80111b2:	6844      	ldr	r4, [r0, #4]
 80111b4:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80111b6:	790e      	ldrb	r6, [r1, #4]
 80111b8:	f8d1 e010 	ldr.w	lr, [r1, #16]
 80111bc:	68cd      	ldr	r5, [r1, #12]
 80111be:	4b0f      	ldr	r3, [pc, #60]	; (80111fc <ADC_Init+0x4c>)
 80111c0:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 80111c4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80111c8:	4322      	orrs	r2, r4
 80111ca:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80111ce:	6042      	str	r2, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80111d0:	6887      	ldr	r7, [r0, #8]
 80111d2:	688a      	ldr	r2, [r1, #8]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80111d4:	794e      	ldrb	r6, [r1, #5]
 80111d6:	ea4e 0405 	orr.w	r4, lr, r5
 80111da:	4322      	orrs	r2, r4
 80111dc:	403b      	ands	r3, r7
 80111de:	4313      	orrs	r3, r2
 80111e0:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80111e4:	6083      	str	r3, [r0, #8]
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80111e6:	7d0a      	ldrb	r2, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80111e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80111ea:	3a01      	subs	r2, #1
 80111ec:	b2d2      	uxtb	r2, r2
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80111ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80111f2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80111f6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80111f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111fa:	bf00      	nop
 80111fc:	c0fff7fd 	.word	0xc0fff7fd

08011200 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8011200:	b470      	push	{r4, r5, r6}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011202:	6842      	ldr	r2, [r0, #4]
 8011204:	6806      	ldr	r6, [r0, #0]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8011206:	4d06      	ldr	r5, [pc, #24]	; (8011220 <ADC_CommonInit+0x20>)
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011208:	6884      	ldr	r4, [r0, #8]
 801120a:	68c1      	ldr	r1, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 801120c:	4b05      	ldr	r3, [pc, #20]	; (8011224 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 801120e:	6868      	ldr	r0, [r5, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011210:	4332      	orrs	r2, r6
 8011212:	4322      	orrs	r2, r4
 8011214:	430a      	orrs	r2, r1
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8011216:	4003      	ands	r3, r0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011218:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 801121a:	606b      	str	r3, [r5, #4]
}
 801121c:	bc70      	pop	{r4, r5, r6}
 801121e:	4770      	bx	lr
 8011220:	40012300 	.word	0x40012300
 8011224:	fffc30e0 	.word	0xfffc30e0
	...

08011230 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8011230:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011232:	b919      	cbnz	r1, 801123c <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8011234:	f023 0301 	bic.w	r3, r3, #1
 8011238:	6083      	str	r3, [r0, #8]
 801123a:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 801123c:	f043 0301 	orr.w	r3, r3, #1
 8011240:	6083      	str	r3, [r0, #8]
 8011242:	4770      	bx	lr
	...

08011250 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011250:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8011252:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8011254:	d91d      	bls.n	8011292 <ADC_RegularChannelConfig+0x42>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8011256:	f1a1 060a 	sub.w	r6, r1, #10
 801125a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 801125e:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011260:	2407      	movs	r4, #7
 8011262:	40b4      	lsls	r4, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8011264:	40b3      	lsls	r3, r6
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011266:	ea25 0404 	bic.w	r4, r5, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 801126a:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 801126c:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 801126e:	60c3      	str	r3, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8011270:	d91b      	bls.n	80112aa <ADC_RegularChannelConfig+0x5a>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8011272:	2a0c      	cmp	r2, #12
 8011274:	d927      	bls.n	80112c6 <ADC_RegularChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8011276:	3a0d      	subs	r2, #13
 8011278:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 801127c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 801127e:	241f      	movs	r4, #31
 8011280:	4094      	lsls	r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011282:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8011286:	ea23 0104 	bic.w	r1, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 801128a:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 801128c:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 801128e:	bc70      	pop	{r4, r5, r6}
 8011290:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011292:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8011296:	6905      	ldr	r5, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8011298:	2407      	movs	r4, #7
 801129a:	40b4      	lsls	r4, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 801129c:	40b3      	lsls	r3, r6
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 801129e:	ea25 0404 	bic.w	r4, r5, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80112a2:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80112a4:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80112a6:	6103      	str	r3, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80112a8:	d8e3      	bhi.n	8011272 <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80112aa:	3a01      	subs	r2, #1
 80112ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80112b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80112b2:	241f      	movs	r4, #31
 80112b4:	4094      	lsls	r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80112b6:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80112ba:	ea23 0104 	bic.w	r1, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80112be:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80112c0:	6342      	str	r2, [r0, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80112c2:	bc70      	pop	{r4, r5, r6}
 80112c4:	4770      	bx	lr
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80112c6:	3a07      	subs	r2, #7
 80112c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80112cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80112ce:	241f      	movs	r4, #31
 80112d0:	4094      	lsls	r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80112d2:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80112d6:	ea23 0104 	bic.w	r1, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80112da:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80112dc:	6302      	str	r2, [r0, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80112de:	bc70      	pop	{r4, r5, r6}
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop
	...

080112f0 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80112f0:	4a05      	ldr	r2, [pc, #20]	; (8011308 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 80112f2:	6853      	ldr	r3, [r2, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80112f4:	b918      	cbnz	r0, 80112fe <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80112f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80112fa:	6053      	str	r3, [r2, #4]
 80112fc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80112fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011302:	6053      	str	r3, [r2, #4]
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	40012300 	.word	0x40012300
 801130c:	00000000 	.word	0x00000000

08011310 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011310:	f101 0218 	add.w	r2, r1, #24
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8011314:	b4f0      	push	{r4, r5, r6, r7}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011316:	ca8c      	ldmia	r2, {r2, r3, r7}
 8011318:	68cd      	ldr	r5, [r1, #12]
 801131a:	680e      	ldr	r6, [r1, #0]
 801131c:	694c      	ldr	r4, [r1, #20]
 801131e:	432e      	orrs	r6, r5
 8011320:	4326      	orrs	r6, r4
 8011322:	4316      	orrs	r6, r2
 8011324:	431e      	orrs	r6, r3
 8011326:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8011328:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801132a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 801132c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801132e:	433e      	orrs	r6, r7
 8011330:	4316      	orrs	r6, r2
 8011332:	431e      	orrs	r6, r3
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011334:	4a0b      	ldr	r2, [pc, #44]	; (8011364 <DMA_Init+0x54>)
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8011336:	6803      	ldr	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011338:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 801133a:	4335      	orrs	r5, r6
 801133c:	432c      	orrs	r4, r5
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801133e:	401a      	ands	r2, r3
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011340:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8011342:	6002      	str	r2, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011344:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8011346:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8011348:	690d      	ldr	r5, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 801134a:	684c      	ldr	r4, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 801134c:	6889      	ldr	r1, [r1, #8]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 801134e:	433b      	orrs	r3, r7
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011350:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011354:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8011356:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8011358:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 801135a:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 801135c:	60c1      	str	r1, [r0, #12]
}
 801135e:	bcf0      	pop	{r4, r5, r6, r7}
 8011360:	4770      	bx	lr
 8011362:	bf00      	nop
 8011364:	f01c803f 	.word	0xf01c803f
	...

08011370 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011370:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011372:	b919      	cbnz	r1, 801137c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8011374:	f023 0301 	bic.w	r3, r3, #1
 8011378:	6003      	str	r3, [r0, #0]
 801137a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 801137c:	f043 0301 	orr.w	r3, r3, #1
 8011380:	6003      	str	r3, [r0, #0]
 8011382:	4770      	bx	lr
	...

08011390 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8011390:	060b      	lsls	r3, r1, #24
 8011392:	d50c      	bpl.n	80113ae <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011394:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8011396:	b1aa      	cbz	r2, 80113c4 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801139c:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 801139e:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80113a0:	d00f      	beq.n	80113c2 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80113a2:	6803      	ldr	r3, [r0, #0]
 80113a4:	f001 011e 	and.w	r1, r1, #30
 80113a8:	4319      	orrs	r1, r3
 80113aa:	6001      	str	r1, [r0, #0]
 80113ac:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80113ae:	2980      	cmp	r1, #128	; 0x80
 80113b0:	d007      	beq.n	80113c2 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 80113b2:	2a00      	cmp	r2, #0
 80113b4:	d1f5      	bne.n	80113a2 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80113b6:	6803      	ldr	r3, [r0, #0]
 80113b8:	f001 011e 	and.w	r1, r1, #30
 80113bc:	ea23 0101 	bic.w	r1, r3, r1
 80113c0:	6001      	str	r1, [r0, #0]
 80113c2:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80113c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80113c8:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80113ca:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80113cc:	d1f3      	bne.n	80113b6 <DMA_ITConfig+0x26>
 80113ce:	4770      	bx	lr

080113d0 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80113d0:	4b03      	ldr	r3, [pc, #12]	; (80113e0 <EXTI_GetITStatus+0x10>)
 80113d2:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 80113d4:	4203      	tst	r3, r0
  
}
 80113d6:	bf14      	ite	ne
 80113d8:	2001      	movne	r0, #1
 80113da:	2000      	moveq	r0, #0
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	40013c00 	.word	0x40013c00
	...

080113f0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80113f0:	4b01      	ldr	r3, [pc, #4]	; (80113f8 <EXTI_ClearITPendingBit+0x8>)
 80113f2:	6158      	str	r0, [r3, #20]
 80113f4:	4770      	bx	lr
 80113f6:	bf00      	nop
 80113f8:	40013c00 	.word	0x40013c00
 80113fc:	00000000 	.word	0x00000000

08011400 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011400:	b929      	cbnz	r1, 801140e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8011402:	4a05      	ldr	r2, [pc, #20]	; (8011418 <RCC_AHB1PeriphClockCmd+0x18>)
 8011404:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011406:	ea23 0000 	bic.w	r0, r3, r0
 801140a:	6310      	str	r0, [r2, #48]	; 0x30
 801140c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 801140e:	4b02      	ldr	r3, [pc, #8]	; (8011418 <RCC_AHB1PeriphClockCmd+0x18>)
 8011410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011412:	4310      	orrs	r0, r2
 8011414:	6318      	str	r0, [r3, #48]	; 0x30
 8011416:	4770      	bx	lr
 8011418:	40023800 	.word	0x40023800
 801141c:	00000000 	.word	0x00000000

08011420 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011420:	b929      	cbnz	r1, 801142e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8011422:	4a05      	ldr	r2, [pc, #20]	; (8011438 <RCC_APB1PeriphClockCmd+0x18>)
 8011424:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011426:	ea23 0000 	bic.w	r0, r3, r0
 801142a:	6410      	str	r0, [r2, #64]	; 0x40
 801142c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 801142e:	4b02      	ldr	r3, [pc, #8]	; (8011438 <RCC_APB1PeriphClockCmd+0x18>)
 8011430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011432:	4310      	orrs	r0, r2
 8011434:	6418      	str	r0, [r3, #64]	; 0x40
 8011436:	4770      	bx	lr
 8011438:	40023800 	.word	0x40023800
 801143c:	00000000 	.word	0x00000000

08011440 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011440:	b929      	cbnz	r1, 801144e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8011442:	4a05      	ldr	r2, [pc, #20]	; (8011458 <RCC_APB2PeriphClockCmd+0x18>)
 8011444:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011446:	ea23 0000 	bic.w	r0, r3, r0
 801144a:	6450      	str	r0, [r2, #68]	; 0x44
 801144c:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 801144e:	4b02      	ldr	r3, [pc, #8]	; (8011458 <RCC_APB2PeriphClockCmd+0x18>)
 8011450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011452:	4310      	orrs	r0, r2
 8011454:	6458      	str	r0, [r3, #68]	; 0x44
 8011456:	4770      	bx	lr
 8011458:	40023800 	.word	0x40023800
 801145c:	00000000 	.word	0x00000000

08011460 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011460:	b929      	cbnz	r1, 801146e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8011462:	4a05      	ldr	r2, [pc, #20]	; (8011478 <RCC_APB1PeriphResetCmd+0x18>)
 8011464:	6a13      	ldr	r3, [r2, #32]
 8011466:	ea23 0000 	bic.w	r0, r3, r0
 801146a:	6210      	str	r0, [r2, #32]
 801146c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 801146e:	4b02      	ldr	r3, [pc, #8]	; (8011478 <RCC_APB1PeriphResetCmd+0x18>)
 8011470:	6a1a      	ldr	r2, [r3, #32]
 8011472:	4310      	orrs	r0, r2
 8011474:	6218      	str	r0, [r3, #32]
 8011476:	4770      	bx	lr
 8011478:	40023800 	.word	0x40023800
 801147c:	00000000 	.word	0x00000000

08011480 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011480:	b929      	cbnz	r1, 801148e <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8011482:	4a05      	ldr	r2, [pc, #20]	; (8011498 <RCC_APB2PeriphResetCmd+0x18>)
 8011484:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011486:	ea23 0000 	bic.w	r0, r3, r0
 801148a:	6250      	str	r0, [r2, #36]	; 0x24
 801148c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 801148e:	4b02      	ldr	r3, [pc, #8]	; (8011498 <RCC_APB2PeriphResetCmd+0x18>)
 8011490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011492:	4310      	orrs	r0, r2
 8011494:	6258      	str	r0, [r3, #36]	; 0x24
 8011496:	4770      	bx	lr
 8011498:	40023800 	.word	0x40023800
 801149c:	00000000 	.word	0x00000000

080114a0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80114a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80114a2:	4b60      	ldr	r3, [pc, #384]	; (8011624 <TIM_DeInit+0x184>)
 80114a4:	4298      	cmp	r0, r3
 80114a6:	d035      	beq.n	8011514 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80114a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80114ac:	d03c      	beq.n	8011528 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80114ae:	4b5e      	ldr	r3, [pc, #376]	; (8011628 <TIM_DeInit+0x188>)
 80114b0:	4298      	cmp	r0, r3
 80114b2:	d043      	beq.n	801153c <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 80114b4:	4b5d      	ldr	r3, [pc, #372]	; (801162c <TIM_DeInit+0x18c>)
 80114b6:	4298      	cmp	r0, r3
 80114b8:	d04a      	beq.n	8011550 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80114ba:	4b5d      	ldr	r3, [pc, #372]	; (8011630 <TIM_DeInit+0x190>)
 80114bc:	4298      	cmp	r0, r3
 80114be:	d051      	beq.n	8011564 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80114c0:	4b5c      	ldr	r3, [pc, #368]	; (8011634 <TIM_DeInit+0x194>)
 80114c2:	4298      	cmp	r0, r3
 80114c4:	d058      	beq.n	8011578 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80114c6:	4b5c      	ldr	r3, [pc, #368]	; (8011638 <TIM_DeInit+0x198>)
 80114c8:	4298      	cmp	r0, r3
 80114ca:	d05f      	beq.n	801158c <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80114cc:	4b5b      	ldr	r3, [pc, #364]	; (801163c <TIM_DeInit+0x19c>)
 80114ce:	4298      	cmp	r0, r3
 80114d0:	d066      	beq.n	80115a0 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80114d2:	4b5b      	ldr	r3, [pc, #364]	; (8011640 <TIM_DeInit+0x1a0>)
 80114d4:	4298      	cmp	r0, r3
 80114d6:	d06d      	beq.n	80115b4 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80114d8:	4b5a      	ldr	r3, [pc, #360]	; (8011644 <TIM_DeInit+0x1a4>)
 80114da:	4298      	cmp	r0, r3
 80114dc:	d076      	beq.n	80115cc <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80114de:	4b5a      	ldr	r3, [pc, #360]	; (8011648 <TIM_DeInit+0x1a8>)
 80114e0:	4298      	cmp	r0, r3
 80114e2:	d07f      	beq.n	80115e4 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80114e4:	4b59      	ldr	r3, [pc, #356]	; (801164c <TIM_DeInit+0x1ac>)
 80114e6:	4298      	cmp	r0, r3
 80114e8:	f000 8088 	beq.w	80115fc <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 80114ec:	4b58      	ldr	r3, [pc, #352]	; (8011650 <TIM_DeInit+0x1b0>)
 80114ee:	4298      	cmp	r0, r3
 80114f0:	f000 808e 	beq.w	8011610 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 80114f4:	4b57      	ldr	r3, [pc, #348]	; (8011654 <TIM_DeInit+0x1b4>)
 80114f6:	4298      	cmp	r0, r3
 80114f8:	d000      	beq.n	80114fc <TIM_DeInit+0x5c>
 80114fa:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80114fc:	2101      	movs	r1, #1
 80114fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011502:	f7ff ffad 	bl	8011460 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011506:	2100      	movs	r1, #0
 8011508:	f44f 7080 	mov.w	r0, #256	; 0x100
    }   
  }
}
 801150c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011510:	f7ff bfa6 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8011514:	2101      	movs	r1, #1
 8011516:	4608      	mov	r0, r1
 8011518:	f7ff ffb2 	bl	8011480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 801151c:	2100      	movs	r1, #0
 801151e:	2001      	movs	r0, #1
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8011524:	f7ff bfac 	b.w	8011480 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8011528:	2101      	movs	r1, #1
 801152a:	4608      	mov	r0, r1
 801152c:	f7ff ff98 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8011530:	2100      	movs	r1, #0
 8011532:	2001      	movs	r0, #1
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8011538:	f7ff bf92 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 801153c:	2101      	movs	r1, #1
 801153e:	2002      	movs	r0, #2
 8011540:	f7ff ff8e 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8011544:	2100      	movs	r1, #0
 8011546:	2002      	movs	r0, #2
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011548:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 801154c:	f7ff bf88 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8011550:	2101      	movs	r1, #1
 8011552:	2004      	movs	r0, #4
 8011554:	f7ff ff84 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8011558:	2100      	movs	r1, #0
 801155a:	2004      	movs	r0, #4
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801155c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8011560:	f7ff bf7e 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8011564:	2101      	movs	r1, #1
 8011566:	2008      	movs	r0, #8
 8011568:	f7ff ff7a 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 801156c:	2100      	movs	r1, #0
 801156e:	2008      	movs	r0, #8
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8011574:	f7ff bf74 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8011578:	2101      	movs	r1, #1
 801157a:	2010      	movs	r0, #16
 801157c:	f7ff ff70 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8011580:	2100      	movs	r1, #0
 8011582:	2010      	movs	r0, #16
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8011588:	f7ff bf6a 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 801158c:	2101      	movs	r1, #1
 801158e:	2020      	movs	r0, #32
 8011590:	f7ff ff66 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8011594:	2100      	movs	r1, #0
 8011596:	2020      	movs	r0, #32
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 801159c:	f7ff bf60 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80115a0:	2101      	movs	r1, #1
 80115a2:	2002      	movs	r0, #2
 80115a4:	f7ff ff6c 	bl	8011480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80115a8:	2100      	movs	r1, #0
 80115aa:	2002      	movs	r0, #2
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80115ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80115b0:	f7ff bf66 	b.w	8011480 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80115b4:	2101      	movs	r1, #1
 80115b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80115ba:	f7ff ff61 	bl	8011480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80115be:	2100      	movs	r1, #0
 80115c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80115c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80115c8:	f7ff bf5a 	b.w	8011480 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80115cc:	2101      	movs	r1, #1
 80115ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80115d2:	f7ff ff55 	bl	8011480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80115d6:	2100      	movs	r1, #0
 80115d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80115dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80115e0:	f7ff bf4e 	b.w	8011480 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80115e4:	2101      	movs	r1, #1
 80115e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80115ea:	f7ff ff49 	bl	8011480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80115ee:	2100      	movs	r1, #0
 80115f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80115f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80115f8:	f7ff bf42 	b.w	8011480 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80115fc:	2101      	movs	r1, #1
 80115fe:	2040      	movs	r0, #64	; 0x40
 8011600:	f7ff ff2e 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8011604:	2100      	movs	r1, #0
 8011606:	2040      	movs	r0, #64	; 0x40
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 801160c:	f7ff bf28 	b.w	8011460 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8011610:	2101      	movs	r1, #1
 8011612:	2080      	movs	r0, #128	; 0x80
 8011614:	f7ff ff24 	bl	8011460 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011618:	2100      	movs	r1, #0
 801161a:	2080      	movs	r0, #128	; 0x80
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 801161c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011620:	f7ff bf1e 	b.w	8011460 <RCC_APB1PeriphResetCmd>
 8011624:	40010000 	.word	0x40010000
 8011628:	40000400 	.word	0x40000400
 801162c:	40000800 	.word	0x40000800
 8011630:	40000c00 	.word	0x40000c00
 8011634:	40001000 	.word	0x40001000
 8011638:	40001400 	.word	0x40001400
 801163c:	40010400 	.word	0x40010400
 8011640:	40014000 	.word	0x40014000
 8011644:	40014400 	.word	0x40014400
 8011648:	40014800 	.word	0x40014800
 801164c:	40001800 	.word	0x40001800
 8011650:	40001c00 	.word	0x40001c00
 8011654:	40002000 	.word	0x40002000
	...

08011660 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011660:	4a22      	ldr	r2, [pc, #136]	; (80116ec <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8011662:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011664:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8011666:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011668:	d012      	beq.n	8011690 <TIM_TimeBaseInit+0x30>
 801166a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801166e:	4290      	cmp	r0, r2
 8011670:	d00e      	beq.n	8011690 <TIM_TimeBaseInit+0x30>
 8011672:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011676:	d00b      	beq.n	8011690 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8011678:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 801167c:	4290      	cmp	r0, r2
 801167e:	d007      	beq.n	8011690 <TIM_TimeBaseInit+0x30>
 8011680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011684:	4290      	cmp	r0, r2
 8011686:	d003      	beq.n	8011690 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8011688:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801168c:	4290      	cmp	r0, r2
 801168e:	d103      	bne.n	8011698 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011690:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8011692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011696:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8011698:	4a15      	ldr	r2, [pc, #84]	; (80116f0 <TIM_TimeBaseInit+0x90>)
 801169a:	4290      	cmp	r0, r2
 801169c:	d01e      	beq.n	80116dc <TIM_TimeBaseInit+0x7c>
 801169e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116a2:	4290      	cmp	r0, r2
 80116a4:	d01a      	beq.n	80116dc <TIM_TimeBaseInit+0x7c>
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80116a6:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80116a8:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80116aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80116ae:	4c0f      	ldr	r4, [pc, #60]	; (80116ec <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80116b0:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80116b2:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80116b4:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80116b6:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80116b8:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80116ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80116bc:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80116be:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80116c0:	d006      	beq.n	80116d0 <TIM_TimeBaseInit+0x70>
 80116c2:	4b0c      	ldr	r3, [pc, #48]	; (80116f4 <TIM_TimeBaseInit+0x94>)
 80116c4:	4298      	cmp	r0, r3
 80116c6:	d003      	beq.n	80116d0 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80116c8:	2301      	movs	r3, #1
 80116ca:	6143      	str	r3, [r0, #20]
}
 80116cc:	bc70      	pop	{r4, r5, r6}
 80116ce:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80116d0:	7a8b      	ldrb	r3, [r1, #10]
 80116d2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80116d4:	2301      	movs	r3, #1
 80116d6:	6143      	str	r3, [r0, #20]
}
 80116d8:	bc70      	pop	{r4, r5, r6}
 80116da:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80116dc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80116de:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80116e0:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80116e2:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80116e4:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80116e6:	2301      	movs	r3, #1
 80116e8:	6143      	str	r3, [r0, #20]
 80116ea:	4770      	bx	lr
 80116ec:	40010000 	.word	0x40010000
 80116f0:	40001000 	.word	0x40001000
 80116f4:	40010400 	.word	0x40010400
	...

08011700 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011700:	b929      	cbnz	r1, 801170e <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8011702:	6802      	ldr	r2, [r0, #0]
 8011704:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8011708:	4013      	ands	r3, r2
 801170a:	6003      	str	r3, [r0, #0]
 801170c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801170e:	6803      	ldr	r3, [r0, #0]
 8011710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011714:	6003      	str	r3, [r0, #0]
 8011716:	4770      	bx	lr
	...

08011720 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011720:	b929      	cbnz	r1, 801172e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8011722:	6802      	ldr	r2, [r0, #0]
 8011724:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011728:	4013      	ands	r3, r2
 801172a:	6003      	str	r3, [r0, #0]
 801172c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801172e:	6803      	ldr	r3, [r0, #0]
 8011730:	f043 0301 	orr.w	r3, r3, #1
 8011734:	6003      	str	r3, [r0, #0]
 8011736:	4770      	bx	lr
	...

08011740 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8011740:	6a02      	ldr	r2, [r0, #32]
 8011742:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011746:	4013      	ands	r3, r2
 8011748:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801174a:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801174c:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801174e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8011750:	898b      	ldrh	r3, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011752:	6844      	ldr	r4, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011754:	4f15      	ldr	r7, [pc, #84]	; (80117ac <TIM_OC1Init+0x6c>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011756:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801175a:	f64f 76fd 	movw	r6, #65533	; 0xfffd
 801175e:	402e      	ands	r6, r5
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8011760:	4313      	orrs	r3, r2
 8011762:	4333      	orrs	r3, r6
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8011764:	f64f 758c 	movw	r5, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011768:	880e      	ldrh	r6, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801176a:	ea0e 0505 	and.w	r5, lr, r5
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801176e:	42b8      	cmp	r0, r7
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011770:	b2a2      	uxth	r2, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8011772:	b29b      	uxth	r3, r3
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011774:	ea45 0406 	orr.w	r4, r5, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011778:	d008      	beq.n	801178c <TIM_OC1Init+0x4c>
 801177a:	4d0d      	ldr	r5, [pc, #52]	; (80117b0 <TIM_OC1Init+0x70>)
 801177c:	42a8      	cmp	r0, r5
 801177e:	d005      	beq.n	801178c <TIM_OC1Init+0x4c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8011780:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011782:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011784:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8011786:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011788:	6203      	str	r3, [r0, #32]
 801178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 801178c:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 801178e:	8a0f      	ldrh	r7, [r1, #16]
 8011790:	8a4d      	ldrh	r5, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8011792:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8011796:	4333      	orrs	r3, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8011798:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 801179c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 801179e:	433d      	orrs	r5, r7
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80117a0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80117a4:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80117a6:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80117a8:	b292      	uxth	r2, r2
 80117aa:	e7e9      	b.n	8011780 <TIM_OC1Init+0x40>
 80117ac:	40010000 	.word	0x40010000
 80117b0:	40010400 	.word	0x40010400
	...

080117c0 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80117c0:	6a02      	ldr	r2, [r0, #32]
 80117c2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80117c6:	4013      	ands	r3, r2
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80117c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80117ca:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80117cc:	884a      	ldrh	r2, [r1, #2]
 80117ce:	898c      	ldrh	r4, [r1, #12]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80117d0:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117d4:	6846      	ldr	r6, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80117d6:	6987      	ldr	r7, [r0, #24]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80117d8:	4d18      	ldr	r5, [pc, #96]	; (801183c <TIM_OC2Init+0x7c>)
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80117da:	4314      	orrs	r4, r2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80117dc:	f648 42ff 	movw	r2, #36095	; 0x8cff
 80117e0:	403a      	ands	r2, r7
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80117e2:	f64f 73df 	movw	r3, #65503	; 0xffdf
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80117e6:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80117e8:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80117ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80117f0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80117f4:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80117f6:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117f8:	b2b4      	uxth	r4, r6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80117fa:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80117fc:	d009      	beq.n	8011812 <TIM_OC2Init+0x52>
 80117fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011802:	42a8      	cmp	r0, r5
 8011804:	d005      	beq.n	8011812 <TIM_OC2Init+0x52>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8011806:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011808:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801180a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801180c:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801180e:	6203      	str	r3, [r0, #32]
 8011810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8011812:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011814:	8a0f      	ldrh	r7, [r1, #16]
 8011816:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8011818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 801181c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8011820:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8011824:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8011826:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8011828:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 801182c:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 801182e:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011832:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8011836:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8011838:	b2a4      	uxth	r4, r4
 801183a:	e7e4      	b.n	8011806 <TIM_OC2Init+0x46>
 801183c:	40010000 	.word	0x40010000

08011840 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8011840:	6a02      	ldr	r2, [r0, #32]
 8011842:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011846:	4013      	ands	r3, r2
 8011848:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801184a:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 801184c:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801184e:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8011852:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011854:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011856:	4e1a      	ldr	r6, [pc, #104]	; (80118c0 <TIM_OC3Init+0x80>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011858:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 801185a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 801185e:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8011860:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8011864:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8011868:	f64f 728c 	movw	r2, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801186c:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 801186e:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011870:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8011872:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011874:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8011876:	ea42 0204 	orr.w	r2, r2, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801187a:	d009      	beq.n	8011890 <TIM_OC3Init+0x50>
 801187c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011880:	42b0      	cmp	r0, r6
 8011882:	d005      	beq.n	8011890 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8011884:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011886:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011888:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 801188a:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801188c:	6203      	str	r3, [r0, #32]
 801188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8011890:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8011892:	8a0c      	ldrh	r4, [r1, #16]
 8011894:	f8b1 e012 	ldrh.w	lr, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8011898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801189c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80118a0:	f64f 36ff 	movw	r6, #64511	; 0xfbff
 80118a4:	401e      	ands	r6, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80118a6:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80118a8:	f425 5740 	bic.w	r7, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80118ac:	ea44 050e 	orr.w	r5, r4, lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80118b0:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80118b4:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80118b8:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80118ba:	b2ad      	uxth	r5, r5
 80118bc:	e7e2      	b.n	8011884 <TIM_OC3Init+0x44>
 80118be:	bf00      	nop
 80118c0:	40010000 	.word	0x40010000
	...

080118d0 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80118d0:	6a02      	ldr	r2, [r0, #32]
 80118d2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80118d6:	4013      	ands	r3, r2
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80118d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80118da:	6203      	str	r3, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80118dc:	884a      	ldrh	r2, [r1, #2]
 80118de:	898d      	ldrh	r5, [r1, #12]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118e0:	f8d0 e020 	ldr.w	lr, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118e4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80118e6:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80118e8:	4e11      	ldr	r6, [pc, #68]	; (8011930 <TIM_OC4Init+0x60>)
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80118ea:	4315      	orrs	r5, r2
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80118ec:	f648 42ff 	movw	r2, #36095	; 0x8cff
 80118f0:	403a      	ands	r2, r7
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80118f2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80118f6:	880f      	ldrh	r7, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80118f8:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80118fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8011900:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8011904:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8011906:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011908:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801190a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801190c:	d008      	beq.n	8011920 <TIM_OC4Init+0x50>
 801190e:	4d09      	ldr	r5, [pc, #36]	; (8011934 <TIM_OC4Init+0x64>)
 8011910:	42a8      	cmp	r0, r5
 8011912:	d005      	beq.n	8011920 <TIM_OC4Init+0x50>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8011914:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011916:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8011918:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 801191a:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801191c:	6203      	str	r3, [r0, #32]
 801191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8011920:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8011922:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8011926:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 801192a:	b2a4      	uxth	r4, r4
 801192c:	e7f2      	b.n	8011914 <TIM_OC4Init+0x44>
 801192e:	bf00      	nop
 8011930:	40010000 	.word	0x40010000
 8011934:	40010400 	.word	0x40010400
	...

08011940 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8011940:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8011942:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8011946:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8011948:	4319      	orrs	r1, r3
 801194a:	6181      	str	r1, [r0, #24]
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop

08011950 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8011950:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8011952:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8011956:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8011958:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 801195c:	b289      	uxth	r1, r1
 801195e:	6181      	str	r1, [r0, #24]
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
	...

08011970 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8011970:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8011972:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8011976:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8011978:	4319      	orrs	r1, r3
 801197a:	61c1      	str	r1, [r0, #28]
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop

08011980 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8011980:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8011982:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8011986:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8011988:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 801198c:	b289      	uxth	r1, r1
 801198e:	61c1      	str	r1, [r0, #28]
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
	...

080119a0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80119a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80119a2:	884b      	ldrh	r3, [r1, #2]
 80119a4:	f8b1 e000 	ldrh.w	lr, [r1]
 80119a8:	888f      	ldrh	r7, [r1, #4]
 80119aa:	88ce      	ldrh	r6, [r1, #6]
 80119ac:	890d      	ldrh	r5, [r1, #8]
 80119ae:	894c      	ldrh	r4, [r1, #10]
 80119b0:	898a      	ldrh	r2, [r1, #12]
 80119b2:	ea4e 0303 	orr.w	r3, lr, r3
 80119b6:	433b      	orrs	r3, r7
 80119b8:	4333      	orrs	r3, r6
 80119ba:	432b      	orrs	r3, r5
 80119bc:	4323      	orrs	r3, r4
 80119be:	4313      	orrs	r3, r2
 80119c0:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80119c2:	6443      	str	r3, [r0, #68]	; 0x44
 80119c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c6:	bf00      	nop
	...

080119d0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80119d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80119d2:	b919      	cbnz	r1, 80119dc <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80119d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80119d8:	6443      	str	r3, [r0, #68]	; 0x44
 80119da:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80119dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119e0:	6443      	str	r3, [r0, #68]	; 0x44
 80119e2:	4770      	bx	lr
	...

080119f0 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80119f0:	b929      	cbnz	r1, 80119fe <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80119f2:	6842      	ldr	r2, [r0, #4]
 80119f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80119f8:	4013      	ands	r3, r2
 80119fa:	6043      	str	r3, [r0, #4]
 80119fc:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80119fe:	6843      	ldr	r3, [r0, #4]
 8011a00:	f043 0301 	orr.w	r3, r3, #1
 8011a04:	6043      	str	r3, [r0, #4]
 8011a06:	4770      	bx	lr
	...

08011a10 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8011a10:	43c9      	mvns	r1, r1
 8011a12:	b289      	uxth	r1, r1
 8011a14:	6101      	str	r1, [r0, #16]
 8011a16:	4770      	bx	lr
	...

08011a20 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011a20:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8011a22:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8011a26:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a28:	4319      	orrs	r1, r3
 8011a2a:	6081      	str	r1, [r0, #8]
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop

08011a30 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8011a30:	6842      	ldr	r2, [r0, #4]
 8011a32:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8011a36:	4013      	ands	r3, r2
 8011a38:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8011a3a:	6843      	ldr	r3, [r0, #4]
 8011a3c:	4319      	orrs	r1, r3
 8011a3e:	6041      	str	r1, [r0, #4]
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
	...

08011a50 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8011a50:	6882      	ldr	r2, [r0, #8]
 8011a52:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8011a56:	4013      	ands	r3, r2
 8011a58:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8011a5a:	6883      	ldr	r3, [r0, #8]
 8011a5c:	4319      	orrs	r1, r3
 8011a5e:	6081      	str	r1, [r0, #8]
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
	...

08011a70 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8011a70:	6882      	ldr	r2, [r0, #8]
 8011a72:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8011a76:	4013      	ands	r3, r2
 8011a78:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8011a7a:	6883      	ldr	r3, [r0, #8]
 8011a7c:	4319      	orrs	r1, r3
 8011a7e:	6081      	str	r1, [r0, #8]
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
	...

08011a90 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8011a90:	4a03      	ldr	r2, [pc, #12]	; (8011aa0 <WWDG_SetPrescaler+0x10>)
 8011a92:	6853      	ldr	r3, [r2, #4]
 8011a94:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8011a98:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8011a9a:	6050      	str	r0, [r2, #4]
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	40002c00 	.word	0x40002c00
	...

08011ab0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8011ab0:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8011ab2:	4a08      	ldr	r2, [pc, #32]	; (8011ad4 <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8011ab8:	6853      	ldr	r3, [r2, #4]
 8011aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011abe:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8011ac0:	9b01      	ldr	r3, [sp, #4]
 8011ac2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011ac6:	4303      	orrs	r3, r0
 8011ac8:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8011aca:	9b01      	ldr	r3, [sp, #4]
 8011acc:	6053      	str	r3, [r2, #4]
}
 8011ace:	b002      	add	sp, #8
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	40002c00 	.word	0x40002c00
	...

08011ae0 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8011ae0:	4b02      	ldr	r3, [pc, #8]	; (8011aec <WWDG_SetCounter+0xc>)
 8011ae2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011ae6:	6018      	str	r0, [r3, #0]
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	40002c00 	.word	0x40002c00

08011af0 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8011af0:	4b02      	ldr	r3, [pc, #8]	; (8011afc <WWDG_Enable+0xc>)
 8011af2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8011af6:	6018      	str	r0, [r3, #0]
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	40002c00 	.word	0x40002c00

08011b00 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 8011b00:	b508      	push	{r3, lr}
//=================================
// hardware setup
	
	bldc_init();
 8011b02:	f7fe f9d5 	bl	800feb0 <bldc_init>

	app_init();
 8011b06:	f7ff fa6b 	bl	8010fe0 <app_init>

	timeout_init();
 8011b0a:	f7ff fa49 	bl	8010fa0 <timeout_init>
	timeout_configure(1000);
 8011b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011b12:	f7ff fa2d 	bl	8010f70 <timeout_configure>
	test.print();

//=================================
	for(;;)
	{
		chThdSleepMilliseconds(10);
 8011b16:	2064      	movs	r0, #100	; 0x64
 8011b18:	f7fb fa0a 	bl	800cf30 <chThdSleep>
 8011b1c:	e7fb      	b.n	8011b16 <main+0x16>
 8011b1e:	bf00      	nop

08011b20 <cosf>:
 8011b20:	b500      	push	{lr}
 8011b22:	ee10 3a10 	vmov	r3, s0
 8011b26:	4a20      	ldr	r2, [pc, #128]	; (8011ba8 <cosf+0x88>)
 8011b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	b083      	sub	sp, #12
 8011b30:	dd19      	ble.n	8011b66 <cosf+0x46>
 8011b32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b36:	db04      	blt.n	8011b42 <cosf+0x22>
 8011b38:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011b3c:	b003      	add	sp, #12
 8011b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b42:	4668      	mov	r0, sp
 8011b44:	f000 f8e4 	bl	8011d10 <__ieee754_rem_pio2f>
 8011b48:	f000 0003 	and.w	r0, r0, #3
 8011b4c:	2801      	cmp	r0, #1
 8011b4e:	d01a      	beq.n	8011b86 <cosf+0x66>
 8011b50:	2802      	cmp	r0, #2
 8011b52:	d00f      	beq.n	8011b74 <cosf+0x54>
 8011b54:	b300      	cbz	r0, 8011b98 <cosf+0x78>
 8011b56:	2001      	movs	r0, #1
 8011b58:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b5c:	ed9d 0a00 	vldr	s0, [sp]
 8011b60:	f000 fe1e 	bl	80127a0 <__kernel_sinf>
 8011b64:	e7ea      	b.n	8011b3c <cosf+0x1c>
 8011b66:	eddf 0a11 	vldr	s1, [pc, #68]	; 8011bac <cosf+0x8c>
 8011b6a:	f000 fa79 	bl	8012060 <__kernel_cosf>
 8011b6e:	b003      	add	sp, #12
 8011b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b74:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b78:	ed9d 0a00 	vldr	s0, [sp]
 8011b7c:	f000 fa70 	bl	8012060 <__kernel_cosf>
 8011b80:	eeb1 0a40 	vneg.f32	s0, s0
 8011b84:	e7da      	b.n	8011b3c <cosf+0x1c>
 8011b86:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b8a:	ed9d 0a00 	vldr	s0, [sp]
 8011b8e:	f000 fe07 	bl	80127a0 <__kernel_sinf>
 8011b92:	eeb1 0a40 	vneg.f32	s0, s0
 8011b96:	e7d1      	b.n	8011b3c <cosf+0x1c>
 8011b98:	eddd 0a01 	vldr	s1, [sp, #4]
 8011b9c:	ed9d 0a00 	vldr	s0, [sp]
 8011ba0:	f000 fa5e 	bl	8012060 <__kernel_cosf>
 8011ba4:	e7ca      	b.n	8011b3c <cosf+0x1c>
 8011ba6:	bf00      	nop
 8011ba8:	3f490fd8 	.word	0x3f490fd8
 8011bac:	00000000 	.word	0x00000000

08011bb0 <sinf>:
 8011bb0:	b500      	push	{lr}
 8011bb2:	ee10 3a10 	vmov	r3, s0
 8011bb6:	4a21      	ldr	r2, [pc, #132]	; (8011c3c <sinf+0x8c>)
 8011bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	dd1a      	ble.n	8011bf8 <sinf+0x48>
 8011bc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011bc6:	db04      	blt.n	8011bd2 <sinf+0x22>
 8011bc8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011bcc:	b003      	add	sp, #12
 8011bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bd2:	4668      	mov	r0, sp
 8011bd4:	f000 f89c 	bl	8011d10 <__ieee754_rem_pio2f>
 8011bd8:	f000 0003 	and.w	r0, r0, #3
 8011bdc:	2801      	cmp	r0, #1
 8011bde:	d01d      	beq.n	8011c1c <sinf+0x6c>
 8011be0:	2802      	cmp	r0, #2
 8011be2:	d011      	beq.n	8011c08 <sinf+0x58>
 8011be4:	b308      	cbz	r0, 8011c2a <sinf+0x7a>
 8011be6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011bea:	ed9d 0a00 	vldr	s0, [sp]
 8011bee:	f000 fa37 	bl	8012060 <__kernel_cosf>
 8011bf2:	eeb1 0a40 	vneg.f32	s0, s0
 8011bf6:	e7e9      	b.n	8011bcc <sinf+0x1c>
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	eddf 0a11 	vldr	s1, [pc, #68]	; 8011c40 <sinf+0x90>
 8011bfe:	f000 fdcf 	bl	80127a0 <__kernel_sinf>
 8011c02:	b003      	add	sp, #12
 8011c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c08:	2001      	movs	r0, #1
 8011c0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c0e:	ed9d 0a00 	vldr	s0, [sp]
 8011c12:	f000 fdc5 	bl	80127a0 <__kernel_sinf>
 8011c16:	eeb1 0a40 	vneg.f32	s0, s0
 8011c1a:	e7d7      	b.n	8011bcc <sinf+0x1c>
 8011c1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c20:	ed9d 0a00 	vldr	s0, [sp]
 8011c24:	f000 fa1c 	bl	8012060 <__kernel_cosf>
 8011c28:	e7d0      	b.n	8011bcc <sinf+0x1c>
 8011c2a:	2001      	movs	r0, #1
 8011c2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c30:	ed9d 0a00 	vldr	s0, [sp]
 8011c34:	f000 fdb4 	bl	80127a0 <__kernel_sinf>
 8011c38:	e7c8      	b.n	8011bcc <sinf+0x1c>
 8011c3a:	bf00      	nop
 8011c3c:	3f490fd8 	.word	0x3f490fd8
	...

08011c50 <sqrtf>:
 8011c50:	b510      	push	{r4, lr}
 8011c52:	ed2d 8b02 	vpush	{d8}
 8011c56:	4c29      	ldr	r4, [pc, #164]	; (8011cfc <sqrtf+0xac>)
 8011c58:	b08a      	sub	sp, #40	; 0x28
 8011c5a:	eef0 8a40 	vmov.f32	s17, s0
 8011c5e:	f000 f9a7 	bl	8011fb0 <__ieee754_sqrtf>
 8011c62:	f994 3000 	ldrsb.w	r3, [r4]
 8011c66:	3301      	adds	r3, #1
 8011c68:	eeb0 8a40 	vmov.f32	s16, s0
 8011c6c:	d009      	beq.n	8011c82 <sqrtf+0x32>
 8011c6e:	eeb0 0a68 	vmov.f32	s0, s17
 8011c72:	f000 fe35 	bl	80128e0 <__fpclassifyf>
 8011c76:	b120      	cbz	r0, 8011c82 <sqrtf+0x32>
 8011c78:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8011c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c80:	d405      	bmi.n	8011c8e <sqrtf+0x3e>
 8011c82:	eeb0 0a48 	vmov.f32	s0, s16
 8011c86:	b00a      	add	sp, #40	; 0x28
 8011c88:	ecbd 8b02 	vpop	{d8}
 8011c8c:	bd10      	pop	{r4, pc}
 8011c8e:	2301      	movs	r3, #1
 8011c90:	4a1b      	ldr	r2, [pc, #108]	; (8011d00 <sqrtf+0xb0>)
 8011c92:	9300      	str	r3, [sp, #0]
 8011c94:	ee18 0a90 	vmov	r0, s17
 8011c98:	2300      	movs	r3, #0
 8011c9a:	9201      	str	r2, [sp, #4]
 8011c9c:	9308      	str	r3, [sp, #32]
 8011c9e:	f7fa fbb3 	bl	800c408 <__aeabi_f2d>
 8011ca2:	7824      	ldrb	r4, [r4, #0]
 8011ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cac:	2200      	movs	r2, #0
 8011cae:	2300      	movs	r3, #0
 8011cb0:	b98c      	cbnz	r4, 8011cd6 <sqrtf+0x86>
 8011cb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011cb6:	4668      	mov	r0, sp
 8011cb8:	f000 fdba 	bl	8012830 <matherr>
 8011cbc:	b198      	cbz	r0, 8011ce6 <sqrtf+0x96>
 8011cbe:	9b08      	ldr	r3, [sp, #32]
 8011cc0:	b9b3      	cbnz	r3, 8011cf0 <sqrtf+0xa0>
 8011cc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011cc6:	f7fa fe33 	bl	800c930 <__aeabi_d2f>
 8011cca:	ee00 0a10 	vmov	s0, r0
 8011cce:	b00a      	add	sp, #40	; 0x28
 8011cd0:	ecbd 8b02 	vpop	{d8}
 8011cd4:	bd10      	pop	{r4, pc}
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	4619      	mov	r1, r3
 8011cda:	f7fa fd13 	bl	800c704 <__aeabi_ddiv>
 8011cde:	2c02      	cmp	r4, #2
 8011ce0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011ce4:	d1e7      	bne.n	8011cb6 <sqrtf+0x66>
 8011ce6:	f000 fe93 	bl	8012a10 <__errno>
 8011cea:	2321      	movs	r3, #33	; 0x21
 8011cec:	6003      	str	r3, [r0, #0]
 8011cee:	e7e6      	b.n	8011cbe <sqrtf+0x6e>
 8011cf0:	f000 fe8e 	bl	8012a10 <__errno>
 8011cf4:	9b08      	ldr	r3, [sp, #32]
 8011cf6:	6003      	str	r3, [r0, #0]
 8011cf8:	e7e3      	b.n	8011cc2 <sqrtf+0x72>
 8011cfa:	bf00      	nop
 8011cfc:	2000083d 	.word	0x2000083d
 8011d00:	08012d90 	.word	0x08012d90
	...

08011d10 <__ieee754_rem_pio2f>:
 8011d10:	b570      	push	{r4, r5, r6, lr}
 8011d12:	ee10 3a10 	vmov	r3, s0
 8011d16:	4a96      	ldr	r2, [pc, #600]	; (8011f70 <__ieee754_rem_pio2f+0x260>)
 8011d18:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011d1c:	4294      	cmp	r4, r2
 8011d1e:	b086      	sub	sp, #24
 8011d20:	dd5f      	ble.n	8011de2 <__ieee754_rem_pio2f+0xd2>
 8011d22:	4a94      	ldr	r2, [pc, #592]	; (8011f74 <__ieee754_rem_pio2f+0x264>)
 8011d24:	4294      	cmp	r4, r2
 8011d26:	ee10 6a10 	vmov	r6, s0
 8011d2a:	dc1b      	bgt.n	8011d64 <__ieee754_rem_pio2f+0x54>
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	eddf 7a92 	vldr	s15, [pc, #584]	; 8011f78 <__ieee754_rem_pio2f+0x268>
 8011d32:	4a92      	ldr	r2, [pc, #584]	; (8011f7c <__ieee754_rem_pio2f+0x26c>)
 8011d34:	f024 040f 	bic.w	r4, r4, #15
 8011d38:	f340 80d5 	ble.w	8011ee6 <__ieee754_rem_pio2f+0x1d6>
 8011d3c:	4294      	cmp	r4, r2
 8011d3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011d42:	d05e      	beq.n	8011e02 <__ieee754_rem_pio2f+0xf2>
 8011d44:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8011f80 <__ieee754_rem_pio2f+0x270>
 8011d48:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d52:	edc0 6a00 	vstr	s13, [r0]
 8011d56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	b006      	add	sp, #24
 8011d62:	bd70      	pop	{r4, r5, r6, pc}
 8011d64:	4a87      	ldr	r2, [pc, #540]	; (8011f84 <__ieee754_rem_pio2f+0x274>)
 8011d66:	4294      	cmp	r4, r2
 8011d68:	4605      	mov	r5, r0
 8011d6a:	dd5c      	ble.n	8011e26 <__ieee754_rem_pio2f+0x116>
 8011d6c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011d70:	da3f      	bge.n	8011df2 <__ieee754_rem_pio2f+0xe2>
 8011d72:	15e2      	asrs	r2, r4, #23
 8011d74:	3a86      	subs	r2, #134	; 0x86
 8011d76:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8011d7a:	ee07 3a10 	vmov	s14, r3
 8011d7e:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8011d82:	eddf 7a81 	vldr	s15, [pc, #516]	; 8011f88 <__ieee754_rem_pio2f+0x278>
 8011d86:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011d8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d8e:	edcd 6a03 	vstr	s13, [sp, #12]
 8011d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011d96:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8011d9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011d9e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011da2:	edcd 6a04 	vstr	s13, [sp, #16]
 8011da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011daa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db2:	edcd 7a05 	vstr	s15, [sp, #20]
 8011db6:	f040 80b7 	bne.w	8011f28 <__ieee754_rem_pio2f+0x218>
 8011dba:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc2:	bf0c      	ite	eq
 8011dc4:	2301      	moveq	r3, #1
 8011dc6:	2302      	movne	r3, #2
 8011dc8:	4970      	ldr	r1, [pc, #448]	; (8011f8c <__ieee754_rem_pio2f+0x27c>)
 8011dca:	9101      	str	r1, [sp, #4]
 8011dcc:	2102      	movs	r1, #2
 8011dce:	9100      	str	r1, [sp, #0]
 8011dd0:	a803      	add	r0, sp, #12
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	f000 f9cc 	bl	8012170 <__kernel_rem_pio2f>
 8011dd8:	2e00      	cmp	r6, #0
 8011dda:	f2c0 8097 	blt.w	8011f0c <__ieee754_rem_pio2f+0x1fc>
 8011dde:	4603      	mov	r3, r0
 8011de0:	e004      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011de2:	2200      	movs	r2, #0
 8011de4:	ed80 0a00 	vstr	s0, [r0]
 8011de8:	6042      	str	r2, [r0, #4]
 8011dea:	2300      	movs	r3, #0
 8011dec:	4618      	mov	r0, r3
 8011dee:	b006      	add	sp, #24
 8011df0:	bd70      	pop	{r4, r5, r6, pc}
 8011df2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011df6:	2300      	movs	r3, #0
 8011df8:	edc0 7a01 	vstr	s15, [r0, #4]
 8011dfc:	edc0 7a00 	vstr	s15, [r0]
 8011e00:	e7f4      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011e02:	eddf 6a63 	vldr	s13, [pc, #396]	; 8011f90 <__ieee754_rem_pio2f+0x280>
 8011e06:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8011f94 <__ieee754_rem_pio2f+0x284>
 8011e0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e0e:	2301      	movs	r3, #1
 8011e10:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011e14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e18:	edc0 6a00 	vstr	s13, [r0]
 8011e1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e20:	edc0 7a01 	vstr	s15, [r0, #4]
 8011e24:	e7e2      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011e26:	f000 fd0b 	bl	8012840 <fabsf>
 8011e2a:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8011f98 <__ieee754_rem_pio2f+0x288>
 8011e2e:	eddf 5a52 	vldr	s11, [pc, #328]	; 8011f78 <__ieee754_rem_pio2f+0x268>
 8011e32:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8011f80 <__ieee754_rem_pio2f+0x270>
 8011e36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011e3a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e42:	ee17 3a90 	vmov	r3, s15
 8011e46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011e4a:	2b1f      	cmp	r3, #31
 8011e4c:	eeb1 6a66 	vneg.f32	s12, s13
 8011e50:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011e54:	ee66 7a87 	vmul.f32	s15, s13, s14
 8011e58:	dc1d      	bgt.n	8011e96 <__ieee754_rem_pio2f+0x186>
 8011e5a:	4950      	ldr	r1, [pc, #320]	; (8011f9c <__ieee754_rem_pio2f+0x28c>)
 8011e5c:	1e58      	subs	r0, r3, #1
 8011e5e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8011e62:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011e66:	428a      	cmp	r2, r1
 8011e68:	d015      	beq.n	8011e96 <__ieee754_rem_pio2f+0x186>
 8011e6a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011e6e:	ed85 7a00 	vstr	s14, [r5]
 8011e72:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011e76:	2e00      	cmp	r6, #0
 8011e78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e7c:	ed85 0a01 	vstr	s0, [r5, #4]
 8011e80:	dab4      	bge.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011e82:	eeb1 7a47 	vneg.f32	s14, s14
 8011e86:	eeb1 0a40 	vneg.f32	s0, s0
 8011e8a:	ed85 7a00 	vstr	s14, [r5]
 8011e8e:	ed85 0a01 	vstr	s0, [r5, #4]
 8011e92:	425b      	negs	r3, r3
 8011e94:	e7aa      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011e96:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011e9a:	15e4      	asrs	r4, r4, #23
 8011e9c:	ee17 2a10 	vmov	r2, s14
 8011ea0:	f3c2 52c7 	ubfx	r2, r2, #23, #8
 8011ea4:	1aa2      	subs	r2, r4, r2
 8011ea6:	2a08      	cmp	r2, #8
 8011ea8:	dde1      	ble.n	8011e6e <__ieee754_rem_pio2f+0x15e>
 8011eaa:	eddf 7a39 	vldr	s15, [pc, #228]	; 8011f90 <__ieee754_rem_pio2f+0x280>
 8011eae:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011f94 <__ieee754_rem_pio2f+0x284>
 8011eb2:	eef0 5a40 	vmov.f32	s11, s0
 8011eb6:	eee6 5a27 	vfma.f32	s11, s12, s15
 8011eba:	ee30 0a65 	vsub.f32	s0, s0, s11
 8011ebe:	eea6 0a27 	vfma.f32	s0, s12, s15
 8011ec2:	eef0 7a40 	vmov.f32	s15, s0
 8011ec6:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8011eca:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8011ece:	ee17 2a10 	vmov	r2, s14
 8011ed2:	f3c2 52c7 	ubfx	r2, r2, #23, #8
 8011ed6:	1aa4      	subs	r4, r4, r2
 8011ed8:	2c19      	cmp	r4, #25
 8011eda:	dc3a      	bgt.n	8011f52 <__ieee754_rem_pio2f+0x242>
 8011edc:	ed85 7a00 	vstr	s14, [r5]
 8011ee0:	eeb0 0a65 	vmov.f32	s0, s11
 8011ee4:	e7c5      	b.n	8011e72 <__ieee754_rem_pio2f+0x162>
 8011ee6:	4294      	cmp	r4, r2
 8011ee8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011eec:	d01e      	beq.n	8011f2c <__ieee754_rem_pio2f+0x21c>
 8011eee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8011f80 <__ieee754_rem_pio2f+0x270>
 8011ef2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8011efa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011efe:	edc0 6a00 	vstr	s13, [r0]
 8011f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f06:	edc0 7a01 	vstr	s15, [r0, #4]
 8011f0a:	e76f      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011f0c:	ed95 7a00 	vldr	s14, [r5]
 8011f10:	edd5 7a01 	vldr	s15, [r5, #4]
 8011f14:	eeb1 7a47 	vneg.f32	s14, s14
 8011f18:	eef1 7a67 	vneg.f32	s15, s15
 8011f1c:	4243      	negs	r3, r0
 8011f1e:	ed85 7a00 	vstr	s14, [r5]
 8011f22:	edc5 7a01 	vstr	s15, [r5, #4]
 8011f26:	e761      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011f28:	2303      	movs	r3, #3
 8011f2a:	e74d      	b.n	8011dc8 <__ieee754_rem_pio2f+0xb8>
 8011f2c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8011f90 <__ieee754_rem_pio2f+0x280>
 8011f30:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8011f94 <__ieee754_rem_pio2f+0x284>
 8011f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f38:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011f40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011f44:	edc0 6a00 	vstr	s13, [r0]
 8011f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011f50:	e74c      	b.n	8011dec <__ieee754_rem_pio2f+0xdc>
 8011f52:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011fa0 <__ieee754_rem_pio2f+0x290>
 8011f56:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8011fa4 <__ieee754_rem_pio2f+0x294>
 8011f5a:	eeb0 0a65 	vmov.f32	s0, s11
 8011f5e:	eea6 0a07 	vfma.f32	s0, s12, s14
 8011f62:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8011f66:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011f6a:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8011f6e:	e77c      	b.n	8011e6a <__ieee754_rem_pio2f+0x15a>
 8011f70:	3f490fd8 	.word	0x3f490fd8
 8011f74:	4016cbe3 	.word	0x4016cbe3
 8011f78:	3fc90f80 	.word	0x3fc90f80
 8011f7c:	3fc90fd0 	.word	0x3fc90fd0
 8011f80:	37354443 	.word	0x37354443
 8011f84:	43490f80 	.word	0x43490f80
 8011f88:	43800000 	.word	0x43800000
 8011f8c:	08012e20 	.word	0x08012e20
 8011f90:	37354400 	.word	0x37354400
 8011f94:	2e85a308 	.word	0x2e85a308
 8011f98:	3f22f984 	.word	0x3f22f984
 8011f9c:	08012da0 	.word	0x08012da0
 8011fa0:	2e85a300 	.word	0x2e85a300
 8011fa4:	248d3132 	.word	0x248d3132
	...

08011fb0 <__ieee754_sqrtf>:
 8011fb0:	ee10 3a10 	vmov	r3, s0
 8011fb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011fb8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011fbc:	b470      	push	{r4, r5, r6}
 8011fbe:	d230      	bcs.n	8012022 <__ieee754_sqrtf+0x72>
 8011fc0:	b36a      	cbz	r2, 801201e <__ieee754_sqrtf+0x6e>
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	db3d      	blt.n	8012042 <__ieee754_sqrtf+0x92>
 8011fc6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8011fca:	ea4f 50e3 	mov.w	r0, r3, asr #23
 8011fce:	d32c      	bcc.n	801202a <__ieee754_sqrtf+0x7a>
 8011fd0:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 8011fd4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011fd8:	07d1      	lsls	r1, r2, #31
 8011fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011fde:	bf48      	it	mi
 8011fe0:	005b      	lslmi	r3, r3, #1
 8011fe2:	2400      	movs	r4, #0
 8011fe4:	1056      	asrs	r6, r2, #1
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	4625      	mov	r5, r4
 8011fea:	2119      	movs	r1, #25
 8011fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ff0:	18a8      	adds	r0, r5, r2
 8011ff2:	4298      	cmp	r0, r3
 8011ff4:	dc02      	bgt.n	8011ffc <__ieee754_sqrtf+0x4c>
 8011ff6:	1a1b      	subs	r3, r3, r0
 8011ff8:	1885      	adds	r5, r0, r2
 8011ffa:	4414      	add	r4, r2
 8011ffc:	3901      	subs	r1, #1
 8011ffe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012002:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012006:	d1f3      	bne.n	8011ff0 <__ieee754_sqrtf+0x40>
 8012008:	b113      	cbz	r3, 8012010 <__ieee754_sqrtf+0x60>
 801200a:	f004 0301 	and.w	r3, r4, #1
 801200e:	441c      	add	r4, r3
 8012010:	1064      	asrs	r4, r4, #1
 8012012:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8012016:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 801201a:	ee00 3a10 	vmov	s0, r3
 801201e:	bc70      	pop	{r4, r5, r6}
 8012020:	4770      	bx	lr
 8012022:	eea0 0a00 	vfma.f32	s0, s0, s0
 8012026:	bc70      	pop	{r4, r5, r6}
 8012028:	4770      	bx	lr
 801202a:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 801202e:	d001      	beq.n	8012034 <__ieee754_sqrtf+0x84>
 8012030:	e00c      	b.n	801204c <__ieee754_sqrtf+0x9c>
 8012032:	460a      	mov	r2, r1
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	021c      	lsls	r4, r3, #8
 8012038:	f102 0101 	add.w	r1, r2, #1
 801203c:	d5f9      	bpl.n	8012032 <__ieee754_sqrtf+0x82>
 801203e:	1a80      	subs	r0, r0, r2
 8012040:	e7c6      	b.n	8011fd0 <__ieee754_sqrtf+0x20>
 8012042:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012046:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801204a:	e7e8      	b.n	801201e <__ieee754_sqrtf+0x6e>
 801204c:	f04f 32ff 	mov.w	r2, #4294967295
 8012050:	e7f5      	b.n	801203e <__ieee754_sqrtf+0x8e>
 8012052:	bf00      	nop
	...

08012060 <__kernel_cosf>:
 8012060:	ee10 3a10 	vmov	r3, s0
 8012064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012068:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801206c:	da2c      	bge.n	80120c8 <__kernel_cosf+0x68>
 801206e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012072:	ee17 3a90 	vmov	r3, s15
 8012076:	2b00      	cmp	r3, #0
 8012078:	d060      	beq.n	801213c <__kernel_cosf+0xdc>
 801207a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801207e:	eddf 4a31 	vldr	s9, [pc, #196]	; 8012144 <__kernel_cosf+0xe4>
 8012082:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012148 <__kernel_cosf+0xe8>
 8012086:	eddf 5a31 	vldr	s11, [pc, #196]	; 801214c <__kernel_cosf+0xec>
 801208a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012150 <__kernel_cosf+0xf0>
 801208e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012154 <__kernel_cosf+0xf4>
 8012092:	eddf 6a31 	vldr	s13, [pc, #196]	; 8012158 <__kernel_cosf+0xf8>
 8012096:	eea7 5a24 	vfma.f32	s10, s14, s9
 801209a:	eee7 5a05 	vfma.f32	s11, s14, s10
 801209e:	eea7 6a25 	vfma.f32	s12, s14, s11
 80120a2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80120a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80120aa:	ee66 6a87 	vmul.f32	s13, s13, s14
 80120ae:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80120b2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80120b6:	eee7 0a26 	vfma.f32	s1, s14, s13
 80120ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80120be:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80120c2:	ee37 0ae0 	vsub.f32	s0, s15, s1
 80120c6:	4770      	bx	lr
 80120c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80120cc:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8012144 <__kernel_cosf+0xe4>
 80120d0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8012148 <__kernel_cosf+0xe8>
 80120d4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801214c <__kernel_cosf+0xec>
 80120d8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8012150 <__kernel_cosf+0xf0>
 80120dc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8012154 <__kernel_cosf+0xf4>
 80120e0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8012158 <__kernel_cosf+0xf8>
 80120e4:	4a1d      	ldr	r2, [pc, #116]	; (801215c <__kernel_cosf+0xfc>)
 80120e6:	eea7 5a24 	vfma.f32	s10, s14, s9
 80120ea:	4293      	cmp	r3, r2
 80120ec:	eee7 5a05 	vfma.f32	s11, s14, s10
 80120f0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80120f4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80120f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80120fc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012100:	ddd5      	ble.n	80120ae <__kernel_cosf+0x4e>
 8012102:	4a17      	ldr	r2, [pc, #92]	; (8012160 <__kernel_cosf+0x100>)
 8012104:	4293      	cmp	r3, r2
 8012106:	dc14      	bgt.n	8012132 <__kernel_cosf+0xd2>
 8012108:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801210c:	ee07 3a90 	vmov	s15, r3
 8012110:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012114:	ee36 6a67 	vsub.f32	s12, s12, s15
 8012118:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801211c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012120:	eee7 0a26 	vfma.f32	s1, s14, s13
 8012124:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012128:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801212c:	ee36 0a67 	vsub.f32	s0, s12, s15
 8012130:	4770      	bx	lr
 8012132:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8012136:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 801213a:	e7ed      	b.n	8012118 <__kernel_cosf+0xb8>
 801213c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	ad47d74e 	.word	0xad47d74e
 8012148:	310f74f6 	.word	0x310f74f6
 801214c:	b493f27c 	.word	0xb493f27c
 8012150:	37d00d01 	.word	0x37d00d01
 8012154:	bab60b61 	.word	0xbab60b61
 8012158:	3d2aaaab 	.word	0x3d2aaaab
 801215c:	3e999999 	.word	0x3e999999
 8012160:	3f480000 	.word	0x3f480000
	...

08012170 <__kernel_rem_pio2f>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	ed2d 8b04 	vpush	{d8-d9}
 8012178:	b0d7      	sub	sp, #348	; 0x15c
 801217a:	1e5f      	subs	r7, r3, #1
 801217c:	4cda      	ldr	r4, [pc, #872]	; (80124e8 <__kernel_rem_pio2f+0x378>)
 801217e:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8012180:	9301      	str	r3, [sp, #4]
 8012182:	1ed3      	subs	r3, r2, #3
 8012184:	bf48      	it	mi
 8012186:	1d13      	addmi	r3, r2, #4
 8012188:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 801218c:	10db      	asrs	r3, r3, #3
 801218e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012192:	f103 0a01 	add.w	sl, r3, #1
 8012196:	468b      	mov	fp, r1
 8012198:	19f1      	adds	r1, r6, r7
 801219a:	9302      	str	r3, [sp, #8]
 801219c:	4681      	mov	r9, r0
 801219e:	eba2 0aca 	sub.w	sl, r2, sl, lsl #3
 80121a2:	eba3 0307 	sub.w	r3, r3, r7
 80121a6:	d414      	bmi.n	80121d2 <__kernel_rem_pio2f+0x62>
 80121a8:	4419      	add	r1, r3
 80121aa:	9865      	ldr	r0, [sp, #404]	; 0x194
 80121ac:	3101      	adds	r1, #1
 80121ae:	aa1a      	add	r2, sp, #104	; 0x68
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfaa      	itet	ge
 80121b4:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 80121b8:	eddf 7ad0 	vldrlt	s15, [pc, #832]	; 80124fc <__kernel_rem_pio2f+0x38c>
 80121bc:	ee07 4a90 	vmovge	s15, r4
 80121c0:	f103 0301 	add.w	r3, r3, #1
 80121c4:	bfa8      	it	ge
 80121c6:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80121ca:	428b      	cmp	r3, r1
 80121cc:	ece2 7a01 	vstmia	r2!, {s15}
 80121d0:	d1ee      	bne.n	80121b0 <__kernel_rem_pio2f+0x40>
 80121d2:	2e00      	cmp	r6, #0
 80121d4:	f2c0 82d6 	blt.w	8012784 <__kernel_rem_pio2f+0x614>
 80121d8:	9b01      	ldr	r3, [sp, #4]
 80121da:	ad42      	add	r5, sp, #264	; 0x108
 80121dc:	009c      	lsls	r4, r3, #2
 80121de:	f106 0e01 	add.w	lr, r6, #1
 80121e2:	ab1a      	add	r3, sp, #104	; 0x68
 80121e4:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 80121e8:	1918      	adds	r0, r3, r4
 80121ea:	eb09 0104 	add.w	r1, r9, r4
 80121ee:	2f00      	cmp	r7, #0
 80121f0:	f2c0 81c0 	blt.w	8012574 <__kernel_rem_pio2f+0x404>
 80121f4:	eddf 7ac1 	vldr	s15, [pc, #772]	; 80124fc <__kernel_rem_pio2f+0x38c>
 80121f8:	464b      	mov	r3, r9
 80121fa:	4602      	mov	r2, r0
 80121fc:	ecf3 6a01 	vldmia	r3!, {s13}
 8012200:	ed32 7a01 	vldmdb	r2!, {s14}
 8012204:	428b      	cmp	r3, r1
 8012206:	eee6 7a87 	vfma.f32	s15, s13, s14
 801220a:	d1f7      	bne.n	80121fc <__kernel_rem_pio2f+0x8c>
 801220c:	ece5 7a01 	vstmia	r5!, {s15}
 8012210:	4575      	cmp	r5, lr
 8012212:	f100 0004 	add.w	r0, r0, #4
 8012216:	d1ea      	bne.n	80121ee <__kernel_rem_pio2f+0x7e>
 8012218:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 801221c:	3b02      	subs	r3, #2
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	aa06      	add	r2, sp, #24
 8012222:	f103 0804 	add.w	r8, r3, #4
 8012226:	eddf 8ab1 	vldr	s17, [pc, #708]	; 80124ec <__kernel_rem_pio2f+0x37c>
 801222a:	ed9f 8ab1 	vldr	s16, [pc, #708]	; 80124f0 <__kernel_rem_pio2f+0x380>
 801222e:	f8cd b010 	str.w	fp, [sp, #16]
 8012232:	4413      	add	r3, r2
 8012234:	444c      	add	r4, r9
 8012236:	4490      	add	r8, r2
 8012238:	9303      	str	r3, [sp, #12]
 801223a:	4635      	mov	r5, r6
 801223c:	ab56      	add	r3, sp, #344	; 0x158
 801223e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8012242:	2d00      	cmp	r5, #0
 8012244:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8012248:	dd19      	ble.n	801227e <__kernel_rem_pio2f+0x10e>
 801224a:	a942      	add	r1, sp, #264	; 0x108
 801224c:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8012250:	aa05      	add	r2, sp, #20
 8012252:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012256:	eeb0 7a40 	vmov.f32	s14, s0
 801225a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801225e:	ed73 6a01 	vldmdb	r3!, {s13}
 8012262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012266:	428b      	cmp	r3, r1
 8012268:	eea7 7ac8 	vfms.f32	s14, s15, s16
 801226c:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8012270:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012274:	ee17 0a10 	vmov	r0, s14
 8012278:	f842 0f04 	str.w	r0, [r2, #4]!
 801227c:	d1e9      	bne.n	8012252 <__kernel_rem_pio2f+0xe2>
 801227e:	4650      	mov	r0, sl
 8012280:	f000 fb4e 	bl	8012920 <scalbnf>
 8012284:	eeb0 9a40 	vmov.f32	s18, s0
 8012288:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801228c:	ee29 0a00 	vmul.f32	s0, s18, s0
 8012290:	f000 fade 	bl	8012850 <floorf>
 8012294:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012298:	eea0 9a67 	vfms.f32	s18, s0, s15
 801229c:	f1ba 0f00 	cmp.w	sl, #0
 80122a0:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80122a4:	ee17 ba90 	vmov	fp, s15
 80122a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122ac:	ee39 9a67 	vsub.f32	s18, s18, s15
 80122b0:	f340 8145 	ble.w	801253e <__kernel_rem_pio2f+0x3ce>
 80122b4:	f105 3eff 	add.w	lr, r5, #4294967295
 80122b8:	ab06      	add	r3, sp, #24
 80122ba:	f1ca 0208 	rsb	r2, sl, #8
 80122be:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 80122c2:	fa43 f002 	asr.w	r0, r3, r2
 80122c6:	fa00 f202 	lsl.w	r2, r0, r2
 80122ca:	a906      	add	r1, sp, #24
 80122cc:	1a9b      	subs	r3, r3, r2
 80122ce:	f1ca 0207 	rsb	r2, sl, #7
 80122d2:	f841 302e 	str.w	r3, [r1, lr, lsl #2]
 80122d6:	4483      	add	fp, r0
 80122d8:	fa43 f102 	asr.w	r1, r3, r2
 80122dc:	2900      	cmp	r1, #0
 80122de:	dd37      	ble.n	8012350 <__kernel_rem_pio2f+0x1e0>
 80122e0:	2d00      	cmp	r5, #0
 80122e2:	f10b 0b01 	add.w	fp, fp, #1
 80122e6:	f340 8228 	ble.w	801273a <__kernel_rem_pio2f+0x5ca>
 80122ea:	2200      	movs	r2, #0
 80122ec:	4610      	mov	r0, r2
 80122ee:	f10d 0e14 	add.w	lr, sp, #20
 80122f2:	468c      	mov	ip, r1
 80122f4:	e008      	b.n	8012308 <__kernel_rem_pio2f+0x198>
 80122f6:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80122fa:	b113      	cbz	r3, 8012302 <__kernel_rem_pio2f+0x192>
 80122fc:	f8ce 1000 	str.w	r1, [lr]
 8012300:	2001      	movs	r0, #1
 8012302:	3201      	adds	r2, #1
 8012304:	4295      	cmp	r5, r2
 8012306:	dd0c      	ble.n	8012322 <__kernel_rem_pio2f+0x1b2>
 8012308:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 801230c:	2800      	cmp	r0, #0
 801230e:	d0f2      	beq.n	80122f6 <__kernel_rem_pio2f+0x186>
 8012310:	3201      	adds	r2, #1
 8012312:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012316:	4295      	cmp	r5, r2
 8012318:	f8ce 3000 	str.w	r3, [lr]
 801231c:	f04f 0001 	mov.w	r0, #1
 8012320:	dcf2      	bgt.n	8012308 <__kernel_rem_pio2f+0x198>
 8012322:	4661      	mov	r1, ip
 8012324:	f1ba 0f00 	cmp.w	sl, #0
 8012328:	dd10      	ble.n	801234c <__kernel_rem_pio2f+0x1dc>
 801232a:	f1ba 0f01 	cmp.w	sl, #1
 801232e:	f000 810d 	beq.w	801254c <__kernel_rem_pio2f+0x3dc>
 8012332:	f1ba 0f02 	cmp.w	sl, #2
 8012336:	d109      	bne.n	801234c <__kernel_rem_pio2f+0x1dc>
 8012338:	1e6a      	subs	r2, r5, #1
 801233a:	ab06      	add	r3, sp, #24
 801233c:	f10d 0e18 	add.w	lr, sp, #24
 8012340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012348:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 801234c:	2902      	cmp	r1, #2
 801234e:	d05c      	beq.n	801240a <__kernel_rem_pio2f+0x29a>
 8012350:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012358:	d169      	bne.n	801242e <__kernel_rem_pio2f+0x2be>
 801235a:	f105 3eff 	add.w	lr, r5, #4294967295
 801235e:	4576      	cmp	r6, lr
 8012360:	dc0f      	bgt.n	8012382 <__kernel_rem_pio2f+0x212>
 8012362:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8012366:	3a01      	subs	r2, #1
 8012368:	ab06      	add	r3, sp, #24
 801236a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801236e:	2000      	movs	r0, #0
 8012370:	f852 3904 	ldr.w	r3, [r2], #-4
 8012374:	4542      	cmp	r2, r8
 8012376:	ea40 0003 	orr.w	r0, r0, r3
 801237a:	d1f9      	bne.n	8012370 <__kernel_rem_pio2f+0x200>
 801237c:	2800      	cmp	r0, #0
 801237e:	f040 8110 	bne.w	80125a2 <__kernel_rem_pio2f+0x432>
 8012382:	1e73      	subs	r3, r6, #1
 8012384:	aa06      	add	r2, sp, #24
 8012386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801238a:	2b00      	cmp	r3, #0
 801238c:	f040 81d2 	bne.w	8012734 <__kernel_rem_pio2f+0x5c4>
 8012390:	9b03      	ldr	r3, [sp, #12]
 8012392:	f04f 0e01 	mov.w	lr, #1
 8012396:	f853 2904 	ldr.w	r2, [r3], #-4
 801239a:	f10e 0e01 	add.w	lr, lr, #1
 801239e:	2a00      	cmp	r2, #0
 80123a0:	d0f9      	beq.n	8012396 <__kernel_rem_pio2f+0x226>
 80123a2:	44ae      	add	lr, r5
 80123a4:	1c6b      	adds	r3, r5, #1
 80123a6:	4573      	cmp	r3, lr
 80123a8:	dc2d      	bgt.n	8012406 <__kernel_rem_pio2f+0x296>
 80123aa:	9a02      	ldr	r2, [sp, #8]
 80123ac:	1898      	adds	r0, r3, r2
 80123ae:	9a01      	ldr	r2, [sp, #4]
 80123b0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80123b4:	1951      	adds	r1, r2, r5
 80123b6:	eb0e 0c02 	add.w	ip, lr, r2
 80123ba:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80123bc:	3801      	subs	r0, #1
 80123be:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80123c2:	aa1a      	add	r2, sp, #104	; 0x68
 80123c4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80123c8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80123cc:	aa42      	add	r2, sp, #264	; 0x108
 80123ce:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80123d2:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80123d6:	ee07 3a90 	vmov	s15, r3
 80123da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123de:	2f00      	cmp	r7, #0
 80123e0:	ece1 7a01 	vstmia	r1!, {s15}
 80123e4:	eddf 7a45 	vldr	s15, [pc, #276]	; 80124fc <__kernel_rem_pio2f+0x38c>
 80123e8:	db09      	blt.n	80123fe <__kernel_rem_pio2f+0x28e>
 80123ea:	464b      	mov	r3, r9
 80123ec:	460a      	mov	r2, r1
 80123ee:	ecf3 6a01 	vldmia	r3!, {s13}
 80123f2:	ed32 7a01 	vldmdb	r2!, {s14}
 80123f6:	42a3      	cmp	r3, r4
 80123f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123fc:	d1f7      	bne.n	80123ee <__kernel_rem_pio2f+0x27e>
 80123fe:	4561      	cmp	r1, ip
 8012400:	ece5 7a01 	vstmia	r5!, {s15}
 8012404:	d1e5      	bne.n	80123d2 <__kernel_rem_pio2f+0x262>
 8012406:	4675      	mov	r5, lr
 8012408:	e718      	b.n	801223c <__kernel_rem_pio2f+0xcc>
 801240a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801240e:	ee30 9a49 	vsub.f32	s18, s0, s18
 8012412:	2800      	cmp	r0, #0
 8012414:	d09c      	beq.n	8012350 <__kernel_rem_pio2f+0x1e0>
 8012416:	4650      	mov	r0, sl
 8012418:	9105      	str	r1, [sp, #20]
 801241a:	f000 fa81 	bl	8012920 <scalbnf>
 801241e:	ee39 9a40 	vsub.f32	s18, s18, s0
 8012422:	9905      	ldr	r1, [sp, #20]
 8012424:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242c:	d095      	beq.n	801235a <__kernel_rem_pio2f+0x1ea>
 801242e:	eeb0 0a49 	vmov.f32	s0, s18
 8012432:	f1ca 0000 	rsb	r0, sl, #0
 8012436:	ee09 ba90 	vmov	s19, fp
 801243a:	4688      	mov	r8, r1
 801243c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8012440:	f000 fa6e 	bl	8012920 <scalbnf>
 8012444:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80124f0 <__kernel_rem_pio2f+0x380>
 8012448:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012450:	f2c0 817e 	blt.w	8012750 <__kernel_rem_pio2f+0x5e0>
 8012454:	eddf 7a25 	vldr	s15, [pc, #148]	; 80124ec <__kernel_rem_pio2f+0x37c>
 8012458:	ee60 7a27 	vmul.f32	s15, s0, s15
 801245c:	a906      	add	r1, sp, #24
 801245e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012462:	1c6b      	adds	r3, r5, #1
 8012464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012468:	f10a 0a08 	add.w	sl, sl, #8
 801246c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012474:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012478:	ee10 2a10 	vmov	r2, s0
 801247c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
 8012480:	ee17 2a90 	vmov	r2, s15
 8012484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012488:	4650      	mov	r0, sl
 801248a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	f000 fa46 	bl	8012920 <scalbnf>
 8012494:	9b01      	ldr	r3, [sp, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	f2c0 8166 	blt.w	8012768 <__kernel_rem_pio2f+0x5f8>
 801249c:	009f      	lsls	r7, r3, #2
 801249e:	ac42      	add	r4, sp, #264	; 0x108
 80124a0:	aa06      	add	r2, sp, #24
 80124a2:	1d38      	adds	r0, r7, #4
 80124a4:	eb04 0e07 	add.w	lr, r4, r7
 80124a8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80124ec <__kernel_rem_pio2f+0x37c>
 80124ac:	4410      	add	r0, r2
 80124ae:	f10e 0204 	add.w	r2, lr, #4
 80124b2:	ed70 7a01 	vldmdb	r0!, {s15}
 80124b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80124be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80124c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80124c6:	42a2      	cmp	r2, r4
 80124c8:	d1f3      	bne.n	80124b2 <__kernel_rem_pio2f+0x342>
 80124ca:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 80124ce:	2500      	movs	r5, #0
 80124d0:	2e00      	cmp	r6, #0
 80124d2:	f2c0 8121 	blt.w	8012718 <__kernel_rem_pio2f+0x5a8>
 80124d6:	4807      	ldr	r0, [pc, #28]	; (80124f4 <__kernel_rem_pio2f+0x384>)
 80124d8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80124f8 <__kernel_rem_pio2f+0x388>
 80124dc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80124fc <__kernel_rem_pio2f+0x38c>
 80124e0:	4671      	mov	r1, lr
 80124e2:	2200      	movs	r2, #0
 80124e4:	e011      	b.n	801250a <__kernel_rem_pio2f+0x39a>
 80124e6:	bf00      	nop
 80124e8:	08013140 	.word	0x08013140
 80124ec:	3b800000 	.word	0x3b800000
 80124f0:	43800000 	.word	0x43800000
 80124f4:	08013150 	.word	0x08013150
 80124f8:	3fc90000 	.word	0x3fc90000
 80124fc:	00000000 	.word	0x00000000
 8012500:	4295      	cmp	r5, r2
 8012502:	db09      	blt.n	8012518 <__kernel_rem_pio2f+0x3a8>
 8012504:	3004      	adds	r0, #4
 8012506:	ed90 7a00 	vldr	s14, [r0]
 801250a:	ecf1 6a01 	vldmia	r1!, {s13}
 801250e:	3201      	adds	r2, #1
 8012510:	4296      	cmp	r6, r2
 8012512:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012516:	daf3      	bge.n	8012500 <__kernel_rem_pio2f+0x390>
 8012518:	f1ae 0e04 	sub.w	lr, lr, #4
 801251c:	aa56      	add	r2, sp, #344	; 0x158
 801251e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012522:	45f4      	cmp	ip, lr
 8012524:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8012528:	f105 0501 	add.w	r5, r5, #1
 801252c:	d1d0      	bne.n	80124d0 <__kernel_rem_pio2f+0x360>
 801252e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012530:	2a03      	cmp	r2, #3
 8012532:	f200 80ae 	bhi.w	8012692 <__kernel_rem_pio2f+0x522>
 8012536:	e8df f002 	tbb	[pc, r2]
 801253a:	b5dc      	.short	0xb5dc
 801253c:	50b5      	.short	0x50b5
 801253e:	d110      	bne.n	8012562 <__kernel_rem_pio2f+0x3f2>
 8012540:	1e6b      	subs	r3, r5, #1
 8012542:	aa06      	add	r2, sp, #24
 8012544:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012548:	1209      	asrs	r1, r1, #8
 801254a:	e6c7      	b.n	80122dc <__kernel_rem_pio2f+0x16c>
 801254c:	1e6a      	subs	r2, r5, #1
 801254e:	ab06      	add	r3, sp, #24
 8012550:	f10d 0e18 	add.w	lr, sp, #24
 8012554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801255c:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
 8012560:	e6f4      	b.n	801234c <__kernel_rem_pio2f+0x1dc>
 8012562:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012566:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	da0b      	bge.n	8012588 <__kernel_rem_pio2f+0x418>
 8012570:	2100      	movs	r1, #0
 8012572:	e6ed      	b.n	8012350 <__kernel_rem_pio2f+0x1e0>
 8012574:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80124fc <__kernel_rem_pio2f+0x38c>
 8012578:	ece5 7a01 	vstmia	r5!, {s15}
 801257c:	4575      	cmp	r5, lr
 801257e:	f100 0004 	add.w	r0, r0, #4
 8012582:	f47f ae34 	bne.w	80121ee <__kernel_rem_pio2f+0x7e>
 8012586:	e647      	b.n	8012218 <__kernel_rem_pio2f+0xa8>
 8012588:	2d00      	cmp	r5, #0
 801258a:	f10b 0b01 	add.w	fp, fp, #1
 801258e:	bfc8      	it	gt
 8012590:	2102      	movgt	r1, #2
 8012592:	f73f aeaa 	bgt.w	80122ea <__kernel_rem_pio2f+0x17a>
 8012596:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801259a:	ee37 9ac9 	vsub.f32	s18, s15, s18
 801259e:	2102      	movs	r1, #2
 80125a0:	e6d6      	b.n	8012350 <__kernel_rem_pio2f+0x1e0>
 80125a2:	aa06      	add	r2, sp, #24
 80125a4:	ee09 ba90 	vmov	s19, fp
 80125a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80125ac:	f8dd b010 	ldr.w	fp, [sp, #16]
 80125b0:	4673      	mov	r3, lr
 80125b2:	4688      	mov	r8, r1
 80125b4:	f1aa 0a08 	sub.w	sl, sl, #8
 80125b8:	2a00      	cmp	r2, #0
 80125ba:	f47f af65 	bne.w	8012488 <__kernel_rem_pio2f+0x318>
 80125be:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
 80125c2:	3a01      	subs	r2, #1
 80125c4:	a906      	add	r1, sp, #24
 80125c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80125ca:	f852 1904 	ldr.w	r1, [r2], #-4
 80125ce:	3b01      	subs	r3, #1
 80125d0:	f1aa 0a08 	sub.w	sl, sl, #8
 80125d4:	2900      	cmp	r1, #0
 80125d6:	d0f8      	beq.n	80125ca <__kernel_rem_pio2f+0x45a>
 80125d8:	e756      	b.n	8012488 <__kernel_rem_pio2f+0x318>
 80125da:	2b00      	cmp	r3, #0
 80125dc:	f340 80c1 	ble.w	8012762 <__kernel_rem_pio2f+0x5f2>
 80125e0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80125e4:	3a01      	subs	r2, #1
 80125e6:	0090      	lsls	r0, r2, #2
 80125e8:	a956      	add	r1, sp, #344	; 0x158
 80125ea:	19cd      	adds	r5, r1, r7
 80125ec:	1d04      	adds	r4, r0, #4
 80125ee:	a92e      	add	r1, sp, #184	; 0xb8
 80125f0:	3008      	adds	r0, #8
 80125f2:	ed15 7a28 	vldr	s14, [r5, #-160]	; 0xffffff60
 80125f6:	440c      	add	r4, r1
 80125f8:	4408      	add	r0, r1
 80125fa:	ad2f      	add	r5, sp, #188	; 0xbc
 80125fc:	ed74 7a01 	vldmdb	r4!, {s15}
 8012600:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012604:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012608:	ee77 7a87 	vadd.f32	s15, s15, s14
 801260c:	eeb0 7a66 	vmov.f32	s14, s13
 8012610:	ed60 7a01 	vstmdb	r0!, {s15}
 8012614:	42a8      	cmp	r0, r5
 8012616:	edc4 6a00 	vstr	s13, [r4]
 801261a:	d1ef      	bne.n	80125fc <__kernel_rem_pio2f+0x48c>
 801261c:	2b01      	cmp	r3, #1
 801261e:	f340 80a0 	ble.w	8012762 <__kernel_rem_pio2f+0x5f2>
 8012622:	0092      	lsls	r2, r2, #2
 8012624:	ab56      	add	r3, sp, #344	; 0x158
 8012626:	441f      	add	r7, r3
 8012628:	f102 0008 	add.w	r0, r2, #8
 801262c:	ab2e      	add	r3, sp, #184	; 0xb8
 801262e:	4418      	add	r0, r3
 8012630:	3204      	adds	r2, #4
 8012632:	ed17 7a28 	vldr	s14, [r7, #-160]	; 0xffffff60
 8012636:	4413      	add	r3, r2
 8012638:	ac30      	add	r4, sp, #192	; 0xc0
 801263a:	4602      	mov	r2, r0
 801263c:	ed73 7a01 	vldmdb	r3!, {s15}
 8012640:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012648:	ee77 7a87 	vadd.f32	s15, s15, s14
 801264c:	eeb0 7a66 	vmov.f32	s14, s13
 8012650:	ed62 7a01 	vstmdb	r2!, {s15}
 8012654:	4294      	cmp	r4, r2
 8012656:	edc3 6a00 	vstr	s13, [r3]
 801265a:	d1ef      	bne.n	801263c <__kernel_rem_pio2f+0x4cc>
 801265c:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 80124fc <__kernel_rem_pio2f+0x38c>
 8012660:	ed30 7a01 	vldmdb	r0!, {s14}
 8012664:	4284      	cmp	r4, r0
 8012666:	ee77 7a87 	vadd.f32	s15, s15, s14
 801266a:	d1f9      	bne.n	8012660 <__kernel_rem_pio2f+0x4f0>
 801266c:	4643      	mov	r3, r8
 801266e:	2b00      	cmp	r3, #0
 8012670:	d065      	beq.n	801273e <__kernel_rem_pio2f+0x5ce>
 8012672:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8012676:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801267a:	eef1 7a67 	vneg.f32	s15, s15
 801267e:	eef1 6a66 	vneg.f32	s13, s13
 8012682:	eeb1 7a47 	vneg.f32	s14, s14
 8012686:	edcb 7a02 	vstr	s15, [fp, #8]
 801268a:	edcb 6a00 	vstr	s13, [fp]
 801268e:	ed8b 7a01 	vstr	s14, [fp, #4]
 8012692:	ee19 3a90 	vmov	r3, s19
 8012696:	f003 0007 	and.w	r0, r3, #7
 801269a:	b057      	add	sp, #348	; 0x15c
 801269c:	ecbd 8b04 	vpop	{d8-d9}
 80126a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a4:	1d3a      	adds	r2, r7, #4
 80126a6:	a82e      	add	r0, sp, #184	; 0xb8
 80126a8:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 80124fc <__kernel_rem_pio2f+0x38c>
 80126ac:	4402      	add	r2, r0
 80126ae:	ed32 7a01 	vldmdb	r2!, {s14}
 80126b2:	4282      	cmp	r2, r0
 80126b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126b8:	d1f9      	bne.n	80126ae <__kernel_rem_pio2f+0x53e>
 80126ba:	4642      	mov	r2, r8
 80126bc:	b37a      	cbz	r2, 801271e <__kernel_rem_pio2f+0x5ae>
 80126be:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80126c2:	eeb1 7a67 	vneg.f32	s14, s15
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80126cc:	ed8b 7a00 	vstr	s14, [fp]
 80126d0:	dd0a      	ble.n	80126e8 <__kernel_rem_pio2f+0x578>
 80126d2:	a82f      	add	r0, sp, #188	; 0xbc
 80126d4:	2201      	movs	r2, #1
 80126d6:	ecb0 7a01 	vldmia	r0!, {s14}
 80126da:	3201      	adds	r2, #1
 80126dc:	4293      	cmp	r3, r2
 80126de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126e2:	daf8      	bge.n	80126d6 <__kernel_rem_pio2f+0x566>
 80126e4:	4643      	mov	r3, r8
 80126e6:	b10b      	cbz	r3, 80126ec <__kernel_rem_pio2f+0x57c>
 80126e8:	eef1 7a67 	vneg.f32	s15, s15
 80126ec:	edcb 7a01 	vstr	s15, [fp, #4]
 80126f0:	e7cf      	b.n	8012692 <__kernel_rem_pio2f+0x522>
 80126f2:	aa56      	add	r2, sp, #344	; 0x158
 80126f4:	443a      	add	r2, r7
 80126f6:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 80124fc <__kernel_rem_pio2f+0x38c>
 80126fa:	3a9c      	subs	r2, #156	; 0x9c
 80126fc:	ed32 7a01 	vldmdb	r2!, {s14}
 8012700:	3b01      	subs	r3, #1
 8012702:	1c59      	adds	r1, r3, #1
 8012704:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012708:	d1f8      	bne.n	80126fc <__kernel_rem_pio2f+0x58c>
 801270a:	4643      	mov	r3, r8
 801270c:	b10b      	cbz	r3, 8012712 <__kernel_rem_pio2f+0x5a2>
 801270e:	eef1 7a67 	vneg.f32	s15, s15
 8012712:	edcb 7a00 	vstr	s15, [fp]
 8012716:	e7bc      	b.n	8012692 <__kernel_rem_pio2f+0x522>
 8012718:	ed5f 7a88 	vldr	s15, [pc, #-544]	; 80124fc <__kernel_rem_pio2f+0x38c>
 801271c:	e6fc      	b.n	8012518 <__kernel_rem_pio2f+0x3a8>
 801271e:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8012722:	edcb 7a00 	vstr	s15, [fp]
 8012726:	2b00      	cmp	r3, #0
 8012728:	ee77 7a67 	vsub.f32	s15, s14, s15
 801272c:	dcd1      	bgt.n	80126d2 <__kernel_rem_pio2f+0x562>
 801272e:	edcb 7a01 	vstr	s15, [fp, #4]
 8012732:	e7ae      	b.n	8012692 <__kernel_rem_pio2f+0x522>
 8012734:	f04f 0e01 	mov.w	lr, #1
 8012738:	e633      	b.n	80123a2 <__kernel_rem_pio2f+0x232>
 801273a:	2000      	movs	r0, #0
 801273c:	e5f2      	b.n	8012324 <__kernel_rem_pio2f+0x1b4>
 801273e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8012740:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012742:	edcb 7a02 	vstr	s15, [fp, #8]
 8012746:	f8cb 2000 	str.w	r2, [fp]
 801274a:	f8cb 3004 	str.w	r3, [fp, #4]
 801274e:	e7a0      	b.n	8012692 <__kernel_rem_pio2f+0x522>
 8012750:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012754:	a906      	add	r1, sp, #24
 8012756:	ee10 2a10 	vmov	r2, s0
 801275a:	462b      	mov	r3, r5
 801275c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
 8012760:	e692      	b.n	8012488 <__kernel_rem_pio2f+0x318>
 8012762:	ed5f 7a9a 	vldr	s15, [pc, #-616]	; 80124fc <__kernel_rem_pio2f+0x38c>
 8012766:	e781      	b.n	801266c <__kernel_rem_pio2f+0x4fc>
 8012768:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801276a:	2a03      	cmp	r2, #3
 801276c:	d891      	bhi.n	8012692 <__kernel_rem_pio2f+0x522>
 801276e:	a101      	add	r1, pc, #4	; (adr r1, 8012774 <__kernel_rem_pio2f+0x604>)
 8012770:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012774:	08012791 	.word	0x08012791
 8012778:	0801278b 	.word	0x0801278b
 801277c:	0801278b 	.word	0x0801278b
 8012780:	08012763 	.word	0x08012763
 8012784:	9b01      	ldr	r3, [sp, #4]
 8012786:	009c      	lsls	r4, r3, #2
 8012788:	e546      	b.n	8012218 <__kernel_rem_pio2f+0xa8>
 801278a:	ed5f 7aa4 	vldr	s15, [pc, #-656]	; 80124fc <__kernel_rem_pio2f+0x38c>
 801278e:	e794      	b.n	80126ba <__kernel_rem_pio2f+0x54a>
 8012790:	ed5f 7aa6 	vldr	s15, [pc, #-664]	; 80124fc <__kernel_rem_pio2f+0x38c>
 8012794:	e7b9      	b.n	801270a <__kernel_rem_pio2f+0x59a>
 8012796:	bf00      	nop
	...

080127a0 <__kernel_sinf>:
 80127a0:	ee10 3a10 	vmov	r3, s0
 80127a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80127ac:	da04      	bge.n	80127b8 <__kernel_sinf+0x18>
 80127ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127b2:	ee17 3a90 	vmov	r3, s15
 80127b6:	b323      	cbz	r3, 8012802 <__kernel_sinf+0x62>
 80127b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80127bc:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8012814 <__kernel_sinf+0x74>
 80127c0:	eddf 5a15 	vldr	s11, [pc, #84]	; 8012818 <__kernel_sinf+0x78>
 80127c4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801281c <__kernel_sinf+0x7c>
 80127c8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012820 <__kernel_sinf+0x80>
 80127cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012824 <__kernel_sinf+0x84>
 80127d0:	eee7 5a85 	vfma.f32	s11, s15, s10
 80127d4:	ee20 5a27 	vmul.f32	s10, s0, s15
 80127d8:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80127dc:	eee7 6a86 	vfma.f32	s13, s15, s12
 80127e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80127e4:	b170      	cbz	r0, 8012804 <__kernel_sinf+0x64>
 80127e6:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80127ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80127ee:	eea0 7aa6 	vfma.f32	s14, s1, s13
 80127f2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8012828 <__kernel_sinf+0x88>
 80127f6:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80127fa:	eee5 0a26 	vfma.f32	s1, s10, s13
 80127fe:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012802:	4770      	bx	lr
 8012804:	eddf 6a09 	vldr	s13, [pc, #36]	; 801282c <__kernel_sinf+0x8c>
 8012808:	eee7 6a87 	vfma.f32	s13, s15, s14
 801280c:	eea5 0a26 	vfma.f32	s0, s10, s13
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop
 8012814:	2f2ec9d3 	.word	0x2f2ec9d3
 8012818:	b2d72f34 	.word	0xb2d72f34
 801281c:	3638ef1b 	.word	0x3638ef1b
 8012820:	b9500d01 	.word	0xb9500d01
 8012824:	3c088889 	.word	0x3c088889
 8012828:	3e2aaaab 	.word	0x3e2aaaab
 801282c:	be2aaaab 	.word	0xbe2aaaab

08012830 <matherr>:
 8012830:	2000      	movs	r0, #0
 8012832:	4770      	bx	lr
	...

08012840 <fabsf>:
 8012840:	ee10 3a10 	vmov	r3, s0
 8012844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012848:	ee00 3a10 	vmov	s0, r3
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop

08012850 <floorf>:
 8012850:	ee10 2a10 	vmov	r2, s0
 8012854:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012858:	0dcb      	lsrs	r3, r1, #23
 801285a:	3b7f      	subs	r3, #127	; 0x7f
 801285c:	2b16      	cmp	r3, #22
 801285e:	dc17      	bgt.n	8012890 <floorf+0x40>
 8012860:	2b00      	cmp	r3, #0
 8012862:	ee10 0a10 	vmov	r0, s0
 8012866:	db19      	blt.n	801289c <floorf+0x4c>
 8012868:	491a      	ldr	r1, [pc, #104]	; (80128d4 <floorf+0x84>)
 801286a:	4119      	asrs	r1, r3
 801286c:	420a      	tst	r2, r1
 801286e:	d022      	beq.n	80128b6 <floorf+0x66>
 8012870:	eddf 7a19 	vldr	s15, [pc, #100]	; 80128d8 <floorf+0x88>
 8012874:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012880:	dd19      	ble.n	80128b6 <floorf+0x66>
 8012882:	2a00      	cmp	r2, #0
 8012884:	db18      	blt.n	80128b8 <floorf+0x68>
 8012886:	ea20 0301 	bic.w	r3, r0, r1
 801288a:	ee00 3a10 	vmov	s0, r3
 801288e:	4770      	bx	lr
 8012890:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012894:	d30f      	bcc.n	80128b6 <floorf+0x66>
 8012896:	ee30 0a00 	vadd.f32	s0, s0, s0
 801289a:	4770      	bx	lr
 801289c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80128d8 <floorf+0x88>
 80128a0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80128a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ac:	dd03      	ble.n	80128b6 <floorf+0x66>
 80128ae:	2a00      	cmp	r2, #0
 80128b0:	db08      	blt.n	80128c4 <floorf+0x74>
 80128b2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80128dc <floorf+0x8c>
 80128b6:	4770      	bx	lr
 80128b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80128bc:	fa42 f303 	asr.w	r3, r2, r3
 80128c0:	4418      	add	r0, r3
 80128c2:	e7e0      	b.n	8012886 <floorf+0x36>
 80128c4:	2900      	cmp	r1, #0
 80128c6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80128ca:	bf18      	it	ne
 80128cc:	eeb0 0a67 	vmovne.f32	s0, s15
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop
 80128d4:	007fffff 	.word	0x007fffff
 80128d8:	7149f2ca 	.word	0x7149f2ca
 80128dc:	00000000 	.word	0x00000000

080128e0 <__fpclassifyf>:
 80128e0:	ee10 3a10 	vmov	r3, s0
 80128e4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80128e8:	d101      	bne.n	80128ee <__fpclassifyf+0xe>
 80128ea:	2002      	movs	r0, #2
 80128ec:	4770      	bx	lr
 80128ee:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80128f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80128f6:	d201      	bcs.n	80128fc <__fpclassifyf+0x1c>
 80128f8:	2004      	movs	r0, #4
 80128fa:	4770      	bx	lr
 80128fc:	4b05      	ldr	r3, [pc, #20]	; (8012914 <__fpclassifyf+0x34>)
 80128fe:	1e42      	subs	r2, r0, #1
 8012900:	429a      	cmp	r2, r3
 8012902:	d801      	bhi.n	8012908 <__fpclassifyf+0x28>
 8012904:	2003      	movs	r0, #3
 8012906:	4770      	bx	lr
 8012908:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 801290c:	fab0 f080 	clz	r0, r0
 8012910:	0940      	lsrs	r0, r0, #5
 8012912:	4770      	bx	lr
 8012914:	007ffffe 	.word	0x007ffffe
	...

08012920 <scalbnf>:
 8012920:	b508      	push	{r3, lr}
 8012922:	ee10 3a10 	vmov	r3, s0
 8012926:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801292a:	ed2d 8b02 	vpush	{d8}
 801292e:	d011      	beq.n	8012954 <scalbnf+0x34>
 8012930:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012934:	d211      	bcs.n	801295a <scalbnf+0x3a>
 8012936:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801293a:	d313      	bcc.n	8012964 <scalbnf+0x44>
 801293c:	0dd2      	lsrs	r2, r2, #23
 801293e:	4402      	add	r2, r0
 8012940:	2afe      	cmp	r2, #254	; 0xfe
 8012942:	dc2e      	bgt.n	80129a2 <scalbnf+0x82>
 8012944:	2a00      	cmp	r2, #0
 8012946:	dd1a      	ble.n	801297e <scalbnf+0x5e>
 8012948:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801294c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012950:	ee00 3a10 	vmov	s0, r3
 8012954:	ecbd 8b02 	vpop	{d8}
 8012958:	bd08      	pop	{r3, pc}
 801295a:	ecbd 8b02 	vpop	{d8}
 801295e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012962:	bd08      	pop	{r3, pc}
 8012964:	4b1d      	ldr	r3, [pc, #116]	; (80129dc <scalbnf+0xbc>)
 8012966:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80129e0 <scalbnf+0xc0>
 801296a:	4298      	cmp	r0, r3
 801296c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012970:	db22      	blt.n	80129b8 <scalbnf+0x98>
 8012972:	ee10 3a10 	vmov	r3, s0
 8012976:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801297a:	3a19      	subs	r2, #25
 801297c:	e7df      	b.n	801293e <scalbnf+0x1e>
 801297e:	f112 0f16 	cmn.w	r2, #22
 8012982:	da1e      	bge.n	80129c2 <scalbnf+0xa2>
 8012984:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012988:	4298      	cmp	r0, r3
 801298a:	dc0a      	bgt.n	80129a2 <scalbnf+0x82>
 801298c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80129e4 <scalbnf+0xc4>
 8012990:	eef0 0a40 	vmov.f32	s1, s0
 8012994:	eeb0 0a48 	vmov.f32	s0, s16
 8012998:	f000 f82a 	bl	80129f0 <copysignf>
 801299c:	ee20 0a08 	vmul.f32	s0, s0, s16
 80129a0:	e7d8      	b.n	8012954 <scalbnf+0x34>
 80129a2:	ed9f 8a11 	vldr	s16, [pc, #68]	; 80129e8 <scalbnf+0xc8>
 80129a6:	eef0 0a40 	vmov.f32	s1, s0
 80129aa:	eeb0 0a48 	vmov.f32	s0, s16
 80129ae:	f000 f81f 	bl	80129f0 <copysignf>
 80129b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80129b6:	e7cd      	b.n	8012954 <scalbnf+0x34>
 80129b8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80129e4 <scalbnf+0xc4>
 80129bc:	ee20 0a20 	vmul.f32	s0, s0, s1
 80129c0:	e7c8      	b.n	8012954 <scalbnf+0x34>
 80129c2:	3219      	adds	r2, #25
 80129c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80129c8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80129cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80129ec <scalbnf+0xcc>
 80129d0:	ee00 3a10 	vmov	s0, r3
 80129d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80129d8:	e7bc      	b.n	8012954 <scalbnf+0x34>
 80129da:	bf00      	nop
 80129dc:	ffff3cb0 	.word	0xffff3cb0
 80129e0:	4c000000 	.word	0x4c000000
 80129e4:	0da24260 	.word	0x0da24260
 80129e8:	7149f2ca 	.word	0x7149f2ca
 80129ec:	33000000 	.word	0x33000000

080129f0 <copysignf>:
 80129f0:	ee10 3a10 	vmov	r3, s0
 80129f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80129f8:	ee10 3a90 	vmov	r3, s1
 80129fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a00:	4313      	orrs	r3, r2
 8012a02:	ee00 3a10 	vmov	s0, r3
 8012a06:	4770      	bx	lr
	...

08012a10 <__errno>:
 8012a10:	4b01      	ldr	r3, [pc, #4]	; (8012a18 <__errno+0x8>)
 8012a12:	6818      	ldr	r0, [r3, #0]
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop
 8012a18:	20000c68 	.word	0x20000c68
 8012a1c:	00000000 	.word	0x00000000
 8012a20:	656c6469 	.word	0x656c6469
	...

08012a30 <ch_debug>:
 8012a30:	6e69616d 18011600 08480404 1814100c     main......H.....
 8012a40:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08012a50 <vmt>:
 8012a50:	0800d841 0800d821 0800d881 0800d861     A...!.......a...
 8012a60:	0800d871 0800d851 0800d831 0800d811     q...Q...1.......

08012a70 <zero_status>:
	...

08012a80 <active_status>:
	...

08012a90 <halted_status>:
 8012a90:	00000001 00000000 00000000 00000000     ................

08012aa0 <_stm32_dma_streams>:
 8012aa0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8012ab0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8012ac0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8012ad0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8012ae0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8012af0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8012b00:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8012b10:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8012b20:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8012b30:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8012b40:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8012b50:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08012b60 <fsparams>:
 8012b60:	00000080 00000140 00000003 00000000     ....@...........

08012b70 <ep0config>:
 8012b70:	00000000 0800d9c1 0800dd01 0800ddf1     ................
 8012b80:	00400040 20001260 20001260 00000001     @.@.`.. `.. ....
 8012b90:	20001274 00000000 00000000 00000000     t.. ............

08012ba0 <default_config>:
 8012ba0:	0001c200 40000000 00000000 00000000     .......@........

08012bb0 <pal_default_config>:
 8012bb0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8012bc0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8012bd0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8012be0:	04000000 00000040 02208001 00000000     ....@..... .....
 8012bf0:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8012c00:	00060600 55000100 00000000 ffffffff     .......U........
 8012c10:	00555055 00000fff 00000000 00000000     UPU.............
 8012c20:	00000040 00000000 ffffffff 00000000     @...............
 8012c30:	0000ffff 00000000 00000000 00000000     ................
 8012c40:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8012c60:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8012c7c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8012c98:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8012cb0:	6c756e28 0000296c 00000000 00000000     (null)..........

08012cc0 <pow10>:
 8012cc0:	0000000a 00000064 000003e8 00002710     ....d........'..
 8012cd0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8012ce0:	3b9aca00 00000000 00000000 00000000     ...;............
 8012cf0:	43444c42 72657020 69646f69 00000063     BLDC periodic...
 8012d00:	636f726f 6c625f61 0a0d6364 00000000     oroca_bldc......
 8012d10:	72727563 666f5f30 74657366 25203a20     curr0_offset : %
 8012d20:	000a0d75 72727563 666f5f31 74657366     u...curr1_offset
 8012d30:	25203a20 000a0d75 7770636d 6e695f6d      : %u...mcpwm_in
 8012d40:	2e2e7469 0a0d2e2e 00000000 00000000     it..............
 8012d50:	656d6954 0074756f 00000000 00000000     Timeout.........
 8012d60:	5f505041 004d5050 0000002d 0000002e     APP_PPM.-.......
 8012d70:	5f707061 5f6d7070 72617473 2e2e2e74     app_ppm_start...
 8012d80:	0a0d2e2e 00000000 00000000 00000000     ................
 8012d90:	74727173 00000066 00000000 00000000     sqrtf...........

08012da0 <npio2_hw>:
 8012da0:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8012db0:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8012dc0:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8012dd0:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8012de0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8012df0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8012e00:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 8012e10:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

08012e20 <two_over_pi>:
 8012e20:	000000a2 000000f9 00000083 0000006e     ............n...
 8012e30:	0000004e 00000044 00000015 00000029     N...D.......)...
 8012e40:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8012e50:	000000f5 00000034 000000dd 000000c0     ....4...........
 8012e60:	000000db 00000062 00000095 00000099     ....b...........
 8012e70:	0000003c 00000043 00000090 00000041     <...C.......A...
 8012e80:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8012e90:	000000de 000000bb 000000c5 00000061     ............a...
 8012ea0:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8012eb0:	00000042 0000004d 000000d2 000000e0     B...M...........
 8012ec0:	00000006 00000049 0000002e 000000ea     ....I...........
 8012ed0:	00000009 000000d1 00000092 0000001c     ................
 8012ee0:	000000fe 0000001d 000000eb 0000001c     ................
 8012ef0:	000000b1 00000029 000000a7 0000003e     ....).......>...
 8012f00:	000000e8 00000082 00000035 000000f5     ........5.......
 8012f10:	0000002e 000000bb 00000044 00000084     ........D.......
 8012f20:	000000e9 0000009c 00000070 00000026     ........p...&...
 8012f30:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8012f40:	00000039 00000091 000000d6 00000039     9...........9...
 8012f50:	00000083 00000053 00000039 000000f4     ....S...9.......
 8012f60:	0000009c 00000084 0000005f 0000008b     ........_.......
 8012f70:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8012f80:	0000001f 000000f8 00000097 000000ff     ................
 8012f90:	000000de 00000005 00000098 0000000f     ................
 8012fa0:	000000ef 0000002f 00000011 0000008b     ..../...........
 8012fb0:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8012fc0:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8012fd0:	00000027 000000cb 00000009 000000b7     '...............
 8012fe0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8012ff0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8013000:	00000075 00000027 000000ba 000000c7     u...'...........
 8013010:	000000eb 000000e5 000000f1 0000007b     ............{...
 8013020:	0000003d 00000007 00000039 000000f7     =.......9.......
 8013030:	0000008a 00000052 00000092 000000ea     ....R...........
 8013040:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8013050:	0000001f 0000008d 0000005d 00000008     ........].......
 8013060:	00000056 00000003 00000030 00000046     V.......0...F...
 8013070:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8013080:	000000f0 000000cf 000000bc 00000020     ............ ...
 8013090:	0000009a 000000f4 00000036 0000001d     ........6.......
 80130a0:	000000a9 000000e3 00000091 00000061     ............a...
 80130b0:	0000005e 000000e6 0000001b 00000008     ^...............
 80130c0:	00000065 00000099 00000085 0000005f     e..........._...
 80130d0:	00000014 000000a0 00000068 00000040     ........h...@...
 80130e0:	0000008d 000000ff 000000d8 00000080     ................
 80130f0:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8013100:	00000006 00000006 00000015 00000056     ............V...
 8013110:	000000ca 00000073 000000a8 000000c9     ....s...........
 8013120:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8013130:	0000008c 0000006b 00000000 00000000     ....k...........

08013140 <init_jk>:
 8013140:	00000004 00000007 00000009 00000000     ................

08013150 <PIo2>:
 8013150:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8013160:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8013170:	1fc40000 1bc60000 17440000 00000000     ..........D.....
 8013180:	00000043                                C...
